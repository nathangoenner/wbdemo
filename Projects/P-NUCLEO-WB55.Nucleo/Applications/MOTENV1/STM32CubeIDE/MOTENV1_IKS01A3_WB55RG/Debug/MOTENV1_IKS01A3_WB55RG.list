
MOTENV1_IKS01A3_WB55RG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000140  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00022790  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b00  080228d0  080228d0  000328d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080233d0  080233d0  000333d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080233d4  080233d4  000333d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00001578  20000008  080233d8  00040008  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 TIMERSERVER_CONTEXT 000000fa  20001580  08024950  00041580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_APP_CONTEXT 0000016c  2000167c  08024a4a  0004167c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 0000005d  200017e8  08024bb6  000417e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 0000000e  20001848  08024c13  00041848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000065f4  20001858  08024c21  00041858  2**3
                  ALLOC
 11 ._user_heap_stack 00008800  20007e4c  08024c21  00047e4c  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  00041856  2**0
                  CONTENTS, READONLY
 13 MAPPING_TABLE 00000020  20030000  20030000  00050000  2**2
                  ALLOC
 14 MB_MEM1       00000194  20030020  20030020  00050000  2**2
                  ALLOC
 15 MB_MEM2       00000880  200301b4  200301b4  00050000  2**2
                  ALLOC
 16 .debug_line   00049af0  00000000  00000000  00041884  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_info   000b1f95  00000000  00000000  0008b374  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_abbrev 0000de9a  00000000  00000000  0013d309  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_aranges 00003c08  00000000  00000000  0014b1a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    00107c68  00000000  00000000  0014edb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_ranges 0000bd80  00000000  00000000  00256a18  2**3
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_loc    00051b55  00000000  00000000  00262798  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_macro  00035be9  00000000  00000000  002b42ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .comment      00000178  00000000  00000000  002e9ed6  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000e188  00000000  00000000  002ea050  2**2
                  CONTENTS, READONLY, DEBUGGING
 26 .stabstr      0000014d  00000000  00000000  002f81d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20001858 	.word	0x20001858
 800015c:	00000000 	.word	0x00000000
 8000160:	080228b8 	.word	0x080228b8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000185c 	.word	0x2000185c
 800017c:	080228b8 	.word	0x080228b8

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	; 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002be:	f1a4 0401 	sub.w	r4, r4, #1
 80002c2:	d1e9      	bne.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800046a:	bf08      	it	eq
 800046c:	4770      	bxeq	lr
 800046e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000472:	bf04      	itt	eq
 8000474:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000488:	e71c      	b.n	80002c4 <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_ul2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f04f 0500 	mov.w	r5, #0
 800049a:	e00a      	b.n	80004b2 <__aeabi_l2d+0x16>

0800049c <__aeabi_l2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004aa:	d502      	bpl.n	80004b2 <__aeabi_l2d+0x16>
 80004ac:	4240      	negs	r0, r0
 80004ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004be:	f43f aed8 	beq.w	8000272 <__adddf3+0xe6>
 80004c2:	f04f 0203 	mov.w	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e2:	fa20 f002 	lsr.w	r0, r0, r2
 80004e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ea:	ea40 000e 	orr.w	r0, r0, lr
 80004ee:	fa21 f102 	lsr.w	r1, r1, r2
 80004f2:	4414      	add	r4, r2
 80004f4:	e6bd      	b.n	8000272 <__adddf3+0xe6>
 80004f6:	bf00      	nop

080004f8 <__aeabi_dmul>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000506:	bf1d      	ittte	ne
 8000508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800050c:	ea94 0f0c 	teqne	r4, ip
 8000510:	ea95 0f0c 	teqne	r5, ip
 8000514:	f000 f8de 	bleq	80006d4 <__aeabi_dmul+0x1dc>
 8000518:	442c      	add	r4, r5
 800051a:	ea81 0603 	eor.w	r6, r1, r3
 800051e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800052a:	bf18      	it	ne
 800052c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000530:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000534:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000538:	d038      	beq.n	80005ac <__aeabi_dmul+0xb4>
 800053a:	fba0 ce02 	umull	ip, lr, r0, r2
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000546:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800054a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054e:	f04f 0600 	mov.w	r6, #0
 8000552:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000556:	f09c 0f00 	teq	ip, #0
 800055a:	bf18      	it	ne
 800055c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000560:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000564:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000568:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800056c:	d204      	bcs.n	8000578 <__aeabi_dmul+0x80>
 800056e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000572:	416d      	adcs	r5, r5
 8000574:	eb46 0606 	adc.w	r6, r6, r6
 8000578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800057c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800058c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000590:	bf88      	it	hi
 8000592:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000596:	d81e      	bhi.n	80005d6 <__aeabi_dmul+0xde>
 8000598:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800059c:	bf08      	it	eq
 800059e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005a2:	f150 0000 	adcs.w	r0, r0, #0
 80005a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b0:	ea46 0101 	orr.w	r1, r6, r1
 80005b4:	ea40 0002 	orr.w	r0, r0, r2
 80005b8:	ea81 0103 	eor.w	r1, r1, r3
 80005bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c0:	bfc2      	ittt	gt
 80005c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ca:	bd70      	popgt	{r4, r5, r6, pc}
 80005cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d0:	f04f 0e00 	mov.w	lr, #0
 80005d4:	3c01      	subs	r4, #1
 80005d6:	f300 80ab 	bgt.w	8000730 <__aeabi_dmul+0x238>
 80005da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005de:	bfde      	ittt	le
 80005e0:	2000      	movle	r0, #0
 80005e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005e6:	bd70      	pople	{r4, r5, r6, pc}
 80005e8:	f1c4 0400 	rsb	r4, r4, #0
 80005ec:	3c20      	subs	r4, #32
 80005ee:	da35      	bge.n	800065c <__aeabi_dmul+0x164>
 80005f0:	340c      	adds	r4, #12
 80005f2:	dc1b      	bgt.n	800062c <__aeabi_dmul+0x134>
 80005f4:	f104 0414 	add.w	r4, r4, #20
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f205 	lsl.w	r2, r1, r5
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000610:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	fa21 f604 	lsr.w	r6, r1, r4
 800061c:	eb42 0106 	adc.w	r1, r2, r6
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 040c 	rsb	r4, r4, #12
 8000630:	f1c4 0520 	rsb	r5, r4, #32
 8000634:	fa00 f304 	lsl.w	r3, r0, r4
 8000638:	fa20 f005 	lsr.w	r0, r0, r5
 800063c:	fa01 f204 	lsl.w	r2, r1, r4
 8000640:	ea40 0002 	orr.w	r0, r0, r2
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800064c:	f141 0100 	adc.w	r1, r1, #0
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f205 	lsl.w	r2, r0, r5
 8000664:	ea4e 0e02 	orr.w	lr, lr, r2
 8000668:	fa20 f304 	lsr.w	r3, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea43 0302 	orr.w	r3, r3, r2
 8000674:	fa21 f004 	lsr.w	r0, r1, r4
 8000678:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800067c:	fa21 f204 	lsr.w	r2, r1, r4
 8000680:	ea20 0002 	bic.w	r0, r0, r2
 8000684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f094 0f00 	teq	r4, #0
 8000698:	d10f      	bne.n	80006ba <__aeabi_dmul+0x1c2>
 800069a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800069e:	0040      	lsls	r0, r0, #1
 80006a0:	eb41 0101 	adc.w	r1, r1, r1
 80006a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3c01      	subeq	r4, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1a6>
 80006ae:	ea41 0106 	orr.w	r1, r1, r6
 80006b2:	f095 0f00 	teq	r5, #0
 80006b6:	bf18      	it	ne
 80006b8:	4770      	bxne	lr
 80006ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006be:	0052      	lsls	r2, r2, #1
 80006c0:	eb43 0303 	adc.w	r3, r3, r3
 80006c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c8:	bf08      	it	eq
 80006ca:	3d01      	subeq	r5, #1
 80006cc:	d0f7      	beq.n	80006be <__aeabi_dmul+0x1c6>
 80006ce:	ea43 0306 	orr.w	r3, r3, r6
 80006d2:	4770      	bx	lr
 80006d4:	ea94 0f0c 	teq	r4, ip
 80006d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006dc:	bf18      	it	ne
 80006de:	ea95 0f0c 	teqne	r5, ip
 80006e2:	d00c      	beq.n	80006fe <__aeabi_dmul+0x206>
 80006e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e8:	bf18      	it	ne
 80006ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ee:	d1d1      	bne.n	8000694 <__aeabi_dmul+0x19c>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	f04f 0000 	mov.w	r0, #0
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000702:	bf06      	itte	eq
 8000704:	4610      	moveq	r0, r2
 8000706:	4619      	moveq	r1, r3
 8000708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800070c:	d019      	beq.n	8000742 <__aeabi_dmul+0x24a>
 800070e:	ea94 0f0c 	teq	r4, ip
 8000712:	d102      	bne.n	800071a <__aeabi_dmul+0x222>
 8000714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000718:	d113      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800071a:	ea95 0f0c 	teq	r5, ip
 800071e:	d105      	bne.n	800072c <__aeabi_dmul+0x234>
 8000720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000724:	bf1c      	itt	ne
 8000726:	4610      	movne	r0, r2
 8000728:	4619      	movne	r1, r3
 800072a:	d10a      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd70      	pop	{r4, r5, r6, pc}
 8000742:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000746:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800074a:	bd70      	pop	{r4, r5, r6, pc}

0800074c <__aeabi_ddiv>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000752:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800075a:	bf1d      	ittte	ne
 800075c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000760:	ea94 0f0c 	teqne	r4, ip
 8000764:	ea95 0f0c 	teqne	r5, ip
 8000768:	f000 f8a7 	bleq	80008ba <__aeabi_ddiv+0x16e>
 800076c:	eba4 0405 	sub.w	r4, r4, r5
 8000770:	ea81 0e03 	eor.w	lr, r1, r3
 8000774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000778:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800077c:	f000 8088 	beq.w	8000890 <__aeabi_ddiv+0x144>
 8000780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000784:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800078c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000790:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800079c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007a4:	429d      	cmp	r5, r3
 80007a6:	bf08      	it	eq
 80007a8:	4296      	cmpeq	r6, r2
 80007aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007b2:	d202      	bcs.n	80007ba <__aeabi_ddiv+0x6e>
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	1ab6      	subs	r6, r6, r2
 80007bc:	eb65 0503 	sbc.w	r5, r5, r3
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000828:	ea55 0e06 	orrs.w	lr, r5, r6
 800082c:	d018      	beq.n	8000860 <__aeabi_ddiv+0x114>
 800082e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000836:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800083a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800084a:	d1c0      	bne.n	80007ce <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000850:	d10b      	bne.n	800086a <__aeabi_ddiv+0x11e>
 8000852:	ea41 0100 	orr.w	r1, r1, r0
 8000856:	f04f 0000 	mov.w	r0, #0
 800085a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800085e:	e7b6      	b.n	80007ce <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	bf04      	itt	eq
 8000866:	4301      	orreq	r1, r0
 8000868:	2000      	moveq	r0, #0
 800086a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800086e:	bf88      	it	hi
 8000870:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000874:	f63f aeaf 	bhi.w	80005d6 <__aeabi_dmul+0xde>
 8000878:	ebb5 0c03 	subs.w	ip, r5, r3
 800087c:	bf04      	itt	eq
 800087e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000886:	f150 0000 	adcs.w	r0, r0, #0
 800088a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800089c:	bfc2      	ittt	gt
 800089e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	popgt	{r4, r5, r6, pc}
 80008a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ac:	f04f 0e00 	mov.w	lr, #0
 80008b0:	3c01      	subs	r4, #1
 80008b2:	e690      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008b4:	ea45 0e06 	orr.w	lr, r5, r6
 80008b8:	e68d      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	bf08      	it	eq
 80008c4:	ea95 0f0c 	teqeq	r5, ip
 80008c8:	f43f af3b 	beq.w	8000742 <__aeabi_dmul+0x24a>
 80008cc:	ea94 0f0c 	teq	r4, ip
 80008d0:	d10a      	bne.n	80008e8 <__aeabi_ddiv+0x19c>
 80008d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d6:	f47f af34 	bne.w	8000742 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	f47f af25 	bne.w	800072c <__aeabi_dmul+0x234>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e72c      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008e8:	ea95 0f0c 	teq	r5, ip
 80008ec:	d106      	bne.n	80008fc <__aeabi_ddiv+0x1b0>
 80008ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f2:	f43f aefd 	beq.w	80006f0 <__aeabi_dmul+0x1f8>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e722      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000900:	bf18      	it	ne
 8000902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000906:	f47f aec5 	bne.w	8000694 <__aeabi_dmul+0x19c>
 800090a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090e:	f47f af0d 	bne.w	800072c <__aeabi_dmul+0x234>
 8000912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000916:	f47f aeeb 	bne.w	80006f0 <__aeabi_dmul+0x1f8>
 800091a:	e712      	b.n	8000742 <__aeabi_dmul+0x24a>

0800091c <__gedf2>:
 800091c:	f04f 3cff 	mov.w	ip, #4294967295
 8000920:	e006      	b.n	8000930 <__cmpdf2+0x4>
 8000922:	bf00      	nop

08000924 <__ledf2>:
 8000924:	f04f 0c01 	mov.w	ip, #1
 8000928:	e002      	b.n	8000930 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__cmpdf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000934:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000938:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800093c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000946:	d01b      	beq.n	8000980 <__cmpdf2+0x54>
 8000948:	b001      	add	sp, #4
 800094a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800094e:	bf0c      	ite	eq
 8000950:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000954:	ea91 0f03 	teqne	r1, r3
 8000958:	bf02      	ittt	eq
 800095a:	ea90 0f02 	teqeq	r0, r2
 800095e:	2000      	moveq	r0, #0
 8000960:	4770      	bxeq	lr
 8000962:	f110 0f00 	cmn.w	r0, #0
 8000966:	ea91 0f03 	teq	r1, r3
 800096a:	bf58      	it	pl
 800096c:	4299      	cmppl	r1, r3
 800096e:	bf08      	it	eq
 8000970:	4290      	cmpeq	r0, r2
 8000972:	bf2c      	ite	cs
 8000974:	17d8      	asrcs	r0, r3, #31
 8000976:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800097a:	f040 0001 	orr.w	r0, r0, #1
 800097e:	4770      	bx	lr
 8000980:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000988:	d102      	bne.n	8000990 <__cmpdf2+0x64>
 800098a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800098e:	d107      	bne.n	80009a0 <__cmpdf2+0x74>
 8000990:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d1d6      	bne.n	8000948 <__cmpdf2+0x1c>
 800099a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800099e:	d0d3      	beq.n	8000948 <__cmpdf2+0x1c>
 80009a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop

080009a8 <__aeabi_cdrcmple>:
 80009a8:	4684      	mov	ip, r0
 80009aa:	4610      	mov	r0, r2
 80009ac:	4662      	mov	r2, ip
 80009ae:	468c      	mov	ip, r1
 80009b0:	4619      	mov	r1, r3
 80009b2:	4663      	mov	r3, ip
 80009b4:	e000      	b.n	80009b8 <__aeabi_cdcmpeq>
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdcmpeq>:
 80009b8:	b501      	push	{r0, lr}
 80009ba:	f7ff ffb7 	bl	800092c <__cmpdf2>
 80009be:	2800      	cmp	r0, #0
 80009c0:	bf48      	it	mi
 80009c2:	f110 0f00 	cmnmi.w	r0, #0
 80009c6:	bd01      	pop	{r0, pc}

080009c8 <__aeabi_dcmpeq>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff fff4 	bl	80009b8 <__aeabi_cdcmpeq>
 80009d0:	bf0c      	ite	eq
 80009d2:	2001      	moveq	r0, #1
 80009d4:	2000      	movne	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmplt>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffea 	bl	80009b8 <__aeabi_cdcmpeq>
 80009e4:	bf34      	ite	cc
 80009e6:	2001      	movcc	r0, #1
 80009e8:	2000      	movcs	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmple>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffe0 	bl	80009b8 <__aeabi_cdcmpeq>
 80009f8:	bf94      	ite	ls
 80009fa:	2001      	movls	r0, #1
 80009fc:	2000      	movhi	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpge>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffce 	bl	80009a8 <__aeabi_cdrcmple>
 8000a0c:	bf94      	ite	ls
 8000a0e:	2001      	movls	r0, #1
 8000a10:	2000      	movhi	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpgt>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff ffc4 	bl	80009a8 <__aeabi_cdrcmple>
 8000a20:	bf34      	ite	cc
 8000a22:	2001      	movcc	r0, #1
 8000a24:	2000      	movcs	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmpun>:
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	d102      	bne.n	8000a3c <__aeabi_dcmpun+0x10>
 8000a36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3a:	d10a      	bne.n	8000a52 <__aeabi_dcmpun+0x26>
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x20>
 8000a46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4a:	d102      	bne.n	8000a52 <__aeabi_dcmpun+0x26>
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	f04f 0001 	mov.w	r0, #1
 8000a56:	4770      	bx	lr

08000a58 <__aeabi_d2iz>:
 8000a58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a60:	d215      	bcs.n	8000a8e <__aeabi_d2iz+0x36>
 8000a62:	d511      	bpl.n	8000a88 <__aeabi_d2iz+0x30>
 8000a64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a6c:	d912      	bls.n	8000a94 <__aeabi_d2iz+0x3c>
 8000a6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	bf18      	it	ne
 8000a84:	4240      	negne	r0, r0
 8000a86:	4770      	bx	lr
 8000a88:	f04f 0000 	mov.w	r0, #0
 8000a8c:	4770      	bx	lr
 8000a8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a92:	d105      	bne.n	8000aa0 <__aeabi_d2iz+0x48>
 8000a94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a98:	bf08      	it	eq
 8000a9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a9e:	4770      	bx	lr
 8000aa0:	f04f 0000 	mov.w	r0, #0
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_d2uiz>:
 8000aa8:	004a      	lsls	r2, r1, #1
 8000aaa:	d211      	bcs.n	8000ad0 <__aeabi_d2uiz+0x28>
 8000aac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab0:	d211      	bcs.n	8000ad6 <__aeabi_d2uiz+0x2e>
 8000ab2:	d50d      	bpl.n	8000ad0 <__aeabi_d2uiz+0x28>
 8000ab4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000abc:	d40e      	bmi.n	8000adc <__aeabi_d2uiz+0x34>
 8000abe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ac6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aca:	fa23 f002 	lsr.w	r0, r3, r2
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d102      	bne.n	8000ae2 <__aeabi_d2uiz+0x3a>
 8000adc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae0:	4770      	bx	lr
 8000ae2:	f04f 0000 	mov.w	r0, #0
 8000ae6:	4770      	bx	lr

08000ae8 <__aeabi_d2f>:
 8000ae8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af0:	bf24      	itt	cs
 8000af2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000af6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000afa:	d90d      	bls.n	8000b18 <__aeabi_d2f+0x30>
 8000afc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b10:	bf08      	it	eq
 8000b12:	f020 0001 	biceq.w	r0, r0, #1
 8000b16:	4770      	bx	lr
 8000b18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b1c:	d121      	bne.n	8000b62 <__aeabi_d2f+0x7a>
 8000b1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b22:	bfbc      	itt	lt
 8000b24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b28:	4770      	bxlt	lr
 8000b2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b32:	f1c2 0218 	rsb	r2, r2, #24
 8000b36:	f1c2 0c20 	rsb	ip, r2, #32
 8000b3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b42:	bf18      	it	ne
 8000b44:	f040 0001 	orrne.w	r0, r0, #1
 8000b48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b54:	ea40 000c 	orr.w	r0, r0, ip
 8000b58:	fa23 f302 	lsr.w	r3, r3, r2
 8000b5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b60:	e7cc      	b.n	8000afc <__aeabi_d2f+0x14>
 8000b62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b66:	d107      	bne.n	8000b78 <__aeabi_d2f+0x90>
 8000b68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b6c:	bf1e      	ittt	ne
 8000b6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b76:	4770      	bxne	lr
 8000b78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop

08000b88 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000b88:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b8a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b8c:	3304      	adds	r3, #4

08000b8e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b8e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b90:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000b92:	d3f9      	bcc.n	8000b88 <CopyDataInit>
  bx lr
 8000b94:	4770      	bx	lr

08000b96 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000b96:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000b98:	3004      	adds	r0, #4

08000b9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000b9a:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000b9c:	d3fb      	bcc.n	8000b96 <FillZerobss>
  bx lr
 8000b9e:	4770      	bx	lr

08000ba0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ba0:	480c      	ldr	r0, [pc, #48]	; (8000bd4 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8000ba2:	4685      	mov	sp, r0

  INIT_DATA _sdata, _edata, _sidata
 8000ba4:	480c      	ldr	r0, [pc, #48]	; (8000bd8 <LoopForever+0x8>)
 8000ba6:	490d      	ldr	r1, [pc, #52]	; (8000bdc <LoopForever+0xc>)
 8000ba8:	4a0d      	ldr	r2, [pc, #52]	; (8000be0 <LoopForever+0x10>)
 8000baa:	2300      	movs	r3, #0
 8000bac:	f7ff ffef 	bl	8000b8e <LoopCopyDataInit>
  INIT_BSS _sbss, _ebss
 8000bb0:	480c      	ldr	r0, [pc, #48]	; (8000be4 <LoopForever+0x14>)
 8000bb2:	490d      	ldr	r1, [pc, #52]	; (8000be8 <LoopForever+0x18>)
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	f7ff fff0 	bl	8000b9a <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000bba:	480c      	ldr	r0, [pc, #48]	; (8000bec <LoopForever+0x1c>)
 8000bbc:	490c      	ldr	r1, [pc, #48]	; (8000bf0 <LoopForever+0x20>)
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	f7ff ffeb 	bl	8000b9a <LoopFillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000bc4:	f009 fb78 	bl	800a2b8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000bc8:	f021 fe1e 	bl	8022808 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8000bcc:	f000 fcd0 	bl	8001570 <main>

08000bd0 <LoopForever>:

LoopForever:
  b LoopForever
 8000bd0:	e7fe      	b.n	8000bd0 <LoopForever>
 8000bd2:	0000      	.short	0x0000
  ldr   r0, =_estack
 8000bd4:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000bd8:	20000008 	.word	0x20000008
 8000bdc:	20001580 	.word	0x20001580
 8000be0:	080233d8 	.word	0x080233d8
  INIT_BSS _sbss, _ebss
 8000be4:	20001858 	.word	0x20001858
 8000be8:	20007e4c 	.word	0x20007e4c
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000bec:	200301b4 	.word	0x200301b4
 8000bf0:	20030a34 	.word	0x20030a34

08000bf4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bf4:	e7fe      	b.n	8000bf4 <ADC1_IRQHandler>
	...

08000bf8 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
  UNUSED(status);
  return;
}
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop

08000bfc <APPE_SysUserEvtRx>:

static void APPE_SysUserEvtRx( void * pPayload )
{
 8000bfc:	b508      	push	{r3, lr}
  UNUSED(pPayload);
  /* Traces channel initialization */
  TL_TRACES_Init( );
 8000bfe:	f00c feef 	bl	800d9e0 <TL_TRACES_Init>

  APP_BLE_Init( );
 8000c02:	f000 ffbb 	bl	8001b7c <APP_BLE_Init>
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000c06:	2100      	movs	r1, #0
 8000c08:	2001      	movs	r0, #1
  return;
}
 8000c0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000c0e:	f00c bf15 	b.w	800da3c <UTIL_LPM_SetOffMode>
 8000c12:	bf00      	nop

08000c14 <APPE_Init>:
{
 8000c14:	b510      	push	{r4, lr}
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000c16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c1a:	b088      	sub	sp, #32
 8000c1c:	6893      	ldr	r3, [r2, #8]
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000c1e:	4c1e      	ldr	r4, [pc, #120]	; (8000c98 <APPE_Init+0x84>)
 8000c20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c24:	6093      	str	r3, [r2, #8]
  UTIL_LPM_Init( );
 8000c26:	f00c ff01 	bl	800da2c <UTIL_LPM_Init>
  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000c2a:	491c      	ldr	r1, [pc, #112]	; (8000c9c <APPE_Init+0x88>)
 8000c2c:	2000      	movs	r0, #0
 8000c2e:	f000 f933 	bl	8000e98 <HW_TS_Init>
  HAL_DBGMCU_EnableDBGSleepMode();
 8000c32:	f009 fc2b 	bl	800a48c <HAL_DBGMCU_EnableDBGSleepMode>
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000c36:	4b1a      	ldr	r3, [pc, #104]	; (8000ca0 <APPE_Init+0x8c>)
 8000c38:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000c3c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000c40:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->C2IMR2, ExtiLine);
 8000c44:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8000c48:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000c4c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  DbgTraceInit();
 8000c50:	f00b ff08 	bl	800ca64 <DbgTraceInit>
  TL_Init();
 8000c54:	f00c fde4 	bl	800d820 <TL_Init>
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc );
 8000c58:	4a12      	ldr	r2, [pc, #72]	; (8000ca4 <APPE_Init+0x90>)
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000c60:	f00c ff04 	bl	800da6c <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000c64:	4b10      	ldr	r3, [pc, #64]	; (8000ca8 <APPE_Init+0x94>)
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000c66:	4811      	ldr	r0, [pc, #68]	; (8000cac <APPE_Init+0x98>)
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000c68:	9400      	str	r4, [sp, #0]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000c6a:	4669      	mov	r1, sp
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000c6c:	9301      	str	r3, [sp, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000c6e:	f00c fc71 	bl	800d554 <shci_init>
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000c72:	f504 7186 	add.w	r1, r4, #268	; 0x10c
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000c76:	f504 7206 	add.w	r2, r4, #536	; 0x218
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000c7a:	f240 533c 	movw	r3, #1340	; 0x53c
  TL_MM_Init( &tl_mm_config );
 8000c7e:	a802      	add	r0, sp, #8
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000c80:	f504 7449 	add.w	r4, r4, #804	; 0x324
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000c84:	e9cd 1202 	strd	r1, r2, [sp, #8]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000c88:	e9cd 4304 	strd	r4, r3, [sp, #16]
  TL_MM_Init( &tl_mm_config );
 8000c8c:	f00c fe7a 	bl	800d984 <TL_MM_Init>
  TL_Enable();
 8000c90:	f00c fdc4 	bl	800d81c <TL_Enable>
}
 8000c94:	b008      	add	sp, #32
 8000c96:	bd10      	pop	{r4, pc}
 8000c98:	200301b4 	.word	0x200301b4
 8000c9c:	20007d60 	.word	0x20007d60
 8000ca0:	58000800 	.word	0x58000800
 8000ca4:	0800d5a9 	.word	0x0800d5a9
 8000ca8:	08000bf9 	.word	0x08000bf9
 8000cac:	08000bfd 	.word	0x08000bfd

08000cb0 <HAL_GPIO_EXTI_Callback>:
  switch (GPIO_Pin)
 8000cb0:	2801      	cmp	r0, #1
 8000cb2:	d008      	beq.n	8000cc6 <HAL_GPIO_EXTI_Callback+0x16>
 8000cb4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8000cb8:	d104      	bne.n	8000cc4 <HAL_GPIO_EXTI_Callback+0x14>
    UTIL_SEQ_SetTask(1<<CFG_TASK_HANDLE_MEMS_IT_ID, CFG_SCH_PRIO_0);
 8000cba:	2100      	movs	r1, #0
 8000cbc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000cc0:	f00c bee4 	b.w	800da8c <UTIL_SEQ_SetTask>
 8000cc4:	4770      	bx	lr
    UTIL_SEQ_SetTask(1<<CFG_TASK_SW2_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	2008      	movs	r0, #8
 8000cca:	f00c bedf 	b.w	800da8c <UTIL_SEQ_SetTask>
 8000cce:	bf00      	nop

08000cd0 <UTIL_SEQ_Idle>:
{
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
#endif
  return;
}
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop

08000cd4 <UTIL_SEQ_EvtIdle>:
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 8000cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd8:	f00c bf16 	b.w	800db08 <UTIL_SEQ_Run>

08000cdc <shci_notify_asynch_evt>:
}

void shci_notify_asynch_evt(void* pdata)
{
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8000cdc:	2100      	movs	r1, #0
 8000cde:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000ce2:	f00c bed3 	b.w	800da8c <UTIL_SEQ_SetTask>
 8000ce6:	bf00      	nop

08000ce8 <shci_cmd_resp_release>:
  return;
}

void shci_cmd_resp_release(uint32_t flag)
{
  UTIL_SEQ_SetEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000ce8:	2002      	movs	r0, #2
 8000cea:	f00c befd 	b.w	800dae8 <UTIL_SEQ_SetEvt>
 8000cee:	bf00      	nop

08000cf0 <shci_cmd_resp_wait>:
  return;
}

void shci_cmd_resp_wait(uint32_t timeout)
{
  UTIL_SEQ_WaitEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000cf0:	2002      	movs	r0, #2
 8000cf2:	f00c bf6f 	b.w	800dbd4 <UTIL_SEQ_WaitEvt>
 8000cf6:	bf00      	nop

08000cf8 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000cfa:	4b63      	ldr	r3, [pc, #396]	; (8000e88 <RescheduleTimerList+0x190>)
 8000cfc:	4d63      	ldr	r5, [pc, #396]	; (8000e8c <RescheduleTimerList+0x194>)
 8000cfe:	689b      	ldr	r3, [r3, #8]
 8000d00:	682a      	ldr	r2, [r5, #0]
 8000d02:	0559      	lsls	r1, r3, #21
 8000d04:	6816      	ldr	r6, [r2, #0]
 8000d06:	f100 8082 	bmi.w	8000e0e <RescheduleTimerList+0x116>
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8000d0a:	68b3      	ldr	r3, [r6, #8]

  localTimerID = CurrentRunningTimerID;
 8000d0c:	4c60      	ldr	r4, [pc, #384]	; (8000e90 <RescheduleTimerList+0x198>)
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8000d0e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000d12:	60b3      	str	r3, [r6, #8]
  localTimerID = CurrentRunningTimerID;
 8000d14:	7823      	ldrb	r3, [r4, #0]
 8000d16:	b2db      	uxtb	r3, r3

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000d18:	0058      	lsls	r0, r3, #1
 8000d1a:	18c2      	adds	r2, r0, r3
 8000d1c:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8000d20:	f8d2 c00c 	ldr.w	ip, [r2, #12]
  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000d24:	f8d4 20f4 	ldr.w	r2, [r4, #244]	; 0xf4
 8000d28:	3201      	adds	r2, #1
 8000d2a:	f000 8092 	beq.w	8000e52 <RescheduleTimerList+0x15a>
  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000d2e:	4f56      	ldr	r7, [pc, #344]	; (8000e88 <RescheduleTimerList+0x190>)
 8000d30:	6aba      	ldr	r2, [r7, #40]	; 0x28
  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000d32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000d34:	b292      	uxth	r2, r2
  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000d36:	b289      	uxth	r1, r1
  while(first_read != second_read)
 8000d38:	428a      	cmp	r2, r1
 8000d3a:	d101      	bne.n	8000d40 <RescheduleTimerList+0x48>
 8000d3c:	e004      	b.n	8000d48 <RescheduleTimerList+0x50>
 8000d3e:	4611      	mov	r1, r2
    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000d40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d42:	b292      	uxth	r2, r2
  while(first_read != second_read)
 8000d44:	428a      	cmp	r2, r1
 8000d46:	d1fa      	bne.n	8000d3e <RescheduleTimerList+0x46>
    if (SSRValueOnLastSetup >= return_value)
 8000d48:	f8d4 20f4 	ldr.w	r2, [r4, #244]	; 0xf4
 8000d4c:	428a      	cmp	r2, r1
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000d4e:	bf3b      	ittet	cc
 8000d50:	88aa      	ldrhcc	r2, [r5, #4]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000d52:	f8d4 70f4 	ldrcc.w	r7, [r4, #244]	; 0xf4
      return_value = SSRValueOnLastSetup - return_value;
 8000d56:	f8d4 20f4 	ldrcs.w	r2, [r4, #244]	; 0xf4
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000d5a:	19d2      	addcc	r2, r2, r7
    return_value = return_value*AsynchPrescalerUserConfig;
 8000d5c:	79af      	ldrb	r7, [r5, #6]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000d5e:	1a51      	subs	r1, r2, r1
    return_value = return_value >> WakeupTimerDivider;
 8000d60:	79ea      	ldrb	r2, [r5, #7]
    return_value = return_value*AsynchPrescalerUserConfig;
 8000d62:	fb01 f107 	mul.w	r1, r1, r7
    return_value = return_value >> WakeupTimerDivider;
 8000d66:	40d1      	lsrs	r1, r2
 8000d68:	b28f      	uxth	r7, r1
  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();

  if(timecountleft < time_elapsed )
 8000d6a:	45bc      	cmp	ip, r7
 8000d6c:	f080 8084 	bcs.w	8000e78 <RescheduleTimerList+0x180>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000d70:	2201      	movs	r2, #1
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000d72:	2b0a      	cmp	r3, #10
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000d74:	f884 20f8 	strb.w	r2, [r4, #248]	; 0xf8
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000d78:	d051      	beq.n	8000e1e <RescheduleTimerList+0x126>
    wakeup_timer_value = 0;
 8000d7a:	2100      	movs	r1, #0
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8000d7c:	f04f 0c00 	mov.w	ip, #0
 8000d80:	e006      	b.n	8000d90 <RescheduleTimerList+0x98>
 8000d82:	f8c3 c00c 	str.w	ip, [r3, #12]
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8000d86:	7e5b      	ldrb	r3, [r3, #25]
 8000d88:	b2db      	uxtb	r3, r3
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000d8a:	2b0a      	cmp	r3, #10
 8000d8c:	d00d      	beq.n	8000daa <RescheduleTimerList+0xb2>
 8000d8e:	0058      	lsls	r0, r3, #1
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000d90:	4403      	add	r3, r0
 8000d92:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8000d96:	68da      	ldr	r2, [r3, #12]
 8000d98:	42ba      	cmp	r2, r7
 8000d9a:	d3f2      	bcc.n	8000d82 <RescheduleTimerList+0x8a>
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8000d9c:	68da      	ldr	r2, [r3, #12]
 8000d9e:	1bd2      	subs	r2, r2, r7
 8000da0:	60da      	str	r2, [r3, #12]
    localTimerID = aTimerContext[localTimerID].NextID;
 8000da2:	7e5b      	ldrb	r3, [r3, #25]
 8000da4:	b2db      	uxtb	r3, r3
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000da6:	2b0a      	cmp	r3, #10
 8000da8:	d1f1      	bne.n	8000d8e <RescheduleTimerList+0x96>
  if(Value == 0)
 8000daa:	2900      	cmp	r1, #0
 8000dac:	d037      	beq.n	8000e1e <RescheduleTimerList+0x126>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000dae:	2901      	cmp	r1, #1
 8000db0:	d965      	bls.n	8000e7e <RescheduleTimerList+0x186>
      Value -= 1;
 8000db2:	3901      	subs	r1, #1
 8000db4:	b28f      	uxth	r7, r1
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000db6:	68f3      	ldr	r3, [r6, #12]
 8000db8:	075b      	lsls	r3, r3, #29
 8000dba:	d5fc      	bpl.n	8000db6 <RescheduleTimerList+0xbe>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000dbc:	68f3      	ldr	r3, [r6, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000dbe:	4a35      	ldr	r2, [pc, #212]	; (8000e94 <RescheduleTimerList+0x19c>)
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	f463 6390 	orn	r3, r3, #1152	; 0x480
 8000dc6:	60f3      	str	r3, [r6, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000dc8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000dcc:	60d3      	str	r3, [r2, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000dce:	2003      	movs	r0, #3
 8000dd0:	f009 fbf8 	bl	800a5c4 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000dd4:	492c      	ldr	r1, [pc, #176]	; (8000e88 <RescheduleTimerList+0x190>)
 8000dd6:	694b      	ldr	r3, [r1, #20]
 8000dd8:	0c1b      	lsrs	r3, r3, #16
 8000dda:	041b      	lsls	r3, r3, #16
 8000ddc:	433b      	orrs	r3, r7
 8000dde:	614b      	str	r3, [r1, #20]
  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000de0:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000de2:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000de4:	b29b      	uxth	r3, r3
  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000de6:	b292      	uxth	r2, r2
  while(first_read != second_read)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d101      	bne.n	8000df0 <RescheduleTimerList+0xf8>
 8000dec:	e004      	b.n	8000df8 <RescheduleTimerList+0x100>
 8000dee:	461a      	mov	r2, r3
    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000df0:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8000df2:	b29b      	uxth	r3, r3
  while(first_read != second_read)
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d1fa      	bne.n	8000dee <RescheduleTimerList+0xf6>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8000df8:	682a      	ldr	r2, [r5, #0]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000dfa:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8000dfe:	6812      	ldr	r2, [r2, #0]
 8000e00:	6893      	ldr	r3, [r2, #8]
 8000e02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e06:	6093      	str	r3, [r2, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000e08:	f3af 8000 	nop.w
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);

  return ;
}
 8000e0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8000e0e:	68f3      	ldr	r3, [r6, #12]
 8000e10:	075a      	lsls	r2, r3, #29
 8000e12:	f57f af7a 	bpl.w	8000d0a <RescheduleTimerList+0x12>
 8000e16:	68f3      	ldr	r3, [r6, #12]
 8000e18:	075a      	lsls	r2, r3, #29
 8000e1a:	d4f8      	bmi.n	8000e0e <RescheduleTimerList+0x116>
 8000e1c:	e775      	b.n	8000d0a <RescheduleTimerList+0x12>
  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000e1e:	491a      	ldr	r1, [pc, #104]	; (8000e88 <RescheduleTimerList+0x190>)
 8000e20:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000e22:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000e24:	b29b      	uxth	r3, r3
  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000e26:	b292      	uxth	r2, r2
  while(first_read != second_read)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d107      	bne.n	8000e3c <RescheduleTimerList+0x144>
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000e2c:	f8c4 20f4 	str.w	r2, [r4, #244]	; 0xf4
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000e30:	2003      	movs	r0, #3
}
 8000e32:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000e36:	f009 bbb5 	b.w	800a5a4 <HAL_NVIC_SetPendingIRQ>
  while(first_read != second_read)
 8000e3a:	461a      	mov	r2, r3
    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000e3c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8000e3e:	b29b      	uxth	r3, r3
  while(first_read != second_read)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d1fa      	bne.n	8000e3a <RescheduleTimerList+0x142>
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000e44:	f8c4 20f4 	str.w	r2, [r4, #244]	; 0xf4
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000e48:	2003      	movs	r0, #3
}
 8000e4a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000e4e:	f009 bba9 	b.w	800a5a4 <HAL_NVIC_SetPendingIRQ>
  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000e52:	2200      	movs	r2, #0
 8000e54:	4617      	mov	r7, r2
  return (uint16_t)return_value;
 8000e56:	4611      	mov	r1, r2
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000e58:	f8b5 e008 	ldrh.w	lr, [r5, #8]
 8000e5c:	4472      	add	r2, lr
 8000e5e:	4562      	cmp	r2, ip
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000e60:	bf39      	ittee	cc
 8000e62:	8929      	ldrhcc	r1, [r5, #8]
      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000e64:	2200      	movcc	r2, #0
      wakeup_timer_value = timecountleft - time_elapsed;
 8000e66:	ebac 0101 	subcs.w	r1, ip, r1
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000e6a:	2201      	movcs	r2, #1
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000e6c:	2b0a      	cmp	r3, #10
      wakeup_timer_value = timecountleft - time_elapsed;
 8000e6e:	b289      	uxth	r1, r1
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000e70:	f884 20f8 	strb.w	r2, [r4, #248]	; 0xf8
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000e74:	d182      	bne.n	8000d7c <RescheduleTimerList+0x84>
 8000e76:	e798      	b.n	8000daa <RescheduleTimerList+0xb2>
  return (uint16_t)return_value;
 8000e78:	4639      	mov	r1, r7
 8000e7a:	463a      	mov	r2, r7
 8000e7c:	e7ec      	b.n	8000e58 <RescheduleTimerList+0x160>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000e7e:	79eb      	ldrb	r3, [r5, #7]
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d196      	bne.n	8000db2 <RescheduleTimerList+0xba>
 8000e84:	461f      	mov	r7, r3
 8000e86:	e796      	b.n	8000db6 <RescheduleTimerList+0xbe>
 8000e88:	40002800 	.word	0x40002800
 8000e8c:	20001874 	.word	0x20001874
 8000e90:	20001580 	.word	0x20001580
 8000e94:	58000800 	.word	0x58000800

08000e98 <HW_TS_Init>:

  return;
}

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8000e98:	b570      	push	{r4, r5, r6, lr}
   * Get RTC handler
   */
  phrtc = hrtc;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000e9a:	680d      	ldr	r5, [r1, #0]

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8000e9c:	4e44      	ldr	r6, [pc, #272]	; (8000fb0 <HW_TS_Init+0x118>)
  phrtc = hrtc;
 8000e9e:	4c45      	ldr	r4, [pc, #276]	; (8000fb4 <HW_TS_Init+0x11c>)
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000ea0:	22ca      	movs	r2, #202	; 0xca
 8000ea2:	2353      	movs	r3, #83	; 0x53
 8000ea4:	626a      	str	r2, [r5, #36]	; 0x24
 8000ea6:	626b      	str	r3, [r5, #36]	; 0x24
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8000ea8:	68b3      	ldr	r3, [r6, #8]
  phrtc = hrtc;
 8000eaa:	6021      	str	r1, [r4, #0]
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8000eac:	f043 0320 	orr.w	r3, r3, #32
 8000eb0:	60b3      	str	r3, [r6, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8000eb2:	68b2      	ldr	r2, [r6, #8]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8000eb4:	6933      	ldr	r3, [r6, #16]
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8000eb6:	f002 0207 	and.w	r2, r2, #7
 8000eba:	f1c2 0204 	rsb	r2, r2, #4
 8000ebe:	b2d1      	uxtb	r1, r2
 8000ec0:	71e1      	strb	r1, [r4, #7]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ec2:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8000ec6:	fa92 f2a2 	rbit	r2, r2

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8000eca:	6936      	ldr	r6, [r6, #16]
  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8000ecc:	fab2 f282 	clz	r2, r2
 8000ed0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8000ed4:	40d3      	lsrs	r3, r2
  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8000ed6:	f3c6 060e 	ubfx	r6, r6, #0, #15
  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8000eda:	3301      	adds	r3, #1
 8000edc:	b2db      	uxtb	r3, r3

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8000ede:	4632      	mov	r2, r6
 8000ee0:	fb03 f202 	mul.w	r2, r3, r2
 8000ee4:	f5a2 72a0 	sub.w	r2, r2, #320	; 0x140
 8000ee8:	40ca      	lsrs	r2, r1

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8000eea:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8000eee:	428a      	cmp	r2, r1
  {
    MaxWakeupTimerSetup = 0xFFFF;
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8000ef0:	bf98      	it	ls
 8000ef2:	b292      	uxthls	r2, r2
  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8000ef4:	71a3      	strb	r3, [r4, #6]
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8000ef6:	bf94      	ite	ls
 8000ef8:	8122      	strhls	r2, [r4, #8]
    MaxWakeupTimerSetup = 0xFFFF;
 8000efa:	f64f 73ff 	movwhi	r3, #65535	; 0xffff
  *         @arg @ref LL_EXTI_LINE_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000efe:	4a2e      	ldr	r2, [pc, #184]	; (8000fb8 <HW_TS_Init+0x120>)
 8000f00:	bf88      	it	hi
 8000f02:	8123      	strhhi	r3, [r4, #8]
 8000f04:	6813      	ldr	r3, [r2, #0]
  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8000f06:	3601      	adds	r6, #1
 8000f08:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f0c:	80a6      	strh	r6, [r4, #4]
 8000f0e:	6013      	str	r3, [r2, #0]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000f10:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8000f14:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f18:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);

  if(TimerInitMode == hw_ts_InitMode_Full)
 8000f1c:	2800      	cmp	r0, #0
 8000f1e:	d13d      	bne.n	8000f9c <HW_TS_Init+0x104>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000f20:	4b26      	ldr	r3, [pc, #152]	; (8000fbc <HW_TS_Init+0x124>)
 8000f22:	2101      	movs	r1, #1
 8000f24:	f883 10f8 	strb.w	r1, [r3, #248]	; 0xf8
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000f28:	f04f 36ff 	mov.w	r6, #4294967295
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8000f2c:	210a      	movs	r1, #10
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000f2e:	f8c3 60f4 	str.w	r6, [r3, #244]	; 0xf4
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8000f32:	7418      	strb	r0, [r3, #16]
 8000f34:	f883 0028 	strb.w	r0, [r3, #40]	; 0x28
 8000f38:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
 8000f3c:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
 8000f40:	f883 0070 	strb.w	r0, [r3, #112]	; 0x70
 8000f44:	f883 0088 	strb.w	r0, [r3, #136]	; 0x88
 8000f48:	f883 00a0 	strb.w	r0, [r3, #160]	; 0xa0
 8000f4c:	f883 00b8 	strb.w	r0, [r3, #184]	; 0xb8
 8000f50:	f883 00d0 	strb.w	r0, [r3, #208]	; 0xd0
 8000f54:	f883 00e8 	strb.w	r0, [r3, #232]	; 0xe8
    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8000f58:	7019      	strb	r1, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8000f5a:	68ab      	ldr	r3, [r5, #8]
 8000f5c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000f60:	60ab      	str	r3, [r5, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8000f62:	68eb      	ldr	r3, [r5, #12]
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	f463 6390 	orn	r3, r3, #1152	; 0x480
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8000f6a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8000f6e:	60eb      	str	r3, [r5, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8000f70:	2003      	movs	r0, #3
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8000f72:	60d1      	str	r1, [r2, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8000f74:	f009 fb26 	bl	800a5c4 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8000f78:	6823      	ldr	r3, [r4, #0]
 8000f7a:	681d      	ldr	r5, [r3, #0]
 8000f7c:	68ab      	ldr	r3, [r5, #8]
 8000f7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f82:	60ab      	str	r3, [r5, #8]
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000f84:	23ff      	movs	r3, #255	; 0xff

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8000f86:	2103      	movs	r1, #3
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000f88:	626b      	str	r3, [r5, #36]	; 0x24
  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8000f8a:	4608      	mov	r0, r1
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	f009 fa97 	bl	800a4c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8000f92:	2003      	movs	r0, #3

  return;
}
 8000f94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8000f98:	f009 bac8 	b.w	800a52c <HAL_NVIC_EnableIRQ>
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8000f9c:	68eb      	ldr	r3, [r5, #12]
 8000f9e:	055b      	lsls	r3, r3, #21
 8000fa0:	d5f0      	bpl.n	8000f84 <HW_TS_Init+0xec>
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000fa2:	2003      	movs	r0, #3
 8000fa4:	f009 fafe 	bl	800a5a4 <HAL_NVIC_SetPendingIRQ>
 8000fa8:	6823      	ldr	r3, [r4, #0]
 8000faa:	681d      	ldr	r5, [r3, #0]
 8000fac:	e7ea      	b.n	8000f84 <HW_TS_Init+0xec>
 8000fae:	bf00      	nop
 8000fb0:	40002800 	.word	0x40002800
 8000fb4:	20001874 	.word	0x20001874
 8000fb8:	58000800 	.word	0x58000800
 8000fbc:	20001580 	.word	0x20001580

08000fc0 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8000fc0:	b4f0      	push	{r4, r5, r6, r7}
 8000fc2:	4684      	mov	ip, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000fc4:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8000fc8:	b672      	cpsid	i
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8000fca:	4c28      	ldr	r4, [pc, #160]	; (800106c <HW_TS_Create+0xac>)
 8000fcc:	7c25      	ldrb	r5, [r4, #16]
 8000fce:	b1fd      	cbz	r5, 8001010 <HW_TS_Create+0x50>
 8000fd0:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
 8000fd4:	b37d      	cbz	r5, 8001036 <HW_TS_Create+0x76>
 8000fd6:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8000fda:	b378      	cbz	r0, 800103c <HW_TS_Create+0x7c>
 8000fdc:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
 8000fe0:	b378      	cbz	r0, 8001042 <HW_TS_Create+0x82>
 8000fe2:	f894 0070 	ldrb.w	r0, [r4, #112]	; 0x70
 8000fe6:	b378      	cbz	r0, 8001048 <HW_TS_Create+0x88>
 8000fe8:	f894 0088 	ldrb.w	r0, [r4, #136]	; 0x88
 8000fec:	b378      	cbz	r0, 800104e <HW_TS_Create+0x8e>
 8000fee:	f894 00a0 	ldrb.w	r0, [r4, #160]	; 0xa0
 8000ff2:	b390      	cbz	r0, 800105a <HW_TS_Create+0x9a>
 8000ff4:	f894 00b8 	ldrb.w	r0, [r4, #184]	; 0xb8
 8000ff8:	b390      	cbz	r0, 8001060 <HW_TS_Create+0xa0>
 8000ffa:	f894 00d0 	ldrb.w	r0, [r4, #208]	; 0xd0
 8000ffe:	b348      	cbz	r0, 8001054 <HW_TS_Create+0x94>
 8001000:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
 8001004:	b378      	cbz	r0, 8001066 <HW_TS_Create+0xa6>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001006:	f387 8810 	msr	PRIMASK, r7
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 800100a:	2001      	movs	r0, #1
  }

  return(localreturnstatus);
}
 800100c:	bcf0      	pop	{r4, r5, r6, r7}
 800100e:	4770      	bx	lr
 8001010:	f005 06ff 	and.w	r6, r5, #255	; 0xff
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001014:	4635      	mov	r5, r6
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8001016:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800101a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800101e:	2001      	movs	r0, #1
 8001020:	7420      	strb	r0, [r4, #16]
 8001022:	f387 8810 	msr	PRIMASK, r7
    localreturnstatus = hw_ts_Successful;
 8001026:	2000      	movs	r0, #0
    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8001028:	f8c4 c014 	str.w	ip, [r4, #20]
    aTimerContext[loop].TimerMode = TimerMode;
 800102c:	7462      	strb	r2, [r4, #17]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 800102e:	6063      	str	r3, [r4, #4]
    *pTimerId = loop;
 8001030:	700e      	strb	r6, [r1, #0]
}
 8001032:	bcf0      	pop	{r4, r5, r6, r7}
 8001034:	4770      	bx	lr
    loop++;
 8001036:	2601      	movs	r6, #1
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001038:	4635      	mov	r5, r6
 800103a:	e7ec      	b.n	8001016 <HW_TS_Create+0x56>
    loop++;
 800103c:	2602      	movs	r6, #2
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 800103e:	4635      	mov	r5, r6
 8001040:	e7e9      	b.n	8001016 <HW_TS_Create+0x56>
    loop++;
 8001042:	2603      	movs	r6, #3
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001044:	4635      	mov	r5, r6
 8001046:	e7e6      	b.n	8001016 <HW_TS_Create+0x56>
    loop++;
 8001048:	2604      	movs	r6, #4
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 800104a:	4635      	mov	r5, r6
 800104c:	e7e3      	b.n	8001016 <HW_TS_Create+0x56>
    loop++;
 800104e:	2605      	movs	r6, #5
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001050:	4635      	mov	r5, r6
 8001052:	e7e0      	b.n	8001016 <HW_TS_Create+0x56>
    loop++;
 8001054:	2608      	movs	r6, #8
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001056:	4635      	mov	r5, r6
 8001058:	e7dd      	b.n	8001016 <HW_TS_Create+0x56>
    loop++;
 800105a:	2606      	movs	r6, #6
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 800105c:	4635      	mov	r5, r6
 800105e:	e7da      	b.n	8001016 <HW_TS_Create+0x56>
    loop++;
 8001060:	2607      	movs	r6, #7
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001062:	4635      	mov	r5, r6
 8001064:	e7d7      	b.n	8001016 <HW_TS_Create+0x56>
    loop++;
 8001066:	2609      	movs	r6, #9
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001068:	4635      	mov	r5, r6
 800106a:	e7d4      	b.n	8001016 <HW_TS_Create+0x56>
 800106c:	20001580 	.word	0x20001580

08001070 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8001070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001074:	4680      	mov	r8, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001076:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800107a:	b672      	cpsid	i
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800107c:	4f3b      	ldr	r7, [pc, #236]	; (800116c <HW_TS_Stop+0xfc>)

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800107e:	4e3c      	ldr	r6, [pc, #240]	; (8001170 <HW_TS_Stop+0x100>)
  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001080:	2003      	movs	r0, #3
 8001082:	f009 fa61 	bl	800a548 <HAL_NVIC_DisableIRQ>
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001086:	683b      	ldr	r3, [r7, #0]
  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001088:	ea4f 0048 	mov.w	r0, r8, lsl #1
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800108c:	681b      	ldr	r3, [r3, #0]
  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800108e:	eb00 0208 	add.w	r2, r0, r8
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001092:	2153      	movs	r1, #83	; 0x53
  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001094:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001098:	25ca      	movs	r5, #202	; 0xca
 800109a:	625d      	str	r5, [r3, #36]	; 0x24
 800109c:	6259      	str	r1, [r3, #36]	; 0x24
  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800109e:	7c11      	ldrb	r1, [r2, #16]
 80010a0:	2902      	cmp	r1, #2
 80010a2:	d008      	beq.n	80010b6 <HW_TS_Stop+0x46>
      RescheduleTimerList();
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80010a4:	22ff      	movs	r2, #255	; 0xff
 80010a6:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80010a8:	2003      	movs	r0, #3
 80010aa:	f009 fa3f 	bl	800a52c <HAL_NVIC_EnableIRQ>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80010ae:	f384 8810 	msr	PRIMASK, r4
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
}
 80010b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(TimerID == CurrentRunningTimerID)
 80010b6:	7831      	ldrb	r1, [r6, #0]
 80010b8:	4588      	cmp	r8, r1
 80010ba:	d02e      	beq.n	800111a <HW_TS_Stop+0xaa>
    previous_id = aTimerContext[TimerID].PreviousID;
 80010bc:	7e15      	ldrb	r5, [r2, #24]
    next_id = aTimerContext[TimerID].NextID;
 80010be:	7e51      	ldrb	r1, [r2, #25]
    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 80010c0:	f892 c019 	ldrb.w	ip, [r2, #25]
 80010c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80010c8:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
    next_id = aTimerContext[TimerID].NextID;
 80010cc:	b2c9      	uxtb	r1, r1
    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 80010ce:	fa5f fc8c 	uxtb.w	ip, ip
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80010d2:	290a      	cmp	r1, #10
    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 80010d4:	f885 c019 	strb.w	ip, [r5, #25]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80010d8:	d006      	beq.n	80010e8 <HW_TS_Stop+0x78>
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 80010da:	7e12      	ldrb	r2, [r2, #24]
 80010dc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80010e0:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 80010e4:	b2d2      	uxtb	r2, r2
 80010e6:	760a      	strb	r2, [r1, #24]
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 80010e8:	4440      	add	r0, r8
 80010ea:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
 80010ee:	2201      	movs	r2, #1
 80010f0:	7402      	strb	r2, [r0, #16]
  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 80010f2:	7832      	ldrb	r2, [r6, #0]
 80010f4:	2a0a      	cmp	r2, #10
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80010f6:	bf04      	itt	eq
 80010f8:	f04f 32ff 	moveq.w	r2, #4294967295
 80010fc:	f8c6 20f4 	streq.w	r2, [r6, #244]	; 0xf4
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001100:	7832      	ldrb	r2, [r6, #0]
 8001102:	b2d2      	uxtb	r2, r2
    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001104:	2a0a      	cmp	r2, #10
 8001106:	d010      	beq.n	800112a <HW_TS_Stop+0xba>
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001108:	f896 10f9 	ldrb.w	r1, [r6, #249]	; 0xf9
 800110c:	4291      	cmp	r1, r2
 800110e:	d0c9      	beq.n	80010a4 <HW_TS_Stop+0x34>
      RescheduleTimerList();
 8001110:	f7ff fdf2 	bl	8000cf8 <RescheduleTimerList>
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	e7c4      	b.n	80010a4 <HW_TS_Stop+0x34>
    PreviousRunningTimerID = CurrentRunningTimerID;
 800111a:	7831      	ldrb	r1, [r6, #0]
 800111c:	b2c9      	uxtb	r1, r1
 800111e:	f886 10f9 	strb.w	r1, [r6, #249]	; 0xf9
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8001122:	7e52      	ldrb	r2, [r2, #25]
 8001124:	b2d2      	uxtb	r2, r2
 8001126:	7032      	strb	r2, [r6, #0]
 8001128:	e7de      	b.n	80010e8 <HW_TS_Stop+0x78>
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800112a:	4a12      	ldr	r2, [pc, #72]	; (8001174 <HW_TS_Stop+0x104>)
 800112c:	6892      	ldr	r2, [r2, #8]
 800112e:	0550      	lsls	r0, r2, #21
 8001130:	d415      	bmi.n	800115e <HW_TS_Stop+0xee>
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8001132:	689a      	ldr	r2, [r3, #8]
 8001134:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001138:	609a      	str	r2, [r3, #8]
      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 800113a:	68da      	ldr	r2, [r3, #12]
 800113c:	0752      	lsls	r2, r2, #29
 800113e:	d5fc      	bpl.n	800113a <HW_TS_Stop+0xca>
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001140:	68da      	ldr	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001142:	490d      	ldr	r1, [pc, #52]	; (8001178 <HW_TS_Stop+0x108>)
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001144:	b2d2      	uxtb	r2, r2
 8001146:	f462 6290 	orn	r2, r2, #1152	; 0x480
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800114a:	f44f 2500 	mov.w	r5, #524288	; 0x80000
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800114e:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001150:	2003      	movs	r0, #3
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001152:	60cd      	str	r5, [r1, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001154:	f009 fa36 	bl	800a5c4 <HAL_NVIC_ClearPendingIRQ>
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	e7a2      	b.n	80010a4 <HW_TS_Stop+0x34>
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 800115e:	68da      	ldr	r2, [r3, #12]
 8001160:	0751      	lsls	r1, r2, #29
 8001162:	d5e6      	bpl.n	8001132 <HW_TS_Stop+0xc2>
 8001164:	68da      	ldr	r2, [r3, #12]
 8001166:	0751      	lsls	r1, r2, #29
 8001168:	d4f9      	bmi.n	800115e <HW_TS_Stop+0xee>
 800116a:	e7e2      	b.n	8001132 <HW_TS_Stop+0xc2>
 800116c:	20001874 	.word	0x20001874
 8001170:	20001580 	.word	0x20001580
 8001174:	40002800 	.word	0x40002800
 8001178:	58000800 	.word	0x58000800

0800117c <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 800117c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001180:	0047      	lsls	r7, r0, #1
 8001182:	4c79      	ldr	r4, [pc, #484]	; (8001368 <HW_TS_Start+0x1ec>)
 8001184:	183b      	adds	r3, r7, r0
 8001186:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
{
 800118a:	4606      	mov	r6, r0
  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800118c:	7c1b      	ldrb	r3, [r3, #16]
 800118e:	2b02      	cmp	r3, #2
{
 8001190:	4689      	mov	r9, r1
  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001192:	f000 80db 	beq.w	800134c <HW_TS_Start+0x1d0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001196:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800119a:	b672      	cpsid	i
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800119c:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 8001370 <HW_TS_Start+0x1f4>
  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80011a0:	2003      	movs	r0, #3
 80011a2:	f009 f9d1 	bl	800a548 <HAL_NVIC_DisableIRQ>
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80011a6:	f8d8 2000 	ldr.w	r2, [r8]
 80011aa:	6812      	ldr	r2, [r2, #0]
 80011ac:	21ca      	movs	r1, #202	; 0xca

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80011ae:	19bb      	adds	r3, r7, r6
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80011b0:	6251      	str	r1, [r2, #36]	; 0x24
  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80011b2:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80011b6:	2153      	movs	r1, #83	; 0x53
 80011b8:	6251      	str	r1, [r2, #36]	; 0x24
  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80011ba:	2202      	movs	r2, #2
 80011bc:	741a      	strb	r2, [r3, #16]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80011be:	f8c3 900c 	str.w	r9, [r3, #12]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80011c2:	f8c3 9008 	str.w	r9, [r3, #8]
  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80011c6:	7822      	ldrb	r2, [r4, #0]
 80011c8:	b2d2      	uxtb	r2, r2
 80011ca:	2a0a      	cmp	r2, #10
 80011cc:	f000 808e 	beq.w	80012ec <HW_TS_Start+0x170>
  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 80011d0:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 80011d4:	3301      	adds	r3, #1
 80011d6:	f000 80bc 	beq.w	8001352 <HW_TS_Start+0x1d6>
  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80011da:	4964      	ldr	r1, [pc, #400]	; (800136c <HW_TS_Start+0x1f0>)
 80011dc:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80011de:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80011e0:	b29b      	uxth	r3, r3
  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80011e2:	b292      	uxth	r2, r2
  while(first_read != second_read)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d101      	bne.n	80011ec <HW_TS_Start+0x70>
 80011e8:	e004      	b.n	80011f4 <HW_TS_Start+0x78>
 80011ea:	461a      	mov	r2, r3
    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80011ec:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80011ee:	b29b      	uxth	r3, r3
  while(first_read != second_read)
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d1fa      	bne.n	80011ea <HW_TS_Start+0x6e>
    if (SSRValueOnLastSetup >= return_value)
 80011f4:	f8d4 20f4 	ldr.w	r2, [r4, #244]	; 0xf4
 80011f8:	4293      	cmp	r3, r2
      wrap_counter = SynchPrescalerUserConfig - return_value;
 80011fa:	bf85      	ittet	hi
 80011fc:	f8b8 2004 	ldrhhi.w	r2, [r8, #4]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001200:	f8d4 10f4 	ldrhi.w	r1, [r4, #244]	; 0xf4
      return_value = SSRValueOnLastSetup - return_value;
 8001204:	f8d4 20f4 	ldrls.w	r2, [r4, #244]	; 0xf4
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001208:	1852      	addhi	r2, r2, r1
    return_value = return_value*AsynchPrescalerUserConfig;
 800120a:	f898 1006 	ldrb.w	r1, [r8, #6]
      return_value = SSRValueOnLastSetup + wrap_counter;
 800120e:	1ad3      	subs	r3, r2, r3
    return_value = return_value >> WakeupTimerDivider;
 8001210:	f898 2007 	ldrb.w	r2, [r8, #7]
    return_value = return_value*AsynchPrescalerUserConfig;
 8001214:	fb03 f301 	mul.w	r3, r3, r1
    return_value = return_value >> WakeupTimerDivider;
 8001218:	40d3      	lsrs	r3, r2
 800121a:	b299      	uxth	r1, r3
 800121c:	460b      	mov	r3, r1
    aTimerContext[TimerID].CountLeft += time_elapsed;
 800121e:	19ba      	adds	r2, r7, r6
 8001220:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8001224:	68d0      	ldr	r0, [r2, #12]
 8001226:	4403      	add	r3, r0
 8001228:	60d3      	str	r3, [r2, #12]
    time_left = aTimerContext[TimerID].CountLeft;
 800122a:	f8d2 c00c 	ldr.w	ip, [r2, #12]
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 800122e:	7823      	ldrb	r3, [r4, #0]
 8001230:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001234:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8001238:	68db      	ldr	r3, [r3, #12]
 800123a:	459c      	cmp	ip, r3
 800123c:	d36a      	bcc.n	8001314 <HW_TS_Start+0x198>
      timer_id_lookup = CurrentRunningTimerID;
 800123e:	7820      	ldrb	r0, [r4, #0]
 8001240:	b2c0      	uxtb	r0, r0
      next_id = aTimerContext[timer_id_lookup].NextID;
 8001242:	0043      	lsls	r3, r0, #1
 8001244:	181a      	adds	r2, r3, r0
 8001246:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 800124a:	7e52      	ldrb	r2, [r2, #25]
 800124c:	b2d2      	uxtb	r2, r2
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 800124e:	2a0a      	cmp	r2, #10
 8001250:	d01c      	beq.n	800128c <HW_TS_Start+0x110>
 8001252:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001256:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 800125a:	68d2      	ldr	r2, [r2, #12]
 800125c:	4594      	cmp	ip, r2
 800125e:	d204      	bcs.n	800126a <HW_TS_Start+0xee>
 8001260:	e014      	b.n	800128c <HW_TS_Start+0x110>
 8001262:	f8de 200c 	ldr.w	r2, [lr, #12]
 8001266:	4594      	cmp	ip, r2
 8001268:	d310      	bcc.n	800128c <HW_TS_Start+0x110>
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 800126a:	4403      	add	r3, r0
 800126c:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8001270:	7e58      	ldrb	r0, [r3, #25]
 8001272:	b2c0      	uxtb	r0, r0
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001274:	0043      	lsls	r3, r0, #1
 8001276:	181a      	adds	r2, r3, r0
 8001278:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 800127c:	7e52      	ldrb	r2, [r2, #25]
 800127e:	b2d2      	uxtb	r2, r2
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001280:	eb02 0e42 	add.w	lr, r2, r2, lsl #1
 8001284:	2a0a      	cmp	r2, #10
 8001286:	eb04 0ece 	add.w	lr, r4, lr, lsl #3
 800128a:	d1ea      	bne.n	8001262 <HW_TS_Start+0xe6>
  next_id = aTimerContext[RefTimerID].NextID;
 800128c:	181a      	adds	r2, r3, r0
 800128e:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8001292:	f892 c019 	ldrb.w	ip, [r2, #25]
 8001296:	fa5f fc8c 	uxtb.w	ip, ip
  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800129a:	f1bc 0f0a 	cmp.w	ip, #10
 800129e:	d004      	beq.n	80012aa <HW_TS_Start+0x12e>
    aTimerContext[next_id].PreviousID = TimerID;
 80012a0:	eb0c 024c 	add.w	r2, ip, ip, lsl #1
 80012a4:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 80012a8:	7616      	strb	r6, [r2, #24]
  aTimerContext[RefTimerID].NextID = TimerID;
 80012aa:	181a      	adds	r2, r3, r0
  aTimerContext[TimerID].NextID = next_id;
 80012ac:	19bb      	adds	r3, r7, r6
 80012ae:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
  aTimerContext[RefTimerID].NextID = TimerID;
 80012b2:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
  aTimerContext[TimerID].NextID = next_id;
 80012b6:	f883 c019 	strb.w	ip, [r3, #25]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 80012ba:	7618      	strb	r0, [r3, #24]
  aTimerContext[RefTimerID].NextID = TimerID;
 80012bc:	7656      	strb	r6, [r2, #25]

  time_elapsed =  linkTimer(timer_id);

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80012be:	7823      	ldrb	r3, [r4, #0]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80012c0:	f894 20f9 	ldrb.w	r2, [r4, #249]	; 0xf9
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d122      	bne.n	800130e <HW_TS_Start+0x192>
  {
    RescheduleTimerList();
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80012c8:	443e      	add	r6, r7
 80012ca:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80012ce:	68e3      	ldr	r3, [r4, #12]
 80012d0:	1a59      	subs	r1, r3, r1
 80012d2:	60e1      	str	r1, [r4, #12]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80012d4:	f8d8 3000 	ldr.w	r3, [r8]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	22ff      	movs	r2, #255	; 0xff
 80012dc:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80012de:	2003      	movs	r0, #3
 80012e0:	f009 f924 	bl	800a52c <HAL_NVIC_EnableIRQ>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80012e4:	f385 8810 	msr	PRIMASK, r5
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
}
 80012e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    PreviousRunningTimerID = CurrentRunningTimerID;
 80012ec:	7821      	ldrb	r1, [r4, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80012ee:	f04f 30ff 	mov.w	r0, #4294967295
    PreviousRunningTimerID = CurrentRunningTimerID;
 80012f2:	b2c9      	uxtb	r1, r1
 80012f4:	f884 10f9 	strb.w	r1, [r4, #249]	; 0xf9
    CurrentRunningTimerID = TimerID;
 80012f8:	7026      	strb	r6, [r4, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 80012fa:	765a      	strb	r2, [r3, #25]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80012fc:	f8c4 00f4 	str.w	r0, [r4, #244]	; 0xf4
  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001300:	7823      	ldrb	r3, [r4, #0]
  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001302:	f894 20f9 	ldrb.w	r2, [r4, #249]	; 0xf9
 8001306:	429a      	cmp	r2, r3
    time_elapsed = 0;
 8001308:	f04f 0100 	mov.w	r1, #0
  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800130c:	d0dc      	beq.n	80012c8 <HW_TS_Start+0x14c>
    RescheduleTimerList();
 800130e:	f7ff fcf3 	bl	8000cf8 <RescheduleTimerList>
 8001312:	e7df      	b.n	80012d4 <HW_TS_Start+0x158>
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001314:	7823      	ldrb	r3, [r4, #0]
  if(RefTimerID != CurrentRunningTimerID)
 8001316:	7820      	ldrb	r0, [r4, #0]
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001318:	b2db      	uxtb	r3, r3
  if(RefTimerID != CurrentRunningTimerID)
 800131a:	4283      	cmp	r3, r0
 800131c:	d01c      	beq.n	8001358 <HW_TS_Start+0x1dc>
    previous_id = aTimerContext[RefTimerID].PreviousID;
 800131e:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 8001322:	eb04 0ccc 	add.w	ip, r4, ip, lsl #3
 8001326:	f89c 0018 	ldrb.w	r0, [ip, #24]
 800132a:	b2c0      	uxtb	r0, r0
    aTimerContext[previous_id].NextID = TimerID;
 800132c:	eb00 0e40 	add.w	lr, r0, r0, lsl #1
 8001330:	eb04 0ece 	add.w	lr, r4, lr, lsl #3
 8001334:	f88e 6019 	strb.w	r6, [lr, #25]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001338:	7653      	strb	r3, [r2, #25]
    aTimerContext[TimerID].PreviousID = previous_id ;
 800133a:	7610      	strb	r0, [r2, #24]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800133c:	f88c 6018 	strb.w	r6, [ip, #24]
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001340:	7823      	ldrb	r3, [r4, #0]
 8001342:	b2db      	uxtb	r3, r3
 8001344:	f884 30f9 	strb.w	r3, [r4, #249]	; 0xf9
      CurrentRunningTimerID = TimerID;
 8001348:	7026      	strb	r6, [r4, #0]
 800134a:	e7b8      	b.n	80012be <HW_TS_Start+0x142>
    HW_TS_Stop( timer_id );
 800134c:	f7ff fe90 	bl	8001070 <HW_TS_Stop>
 8001350:	e721      	b.n	8001196 <HW_TS_Start+0x1a>
  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8001352:	2300      	movs	r3, #0
 8001354:	4619      	mov	r1, r3
 8001356:	e762      	b.n	800121e <HW_TS_Start+0xa2>
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001358:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 800135c:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    aTimerContext[TimerID].NextID = RefTimerID;
 8001360:	7653      	strb	r3, [r2, #25]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001362:	7606      	strb	r6, [r0, #24]
 8001364:	e7ec      	b.n	8001340 <HW_TS_Start+0x1c4>
 8001366:	bf00      	nop
 8001368:	20001580 	.word	0x20001580
 800136c:	40002800 	.word	0x40002800
 8001370:	20001874 	.word	0x20001874

08001374 <HW_TS_RTC_Int_AppNot>:
  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
  pTimerCallBack();
 8001374:	4710      	bx	r2
 8001376:	bf00      	nop

08001378 <HW_TS_RTC_Wakeup_Handler>:
{
 8001378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800137c:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8001380:	b672      	cpsid	i
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001382:	4d3f      	ldr	r5, [pc, #252]	; (8001480 <HW_TS_RTC_Wakeup_Handler+0x108>)
  local_current_running_timer_id = CurrentRunningTimerID;
 8001384:	483f      	ldr	r0, [pc, #252]	; (8001484 <HW_TS_RTC_Wakeup_Handler+0x10c>)
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001386:	682b      	ldr	r3, [r5, #0]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f04f 08ca 	mov.w	r8, #202	; 0xca
 800138e:	2753      	movs	r7, #83	; 0x53
 8001390:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
 8001394:	625f      	str	r7, [r3, #36]	; 0x24
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 8001396:	689a      	ldr	r2, [r3, #8]
 8001398:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800139c:	609a      	str	r2, [r3, #8]
  local_current_running_timer_id = CurrentRunningTimerID;
 800139e:	7804      	ldrb	r4, [r0, #0]
 80013a0:	b2e4      	uxtb	r4, r4
  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 80013a2:	ea4f 0c44 	mov.w	ip, r4, lsl #1
 80013a6:	eb0c 0104 	add.w	r1, ip, r4
 80013aa:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80013ae:	7c0a      	ldrb	r2, [r1, #16]
 80013b0:	2a02      	cmp	r2, #2
 80013b2:	d013      	beq.n	80013dc <HW_TS_RTC_Wakeup_Handler+0x64>
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 80013b4:	68da      	ldr	r2, [r3, #12]
 80013b6:	0752      	lsls	r2, r2, #29
 80013b8:	d5fc      	bpl.n	80013b4 <HW_TS_RTC_Wakeup_Handler+0x3c>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80013ba:	68da      	ldr	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80013bc:	4932      	ldr	r1, [pc, #200]	; (8001488 <HW_TS_RTC_Wakeup_Handler+0x110>)
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80013be:	b2d2      	uxtb	r2, r2
 80013c0:	f462 6290 	orn	r2, r2, #1152	; 0x480
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80013c4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80013c8:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80013ca:	60c8      	str	r0, [r1, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80013cc:	f386 8810 	msr	PRIMASK, r6
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80013d0:	682b      	ldr	r3, [r5, #0]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	22ff      	movs	r2, #255	; 0xff
 80013d6:	625a      	str	r2, [r3, #36]	; 0x24
}
 80013d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 80013dc:	f8d1 a004 	ldr.w	sl, [r1, #4]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 80013e0:	f8d1 9014 	ldr.w	r9, [r1, #20]
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 80013e4:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d03c      	beq.n	8001466 <HW_TS_RTC_Wakeup_Handler+0xee>
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 80013ec:	7c4b      	ldrb	r3, [r1, #17]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d00f      	beq.n	8001412 <HW_TS_RTC_Wakeup_Handler+0x9a>
 80013f2:	f386 8810 	msr	PRIMASK, r6
        HW_TS_Stop(local_current_running_timer_id);
 80013f6:	4620      	mov	r0, r4
 80013f8:	f7ff fe3a 	bl	8001070 <HW_TS_Stop>
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80013fc:	682b      	ldr	r3, [r5, #0]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
 8001404:	625f      	str	r7, [r3, #36]	; 0x24
      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001406:	4652      	mov	r2, sl
 8001408:	4621      	mov	r1, r4
 800140a:	4648      	mov	r0, r9
 800140c:	f7ff ffb2 	bl	8001374 <HW_TS_RTC_Int_AppNot>
 8001410:	e7de      	b.n	80013d0 <HW_TS_RTC_Wakeup_Handler+0x58>
  if(TimerID == CurrentRunningTimerID)
 8001412:	7803      	ldrb	r3, [r0, #0]
 8001414:	429c      	cmp	r4, r3
 8001416:	d02b      	beq.n	8001470 <HW_TS_RTC_Wakeup_Handler+0xf8>
    previous_id = aTimerContext[TimerID].PreviousID;
 8001418:	7e0a      	ldrb	r2, [r1, #24]
    next_id = aTimerContext[TimerID].NextID;
 800141a:	7e4b      	ldrb	r3, [r1, #25]
    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 800141c:	7e4f      	ldrb	r7, [r1, #25]
 800141e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001422:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
    next_id = aTimerContext[TimerID].NextID;
 8001426:	b2db      	uxtb	r3, r3
    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001428:	b2ff      	uxtb	r7, r7
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800142a:	2b0a      	cmp	r3, #10
    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 800142c:	7657      	strb	r7, [r2, #25]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800142e:	d006      	beq.n	800143e <HW_TS_RTC_Wakeup_Handler+0xc6>
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8001430:	7e0a      	ldrb	r2, [r1, #24]
 8001432:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001436:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800143a:	b2d2      	uxtb	r2, r2
 800143c:	761a      	strb	r2, [r3, #24]
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 800143e:	eb0c 0304 	add.w	r3, ip, r4
 8001442:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8001446:	2201      	movs	r2, #1
 8001448:	741a      	strb	r2, [r3, #16]
  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 800144a:	7802      	ldrb	r2, [r0, #0]
 800144c:	f386 8810 	msr	PRIMASK, r6
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001450:	6899      	ldr	r1, [r3, #8]
 8001452:	4620      	mov	r0, r4
 8001454:	f7ff fe92 	bl	800117c <HW_TS_Start>
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001458:	682b      	ldr	r3, [r5, #0]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	21ca      	movs	r1, #202	; 0xca
 800145e:	2253      	movs	r2, #83	; 0x53
 8001460:	6259      	str	r1, [r3, #36]	; 0x24
 8001462:	625a      	str	r2, [r3, #36]	; 0x24
 8001464:	e7cf      	b.n	8001406 <HW_TS_RTC_Wakeup_Handler+0x8e>
      RescheduleTimerList();
 8001466:	f7ff fc47 	bl	8000cf8 <RescheduleTimerList>
 800146a:	f386 8810 	msr	PRIMASK, r6
 800146e:	e7af      	b.n	80013d0 <HW_TS_RTC_Wakeup_Handler+0x58>
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001470:	7803      	ldrb	r3, [r0, #0]
 8001472:	b2db      	uxtb	r3, r3
 8001474:	f880 30f9 	strb.w	r3, [r0, #249]	; 0xf9
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8001478:	7e4b      	ldrb	r3, [r1, #25]
 800147a:	b2db      	uxtb	r3, r3
 800147c:	7003      	strb	r3, [r0, #0]
 800147e:	e7de      	b.n	800143e <HW_TS_RTC_Wakeup_Handler+0xc6>
 8001480:	20001874 	.word	0x20001874
 8001484:	20001580 	.word	0x20001580
 8001488:	58000800 	.word	0x58000800

0800148c <HAL_UART_TxCpltCallback>:
    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
    switch ((uint32_t)huart->Instance)
 800148c:	6803      	ldr	r3, [r0, #0]
 800148e:	4a08      	ldr	r2, [pc, #32]	; (80014b0 <HAL_UART_TxCpltCallback+0x24>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d007      	beq.n	80014a4 <HAL_UART_TxCpltCallback+0x18>
 8001494:	f502 4238 	add.w	r2, r2, #47104	; 0xb800
 8001498:	4293      	cmp	r3, r2
 800149a:	d107      	bne.n	80014ac <HAL_UART_TxCpltCallback+0x20>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
                if(HW_huart1TxCb)
 800149c:	4b05      	ldr	r3, [pc, #20]	; (80014b4 <HAL_UART_TxCpltCallback+0x28>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	b123      	cbz	r3, 80014ac <HAL_UART_TxCpltCallback+0x20>

#if (CFG_HW_LPUART1_ENABLED == 1)
        case (uint32_t)LPUART1:
                if(HW_hlpuart1TxCb)
                {
                    HW_hlpuart1TxCb();
 80014a2:	4718      	bx	r3
                if(HW_hlpuart1TxCb)
 80014a4:	4b04      	ldr	r3, [pc, #16]	; (80014b8 <HAL_UART_TxCpltCallback+0x2c>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d1fa      	bne.n	80014a2 <HAL_UART_TxCpltCallback+0x16>
        default:
            break;
    }

    return;
}
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	40008000 	.word	0x40008000
 80014b4:	20007bc0 	.word	0x20007bc0
 80014b8:	20007bb4 	.word	0x20007bb4

080014bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014bc:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014be:	2234      	movs	r2, #52	; 0x34
{
 80014c0:	b0ae      	sub	sp, #184	; 0xb8
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014c2:	2100      	movs	r1, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014c4:	460c      	mov	r4, r1
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014c6:	eb0d 0002 	add.w	r0, sp, r2
 80014ca:	f021 f9e5 	bl	8022898 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014ce:	4621      	mov	r1, r4
 80014d0:	a81a      	add	r0, sp, #104	; 0x68
 80014d2:	2250      	movs	r2, #80	; 0x50
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014d4:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80014d8:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80014dc:	e9cd 4405 	strd	r4, r4, [sp, #20]
 80014e0:	9407      	str	r4, [sp, #28]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014e2:	f021 f9d9 	bl	8022898 <memset>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80014e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
  /** Configure LSE Drive Capability 
  */
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014ea:	4a20      	ldr	r2, [pc, #128]	; (800156c <SystemClock_Config+0xb0>)
 80014ec:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
 80014f0:	f023 0318 	bic.w	r3, r3, #24
 80014f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80014f8:	6813      	ldr	r3, [r2, #0]
 80014fa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001502:	6013      	str	r3, [r2, #0]
 8001504:	6813      	ldr	r3, [r2, #0]
 8001506:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800150a:	9300      	str	r3, [sp, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800150c:	2307      	movs	r3, #7
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800150e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001512:	2501      	movs	r5, #1
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001514:	f44f 7680 	mov.w	r6, #256	; 0x100
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001518:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800151a:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800151c:	2340      	movs	r3, #64	; 0x40
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800151e:	9209      	str	r2, [sp, #36]	; 0x24
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001520:	9900      	ldr	r1, [sp, #0]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001522:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001524:	e9cd 560a 	strd	r5, r6, [sp, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001528:	f009 ff16 	bl	800b358 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800152c:	4629      	mov	r1, r5
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800152e:	236f      	movs	r3, #111	; 0x6f
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001530:	2502      	movs	r5, #2
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001532:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001534:	e9cd 3501 	strd	r3, r5, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001538:	e9cd 4403 	strd	r4, r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800153c:	e9cd 4405 	strd	r4, r4, [sp, #20]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001540:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001542:	f00a fa3f 	bl	800b9c4 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 8001546:	f643 0107 	movw	r1, #14343	; 0x3807
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_I2C1;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800154a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 800154e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001552:	a81a      	add	r0, sp, #104	; 0x68
  PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001554:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001558:	962a      	str	r6, [sp, #168]	; 0xa8
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 800155a:	e9cd 542c 	strd	r5, r4, [sp, #176]	; 0xb0
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 800155e:	911a      	str	r1, [sp, #104]	; 0x68
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001560:	9222      	str	r2, [sp, #136]	; 0x88
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8001562:	932b      	str	r3, [sp, #172]	; 0xac
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001564:	f00a fb94 	bl	800bc90 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8001568:	b02e      	add	sp, #184	; 0xb8
 800156a:	bd70      	pop	{r4, r5, r6, pc}
 800156c:	58000400 	.word	0x58000400

08001570 <main>:
{
 8001570:	b500      	push	{lr}
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001572:	2400      	movs	r4, #0
{
 8001574:	b08d      	sub	sp, #52	; 0x34
  HAL_Init();
 8001576:	f008 ff43 	bl	800a400 <HAL_Init>
  SystemClock_Config();
 800157a:	f7ff ff9f 	bl	80014bc <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157e:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8001582:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001586:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 800158a:	940b      	str	r4, [sp, #44]	; 0x2c
 800158c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 800158e:	484e      	ldr	r0, [pc, #312]	; (80016c8 <main+0x158>)
 8001590:	f043 0304 	orr.w	r3, r3, #4
 8001594:	64eb      	str	r3, [r5, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001596:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8001598:	f003 0304 	and.w	r3, r3, #4
 800159c:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 800159e:	9b03      	ldr	r3, [sp, #12]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80015a0:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80015a2:	f043 0302 	orr.w	r3, r3, #2
 80015a6:	64eb      	str	r3, [r5, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80015a8:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80015aa:	f003 0302 	and.w	r3, r3, #2
 80015ae:	9304      	str	r3, [sp, #16]
  (void)tmpreg;
 80015b0:	9b04      	ldr	r3, [sp, #16]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80015b2:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80015b4:	f043 0301 	orr.w	r3, r3, #1
 80015b8:	64eb      	str	r3, [r5, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80015ba:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80015bc:	f003 0301 	and.w	r3, r3, #1
 80015c0:	9305      	str	r3, [sp, #20]
  (void)tmpreg;
 80015c2:	9b05      	ldr	r3, [sp, #20]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80015c4:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80015c6:	f043 0308 	orr.w	r3, r3, #8
 80015ca:	64eb      	str	r3, [r5, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80015cc:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80015ce:	f003 0308 	and.w	r3, r3, #8
 80015d2:	4622      	mov	r2, r4
 80015d4:	9306      	str	r3, [sp, #24]
 80015d6:	2103      	movs	r1, #3

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d8:	2601      	movs	r6, #1
  (void)tmpreg;
 80015da:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 80015dc:	f009 fa64 	bl	800aaa8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 80015e0:	2303      	movs	r3, #3
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e2:	a907      	add	r1, sp, #28
 80015e4:	4838      	ldr	r0, [pc, #224]	; (80016c8 <main+0x158>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e6:	e9cd 3607 	strd	r3, r6, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ea:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ee:	f009 f8f9 	bl	800a7e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80015f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015f6:	4b35      	ldr	r3, [pc, #212]	; (80016cc <main+0x15c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015f8:	4835      	ldr	r0, [pc, #212]	; (80016d0 <main+0x160>)
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80015fa:	9207      	str	r2, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015fc:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015fe:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001600:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001602:	f009 f8ef 	bl	800a7e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_SW2_Pin */
  GPIO_InitStruct.Pin = BUTTON_SW2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001606:	4b33      	ldr	r3, [pc, #204]	; (80016d4 <main+0x164>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(BUTTON_SW2_GPIO_Port, &GPIO_InitStruct);
 8001608:	4833      	ldr	r0, [pc, #204]	; (80016d8 <main+0x168>)
  GPIO_InitStruct.Pin = BUTTON_SW2_Pin;
 800160a:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(BUTTON_SW2_GPIO_Port, &GPIO_InitStruct);
 800160c:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800160e:	e9cd 3608 	strd	r3, r6, [sp, #32]
  HAL_GPIO_Init(BUTTON_SW2_GPIO_Port, &GPIO_InitStruct);
 8001612:	f009 f8e7 	bl	800a7e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001616:	4622      	mov	r2, r4
 8001618:	4621      	mov	r1, r4
 800161a:	2006      	movs	r0, #6
 800161c:	f008 ff50 	bl	800a4c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001620:	2006      	movs	r0, #6
 8001622:	f008 ff83 	bl	800a52c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001626:	4622      	mov	r2, r4
 8001628:	4621      	mov	r1, r4
 800162a:	2028      	movs	r0, #40	; 0x28
 800162c:	f008 ff48 	bl	800a4c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001630:	2028      	movs	r0, #40	; 0x28
 8001632:	f008 ff7b 	bl	800a52c <HAL_NVIC_EnableIRQ>
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001636:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8001638:	f043 0304 	orr.w	r3, r3, #4
 800163c:	64ab      	str	r3, [r5, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800163e:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8001640:	f003 0304 	and.w	r3, r3, #4
 8001644:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001646:	9b01      	ldr	r3, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001648:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800164a:	4333      	orrs	r3, r6
 800164c:	64ab      	str	r3, [r5, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800164e:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8001650:	4033      	ands	r3, r6
 8001652:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8001654:	9b02      	ldr	r3, [sp, #8]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001656:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8001658:	f043 0302 	orr.w	r3, r3, #2
 800165c:	64ab      	str	r3, [r5, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800165e:	6cab      	ldr	r3, [r5, #72]	; 0x48
  hrtc.Instance = RTC;
 8001660:	4d1e      	ldr	r5, [pc, #120]	; (80016dc <main+0x16c>)
 8001662:	f003 0302 	and.w	r3, r3, #2
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 15, 0);
 8001666:	4622      	mov	r2, r4
 8001668:	210f      	movs	r1, #15
 800166a:	9307      	str	r3, [sp, #28]
 800166c:	200e      	movs	r0, #14
  (void)tmpreg;
 800166e:	9b07      	ldr	r3, [sp, #28]
 8001670:	f008 ff26 	bl	800a4c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001674:	200e      	movs	r0, #14
 8001676:	f008 ff59 	bl	800a52c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 15, 0);
 800167a:	4622      	mov	r2, r4
 800167c:	210f      	movs	r1, #15
 800167e:	203a      	movs	r0, #58	; 0x3a
 8001680:	f008 ff1e 	bl	800a4c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8001684:	203a      	movs	r0, #58	; 0x3a
 8001686:	f008 ff51 	bl	800a52c <HAL_NVIC_EnableIRQ>
  hrtc.Instance = RTC;
 800168a:	4b15      	ldr	r3, [pc, #84]	; (80016e0 <main+0x170>)
  hrtc.Init.AsynchPrediv = 127;
 800168c:	217f      	movs	r1, #127	; 0x7f
  hrtc.Init.SynchPrediv = 255;
 800168e:	22ff      	movs	r2, #255	; 0xff
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001690:	4618      	mov	r0, r3
  hrtc.Init.SynchPrediv = 255;
 8001692:	e9c3 1202 	strd	r1, r2, [r3, #8]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001696:	605c      	str	r4, [r3, #4]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001698:	e9c3 4404 	strd	r4, r4, [r3, #16]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800169c:	e9c3 4406 	strd	r4, r4, [r3, #24]
  hrtc.Instance = RTC;
 80016a0:	601d      	str	r5, [r3, #0]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80016a2:	f00a fceb 	bl	800c07c <HAL_RTC_Init>
  hcrc.Instance = CRC;
 80016a6:	4b0f      	ldr	r3, [pc, #60]	; (80016e4 <main+0x174>)
 80016a8:	4a0f      	ldr	r2, [pc, #60]	; (80016e8 <main+0x178>)
 80016aa:	809c      	strh	r4, [r3, #4]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80016ac:	4618      	mov	r0, r3
  hcrc.Instance = CRC;
 80016ae:	601a      	str	r2, [r3, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80016b0:	621e      	str	r6, [r3, #32]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80016b2:	e9c3 4405 	strd	r4, r4, [r3, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80016b6:	f008 ff95 	bl	800a5e4 <HAL_CRC_Init>
  APPE_Init();
 80016ba:	f7ff faab 	bl	8000c14 <APPE_Init>
  	UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 80016be:	f04f 30ff 	mov.w	r0, #4294967295
 80016c2:	f00c fa21 	bl	800db08 <UTIL_SEQ_Run>
 80016c6:	e7fa      	b.n	80016be <main+0x14e>
 80016c8:	48000400 	.word	0x48000400
 80016cc:	10110000 	.word	0x10110000
 80016d0:	48000800 	.word	0x48000800
 80016d4:	10210000 	.word	0x10210000
 80016d8:	48000c00 	.word	0x48000c00
 80016dc:	40002800 	.word	0x40002800
 80016e0:	20007d60 	.word	0x20007d60
 80016e4:	20007bc4 	.word	0x20007bc4
 80016e8:	40023000 	.word	0x40023000

080016ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016ec:	b500      	push	{lr}
  OTP_ID0_t * p_otp;

  /**
    * Read HSE_Tuning from OTP
    */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 80016ee:	2000      	movs	r0, #0
{
 80016f0:	b083      	sub	sp, #12
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 80016f2:	f00b fe43 	bl	800d37c <OTP_Read>
  if (p_otp)
 80016f6:	b168      	cbz	r0, 8001714 <HAL_MspInit+0x28>
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80016f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016fc:	4b0c      	ldr	r3, [pc, #48]	; (8001730 <HAL_MspInit+0x44>)
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 80016fe:	7981      	ldrb	r1, [r0, #6]
 8001700:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8001704:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8001708:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800170c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001710:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  * @retval None
*/
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001714:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001718:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800171a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800171e:	651a      	str	r2, [r3, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001720:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001722:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001726:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001728:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800172a:	b003      	add	sp, #12
 800172c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001730:	cafecafe 	.word	0xcafecafe

08001734 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8001734:	6802      	ldr	r2, [r0, #0]
 8001736:	4b09      	ldr	r3, [pc, #36]	; (800175c <HAL_CRC_MspInit+0x28>)
 8001738:	429a      	cmp	r2, r3
 800173a:	d000      	beq.n	800173e <HAL_CRC_MspInit+0xa>
 800173c:	4770      	bx	lr
  SET_BIT(RCC->AHB1ENR, Periphs);
 800173e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 8001742:	b082      	sub	sp, #8
 8001744:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001746:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800174a:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800174c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800174e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001752:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001754:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001756:	b002      	add	sp, #8
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	40023000 	.word	0x40023000

08001760 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 8001760:	6802      	ldr	r2, [r0, #0]
 8001762:	4b06      	ldr	r3, [pc, #24]	; (800177c <HAL_RTC_MspInit+0x1c>)
 8001764:	429a      	cmp	r2, r3
 8001766:	d107      	bne.n	8001778 <HAL_RTC_MspInit+0x18>
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001768:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800176c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001770:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001774:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	40002800 	.word	0x40002800

08001780 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop

08001784 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001784:	e7fe      	b.n	8001784 <HardFault_Handler>
 8001786:	bf00      	nop

08001788 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001788:	e7fe      	b.n	8001788 <MemManage_Handler>
 800178a:	bf00      	nop

0800178c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800178c:	e7fe      	b.n	800178c <BusFault_Handler>
 800178e:	bf00      	nop

08001790 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001790:	e7fe      	b.n	8001790 <UsageFault_Handler>
 8001792:	bf00      	nop

08001794 <SVC_Handler>:
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop

08001798 <DebugMon_Handler>:
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop

0800179c <PendSV_Handler>:
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop

080017a0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017a0:	f008 be4a 	b.w	800a438 <HAL_IncTick>

080017a4 <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80017a4:	2001      	movs	r0, #1
 80017a6:	f009 b985 	b.w	800aab4 <HAL_GPIO_EXTI_IRQHandler>
 80017aa:	bf00      	nop

080017ac <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 80017ac:	4801      	ldr	r0, [pc, #4]	; (80017b4 <DMA1_Channel4_IRQHandler+0x8>)
 80017ae:	f008 bfc9 	b.w	800a744 <HAL_DMA_IRQHandler>
 80017b2:	bf00      	nop
 80017b4:	20007d84 	.word	0x20007d84

080017b8 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80017b8:	4801      	ldr	r0, [pc, #4]	; (80017c0 <USART1_IRQHandler+0x8>)
 80017ba:	f00a bce1 	b.w	800c180 <HAL_UART_IRQHandler>
 80017be:	bf00      	nop
 80017c0:	20007cd4 	.word	0x20007cd4

080017c4 <LPUART1_IRQHandler>:
void LPUART1_IRQHandler(void)
{
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80017c4:	4801      	ldr	r0, [pc, #4]	; (80017cc <LPUART1_IRQHandler+0x8>)
 80017c6:	f00a bcdb 	b.w	800c180 <HAL_UART_IRQHandler>
 80017ca:	bf00      	nop
 80017cc:	20007be8 	.word	0x20007be8

080017d0 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80017d0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80017d4:	f009 b96e 	b.w	800aab4 <HAL_GPIO_EXTI_IRQHandler>

080017d8 <DMA2_Channel4_IRQHandler>:
void DMA2_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80017d8:	4801      	ldr	r0, [pc, #4]	; (80017e0 <DMA2_Channel4_IRQHandler+0x8>)
 80017da:	f008 bfb3 	b.w	800a744 <HAL_DMA_IRQHandler>
 80017de:	bf00      	nop
 80017e0:	20007c74 	.word	0x20007c74

080017e4 <RTC_WKUP_IRQHandler>:
/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
  HW_TS_RTC_Wakeup_Handler();
 80017e4:	f7ff bdc8 	b.w	8001378 <HW_TS_RTC_Wakeup_Handler>

080017e8 <IPCC_C1_RX_IRQHandler>:
/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
  HW_IPCC_Rx_Handler();
 80017e8:	f003 b890 	b.w	800490c <HW_IPCC_Rx_Handler>

080017ec <IPCC_C1_TX_IRQHandler>:
/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
  HW_IPCC_Tx_Handler();
 80017ec:	f003 b834 	b.w	8004858 <HW_IPCC_Tx_Handler>

080017f0 <BSP_I2C1_DeInit>:
  */
int32_t BSP_I2C1_DeInit(void) 
{
  int32_t ret = BSP_ERROR_NONE;
  
  if (I2C1InitCounter > 0)
 80017f0:	4a0d      	ldr	r2, [pc, #52]	; (8001828 <BSP_I2C1_DeInit+0x38>)
{
 80017f2:	b508      	push	{r3, lr}
  if (I2C1InitCounter > 0)
 80017f4:	6813      	ldr	r3, [r2, #0]
 80017f6:	b113      	cbz	r3, 80017fe <BSP_I2C1_DeInit+0xe>
  {       
    if (--I2C1InitCounter == 0)
 80017f8:	3b01      	subs	r3, #1
 80017fa:	6013      	str	r3, [r2, #0]
 80017fc:	b10b      	cbz	r3, 8001802 <BSP_I2C1_DeInit+0x12>
  int32_t ret = BSP_ERROR_NONE;
 80017fe:	2000      	movs	r0, #0
    		ret = BSP_ERROR_BUS_FAILURE;
  		}
    }
  }
  return ret;
}
 8001800:	bd08      	pop	{r3, pc}
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8001802:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8|GPIO_PIN_9);
 8001806:	4809      	ldr	r0, [pc, #36]	; (800182c <BSP_I2C1_DeInit+0x3c>)
 8001808:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800180a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800180e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001812:	6593      	str	r3, [r2, #88]	; 0x58
 8001814:	f009 f8b4 	bl	800a980 <HAL_GPIO_DeInit>
  		if (HAL_I2C_DeInit(&hi2c1) != HAL_OK) 
 8001818:	4805      	ldr	r0, [pc, #20]	; (8001830 <BSP_I2C1_DeInit+0x40>)
 800181a:	f009 fa59 	bl	800acd0 <HAL_I2C_DeInit>
 800181e:	2800      	cmp	r0, #0
 8001820:	d0ed      	beq.n	80017fe <BSP_I2C1_DeInit+0xe>
    		ret = BSP_ERROR_BUS_FAILURE;
 8001822:	f06f 0007 	mvn.w	r0, #7
}
 8001826:	bd08      	pop	{r3, pc}
 8001828:	20001880 	.word	0x20001880
 800182c:	48000400 	.word	0x48000400
 8001830:	20007de4 	.word	0x20007de4

08001834 <BSP_I2C1_WriteReg>:
{
 8001834:	b510      	push	{r4, lr}
 8001836:	b084      	sub	sp, #16
  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001838:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 800183c:	e9cd 2300 	strd	r2, r3, [sp]
 8001840:	9402      	str	r4, [sp, #8]
 8001842:	460a      	mov	r2, r1
 8001844:	2301      	movs	r3, #1
 8001846:	4601      	mov	r1, r0
 8001848:	4807      	ldr	r0, [pc, #28]	; (8001868 <BSP_I2C1_WriteReg+0x34>)
 800184a:	f009 fa5b 	bl	800ad04 <HAL_I2C_Mem_Write>
 800184e:	b140      	cbz	r0, 8001862 <BSP_I2C1_WriteReg+0x2e>
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8001850:	4805      	ldr	r0, [pc, #20]	; (8001868 <BSP_I2C1_WriteReg+0x34>)
 8001852:	f009 fcab 	bl	800b1ac <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001856:	2804      	cmp	r0, #4
 8001858:	bf0c      	ite	eq
 800185a:	f06f 0065 	mvneq.w	r0, #101	; 0x65
 800185e:	f06f 0003 	mvnne.w	r0, #3
}
 8001862:	b004      	add	sp, #16
 8001864:	bd10      	pop	{r4, pc}
 8001866:	bf00      	nop
 8001868:	20007de4 	.word	0x20007de4

0800186c <BSP_I2C1_ReadReg>:
{
 800186c:	b510      	push	{r4, lr}
 800186e:	b084      	sub	sp, #16
  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001870:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8001874:	e9cd 2300 	strd	r2, r3, [sp]
 8001878:	9402      	str	r4, [sp, #8]
 800187a:	460a      	mov	r2, r1
 800187c:	2301      	movs	r3, #1
 800187e:	4601      	mov	r1, r0
 8001880:	4807      	ldr	r0, [pc, #28]	; (80018a0 <BSP_I2C1_ReadReg+0x34>)
 8001882:	f009 fb61 	bl	800af48 <HAL_I2C_Mem_Read>
 8001886:	b140      	cbz	r0, 800189a <BSP_I2C1_ReadReg+0x2e>
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8001888:	4805      	ldr	r0, [pc, #20]	; (80018a0 <BSP_I2C1_ReadReg+0x34>)
 800188a:	f009 fc8f 	bl	800b1ac <HAL_I2C_GetError>
      ret = BSP_ERROR_PERIPH_FAILURE;
 800188e:	2804      	cmp	r0, #4
 8001890:	bf0c      	ite	eq
 8001892:	f06f 0065 	mvneq.w	r0, #101	; 0x65
 8001896:	f06f 0003 	mvnne.w	r0, #3
}
 800189a:	b004      	add	sp, #16
 800189c:	bd10      	pop	{r4, pc}
 800189e:	bf00      	nop
 80018a0:	20007de4 	.word	0x20007de4

080018a4 <BSP_GetTick>:
  return HAL_GetTick();
 80018a4:	f008 bdd4 	b.w	800a450 <HAL_GetTick>

080018a8 <MX_I2C1_Init>:
{
 80018a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hi2c->Init.Timing = 0x00300F38;
 80018aa:	4b11      	ldr	r3, [pc, #68]	; (80018f0 <MX_I2C1_Init+0x48>)
  hi2c->Instance = I2C1;
 80018ac:	4a11      	ldr	r2, [pc, #68]	; (80018f4 <MX_I2C1_Init+0x4c>)
 80018ae:	6002      	str	r2, [r0, #0]
  hi2c->Init.OwnAddress1 = 0;
 80018b0:	2500      	movs	r5, #0
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018b2:	2601      	movs	r6, #1
  hi2c->Init.OwnAddress1 = 0;
 80018b4:	e9c0 3501 	strd	r3, r5, [r0, #4]
  hi2c->Init.OwnAddress2 = 0;
 80018b8:	e9c0 5504 	strd	r5, r5, [r0, #16]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018bc:	e9c0 5506 	strd	r5, r5, [r0, #24]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018c0:	6205      	str	r5, [r0, #32]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018c2:	60c6      	str	r6, [r0, #12]
{
 80018c4:	4604      	mov	r4, r0
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 80018c6:	f009 f9ad 	bl	800ac24 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80018ca:	4629      	mov	r1, r5
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 80018cc:	4607      	mov	r7, r0
  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80018ce:	4620      	mov	r0, r4
 80018d0:	f009 fc6e 	bl	800b1b0 <HAL_I2CEx_ConfigAnalogFilter>
 80018d4:	b910      	cbnz	r0, 80018dc <MX_I2C1_Init+0x34>
  HAL_StatusTypeDef ret = HAL_OK;
 80018d6:	1b7e      	subs	r6, r7, r5
 80018d8:	bf18      	it	ne
 80018da:	2601      	movne	r6, #1
  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 80018dc:	4620      	mov	r0, r4
 80018de:	2100      	movs	r1, #0
 80018e0:	f009 fc90 	bl	800b204 <HAL_I2CEx_ConfigDigitalFilter>
    ret = HAL_ERROR;
 80018e4:	2800      	cmp	r0, #0
}
 80018e6:	bf0c      	ite	eq
 80018e8:	4630      	moveq	r0, r6
 80018ea:	2001      	movne	r0, #1
 80018ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80018ee:	bf00      	nop
 80018f0:	00300f38 	.word	0x00300f38
 80018f4:	40005400 	.word	0x40005400

080018f8 <BSP_I2C1_Init>:
{
 80018f8:	b570      	push	{r4, r5, r6, lr}
  if(I2C1InitCounter++ == 0)
 80018fa:	4a20      	ldr	r2, [pc, #128]	; (800197c <BSP_I2C1_Init+0x84>)
  hi2c1.Instance  = I2C1;
 80018fc:	4c20      	ldr	r4, [pc, #128]	; (8001980 <BSP_I2C1_Init+0x88>)
  if(I2C1InitCounter++ == 0)
 80018fe:	6813      	ldr	r3, [r2, #0]
  hi2c1.Instance  = I2C1;
 8001900:	4920      	ldr	r1, [pc, #128]	; (8001984 <BSP_I2C1_Init+0x8c>)
 8001902:	6021      	str	r1, [r4, #0]
  if(I2C1InitCounter++ == 0)
 8001904:	1c59      	adds	r1, r3, #1
{
 8001906:	b088      	sub	sp, #32
  if(I2C1InitCounter++ == 0)
 8001908:	6011      	str	r1, [r2, #0]
 800190a:	b113      	cbz	r3, 8001912 <BSP_I2C1_Init+0x1a>
      		ret = BSP_ERROR_NONE;
 800190c:	2000      	movs	r0, #0
}
 800190e:	b008      	add	sp, #32
 8001910:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8001912:	4620      	mov	r0, r4
 8001914:	f009 fc46 	bl	800b1a4 <HAL_I2C_GetState>
 8001918:	4603      	mov	r3, r0
 800191a:	2800      	cmp	r0, #0
 800191c:	d1f6      	bne.n	800190c <BSP_I2C1_Init+0x14>
  SET_BIT(RCC->AHB2ENR, Periphs);
 800191e:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001922:	2112      	movs	r1, #18
 8001924:	6cea      	ldr	r2, [r5, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001926:	4818      	ldr	r0, [pc, #96]	; (8001988 <BSP_I2C1_Init+0x90>)
 8001928:	f042 0202 	orr.w	r2, r2, #2
 800192c:	64ea      	str	r2, [r5, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800192e:	6cea      	ldr	r2, [r5, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001930:	9306      	str	r3, [sp, #24]
 8001932:	f002 0202 	and.w	r2, r2, #2
 8001936:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8001938:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800193a:	9104      	str	r1, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800193c:	2304      	movs	r3, #4
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800193e:	2201      	movs	r2, #1
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001940:	f44f 7640 	mov.w	r6, #768	; 0x300
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001944:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001946:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001948:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800194a:	9205      	str	r2, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800194c:	f008 ff4a 	bl	800a7e4 <HAL_GPIO_Init>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001950:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001952:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001956:	65ab      	str	r3, [r5, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001958:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800195a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800195e:	9302      	str	r3, [sp, #8]
    	if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8001960:	4620      	mov	r0, r4
  (void)tmpreg;
 8001962:	9b02      	ldr	r3, [sp, #8]
 8001964:	f7ff ffa0 	bl	80018a8 <MX_I2C1_Init>
 8001968:	b928      	cbnz	r0, 8001976 <BSP_I2C1_Init+0x7e>
    	else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK) 
 800196a:	4601      	mov	r1, r0
 800196c:	4620      	mov	r0, r4
 800196e:	f009 fc1f 	bl	800b1b0 <HAL_I2CEx_ConfigAnalogFilter>
 8001972:	2800      	cmp	r0, #0
 8001974:	d0ca      	beq.n	800190c <BSP_I2C1_Init+0x14>
      		ret = BSP_ERROR_BUS_FAILURE;
 8001976:	f06f 0007 	mvn.w	r0, #7
 800197a:	e7c8      	b.n	800190e <BSP_I2C1_Init+0x16>
 800197c:	20001880 	.word	0x20001880
 8001980:	20007de4 	.word	0x20007de4
 8001984:	40005400 	.word	0x40005400
 8001988:	48000400 	.word	0x48000400

0800198c <MotionAR_manager_init>:
 * @brief  Initialize the MotionAR engine
 * @param  None
 * @retval None
 */
void MotionAR_manager_init(void)
{
 800198c:	b500      	push	{lr}
 800198e:	b083      	sub	sp, #12
  char acc_orientation[3];

  MotionAR_Initialize();
 8001990:	f00c f93a 	bl	800dc08 <MotionAR_Initialize>

#ifdef USE_IKS01A3
  acc_orientation[0] = 's';
 8001994:	f246 5273 	movw	r2, #25971	; 0x6573
  acc_orientation[1] = 'e';
 8001998:	2375      	movs	r3, #117	; 0x75
  acc_orientation[2] = 'u';
#endif

  MotionAR_SetOrientation_Acc(acc_orientation);
 800199a:	a801      	add	r0, sp, #4
  acc_orientation[0] = 's';
 800199c:	f8ad 2004 	strh.w	r2, [sp, #4]
  acc_orientation[1] = 'e';
 80019a0:	f88d 3006 	strb.w	r3, [sp, #6]
  MotionAR_SetOrientation_Acc(acc_orientation);
 80019a4:	f00c f974 	bl	800dc90 <MotionAR_SetOrientation_Acc>
}
 80019a8:	b003      	add	sp, #12
 80019aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80019ae:	bf00      	nop

080019b0 <MotionAR_manager_run>:
 * @param  timestamp  Timestamp in [ms]
 * @retval None
 */
void MotionAR_manager_run(MAR_input_t *data_in, MAR_output_t *data_out, uint32_t timestamp)
{
  MotionAR_Update(data_in, data_out, (long int)(timestamp & LONG_MAX));
 80019b0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80019b4:	f00c b9fc 	b.w	800ddb0 <MotionAR_Update>

080019b8 <MotionCP_manager_init>:
 * @brief  Initialises MotionCP algorithm
 * @param  None
 * @retval None
 */
void MotionCP_manager_init(void)
{
 80019b8:	b500      	push	{lr}
 80019ba:	b083      	sub	sp, #12
  char acc_orientation[3];

  MotionCP_Initialize();
 80019bc:	f00e f838 	bl	800fa30 <MotionCP_Initialize>

#ifdef USE_IKS01A3
  acc_orientation[0] = 's';
 80019c0:	f246 5273 	movw	r2, #25971	; 0x6573
  acc_orientation[1] = 'e';
 80019c4:	2375      	movs	r3, #117	; 0x75
  acc_orientation[2] = 'u';
#endif

  MotionCP_SetOrientation_Acc(acc_orientation);
 80019c6:	a801      	add	r0, sp, #4
  acc_orientation[0] = 's';
 80019c8:	f8ad 2004 	strh.w	r2, [sp, #4]
  acc_orientation[1] = 'e';
 80019cc:	f88d 3006 	strb.w	r3, [sp, #6]
  MotionCP_SetOrientation_Acc(acc_orientation);
 80019d0:	f00e f852 	bl	800fa78 <MotionCP_SetOrientation_Acc>
}
 80019d4:	b003      	add	sp, #12
 80019d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80019da:	bf00      	nop

080019dc <MotionCP_manager_run>:
 * @param  data_out Structure containing ouput data
 * @retval None
 */
void MotionCP_manager_run(MCP_input_t *data_in, MCP_output_t *data_out)
{
  MotionCP_Update(data_in, data_out);
 80019dc:	f00e b8d8 	b.w	800fb90 <MotionCP_Update>

080019e0 <MotionFX_manager_init>:
 * @brief  Initialises MotionFX algorithm
 * @param  None
 * @retval None
 */
void MotionFX_manager_init(void)
{
 80019e0:	b530      	push	{r4, r5, lr}
  mag_orientation[1] = 'e';
  mag_orientation[2] = 'u';

  MotionFX_initialize();

  MotionFX_getKnobs(ipKnobs);
 80019e2:	4c21      	ldr	r4, [pc, #132]	; (8001a68 <MotionFX_manager_init+0x88>)

  (void)strcpy(ipKnobs->acc_orientation, acc_orientation);
  (void)strcpy(ipKnobs->gyro_orientation, gyro_orientation);
  (void)strcpy(ipKnobs->mag_orientation, mag_orientation);

  ipKnobs->gbias_acc_th_sc_6X = GBIAS_ACC_TH_SC_6X;
 80019e4:	4d21      	ldr	r5, [pc, #132]	; (8001a6c <MotionFX_manager_init+0x8c>)
{
 80019e6:	b085      	sub	sp, #20
  acc_orientation[1] = 'e';
 80019e8:	2375      	movs	r3, #117	; 0x75
  acc_orientation[0] = 's';
 80019ea:	f246 5273 	movw	r2, #25971	; 0x6573
  mag_orientation[0] = 'n';
 80019ee:	f246 516e 	movw	r1, #25966	; 0x656e
  acc_orientation[0] = 's';
 80019f2:	f8ad 2004 	strh.w	r2, [sp, #4]
  gyro_orientation[0] = 's';
 80019f6:	f8ad 2008 	strh.w	r2, [sp, #8]
  acc_orientation[1] = 'e';
 80019fa:	f88d 3006 	strb.w	r3, [sp, #6]
  gyro_orientation[1] = 'e';
 80019fe:	f88d 300a 	strb.w	r3, [sp, #10]
  mag_orientation[1] = 'e';
 8001a02:	f88d 300e 	strb.w	r3, [sp, #14]
  mag_orientation[0] = 'n';
 8001a06:	f8ad 100c 	strh.w	r1, [sp, #12]
  MotionFX_initialize();
 8001a0a:	f018 fe09 	bl	801a620 <MotionFX_initialize>
  MotionFX_getKnobs(ipKnobs);
 8001a0e:	4620      	mov	r0, r4
 8001a10:	f019 f88c 	bl	801ab2c <MotionFX_getKnobs>
  (void)strcpy(ipKnobs->acc_orientation, acc_orientation);
 8001a14:	a901      	add	r1, sp, #4
 8001a16:	f104 0029 	add.w	r0, r4, #41	; 0x29
 8001a1a:	f020 ff45 	bl	80228a8 <strcpy>
  (void)strcpy(ipKnobs->gyro_orientation, gyro_orientation);
 8001a1e:	a902      	add	r1, sp, #8
 8001a20:	f104 002d 	add.w	r0, r4, #45	; 0x2d
 8001a24:	f020 ff40 	bl	80228a8 <strcpy>
  (void)strcpy(ipKnobs->mag_orientation, mag_orientation);
 8001a28:	a903      	add	r1, sp, #12
 8001a2a:	f104 0031 	add.w	r0, r4, #49	; 0x31
 8001a2e:	f020 ff3b 	bl	80228a8 <strcpy>

  ipKnobs->gbias_acc_th_sc_9X = GBIAS_ACC_TH_SC_9X;
  ipKnobs->gbias_gyro_th_sc_9X = GBIAS_GYRO_TH_SC_9X;
  ipKnobs->gbias_mag_th_sc_9X = GBIAS_MAG_TH_SC_9X;

  ipKnobs->output_type = MFX_ENGINE_OUTPUT_ENU;
 8001a32:	2301      	movs	r3, #1
  ipKnobs->gbias_gyro_th_sc_6X = GBIAS_GYRO_TH_SC_6X;
 8001a34:	490e      	ldr	r1, [pc, #56]	; (8001a70 <MotionFX_manager_init+0x90>)
  ipKnobs->gbias_mag_th_sc_6X = GBIAS_MAG_TH_SC_6X;
 8001a36:	4a0f      	ldr	r2, [pc, #60]	; (8001a74 <MotionFX_manager_init+0x94>)
  ipKnobs->gbias_gyro_th_sc_6X = GBIAS_GYRO_TH_SC_6X;
 8001a38:	61a1      	str	r1, [r4, #24]
  ipKnobs->LMode = 1;
  ipKnobs->modx = DECIMATION;

  MotionFX_setKnobs(ipKnobs);
 8001a3a:	4620      	mov	r0, r4
  ipKnobs->gbias_gyro_th_sc_9X = GBIAS_GYRO_TH_SC_9X;
 8001a3c:	6261      	str	r1, [r4, #36]	; 0x24
  ipKnobs->gbias_mag_th_sc_6X = GBIAS_MAG_TH_SC_6X;
 8001a3e:	6122      	str	r2, [r4, #16]
  ipKnobs->gbias_mag_th_sc_9X = GBIAS_MAG_TH_SC_9X;
 8001a40:	61e2      	str	r2, [r4, #28]
  ipKnobs->output_type = MFX_ENGINE_OUTPUT_ENU;
 8001a42:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  ipKnobs->LMode = 1;
 8001a46:	7323      	strb	r3, [r4, #12]
  ipKnobs->modx = DECIMATION;
 8001a48:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  ipKnobs->gbias_acc_th_sc_6X = GBIAS_ACC_TH_SC_6X;
 8001a4c:	6165      	str	r5, [r4, #20]
  ipKnobs->gbias_acc_th_sc_9X = GBIAS_ACC_TH_SC_9X;
 8001a4e:	6225      	str	r5, [r4, #32]
  MotionFX_setKnobs(ipKnobs);
 8001a50:	f019 f808 	bl	801aa64 <MotionFX_setKnobs>

  MotionFX_enable_6X(MFX_ENGINE_DISABLE);
 8001a54:	2000      	movs	r0, #0
 8001a56:	f019 f8bf 	bl	801abd8 <MotionFX_enable_6X>
  MotionFX_enable_9X(MFX_ENGINE_DISABLE);
 8001a5a:	2000      	movs	r0, #0
}
 8001a5c:	b005      	add	sp, #20
 8001a5e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  MotionFX_enable_9X(MFX_ENGINE_DISABLE);
 8001a62:	f019 b8d9 	b.w	801ac18 <MotionFX_enable_9X>
 8001a66:	bf00      	nop
 8001a68:	20001884 	.word	0x20001884
 8001a6c:	3ac88a48 	.word	0x3ac88a48
 8001a70:	3b83126f 	.word	0x3b83126f
 8001a74:	3b449ba6 	.word	0x3b449ba6

08001a78 <MotionFX_manager_run>:
 * @brief  Run sensor fusion algorithm
 * @param  None
 * @retval None
 */
void MotionFX_manager_run(MFX_input_t *data_in, MFX_output_t *data_out, float delta_time)
{
 8001a78:	b530      	push	{r4, r5, lr}
  if (discardedCount == sampleToDiscard)
 8001a7a:	4c0d      	ldr	r4, [pc, #52]	; (8001ab0 <MotionFX_manager_run+0x38>)
 8001a7c:	4d0d      	ldr	r5, [pc, #52]	; (8001ab4 <MotionFX_manager_run+0x3c>)
 8001a7e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001a80:	682d      	ldr	r5, [r5, #0]
{
 8001a82:	b083      	sub	sp, #12
  if (discardedCount == sampleToDiscard)
 8001a84:	42ab      	cmp	r3, r5
{
 8001a86:	9201      	str	r2, [sp, #4]
  if (discardedCount == sampleToDiscard)
 8001a88:	d003      	beq.n	8001a92 <MotionFX_manager_run+0x1a>
    MotionFX_propagate(data_out, data_in, &delta_time);
    MotionFX_update(data_out, data_in, &delta_time, NULL);
  }
  else
  {
    discardedCount++;
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	63e3      	str	r3, [r4, #60]	; 0x3c
  }
}
 8001a8e:	b003      	add	sp, #12
 8001a90:	bd30      	pop	{r4, r5, pc}
 8001a92:	460c      	mov	r4, r1
 8001a94:	4605      	mov	r5, r0
    MotionFX_propagate(data_out, data_in, &delta_time);
 8001a96:	aa01      	add	r2, sp, #4
 8001a98:	4601      	mov	r1, r0
 8001a9a:	4620      	mov	r0, r4
 8001a9c:	f019 faa0 	bl	801afe0 <MotionFX_propagate>
    MotionFX_update(data_out, data_in, &delta_time, NULL);
 8001aa0:	aa01      	add	r2, sp, #4
 8001aa2:	4629      	mov	r1, r5
 8001aa4:	4620      	mov	r0, r4
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	f019 f8d8 	bl	801ac5c <MotionFX_update>
}
 8001aac:	b003      	add	sp, #12
 8001aae:	bd30      	pop	{r4, r5, pc}
 8001ab0:	20001884 	.word	0x20001884
 8001ab4:	20000008 	.word	0x20000008

08001ab8 <MotionFX_manager_start_9X>:
 * @param  None
 * @retval None
 */
void MotionFX_manager_start_9X(void)
{
  MotionFX_enable_9X(MFX_ENGINE_ENABLE);
 8001ab8:	2001      	movs	r0, #1
 8001aba:	f019 b8ad 	b.w	801ac18 <MotionFX_enable_9X>
 8001abe:	bf00      	nop

08001ac0 <MotionFX_manager_MagCal_run>:
 * @brief  Run magnetometer calibration algorithm
 * @param  None
 * @retval None
 */
void MotionFX_manager_MagCal_run(MFX_MagCal_input_t *data_in, MFX_MagCal_output_t *data_out)
{
 8001ac0:	b510      	push	{r4, lr}
 8001ac2:	460c      	mov	r4, r1
  MotionFX_MagCal_run(data_in);
 8001ac4:	f01a f8b2 	bl	801bc2c <MotionFX_MagCal_run>
  MotionFX_MagCal_getParams(data_out);
 8001ac8:	4620      	mov	r0, r4
}
 8001aca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  MotionFX_MagCal_getParams(data_out);
 8001ace:	f01a b953 	b.w	801bd78 <MotionFX_MagCal_getParams>
 8001ad2:	bf00      	nop

08001ad4 <MotionFX_manager_MagCal_start>:
 * @param  None
 * @retval None
 */
void MotionFX_manager_MagCal_start(int sampletime)
{
  MotionFX_MagCal_init(sampletime, 1);
 8001ad4:	2101      	movs	r1, #1
 8001ad6:	f019 bff9 	b.w	801bacc <MotionFX_MagCal_init>
 8001ada:	bf00      	nop

08001adc <MotionFX_manager_MagCal_stop>:
 * @param  None
 * @retval None
 */
void MotionFX_manager_MagCal_stop(int sampletime)
{
  MotionFX_MagCal_init(sampletime, 0);
 8001adc:	2100      	movs	r1, #0
 8001ade:	f019 bff5 	b.w	801bacc <MotionFX_MagCal_init>
 8001ae2:	bf00      	nop

08001ae4 <MotionFX_LoadMagCalFromNVM>:
  RecallCalibrationFromMemory(dataSize / 4, (uint32_t *) data);
  return (char)0;
#else
  return (char)1;
#endif
}
 8001ae4:	2001      	movs	r0, #1
 8001ae6:	4770      	bx	lr

08001ae8 <MotionFX_SaveMagCalInNVM>:
 8001ae8:	2001      	movs	r0, #1
 8001aea:	4770      	bx	lr

08001aec <MotionGR_manager_init>:
 * @brief  Initialize the MotionGR engine
 * @param  None
 * @retval None
 */
void MotionGR_manager_init(void)
{
 8001aec:	b500      	push	{lr}
 8001aee:	b083      	sub	sp, #12
  char acc_orientation[3];

  MotionGR_Initialize();
 8001af0:	f01a f972 	bl	801bdd8 <MotionGR_Initialize>

#if (defined (USE_IKS01A3))
  /* LSM6DSL */
  acc_orientation[0] = 's';
 8001af4:	f246 5273 	movw	r2, #25971	; 0x6573
  acc_orientation[1] = 'e';
 8001af8:	2375      	movs	r3, #117	; 0x75

#else
#error Not supported platform
#endif

  MotionGR_SetOrientation_Acc(acc_orientation);
 8001afa:	a801      	add	r0, sp, #4
  acc_orientation[0] = 's';
 8001afc:	f8ad 2004 	strh.w	r2, [sp, #4]
  acc_orientation[1] = 'e';
 8001b00:	f88d 3006 	strb.w	r3, [sp, #6]
  MotionGR_SetOrientation_Acc(acc_orientation);
 8001b04:	f01a f98c 	bl	801be20 <MotionGR_SetOrientation_Acc>
}
 8001b08:	b003      	add	sp, #12
 8001b0a:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b0e:	bf00      	nop

08001b10 <MotionGR_manager_run>:
 * @param  data_out Structure containing output data
 * @retval None
 */
void MotionGR_manager_run(MGR_input_t *data_in, MGR_output_t *data_out)
{
  MotionGR_Update(data_in, data_out);
 8001b10:	f01a ba12 	b.w	801bf38 <MotionGR_Update>

08001b14 <MotionID_manager_init>:
 * @param  None
 * @retval None
 */
void MotionID_manager_init(void)
{
  MotionID_Initialize();
 8001b14:	f01c bc3c 	b.w	801e390 <MotionID_Initialize>

08001b18 <MotionID_manager_run>:
 * @param  data_out Structure containing output data
 * @retval None
 */
void MotionID_manager_run(MID_input_t *data_in, MID_output_t *data_out)
{
  MotionID_Update(data_in, data_out);
 8001b18:	f01c bc6e 	b.w	801e3f8 <MotionID_Update>

08001b1c <MotionPM_manager_init>:
 * @param  None
 * @retval None
 */
void MotionPM_manager_init(void)
{
  MotionPM_Initialize();
 8001b1c:	f01e bc66 	b.w	80203ec <MotionPM_Initialize>

08001b20 <MotionPM_manager_run>:
 * @param  data_out Structure containing output data
 * @retval None
 */
void MotionPM_manager_run(MPM_input_t *data_in, MPM_output_t *data_out)
{
  MotionPM_Update(data_in, data_out);
 8001b20:	f01e be42 	b.w	80207a8 <MotionPM_Update>

08001b24 <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO(){
/* USER CODE BEGIN Switch_OFF_GPIO */

/* USER CODE END Switch_OFF_GPIO */
}
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop

08001b28 <Adv_Cancel_Req>:
  UTIL_SEQ_SetTask(1 << CFG_TASK_ADV_CANCEL_ID, CFG_SCH_PRIO_0);
 8001b28:	2100      	movs	r1, #0
 8001b2a:	2001      	movs	r0, #1
 8001b2c:	f00b bfae 	b.w	800da8c <UTIL_SEQ_SetTask>

08001b30 <Adv_Cancel>:
{
 8001b30:	b510      	push	{r4, lr}
  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8001b32:	4c05      	ldr	r4, [pc, #20]	; (8001b48 <Adv_Cancel+0x18>)
 8001b34:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
 8001b38:	2b05      	cmp	r3, #5
 8001b3a:	d004      	beq.n	8001b46 <Adv_Cancel+0x16>
    result = aci_gap_set_non_discoverable();
 8001b3c:	f00a fc2c 	bl	800c398 <aci_gap_set_non_discoverable>
    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8001b40:	2300      	movs	r3, #0
 8001b42:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
}
 8001b46:	bd10      	pop	{r4, pc}
 8001b48:	2000167c 	.word	0x2000167c

08001b4c <BLE_UserEvtRx>:
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
  return;
}

static void BLE_UserEvtRx( void * pPayload )
{
 8001b4c:	b510      	push	{r4, lr}
 8001b4e:	4604      	mov	r4, r0
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload; 

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 8001b50:	6840      	ldr	r0, [r0, #4]
 8001b52:	3008      	adds	r0, #8
 8001b54:	f00b fe20 	bl	800d798 <SVCCTL_UserEvtRx>
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8001b58:	3000      	adds	r0, #0
 8001b5a:	bf18      	it	ne
 8001b5c:	2001      	movne	r0, #1
 8001b5e:	7020      	strb	r0, [r4, #0]
  }
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }
}
 8001b60:	bd10      	pop	{r4, pc}
 8001b62:	bf00      	nop

08001b64 <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
  uint32_t task_id_list;
  switch (status)
 8001b64:	b130      	cbz	r0, 8001b74 <BLE_StatusNot+0x10>
 8001b66:	2801      	cmp	r0, #1
 8001b68:	d103      	bne.n	8001b72 <BLE_StatusNot+0xe>
      /**
       * All tasks that may send an aci/hci commands shall be listed here
       * This is to prevent a new command is sent while one is already pending
       */
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
      UTIL_SEQ_ResumeTask(task_id_list);
 8001b6a:	f643 70ff 	movw	r0, #16383	; 0x3fff
 8001b6e:	f00b bfaf 	b.w	800dad0 <UTIL_SEQ_ResumeTask>
 8001b72:	4770      	bx	lr
      UTIL_SEQ_PauseTask(task_id_list);
 8001b74:	f643 70ff 	movw	r0, #16383	; 0x3fff
 8001b78:	f00b bf9c 	b.w	800dab4 <UTIL_SEQ_PauseTask>

08001b7c <APP_BLE_Init>:
{
 8001b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8001b7e:	4c83      	ldr	r4, [pc, #524]	; (8001d8c <APP_BLE_Init+0x210>)
  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8001b80:	4b83      	ldr	r3, [pc, #524]	; (8001d90 <APP_BLE_Init+0x214>)
{
 8001b82:	b099      	sub	sp, #100	; 0x64
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8001b84:	ad0c      	add	r5, sp, #48	; 0x30
  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8001b86:	930a      	str	r3, [sp, #40]	; 0x28
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8001b88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b90:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001b94:	c507      	stmia	r5!, {r0, r1, r2}
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8001b96:	4a7f      	ldr	r2, [pc, #508]	; (8001d94 <APP_BLE_Init+0x218>)
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8001b98:	487f      	ldr	r0, [pc, #508]	; (8001d98 <APP_BLE_Init+0x21c>)
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8001b9a:	702b      	strb	r3, [r5, #0]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8001b9c:	a90a      	add	r1, sp, #40	; 0x28
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8001b9e:	920b      	str	r2, [sp, #44]	; 0x2c
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8001ba0:	f00a ff7c 	bl	800ca9c <hci_init>
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8001ba4:	2101      	movs	r1, #1
 8001ba6:	2002      	movs	r0, #2
 8001ba8:	f00b ff48 	bl	800da3c <UTIL_LPM_SetOffMode>
  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8001bac:	4a7b      	ldr	r2, [pc, #492]	; (8001d9c <APP_BLE_Init+0x220>)
 8001bae:	2100      	movs	r1, #0
 8001bb0:	2004      	movs	r0, #4
 8001bb2:	f00b ff5b 	bl	800da6c <UTIL_SEQ_RegTask>
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE }; 
 8001bb6:	2500      	movs	r5, #0
  SHCI_C2_BLE_Init( &ble_init_cmd_packet );
 8001bb8:	a80c      	add	r0, sp, #48	; 0x30
 8001bba:	f00b fca9 	bl	800d510 <SHCI_C2_BLE_Init>
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE }; 
 8001bbe:	f8ad 5020 	strh.w	r5, [sp, #32]
  hci_reset();
 8001bc2:	f00a ff09 	bl	800c9d8 <hci_reset>
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8001bc6:	4b76      	ldr	r3, [pc, #472]	; (8001da0 <APP_BLE_Init+0x224>)
 8001bc8:	681a      	ldr	r2, [r3, #0]
  if(udn != 0xFFFFFFFF)
 8001bca:	1c51      	adds	r1, r2, #1
 8001bcc:	f000 80d6 	beq.w	8001d7c <APP_BLE_Init+0x200>
  *         For STM32WBxxxx devices, the ST Compagny ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Compagny ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 8001bd0:	3304      	adds	r3, #4
    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 8001bd2:	4c74      	ldr	r4, [pc, #464]	; (8001da4 <APP_BLE_Init+0x228>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
    bd_addr_udn[3] = (uint8_t)device_id;
 8001bd6:	70e3      	strb	r3, [r4, #3]
 8001bd8:	0a19      	lsrs	r1, r3, #8
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 8001bda:	0a10      	lsrs	r0, r2, #8
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 8001bdc:	0c1b      	lsrs	r3, r3, #16
    bd_addr_udn[4] = (uint8_t)(company_id & 0x000000FF);;
 8001bde:	7121      	strb	r1, [r4, #4]
    bd_addr_udn[2] = (uint8_t)( (udn & 0x00FF0000) >> 16 );
 8001be0:	0c11      	lsrs	r1, r2, #16
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 8001be2:	7163      	strb	r3, [r4, #5]
    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 8001be4:	7022      	strb	r2, [r4, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 8001be6:	7060      	strb	r0, [r4, #1]
    bd_addr_udn[2] = (uint8_t)( (udn & 0x00FF0000) >> 16 );
 8001be8:	70a1      	strb	r1, [r4, #2]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 8001bea:	4622      	mov	r2, r4
 8001bec:	2106      	movs	r1, #6
 8001bee:	2000      	movs	r0, #0
 8001bf0:	f00a fe7c 	bl	800c8ec <aci_hal_write_config_data>
  manuf_data[ sizeof(manuf_data)-6] = bd_addr[5];
 8001bf4:	4b6c      	ldr	r3, [pc, #432]	; (8001da8 <APP_BLE_Init+0x22c>)
 8001bf6:	7962      	ldrb	r2, [r4, #5]
 8001bf8:	721a      	strb	r2, [r3, #8]
  manuf_data[ sizeof(manuf_data)-5] = bd_addr[4];
 8001bfa:	7922      	ldrb	r2, [r4, #4]
 8001bfc:	725a      	strb	r2, [r3, #9]
  manuf_data[ sizeof(manuf_data)-4] = bd_addr[3];
 8001bfe:	78e2      	ldrb	r2, [r4, #3]
 8001c00:	729a      	strb	r2, [r3, #10]
  manuf_data[ sizeof(manuf_data)-3] = bd_addr[2];
 8001c02:	78a2      	ldrb	r2, [r4, #2]
 8001c04:	72da      	strb	r2, [r3, #11]
  manuf_data[ sizeof(manuf_data)-2] = bd_addr[1];
 8001c06:	7862      	ldrb	r2, [r4, #1]
 8001c08:	731a      	strb	r2, [r3, #12]
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8001c0a:	4865      	ldr	r0, [pc, #404]	; (8001da0 <APP_BLE_Init+0x224>)
  manuf_data[ sizeof(manuf_data)-1] = bd_addr[0];
 8001c0c:	7821      	ldrb	r1, [r4, #0]
  srd_bd_addr[1] =  0x0000ED6E;
 8001c0e:	f64e 526e 	movw	r2, #60782	; 0xed6e
 8001c12:	920b      	str	r2, [sp, #44]	; 0x2c
 8001c14:	6804      	ldr	r4, [r0, #0]
  manuf_data[ sizeof(manuf_data)-1] = bd_addr[0];
 8001c16:	7359      	strb	r1, [r3, #13]
  aci_hal_write_config_data( CONFIG_DATA_RANDOM_ADDRESS_OFFSET, CONFIG_DATA_RANDOM_ADDRESS_LEN, (uint8_t*)srd_bd_addr );
 8001c18:	aa0a      	add	r2, sp, #40	; 0x28
 8001c1a:	2106      	movs	r1, #6
 8001c1c:	202e      	movs	r0, #46	; 0x2e
  srd_bd_addr[0] =  LL_FLASH_GetUDN( );
 8001c1e:	940a      	str	r4, [sp, #40]	; 0x28
  aci_hal_write_config_data( CONFIG_DATA_RANDOM_ADDRESS_OFFSET, CONFIG_DATA_RANDOM_ADDRESS_LEN, (uint8_t*)srd_bd_addr );
 8001c20:	f00a fe64 	bl	800c8ec <aci_hal_write_config_data>
    aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 8001c24:	4a61      	ldr	r2, [pc, #388]	; (8001dac <APP_BLE_Init+0x230>)
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8001c26:	4c62      	ldr	r4, [pc, #392]	; (8001db0 <APP_BLE_Init+0x234>)
    aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 8001c28:	2110      	movs	r1, #16
 8001c2a:	2018      	movs	r0, #24
 8001c2c:	f00a fe5e 	bl	800c8ec <aci_hal_write_config_data>
    aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 8001c30:	4a60      	ldr	r2, [pc, #384]	; (8001db4 <APP_BLE_Init+0x238>)
 8001c32:	2110      	movs	r1, #16
 8001c34:	2008      	movs	r0, #8
 8001c36:	f00a fe59 	bl	800c8ec <aci_hal_write_config_data>
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8001c3a:	2118      	movs	r1, #24
 8001c3c:	2001      	movs	r0, #1
 8001c3e:	f00a fe81 	bl	800c944 <aci_hal_set_tx_power_level>
  aci_gatt_init();
 8001c42:	f00a fd0b 	bl	800c65c <aci_gatt_init>
    aci_gap_init(role, 0,
 8001c46:	f10d 0226 	add.w	r2, sp, #38	; 0x26
 8001c4a:	ab09      	add	r3, sp, #36	; 0x24
 8001c4c:	e9cd 3200 	strd	r3, r2, [sp]
 8001c50:	2100      	movs	r1, #0
 8001c52:	f10d 0322 	add.w	r3, sp, #34	; 0x22
 8001c56:	2207      	movs	r2, #7
 8001c58:	2001      	movs	r0, #1
 8001c5a:	f00a fc75 	bl	800c548 <aci_gap_init>
    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 8001c5e:	4b56      	ldr	r3, [pc, #344]	; (8001db8 <APP_BLE_Init+0x23c>)
 8001c60:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8001c64:	9300      	str	r3, [sp, #0]
 8001c66:	2200      	movs	r2, #0
 8001c68:	2307      	movs	r3, #7
 8001c6a:	f8bd 0022 	ldrh.w	r0, [sp, #34]	; 0x22
 8001c6e:	f00a fde9 	bl	800c844 <aci_gatt_update_char_value>
  if(aci_gatt_update_char_value(gap_service_handle,
 8001c72:	ab08      	add	r3, sp, #32
 8001c74:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 8001c78:	9300      	str	r3, [sp, #0]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	f8bd 0022 	ldrh.w	r0, [sp, #34]	; 0x22
 8001c82:	f00a fddf 	bl	800c844 <aci_gatt_update_char_value>
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED); 
 8001c86:	2202      	movs	r2, #2
 8001c88:	2000      	movs	r0, #0
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8001c8a:	4605      	mov	r5, r0
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED); 
 8001c8c:	4611      	mov	r1, r2
 8001c8e:	f00a fec1 	bl	800ca14 <hci_le_set_default_phy>
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8001c92:	4628      	mov	r0, r5
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8001c94:	7025      	strb	r5, [r4, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8001c96:	f00a fbf7 	bl	800c488 <aci_gap_set_io_capability>
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data[index] = (uint8_t) index;
 8001c9a:	4b48      	ldr	r3, [pc, #288]	; (8001dbc <APP_BLE_Init+0x240>)
  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8001c9c:	9504      	str	r5, [sp, #16]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = 8;
 8001c9e:	2708      	movs	r7, #8
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = 16;
 8001ca0:	2610      	movs	r6, #16
  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8001ca2:	9502      	str	r5, [sp, #8]
 8001ca4:	e9cd 7600 	strd	r7, r6, [sp]
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data[index] = (uint8_t) index;
 8001ca8:	4a45      	ldr	r2, [pc, #276]	; (8001dc0 <APP_BLE_Init+0x244>)
 8001caa:	6063      	str	r3, [r4, #4]
 8001cac:	f103 3308 	add.w	r3, r3, #134744072	; 0x8080808
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8001cb0:	2101      	movs	r1, #1
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data_Present = 0;
 8001cb2:	70e5      	strb	r5, [r4, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = 0;
 8001cb4:	7525      	strb	r5, [r4, #20]
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data[index] = (uint8_t) index;
 8001cb6:	60a2      	str	r2, [r4, #8]
 8001cb8:	60e3      	str	r3, [r4, #12]
 8001cba:	4842      	ldr	r0, [pc, #264]	; (8001dc4 <APP_BLE_Init+0x248>)
 8001cbc:	6120      	str	r0, [r4, #16]
  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8001cbe:	462b      	mov	r3, r5
 8001cc0:	462a      	mov	r2, r5
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = 111111;
 8001cc2:	4d41      	ldr	r5, [pc, #260]	; (8001dc8 <APP_BLE_Init+0x24c>)
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8001cc4:	7061      	strb	r1, [r4, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = 1;
 8001cc6:	70a1      	strb	r1, [r4, #2]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = 8;
 8001cc8:	7567      	strb	r7, [r4, #21]
  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8001cca:	4608      	mov	r0, r1
 8001ccc:	9503      	str	r5, [sp, #12]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = 16;
 8001cce:	75a6      	strb	r6, [r4, #22]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = 111111;
 8001cd0:	61a5      	str	r5, [r4, #24]
  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8001cd2:	f00a fbfb 	bl	800c4cc <aci_gap_set_authentication_requirement>
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8001cd6:	78a3      	ldrb	r3, [r4, #2]
 8001cd8:	b10b      	cbz	r3, 8001cde <APP_BLE_Init+0x162>
     aci_gap_configure_whitelist();
 8001cda:	f00a fca1 	bl	800c620 <aci_gap_configure_whitelist>
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8001cde:	2500      	movs	r5, #0
  SVCCTL_Init();
 8001ce0:	f00b fd28 	bl	800d734 <SVCCTL_Init>
  UTIL_SEQ_RegTask( 1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8001ce4:	4629      	mov	r1, r5
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;  
 8001ce6:	f64f 73ff 	movw	r3, #65535	; 0xffff
  UTIL_SEQ_RegTask( 1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8001cea:	4a38      	ldr	r2, [pc, #224]	; (8001dcc <APP_BLE_Init+0x250>)
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;  
 8001cec:	84e3      	strh	r3, [r4, #38]	; 0x26
  UTIL_SEQ_RegTask( 1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8001cee:	2001      	movs	r0, #1
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8001cf0:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
  UTIL_SEQ_RegTask( 1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8001cf4:	f00b feba 	bl	800da6c <UTIL_SEQ_RegTask>
  aci_hal_set_radio_activity_mask(0x0006);
 8001cf8:	2006      	movs	r0, #6
 8001cfa:	f00a fe49 	bl	800c990 <aci_hal_set_radio_activity_mask>
  P2PS_APP_Init();
 8001cfe:	f002 fd53 	bl	80047a8 <P2PS_APP_Init>
  MOTENV_APP_Init();
 8001d02:	f000 fee9 	bl	8002ad8 <MOTENV_APP_Init>
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Cancel_Req);
 8001d06:	462a      	mov	r2, r5
 8001d08:	4628      	mov	r0, r5
 8001d0a:	4b31      	ldr	r3, [pc, #196]	; (8001dd0 <APP_BLE_Init+0x254>)
 8001d0c:	4931      	ldr	r1, [pc, #196]	; (8001dd4 <APP_BLE_Init+0x258>)
 8001d0e:	f7ff f957 	bl	8000fc0 <HW_TS_Create>
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 8001d12:	462a      	mov	r2, r5
 8001d14:	4b30      	ldr	r3, [pc, #192]	; (8001dd8 <APP_BLE_Init+0x25c>)
 8001d16:	4931      	ldr	r1, [pc, #196]	; (8001ddc <APP_BLE_Init+0x260>)
 8001d18:	4628      	mov	r0, r5
 8001d1a:	f7ff f951 	bl	8000fc0 <HW_TS_Create>
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 8001d1e:	2680      	movs	r6, #128	; 0x80
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 8001d20:	27a0      	movs	r7, #160	; 0xa0
    HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 8001d22:	f894 0091 	ldrb.w	r0, [r4, #145]	; 0x91
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8001d26:	8525      	strh	r5, [r4, #40]	; 0x28
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 8001d28:	f8a4 6094 	strh.w	r6, [r4, #148]	; 0x94
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 8001d2c:	f8a4 7096 	strh.w	r7, [r4, #150]	; 0x96
    HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 8001d30:	f7ff f99e 	bl	8001070 <HW_TS_Stop>
    ret = aci_gap_set_discoverable(
 8001d34:	4631      	mov	r1, r6
 8001d36:	4e2a      	ldr	r6, [pc, #168]	; (8001de0 <APP_BLE_Init+0x264>)
 8001d38:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
 8001d3c:	9500      	str	r5, [sp, #0]
 8001d3e:	e9cd 5505 	strd	r5, r5, [sp, #20]
 8001d42:	462b      	mov	r3, r5
 8001d44:	4628      	mov	r0, r5
 8001d46:	2507      	movs	r5, #7
 8001d48:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8001d4c:	f8df e098 	ldr.w	lr, [pc, #152]	; 8001de8 <APP_BLE_Init+0x26c>
 8001d50:	f8cd e010 	str.w	lr, [sp, #16]
    BleApplicationContext.Device_Connection_Status = New_Status;
 8001d54:	2501      	movs	r5, #1
    ret = aci_gap_set_discoverable(
 8001d56:	f8cd c00c 	str.w	ip, [sp, #12]
 8001d5a:	463a      	mov	r2, r7
    BleApplicationContext.Device_Connection_Status = New_Status;
 8001d5c:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
    ret = aci_gap_set_discoverable(
 8001d60:	f00a fb38 	bl	800c3d4 <aci_gap_set_discoverable>
    ret = aci_gap_update_adv_data(sizeof(manuf_data), (uint8_t*) manuf_data);
 8001d64:	4910      	ldr	r1, [pc, #64]	; (8001da8 <APP_BLE_Init+0x22c>)
 8001d66:	200e      	movs	r0, #14
 8001d68:	f00a fc30 	bl	800c5cc <aci_gap_update_adv_data>
     if (ret == BLE_STATUS_SUCCESS)
 8001d6c:	b920      	cbnz	r0, 8001d78 <APP_BLE_Init+0x1fc>
        HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 8001d6e:	f894 0091 	ldrb.w	r0, [r4, #145]	; 0x91
 8001d72:	491c      	ldr	r1, [pc, #112]	; (8001de4 <APP_BLE_Init+0x268>)
 8001d74:	f7ff fa02 	bl	800117c <HW_TS_Start>
}
 8001d78:	b019      	add	sp, #100	; 0x64
 8001d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    otp_addr = OTP_Read(0);
 8001d7c:	4628      	mov	r0, r5
 8001d7e:	f00b fafd 	bl	800d37c <OTP_Read>
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 8001d82:	3c28      	subs	r4, #40	; 0x28
 8001d84:	2800      	cmp	r0, #0
 8001d86:	bf18      	it	ne
 8001d88:	4604      	movne	r4, r0
 8001d8a:	e72e      	b.n	8001bea <APP_BLE_Init+0x6e>
 8001d8c:	080228d8 	.word	0x080228d8
 8001d90:	20030020 	.word	0x20030020
 8001d94:	08001b65 	.word	0x08001b65
 8001d98:	08001b4d 	.word	0x08001b4d
 8001d9c:	0800cae9 	.word	0x0800cae9
 8001da0:	1fff7580 	.word	0x1fff7580
 8001da4:	200018c4 	.word	0x200018c4
 8001da8:	2000000c 	.word	0x2000000c
 8001dac:	08022908 	.word	0x08022908
 8001db0:	2000167c 	.word	0x2000167c
 8001db4:	08022918 	.word	0x08022918
 8001db8:	08022f28 	.word	0x08022f28
 8001dbc:	03020100 	.word	0x03020100
 8001dc0:	07060504 	.word	0x07060504
 8001dc4:	0f0e0d0c 	.word	0x0f0e0d0c
 8001dc8:	0001b207 	.word	0x0001b207
 8001dcc:	08001b31 	.word	0x08001b31
 8001dd0:	08001b29 	.word	0x08001b29
 8001dd4:	2000170d 	.word	0x2000170d
 8001dd8:	08001b25 	.word	0x08001b25
 8001ddc:	2000170e 	.word	0x2000170e
 8001de0:	08022928 	.word	0x08022928
 8001de4:	0001e046 	.word	0x0001e046
 8001de8:	200016a5 	.word	0x200016a5

08001dec <SVCCTL_App_Notification>:
{
 8001dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  switch (event_pckt->evt)
 8001df0:	7843      	ldrb	r3, [r0, #1]
 8001df2:	2b3e      	cmp	r3, #62	; 0x3e
{
 8001df4:	b088      	sub	sp, #32
 8001df6:	4604      	mov	r4, r0
  switch (event_pckt->evt)
 8001df8:	d051      	beq.n	8001e9e <SVCCTL_App_Notification+0xb2>
 8001dfa:	2bff      	cmp	r3, #255	; 0xff
 8001dfc:	d03d      	beq.n	8001e7a <SVCCTL_App_Notification+0x8e>
 8001dfe:	2b05      	cmp	r3, #5
 8001e00:	d003      	beq.n	8001e0a <SVCCTL_App_Notification+0x1e>
}
 8001e02:	2001      	movs	r0, #1
 8001e04:	b008      	add	sp, #32
 8001e06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8001e0a:	4d35      	ldr	r5, [pc, #212]	; (8001ee0 <SVCCTL_App_Notification+0xf4>)
 8001e0c:	8882      	ldrh	r2, [r0, #4]
 8001e0e:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d05f      	beq.n	8001ed4 <SVCCTL_App_Notification+0xe8>
    HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 8001e14:	f895 0091 	ldrb.w	r0, [r5, #145]	; 0x91
    ret = aci_gap_set_discoverable(
 8001e18:	4e32      	ldr	r6, [pc, #200]	; (8001ee4 <SVCCTL_App_Notification+0xf8>)
    Min_Inter = AdvIntervalMin;
 8001e1a:	f8b5 7094 	ldrh.w	r7, [r5, #148]	; 0x94
    Max_Inter = AdvIntervalMax;
 8001e1e:	f8b5 8096 	ldrh.w	r8, [r5, #150]	; 0x96
    HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 8001e22:	f7ff f925 	bl	8001070 <HW_TS_Stop>
    ret = aci_gap_set_discoverable(
 8001e26:	f895 4028 	ldrb.w	r4, [r5, #40]	; 0x28
 8001e2a:	9604      	str	r6, [sp, #16]
 8001e2c:	4e2e      	ldr	r6, [pc, #184]	; (8001ee8 <SVCCTL_App_Notification+0xfc>)
 8001e2e:	9403      	str	r4, [sp, #12]
 8001e30:	2300      	movs	r3, #0
 8001e32:	2407      	movs	r4, #7
 8001e34:	4639      	mov	r1, r7
 8001e36:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8001e3a:	9306      	str	r3, [sp, #24]
 8001e3c:	4642      	mov	r2, r8
 8001e3e:	9305      	str	r3, [sp, #20]
 8001e40:	9300      	str	r3, [sp, #0]
 8001e42:	4618      	mov	r0, r3
    BleApplicationContext.Device_Connection_Status = New_Status;
 8001e44:	2401      	movs	r4, #1
 8001e46:	f885 4090 	strb.w	r4, [r5, #144]	; 0x90
    ret = aci_gap_set_discoverable(
 8001e4a:	f00a fac3 	bl	800c3d4 <aci_gap_set_discoverable>
    ret = aci_gap_update_adv_data(sizeof(manuf_data), (uint8_t*) manuf_data);
 8001e4e:	4927      	ldr	r1, [pc, #156]	; (8001eec <SVCCTL_App_Notification+0x100>)
 8001e50:	200e      	movs	r0, #14
 8001e52:	f00a fbbb 	bl	800c5cc <aci_gap_update_adv_data>
     if (ret == BLE_STATUS_SUCCESS)
 8001e56:	b920      	cbnz	r0, 8001e62 <SVCCTL_App_Notification+0x76>
        HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 8001e58:	4925      	ldr	r1, [pc, #148]	; (8001ef0 <SVCCTL_App_Notification+0x104>)
 8001e5a:	f895 0091 	ldrb.w	r0, [r5, #145]	; 0x91
 8001e5e:	f7ff f98d 	bl	800117c <HW_TS_Start>
        handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 8001e62:	4b24      	ldr	r3, [pc, #144]	; (8001ef4 <SVCCTL_App_Notification+0x108>)
        handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8001e64:	8cea      	ldrh	r2, [r5, #38]	; 0x26
 8001e66:	805a      	strh	r2, [r3, #2]
        P2PS_APP_Notification(&handleNotification);
 8001e68:	4618      	mov	r0, r3
        handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	701a      	strb	r2, [r3, #0]
        P2PS_APP_Notification(&handleNotification);
 8001e6e:	f002 fc95 	bl	800479c <P2PS_APP_Notification>
}
 8001e72:	2001      	movs	r0, #1
 8001e74:	b008      	add	sp, #32
 8001e76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      switch (blue_evt->ecode)
 8001e7a:	f8b0 3003 	ldrh.w	r3, [r0, #3]
 8001e7e:	2b04      	cmp	r3, #4
 8001e80:	d1bf      	bne.n	8001e02 <SVCCTL_App_Notification+0x16>
          HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8001e82:	2201      	movs	r2, #1
 8001e84:	4611      	mov	r1, r2
 8001e86:	481c      	ldr	r0, [pc, #112]	; (8001ef8 <SVCCTL_App_Notification+0x10c>)
 8001e88:	f008 fe0e 	bl	800aaa8 <HAL_GPIO_WritePin>
          HAL_Delay(5);
 8001e8c:	2005      	movs	r0, #5
 8001e8e:	f008 faeb 	bl	800a468 <HAL_Delay>
          HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8001e92:	2200      	movs	r2, #0
 8001e94:	2101      	movs	r1, #1
 8001e96:	4818      	ldr	r0, [pc, #96]	; (8001ef8 <SVCCTL_App_Notification+0x10c>)
 8001e98:	f008 fe06 	bl	800aaa8 <HAL_GPIO_WritePin>
        break; /* RADIO_ACTIVITY_EVENT */
 8001e9c:	e7b1      	b.n	8001e02 <SVCCTL_App_Notification+0x16>
      switch (meta_evt->subevent)
 8001e9e:	78c3      	ldrb	r3, [r0, #3]
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d1ae      	bne.n	8001e02 <SVCCTL_App_Notification+0x16>
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 8001ea4:	4d0e      	ldr	r5, [pc, #56]	; (8001ee0 <SVCCTL_App_Notification+0xf4>)
 8001ea6:	f895 0091 	ldrb.w	r0, [r5, #145]	; 0x91
 8001eaa:	f7ff f8e1 	bl	8001070 <HW_TS_Stop>
            if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8001eae:	f895 1090 	ldrb.w	r1, [r5, #144]	; 0x90
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 8001eb2:	4b10      	ldr	r3, [pc, #64]	; (8001ef4 <SVCCTL_App_Notification+0x108>)
                connection_complete_event->Connection_Handle;
 8001eb4:	f8b4 2005 	ldrh.w	r2, [r4, #5]
            BleApplicationContext.BleApplicationContext_legacy.connectionHandle =
 8001eb8:	84ea      	strh	r2, [r5, #38]	; 0x26
              BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8001eba:	2904      	cmp	r1, #4
 8001ebc:	bf0c      	ite	eq
 8001ebe:	2406      	moveq	r4, #6
 8001ec0:	2405      	movne	r4, #5
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 8001ec2:	2100      	movs	r1, #0
          P2PS_APP_Notification(&handleNotification);
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f885 4090 	strb.w	r4, [r5, #144]	; 0x90
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8001eca:	805a      	strh	r2, [r3, #2]
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 8001ecc:	7019      	strb	r1, [r3, #0]
          P2PS_APP_Notification(&handleNotification);
 8001ece:	f002 fc65 	bl	800479c <P2PS_APP_Notification>
        break; /* HCI_EVT_LE_CONN_COMPLETE */
 8001ed2:	e796      	b.n	8001e02 <SVCCTL_App_Notification+0x16>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	84eb      	strh	r3, [r5, #38]	; 0x26
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8001ed8:	f885 3090 	strb.w	r3, [r5, #144]	; 0x90
 8001edc:	e79a      	b.n	8001e14 <SVCCTL_App_Notification+0x28>
 8001ede:	bf00      	nop
 8001ee0:	2000167c 	.word	0x2000167c
 8001ee4:	200016a5 	.word	0x200016a5
 8001ee8:	08022928 	.word	0x08022928
 8001eec:	2000000c 	.word	0x2000000c
 8001ef0:	0001e046 	.word	0x0001e046
 8001ef4:	20007e30 	.word	0x20007e30
 8001ef8:	48000400 	.word	0x48000400

08001efc <hci_notify_asynch_evt>:
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8001efc:	2100      	movs	r1, #0
 8001efe:	2004      	movs	r0, #4
 8001f00:	f00b bdc4 	b.w	800da8c <UTIL_SEQ_SetTask>

08001f04 <hci_cmd_resp_release>:
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001f04:	2002      	movs	r0, #2
 8001f06:	f00b bdef 	b.w	800dae8 <UTIL_SEQ_SetEvt>
 8001f0a:	bf00      	nop

08001f0c <hci_cmd_resp_wait>:
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001f0c:	2002      	movs	r0, #2
 8001f0e:	f00b be61 	b.w	800dbd4 <UTIL_SEQ_WaitEvt>
 8001f12:	bf00      	nop

08001f14 <CONFIG_Context_Init>:
 * @param  status The new notification status
 * @retval None
 */
void CONFIG_Set_Notification_Status(uint8_t status)
{
  CONFIG_Server_App_Context.NotificationStatus = status;
 8001f14:	4b01      	ldr	r3, [pc, #4]	; (8001f1c <CONFIG_Context_Init+0x8>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	801a      	strh	r2, [r3, #0]
}
 8001f1a:	4770      	bx	lr
 8001f1c:	20001714 	.word	0x20001714

08001f20 <CONFIG_Set_Notification_Status>:
  CONFIG_Server_App_Context.NotificationStatus = status;
 8001f20:	4b01      	ldr	r3, [pc, #4]	; (8001f28 <CONFIG_Set_Notification_Status+0x8>)
 8001f22:	7018      	strb	r0, [r3, #0]
}
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	20001714 	.word	0x20001714

08001f2c <CONFIG_Set_FirstConnection_Config>:
 * @param  status The new flag status
 * @retval None
 */
void CONFIG_Set_FirstConnection_Config(uint8_t status)
{
  CONFIG_Server_App_Context.FirstConnectionConfig = status;
 8001f2c:	4b01      	ldr	r3, [pc, #4]	; (8001f34 <CONFIG_Set_FirstConnection_Config+0x8>)
 8001f2e:	7058      	strb	r0, [r3, #1]
}
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	20001714 	.word	0x20001714

08001f38 <CONFIG_Get_FirstConnection_Config>:
 * @param  None
 * @retval The current flag status
 */
uint8_t CONFIG_Get_FirstConnection_Config(void)
{
  return CONFIG_Server_App_Context.FirstConnectionConfig;
 8001f38:	4b01      	ldr	r3, [pc, #4]	; (8001f40 <CONFIG_Get_FirstConnection_Config+0x8>)
}
 8001f3a:	7858      	ldrb	r0, [r3, #1]
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	20001714 	.word	0x20001714

08001f44 <CONFIG_Send_Notification>:
 * @param  Command Reply to this Command
 * @param  data Result to send back
 * @retval None
 */
void CONFIG_Send_Notification(uint32_t Feature, uint8_t Command, uint8_t data)
{
 8001f44:	b570      	push	{r4, r5, r6, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	4604      	mov	r4, r0
 8001f4a:	460e      	mov	r6, r1
 8001f4c:	4615      	mov	r5, r2
  uint8_t value[VALUE_LEN_CONFIG];

  /* Timestamp */
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 8001f4e:	f008 fa7f 	bl	800a450 <HAL_GetTick>
 8001f52:	08c0      	lsrs	r0, r0, #3
 8001f54:	f88d 0000 	strb.w	r0, [sp]
 8001f58:	f008 fa7a 	bl	800a450 <HAL_GetTick>
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	0ac0      	lsrs	r0, r0, #11
 8001f60:	f360 0307 	bfi	r3, r0, #0, #8
  STORE_BE_32(value+2,Feature);
 8001f64:	0e22      	lsrs	r2, r4, #24
  value[6] = Command;
  value[7] = data;

  if(CONFIG_Server_App_Context.NotificationStatus)
 8001f66:	480d      	ldr	r0, [pc, #52]	; (8001f9c <CONFIG_Send_Notification+0x58>)
  value[6] = Command;
 8001f68:	f88d 6006 	strb.w	r6, [sp, #6]
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 8001f6c:	f362 230f 	bfi	r3, r2, #8, #8
  STORE_BE_32(value+2,Feature);
 8001f70:	0c22      	lsrs	r2, r4, #16
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 8001f72:	f362 4317 	bfi	r3, r2, #16, #8
  if(CONFIG_Server_App_Context.NotificationStatus)
 8001f76:	7801      	ldrb	r1, [r0, #0]
  STORE_BE_32(value+2,Feature);
 8001f78:	f88d 4005 	strb.w	r4, [sp, #5]
 8001f7c:	0a22      	lsrs	r2, r4, #8
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 8001f7e:	f362 631f 	bfi	r3, r2, #24, #8
  value[7] = data;
 8001f82:	f88d 5007 	strb.w	r5, [sp, #7]
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 8001f86:	f8cd 3001 	str.w	r3, [sp, #1]
  if(CONFIG_Server_App_Context.NotificationStatus)
 8001f8a:	b121      	cbz	r1, 8001f96 <CONFIG_Send_Notification+0x52>
  {
#if(CFG_DEBUG_APP_TRACE != 0)
    APP_DBG_MSG("-- CONFIG APPLICATION SERVER : NOTIFY CLIENT WITH NEW CONFIG PARAMETER VALUE \n ");
    APP_DBG_MSG(" \n\r");
#endif
    MOTENV_STM_App_Update_Char(CONFIG_CHAR_UUID, VALUE_LEN_CONFIG, (uint8_t *)&value);
 8001f8c:	466a      	mov	r2, sp
 8001f8e:	2108      	movs	r1, #8
 8001f90:	2002      	movs	r0, #2
 8001f92:	f00b f959 	bl	800d248 <MOTENV_STM_App_Update_Char>
    APP_DBG_MSG("-- CONFIG APPLICATION SERVER : CAN'T INFORM CLIENT - NOTIFICATION DISABLED\n ");
#endif
  }

  return;
}
 8001f96:	b002      	add	sp, #8
 8001f98:	bd70      	pop	{r4, r5, r6, pc}
 8001f9a:	bf00      	nop
 8001f9c:	20001714 	.word	0x20001714

08001fa0 <CONFIG_Parse_Command>:
 * @param att_data Attribute data
 * @param data_length Length of the data
 * @retval SendItBack true/false
 */
uint8_t CONFIG_Parse_Command(uint8_t *att_data, uint8_t data_length)
{
 8001fa0:	b570      	push	{r4, r5, r6, lr}
 8001fa2:	6804      	ldr	r4, [r0, #0]
  uint32_t FeatureMask = (att_data[3]) | (att_data[2]<<8) | (att_data[1]<<16) | (att_data[0]<<24);
  uint8_t Command = att_data[4];
 8001fa4:	7905      	ldrb	r5, [r0, #4]
 8001fa6:	ba24      	rev	r4, r4
  uint8_t Data    = att_data[5];
  uint8_t SendItBack = 1;

  switch (FeatureMask)
 8001fa8:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
{
 8001fac:	b082      	sub	sp, #8
  switch (FeatureMask)
 8001fae:	d007      	beq.n	8001fc0 <CONFIG_Parse_Command+0x20>
 8001fb0:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8001fb4:	d034      	beq.n	8002020 <CONFIG_Parse_Command+0x80>
 8001fb6:	2c40      	cmp	r4, #64	; 0x40
 8001fb8:	d002      	beq.n	8001fc0 <CONFIG_Parse_Command+0x20>
    }
    break;
  }

  return SendItBack;
}
 8001fba:	2001      	movs	r0, #1
 8001fbc:	b002      	add	sp, #8
 8001fbe:	bd70      	pop	{r4, r5, r6, pc}
    switch (Command)
 8001fc0:	2d00      	cmp	r5, #0
 8001fc2:	d05d      	beq.n	8002080 <CONFIG_Parse_Command+0xe0>
 8001fc4:	2dff      	cmp	r5, #255	; 0xff
 8001fc6:	d1f8      	bne.n	8001fba <CONFIG_Parse_Command+0x1a>
        CONFIG_Send_Notification(FeatureMask, Command, MOTIONFX_Get_MagCalStatus() ? 100: 0);
 8001fc8:	f002 f9aa 	bl	8004320 <MOTIONFX_Get_MagCalStatus>
 8001fcc:	2800      	cmp	r0, #0
 8001fce:	bf14      	ite	ne
 8001fd0:	2664      	movne	r6, #100	; 0x64
 8001fd2:	2600      	moveq	r6, #0
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 8001fd4:	f008 fa3c 	bl	800a450 <HAL_GetTick>
 8001fd8:	08c0      	lsrs	r0, r0, #3
 8001fda:	f88d 0000 	strb.w	r0, [sp]
 8001fde:	f008 fa37 	bl	800a450 <HAL_GetTick>
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	0ac0      	lsrs	r0, r0, #11
 8001fe6:	f360 0307 	bfi	r3, r0, #0, #8
  if(CONFIG_Server_App_Context.NotificationStatus)
 8001fea:	4acf      	ldr	r2, [pc, #828]	; (8002328 <CONFIG_Parse_Command+0x388>)
  value[7] = data;
 8001fec:	f88d 6007 	strb.w	r6, [sp, #7]
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 8001ff0:	f36f 230f 	bfc	r3, #8, #8
  STORE_BE_32(value+2,Feature);
 8001ff4:	0a21      	lsrs	r1, r4, #8
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 8001ff6:	f36f 4317 	bfc	r3, #16, #8
  if(CONFIG_Server_App_Context.NotificationStatus)
 8001ffa:	7812      	ldrb	r2, [r2, #0]
  STORE_BE_32(value+2,Feature);
 8001ffc:	f88d 4005 	strb.w	r4, [sp, #5]
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 8002000:	f361 631f 	bfi	r3, r1, #24, #8
  value[6] = Command;
 8002004:	f88d 5006 	strb.w	r5, [sp, #6]
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 8002008:	f8cd 3001 	str.w	r3, [sp, #1]
  if(CONFIG_Server_App_Context.NotificationStatus)
 800200c:	2a00      	cmp	r2, #0
 800200e:	d0d4      	beq.n	8001fba <CONFIG_Parse_Command+0x1a>
    MOTENV_STM_App_Update_Char(CONFIG_CHAR_UUID, VALUE_LEN_CONFIG, (uint8_t *)&value);
 8002010:	466a      	mov	r2, sp
 8002012:	2108      	movs	r1, #8
 8002014:	2002      	movs	r0, #2
 8002016:	f00b f917 	bl	800d248 <MOTENV_STM_App_Update_Char>
}
 800201a:	2001      	movs	r0, #1
 800201c:	b002      	add	sp, #8
 800201e:	bd70      	pop	{r4, r5, r6, pc}
    switch (Command)
 8002020:	3d64      	subs	r5, #100	; 0x64
  uint8_t Data    = att_data[5];
 8002022:	7944      	ldrb	r4, [r0, #5]
    switch (Command)
 8002024:	2d13      	cmp	r5, #19
 8002026:	d8c8      	bhi.n	8001fba <CONFIG_Parse_Command+0x1a>
 8002028:	a301      	add	r3, pc, #4	; (adr r3, 8002030 <CONFIG_Parse_Command+0x90>)
 800202a:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
 800202e:	bf00      	nop
 8002030:	080020cf 	.word	0x080020cf
 8002034:	08001fbb 	.word	0x08001fbb
 8002038:	080020ff 	.word	0x080020ff
 800203c:	08001fbb 	.word	0x08001fbb
 8002040:	08001fbb 	.word	0x08001fbb
 8002044:	08001fbb 	.word	0x08001fbb
 8002048:	08001fbb 	.word	0x08001fbb
 800204c:	08001fbb 	.word	0x08001fbb
 8002050:	08001fbb 	.word	0x08001fbb
 8002054:	0800212f 	.word	0x0800212f
 8002058:	08001fbb 	.word	0x08001fbb
 800205c:	0800215f 	.word	0x0800215f
 8002060:	080021bf 	.word	0x080021bf
 8002064:	08001fbb 	.word	0x08001fbb
 8002068:	08001fbb 	.word	0x08001fbb
 800206c:	0800218f 	.word	0x0800218f
 8002070:	080021ef 	.word	0x080021ef
 8002074:	08001fbb 	.word	0x08001fbb
 8002078:	08001fbb 	.word	0x08001fbb
 800207c:	0800208b 	.word	0x0800208b
      MOTIONFX_ReCalibration();
 8002080:	f002 f958 	bl	8004334 <MOTIONFX_ReCalibration>
}
 8002084:	2001      	movs	r0, #1
 8002086:	b002      	add	sp, #8
 8002088:	bd70      	pop	{r4, r5, r6, pc}
      switch(Data) {
 800208a:	2c00      	cmp	r4, #0
 800208c:	f000 80c5 	beq.w	800221a <CONFIG_Parse_Command+0x27a>
 8002090:	2c01      	cmp	r4, #1
 8002092:	d192      	bne.n	8001fba <CONFIG_Parse_Command+0x1a>
        MOTION_EXT_Enable_Feature(EXT_HWF_WAKE_UP);
 8002094:	2010      	movs	r0, #16
 8002096:	f001 f807 	bl	80030a8 <MOTION_EXT_Enable_Feature>
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 800209a:	f008 f9d9 	bl	800a450 <HAL_GetTick>
 800209e:	08c0      	lsrs	r0, r0, #3
 80020a0:	f88d 0000 	strb.w	r0, [sp]
 80020a4:	f008 f9d4 	bl	800a450 <HAL_GetTick>
  if(CONFIG_Server_App_Context.NotificationStatus)
 80020a8:	4b9f      	ldr	r3, [pc, #636]	; (8002328 <CONFIG_Parse_Command+0x388>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 80020ac:	0ac0      	lsrs	r0, r0, #11
  STORE_BE_32(value+2,Feature);
 80020ae:	2400      	movs	r4, #0
 80020b0:	2104      	movs	r1, #4
 80020b2:	f240 1277 	movw	r2, #375	; 0x177
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 80020b6:	f88d 0001 	strb.w	r0, [sp, #1]
  STORE_BE_32(value+2,Feature);
 80020ba:	f8ad 4002 	strh.w	r4, [sp, #2]
 80020be:	f8ad 1004 	strh.w	r1, [sp, #4]
 80020c2:	f8ad 2006 	strh.w	r2, [sp, #6]
  if(CONFIG_Server_App_Context.NotificationStatus)
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	f43f af77 	beq.w	8001fba <CONFIG_Parse_Command+0x1a>
 80020cc:	e7a0      	b.n	8002010 <CONFIG_Parse_Command+0x70>
      switch(Data) {
 80020ce:	2c00      	cmp	r4, #0
 80020d0:	f000 80d9 	beq.w	8002286 <CONFIG_Parse_Command+0x2e6>
 80020d4:	2c01      	cmp	r4, #1
 80020d6:	f47f af70 	bne.w	8001fba <CONFIG_Parse_Command+0x1a>
        MOTION_EXT_Enable_Feature(EXT_HWF_DOUBLE_TAP);
 80020da:	2004      	movs	r0, #4
 80020dc:	f000 ffe4 	bl	80030a8 <MOTION_EXT_Enable_Feature>
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 80020e0:	f008 f9b6 	bl	800a450 <HAL_GetTick>
 80020e4:	08c0      	lsrs	r0, r0, #3
 80020e6:	f88d 0000 	strb.w	r0, [sp]
 80020ea:	f008 f9b1 	bl	800a450 <HAL_GetTick>
  if(CONFIG_Server_App_Context.NotificationStatus)
 80020ee:	4b8e      	ldr	r3, [pc, #568]	; (8002328 <CONFIG_Parse_Command+0x388>)
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 80020f0:	0ac0      	lsrs	r0, r0, #11
  if(CONFIG_Server_App_Context.NotificationStatus)
 80020f2:	781b      	ldrb	r3, [r3, #0]
  STORE_BE_32(value+2,Feature);
 80020f4:	2400      	movs	r4, #0
 80020f6:	2104      	movs	r1, #4
 80020f8:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80020fc:	e7db      	b.n	80020b6 <CONFIG_Parse_Command+0x116>
      switch(Data) {
 80020fe:	2c00      	cmp	r4, #0
 8002100:	f000 80dc 	beq.w	80022bc <CONFIG_Parse_Command+0x31c>
 8002104:	2c01      	cmp	r4, #1
 8002106:	f47f af58 	bne.w	8001fba <CONFIG_Parse_Command+0x1a>
        MOTION_EXT_Enable_Feature(EXT_HWF_FREE_FALL);
 800210a:	2002      	movs	r0, #2
 800210c:	f000 ffcc 	bl	80030a8 <MOTION_EXT_Enable_Feature>
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 8002110:	f008 f99e 	bl	800a450 <HAL_GetTick>
 8002114:	08c0      	lsrs	r0, r0, #3
 8002116:	f88d 0000 	strb.w	r0, [sp]
 800211a:	f008 f999 	bl	800a450 <HAL_GetTick>
  if(CONFIG_Server_App_Context.NotificationStatus)
 800211e:	4b82      	ldr	r3, [pc, #520]	; (8002328 <CONFIG_Parse_Command+0x388>)
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 8002120:	0ac0      	lsrs	r0, r0, #11
  if(CONFIG_Server_App_Context.NotificationStatus)
 8002122:	781b      	ldrb	r3, [r3, #0]
  STORE_BE_32(value+2,Feature);
 8002124:	2400      	movs	r4, #0
 8002126:	2104      	movs	r1, #4
 8002128:	f44f 72b3 	mov.w	r2, #358	; 0x166
 800212c:	e7c3      	b.n	80020b6 <CONFIG_Parse_Command+0x116>
      switch(Data) {
 800212e:	2c00      	cmp	r4, #0
 8002130:	f000 80df 	beq.w	80022f2 <CONFIG_Parse_Command+0x352>
 8002134:	2c01      	cmp	r4, #1
 8002136:	f47f af40 	bne.w	8001fba <CONFIG_Parse_Command+0x1a>
        MOTION_EXT_Enable_Feature(EXT_HWF_MULTIPLE_EVENTS);
 800213a:	2080      	movs	r0, #128	; 0x80
 800213c:	f000 ffb4 	bl	80030a8 <MOTION_EXT_Enable_Feature>
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 8002140:	f008 f986 	bl	800a450 <HAL_GetTick>
 8002144:	08c0      	lsrs	r0, r0, #3
 8002146:	f88d 0000 	strb.w	r0, [sp]
 800214a:	f008 f981 	bl	800a450 <HAL_GetTick>
  if(CONFIG_Server_App_Context.NotificationStatus)
 800214e:	4b76      	ldr	r3, [pc, #472]	; (8002328 <CONFIG_Parse_Command+0x388>)
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 8002150:	0ac0      	lsrs	r0, r0, #11
  if(CONFIG_Server_App_Context.NotificationStatus)
 8002152:	781b      	ldrb	r3, [r3, #0]
  STORE_BE_32(value+2,Feature);
 8002154:	2400      	movs	r4, #0
 8002156:	2104      	movs	r1, #4
 8002158:	f240 126d 	movw	r2, #365	; 0x16d
 800215c:	e7ab      	b.n	80020b6 <CONFIG_Parse_Command+0x116>
      switch(Data) {
 800215e:	2c00      	cmp	r4, #0
 8002160:	f000 80ff 	beq.w	8002362 <CONFIG_Parse_Command+0x3c2>
 8002164:	2c01      	cmp	r4, #1
 8002166:	f47f af28 	bne.w	8001fba <CONFIG_Parse_Command+0x1a>
        MOTION_EXT_Enable_Feature(EXT_HWF_6D_ORIENTATION);
 800216a:	2040      	movs	r0, #64	; 0x40
 800216c:	f000 ff9c 	bl	80030a8 <MOTION_EXT_Enable_Feature>
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 8002170:	f008 f96e 	bl	800a450 <HAL_GetTick>
 8002174:	08c0      	lsrs	r0, r0, #3
 8002176:	f88d 0000 	strb.w	r0, [sp]
 800217a:	f008 f969 	bl	800a450 <HAL_GetTick>
  if(CONFIG_Server_App_Context.NotificationStatus)
 800217e:	4b6a      	ldr	r3, [pc, #424]	; (8002328 <CONFIG_Parse_Command+0x388>)
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 8002180:	0ac0      	lsrs	r0, r0, #11
  if(CONFIG_Server_App_Context.NotificationStatus)
 8002182:	781b      	ldrb	r3, [r3, #0]
  STORE_BE_32(value+2,Feature);
 8002184:	2400      	movs	r4, #0
 8002186:	2104      	movs	r1, #4
 8002188:	f240 126f 	movw	r2, #367	; 0x16f
 800218c:	e793      	b.n	80020b6 <CONFIG_Parse_Command+0x116>
      switch(Data) {
 800218e:	2c00      	cmp	r4, #0
 8002190:	f000 80cc 	beq.w	800232c <CONFIG_Parse_Command+0x38c>
 8002194:	2c01      	cmp	r4, #1
 8002196:	f47f af10 	bne.w	8001fba <CONFIG_Parse_Command+0x1a>
        MOTION_EXT_Enable_Feature(EXT_HWF_SINGLE_TAP);
 800219a:	2008      	movs	r0, #8
 800219c:	f000 ff84 	bl	80030a8 <MOTION_EXT_Enable_Feature>
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 80021a0:	f008 f956 	bl	800a450 <HAL_GetTick>
 80021a4:	08c0      	lsrs	r0, r0, #3
 80021a6:	f88d 0000 	strb.w	r0, [sp]
 80021aa:	f008 f951 	bl	800a450 <HAL_GetTick>
  if(CONFIG_Server_App_Context.NotificationStatus)
 80021ae:	4b5e      	ldr	r3, [pc, #376]	; (8002328 <CONFIG_Parse_Command+0x388>)
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 80021b0:	0ac0      	lsrs	r0, r0, #11
  if(CONFIG_Server_App_Context.NotificationStatus)
 80021b2:	781b      	ldrb	r3, [r3, #0]
  STORE_BE_32(value+2,Feature);
 80021b4:	2400      	movs	r4, #0
 80021b6:	2104      	movs	r1, #4
 80021b8:	f240 1273 	movw	r2, #371	; 0x173
 80021bc:	e77b      	b.n	80020b6 <CONFIG_Parse_Command+0x116>
      switch(Data) {
 80021be:	2c00      	cmp	r4, #0
 80021c0:	f000 80ea 	beq.w	8002398 <CONFIG_Parse_Command+0x3f8>
 80021c4:	2c01      	cmp	r4, #1
 80021c6:	f47f aef8 	bne.w	8001fba <CONFIG_Parse_Command+0x1a>
        MOTION_EXT_Enable_Feature(EXT_HWF_PEDOMETER);
 80021ca:	4620      	mov	r0, r4
 80021cc:	f000 ff6c 	bl	80030a8 <MOTION_EXT_Enable_Feature>
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 80021d0:	f008 f93e 	bl	800a450 <HAL_GetTick>
 80021d4:	08c0      	lsrs	r0, r0, #3
 80021d6:	f88d 0000 	strb.w	r0, [sp]
 80021da:	f008 f939 	bl	800a450 <HAL_GetTick>
  if(CONFIG_Server_App_Context.NotificationStatus)
 80021de:	4b52      	ldr	r3, [pc, #328]	; (8002328 <CONFIG_Parse_Command+0x388>)
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 80021e0:	0ac0      	lsrs	r0, r0, #11
  if(CONFIG_Server_App_Context.NotificationStatus)
 80021e2:	781b      	ldrb	r3, [r3, #0]
  STORE_BE_32(value+2,Feature);
 80021e4:	2400      	movs	r4, #0
 80021e6:	2104      	movs	r1, #4
 80021e8:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80021ec:	e763      	b.n	80020b6 <CONFIG_Parse_Command+0x116>
      switch(Data) {
 80021ee:	b37c      	cbz	r4, 8002250 <CONFIG_Parse_Command+0x2b0>
 80021f0:	2c01      	cmp	r4, #1
 80021f2:	f47f aee2 	bne.w	8001fba <CONFIG_Parse_Command+0x1a>
        MOTION_EXT_Enable_Feature(EXT_HWF_TILT);
 80021f6:	2020      	movs	r0, #32
 80021f8:	f000 ff56 	bl	80030a8 <MOTION_EXT_Enable_Feature>
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 80021fc:	f008 f928 	bl	800a450 <HAL_GetTick>
 8002200:	08c0      	lsrs	r0, r0, #3
 8002202:	f88d 0000 	strb.w	r0, [sp]
 8002206:	f008 f923 	bl	800a450 <HAL_GetTick>
  if(CONFIG_Server_App_Context.NotificationStatus)
 800220a:	4b47      	ldr	r3, [pc, #284]	; (8002328 <CONFIG_Parse_Command+0x388>)
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 800220c:	0ac0      	lsrs	r0, r0, #11
  if(CONFIG_Server_App_Context.NotificationStatus)
 800220e:	781b      	ldrb	r3, [r3, #0]
  STORE_BE_32(value+2,Feature);
 8002210:	2400      	movs	r4, #0
 8002212:	2104      	movs	r1, #4
 8002214:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8002218:	e74d      	b.n	80020b6 <CONFIG_Parse_Command+0x116>
        MOTION_EXT_Disable_Feature(EXT_HWF_WAKE_UP);
 800221a:	2010      	movs	r0, #16
 800221c:	f000 ffc8 	bl	80031b0 <MOTION_EXT_Disable_Feature>
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 8002220:	f008 f916 	bl	800a450 <HAL_GetTick>
 8002224:	08c0      	lsrs	r0, r0, #3
 8002226:	f88d 0000 	strb.w	r0, [sp]
 800222a:	f008 f911 	bl	800a450 <HAL_GetTick>
  if(CONFIG_Server_App_Context.NotificationStatus)
 800222e:	4b3e      	ldr	r3, [pc, #248]	; (8002328 <CONFIG_Parse_Command+0x388>)
  STORE_BE_32(value+2,Feature);
 8002230:	f8ad 4002 	strh.w	r4, [sp, #2]
  if(CONFIG_Server_App_Context.NotificationStatus)
 8002234:	781b      	ldrb	r3, [r3, #0]
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 8002236:	0ac0      	lsrs	r0, r0, #11
  STORE_BE_32(value+2,Feature);
 8002238:	2104      	movs	r1, #4
 800223a:	2277      	movs	r2, #119	; 0x77
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 800223c:	f88d 0001 	strb.w	r0, [sp, #1]
  STORE_BE_32(value+2,Feature);
 8002240:	f8ad 1004 	strh.w	r1, [sp, #4]
 8002244:	f8ad 2006 	strh.w	r2, [sp, #6]
  if(CONFIG_Server_App_Context.NotificationStatus)
 8002248:	2b00      	cmp	r3, #0
 800224a:	f43f aeb6 	beq.w	8001fba <CONFIG_Parse_Command+0x1a>
 800224e:	e6df      	b.n	8002010 <CONFIG_Parse_Command+0x70>
        MOTION_EXT_Disable_Feature(EXT_HWF_TILT);
 8002250:	2020      	movs	r0, #32
 8002252:	f000 ffad 	bl	80031b0 <MOTION_EXT_Disable_Feature>
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 8002256:	f008 f8fb 	bl	800a450 <HAL_GetTick>
 800225a:	08c0      	lsrs	r0, r0, #3
 800225c:	f88d 0000 	strb.w	r0, [sp]
 8002260:	f008 f8f6 	bl	800a450 <HAL_GetTick>
  if(CONFIG_Server_App_Context.NotificationStatus)
 8002264:	4b30      	ldr	r3, [pc, #192]	; (8002328 <CONFIG_Parse_Command+0x388>)
  STORE_BE_32(value+2,Feature);
 8002266:	f8ad 4002 	strh.w	r4, [sp, #2]
  if(CONFIG_Server_App_Context.NotificationStatus)
 800226a:	781b      	ldrb	r3, [r3, #0]
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 800226c:	0ac0      	lsrs	r0, r0, #11
  STORE_BE_32(value+2,Feature);
 800226e:	2104      	movs	r1, #4
 8002270:	2274      	movs	r2, #116	; 0x74
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 8002272:	f88d 0001 	strb.w	r0, [sp, #1]
  STORE_BE_32(value+2,Feature);
 8002276:	f8ad 1004 	strh.w	r1, [sp, #4]
 800227a:	f8ad 2006 	strh.w	r2, [sp, #6]
  if(CONFIG_Server_App_Context.NotificationStatus)
 800227e:	2b00      	cmp	r3, #0
 8002280:	f43f ae9b 	beq.w	8001fba <CONFIG_Parse_Command+0x1a>
 8002284:	e6c4      	b.n	8002010 <CONFIG_Parse_Command+0x70>
        MOTION_EXT_Disable_Feature(EXT_HWF_DOUBLE_TAP);
 8002286:	2004      	movs	r0, #4
 8002288:	f000 ff92 	bl	80031b0 <MOTION_EXT_Disable_Feature>
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 800228c:	f008 f8e0 	bl	800a450 <HAL_GetTick>
 8002290:	08c0      	lsrs	r0, r0, #3
 8002292:	f88d 0000 	strb.w	r0, [sp]
 8002296:	f008 f8db 	bl	800a450 <HAL_GetTick>
  if(CONFIG_Server_App_Context.NotificationStatus)
 800229a:	4b23      	ldr	r3, [pc, #140]	; (8002328 <CONFIG_Parse_Command+0x388>)
  STORE_BE_32(value+2,Feature);
 800229c:	f8ad 4002 	strh.w	r4, [sp, #2]
  if(CONFIG_Server_App_Context.NotificationStatus)
 80022a0:	781b      	ldrb	r3, [r3, #0]
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 80022a2:	0ac0      	lsrs	r0, r0, #11
  STORE_BE_32(value+2,Feature);
 80022a4:	2104      	movs	r1, #4
 80022a6:	2264      	movs	r2, #100	; 0x64
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 80022a8:	f88d 0001 	strb.w	r0, [sp, #1]
  STORE_BE_32(value+2,Feature);
 80022ac:	f8ad 1004 	strh.w	r1, [sp, #4]
 80022b0:	f8ad 2006 	strh.w	r2, [sp, #6]
  if(CONFIG_Server_App_Context.NotificationStatus)
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	f43f ae80 	beq.w	8001fba <CONFIG_Parse_Command+0x1a>
 80022ba:	e6a9      	b.n	8002010 <CONFIG_Parse_Command+0x70>
        MOTION_EXT_Disable_Feature(EXT_HWF_FREE_FALL);
 80022bc:	2002      	movs	r0, #2
 80022be:	f000 ff77 	bl	80031b0 <MOTION_EXT_Disable_Feature>
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 80022c2:	f008 f8c5 	bl	800a450 <HAL_GetTick>
 80022c6:	08c0      	lsrs	r0, r0, #3
 80022c8:	f88d 0000 	strb.w	r0, [sp]
 80022cc:	f008 f8c0 	bl	800a450 <HAL_GetTick>
  if(CONFIG_Server_App_Context.NotificationStatus)
 80022d0:	4b15      	ldr	r3, [pc, #84]	; (8002328 <CONFIG_Parse_Command+0x388>)
  STORE_BE_32(value+2,Feature);
 80022d2:	f8ad 4002 	strh.w	r4, [sp, #2]
  if(CONFIG_Server_App_Context.NotificationStatus)
 80022d6:	781b      	ldrb	r3, [r3, #0]
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 80022d8:	0ac0      	lsrs	r0, r0, #11
  STORE_BE_32(value+2,Feature);
 80022da:	2104      	movs	r1, #4
 80022dc:	2266      	movs	r2, #102	; 0x66
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 80022de:	f88d 0001 	strb.w	r0, [sp, #1]
  STORE_BE_32(value+2,Feature);
 80022e2:	f8ad 1004 	strh.w	r1, [sp, #4]
 80022e6:	f8ad 2006 	strh.w	r2, [sp, #6]
  if(CONFIG_Server_App_Context.NotificationStatus)
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	f43f ae65 	beq.w	8001fba <CONFIG_Parse_Command+0x1a>
 80022f0:	e68e      	b.n	8002010 <CONFIG_Parse_Command+0x70>
        MOTION_EXT_Disable_Feature(EXT_HWF_MULTIPLE_EVENTS);
 80022f2:	2080      	movs	r0, #128	; 0x80
 80022f4:	f000 ff5c 	bl	80031b0 <MOTION_EXT_Disable_Feature>
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 80022f8:	f008 f8aa 	bl	800a450 <HAL_GetTick>
 80022fc:	08c0      	lsrs	r0, r0, #3
 80022fe:	f88d 0000 	strb.w	r0, [sp]
 8002302:	f008 f8a5 	bl	800a450 <HAL_GetTick>
  if(CONFIG_Server_App_Context.NotificationStatus)
 8002306:	4b08      	ldr	r3, [pc, #32]	; (8002328 <CONFIG_Parse_Command+0x388>)
  STORE_BE_32(value+2,Feature);
 8002308:	f8ad 4002 	strh.w	r4, [sp, #2]
  if(CONFIG_Server_App_Context.NotificationStatus)
 800230c:	781b      	ldrb	r3, [r3, #0]
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 800230e:	0ac0      	lsrs	r0, r0, #11
  STORE_BE_32(value+2,Feature);
 8002310:	2104      	movs	r1, #4
 8002312:	226d      	movs	r2, #109	; 0x6d
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 8002314:	f88d 0001 	strb.w	r0, [sp, #1]
  STORE_BE_32(value+2,Feature);
 8002318:	f8ad 1004 	strh.w	r1, [sp, #4]
 800231c:	f8ad 2006 	strh.w	r2, [sp, #6]
  if(CONFIG_Server_App_Context.NotificationStatus)
 8002320:	2b00      	cmp	r3, #0
 8002322:	f43f ae4a 	beq.w	8001fba <CONFIG_Parse_Command+0x1a>
 8002326:	e673      	b.n	8002010 <CONFIG_Parse_Command+0x70>
 8002328:	20001714 	.word	0x20001714
        MOTION_EXT_Disable_Feature(EXT_HWF_SINGLE_TAP);
 800232c:	2008      	movs	r0, #8
 800232e:	f000 ff3f 	bl	80031b0 <MOTION_EXT_Disable_Feature>
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 8002332:	f008 f88d 	bl	800a450 <HAL_GetTick>
 8002336:	08c0      	lsrs	r0, r0, #3
 8002338:	f88d 0000 	strb.w	r0, [sp]
 800233c:	f008 f888 	bl	800a450 <HAL_GetTick>
  if(CONFIG_Server_App_Context.NotificationStatus)
 8002340:	4b23      	ldr	r3, [pc, #140]	; (80023d0 <CONFIG_Parse_Command+0x430>)
  STORE_BE_32(value+2,Feature);
 8002342:	f8ad 4002 	strh.w	r4, [sp, #2]
  if(CONFIG_Server_App_Context.NotificationStatus)
 8002346:	781b      	ldrb	r3, [r3, #0]
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 8002348:	0ac0      	lsrs	r0, r0, #11
  STORE_BE_32(value+2,Feature);
 800234a:	2104      	movs	r1, #4
 800234c:	2273      	movs	r2, #115	; 0x73
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 800234e:	f88d 0001 	strb.w	r0, [sp, #1]
  STORE_BE_32(value+2,Feature);
 8002352:	f8ad 1004 	strh.w	r1, [sp, #4]
 8002356:	f8ad 2006 	strh.w	r2, [sp, #6]
  if(CONFIG_Server_App_Context.NotificationStatus)
 800235a:	2b00      	cmp	r3, #0
 800235c:	f43f ae2d 	beq.w	8001fba <CONFIG_Parse_Command+0x1a>
 8002360:	e656      	b.n	8002010 <CONFIG_Parse_Command+0x70>
        MOTION_EXT_Disable_Feature(EXT_HWF_6D_ORIENTATION);
 8002362:	2040      	movs	r0, #64	; 0x40
 8002364:	f000 ff24 	bl	80031b0 <MOTION_EXT_Disable_Feature>
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 8002368:	f008 f872 	bl	800a450 <HAL_GetTick>
 800236c:	08c0      	lsrs	r0, r0, #3
 800236e:	f88d 0000 	strb.w	r0, [sp]
 8002372:	f008 f86d 	bl	800a450 <HAL_GetTick>
  if(CONFIG_Server_App_Context.NotificationStatus)
 8002376:	4b16      	ldr	r3, [pc, #88]	; (80023d0 <CONFIG_Parse_Command+0x430>)
  STORE_BE_32(value+2,Feature);
 8002378:	f8ad 4002 	strh.w	r4, [sp, #2]
  if(CONFIG_Server_App_Context.NotificationStatus)
 800237c:	781b      	ldrb	r3, [r3, #0]
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 800237e:	0ac0      	lsrs	r0, r0, #11
  STORE_BE_32(value+2,Feature);
 8002380:	2104      	movs	r1, #4
 8002382:	226f      	movs	r2, #111	; 0x6f
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 8002384:	f88d 0001 	strb.w	r0, [sp, #1]
  STORE_BE_32(value+2,Feature);
 8002388:	f8ad 1004 	strh.w	r1, [sp, #4]
 800238c:	f8ad 2006 	strh.w	r2, [sp, #6]
  if(CONFIG_Server_App_Context.NotificationStatus)
 8002390:	2b00      	cmp	r3, #0
 8002392:	f43f ae12 	beq.w	8001fba <CONFIG_Parse_Command+0x1a>
 8002396:	e63b      	b.n	8002010 <CONFIG_Parse_Command+0x70>
        MOTION_EXT_Disable_Feature(EXT_HWF_PEDOMETER);
 8002398:	2001      	movs	r0, #1
 800239a:	f000 ff09 	bl	80031b0 <MOTION_EXT_Disable_Feature>
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 800239e:	f008 f857 	bl	800a450 <HAL_GetTick>
 80023a2:	08c0      	lsrs	r0, r0, #3
 80023a4:	f88d 0000 	strb.w	r0, [sp]
 80023a8:	f008 f852 	bl	800a450 <HAL_GetTick>
  if(CONFIG_Server_App_Context.NotificationStatus)
 80023ac:	4b08      	ldr	r3, [pc, #32]	; (80023d0 <CONFIG_Parse_Command+0x430>)
  STORE_BE_32(value+2,Feature);
 80023ae:	f8ad 4002 	strh.w	r4, [sp, #2]
  if(CONFIG_Server_App_Context.NotificationStatus)
 80023b2:	781b      	ldrb	r3, [r3, #0]
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 80023b4:	0ac0      	lsrs	r0, r0, #11
  STORE_BE_32(value+2,Feature);
 80023b6:	2104      	movs	r1, #4
 80023b8:	2270      	movs	r2, #112	; 0x70
  STORE_LE_16(value  ,(HAL_GetTick()>>3));
 80023ba:	f88d 0001 	strb.w	r0, [sp, #1]
  STORE_BE_32(value+2,Feature);
 80023be:	f8ad 1004 	strh.w	r1, [sp, #4]
 80023c2:	f8ad 2006 	strh.w	r2, [sp, #6]
  if(CONFIG_Server_App_Context.NotificationStatus)
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	f43f adf7 	beq.w	8001fba <CONFIG_Parse_Command+0x1a>
 80023cc:	e620      	b.n	8002010 <CONFIG_Parse_Command+0x70>
 80023ce:	bf00      	nop
 80023d0:	20001714 	.word	0x20001714

080023d4 <CONSOLE_Set_Term_Notification_Status>:
 * @param  status The new notification status
 * @retval None
 */
void CONSOLE_Set_Term_Notification_Status(uint8_t status)
{
  CONSOLE_Server_App_Context.TermNotificationStatus = status;
 80023d4:	4b01      	ldr	r3, [pc, #4]	; (80023dc <CONSOLE_Set_Term_Notification_Status+0x8>)
 80023d6:	7018      	strb	r0, [r3, #0]
}
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	20001718 	.word	0x20001718

080023e0 <CONSOLE_Set_Stderr_Notification_Status>:
 * @param  status The new notification status
 * @retval None
 */
void CONSOLE_Set_Stderr_Notification_Status(uint8_t status)
{
  CONSOLE_Server_App_Context.StderrNotificationStatus = status;
 80023e0:	4b01      	ldr	r3, [pc, #4]	; (80023e8 <CONSOLE_Set_Stderr_Notification_Status+0x8>)
 80023e2:	7058      	strb	r0, [r3, #1]
}
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	20001718 	.word	0x20001718

080023ec <CONSOLE_Term_Update_AfterRead>:
 * @param None
 * @retval None
 */
void CONSOLE_Term_Update_AfterRead(void)
{
  if(CONSOLE_Server_App_Context.TermNotificationStatus)
 80023ec:	4b04      	ldr	r3, [pc, #16]	; (8002400 <CONSOLE_Term_Update_AfterRead+0x14>)
 80023ee:	781a      	ldrb	r2, [r3, #0]
 80023f0:	b902      	cbnz	r2, 80023f4 <CONSOLE_Term_Update_AfterRead+0x8>
#endif
      MOTENV_STM_App_Update_Char(CONSOLE_TERM_CHAR_UUID, CONSOLE_Server_App_Context.LastTermLen, CONSOLE_Server_App_Context.LastTermBuffer);
  }

  return;
}
 80023f2:	4770      	bx	lr
      MOTENV_STM_App_Update_Char(CONSOLE_TERM_CHAR_UUID, CONSOLE_Server_App_Context.LastTermLen, CONSOLE_Server_App_Context.LastTermBuffer);
 80023f4:	1cda      	adds	r2, r3, #3
 80023f6:	7dd9      	ldrb	r1, [r3, #23]
 80023f8:	f44f 7087 	mov.w	r0, #270	; 0x10e
 80023fc:	f00a bf24 	b.w	800d248 <MOTENV_STM_App_Update_Char>
 8002400:	20001718 	.word	0x20001718

08002404 <CONSOLE_Stderr_Update_AfterRead>:
 * @param None
 * @retval None
 */
void CONSOLE_Stderr_Update_AfterRead(void)
{
  if(CONSOLE_Server_App_Context.StderrNotificationStatus)
 8002404:	4b04      	ldr	r3, [pc, #16]	; (8002418 <CONSOLE_Stderr_Update_AfterRead+0x14>)
 8002406:	785a      	ldrb	r2, [r3, #1]
 8002408:	b902      	cbnz	r2, 800240c <CONSOLE_Stderr_Update_AfterRead+0x8>
#endif
      MOTENV_STM_App_Update_Char(CONSOLE_TERM_CHAR_UUID, CONSOLE_Server_App_Context.LastTermLen, CONSOLE_Server_App_Context.LastTermBuffer);
  }

  return;
}
 800240a:	4770      	bx	lr
      MOTENV_STM_App_Update_Char(CONSOLE_TERM_CHAR_UUID, CONSOLE_Server_App_Context.LastTermLen, CONSOLE_Server_App_Context.LastTermBuffer);
 800240c:	1cda      	adds	r2, r3, #3
 800240e:	7dd9      	ldrb	r1, [r3, #23]
 8002410:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8002414:	f00a bf18 	b.w	800d248 <MOTENV_STM_App_Update_Char>
 8002418:	20001718 	.word	0x20001718

0800241c <ENV_Context_Init>:
 * @brief  Init the HW/Environmental Service/Char Context
 * @param  None
 * @retval None
 */
void ENV_Context_Init(void)
{
 800241c:	b538      	push	{r3, r4, r5, lr}
  /* Env Sensors */
  (void)IKS01A3_ENV_SENSOR_Init(IKS01A3_HTS221_0, ENV_TEMPERATURE | ENV_HUMIDITY);
 800241e:	2105      	movs	r1, #5
 8002420:	2000      	movs	r0, #0
 8002422:	f007 f8b9 	bl	8009598 <IKS01A3_ENV_SENSOR_Init>
{
  uint8_t i;
  APP_DBG_MSG("-- ENV APPLICATION SERVER : IKS01A3_ENV_INSTANCES_NBR=%d\n ", IKS01A3_ENV_INSTANCES_NBR);
  for(i = 0; i < IKS01A3_ENV_INSTANCES_NBR; i++)
  {
    IKS01A3_ENV_SENSOR_GetCapabilities(i, &EnvCapabilities[i]);
 8002426:	4d25      	ldr	r5, [pc, #148]	; (80024bc <ENV_Context_Init+0xa0>)
  ENV_Server_App_Context.hasPressure = 0;
 8002428:	4c25      	ldr	r4, [pc, #148]	; (80024c0 <ENV_Context_Init+0xa4>)
  (void)IKS01A3_ENV_SENSOR_Init(IKS01A3_LPS22HH_0, ENV_TEMPERATURE | ENV_PRESSURE);
 800242a:	2103      	movs	r1, #3
 800242c:	2001      	movs	r0, #1
 800242e:	f007 f8b3 	bl	8009598 <IKS01A3_ENV_SENSOR_Init>
  ENV_Server_App_Context.hasPressure = 0;
 8002432:	2300      	movs	r3, #0
    IKS01A3_ENV_SENSOR_GetCapabilities(i, &EnvCapabilities[i]);
 8002434:	4618      	mov	r0, r3
 8002436:	4629      	mov	r1, r5
  ENV_Server_App_Context.hasPressure = 0;
 8002438:	81e3      	strh	r3, [r4, #14]
  ENV_Server_App_Context.hasHumidity = 0;
 800243a:	7423      	strb	r3, [r4, #16]
  ENV_Server_App_Context.NotificationStatus = status;
 800243c:	7023      	strb	r3, [r4, #0]
    IKS01A3_ENV_SENSOR_GetCapabilities(i, &EnvCapabilities[i]);
 800243e:	f007 fa0b 	bl	8009858 <IKS01A3_ENV_SENSOR_GetCapabilities>
    if(EnvCapabilities[i].Pressure)
 8002442:	786b      	ldrb	r3, [r5, #1]
 8002444:	b10b      	cbz	r3, 800244a <ENV_Context_Init+0x2e>
    {
      ENV_Server_App_Context.hasPressure = 1;
 8002446:	2301      	movs	r3, #1
 8002448:	73a3      	strb	r3, [r4, #14]
    }
    if(EnvCapabilities[i].Humidity)
 800244a:	78ab      	ldrb	r3, [r5, #2]
 800244c:	b10b      	cbz	r3, 8002452 <ENV_Context_Init+0x36>
    {
      ENV_Server_App_Context.hasHumidity = 1;
 800244e:	2301      	movs	r3, #1
 8002450:	73e3      	strb	r3, [r4, #15]
    }
    if(EnvCapabilities[i].Temperature)
 8002452:	782b      	ldrb	r3, [r5, #0]
 8002454:	b113      	cbz	r3, 800245c <ENV_Context_Init+0x40>
    {
      ENV_Server_App_Context.hasTemperature++;
 8002456:	7c23      	ldrb	r3, [r4, #16]
 8002458:	3301      	adds	r3, #1
 800245a:	7423      	strb	r3, [r4, #16]
    IKS01A3_ENV_SENSOR_GetCapabilities(i, &EnvCapabilities[i]);
 800245c:	4919      	ldr	r1, [pc, #100]	; (80024c4 <ENV_Context_Init+0xa8>)
 800245e:	2001      	movs	r0, #1
 8002460:	f007 f9fa 	bl	8009858 <IKS01A3_ENV_SENSOR_GetCapabilities>
    if(EnvCapabilities[i].Pressure)
 8002464:	7c6b      	ldrb	r3, [r5, #17]
 8002466:	b10b      	cbz	r3, 800246c <ENV_Context_Init+0x50>
      ENV_Server_App_Context.hasPressure = 1;
 8002468:	2301      	movs	r3, #1
 800246a:	73a3      	strb	r3, [r4, #14]
    if(EnvCapabilities[i].Humidity)
 800246c:	7cab      	ldrb	r3, [r5, #18]
 800246e:	b10b      	cbz	r3, 8002474 <ENV_Context_Init+0x58>
      ENV_Server_App_Context.hasHumidity = 1;
 8002470:	2301      	movs	r3, #1
 8002472:	73e3      	strb	r3, [r4, #15]
    if(EnvCapabilities[i].Temperature)
 8002474:	7c2b      	ldrb	r3, [r5, #16]
 8002476:	b113      	cbz	r3, 800247e <ENV_Context_Init+0x62>
      ENV_Server_App_Context.hasTemperature++;
 8002478:	7c23      	ldrb	r3, [r4, #16]
 800247a:	3301      	adds	r3, #1
 800247c:	7423      	strb	r3, [r4, #16]
    }
  }

  /* Update BLE ADV field (Env) */
  if(ENV_Server_App_Context.hasTemperature > 1)
 800247e:	7c23      	ldrb	r3, [r4, #16]
 8002480:	2b01      	cmp	r3, #1
 8002482:	d913      	bls.n	80024ac <ENV_Context_Init+0x90>
  {
    manuf_data[5] |= 0x05; /* Two Temperature values*/
 8002484:	4a10      	ldr	r2, [pc, #64]	; (80024c8 <ENV_Context_Init+0xac>)
 8002486:	7953      	ldrb	r3, [r2, #5]
 8002488:	f043 0305 	orr.w	r3, r3, #5
 800248c:	7153      	strb	r3, [r2, #5]
  else if(ENV_Server_App_Context.hasTemperature == 1)
  {
    manuf_data[5] |= 0x04; /* One Temperature value*/
  }

  if(ENV_Server_App_Context.hasHumidity)
 800248e:	7be3      	ldrb	r3, [r4, #15]
 8002490:	b123      	cbz	r3, 800249c <ENV_Context_Init+0x80>
  {
    manuf_data[5] |= 0x08; /* Humidity value */
 8002492:	4a0d      	ldr	r2, [pc, #52]	; (80024c8 <ENV_Context_Init+0xac>)
 8002494:	7953      	ldrb	r3, [r2, #5]
 8002496:	f043 0308 	orr.w	r3, r3, #8
 800249a:	7153      	strb	r3, [r2, #5]
  }

  if(ENV_Server_App_Context.hasPressure)
 800249c:	7ba3      	ldrb	r3, [r4, #14]
 800249e:	b123      	cbz	r3, 80024aa <ENV_Context_Init+0x8e>
  {
    manuf_data[5] |= 0x10; /* Pressure value*/
 80024a0:	4a09      	ldr	r2, [pc, #36]	; (80024c8 <ENV_Context_Init+0xac>)
 80024a2:	7953      	ldrb	r3, [r2, #5]
 80024a4:	f043 0310 	orr.w	r3, r3, #16
 80024a8:	7153      	strb	r3, [r2, #5]
}
 80024aa:	bd38      	pop	{r3, r4, r5, pc}
  else if(ENV_Server_App_Context.hasTemperature == 1)
 80024ac:	d1ef      	bne.n	800248e <ENV_Context_Init+0x72>
    manuf_data[5] |= 0x04; /* One Temperature value*/
 80024ae:	4a06      	ldr	r2, [pc, #24]	; (80024c8 <ENV_Context_Init+0xac>)
 80024b0:	7953      	ldrb	r3, [r2, #5]
 80024b2:	f043 0304 	orr.w	r3, r3, #4
 80024b6:	7153      	strb	r3, [r2, #5]
 80024b8:	e7e9      	b.n	800248e <ENV_Context_Init+0x72>
 80024ba:	bf00      	nop
 80024bc:	200018cc 	.word	0x200018cc
 80024c0:	20001730 	.word	0x20001730
 80024c4:	200018dc 	.word	0x200018dc
 80024c8:	2000000c 	.word	0x2000000c

080024cc <ENV_Set_Notification_Status>:
  ENV_Server_App_Context.NotificationStatus = status;
 80024cc:	4b01      	ldr	r3, [pc, #4]	; (80024d4 <ENV_Set_Notification_Status+0x8>)
 80024ce:	7018      	strb	r0, [r3, #0]
}
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	20001730 	.word	0x20001730

080024d8 <ENV_Update>:
{
 80024d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(ENV_Server_App_Context.hasPressure == 1)
 80024da:	4c9d      	ldr	r4, [pc, #628]	; (8002750 <ENV_Update+0x278>)
 80024dc:	7ba3      	ldrb	r3, [r4, #14]
 80024de:	2b01      	cmp	r3, #1
{
 80024e0:	b087      	sub	sp, #28
    if(ENV_Server_App_Context.hasPressure == 1)
 80024e2:	f000 8113 	beq.w	800270c <ENV_Update+0x234>
    if(ENV_Server_App_Context.hasHumidity == 1)
 80024e6:	7be3      	ldrb	r3, [r4, #15]
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	f000 80ed 	beq.w	80026c8 <ENV_Update+0x1f0>
    if(ENV_Server_App_Context.hasTemperature >= 1)
 80024ee:	7c26      	ldrb	r6, [r4, #16]
      if (IKS01A3_ENV_SENSOR_GetValue(i, ENV_TEMPERATURE, &temperature) == 0)
 80024f0:	ad03      	add	r5, sp, #12
    if(ENV_Server_App_Context.hasTemperature >= 1)
 80024f2:	2e00      	cmp	r6, #0
 80024f4:	d17f      	bne.n	80025f6 <ENV_Update+0x11e>
    if(ENV_Server_App_Context.hasPressure == 1)
 80024f6:	7ba0      	ldrb	r0, [r4, #14]
 80024f8:	2801      	cmp	r0, #1
 80024fa:	f000 80a3 	beq.w	8002644 <ENV_Update+0x16c>
    if(ENV_Server_App_Context.hasHumidity == 1)
 80024fe:	7be0      	ldrb	r0, [r4, #15]
 8002500:	2801      	cmp	r0, #1
 8002502:	f000 80c0 	beq.w	8002686 <ENV_Update+0x1ae>
    if(ENV_Server_App_Context.hasTemperature >= 1)
 8002506:	7c23      	ldrb	r3, [r4, #16]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d151      	bne.n	80025b0 <ENV_Update+0xd8>
  STORE_LE_16(value, (HAL_GetTick()>>3));
 800250c:	f007 ffa0 	bl	800a450 <HAL_GetTick>
 8002510:	08c0      	lsrs	r0, r0, #3
 8002512:	f88d 000c 	strb.w	r0, [sp, #12]
 8002516:	f007 ff9b 	bl	800a450 <HAL_GetTick>
  if(ENV_Server_App_Context.hasPressure == 1)
 800251a:	7ba3      	ldrb	r3, [r4, #14]
  STORE_LE_16(value, (HAL_GetTick()>>3));
 800251c:	0ac0      	lsrs	r0, r0, #11
  if(ENV_Server_App_Context.hasPressure == 1)
 800251e:	2b01      	cmp	r3, #1
  STORE_LE_16(value, (HAL_GetTick()>>3));
 8002520:	f88d 000d 	strb.w	r0, [sp, #13]
  if(ENV_Server_App_Context.hasPressure == 1)
 8002524:	d030      	beq.n	8002588 <ENV_Update+0xb0>
 8002526:	2202      	movs	r2, #2
 8002528:	4611      	mov	r1, r2
  uint8_t BuffPos = 2;
 800252a:	4613      	mov	r3, r2
 800252c:	2604      	movs	r6, #4
  if(ENV_Server_App_Context.hasHumidity == 1)
 800252e:	7be0      	ldrb	r0, [r4, #15]
 8002530:	2801      	cmp	r0, #1
 8002532:	d109      	bne.n	8002548 <ENV_Update+0x70>
    STORE_LE_16(&value[BuffPos], ENV_Server_App_Context.HumidityValue);
 8002534:	ab06      	add	r3, sp, #24
 8002536:	8920      	ldrh	r0, [r4, #8]
 8002538:	4419      	add	r1, r3
 800253a:	441a      	add	r2, r3
 800253c:	0a07      	lsrs	r7, r0, #8
 800253e:	f801 0c0c 	strb.w	r0, [r1, #-12]
    BuffPos += HUMIDITY_BYTES;
 8002542:	4633      	mov	r3, r6
    STORE_LE_16(&value[BuffPos], ENV_Server_App_Context.HumidityValue);
 8002544:	f802 7c0b 	strb.w	r7, [r2, #-11]
  for(tempIndex = 0; tempIndex < ENV_Server_App_Context.hasTemperature; tempIndex++)
 8002548:	7c22      	ldrb	r2, [r4, #16]
 800254a:	b1aa      	cbz	r2, 8002578 <ENV_Update+0xa0>
    STORE_LE_16(&value[BuffPos], ENV_Server_App_Context.TemperatureValue[tempIndex]);
 800254c:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
 8002550:	a906      	add	r1, sp, #24
 8002552:	4419      	add	r1, r3
 8002554:	1206      	asrs	r6, r0, #8
    BuffPos += TEMPERATURE_BYTES;
 8002556:	3302      	adds	r3, #2
  for(tempIndex = 0; tempIndex < ENV_Server_App_Context.hasTemperature; tempIndex++)
 8002558:	2a01      	cmp	r2, #1
    STORE_LE_16(&value[BuffPos], ENV_Server_App_Context.TemperatureValue[tempIndex]);
 800255a:	f801 6c0b 	strb.w	r6, [r1, #-11]
 800255e:	f801 0c0c 	strb.w	r0, [r1, #-12]
    BuffPos += TEMPERATURE_BYTES;
 8002562:	b2db      	uxtb	r3, r3
  for(tempIndex = 0; tempIndex < ENV_Server_App_Context.hasTemperature; tempIndex++)
 8002564:	d908      	bls.n	8002578 <ENV_Update+0xa0>
    STORE_LE_16(&value[BuffPos], ENV_Server_App_Context.TemperatureValue[tempIndex]);
 8002566:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800256a:	a906      	add	r1, sp, #24
 800256c:	440b      	add	r3, r1
 800256e:	1211      	asrs	r1, r2, #8
 8002570:	f803 2c0c 	strb.w	r2, [r3, #-12]
 8002574:	f803 1c0b 	strb.w	r1, [r3, #-11]
  MOTENV_STM_App_Update_Char(ENV_CHAR_UUID, VALUE_LEN_ENV, (uint8_t *)&value);
 8002578:	462a      	mov	r2, r5
 800257a:	210c      	movs	r1, #12
 800257c:	f44f 50e8 	mov.w	r0, #7424	; 0x1d00
 8002580:	f00a fe62 	bl	800d248 <MOTENV_STM_App_Update_Char>
}
 8002584:	b007      	add	sp, #28
 8002586:	bdf0      	pop	{r4, r5, r6, r7, pc}
    STORE_LE_32(&value[BuffPos], ENV_Server_App_Context.PressureValue);
 8002588:	6863      	ldr	r3, [r4, #4]
 800258a:	2100      	movs	r1, #0
 800258c:	121a      	asrs	r2, r3, #8
 800258e:	f363 0107 	bfi	r1, r3, #0, #8
 8002592:	f362 210f 	bfi	r1, r2, #8, #8
 8002596:	141a      	asrs	r2, r3, #16
 8002598:	f362 4117 	bfi	r1, r2, #16, #8
 800259c:	161b      	asrs	r3, r3, #24
 800259e:	f363 611f 	bfi	r1, r3, #24, #8
 80025a2:	2206      	movs	r2, #6
 80025a4:	f8cd 100e 	str.w	r1, [sp, #14]
    BuffPos += PRESSURE_BYTES;
 80025a8:	4613      	mov	r3, r2
    STORE_LE_32(&value[BuffPos], ENV_Server_App_Context.PressureValue);
 80025aa:	4611      	mov	r1, r2
 80025ac:	2608      	movs	r6, #8
 80025ae:	e7be      	b.n	800252e <ENV_Update+0x56>
      if (IKS01A3_ENV_SENSOR_GetValue(i, ENV_TEMPERATURE, &temperature) == 0)
 80025b0:	2101      	movs	r1, #1
 80025b2:	4608      	mov	r0, r1
 80025b4:	462a      	mov	r2, r5
 80025b6:	f007 f967 	bl	8009888 <IKS01A3_ENV_SENSOR_GetValue>
 80025ba:	2800      	cmp	r0, #0
 80025bc:	d1a6      	bne.n	800250c <ENV_Update+0x34>
        MCR_BLUEMS_F2I_1D(temperature, intPart, decPart);
 80025be:	eddd 7a03 	vldr	s15, [sp, #12]
 80025c2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
        ENV_Server_App_Context.TemperatureValue[tempIndex] = intPart*10+decPart;
 80025c6:	eb04 0646 	add.w	r6, r4, r6, lsl #1
        MCR_BLUEMS_F2I_1D(temperature, intPart, decPart);
 80025ca:	ee17 3a10 	vmov	r3, s14
 80025ce:	ee06 3a90 	vmov	s13, r3
 80025d2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80025d6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80025da:	ee77 7ae6 	vsub.f32	s15, s15, s13
        ENV_Server_App_Context.TemperatureValue[tempIndex] = intPart*10+decPart;
 80025de:	eb03 0383 	add.w	r3, r3, r3, lsl #2
        MCR_BLUEMS_F2I_1D(temperature, intPart, decPart);
 80025e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
        ENV_Server_App_Context.TemperatureValue[tempIndex] = intPart*10+decPart;
 80025ea:	ee17 2a90 	vmov	r2, s15
 80025ee:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80025f2:	8173      	strh	r3, [r6, #10]
 80025f4:	e78a      	b.n	800250c <ENV_Update+0x34>
      if (IKS01A3_ENV_SENSOR_GetValue(i, ENV_TEMPERATURE, &temperature) == 0)
 80025f6:	462a      	mov	r2, r5
 80025f8:	2101      	movs	r1, #1
 80025fa:	2000      	movs	r0, #0
 80025fc:	f007 f944 	bl	8009888 <IKS01A3_ENV_SENSOR_GetValue>
 8002600:	2800      	cmp	r0, #0
 8002602:	f040 80a2 	bne.w	800274a <ENV_Update+0x272>
        MCR_BLUEMS_F2I_1D(temperature, intPart, decPart);
 8002606:	eddd 7a03 	vldr	s15, [sp, #12]
    if(ENV_Server_App_Context.hasPressure == 1)
 800260a:	7ba0      	ldrb	r0, [r4, #14]
        MCR_BLUEMS_F2I_1D(temperature, intPart, decPart);
 800260c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    if(ENV_Server_App_Context.hasPressure == 1)
 8002610:	2801      	cmp	r0, #1
        MCR_BLUEMS_F2I_1D(temperature, intPart, decPart);
 8002612:	ee17 3a10 	vmov	r3, s14
 8002616:	ee06 3a90 	vmov	s13, r3
 800261a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800261e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002622:	ee77 7ae6 	vsub.f32	s15, s15, s13
        ENV_Server_App_Context.TemperatureValue[tempIndex] = intPart*10+decPart;
 8002626:	eb03 0383 	add.w	r3, r3, r3, lsl #2
        MCR_BLUEMS_F2I_1D(temperature, intPart, decPart);
 800262a:	ee67 7a87 	vmul.f32	s15, s15, s14
        tempIndex++;
 800262e:	f04f 0601 	mov.w	r6, #1
        MCR_BLUEMS_F2I_1D(temperature, intPart, decPart);
 8002632:	eefd 7ae7 	vcvt.s32.f32	s15, s15
        ENV_Server_App_Context.TemperatureValue[tempIndex] = intPart*10+decPart;
 8002636:	ee17 2a90 	vmov	r2, s15
 800263a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800263e:	8163      	strh	r3, [r4, #10]
    if(ENV_Server_App_Context.hasPressure == 1)
 8002640:	f47f af5d 	bne.w	80024fe <ENV_Update+0x26>
      if (IKS01A3_ENV_SENSOR_GetValue(i, ENV_PRESSURE, &pressure) == 0)
 8002644:	aa01      	add	r2, sp, #4
 8002646:	2102      	movs	r1, #2
 8002648:	f007 f91e 	bl	8009888 <IKS01A3_ENV_SENSOR_GetValue>
 800264c:	2800      	cmp	r0, #0
 800264e:	f47f af56 	bne.w	80024fe <ENV_Update+0x26>
        MCR_BLUEMS_F2I_2D(pressure, intPart, decPart);
 8002652:	eddd 7a01 	vldr	s15, [sp, #4]
 8002656:	eddf 6a3f 	vldr	s13, [pc, #252]	; 8002754 <ENV_Update+0x27c>
    if(ENV_Server_App_Context.hasHumidity == 1)
 800265a:	7be0      	ldrb	r0, [r4, #15]
        MCR_BLUEMS_F2I_2D(pressure, intPart, decPart);
 800265c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
        ENV_Server_App_Context.PressureValue = intPart*100+decPart;
 8002660:	2364      	movs	r3, #100	; 0x64
        MCR_BLUEMS_F2I_2D(pressure, intPart, decPart);
 8002662:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
        ENV_Server_App_Context.PressureValue = intPart*100+decPart;
 8002666:	ee17 2a10 	vmov	r2, s14
        MCR_BLUEMS_F2I_2D(pressure, intPart, decPart);
 800266a:	ee77 7ac6 	vsub.f32	s15, s15, s12
    if(ENV_Server_App_Context.hasHumidity == 1)
 800266e:	2801      	cmp	r0, #1
        MCR_BLUEMS_F2I_2D(pressure, intPart, decPart);
 8002670:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002674:	eefd 7ae7 	vcvt.s32.f32	s15, s15
        ENV_Server_App_Context.PressureValue = intPart*100+decPart;
 8002678:	ee17 1a90 	vmov	r1, s15
 800267c:	fb03 1302 	mla	r3, r3, r2, r1
 8002680:	6063      	str	r3, [r4, #4]
    if(ENV_Server_App_Context.hasHumidity == 1)
 8002682:	f47f af40 	bne.w	8002506 <ENV_Update+0x2e>
      if (IKS01A3_ENV_SENSOR_GetValue(i, ENV_HUMIDITY, &humidity) == 0)
 8002686:	aa02      	add	r2, sp, #8
 8002688:	2104      	movs	r1, #4
 800268a:	f007 f8fd 	bl	8009888 <IKS01A3_ENV_SENSOR_GetValue>
 800268e:	2800      	cmp	r0, #0
 8002690:	f47f af39 	bne.w	8002506 <ENV_Update+0x2e>
        MCR_BLUEMS_F2I_1D(humidity, intPart, decPart);
 8002694:	eddd 7a02 	vldr	s15, [sp, #8]
 8002698:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800269c:	ee17 3a10 	vmov	r3, s14
 80026a0:	ee06 3a90 	vmov	s13, r3
 80026a4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80026a8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80026ac:	ee77 7ae6 	vsub.f32	s15, s15, s13
        ENV_Server_App_Context.HumidityValue = intPart*10+decPart;
 80026b0:	eb03 0283 	add.w	r2, r3, r3, lsl #2
        MCR_BLUEMS_F2I_1D(humidity, intPart, decPart);
 80026b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026bc:	ee17 3a90 	vmov	r3, s15
        ENV_Server_App_Context.HumidityValue = intPart*10+decPart;
 80026c0:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80026c4:	8123      	strh	r3, [r4, #8]
 80026c6:	e71e      	b.n	8002506 <ENV_Update+0x2e>
      if (IKS01A3_ENV_SENSOR_GetValue(i, ENV_HUMIDITY, &humidity) == 0)
 80026c8:	aa02      	add	r2, sp, #8
 80026ca:	2104      	movs	r1, #4
 80026cc:	2000      	movs	r0, #0
 80026ce:	f007 f8db 	bl	8009888 <IKS01A3_ENV_SENSOR_GetValue>
 80026d2:	2800      	cmp	r0, #0
 80026d4:	f47f af0b 	bne.w	80024ee <ENV_Update+0x16>
        MCR_BLUEMS_F2I_1D(humidity, intPart, decPart);
 80026d8:	eddd 7a02 	vldr	s15, [sp, #8]
 80026dc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80026e0:	ee17 3a10 	vmov	r3, s14
 80026e4:	ee06 3a90 	vmov	s13, r3
 80026e8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80026ec:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80026f0:	ee77 7ae6 	vsub.f32	s15, s15, s13
        ENV_Server_App_Context.HumidityValue = intPart*10+decPart;
 80026f4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
        MCR_BLUEMS_F2I_1D(humidity, intPart, decPart);
 80026f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002700:	ee17 3a90 	vmov	r3, s15
        ENV_Server_App_Context.HumidityValue = intPart*10+decPart;
 8002704:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8002708:	8123      	strh	r3, [r4, #8]
 800270a:	e6f0      	b.n	80024ee <ENV_Update+0x16>
      if (IKS01A3_ENV_SENSOR_GetValue(i, ENV_PRESSURE, &pressure) == 0)
 800270c:	aa01      	add	r2, sp, #4
 800270e:	2102      	movs	r1, #2
 8002710:	2000      	movs	r0, #0
 8002712:	f007 f8b9 	bl	8009888 <IKS01A3_ENV_SENSOR_GetValue>
 8002716:	2800      	cmp	r0, #0
 8002718:	f47f aee5 	bne.w	80024e6 <ENV_Update+0xe>
        MCR_BLUEMS_F2I_2D(pressure, intPart, decPart);
 800271c:	eddd 7a01 	vldr	s15, [sp, #4]
 8002720:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8002754 <ENV_Update+0x27c>
 8002724:	eebd 7ae7 	vcvt.s32.f32	s14, s15
        ENV_Server_App_Context.PressureValue = intPart*100+decPart;
 8002728:	2364      	movs	r3, #100	; 0x64
        MCR_BLUEMS_F2I_2D(pressure, intPart, decPart);
 800272a:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
        ENV_Server_App_Context.PressureValue = intPart*100+decPart;
 800272e:	ee17 2a10 	vmov	r2, s14
        MCR_BLUEMS_F2I_2D(pressure, intPart, decPart);
 8002732:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8002736:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800273a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
        ENV_Server_App_Context.PressureValue = intPart*100+decPart;
 800273e:	ee17 1a90 	vmov	r1, s15
 8002742:	fb03 1302 	mla	r3, r3, r2, r1
 8002746:	6063      	str	r3, [r4, #4]
 8002748:	e6cd      	b.n	80024e6 <ENV_Update+0xe>
  uint8_t tempIndex = 0;
 800274a:	2600      	movs	r6, #0
 800274c:	e6d3      	b.n	80024f6 <ENV_Update+0x1e>
 800274e:	bf00      	nop
 8002750:	20001730 	.word	0x20001730
 8002754:	42c80000 	.word	0x42c80000

08002758 <ENV_Send_Notification_Task>:
{
 8002758:	b508      	push	{r3, lr}
  if(CONFIG_Get_FirstConnection_Config() == 1)
 800275a:	f7ff fbed 	bl	8001f38 <CONFIG_Get_FirstConnection_Config>
 800275e:	2801      	cmp	r0, #1
 8002760:	d007      	beq.n	8002772 <ENV_Send_Notification_Task+0x1a>
  if(ENV_Server_App_Context.NotificationStatus)
 8002762:	4b10      	ldr	r3, [pc, #64]	; (80027a4 <ENV_Send_Notification_Task+0x4c>)
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	b903      	cbnz	r3, 800276a <ENV_Send_Notification_Task+0x12>
}
 8002768:	bd08      	pop	{r3, pc}
 800276a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    ENV_Update();
 800276e:	f7ff beb3 	b.w	80024d8 <ENV_Update>
    CONFIG_Send_Notification(FEATURE_MASK_SENSORFUSION_SHORT, W2ST_COMMAND_CAL_STATUS, MOTIONFX_Get_MagCalStatus() ? 100: 0);
 8002772:	f001 fdd5 	bl	8004320 <MOTIONFX_Get_MagCalStatus>
 8002776:	21ff      	movs	r1, #255	; 0xff
 8002778:	2800      	cmp	r0, #0
 800277a:	bf14      	ite	ne
 800277c:	2264      	movne	r2, #100	; 0x64
 800277e:	2200      	moveq	r2, #0
 8002780:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002784:	f7ff fbde 	bl	8001f44 <CONFIG_Send_Notification>
    CONFIG_Send_Notification(FEATURE_MASK_ECOMPASS, W2ST_COMMAND_CAL_STATUS, MOTIONFX_Get_MagCalStatus() ? 100: 0);
 8002788:	f001 fdca 	bl	8004320 <MOTIONFX_Get_MagCalStatus>
 800278c:	21ff      	movs	r1, #255	; 0xff
 800278e:	2800      	cmp	r0, #0
 8002790:	bf14      	ite	ne
 8002792:	2264      	movne	r2, #100	; 0x64
 8002794:	2200      	moveq	r2, #0
 8002796:	2040      	movs	r0, #64	; 0x40
 8002798:	f7ff fbd4 	bl	8001f44 <CONFIG_Send_Notification>
    CONFIG_Set_FirstConnection_Config(0);
 800279c:	2000      	movs	r0, #0
 800279e:	f7ff fbc5 	bl	8001f2c <CONFIG_Set_FirstConnection_Config>
 80027a2:	e7de      	b.n	8002762 <ENV_Send_Notification_Task+0xa>
 80027a4:	20001730 	.word	0x20001730

080027a8 <MOTENV_IntensityDetUpdate_Timer_Callback>:
 * @param  None
 * @retval None
 */
static void MOTENV_IntensityDetUpdate_Timer_Callback(void)
{
  UTIL_SEQ_SetTask(1<<CFG_TASK_NOTIFY_INTENSITY_DET_ID, CFG_SCH_PRIO_0);
 80027a8:	2100      	movs	r1, #0
 80027aa:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80027ae:	f00b b96d 	b.w	800da8c <UTIL_SEQ_SetTask>
 80027b2:	bf00      	nop

080027b4 <MOTENV_PedometerUpdate_Timer_Callback>:
  UTIL_SEQ_SetTask(1<<CFG_TASK_NOTIFY_PEDOMETER_ID, CFG_SCH_PRIO_0);
 80027b4:	2100      	movs	r1, #0
 80027b6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80027ba:	f00b b967 	b.w	800da8c <UTIL_SEQ_SetTask>
 80027be:	bf00      	nop

080027c0 <MOTENV_GestureRecUpdate_Timer_Callback>:
  UTIL_SEQ_SetTask(1<<CFG_TASK_NOTIFY_GESTURE_REC_ID, CFG_SCH_PRIO_0);
 80027c0:	2100      	movs	r1, #0
 80027c2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80027c6:	f00b b961 	b.w	800da8c <UTIL_SEQ_SetTask>
 80027ca:	bf00      	nop

080027cc <MOTENV_CarryPositionUpdate_Timer_Callback>:
  UTIL_SEQ_SetTask(1<<CFG_TASK_NOTIFY_CARRY_POSITION_ID, CFG_SCH_PRIO_0);
 80027cc:	2100      	movs	r1, #0
 80027ce:	f44f 7000 	mov.w	r0, #512	; 0x200
 80027d2:	f00b b95b 	b.w	800da8c <UTIL_SEQ_SetTask>
 80027d6:	bf00      	nop

080027d8 <MOTENV_ActivityRecUpdate_Timer_Callback>:
  UTIL_SEQ_SetTask(1<<CFG_TASK_NOTIFY_ACTIVITY_REC_ID, CFG_SCH_PRIO_0);
 80027d8:	2100      	movs	r1, #0
 80027da:	f44f 7080 	mov.w	r0, #256	; 0x100
 80027de:	f00b b955 	b.w	800da8c <UTIL_SEQ_SetTask>
 80027e2:	bf00      	nop

080027e4 <MOTENV_ECompassUpdate_Timer_Callback>:
  UTIL_SEQ_SetTask(1<<CFG_TASK_NOTIFY_ECOMPASS_ID, CFG_SCH_PRIO_0);
 80027e4:	2100      	movs	r1, #0
 80027e6:	2080      	movs	r0, #128	; 0x80
 80027e8:	f00b b950 	b.w	800da8c <UTIL_SEQ_SetTask>

080027ec <MOTENV_MotionFxUpdate_Timer_Callback>:
  UTIL_SEQ_SetTask(1<<CFG_TASK_NOTIFY_MOTIONFX_ID, CFG_SCH_PRIO_0);
 80027ec:	2100      	movs	r1, #0
 80027ee:	2040      	movs	r0, #64	; 0x40
 80027f0:	f00b b94c 	b.w	800da8c <UTIL_SEQ_SetTask>

080027f4 <MOTENV_EnvUpdate_Timer_Callback>:
  UTIL_SEQ_SetTask(1<<CFG_TASK_NOTIFY_ENVIRONMENT_ID, CFG_SCH_PRIO_0);
 80027f4:	2100      	movs	r1, #0
 80027f6:	2020      	movs	r0, #32
 80027f8:	f00b b948 	b.w	800da8c <UTIL_SEQ_SetTask>

080027fc <MOTENV_AccGyroMagUpdate_Timer_Callback>:
  UTIL_SEQ_SetTask(1<<CFG_TASK_NOTIFY_ACC_GYRO_MAG_ID, CFG_SCH_PRIO_0);
 80027fc:	2100      	movs	r1, #0
 80027fe:	2010      	movs	r0, #16
 8002800:	f00b b944 	b.w	800da8c <UTIL_SEQ_SetTask>

08002804 <MOTENV_STM_App_Notification>:
{
 8002804:	b508      	push	{r3, lr}
  switch(pNotification->Motenv_Evt_Opcode)
 8002806:	7803      	ldrb	r3, [r0, #0]
 8002808:	2b22      	cmp	r3, #34	; 0x22
 800280a:	f200 8125 	bhi.w	8002a58 <MOTENV_STM_App_Notification+0x254>
 800280e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002812:	0119      	.short	0x0119
 8002814:	01050110 	.word	0x01050110
 8002818:	00f800fc 	.word	0x00f800fc
 800281c:	00ee00f3 	.word	0x00ee00f3
 8002820:	00e000ea 	.word	0x00e000ea
 8002824:	00cd00d7 	.word	0x00cd00d7
 8002828:	00ba00c4 	.word	0x00ba00c4
 800282c:	00ad00b1 	.word	0x00ad00b1
 8002830:	009a00a3 	.word	0x009a00a3
 8002834:	008c0096 	.word	0x008c0096
 8002838:	007f0083 	.word	0x007f0083
 800283c:	006c0075 	.word	0x006c0075
 8002840:	005e0068 	.word	0x005e0068
 8002844:	004d0055 	.word	0x004d0055
 8002848:	003f0045 	.word	0x003f0045
 800284c:	0035003a 	.word	0x0035003a
 8002850:	002b0030 	.word	0x002b0030
 8002854:	00230027 	.word	0x00230027
}
 8002858:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      CONSOLE_Stderr_Update_AfterRead();
 800285c:	f7ff bdd2 	b.w	8002404 <CONSOLE_Stderr_Update_AfterRead>
}
 8002860:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      CONSOLE_Term_Update_AfterRead();
 8002864:	f7ff bdc2 	b.w	80023ec <CONSOLE_Term_Update_AfterRead>
      CONSOLE_Set_Stderr_Notification_Status(0);
 8002868:	2000      	movs	r0, #0
}
 800286a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      CONSOLE_Set_Stderr_Notification_Status(0);
 800286e:	f7ff bdb7 	b.w	80023e0 <CONSOLE_Set_Stderr_Notification_Status>
      CONSOLE_Set_Stderr_Notification_Status(1);
 8002872:	2001      	movs	r0, #1
}
 8002874:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      CONSOLE_Set_Stderr_Notification_Status(1);
 8002878:	f7ff bdb2 	b.w	80023e0 <CONSOLE_Set_Stderr_Notification_Status>
      CONSOLE_Set_Term_Notification_Status(0);
 800287c:	2000      	movs	r0, #0
}
 800287e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      CONSOLE_Set_Term_Notification_Status(0);
 8002882:	f7ff bda7 	b.w	80023d4 <CONSOLE_Set_Term_Notification_Status>
      CONSOLE_Set_Term_Notification_Status(1);
 8002886:	2001      	movs	r0, #1
}
 8002888:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      CONSOLE_Set_Term_Notification_Status(1);
 800288c:	f7ff bda2 	b.w	80023d4 <CONSOLE_Set_Term_Notification_Status>
      CONFIG_Parse_Command(pNotification->DataTransfered.pPayload, pNotification->DataTransfered.Length);
 8002890:	7a01      	ldrb	r1, [r0, #8]
 8002892:	6840      	ldr	r0, [r0, #4]
}
 8002894:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      CONFIG_Parse_Command(pNotification->DataTransfered.pPayload, pNotification->DataTransfered.Length);
 8002898:	f7ff bb82 	b.w	8001fa0 <CONFIG_Parse_Command>
      CONFIG_Set_Notification_Status(0);
 800289c:	2000      	movs	r0, #0
 800289e:	f7ff fb3f 	bl	8001f20 <CONFIG_Set_Notification_Status>
      CONFIG_Set_FirstConnection_Config(0);
 80028a2:	2000      	movs	r0, #0
}
 80028a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      CONFIG_Set_FirstConnection_Config(0);
 80028a8:	f7ff bb40 	b.w	8001f2c <CONFIG_Set_FirstConnection_Config>
      CONFIG_Set_Notification_Status(1);
 80028ac:	2001      	movs	r0, #1
 80028ae:	f7ff fb37 	bl	8001f20 <CONFIG_Set_Notification_Status>
      CONFIG_Set_FirstConnection_Config(1);
 80028b2:	2001      	movs	r0, #1
}
 80028b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      CONFIG_Set_FirstConnection_Config(1);
 80028b8:	f7ff bb38 	b.w	8001f2c <CONFIG_Set_FirstConnection_Config>
      MOTIONID_Set_Notification_Status(0);
 80028bc:	2000      	movs	r0, #0
 80028be:	f001 fe1b 	bl	80044f8 <MOTIONID_Set_Notification_Status>
      HW_TS_Stop(MOTENV_Server_App_Context.IntensityDet_Update_Timer_Id);
 80028c2:	4b66      	ldr	r3, [pc, #408]	; (8002a5c <MOTENV_STM_App_Notification+0x258>)
 80028c4:	7a18      	ldrb	r0, [r3, #8]
}
 80028c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      HW_TS_Stop(MOTENV_Server_App_Context.IntensityDet_Update_Timer_Id);
 80028ca:	f7fe bbd1 	b.w	8001070 <HW_TS_Stop>
      MOTIONID_Set_Notification_Status(1);
 80028ce:	2001      	movs	r0, #1
 80028d0:	f001 fe12 	bl	80044f8 <MOTIONID_Set_Notification_Status>
      HW_TS_Start(MOTENV_Server_App_Context.IntensityDet_Update_Timer_Id, INTENSITY_DET_UPDATE_PERIOD);
 80028d4:	4b61      	ldr	r3, [pc, #388]	; (8002a5c <MOTENV_STM_App_Notification+0x258>)
 80028d6:	2180      	movs	r1, #128	; 0x80
 80028d8:	7a18      	ldrb	r0, [r3, #8]
}
 80028da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      HW_TS_Start(MOTENV_Server_App_Context.IntensityDet_Update_Timer_Id, INTENSITY_DET_UPDATE_PERIOD);
 80028de:	f7fe bc4d 	b.w	800117c <HW_TS_Start>
}
 80028e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      MOTIONPM_Pedometer_Update();
 80028e6:	f001 bf17 	b.w	8004718 <MOTIONPM_Pedometer_Update>
      MOTIONPM_Set_Notification_Status(0);
 80028ea:	2000      	movs	r0, #0
 80028ec:	f001 fe9a 	bl	8004624 <MOTIONPM_Set_Notification_Status>
      HW_TS_Stop(MOTENV_Server_App_Context.Pedometer_Update_Timer_Id);
 80028f0:	4b5a      	ldr	r3, [pc, #360]	; (8002a5c <MOTENV_STM_App_Notification+0x258>)
 80028f2:	79d8      	ldrb	r0, [r3, #7]
}
 80028f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      HW_TS_Stop(MOTENV_Server_App_Context.Pedometer_Update_Timer_Id);
 80028f8:	f7fe bbba 	b.w	8001070 <HW_TS_Stop>
      MOTIONPM_Set_Notification_Status(1);
 80028fc:	2001      	movs	r0, #1
 80028fe:	f001 fe91 	bl	8004624 <MOTIONPM_Set_Notification_Status>
      HW_TS_Start(MOTENV_Server_App_Context.Pedometer_Update_Timer_Id, PEDOMETER_UPDATE_PERIOD);
 8002902:	4b56      	ldr	r3, [pc, #344]	; (8002a5c <MOTENV_STM_App_Notification+0x258>)
 8002904:	2128      	movs	r1, #40	; 0x28
 8002906:	79d8      	ldrb	r0, [r3, #7]
}
 8002908:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      HW_TS_Start(MOTENV_Server_App_Context.Pedometer_Update_Timer_Id, PEDOMETER_UPDATE_PERIOD);
 800290c:	f7fe bc36 	b.w	800117c <HW_TS_Start>
}
 8002910:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      MOTIONGR_GestureRec_Update();
 8002914:	f001 bdac 	b.w	8004470 <MOTIONGR_GestureRec_Update>
      MOTIONGR_Set_Notification_Status(0);
 8002918:	2000      	movs	r0, #0
 800291a:	f001 fd4b 	bl	80043b4 <MOTIONGR_Set_Notification_Status>
      HW_TS_Stop(MOTENV_Server_App_Context.GestureRec_Update_Timer_Id);
 800291e:	4b4f      	ldr	r3, [pc, #316]	; (8002a5c <MOTENV_STM_App_Notification+0x258>)
 8002920:	7998      	ldrb	r0, [r3, #6]
}
 8002922:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      HW_TS_Stop(MOTENV_Server_App_Context.GestureRec_Update_Timer_Id);
 8002926:	f7fe bba3 	b.w	8001070 <HW_TS_Stop>
      MOTIONGR_Set_Notification_Status(1);
 800292a:	2001      	movs	r0, #1
 800292c:	f001 fd42 	bl	80043b4 <MOTIONGR_Set_Notification_Status>
      HW_TS_Start(MOTENV_Server_App_Context.GestureRec_Update_Timer_Id, GESTURE_REC_UPDATE_PERIOD);
 8002930:	4b4a      	ldr	r3, [pc, #296]	; (8002a5c <MOTENV_STM_App_Notification+0x258>)
 8002932:	2128      	movs	r1, #40	; 0x28
 8002934:	7998      	ldrb	r0, [r3, #6]
}
 8002936:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      HW_TS_Start(MOTENV_Server_App_Context.GestureRec_Update_Timer_Id, GESTURE_REC_UPDATE_PERIOD);
 800293a:	f7fe bc1f 	b.w	800117c <HW_TS_Start>
}
 800293e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      MOTIONCP_CarryPosition_Update();
 8002942:	f001 b953 	b.w	8003bec <MOTIONCP_CarryPosition_Update>
      MOTIONCP_Set_Notification_Status(0);
 8002946:	2000      	movs	r0, #0
 8002948:	f001 f8f2 	bl	8003b30 <MOTIONCP_Set_Notification_Status>
      HW_TS_Stop(MOTENV_Server_App_Context.CarryPosition_Update_Timer_Id);
 800294c:	4b43      	ldr	r3, [pc, #268]	; (8002a5c <MOTENV_STM_App_Notification+0x258>)
 800294e:	7958      	ldrb	r0, [r3, #5]
}
 8002950:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      HW_TS_Stop(MOTENV_Server_App_Context.CarryPosition_Update_Timer_Id);
 8002954:	f7fe bb8c 	b.w	8001070 <HW_TS_Stop>
      MOTIONCP_Set_Notification_Status(1);
 8002958:	2001      	movs	r0, #1
 800295a:	f001 f8e9 	bl	8003b30 <MOTIONCP_Set_Notification_Status>
      HW_TS_Start(MOTENV_Server_App_Context.CarryPosition_Update_Timer_Id, CARRY_POSITION_UPDATE_PERIOD);
 800295e:	4b3f      	ldr	r3, [pc, #252]	; (8002a5c <MOTENV_STM_App_Notification+0x258>)
 8002960:	2128      	movs	r1, #40	; 0x28
 8002962:	7958      	ldrb	r0, [r3, #5]
}
 8002964:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      HW_TS_Start(MOTENV_Server_App_Context.CarryPosition_Update_Timer_Id, CARRY_POSITION_UPDATE_PERIOD);
 8002968:	f7fe bc08 	b.w	800117c <HW_TS_Start>
}
 800296c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      MOTIONAR_ActivityRec_Update();
 8002970:	f001 b89a 	b.w	8003aa8 <MOTIONAR_ActivityRec_Update>
      MOTIONAR_Set_Notification_Status(0);
 8002974:	2000      	movs	r0, #0
 8002976:	f001 f835 	bl	80039e4 <MOTIONAR_Set_Notification_Status>
      HW_TS_Stop(MOTENV_Server_App_Context.ActivityRec_Update_Timer_Id);
 800297a:	4b38      	ldr	r3, [pc, #224]	; (8002a5c <MOTENV_STM_App_Notification+0x258>)
 800297c:	7918      	ldrb	r0, [r3, #4]
}
 800297e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      HW_TS_Stop(MOTENV_Server_App_Context.ActivityRec_Update_Timer_Id);
 8002982:	f7fe bb75 	b.w	8001070 <HW_TS_Stop>
      MOTIONAR_Set_Notification_Status(1);
 8002986:	2001      	movs	r0, #1
 8002988:	f001 f82c 	bl	80039e4 <MOTIONAR_Set_Notification_Status>
      HW_TS_Start(MOTENV_Server_App_Context.ActivityRec_Update_Timer_Id, ACTIVITY_REC_UPDATE_PERIOD);
 800298c:	4b33      	ldr	r3, [pc, #204]	; (8002a5c <MOTENV_STM_App_Notification+0x258>)
 800298e:	2180      	movs	r1, #128	; 0x80
 8002990:	7918      	ldrb	r0, [r3, #4]
}
 8002992:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      HW_TS_Start(MOTENV_Server_App_Context.ActivityRec_Update_Timer_Id, ACTIVITY_REC_UPDATE_PERIOD);
 8002996:	f7fe bbf1 	b.w	800117c <HW_TS_Start>
      MOTIONFX_Set_ECompass_Notification_Status(0);
 800299a:	2000      	movs	r0, #0
 800299c:	f001 f9de 	bl	8003d5c <MOTIONFX_Set_ECompass_Notification_Status>
      HW_TS_Stop(MOTENV_Server_App_Context.ECompass_Update_Timer_Id);
 80029a0:	4b2e      	ldr	r3, [pc, #184]	; (8002a5c <MOTENV_STM_App_Notification+0x258>)
 80029a2:	78d8      	ldrb	r0, [r3, #3]
}
 80029a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      HW_TS_Stop(MOTENV_Server_App_Context.ECompass_Update_Timer_Id);
 80029a8:	f7fe bb62 	b.w	8001070 <HW_TS_Stop>
      MOTIONFX_Set_ECompass_Notification_Status(1);
 80029ac:	2001      	movs	r0, #1
 80029ae:	f001 f9d5 	bl	8003d5c <MOTIONFX_Set_ECompass_Notification_Status>
      HW_TS_Start(MOTENV_Server_App_Context.ECompass_Update_Timer_Id, ECOMPASS_UPDATE_PERIOD);
 80029b2:	4b2a      	ldr	r3, [pc, #168]	; (8002a5c <MOTENV_STM_App_Notification+0x258>)
 80029b4:	2114      	movs	r1, #20
 80029b6:	78d8      	ldrb	r0, [r3, #3]
}
 80029b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      HW_TS_Start(MOTENV_Server_App_Context.ECompass_Update_Timer_Id, ECOMPASS_UPDATE_PERIOD);
 80029bc:	f7fe bbde 	b.w	800117c <HW_TS_Start>
      MOTIONFX_Set_Quat_Notification_Status(0);
 80029c0:	2000      	movs	r0, #0
 80029c2:	f001 f9c5 	bl	8003d50 <MOTIONFX_Set_Quat_Notification_Status>
      HW_TS_Stop(MOTENV_Server_App_Context.MotionFx_Update_Timer_Id);
 80029c6:	4b25      	ldr	r3, [pc, #148]	; (8002a5c <MOTENV_STM_App_Notification+0x258>)
 80029c8:	7898      	ldrb	r0, [r3, #2]
}
 80029ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      HW_TS_Stop(MOTENV_Server_App_Context.MotionFx_Update_Timer_Id);
 80029ce:	f7fe bb4f 	b.w	8001070 <HW_TS_Stop>
      MOTIONFX_Set_Quat_Notification_Status(1);
 80029d2:	2001      	movs	r0, #1
 80029d4:	f001 f9bc 	bl	8003d50 <MOTIONFX_Set_Quat_Notification_Status>
      HW_TS_Start(MOTENV_Server_App_Context.MotionFx_Update_Timer_Id, MOTIONFX_UPDATE_PERIOD);
 80029d8:	4b20      	ldr	r3, [pc, #128]	; (8002a5c <MOTENV_STM_App_Notification+0x258>)
 80029da:	2114      	movs	r1, #20
 80029dc:	7898      	ldrb	r0, [r3, #2]
}
 80029de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      HW_TS_Start(MOTENV_Server_App_Context.MotionFx_Update_Timer_Id, MOTIONFX_UPDATE_PERIOD);
 80029e2:	f7fe bbcb 	b.w	800117c <HW_TS_Start>
}
 80029e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      MOTION_EXT_ReadCB();
 80029ea:	f000 bc53 	b.w	8003294 <MOTION_EXT_ReadCB>
      MOTION_EXT_Set_Notification_Status(0);
 80029ee:	2000      	movs	r0, #0
}
 80029f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      MOTION_EXT_Set_Notification_Status(0);
 80029f4:	f000 babe 	b.w	8002f74 <MOTION_EXT_Set_Notification_Status>
      MOTION_EXT_Set_Notification_Status(1);
 80029f8:	2001      	movs	r0, #1
}
 80029fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      MOTION_EXT_Set_Notification_Status(1);
 80029fe:	f000 bab9 	b.w	8002f74 <MOTION_EXT_Set_Notification_Status>
}
 8002a02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      ENV_Update();
 8002a06:	f7ff bd67 	b.w	80024d8 <ENV_Update>
      ENV_Set_Notification_Status(0);
 8002a0a:	2000      	movs	r0, #0
 8002a0c:	f7ff fd5e 	bl	80024cc <ENV_Set_Notification_Status>
      HW_TS_Stop(MOTENV_Server_App_Context.Env_Update_Timer_Id);
 8002a10:	4b12      	ldr	r3, [pc, #72]	; (8002a5c <MOTENV_STM_App_Notification+0x258>)
 8002a12:	7858      	ldrb	r0, [r3, #1]
}
 8002a14:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      HW_TS_Stop(MOTENV_Server_App_Context.Env_Update_Timer_Id);
 8002a18:	f7fe bb2a 	b.w	8001070 <HW_TS_Stop>
      ENV_Set_Notification_Status(1);
 8002a1c:	2001      	movs	r0, #1
 8002a1e:	f7ff fd55 	bl	80024cc <ENV_Set_Notification_Status>
      HW_TS_Start(MOTENV_Server_App_Context.Env_Update_Timer_Id, ENVIRONMENT_UPDATE_PERIOD);
 8002a22:	4b0e      	ldr	r3, [pc, #56]	; (8002a5c <MOTENV_STM_App_Notification+0x258>)
 8002a24:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a28:	7858      	ldrb	r0, [r3, #1]
}
 8002a2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      HW_TS_Start(MOTENV_Server_App_Context.Env_Update_Timer_Id, ENVIRONMENT_UPDATE_PERIOD);
 8002a2e:	f7fe bba5 	b.w	800117c <HW_TS_Start>
      MOTION_Set_Notification_Status(0);
 8002a32:	2000      	movs	r0, #0
 8002a34:	f000 fe76 	bl	8003724 <MOTION_Set_Notification_Status>
      HW_TS_Stop(MOTENV_Server_App_Context.AccGyroMag_Update_Timer_Id);
 8002a38:	4b08      	ldr	r3, [pc, #32]	; (8002a5c <MOTENV_STM_App_Notification+0x258>)
 8002a3a:	7818      	ldrb	r0, [r3, #0]
}
 8002a3c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      HW_TS_Stop(MOTENV_Server_App_Context.AccGyroMag_Update_Timer_Id);
 8002a40:	f7fe bb16 	b.w	8001070 <HW_TS_Stop>
      MOTION_Set_Notification_Status(1);
 8002a44:	2001      	movs	r0, #1
 8002a46:	f000 fe6d 	bl	8003724 <MOTION_Set_Notification_Status>
      HW_TS_Start(MOTENV_Server_App_Context.AccGyroMag_Update_Timer_Id, ACC_GYRO_MAG_UPDATE_PERIOD);
 8002a4a:	4b04      	ldr	r3, [pc, #16]	; (8002a5c <MOTENV_STM_App_Notification+0x258>)
 8002a4c:	2166      	movs	r1, #102	; 0x66
 8002a4e:	7818      	ldrb	r0, [r3, #0]
}
 8002a50:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      HW_TS_Start(MOTENV_Server_App_Context.AccGyroMag_Update_Timer_Id, ACC_GYRO_MAG_UPDATE_PERIOD);
 8002a54:	f7fe bb92 	b.w	800117c <HW_TS_Start>
}
 8002a58:	bd08      	pop	{r3, pc}
 8002a5a:	bf00      	nop
 8002a5c:	20001744 	.word	0x20001744

08002a60 <MOTENV_APP_HandleDisconnection>:
{
 8002a60:	b510      	push	{r4, lr}
  HW_TS_Stop(MOTENV_Server_App_Context.Env_Update_Timer_Id);
 8002a62:	4c1c      	ldr	r4, [pc, #112]	; (8002ad4 <MOTENV_APP_HandleDisconnection+0x74>)
  ENV_Set_Notification_Status(0);
 8002a64:	2000      	movs	r0, #0
 8002a66:	f7ff fd31 	bl	80024cc <ENV_Set_Notification_Status>
  HW_TS_Stop(MOTENV_Server_App_Context.Env_Update_Timer_Id);
 8002a6a:	7860      	ldrb	r0, [r4, #1]
 8002a6c:	f7fe fb00 	bl	8001070 <HW_TS_Stop>
  MOTION_Set_Notification_Status(0);
 8002a70:	2000      	movs	r0, #0
 8002a72:	f000 fe57 	bl	8003724 <MOTION_Set_Notification_Status>
  HW_TS_Stop(MOTENV_Server_App_Context.AccGyroMag_Update_Timer_Id);
 8002a76:	7820      	ldrb	r0, [r4, #0]
 8002a78:	f7fe fafa 	bl	8001070 <HW_TS_Stop>
  MOTIONFX_Set_Quat_Notification_Status(0);
 8002a7c:	2000      	movs	r0, #0
 8002a7e:	f001 f967 	bl	8003d50 <MOTIONFX_Set_Quat_Notification_Status>
  HW_TS_Stop(MOTENV_Server_App_Context.MotionFx_Update_Timer_Id);
 8002a82:	78a0      	ldrb	r0, [r4, #2]
 8002a84:	f7fe faf4 	bl	8001070 <HW_TS_Stop>
  MOTIONFX_Set_ECompass_Notification_Status(0);
 8002a88:	2000      	movs	r0, #0
 8002a8a:	f001 f967 	bl	8003d5c <MOTIONFX_Set_ECompass_Notification_Status>
  HW_TS_Stop(MOTENV_Server_App_Context.ECompass_Update_Timer_Id);
 8002a8e:	78e0      	ldrb	r0, [r4, #3]
 8002a90:	f7fe faee 	bl	8001070 <HW_TS_Stop>
  MOTIONAR_Set_Notification_Status(0);
 8002a94:	2000      	movs	r0, #0
 8002a96:	f000 ffa5 	bl	80039e4 <MOTIONAR_Set_Notification_Status>
  HW_TS_Stop(MOTENV_Server_App_Context.ActivityRec_Update_Timer_Id);
 8002a9a:	7920      	ldrb	r0, [r4, #4]
 8002a9c:	f7fe fae8 	bl	8001070 <HW_TS_Stop>
  MOTIONCP_Set_Notification_Status(0);
 8002aa0:	2000      	movs	r0, #0
 8002aa2:	f001 f845 	bl	8003b30 <MOTIONCP_Set_Notification_Status>
  HW_TS_Stop(MOTENV_Server_App_Context.CarryPosition_Update_Timer_Id);
 8002aa6:	7960      	ldrb	r0, [r4, #5]
 8002aa8:	f7fe fae2 	bl	8001070 <HW_TS_Stop>
  MOTIONGR_Set_Notification_Status(0);
 8002aac:	2000      	movs	r0, #0
 8002aae:	f001 fc81 	bl	80043b4 <MOTIONGR_Set_Notification_Status>
  HW_TS_Stop(MOTENV_Server_App_Context.GestureRec_Update_Timer_Id);
 8002ab2:	79a0      	ldrb	r0, [r4, #6]
 8002ab4:	f7fe fadc 	bl	8001070 <HW_TS_Stop>
  MOTIONPM_Set_Notification_Status(0);
 8002ab8:	2000      	movs	r0, #0
 8002aba:	f001 fdb3 	bl	8004624 <MOTIONPM_Set_Notification_Status>
  HW_TS_Stop(MOTENV_Server_App_Context.Pedometer_Update_Timer_Id);
 8002abe:	79e0      	ldrb	r0, [r4, #7]
 8002ac0:	f7fe fad6 	bl	8001070 <HW_TS_Stop>
  MOTIONID_Set_Notification_Status(0);
 8002ac4:	2000      	movs	r0, #0
 8002ac6:	f001 fd17 	bl	80044f8 <MOTIONID_Set_Notification_Status>
  HW_TS_Stop(MOTENV_Server_App_Context.IntensityDet_Update_Timer_Id);
 8002aca:	7a20      	ldrb	r0, [r4, #8]
}
 8002acc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HW_TS_Stop(MOTENV_Server_App_Context.IntensityDet_Update_Timer_Id);
 8002ad0:	f7fe bace 	b.w	8001070 <HW_TS_Stop>
 8002ad4:	20001744 	.word	0x20001744

08002ad8 <MOTENV_APP_Init>:
{
 8002ad8:	b510      	push	{r4, lr}
  HW_TS_Create(CFG_TIM_PROC_ID_ISR,
 8002ada:	4c43      	ldr	r4, [pc, #268]	; (8002be8 <MOTENV_APP_Init+0x110>)
  UTIL_SEQ_RegTask( 1<<CFG_TASK_NOTIFY_ACC_GYRO_MAG_ID, UTIL_SEQ_RFU, MOTION_Send_Notification_Task);
 8002adc:	4a43      	ldr	r2, [pc, #268]	; (8002bec <MOTENV_APP_Init+0x114>)
 8002ade:	2100      	movs	r1, #0
 8002ae0:	2010      	movs	r0, #16
 8002ae2:	f00a ffc3 	bl	800da6c <UTIL_SEQ_RegTask>
  HW_TS_Create(CFG_TIM_PROC_ID_ISR,
 8002ae6:	4621      	mov	r1, r4
 8002ae8:	4b41      	ldr	r3, [pc, #260]	; (8002bf0 <MOTENV_APP_Init+0x118>)
 8002aea:	2201      	movs	r2, #1
 8002aec:	2000      	movs	r0, #0
 8002aee:	f7fe fa67 	bl	8000fc0 <HW_TS_Create>
  UTIL_SEQ_RegTask( 1<<CFG_TASK_NOTIFY_ENVIRONMENT_ID, UTIL_SEQ_RFU, ENV_Send_Notification_Task);
 8002af2:	4a40      	ldr	r2, [pc, #256]	; (8002bf4 <MOTENV_APP_Init+0x11c>)
 8002af4:	2100      	movs	r1, #0
 8002af6:	2020      	movs	r0, #32
 8002af8:	f00a ffb8 	bl	800da6c <UTIL_SEQ_RegTask>
  HW_TS_Create(CFG_TIM_PROC_ID_ISR,
 8002afc:	1c61      	adds	r1, r4, #1
 8002afe:	4b3e      	ldr	r3, [pc, #248]	; (8002bf8 <MOTENV_APP_Init+0x120>)
 8002b00:	2201      	movs	r2, #1
 8002b02:	2000      	movs	r0, #0
 8002b04:	f7fe fa5c 	bl	8000fc0 <HW_TS_Create>
  UTIL_SEQ_RegTask( 1<<CFG_TASK_NOTIFY_MOTIONFX_ID, UTIL_SEQ_RFU, MOTIONFX_Send_Quat_Notification_Task);
 8002b08:	4a3c      	ldr	r2, [pc, #240]	; (8002bfc <MOTENV_APP_Init+0x124>)
 8002b0a:	2100      	movs	r1, #0
 8002b0c:	2040      	movs	r0, #64	; 0x40
 8002b0e:	f00a ffad 	bl	800da6c <UTIL_SEQ_RegTask>
  HW_TS_Create(CFG_TIM_PROC_ID_ISR,
 8002b12:	1ca1      	adds	r1, r4, #2
 8002b14:	4b3a      	ldr	r3, [pc, #232]	; (8002c00 <MOTENV_APP_Init+0x128>)
 8002b16:	2201      	movs	r2, #1
 8002b18:	2000      	movs	r0, #0
 8002b1a:	f7fe fa51 	bl	8000fc0 <HW_TS_Create>
  UTIL_SEQ_RegTask( 1<<CFG_TASK_NOTIFY_ECOMPASS_ID, UTIL_SEQ_RFU, MOTIONFX_Send_ECompass_Notification_Task);
 8002b1e:	4a39      	ldr	r2, [pc, #228]	; (8002c04 <MOTENV_APP_Init+0x12c>)
 8002b20:	2100      	movs	r1, #0
 8002b22:	2080      	movs	r0, #128	; 0x80
 8002b24:	f00a ffa2 	bl	800da6c <UTIL_SEQ_RegTask>
  HW_TS_Create(CFG_TIM_PROC_ID_ISR,
 8002b28:	1ce1      	adds	r1, r4, #3
 8002b2a:	4b37      	ldr	r3, [pc, #220]	; (8002c08 <MOTENV_APP_Init+0x130>)
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	2000      	movs	r0, #0
 8002b30:	f7fe fa46 	bl	8000fc0 <HW_TS_Create>
  UTIL_SEQ_RegTask( 1<<CFG_TASK_NOTIFY_ACTIVITY_REC_ID, UTIL_SEQ_RFU, MOTIONAR_Send_Notification_Task);
 8002b34:	4a35      	ldr	r2, [pc, #212]	; (8002c0c <MOTENV_APP_Init+0x134>)
 8002b36:	2100      	movs	r1, #0
 8002b38:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002b3c:	f00a ff96 	bl	800da6c <UTIL_SEQ_RegTask>
  HW_TS_Create(CFG_TIM_PROC_ID_ISR,
 8002b40:	1d21      	adds	r1, r4, #4
 8002b42:	4b33      	ldr	r3, [pc, #204]	; (8002c10 <MOTENV_APP_Init+0x138>)
 8002b44:	2201      	movs	r2, #1
 8002b46:	2000      	movs	r0, #0
 8002b48:	f7fe fa3a 	bl	8000fc0 <HW_TS_Create>
  UTIL_SEQ_RegTask( 1<<CFG_TASK_NOTIFY_CARRY_POSITION_ID, UTIL_SEQ_RFU, MOTIONCP_Send_Notification_Task);
 8002b4c:	4a31      	ldr	r2, [pc, #196]	; (8002c14 <MOTENV_APP_Init+0x13c>)
 8002b4e:	2100      	movs	r1, #0
 8002b50:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002b54:	f00a ff8a 	bl	800da6c <UTIL_SEQ_RegTask>
  HW_TS_Create(CFG_TIM_PROC_ID_ISR,
 8002b58:	1d61      	adds	r1, r4, #5
 8002b5a:	4b2f      	ldr	r3, [pc, #188]	; (8002c18 <MOTENV_APP_Init+0x140>)
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	2000      	movs	r0, #0
 8002b60:	f7fe fa2e 	bl	8000fc0 <HW_TS_Create>
  UTIL_SEQ_RegTask( 1<<CFG_TASK_NOTIFY_GESTURE_REC_ID, UTIL_SEQ_RFU, MOTIONGR_Send_Notification_Task);
 8002b64:	4a2d      	ldr	r2, [pc, #180]	; (8002c1c <MOTENV_APP_Init+0x144>)
 8002b66:	2100      	movs	r1, #0
 8002b68:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002b6c:	f00a ff7e 	bl	800da6c <UTIL_SEQ_RegTask>
  HW_TS_Create(CFG_TIM_PROC_ID_ISR,
 8002b70:	1da1      	adds	r1, r4, #6
 8002b72:	4b2b      	ldr	r3, [pc, #172]	; (8002c20 <MOTENV_APP_Init+0x148>)
 8002b74:	2201      	movs	r2, #1
 8002b76:	2000      	movs	r0, #0
 8002b78:	f7fe fa22 	bl	8000fc0 <HW_TS_Create>
  UTIL_SEQ_RegTask( 1<<CFG_TASK_NOTIFY_PEDOMETER_ID, UTIL_SEQ_RFU, MOTIONPM_Send_Notification_Task);
 8002b7c:	4a29      	ldr	r2, [pc, #164]	; (8002c24 <MOTENV_APP_Init+0x14c>)
 8002b7e:	2100      	movs	r1, #0
 8002b80:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002b84:	f00a ff72 	bl	800da6c <UTIL_SEQ_RegTask>
  HW_TS_Create(CFG_TIM_PROC_ID_ISR,
 8002b88:	1de1      	adds	r1, r4, #7
 8002b8a:	4b27      	ldr	r3, [pc, #156]	; (8002c28 <MOTENV_APP_Init+0x150>)
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	2000      	movs	r0, #0
 8002b90:	f7fe fa16 	bl	8000fc0 <HW_TS_Create>
  UTIL_SEQ_RegTask( 1<<CFG_TASK_NOTIFY_INTENSITY_DET_ID, UTIL_SEQ_RFU, MOTIONID_Send_Notification_Task);
 8002b94:	4a25      	ldr	r2, [pc, #148]	; (8002c2c <MOTENV_APP_Init+0x154>)
 8002b96:	2100      	movs	r1, #0
 8002b98:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002b9c:	f00a ff66 	bl	800da6c <UTIL_SEQ_RegTask>
  HW_TS_Create(CFG_TIM_PROC_ID_ISR,
 8002ba0:	4b23      	ldr	r3, [pc, #140]	; (8002c30 <MOTENV_APP_Init+0x158>)
 8002ba2:	f104 0108 	add.w	r1, r4, #8
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	2000      	movs	r0, #0
 8002baa:	f7fe fa09 	bl	8000fc0 <HW_TS_Create>
  UTIL_SEQ_RegTask( 1<<CFG_TASK_HANDLE_MEMS_IT_ID, UTIL_SEQ_RFU, MOTION_EXT_Handle_IT);
 8002bae:	4a21      	ldr	r2, [pc, #132]	; (8002c34 <MOTENV_APP_Init+0x15c>)
 8002bb0:	2100      	movs	r1, #0
 8002bb2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002bb6:	f00a ff59 	bl	800da6c <UTIL_SEQ_RegTask>
 * @retval None
 */
static void MOTENV_APP_context_Init(void)
{
  /* Init ENV context */
  ENV_Context_Init();
 8002bba:	f7ff fc2f 	bl	800241c <ENV_Context_Init>

  /* Init MOTION Context */
  MOTION_Context_Init();
 8002bbe:	f000 fd5f 	bl	8003680 <MOTION_Context_Init>

  /* Init MOTION Context */
  MOTION_EXT_Context_Init();
 8002bc2:	f000 f929 	bl	8002e18 <MOTION_EXT_Context_Init>

  /* Init MOTIONFX Context */
  MOTIONFX_Context_Init();
 8002bc6:	f001 f87b 	bl	8003cc0 <MOTIONFX_Context_Init>

  /* Init MOTIONAR Context */
  MOTIONAR_Context_Init();
 8002bca:	f000 fee1 	bl	8003990 <MOTIONAR_Context_Init>

//  /* Init MOTIONAW Context */
//  MOTIONAW_Context_Init();

  /* Init MOTIONCP Context */
  MOTIONCP_Context_Init();
 8002bce:	f000 ff85 	bl	8003adc <MOTIONCP_Context_Init>

  /* Init MOTIONGR Context */
  MOTIONGR_Context_Init();
 8002bd2:	f001 fbc5 	bl	8004360 <MOTIONGR_Context_Init>

  /* Init MOTIONPM Context */
  MOTIONPM_Context_Init();
 8002bd6:	f001 fced 	bl	80045b4 <MOTIONPM_Context_Init>

  /* Init MOTIONID Context */
  MOTIONID_Context_Init();
 8002bda:	f001 fc63 	bl	80044a4 <MOTIONID_Context_Init>
}
 8002bde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  /* Init CONFIG Context */
  CONFIG_Context_Init();
 8002be2:	f7ff b997 	b.w	8001f14 <CONFIG_Context_Init>
 8002be6:	bf00      	nop
 8002be8:	20001744 	.word	0x20001744
 8002bec:	08003731 	.word	0x08003731
 8002bf0:	080027fd 	.word	0x080027fd
 8002bf4:	08002759 	.word	0x08002759
 8002bf8:	080027f5 	.word	0x080027f5
 8002bfc:	08003d69 	.word	0x08003d69
 8002c00:	080027ed 	.word	0x080027ed
 8002c04:	08004045 	.word	0x08004045
 8002c08:	080027e5 	.word	0x080027e5
 8002c0c:	08003a05 	.word	0x08003a05
 8002c10:	080027d9 	.word	0x080027d9
 8002c14:	08003b51 	.word	0x08003b51
 8002c18:	080027cd 	.word	0x080027cd
 8002c1c:	080043d5 	.word	0x080043d5
 8002c20:	080027c1 	.word	0x080027c1
 8002c24:	08004645 	.word	0x08004645
 8002c28:	080027b5 	.word	0x080027b5
 8002c2c:	08004519 	.word	0x08004519
 8002c30:	080027a9 	.word	0x080027a9
 8002c34:	080032f9 	.word	0x080032f9

08002c38 <DisableExtFeatures>:
 * @brief  Disable all Extended Features
 * @param  None
 * @retval None
 */
static void DisableExtFeatures(void)
{
 8002c38:	b538      	push	{r3, r4, r5, lr}
  if(EXT_CHECK_HW_FEATURE(EXT_HWF_PEDOMETER))
 8002c3a:	4c3f      	ldr	r4, [pc, #252]	; (8002d38 <DisableExtFeatures+0x100>)
 8002c3c:	6823      	ldr	r3, [r4, #0]
 8002c3e:	07d8      	lsls	r0, r3, #31
 8002c40:	d46a      	bmi.n	8002d18 <DisableExtFeatures+0xe0>
 8002c42:	4d3e      	ldr	r5, [pc, #248]	; (8002d3c <DisableExtFeatures+0x104>)
  {
    Disable_Pedometer();
  }

  if(EXT_CHECK_HW_FEATURE(EXT_HWF_FREE_FALL))
 8002c44:	0799      	lsls	r1, r3, #30
 8002c46:	d458      	bmi.n	8002cfa <DisableExtFeatures+0xc2>
  {
    Disable_FreeFall();
  }

  if(EXT_CHECK_HW_FEATURE(EXT_HWF_DOUBLE_TAP))
 8002c48:	075a      	lsls	r2, r3, #29
 8002c4a:	d447      	bmi.n	8002cdc <DisableExtFeatures+0xa4>
  {
    Disable_DoubleTap();
  }

  if(EXT_CHECK_HW_FEATURE(EXT_HWF_SINGLE_TAP))
 8002c4c:	0718      	lsls	r0, r3, #28
 8002c4e:	d436      	bmi.n	8002cbe <DisableExtFeatures+0x86>
  {
    Disable_SingleTap();
  }

  if(EXT_CHECK_HW_FEATURE(EXT_HWF_WAKE_UP))
 8002c50:	06d9      	lsls	r1, r3, #27
 8002c52:	d425      	bmi.n	8002ca0 <DisableExtFeatures+0x68>
  {
    Disable_WakeUp();
  }

  if(EXT_CHECK_HW_FEATURE(EXT_HWF_TILT))
 8002c54:	069a      	lsls	r2, r3, #26
 8002c56:	d414      	bmi.n	8002c82 <DisableExtFeatures+0x4a>
  {
    Disable_Tilt();
  }

  if(EXT_CHECK_HW_FEATURE(EXT_HWF_6D_ORIENTATION))
 8002c58:	065b      	lsls	r3, r3, #25
 8002c5a:	d402      	bmi.n	8002c62 <DisableExtFeatures+0x2a>
  {
    Disable_6D_Orientation();
  }

  MOTION_EXT_Server_App_Context.MultiEventEnabled = 0;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	706b      	strb	r3, [r5, #1]
}
 8002c60:	bd38      	pop	{r3, r4, r5, pc}
  if (IKS01A3_MOTION_SENSOR_Disable_6D_Orientation(IKS01A3_LSM6DSO_0) != BSP_ERROR_NONE)
 8002c62:	2000      	movs	r0, #0
 8002c64:	f007 fa56 	bl	800a114 <IKS01A3_MOTION_SENSOR_Disable_6D_Orientation>
 8002c68:	b918      	cbnz	r0, 8002c72 <DisableExtFeatures+0x3a>
    EXT_OFF_HW_FEATURE(EXT_HWF_6D_ORIENTATION);
 8002c6a:	6823      	ldr	r3, [r4, #0]
 8002c6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c70:	6023      	str	r3, [r4, #0]
  if (IKS01A3_MOTION_SENSOR_SetOutputDataRate(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, MOTION_EXT_Server_App_Context.defaultODR) != BSP_ERROR_NONE)
 8002c72:	686a      	ldr	r2, [r5, #4]
 8002c74:	2102      	movs	r1, #2
 8002c76:	2000      	movs	r0, #0
 8002c78:	f007 f864 	bl	8009d44 <IKS01A3_MOTION_SENSOR_SetOutputDataRate>
  MOTION_EXT_Server_App_Context.MultiEventEnabled = 0;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	706b      	strb	r3, [r5, #1]
}
 8002c80:	bd38      	pop	{r3, r4, r5, pc}
  if (IKS01A3_MOTION_SENSOR_Disable_Tilt_Detection(IKS01A3_LSM6DSO_0) != BSP_ERROR_NONE)
 8002c82:	2000      	movs	r0, #0
 8002c84:	f007 f974 	bl	8009f70 <IKS01A3_MOTION_SENSOR_Disable_Tilt_Detection>
 8002c88:	b918      	cbnz	r0, 8002c92 <DisableExtFeatures+0x5a>
    EXT_OFF_HW_FEATURE(EXT_HWF_TILT);
 8002c8a:	6823      	ldr	r3, [r4, #0]
 8002c8c:	f023 0320 	bic.w	r3, r3, #32
 8002c90:	6023      	str	r3, [r4, #0]
  if (IKS01A3_MOTION_SENSOR_SetOutputDataRate(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, MOTION_EXT_Server_App_Context.defaultODR) != BSP_ERROR_NONE)
 8002c92:	686a      	ldr	r2, [r5, #4]
 8002c94:	2102      	movs	r1, #2
 8002c96:	2000      	movs	r0, #0
 8002c98:	f007 f854 	bl	8009d44 <IKS01A3_MOTION_SENSOR_SetOutputDataRate>
 8002c9c:	6823      	ldr	r3, [r4, #0]
 8002c9e:	e7db      	b.n	8002c58 <DisableExtFeatures+0x20>
  if (IKS01A3_MOTION_SENSOR_Disable_Wake_Up_Detection(IKS01A3_LSM6DSO_0) != BSP_ERROR_NONE)
 8002ca0:	2000      	movs	r0, #0
 8002ca2:	f007 f997 	bl	8009fd4 <IKS01A3_MOTION_SENSOR_Disable_Wake_Up_Detection>
 8002ca6:	b918      	cbnz	r0, 8002cb0 <DisableExtFeatures+0x78>
    EXT_OFF_HW_FEATURE(EXT_HWF_WAKE_UP);
 8002ca8:	6823      	ldr	r3, [r4, #0]
 8002caa:	f023 0310 	bic.w	r3, r3, #16
 8002cae:	6023      	str	r3, [r4, #0]
  if (IKS01A3_MOTION_SENSOR_SetOutputDataRate(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, MOTION_EXT_Server_App_Context.defaultODR) != BSP_ERROR_NONE)
 8002cb0:	686a      	ldr	r2, [r5, #4]
 8002cb2:	2102      	movs	r1, #2
 8002cb4:	2000      	movs	r0, #0
 8002cb6:	f007 f845 	bl	8009d44 <IKS01A3_MOTION_SENSOR_SetOutputDataRate>
 8002cba:	6823      	ldr	r3, [r4, #0]
 8002cbc:	e7ca      	b.n	8002c54 <DisableExtFeatures+0x1c>
  if (IKS01A3_MOTION_SENSOR_Disable_Single_Tap_Detection(IKS01A3_LSM6DSO_0) != BSP_ERROR_NONE)
 8002cbe:	2000      	movs	r0, #0
 8002cc0:	f007 f9ba 	bl	800a038 <IKS01A3_MOTION_SENSOR_Disable_Single_Tap_Detection>
 8002cc4:	b918      	cbnz	r0, 8002cce <DisableExtFeatures+0x96>
    EXT_OFF_HW_FEATURE(EXT_HWF_SINGLE_TAP);
 8002cc6:	6823      	ldr	r3, [r4, #0]
 8002cc8:	f023 0308 	bic.w	r3, r3, #8
 8002ccc:	6023      	str	r3, [r4, #0]
  if (IKS01A3_MOTION_SENSOR_SetOutputDataRate(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, MOTION_EXT_Server_App_Context.defaultODR) != BSP_ERROR_NONE)
 8002cce:	686a      	ldr	r2, [r5, #4]
 8002cd0:	2102      	movs	r1, #2
 8002cd2:	2000      	movs	r0, #0
 8002cd4:	f007 f836 	bl	8009d44 <IKS01A3_MOTION_SENSOR_SetOutputDataRate>
 8002cd8:	6823      	ldr	r3, [r4, #0]
 8002cda:	e7b9      	b.n	8002c50 <DisableExtFeatures+0x18>
  if (IKS01A3_MOTION_SENSOR_Disable_Double_Tap_Detection(IKS01A3_LSM6DSO_0) != BSP_ERROR_NONE)
 8002cdc:	2000      	movs	r0, #0
 8002cde:	f007 f9d3 	bl	800a088 <IKS01A3_MOTION_SENSOR_Disable_Double_Tap_Detection>
 8002ce2:	b918      	cbnz	r0, 8002cec <DisableExtFeatures+0xb4>
    EXT_OFF_HW_FEATURE(EXT_HWF_DOUBLE_TAP);
 8002ce4:	6823      	ldr	r3, [r4, #0]
 8002ce6:	f023 0304 	bic.w	r3, r3, #4
 8002cea:	6023      	str	r3, [r4, #0]
  if (IKS01A3_MOTION_SENSOR_SetOutputDataRate(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, MOTION_EXT_Server_App_Context.defaultODR) != BSP_ERROR_NONE)
 8002cec:	686a      	ldr	r2, [r5, #4]
 8002cee:	2102      	movs	r1, #2
 8002cf0:	2000      	movs	r0, #0
 8002cf2:	f007 f827 	bl	8009d44 <IKS01A3_MOTION_SENSOR_SetOutputDataRate>
 8002cf6:	6823      	ldr	r3, [r4, #0]
 8002cf8:	e7a8      	b.n	8002c4c <DisableExtFeatures+0x14>
  if (IKS01A3_MOTION_SENSOR_Disable_Free_Fall_Detection(IKS01A3_LSM6DSO_0) != BSP_ERROR_NONE)
 8002cfa:	2000      	movs	r0, #0
 8002cfc:	f007 f8ac 	bl	8009e58 <IKS01A3_MOTION_SENSOR_Disable_Free_Fall_Detection>
 8002d00:	b918      	cbnz	r0, 8002d0a <DisableExtFeatures+0xd2>
    EXT_OFF_HW_FEATURE(EXT_HWF_FREE_FALL);
 8002d02:	6823      	ldr	r3, [r4, #0]
 8002d04:	f023 0302 	bic.w	r3, r3, #2
 8002d08:	6023      	str	r3, [r4, #0]
  if (IKS01A3_MOTION_SENSOR_SetOutputDataRate(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, MOTION_EXT_Server_App_Context.defaultODR) != BSP_ERROR_NONE)
 8002d0a:	686a      	ldr	r2, [r5, #4]
 8002d0c:	2102      	movs	r1, #2
 8002d0e:	2000      	movs	r0, #0
 8002d10:	f007 f818 	bl	8009d44 <IKS01A3_MOTION_SENSOR_SetOutputDataRate>
 8002d14:	6823      	ldr	r3, [r4, #0]
 8002d16:	e797      	b.n	8002c48 <DisableExtFeatures+0x10>
  if (IKS01A3_MOTION_SENSOR_Disable_Pedometer(IKS01A3_LSM6DSO_0) != BSP_ERROR_NONE)
 8002d18:	2000      	movs	r0, #0
 8002d1a:	f007 f8d9 	bl	8009ed0 <IKS01A3_MOTION_SENSOR_Disable_Pedometer>
 8002d1e:	b918      	cbnz	r0, 8002d28 <DisableExtFeatures+0xf0>
    EXT_OFF_HW_FEATURE(EXT_HWF_PEDOMETER);
 8002d20:	6823      	ldr	r3, [r4, #0]
 8002d22:	f023 0301 	bic.w	r3, r3, #1
 8002d26:	6023      	str	r3, [r4, #0]
  if (IKS01A3_MOTION_SENSOR_SetOutputDataRate(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, MOTION_EXT_Server_App_Context.defaultODR) != BSP_ERROR_NONE)
 8002d28:	4d04      	ldr	r5, [pc, #16]	; (8002d3c <DisableExtFeatures+0x104>)
 8002d2a:	2102      	movs	r1, #2
 8002d2c:	686a      	ldr	r2, [r5, #4]
 8002d2e:	2000      	movs	r0, #0
 8002d30:	f007 f808 	bl	8009d44 <IKS01A3_MOTION_SENSOR_SetOutputDataRate>
 8002d34:	6823      	ldr	r3, [r4, #0]
 8002d36:	e785      	b.n	8002c44 <DisableExtFeatures+0xc>
 8002d38:	200018ec 	.word	0x200018ec
 8002d3c:	20001750 	.word	0x20001750

08002d40 <Enable_MultiEvent>:
{
 8002d40:	b570      	push	{r4, r5, r6, lr}
 8002d42:	b082      	sub	sp, #8
  DisableExtFeatures();
 8002d44:	f7ff ff78 	bl	8002c38 <DisableExtFeatures>
  if (IKS01A3_MOTION_SENSOR_Enable_Pedometer(IKS01A3_LSM6DSO_0) != BSP_ERROR_NONE)
 8002d48:	2000      	movs	r0, #0
 8002d4a:	f007 f8ad 	bl	8009ea8 <IKS01A3_MOTION_SENSOR_Enable_Pedometer>
 8002d4e:	4c30      	ldr	r4, [pc, #192]	; (8002e10 <Enable_MultiEvent+0xd0>)
 8002d50:	b918      	cbnz	r0, 8002d5a <Enable_MultiEvent+0x1a>
    EXT_ON_HW_FEATURE(EXT_HWF_PEDOMETER);
 8002d52:	6823      	ldr	r3, [r4, #0]
 8002d54:	f043 0301 	orr.w	r3, r3, #1
 8002d58:	6023      	str	r3, [r4, #0]
  IKS01A3_MOTION_SENSOR_Reset_Step_Counter(IKS01A3_LSM6DSO_0);
 8002d5a:	2000      	movs	r0, #0
 8002d5c:	f007 f8cc 	bl	8009ef8 <IKS01A3_MOTION_SENSOR_Reset_Step_Counter>
  if (IKS01A3_MOTION_SENSOR_Enable_Tilt_Detection(IKS01A3_LSM6DSO_0, IKS01A3_MOTION_SENSOR_INT1_PIN) != BSP_ERROR_NONE)
 8002d60:	2100      	movs	r1, #0
 8002d62:	4608      	mov	r0, r1
 8002d64:	f007 f8f0 	bl	8009f48 <IKS01A3_MOTION_SENSOR_Enable_Tilt_Detection>
 8002d68:	b918      	cbnz	r0, 8002d72 <Enable_MultiEvent+0x32>
    EXT_ON_HW_FEATURE(EXT_HWF_TILT);
 8002d6a:	6823      	ldr	r3, [r4, #0]
 8002d6c:	f043 0320 	orr.w	r3, r3, #32
 8002d70:	6023      	str	r3, [r4, #0]
  if (IKS01A3_MOTION_SENSOR_Enable_Free_Fall_Detection(IKS01A3_LSM6DSO_0, IKS01A3_MOTION_SENSOR_INT1_PIN) != BSP_ERROR_NONE)
 8002d72:	2100      	movs	r1, #0
 8002d74:	4608      	mov	r0, r1
 8002d76:	f007 f85b 	bl	8009e30 <IKS01A3_MOTION_SENSOR_Enable_Free_Fall_Detection>
 8002d7a:	b918      	cbnz	r0, 8002d84 <Enable_MultiEvent+0x44>
    EXT_ON_HW_FEATURE(EXT_HWF_FREE_FALL);
 8002d7c:	6823      	ldr	r3, [r4, #0]
 8002d7e:	f043 0302 	orr.w	r3, r3, #2
 8002d82:	6023      	str	r3, [r4, #0]
  if (IKS01A3_MOTION_SENSOR_Set_Free_Fall_Threshold(IKS01A3_LSM6DSO_0, LSM6DSO_FF_TSH_250mg) != BSP_ERROR_NONE)
 8002d84:	2102      	movs	r1, #2
 8002d86:	2000      	movs	r0, #0
 8002d88:	f007 f87a 	bl	8009e80 <IKS01A3_MOTION_SENSOR_Set_Free_Fall_Threshold>
  if (IKS01A3_MOTION_SENSOR_Enable_Single_Tap_Detection(IKS01A3_LSM6DSO_0, IKS01A3_MOTION_SENSOR_INT1_PIN) != BSP_ERROR_NONE)
 8002d8c:	2100      	movs	r1, #0
 8002d8e:	4608      	mov	r0, r1
 8002d90:	f007 f93e 	bl	800a010 <IKS01A3_MOTION_SENSOR_Enable_Single_Tap_Detection>
 8002d94:	b918      	cbnz	r0, 8002d9e <Enable_MultiEvent+0x5e>
    EXT_ON_HW_FEATURE(EXT_HWF_SINGLE_TAP);
 8002d96:	6823      	ldr	r3, [r4, #0]
 8002d98:	f043 0308 	orr.w	r3, r3, #8
 8002d9c:	6023      	str	r3, [r4, #0]
  if (IKS01A3_MOTION_SENSOR_Enable_Double_Tap_Detection(IKS01A3_LSM6DSO_0, IKS01A3_MOTION_SENSOR_INT1_PIN) != BSP_ERROR_NONE)
 8002d9e:	2100      	movs	r1, #0
 8002da0:	4608      	mov	r0, r1
 8002da2:	f007 f95d 	bl	800a060 <IKS01A3_MOTION_SENSOR_Enable_Double_Tap_Detection>
 8002da6:	b918      	cbnz	r0, 8002db0 <Enable_MultiEvent+0x70>
    EXT_ON_HW_FEATURE(EXT_HWF_DOUBLE_TAP);
 8002da8:	6823      	ldr	r3, [r4, #0]
 8002daa:	f043 0304 	orr.w	r3, r3, #4
 8002dae:	6023      	str	r3, [r4, #0]
  if (IKS01A3_MOTION_SENSOR_Set_Tap_Threshold(IKS01A3_LSM6DSO_0, 0x10/*LSM6DSL_TAP_THRESHOLD_MID*/) != BSP_ERROR_NONE)
 8002db0:	2110      	movs	r1, #16
 8002db2:	2000      	movs	r0, #0
 8002db4:	f007 f97c 	bl	800a0b0 <IKS01A3_MOTION_SENSOR_Set_Tap_Threshold>
  if (IKS01A3_MOTION_SENSOR_Enable_6D_Orientation(IKS01A3_LSM6DSO_0, IKS01A3_MOTION_SENSOR_INT1_PIN) != BSP_ERROR_NONE)
 8002db8:	2100      	movs	r1, #0
 8002dba:	4608      	mov	r0, r1
 8002dbc:	f007 f98c 	bl	800a0d8 <IKS01A3_MOTION_SENSOR_Enable_6D_Orientation>
 8002dc0:	b918      	cbnz	r0, 8002dca <Enable_MultiEvent+0x8a>
    EXT_ON_HW_FEATURE(EXT_HWF_6D_ORIENTATION);
 8002dc2:	6823      	ldr	r3, [r4, #0]
 8002dc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002dc8:	6023      	str	r3, [r4, #0]
  MOTION_EXT_Server_App_Context.MultiEventEnabled = 1;
 8002dca:	4e12      	ldr	r6, [pc, #72]	; (8002e14 <Enable_MultiEvent+0xd4>)
 8002dcc:	2301      	movs	r3, #1
  MOTION_EXT_Server_App_Context.PedometerStepCount = 0;
 8002dce:	2500      	movs	r5, #0
  MOTION_EXT_Server_App_Context.MultiEventEnabled = 1;
 8002dd0:	7073      	strb	r3, [r6, #1]
  MOTION_EXT_Server_App_Context.PedometerStepCount = 0;
 8002dd2:	8075      	strh	r5, [r6, #2]
  case 2:
    STORE_LE_16(valueSmall, (HAL_GetTick()>>3));
    STORE_LE_16(valueSmall+2, Command);
    break;
  case 3:
    STORE_LE_16(valueLarge, (HAL_GetTick()>>3));
 8002dd4:	f007 fb3c 	bl	800a450 <HAL_GetTick>
 8002dd8:	08c0      	lsrs	r0, r0, #3
 8002dda:	f88d 0000 	strb.w	r0, [sp]
 8002dde:	f007 fb37 	bl	800a450 <HAL_GetTick>
    valueLarge[2] = 0;
    STORE_LE_16(valueLarge+3, Command);
    break;
  }

  if(MOTION_EXT_Server_App_Context.NotificationStatus)
 8002de2:	7833      	ldrb	r3, [r6, #0]
    valueLarge[2] = 0;
 8002de4:	f8ad 5002 	strh.w	r5, [sp, #2]
    STORE_LE_16(valueLarge, (HAL_GetTick()>>3));
 8002de8:	0ac0      	lsrs	r0, r0, #11
 8002dea:	f88d 0001 	strb.w	r0, [sp, #1]
    STORE_LE_16(valueLarge+3, Command);
 8002dee:	f88d 5004 	strb.w	r5, [sp, #4]
  if(MOTION_EXT_Server_App_Context.NotificationStatus)
 8002df2:	b123      	cbz	r3, 8002dfe <Enable_MultiEvent+0xbe>
    {
    case 2:
      MOTENV_STM_App_Update_Char(ACC_EVENT_CHAR_UUID, VALUE_LEN_SMALL, (uint8_t *)&valueSmall);
      break;
    case 3:
      MOTENV_STM_App_Update_Char(ACC_EVENT_CHAR_UUID, VALUE_LEN_LARGE, (uint8_t *)&valueLarge);
 8002df4:	466a      	mov	r2, sp
 8002df6:	2105      	movs	r1, #5
 8002df8:	2004      	movs	r0, #4
 8002dfa:	f00a fa25 	bl	800d248 <MOTENV_STM_App_Update_Char>
  EXT_ON_HW_FEATURE(EXT_HWF_MULTIPLE_EVENTS);
 8002dfe:	6823      	ldr	r3, [r4, #0]
  IKS01A3_MOTION_SENSOR_Reset_Step_Counter(IKS01A3_LSM6DSO_0);
 8002e00:	2000      	movs	r0, #0
  EXT_ON_HW_FEATURE(EXT_HWF_MULTIPLE_EVENTS);
 8002e02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e06:	6023      	str	r3, [r4, #0]
  IKS01A3_MOTION_SENSOR_Reset_Step_Counter(IKS01A3_LSM6DSO_0);
 8002e08:	f007 f876 	bl	8009ef8 <IKS01A3_MOTION_SENSOR_Reset_Step_Counter>
}
 8002e0c:	b002      	add	sp, #8
 8002e0e:	bd70      	pop	{r4, r5, r6, pc}
 8002e10:	200018ec 	.word	0x200018ec
 8002e14:	20001750 	.word	0x20001750

08002e18 <MOTION_EXT_Context_Init>:
{
 8002e18:	b538      	push	{r3, r4, r5, lr}
  IKS01A3_MOTION_SENSOR_GetOutputDataRate(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, &MOTION_EXT_Server_App_Context.defaultODR);
 8002e1a:	4c53      	ldr	r4, [pc, #332]	; (8002f68 <MOTION_EXT_Context_Init+0x150>)
  if(EXT_CHECK_HW_FEATURE(EXT_HWF_PEDOMETER))
 8002e1c:	4d53      	ldr	r5, [pc, #332]	; (8002f6c <MOTION_EXT_Context_Init+0x154>)
  IKS01A3_MOTION_SENSOR_GetOutputDataRate(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, &MOTION_EXT_Server_App_Context.defaultODR);
 8002e1e:	1d22      	adds	r2, r4, #4
 8002e20:	2102      	movs	r1, #2
 8002e22:	2000      	movs	r0, #0
 8002e24:	f006 ff62 	bl	8009cec <IKS01A3_MOTION_SENSOR_GetOutputDataRate>
  MCR_BLUEMS_F2I_2D(MOTION_EXT_Server_App_Context.defaultODR, intPart, decPart);
 8002e28:	edd4 7a01 	vldr	s15, [r4, #4]
 8002e2c:	eddf 6a50 	vldr	s13, [pc, #320]	; 8002f70 <MOTION_EXT_Context_Init+0x158>
  if(EXT_CHECK_HW_FEATURE(EXT_HWF_PEDOMETER))
 8002e30:	682b      	ldr	r3, [r5, #0]
  MCR_BLUEMS_F2I_2D(MOTION_EXT_Server_App_Context.defaultODR, intPart, decPart);
 8002e32:	eebd 7ae7 	vcvt.s32.f32	s14, s15
  MOTION_EXT_Server_App_Context.defaultODR = intPart*100+decPart;
 8002e36:	2264      	movs	r2, #100	; 0x64
  MCR_BLUEMS_F2I_2D(MOTION_EXT_Server_App_Context.defaultODR, intPart, decPart);
 8002e38:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
  MOTION_EXT_Server_App_Context.defaultODR = intPart*100+decPart;
 8002e3c:	ee17 1a10 	vmov	r1, s14
  MCR_BLUEMS_F2I_2D(MOTION_EXT_Server_App_Context.defaultODR, intPart, decPart);
 8002e40:	ee77 7ac6 	vsub.f32	s15, s15, s12
  MOTION_EXT_Server_App_Context.NotificationStatus = status;
 8002e44:	2000      	movs	r0, #0
  MCR_BLUEMS_F2I_2D(MOTION_EXT_Server_App_Context.defaultODR, intPart, decPart);
 8002e46:	ee67 7aa6 	vmul.f32	s15, s15, s13
  MOTION_EXT_Server_App_Context.NotificationStatus = status;
 8002e4a:	7020      	strb	r0, [r4, #0]
  MCR_BLUEMS_F2I_2D(MOTION_EXT_Server_App_Context.defaultODR, intPart, decPart);
 8002e4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  MOTION_EXT_Server_App_Context.defaultODR = intPart*100+decPart;
 8002e50:	ee17 ca90 	vmov	ip, s15
 8002e54:	fb02 c201 	mla	r2, r2, r1, ip
 8002e58:	ee07 2a90 	vmov	s15, r2
 8002e5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  if(EXT_CHECK_HW_FEATURE(EXT_HWF_PEDOMETER))
 8002e60:	07da      	lsls	r2, r3, #31
  MOTION_EXT_Server_App_Context.defaultODR = intPart*100+decPart;
 8002e62:	edc4 7a01 	vstr	s15, [r4, #4]
  if(EXT_CHECK_HW_FEATURE(EXT_HWF_PEDOMETER))
 8002e66:	d470      	bmi.n	8002f4a <MOTION_EXT_Context_Init+0x132>
  if(EXT_CHECK_HW_FEATURE(EXT_HWF_FREE_FALL))
 8002e68:	0798      	lsls	r0, r3, #30
 8002e6a:	d45f      	bmi.n	8002f2c <MOTION_EXT_Context_Init+0x114>
  if(EXT_CHECK_HW_FEATURE(EXT_HWF_DOUBLE_TAP))
 8002e6c:	0759      	lsls	r1, r3, #29
 8002e6e:	d44e      	bmi.n	8002f0e <MOTION_EXT_Context_Init+0xf6>
  if(EXT_CHECK_HW_FEATURE(EXT_HWF_SINGLE_TAP))
 8002e70:	071a      	lsls	r2, r3, #28
 8002e72:	d43d      	bmi.n	8002ef0 <MOTION_EXT_Context_Init+0xd8>
  if(EXT_CHECK_HW_FEATURE(EXT_HWF_WAKE_UP))
 8002e74:	06d8      	lsls	r0, r3, #27
 8002e76:	d42c      	bmi.n	8002ed2 <MOTION_EXT_Context_Init+0xba>
  if(EXT_CHECK_HW_FEATURE(EXT_HWF_TILT))
 8002e78:	0699      	lsls	r1, r3, #26
 8002e7a:	d41b      	bmi.n	8002eb4 <MOTION_EXT_Context_Init+0x9c>
  if(EXT_CHECK_HW_FEATURE(EXT_HWF_6D_ORIENTATION))
 8002e7c:	065a      	lsls	r2, r3, #25
 8002e7e:	d405      	bmi.n	8002e8c <MOTION_EXT_Context_Init+0x74>
  EXT_OFF_HW_FEATURE(EXT_HWF_MULTIPLE_EVENTS);
 8002e80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  MOTION_EXT_Server_App_Context.MultiEventEnabled = 0;
 8002e84:	2200      	movs	r2, #0
  EXT_OFF_HW_FEATURE(EXT_HWF_MULTIPLE_EVENTS);
 8002e86:	602b      	str	r3, [r5, #0]
  MOTION_EXT_Server_App_Context.MultiEventEnabled = 0;
 8002e88:	7062      	strb	r2, [r4, #1]
}
 8002e8a:	bd38      	pop	{r3, r4, r5, pc}
  if (IKS01A3_MOTION_SENSOR_Disable_6D_Orientation(IKS01A3_LSM6DSO_0) != BSP_ERROR_NONE)
 8002e8c:	2000      	movs	r0, #0
 8002e8e:	f007 f941 	bl	800a114 <IKS01A3_MOTION_SENSOR_Disable_6D_Orientation>
 8002e92:	b918      	cbnz	r0, 8002e9c <MOTION_EXT_Context_Init+0x84>
    EXT_OFF_HW_FEATURE(EXT_HWF_6D_ORIENTATION);
 8002e94:	682b      	ldr	r3, [r5, #0]
 8002e96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e9a:	602b      	str	r3, [r5, #0]
  if (IKS01A3_MOTION_SENSOR_SetOutputDataRate(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, MOTION_EXT_Server_App_Context.defaultODR) != BSP_ERROR_NONE)
 8002e9c:	6862      	ldr	r2, [r4, #4]
 8002e9e:	2102      	movs	r1, #2
 8002ea0:	2000      	movs	r0, #0
 8002ea2:	f006 ff4f 	bl	8009d44 <IKS01A3_MOTION_SENSOR_SetOutputDataRate>
 8002ea6:	682b      	ldr	r3, [r5, #0]
  MOTION_EXT_Server_App_Context.MultiEventEnabled = 0;
 8002ea8:	2200      	movs	r2, #0
  EXT_OFF_HW_FEATURE(EXT_HWF_MULTIPLE_EVENTS);
 8002eaa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002eae:	602b      	str	r3, [r5, #0]
  MOTION_EXT_Server_App_Context.MultiEventEnabled = 0;
 8002eb0:	7062      	strb	r2, [r4, #1]
}
 8002eb2:	bd38      	pop	{r3, r4, r5, pc}
  if (IKS01A3_MOTION_SENSOR_Disable_Tilt_Detection(IKS01A3_LSM6DSO_0) != BSP_ERROR_NONE)
 8002eb4:	2000      	movs	r0, #0
 8002eb6:	f007 f85b 	bl	8009f70 <IKS01A3_MOTION_SENSOR_Disable_Tilt_Detection>
 8002eba:	b918      	cbnz	r0, 8002ec4 <MOTION_EXT_Context_Init+0xac>
    EXT_OFF_HW_FEATURE(EXT_HWF_TILT);
 8002ebc:	682b      	ldr	r3, [r5, #0]
 8002ebe:	f023 0320 	bic.w	r3, r3, #32
 8002ec2:	602b      	str	r3, [r5, #0]
  if (IKS01A3_MOTION_SENSOR_SetOutputDataRate(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, MOTION_EXT_Server_App_Context.defaultODR) != BSP_ERROR_NONE)
 8002ec4:	6862      	ldr	r2, [r4, #4]
 8002ec6:	2102      	movs	r1, #2
 8002ec8:	2000      	movs	r0, #0
 8002eca:	f006 ff3b 	bl	8009d44 <IKS01A3_MOTION_SENSOR_SetOutputDataRate>
 8002ece:	682b      	ldr	r3, [r5, #0]
 8002ed0:	e7d4      	b.n	8002e7c <MOTION_EXT_Context_Init+0x64>
  if (IKS01A3_MOTION_SENSOR_Disable_Wake_Up_Detection(IKS01A3_LSM6DSO_0) != BSP_ERROR_NONE)
 8002ed2:	2000      	movs	r0, #0
 8002ed4:	f007 f87e 	bl	8009fd4 <IKS01A3_MOTION_SENSOR_Disable_Wake_Up_Detection>
 8002ed8:	b918      	cbnz	r0, 8002ee2 <MOTION_EXT_Context_Init+0xca>
    EXT_OFF_HW_FEATURE(EXT_HWF_WAKE_UP);
 8002eda:	682b      	ldr	r3, [r5, #0]
 8002edc:	f023 0310 	bic.w	r3, r3, #16
 8002ee0:	602b      	str	r3, [r5, #0]
  if (IKS01A3_MOTION_SENSOR_SetOutputDataRate(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, MOTION_EXT_Server_App_Context.defaultODR) != BSP_ERROR_NONE)
 8002ee2:	6862      	ldr	r2, [r4, #4]
 8002ee4:	2102      	movs	r1, #2
 8002ee6:	2000      	movs	r0, #0
 8002ee8:	f006 ff2c 	bl	8009d44 <IKS01A3_MOTION_SENSOR_SetOutputDataRate>
 8002eec:	682b      	ldr	r3, [r5, #0]
 8002eee:	e7c3      	b.n	8002e78 <MOTION_EXT_Context_Init+0x60>
  if (IKS01A3_MOTION_SENSOR_Disable_Single_Tap_Detection(IKS01A3_LSM6DSO_0) != BSP_ERROR_NONE)
 8002ef0:	2000      	movs	r0, #0
 8002ef2:	f007 f8a1 	bl	800a038 <IKS01A3_MOTION_SENSOR_Disable_Single_Tap_Detection>
 8002ef6:	b918      	cbnz	r0, 8002f00 <MOTION_EXT_Context_Init+0xe8>
    EXT_OFF_HW_FEATURE(EXT_HWF_SINGLE_TAP);
 8002ef8:	682b      	ldr	r3, [r5, #0]
 8002efa:	f023 0308 	bic.w	r3, r3, #8
 8002efe:	602b      	str	r3, [r5, #0]
  if (IKS01A3_MOTION_SENSOR_SetOutputDataRate(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, MOTION_EXT_Server_App_Context.defaultODR) != BSP_ERROR_NONE)
 8002f00:	6862      	ldr	r2, [r4, #4]
 8002f02:	2102      	movs	r1, #2
 8002f04:	2000      	movs	r0, #0
 8002f06:	f006 ff1d 	bl	8009d44 <IKS01A3_MOTION_SENSOR_SetOutputDataRate>
 8002f0a:	682b      	ldr	r3, [r5, #0]
 8002f0c:	e7b2      	b.n	8002e74 <MOTION_EXT_Context_Init+0x5c>
  if (IKS01A3_MOTION_SENSOR_Disable_Double_Tap_Detection(IKS01A3_LSM6DSO_0) != BSP_ERROR_NONE)
 8002f0e:	2000      	movs	r0, #0
 8002f10:	f007 f8ba 	bl	800a088 <IKS01A3_MOTION_SENSOR_Disable_Double_Tap_Detection>
 8002f14:	b918      	cbnz	r0, 8002f1e <MOTION_EXT_Context_Init+0x106>
    EXT_OFF_HW_FEATURE(EXT_HWF_DOUBLE_TAP);
 8002f16:	682b      	ldr	r3, [r5, #0]
 8002f18:	f023 0304 	bic.w	r3, r3, #4
 8002f1c:	602b      	str	r3, [r5, #0]
  if (IKS01A3_MOTION_SENSOR_SetOutputDataRate(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, MOTION_EXT_Server_App_Context.defaultODR) != BSP_ERROR_NONE)
 8002f1e:	6862      	ldr	r2, [r4, #4]
 8002f20:	2102      	movs	r1, #2
 8002f22:	2000      	movs	r0, #0
 8002f24:	f006 ff0e 	bl	8009d44 <IKS01A3_MOTION_SENSOR_SetOutputDataRate>
 8002f28:	682b      	ldr	r3, [r5, #0]
 8002f2a:	e7a1      	b.n	8002e70 <MOTION_EXT_Context_Init+0x58>
  if (IKS01A3_MOTION_SENSOR_Disable_Free_Fall_Detection(IKS01A3_LSM6DSO_0) != BSP_ERROR_NONE)
 8002f2c:	2000      	movs	r0, #0
 8002f2e:	f006 ff93 	bl	8009e58 <IKS01A3_MOTION_SENSOR_Disable_Free_Fall_Detection>
 8002f32:	b918      	cbnz	r0, 8002f3c <MOTION_EXT_Context_Init+0x124>
    EXT_OFF_HW_FEATURE(EXT_HWF_FREE_FALL);
 8002f34:	682b      	ldr	r3, [r5, #0]
 8002f36:	f023 0302 	bic.w	r3, r3, #2
 8002f3a:	602b      	str	r3, [r5, #0]
  if (IKS01A3_MOTION_SENSOR_SetOutputDataRate(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, MOTION_EXT_Server_App_Context.defaultODR) != BSP_ERROR_NONE)
 8002f3c:	6862      	ldr	r2, [r4, #4]
 8002f3e:	2102      	movs	r1, #2
 8002f40:	2000      	movs	r0, #0
 8002f42:	f006 feff 	bl	8009d44 <IKS01A3_MOTION_SENSOR_SetOutputDataRate>
 8002f46:	682b      	ldr	r3, [r5, #0]
 8002f48:	e790      	b.n	8002e6c <MOTION_EXT_Context_Init+0x54>
  if (IKS01A3_MOTION_SENSOR_Disable_Pedometer(IKS01A3_LSM6DSO_0) != BSP_ERROR_NONE)
 8002f4a:	f006 ffc1 	bl	8009ed0 <IKS01A3_MOTION_SENSOR_Disable_Pedometer>
 8002f4e:	b918      	cbnz	r0, 8002f58 <MOTION_EXT_Context_Init+0x140>
    EXT_OFF_HW_FEATURE(EXT_HWF_PEDOMETER);
 8002f50:	682b      	ldr	r3, [r5, #0]
 8002f52:	f023 0301 	bic.w	r3, r3, #1
 8002f56:	602b      	str	r3, [r5, #0]
  if (IKS01A3_MOTION_SENSOR_SetOutputDataRate(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, MOTION_EXT_Server_App_Context.defaultODR) != BSP_ERROR_NONE)
 8002f58:	6862      	ldr	r2, [r4, #4]
 8002f5a:	2102      	movs	r1, #2
 8002f5c:	2000      	movs	r0, #0
 8002f5e:	f006 fef1 	bl	8009d44 <IKS01A3_MOTION_SENSOR_SetOutputDataRate>
 8002f62:	682b      	ldr	r3, [r5, #0]
 8002f64:	e780      	b.n	8002e68 <MOTION_EXT_Context_Init+0x50>
 8002f66:	bf00      	nop
 8002f68:	20001750 	.word	0x20001750
 8002f6c:	200018ec 	.word	0x200018ec
 8002f70:	42c80000 	.word	0x42c80000

08002f74 <MOTION_EXT_Set_Notification_Status>:
{
 8002f74:	b538      	push	{r3, r4, r5, lr}
  MOTION_EXT_Server_App_Context.NotificationStatus = status;
 8002f76:	4d4a      	ldr	r5, [pc, #296]	; (80030a0 <MOTION_EXT_Set_Notification_Status+0x12c>)
  if(status == 1)
 8002f78:	2801      	cmp	r0, #1
{
 8002f7a:	4604      	mov	r4, r0
  MOTION_EXT_Server_App_Context.NotificationStatus = status;
 8002f7c:	7028      	strb	r0, [r5, #0]
  if(status == 1)
 8002f7e:	d02b      	beq.n	8002fd8 <MOTION_EXT_Set_Notification_Status+0x64>
  else if(status == 0)
 8002f80:	b100      	cbz	r0, 8002f84 <MOTION_EXT_Set_Notification_Status+0x10>
}
 8002f82:	bd38      	pop	{r3, r4, r5, pc}
  if(EXT_CHECK_HW_FEATURE(EXT_HWF_PEDOMETER))
 8002f84:	4c47      	ldr	r4, [pc, #284]	; (80030a4 <MOTION_EXT_Set_Notification_Status+0x130>)
 8002f86:	6823      	ldr	r3, [r4, #0]
 8002f88:	07da      	lsls	r2, r3, #31
 8002f8a:	d45c      	bmi.n	8003046 <MOTION_EXT_Set_Notification_Status+0xd2>
  if(EXT_CHECK_HW_FEATURE(EXT_HWF_FREE_FALL))
 8002f8c:	0798      	lsls	r0, r3, #30
 8002f8e:	d477      	bmi.n	8003080 <MOTION_EXT_Set_Notification_Status+0x10c>
  if(EXT_CHECK_HW_FEATURE(EXT_HWF_DOUBLE_TAP))
 8002f90:	0759      	lsls	r1, r3, #29
 8002f92:	d466      	bmi.n	8003062 <MOTION_EXT_Set_Notification_Status+0xee>
  if(EXT_CHECK_HW_FEATURE(EXT_HWF_SINGLE_TAP))
 8002f94:	071a      	lsls	r2, r3, #28
 8002f96:	d438      	bmi.n	800300a <MOTION_EXT_Set_Notification_Status+0x96>
  if(EXT_CHECK_HW_FEATURE(EXT_HWF_WAKE_UP))
 8002f98:	06d8      	lsls	r0, r3, #27
 8002f9a:	d427      	bmi.n	8002fec <MOTION_EXT_Set_Notification_Status+0x78>
  if(EXT_CHECK_HW_FEATURE(EXT_HWF_TILT))
 8002f9c:	0699      	lsls	r1, r3, #26
 8002f9e:	d443      	bmi.n	8003028 <MOTION_EXT_Set_Notification_Status+0xb4>
  if(EXT_CHECK_HW_FEATURE(EXT_HWF_6D_ORIENTATION))
 8002fa0:	065a      	lsls	r2, r3, #25
 8002fa2:	d405      	bmi.n	8002fb0 <MOTION_EXT_Set_Notification_Status+0x3c>
  EXT_OFF_HW_FEATURE(EXT_HWF_MULTIPLE_EVENTS);
 8002fa4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  MOTION_EXT_Server_App_Context.MultiEventEnabled = 0;
 8002fa8:	2200      	movs	r2, #0
  EXT_OFF_HW_FEATURE(EXT_HWF_MULTIPLE_EVENTS);
 8002faa:	6023      	str	r3, [r4, #0]
  MOTION_EXT_Server_App_Context.MultiEventEnabled = 0;
 8002fac:	706a      	strb	r2, [r5, #1]
}
 8002fae:	bd38      	pop	{r3, r4, r5, pc}
  if (IKS01A3_MOTION_SENSOR_Disable_6D_Orientation(IKS01A3_LSM6DSO_0) != BSP_ERROR_NONE)
 8002fb0:	2000      	movs	r0, #0
 8002fb2:	f007 f8af 	bl	800a114 <IKS01A3_MOTION_SENSOR_Disable_6D_Orientation>
 8002fb6:	b918      	cbnz	r0, 8002fc0 <MOTION_EXT_Set_Notification_Status+0x4c>
    EXT_OFF_HW_FEATURE(EXT_HWF_6D_ORIENTATION);
 8002fb8:	6823      	ldr	r3, [r4, #0]
 8002fba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fbe:	6023      	str	r3, [r4, #0]
  if (IKS01A3_MOTION_SENSOR_SetOutputDataRate(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, MOTION_EXT_Server_App_Context.defaultODR) != BSP_ERROR_NONE)
 8002fc0:	686a      	ldr	r2, [r5, #4]
 8002fc2:	2102      	movs	r1, #2
 8002fc4:	2000      	movs	r0, #0
 8002fc6:	f006 febd 	bl	8009d44 <IKS01A3_MOTION_SENSOR_SetOutputDataRate>
 8002fca:	6823      	ldr	r3, [r4, #0]
  MOTION_EXT_Server_App_Context.MultiEventEnabled = 0;
 8002fcc:	2200      	movs	r2, #0
  EXT_OFF_HW_FEATURE(EXT_HWF_MULTIPLE_EVENTS);
 8002fce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fd2:	6023      	str	r3, [r4, #0]
  MOTION_EXT_Server_App_Context.MultiEventEnabled = 0;
 8002fd4:	706a      	strb	r2, [r5, #1]
 8002fd6:	e7ea      	b.n	8002fae <MOTION_EXT_Set_Notification_Status+0x3a>
    Enable_MultiEvent();
 8002fd8:	f7ff feb2 	bl	8002d40 <Enable_MultiEvent>
    CONFIG_Send_Notification(FEATURE_MASK_ACC_EVENTS,'m',1);
 8002fdc:	4622      	mov	r2, r4
 8002fde:	216d      	movs	r1, #109	; 0x6d
 8002fe0:	f44f 6080 	mov.w	r0, #1024	; 0x400
}
 8002fe4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    CONFIG_Send_Notification(FEATURE_MASK_ACC_EVENTS,'m',1);
 8002fe8:	f7fe bfac 	b.w	8001f44 <CONFIG_Send_Notification>
  if (IKS01A3_MOTION_SENSOR_Disable_Wake_Up_Detection(IKS01A3_LSM6DSO_0) != BSP_ERROR_NONE)
 8002fec:	2000      	movs	r0, #0
 8002fee:	f006 fff1 	bl	8009fd4 <IKS01A3_MOTION_SENSOR_Disable_Wake_Up_Detection>
 8002ff2:	b918      	cbnz	r0, 8002ffc <MOTION_EXT_Set_Notification_Status+0x88>
    EXT_OFF_HW_FEATURE(EXT_HWF_WAKE_UP);
 8002ff4:	6823      	ldr	r3, [r4, #0]
 8002ff6:	f023 0310 	bic.w	r3, r3, #16
 8002ffa:	6023      	str	r3, [r4, #0]
  if (IKS01A3_MOTION_SENSOR_SetOutputDataRate(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, MOTION_EXT_Server_App_Context.defaultODR) != BSP_ERROR_NONE)
 8002ffc:	686a      	ldr	r2, [r5, #4]
 8002ffe:	2102      	movs	r1, #2
 8003000:	2000      	movs	r0, #0
 8003002:	f006 fe9f 	bl	8009d44 <IKS01A3_MOTION_SENSOR_SetOutputDataRate>
 8003006:	6823      	ldr	r3, [r4, #0]
 8003008:	e7c8      	b.n	8002f9c <MOTION_EXT_Set_Notification_Status+0x28>
  if (IKS01A3_MOTION_SENSOR_Disable_Single_Tap_Detection(IKS01A3_LSM6DSO_0) != BSP_ERROR_NONE)
 800300a:	2000      	movs	r0, #0
 800300c:	f007 f814 	bl	800a038 <IKS01A3_MOTION_SENSOR_Disable_Single_Tap_Detection>
 8003010:	b918      	cbnz	r0, 800301a <MOTION_EXT_Set_Notification_Status+0xa6>
    EXT_OFF_HW_FEATURE(EXT_HWF_SINGLE_TAP);
 8003012:	6823      	ldr	r3, [r4, #0]
 8003014:	f023 0308 	bic.w	r3, r3, #8
 8003018:	6023      	str	r3, [r4, #0]
  if (IKS01A3_MOTION_SENSOR_SetOutputDataRate(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, MOTION_EXT_Server_App_Context.defaultODR) != BSP_ERROR_NONE)
 800301a:	686a      	ldr	r2, [r5, #4]
 800301c:	2102      	movs	r1, #2
 800301e:	2000      	movs	r0, #0
 8003020:	f006 fe90 	bl	8009d44 <IKS01A3_MOTION_SENSOR_SetOutputDataRate>
 8003024:	6823      	ldr	r3, [r4, #0]
 8003026:	e7b7      	b.n	8002f98 <MOTION_EXT_Set_Notification_Status+0x24>
  if (IKS01A3_MOTION_SENSOR_Disable_Tilt_Detection(IKS01A3_LSM6DSO_0) != BSP_ERROR_NONE)
 8003028:	2000      	movs	r0, #0
 800302a:	f006 ffa1 	bl	8009f70 <IKS01A3_MOTION_SENSOR_Disable_Tilt_Detection>
 800302e:	b918      	cbnz	r0, 8003038 <MOTION_EXT_Set_Notification_Status+0xc4>
    EXT_OFF_HW_FEATURE(EXT_HWF_TILT);
 8003030:	6823      	ldr	r3, [r4, #0]
 8003032:	f023 0320 	bic.w	r3, r3, #32
 8003036:	6023      	str	r3, [r4, #0]
  if (IKS01A3_MOTION_SENSOR_SetOutputDataRate(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, MOTION_EXT_Server_App_Context.defaultODR) != BSP_ERROR_NONE)
 8003038:	686a      	ldr	r2, [r5, #4]
 800303a:	2102      	movs	r1, #2
 800303c:	2000      	movs	r0, #0
 800303e:	f006 fe81 	bl	8009d44 <IKS01A3_MOTION_SENSOR_SetOutputDataRate>
 8003042:	6823      	ldr	r3, [r4, #0]
 8003044:	e7ac      	b.n	8002fa0 <MOTION_EXT_Set_Notification_Status+0x2c>
  if (IKS01A3_MOTION_SENSOR_Disable_Pedometer(IKS01A3_LSM6DSO_0) != BSP_ERROR_NONE)
 8003046:	f006 ff43 	bl	8009ed0 <IKS01A3_MOTION_SENSOR_Disable_Pedometer>
 800304a:	b918      	cbnz	r0, 8003054 <MOTION_EXT_Set_Notification_Status+0xe0>
    EXT_OFF_HW_FEATURE(EXT_HWF_PEDOMETER);
 800304c:	6823      	ldr	r3, [r4, #0]
 800304e:	f023 0301 	bic.w	r3, r3, #1
 8003052:	6023      	str	r3, [r4, #0]
  if (IKS01A3_MOTION_SENSOR_SetOutputDataRate(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, MOTION_EXT_Server_App_Context.defaultODR) != BSP_ERROR_NONE)
 8003054:	686a      	ldr	r2, [r5, #4]
 8003056:	2102      	movs	r1, #2
 8003058:	2000      	movs	r0, #0
 800305a:	f006 fe73 	bl	8009d44 <IKS01A3_MOTION_SENSOR_SetOutputDataRate>
 800305e:	6823      	ldr	r3, [r4, #0]
 8003060:	e794      	b.n	8002f8c <MOTION_EXT_Set_Notification_Status+0x18>
  if (IKS01A3_MOTION_SENSOR_Disable_Double_Tap_Detection(IKS01A3_LSM6DSO_0) != BSP_ERROR_NONE)
 8003062:	2000      	movs	r0, #0
 8003064:	f007 f810 	bl	800a088 <IKS01A3_MOTION_SENSOR_Disable_Double_Tap_Detection>
 8003068:	b918      	cbnz	r0, 8003072 <MOTION_EXT_Set_Notification_Status+0xfe>
    EXT_OFF_HW_FEATURE(EXT_HWF_DOUBLE_TAP);
 800306a:	6823      	ldr	r3, [r4, #0]
 800306c:	f023 0304 	bic.w	r3, r3, #4
 8003070:	6023      	str	r3, [r4, #0]
  if (IKS01A3_MOTION_SENSOR_SetOutputDataRate(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, MOTION_EXT_Server_App_Context.defaultODR) != BSP_ERROR_NONE)
 8003072:	686a      	ldr	r2, [r5, #4]
 8003074:	2102      	movs	r1, #2
 8003076:	2000      	movs	r0, #0
 8003078:	f006 fe64 	bl	8009d44 <IKS01A3_MOTION_SENSOR_SetOutputDataRate>
 800307c:	6823      	ldr	r3, [r4, #0]
 800307e:	e789      	b.n	8002f94 <MOTION_EXT_Set_Notification_Status+0x20>
  if (IKS01A3_MOTION_SENSOR_Disable_Free_Fall_Detection(IKS01A3_LSM6DSO_0) != BSP_ERROR_NONE)
 8003080:	2000      	movs	r0, #0
 8003082:	f006 fee9 	bl	8009e58 <IKS01A3_MOTION_SENSOR_Disable_Free_Fall_Detection>
 8003086:	b918      	cbnz	r0, 8003090 <MOTION_EXT_Set_Notification_Status+0x11c>
    EXT_OFF_HW_FEATURE(EXT_HWF_FREE_FALL);
 8003088:	6823      	ldr	r3, [r4, #0]
 800308a:	f023 0302 	bic.w	r3, r3, #2
 800308e:	6023      	str	r3, [r4, #0]
  if (IKS01A3_MOTION_SENSOR_SetOutputDataRate(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, MOTION_EXT_Server_App_Context.defaultODR) != BSP_ERROR_NONE)
 8003090:	686a      	ldr	r2, [r5, #4]
 8003092:	2102      	movs	r1, #2
 8003094:	2000      	movs	r0, #0
 8003096:	f006 fe55 	bl	8009d44 <IKS01A3_MOTION_SENSOR_SetOutputDataRate>
 800309a:	6823      	ldr	r3, [r4, #0]
 800309c:	e778      	b.n	8002f90 <MOTION_EXT_Set_Notification_Status+0x1c>
 800309e:	bf00      	nop
 80030a0:	20001750 	.word	0x20001750
 80030a4:	200018ec 	.word	0x200018ec

080030a8 <MOTION_EXT_Enable_Feature>:
{
 80030a8:	b510      	push	{r4, lr}
  if(MOTION_EXT_Server_App_Context.MultiEventEnabled == 1)
 80030aa:	4b3f      	ldr	r3, [pc, #252]	; (80031a8 <MOTION_EXT_Enable_Feature+0x100>)
 80030ac:	785b      	ldrb	r3, [r3, #1]
 80030ae:	2b01      	cmp	r3, #1
{
 80030b0:	4604      	mov	r4, r0
  if(MOTION_EXT_Server_App_Context.MultiEventEnabled == 1)
 80030b2:	d014      	beq.n	80030de <MOTION_EXT_Enable_Feature+0x36>
  switch(feature)
 80030b4:	2c08      	cmp	r4, #8
 80030b6:	d016      	beq.n	80030e6 <MOTION_EXT_Enable_Feature+0x3e>
 80030b8:	d90a      	bls.n	80030d0 <MOTION_EXT_Enable_Feature+0x28>
 80030ba:	2c20      	cmp	r4, #32
 80030bc:	d067      	beq.n	800318e <MOTION_EXT_Enable_Feature+0xe6>
 80030be:	d948      	bls.n	8003152 <MOTION_EXT_Enable_Feature+0xaa>
 80030c0:	2c40      	cmp	r4, #64	; 0x40
 80030c2:	d02c      	beq.n	800311e <MOTION_EXT_Enable_Feature+0x76>
 80030c4:	2c80      	cmp	r4, #128	; 0x80
 80030c6:	d109      	bne.n	80030dc <MOTION_EXT_Enable_Feature+0x34>
}
 80030c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Enable_MultiEvent();
 80030cc:	f7ff be38 	b.w	8002d40 <Enable_MultiEvent>
  switch(feature)
 80030d0:	2c02      	cmp	r4, #2
 80030d2:	d04c      	beq.n	800316e <MOTION_EXT_Enable_Feature+0xc6>
 80030d4:	2c04      	cmp	r4, #4
 80030d6:	d012      	beq.n	80030fe <MOTION_EXT_Enable_Feature+0x56>
 80030d8:	2c01      	cmp	r4, #1
 80030da:	d02c      	beq.n	8003136 <MOTION_EXT_Enable_Feature+0x8e>
}
 80030dc:	bd10      	pop	{r4, pc}
    DisableExtFeatures();
 80030de:	f7ff fdab 	bl	8002c38 <DisableExtFeatures>
  switch(feature)
 80030e2:	2c08      	cmp	r4, #8
 80030e4:	d1e8      	bne.n	80030b8 <MOTION_EXT_Enable_Feature+0x10>
  if (IKS01A3_MOTION_SENSOR_Enable_Single_Tap_Detection(IKS01A3_LSM6DSO_0, IKS01A3_MOTION_SENSOR_INT1_PIN) != BSP_ERROR_NONE)
 80030e6:	2100      	movs	r1, #0
 80030e8:	4608      	mov	r0, r1
 80030ea:	f006 ff91 	bl	800a010 <IKS01A3_MOTION_SENSOR_Enable_Single_Tap_Detection>
 80030ee:	2800      	cmp	r0, #0
 80030f0:	d1f4      	bne.n	80030dc <MOTION_EXT_Enable_Feature+0x34>
    EXT_ON_HW_FEATURE(EXT_HWF_SINGLE_TAP);
 80030f2:	4a2e      	ldr	r2, [pc, #184]	; (80031ac <MOTION_EXT_Enable_Feature+0x104>)
 80030f4:	6813      	ldr	r3, [r2, #0]
 80030f6:	f043 0308 	orr.w	r3, r3, #8
 80030fa:	6013      	str	r3, [r2, #0]
}
 80030fc:	bd10      	pop	{r4, pc}
  if (IKS01A3_MOTION_SENSOR_Enable_Double_Tap_Detection(IKS01A3_LSM6DSO_0, IKS01A3_MOTION_SENSOR_INT1_PIN) != BSP_ERROR_NONE)
 80030fe:	2100      	movs	r1, #0
 8003100:	4608      	mov	r0, r1
 8003102:	f006 ffad 	bl	800a060 <IKS01A3_MOTION_SENSOR_Enable_Double_Tap_Detection>
 8003106:	b920      	cbnz	r0, 8003112 <MOTION_EXT_Enable_Feature+0x6a>
    EXT_ON_HW_FEATURE(EXT_HWF_DOUBLE_TAP);
 8003108:	4a28      	ldr	r2, [pc, #160]	; (80031ac <MOTION_EXT_Enable_Feature+0x104>)
 800310a:	6813      	ldr	r3, [r2, #0]
 800310c:	f043 0304 	orr.w	r3, r3, #4
 8003110:	6013      	str	r3, [r2, #0]
  if (IKS01A3_MOTION_SENSOR_Set_Tap_Threshold(IKS01A3_LSM6DSO_0, 0x10/*LSM6DSL_TAP_THRESHOLD_MID*/) != BSP_ERROR_NONE)
 8003112:	2110      	movs	r1, #16
 8003114:	2000      	movs	r0, #0
}
 8003116:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if (IKS01A3_MOTION_SENSOR_Set_Tap_Threshold(IKS01A3_LSM6DSO_0, 0x10/*LSM6DSL_TAP_THRESHOLD_MID*/) != BSP_ERROR_NONE)
 800311a:	f006 bfc9 	b.w	800a0b0 <IKS01A3_MOTION_SENSOR_Set_Tap_Threshold>
  if (IKS01A3_MOTION_SENSOR_Enable_6D_Orientation(IKS01A3_LSM6DSO_0, IKS01A3_MOTION_SENSOR_INT1_PIN) != BSP_ERROR_NONE)
 800311e:	2100      	movs	r1, #0
 8003120:	4608      	mov	r0, r1
 8003122:	f006 ffd9 	bl	800a0d8 <IKS01A3_MOTION_SENSOR_Enable_6D_Orientation>
 8003126:	2800      	cmp	r0, #0
 8003128:	d1d8      	bne.n	80030dc <MOTION_EXT_Enable_Feature+0x34>
    EXT_ON_HW_FEATURE(EXT_HWF_6D_ORIENTATION);
 800312a:	4a20      	ldr	r2, [pc, #128]	; (80031ac <MOTION_EXT_Enable_Feature+0x104>)
 800312c:	6813      	ldr	r3, [r2, #0]
 800312e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003132:	6013      	str	r3, [r2, #0]
}
 8003134:	bd10      	pop	{r4, pc}
  if (IKS01A3_MOTION_SENSOR_Enable_Pedometer(IKS01A3_LSM6DSO_0) != BSP_ERROR_NONE)
 8003136:	2000      	movs	r0, #0
 8003138:	f006 feb6 	bl	8009ea8 <IKS01A3_MOTION_SENSOR_Enable_Pedometer>
 800313c:	b920      	cbnz	r0, 8003148 <MOTION_EXT_Enable_Feature+0xa0>
    EXT_ON_HW_FEATURE(EXT_HWF_PEDOMETER);
 800313e:	4a1b      	ldr	r2, [pc, #108]	; (80031ac <MOTION_EXT_Enable_Feature+0x104>)
 8003140:	6813      	ldr	r3, [r2, #0]
 8003142:	f043 0301 	orr.w	r3, r3, #1
 8003146:	6013      	str	r3, [r2, #0]
  IKS01A3_MOTION_SENSOR_Reset_Step_Counter(IKS01A3_LSM6DSO_0);
 8003148:	2000      	movs	r0, #0
}
 800314a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  IKS01A3_MOTION_SENSOR_Reset_Step_Counter(IKS01A3_LSM6DSO_0);
 800314e:	f006 bed3 	b.w	8009ef8 <IKS01A3_MOTION_SENSOR_Reset_Step_Counter>
  switch(feature)
 8003152:	2c10      	cmp	r4, #16
 8003154:	d1c2      	bne.n	80030dc <MOTION_EXT_Enable_Feature+0x34>
  if (IKS01A3_MOTION_SENSOR_Enable_Wake_Up_Detection(IKS01A3_LSM6DSO_0, IKS01A3_MOTION_SENSOR_INT1_PIN) != BSP_ERROR_NONE)
 8003156:	2100      	movs	r1, #0
 8003158:	4608      	mov	r0, r1
 800315a:	f006 ff1d 	bl	8009f98 <IKS01A3_MOTION_SENSOR_Enable_Wake_Up_Detection>
 800315e:	2800      	cmp	r0, #0
 8003160:	d1bc      	bne.n	80030dc <MOTION_EXT_Enable_Feature+0x34>
    EXT_ON_HW_FEATURE(EXT_HWF_WAKE_UP);
 8003162:	4a12      	ldr	r2, [pc, #72]	; (80031ac <MOTION_EXT_Enable_Feature+0x104>)
 8003164:	6813      	ldr	r3, [r2, #0]
 8003166:	f043 0310 	orr.w	r3, r3, #16
 800316a:	6013      	str	r3, [r2, #0]
}
 800316c:	bd10      	pop	{r4, pc}
  if (IKS01A3_MOTION_SENSOR_Enable_Free_Fall_Detection(IKS01A3_LSM6DSO_0, IKS01A3_MOTION_SENSOR_INT1_PIN) != BSP_ERROR_NONE)
 800316e:	2100      	movs	r1, #0
 8003170:	4608      	mov	r0, r1
 8003172:	f006 fe5d 	bl	8009e30 <IKS01A3_MOTION_SENSOR_Enable_Free_Fall_Detection>
 8003176:	b920      	cbnz	r0, 8003182 <MOTION_EXT_Enable_Feature+0xda>
    EXT_ON_HW_FEATURE(EXT_HWF_FREE_FALL);
 8003178:	4a0c      	ldr	r2, [pc, #48]	; (80031ac <MOTION_EXT_Enable_Feature+0x104>)
 800317a:	6813      	ldr	r3, [r2, #0]
 800317c:	f043 0302 	orr.w	r3, r3, #2
 8003180:	6013      	str	r3, [r2, #0]
  if (IKS01A3_MOTION_SENSOR_Set_Free_Fall_Threshold(IKS01A3_LSM6DSO_0, LSM6DSO_FF_TSH_250mg) != BSP_ERROR_NONE)
 8003182:	2102      	movs	r1, #2
 8003184:	2000      	movs	r0, #0
}
 8003186:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if (IKS01A3_MOTION_SENSOR_Set_Free_Fall_Threshold(IKS01A3_LSM6DSO_0, LSM6DSO_FF_TSH_250mg) != BSP_ERROR_NONE)
 800318a:	f006 be79 	b.w	8009e80 <IKS01A3_MOTION_SENSOR_Set_Free_Fall_Threshold>
  if (IKS01A3_MOTION_SENSOR_Enable_Tilt_Detection(IKS01A3_LSM6DSO_0, IKS01A3_MOTION_SENSOR_INT1_PIN) != BSP_ERROR_NONE)
 800318e:	2100      	movs	r1, #0
 8003190:	4608      	mov	r0, r1
 8003192:	f006 fed9 	bl	8009f48 <IKS01A3_MOTION_SENSOR_Enable_Tilt_Detection>
 8003196:	2800      	cmp	r0, #0
 8003198:	d1a0      	bne.n	80030dc <MOTION_EXT_Enable_Feature+0x34>
    EXT_ON_HW_FEATURE(EXT_HWF_TILT);
 800319a:	4a04      	ldr	r2, [pc, #16]	; (80031ac <MOTION_EXT_Enable_Feature+0x104>)
 800319c:	6813      	ldr	r3, [r2, #0]
 800319e:	f043 0320 	orr.w	r3, r3, #32
 80031a2:	6013      	str	r3, [r2, #0]
}
 80031a4:	bd10      	pop	{r4, pc}
 80031a6:	bf00      	nop
 80031a8:	20001750 	.word	0x20001750
 80031ac:	200018ec 	.word	0x200018ec

080031b0 <MOTION_EXT_Disable_Feature>:
  switch(feature)
 80031b0:	2808      	cmp	r0, #8
{
 80031b2:	b508      	push	{r3, lr}
  switch(feature)
 80031b4:	d05e      	beq.n	8003274 <MOTION_EXT_Disable_Feature+0xc4>
 80031b6:	d90e      	bls.n	80031d6 <MOTION_EXT_Disable_Feature+0x26>
 80031b8:	2820      	cmp	r0, #32
 80031ba:	d050      	beq.n	800325e <MOTION_EXT_Disable_Feature+0xae>
 80031bc:	d937      	bls.n	800322e <MOTION_EXT_Disable_Feature+0x7e>
 80031be:	2840      	cmp	r0, #64	; 0x40
 80031c0:	d02a      	beq.n	8003218 <MOTION_EXT_Disable_Feature+0x68>
 80031c2:	2880      	cmp	r0, #128	; 0x80
 80031c4:	d106      	bne.n	80031d4 <MOTION_EXT_Disable_Feature+0x24>
  DisableExtFeatures();
 80031c6:	f7ff fd37 	bl	8002c38 <DisableExtFeatures>
  EXT_OFF_HW_FEATURE(EXT_HWF_MULTIPLE_EVENTS);
 80031ca:	4a30      	ldr	r2, [pc, #192]	; (800328c <MOTION_EXT_Disable_Feature+0xdc>)
 80031cc:	6813      	ldr	r3, [r2, #0]
 80031ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031d2:	6013      	str	r3, [r2, #0]
}
 80031d4:	bd08      	pop	{r3, pc}
  switch(feature)
 80031d6:	2802      	cmp	r0, #2
 80031d8:	d036      	beq.n	8003248 <MOTION_EXT_Disable_Feature+0x98>
 80031da:	2804      	cmp	r0, #4
 80031dc:	d00b      	beq.n	80031f6 <MOTION_EXT_Disable_Feature+0x46>
 80031de:	2801      	cmp	r0, #1
 80031e0:	d1f8      	bne.n	80031d4 <MOTION_EXT_Disable_Feature+0x24>
  if (IKS01A3_MOTION_SENSOR_Disable_Pedometer(IKS01A3_LSM6DSO_0) != BSP_ERROR_NONE)
 80031e2:	2000      	movs	r0, #0
 80031e4:	f006 fe74 	bl	8009ed0 <IKS01A3_MOTION_SENSOR_Disable_Pedometer>
 80031e8:	b970      	cbnz	r0, 8003208 <MOTION_EXT_Disable_Feature+0x58>
    EXT_OFF_HW_FEATURE(EXT_HWF_PEDOMETER);
 80031ea:	4a28      	ldr	r2, [pc, #160]	; (800328c <MOTION_EXT_Disable_Feature+0xdc>)
 80031ec:	6813      	ldr	r3, [r2, #0]
 80031ee:	f023 0301 	bic.w	r3, r3, #1
 80031f2:	6013      	str	r3, [r2, #0]
 80031f4:	e008      	b.n	8003208 <MOTION_EXT_Disable_Feature+0x58>
  if (IKS01A3_MOTION_SENSOR_Disable_Double_Tap_Detection(IKS01A3_LSM6DSO_0) != BSP_ERROR_NONE)
 80031f6:	2000      	movs	r0, #0
 80031f8:	f006 ff46 	bl	800a088 <IKS01A3_MOTION_SENSOR_Disable_Double_Tap_Detection>
 80031fc:	b920      	cbnz	r0, 8003208 <MOTION_EXT_Disable_Feature+0x58>
    EXT_OFF_HW_FEATURE(EXT_HWF_DOUBLE_TAP);
 80031fe:	4a23      	ldr	r2, [pc, #140]	; (800328c <MOTION_EXT_Disable_Feature+0xdc>)
 8003200:	6813      	ldr	r3, [r2, #0]
 8003202:	f023 0304 	bic.w	r3, r3, #4
 8003206:	6013      	str	r3, [r2, #0]
  if (IKS01A3_MOTION_SENSOR_SetOutputDataRate(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, MOTION_EXT_Server_App_Context.defaultODR) != BSP_ERROR_NONE)
 8003208:	4b21      	ldr	r3, [pc, #132]	; (8003290 <MOTION_EXT_Disable_Feature+0xe0>)
 800320a:	2102      	movs	r1, #2
 800320c:	685a      	ldr	r2, [r3, #4]
 800320e:	2000      	movs	r0, #0
}
 8003210:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  if (IKS01A3_MOTION_SENSOR_SetOutputDataRate(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, MOTION_EXT_Server_App_Context.defaultODR) != BSP_ERROR_NONE)
 8003214:	f006 bd96 	b.w	8009d44 <IKS01A3_MOTION_SENSOR_SetOutputDataRate>
  if (IKS01A3_MOTION_SENSOR_Disable_6D_Orientation(IKS01A3_LSM6DSO_0) != BSP_ERROR_NONE)
 8003218:	2000      	movs	r0, #0
 800321a:	f006 ff7b 	bl	800a114 <IKS01A3_MOTION_SENSOR_Disable_6D_Orientation>
 800321e:	2800      	cmp	r0, #0
 8003220:	d1f2      	bne.n	8003208 <MOTION_EXT_Disable_Feature+0x58>
    EXT_OFF_HW_FEATURE(EXT_HWF_6D_ORIENTATION);
 8003222:	4a1a      	ldr	r2, [pc, #104]	; (800328c <MOTION_EXT_Disable_Feature+0xdc>)
 8003224:	6813      	ldr	r3, [r2, #0]
 8003226:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800322a:	6013      	str	r3, [r2, #0]
 800322c:	e7ec      	b.n	8003208 <MOTION_EXT_Disable_Feature+0x58>
  switch(feature)
 800322e:	2810      	cmp	r0, #16
 8003230:	d1d0      	bne.n	80031d4 <MOTION_EXT_Disable_Feature+0x24>
  if (IKS01A3_MOTION_SENSOR_Disable_Wake_Up_Detection(IKS01A3_LSM6DSO_0) != BSP_ERROR_NONE)
 8003232:	2000      	movs	r0, #0
 8003234:	f006 fece 	bl	8009fd4 <IKS01A3_MOTION_SENSOR_Disable_Wake_Up_Detection>
 8003238:	2800      	cmp	r0, #0
 800323a:	d1e5      	bne.n	8003208 <MOTION_EXT_Disable_Feature+0x58>
    EXT_OFF_HW_FEATURE(EXT_HWF_WAKE_UP);
 800323c:	4a13      	ldr	r2, [pc, #76]	; (800328c <MOTION_EXT_Disable_Feature+0xdc>)
 800323e:	6813      	ldr	r3, [r2, #0]
 8003240:	f023 0310 	bic.w	r3, r3, #16
 8003244:	6013      	str	r3, [r2, #0]
 8003246:	e7df      	b.n	8003208 <MOTION_EXT_Disable_Feature+0x58>
  if (IKS01A3_MOTION_SENSOR_Disable_Free_Fall_Detection(IKS01A3_LSM6DSO_0) != BSP_ERROR_NONE)
 8003248:	2000      	movs	r0, #0
 800324a:	f006 fe05 	bl	8009e58 <IKS01A3_MOTION_SENSOR_Disable_Free_Fall_Detection>
 800324e:	2800      	cmp	r0, #0
 8003250:	d1da      	bne.n	8003208 <MOTION_EXT_Disable_Feature+0x58>
    EXT_OFF_HW_FEATURE(EXT_HWF_FREE_FALL);
 8003252:	4a0e      	ldr	r2, [pc, #56]	; (800328c <MOTION_EXT_Disable_Feature+0xdc>)
 8003254:	6813      	ldr	r3, [r2, #0]
 8003256:	f023 0302 	bic.w	r3, r3, #2
 800325a:	6013      	str	r3, [r2, #0]
 800325c:	e7d4      	b.n	8003208 <MOTION_EXT_Disable_Feature+0x58>
  if (IKS01A3_MOTION_SENSOR_Disable_Tilt_Detection(IKS01A3_LSM6DSO_0) != BSP_ERROR_NONE)
 800325e:	2000      	movs	r0, #0
 8003260:	f006 fe86 	bl	8009f70 <IKS01A3_MOTION_SENSOR_Disable_Tilt_Detection>
 8003264:	2800      	cmp	r0, #0
 8003266:	d1cf      	bne.n	8003208 <MOTION_EXT_Disable_Feature+0x58>
    EXT_OFF_HW_FEATURE(EXT_HWF_TILT);
 8003268:	4a08      	ldr	r2, [pc, #32]	; (800328c <MOTION_EXT_Disable_Feature+0xdc>)
 800326a:	6813      	ldr	r3, [r2, #0]
 800326c:	f023 0320 	bic.w	r3, r3, #32
 8003270:	6013      	str	r3, [r2, #0]
 8003272:	e7c9      	b.n	8003208 <MOTION_EXT_Disable_Feature+0x58>
  if (IKS01A3_MOTION_SENSOR_Disable_Single_Tap_Detection(IKS01A3_LSM6DSO_0) != BSP_ERROR_NONE)
 8003274:	2000      	movs	r0, #0
 8003276:	f006 fedf 	bl	800a038 <IKS01A3_MOTION_SENSOR_Disable_Single_Tap_Detection>
 800327a:	2800      	cmp	r0, #0
 800327c:	d1c4      	bne.n	8003208 <MOTION_EXT_Disable_Feature+0x58>
    EXT_OFF_HW_FEATURE(EXT_HWF_SINGLE_TAP);
 800327e:	4a03      	ldr	r2, [pc, #12]	; (800328c <MOTION_EXT_Disable_Feature+0xdc>)
 8003280:	6813      	ldr	r3, [r2, #0]
 8003282:	f023 0308 	bic.w	r3, r3, #8
 8003286:	6013      	str	r3, [r2, #0]
 8003288:	e7be      	b.n	8003208 <MOTION_EXT_Disable_Feature+0x58>
 800328a:	bf00      	nop
 800328c:	200018ec 	.word	0x200018ec
 8003290:	20001750 	.word	0x20001750

08003294 <MOTION_EXT_ReadCB>:
{
 8003294:	b530      	push	{r4, r5, lr}
  if(EXT_CHECK_HW_FEATURE(EXT_HWF_PEDOMETER))
 8003296:	4b16      	ldr	r3, [pc, #88]	; (80032f0 <MOTION_EXT_ReadCB+0x5c>)
 8003298:	681c      	ldr	r4, [r3, #0]
{
 800329a:	b083      	sub	sp, #12
  uint16_t StepCount = 0;
 800329c:	2000      	movs	r0, #0
  if(EXT_CHECK_HW_FEATURE(EXT_HWF_PEDOMETER))
 800329e:	f014 0401 	ands.w	r4, r4, #1
  uint16_t StepCount = 0;
 80032a2:	f8ad 0002 	strh.w	r0, [sp, #2]
  if(EXT_CHECK_HW_FEATURE(EXT_HWF_PEDOMETER))
 80032a6:	d119      	bne.n	80032dc <MOTION_EXT_ReadCB+0x48>
 80032a8:	4625      	mov	r5, r4
    STORE_LE_16(valueSmall, (HAL_GetTick()>>3));
 80032aa:	f007 f8d1 	bl	800a450 <HAL_GetTick>
 80032ae:	08c0      	lsrs	r0, r0, #3
 80032b0:	f88d 0004 	strb.w	r0, [sp, #4]
 80032b4:	f007 f8cc 	bl	800a450 <HAL_GetTick>
  if(MOTION_EXT_Server_App_Context.NotificationStatus)
 80032b8:	4b0e      	ldr	r3, [pc, #56]	; (80032f4 <MOTION_EXT_ReadCB+0x60>)
    STORE_LE_16(valueSmall+2, Command);
 80032ba:	f88d 5006 	strb.w	r5, [sp, #6]
  if(MOTION_EXT_Server_App_Context.NotificationStatus)
 80032be:	781b      	ldrb	r3, [r3, #0]
    STORE_LE_16(valueSmall+2, Command);
 80032c0:	f88d 4007 	strb.w	r4, [sp, #7]
    STORE_LE_16(valueSmall, (HAL_GetTick()>>3));
 80032c4:	0ac0      	lsrs	r0, r0, #11
 80032c6:	f88d 0005 	strb.w	r0, [sp, #5]
  if(MOTION_EXT_Server_App_Context.NotificationStatus)
 80032ca:	b12b      	cbz	r3, 80032d8 <MOTION_EXT_ReadCB+0x44>
      MOTENV_STM_App_Update_Char(ACC_EVENT_CHAR_UUID, VALUE_LEN_SMALL, (uint8_t *)&valueSmall);
 80032cc:	2104      	movs	r1, #4
 80032ce:	4608      	mov	r0, r1
 80032d0:	eb0d 0201 	add.w	r2, sp, r1
 80032d4:	f009 ffb8 	bl	800d248 <MOTENV_STM_App_Update_Char>
}
 80032d8:	b003      	add	sp, #12
 80032da:	bd30      	pop	{r4, r5, pc}
    IKS01A3_MOTION_SENSOR_Get_Step_Count(IKS01A3_LSM6DSO_0, &StepCount); 
 80032dc:	f10d 0102 	add.w	r1, sp, #2
 80032e0:	f006 fe1e 	bl	8009f20 <IKS01A3_MOTION_SENSOR_Get_Step_Count>
 80032e4:	f8bd 4002 	ldrh.w	r4, [sp, #2]
 80032e8:	b2e5      	uxtb	r5, r4
 80032ea:	0a24      	lsrs	r4, r4, #8
 80032ec:	e7dd      	b.n	80032aa <MOTION_EXT_ReadCB+0x16>
 80032ee:	bf00      	nop
 80032f0:	200018ec 	.word	0x200018ec
 80032f4:	20001750 	.word	0x20001750

080032f8 <MOTION_EXT_Handle_IT>:
{
 80032f8:	b570      	push	{r4, r5, r6, lr}
 80032fa:	b086      	sub	sp, #24
  if (IKS01A3_MOTION_SENSOR_Get_Event_Status(IKS01A3_LSM6DSO_0, &status) != BSP_ERROR_NONE)
 80032fc:	a903      	add	r1, sp, #12
 80032fe:	2000      	movs	r0, #0
 8003300:	f006 fd78 	bl	8009df4 <IKS01A3_MOTION_SENSOR_Get_Event_Status>
 8003304:	2800      	cmp	r0, #0
 8003306:	d131      	bne.n	800336c <MOTION_EXT_Handle_IT+0x74>
  if((EXT_CHECK_HW_FEATURE(EXT_HWF_PEDOMETER)) ||
 8003308:	4db4      	ldr	r5, [pc, #720]	; (80035dc <MOTION_EXT_Handle_IT+0x2e4>)
 800330a:	682b      	ldr	r3, [r5, #0]
 800330c:	07dc      	lsls	r4, r3, #31
 800330e:	d52f      	bpl.n	8003370 <MOTION_EXT_Handle_IT+0x78>
    if(status.StepStatus != 0)
 8003310:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8003314:	06d1      	lsls	r1, r2, #27
 8003316:	d431      	bmi.n	800337c <MOTION_EXT_Handle_IT+0x84>
  if((EXT_CHECK_HW_FEATURE(EXT_HWF_FREE_FALL)) ||
 8003318:	079e      	lsls	r6, r3, #30
 800331a:	f100 8086 	bmi.w	800342a <MOTION_EXT_Handle_IT+0x132>
 800331e:	061c      	lsls	r4, r3, #24
 8003320:	f100 8083 	bmi.w	800342a <MOTION_EXT_Handle_IT+0x132>
  if((EXT_CHECK_HW_FEATURE(EXT_HWF_SINGLE_TAP)) ||
 8003324:	0719      	lsls	r1, r3, #28
 8003326:	d465      	bmi.n	80033f4 <MOTION_EXT_Handle_IT+0xfc>
 8003328:	061a      	lsls	r2, r3, #24
 800332a:	d463      	bmi.n	80033f4 <MOTION_EXT_Handle_IT+0xfc>
  if((EXT_CHECK_HW_FEATURE(EXT_HWF_DOUBLE_TAP)) ||
 800332c:	075c      	lsls	r4, r3, #29
 800332e:	d446      	bmi.n	80033be <MOTION_EXT_Handle_IT+0xc6>
 8003330:	0618      	lsls	r0, r3, #24
 8003332:	d444      	bmi.n	80033be <MOTION_EXT_Handle_IT+0xc6>
  if((EXT_CHECK_HW_FEATURE(EXT_HWF_TILT)) ||
 8003334:	069a      	lsls	r2, r3, #26
 8003336:	d402      	bmi.n	800333e <MOTION_EXT_Handle_IT+0x46>
 8003338:	061e      	lsls	r6, r3, #24
 800333a:	f140 80b7 	bpl.w	80034ac <MOTION_EXT_Handle_IT+0x1b4>
    if(status.TiltStatus != 0)
 800333e:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8003342:	0694      	lsls	r4, r2, #26
 8003344:	f100 80cd 	bmi.w	80034e2 <MOTION_EXT_Handle_IT+0x1ea>
  if((EXT_CHECK_HW_FEATURE(EXT_HWF_6D_ORIENTATION)) ||
 8003348:	0658      	lsls	r0, r3, #25
 800334a:	f140 808a 	bpl.w	8003462 <MOTION_EXT_Handle_IT+0x16a>
    if(status.D6DOrientationStatus != 0)
 800334e:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8003352:	0652      	lsls	r2, r2, #25
 8003354:	f100 80dc 	bmi.w	8003510 <MOTION_EXT_Handle_IT+0x218>
  if(EXT_CHECK_HW_FEATURE(EXT_HWF_WAKE_UP))
 8003358:	06de      	lsls	r6, r3, #27
 800335a:	d504      	bpl.n	8003366 <MOTION_EXT_Handle_IT+0x6e>
    if(status.WakeUpStatus != 0)
 800335c:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8003360:	0714      	lsls	r4, r2, #28
 8003362:	f100 80a7 	bmi.w	80034b4 <MOTION_EXT_Handle_IT+0x1bc>
  if(EXT_CHECK_HW_FEATURE(EXT_HWF_MULTIPLE_EVENTS))
 8003366:	0618      	lsls	r0, r3, #24
 8003368:	f100 8082 	bmi.w	8003470 <MOTION_EXT_Handle_IT+0x178>
}
 800336c:	b006      	add	sp, #24
 800336e:	bd70      	pop	{r4, r5, r6, pc}
  if((EXT_CHECK_HW_FEATURE(EXT_HWF_PEDOMETER)) ||
 8003370:	0618      	lsls	r0, r3, #24
 8003372:	d5d1      	bpl.n	8003318 <MOTION_EXT_Handle_IT+0x20>
    if(status.StepStatus != 0)
 8003374:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8003378:	06d1      	lsls	r1, r2, #27
 800337a:	d5cd      	bpl.n	8003318 <MOTION_EXT_Handle_IT+0x20>
      IKS01A3_MOTION_SENSOR_Get_Step_Count(IKS01A3_LSM6DSO_0, &MOTION_EXT_Server_App_Context.PedometerStepCount);
 800337c:	4c98      	ldr	r4, [pc, #608]	; (80035e0 <MOTION_EXT_Handle_IT+0x2e8>)
 800337e:	2000      	movs	r0, #0
 8003380:	1ca1      	adds	r1, r4, #2
 8003382:	f006 fdcd 	bl	8009f20 <IKS01A3_MOTION_SENSOR_Get_Step_Count>
      if(EXT_CHECK_HW_FEATURE(EXT_HWF_PEDOMETER))
 8003386:	682b      	ldr	r3, [r5, #0]
 8003388:	07da      	lsls	r2, r3, #31
 800338a:	d5c5      	bpl.n	8003318 <MOTION_EXT_Handle_IT+0x20>
        AccEvent_Notify(MOTION_EXT_Server_App_Context.PedometerStepCount, 2);
 800338c:	8866      	ldrh	r6, [r4, #2]
    STORE_LE_16(valueSmall, (HAL_GetTick()>>3));
 800338e:	f007 f85f 	bl	800a450 <HAL_GetTick>
 8003392:	08c0      	lsrs	r0, r0, #3
 8003394:	f88d 0010 	strb.w	r0, [sp, #16]
 8003398:	f007 f85a 	bl	800a450 <HAL_GetTick>
  if(MOTION_EXT_Server_App_Context.NotificationStatus)
 800339c:	7823      	ldrb	r3, [r4, #0]
    STORE_LE_16(valueSmall+2, Command);
 800339e:	f88d 6012 	strb.w	r6, [sp, #18]
    STORE_LE_16(valueSmall, (HAL_GetTick()>>3));
 80033a2:	0ac0      	lsrs	r0, r0, #11
    STORE_LE_16(valueSmall+2, Command);
 80033a4:	0a36      	lsrs	r6, r6, #8
    STORE_LE_16(valueSmall, (HAL_GetTick()>>3));
 80033a6:	f88d 0011 	strb.w	r0, [sp, #17]
    STORE_LE_16(valueSmall+2, Command);
 80033aa:	f88d 6013 	strb.w	r6, [sp, #19]
  if(MOTION_EXT_Server_App_Context.NotificationStatus)
 80033ae:	b123      	cbz	r3, 80033ba <MOTION_EXT_Handle_IT+0xc2>
      MOTENV_STM_App_Update_Char(ACC_EVENT_CHAR_UUID, VALUE_LEN_SMALL, (uint8_t *)&valueSmall);
 80033b0:	2104      	movs	r1, #4
 80033b2:	4608      	mov	r0, r1
 80033b4:	aa04      	add	r2, sp, #16
 80033b6:	f009 ff47 	bl	800d248 <MOTENV_STM_App_Update_Char>
 80033ba:	682b      	ldr	r3, [r5, #0]
 80033bc:	e7ac      	b.n	8003318 <MOTION_EXT_Handle_IT+0x20>
    if(status.DoubleTapStatus != 0)
 80033be:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80033c2:	0751      	lsls	r1, r2, #29
 80033c4:	d5b6      	bpl.n	8003334 <MOTION_EXT_Handle_IT+0x3c>
    STORE_LE_16(valueSmall, (HAL_GetTick()>>3));
 80033c6:	f007 f843 	bl	800a450 <HAL_GetTick>
 80033ca:	08c0      	lsrs	r0, r0, #3
 80033cc:	f88d 0010 	strb.w	r0, [sp, #16]
 80033d0:	f007 f83e 	bl	800a450 <HAL_GetTick>
  if(MOTION_EXT_Server_App_Context.NotificationStatus)
 80033d4:	4b82      	ldr	r3, [pc, #520]	; (80035e0 <MOTION_EXT_Handle_IT+0x2e8>)
 80033d6:	781b      	ldrb	r3, [r3, #0]
    STORE_LE_16(valueSmall, (HAL_GetTick()>>3));
 80033d8:	0ac0      	lsrs	r0, r0, #11
    STORE_LE_16(valueSmall+2, Command);
 80033da:	2240      	movs	r2, #64	; 0x40
    STORE_LE_16(valueSmall, (HAL_GetTick()>>3));
 80033dc:	f88d 0011 	strb.w	r0, [sp, #17]
    STORE_LE_16(valueSmall+2, Command);
 80033e0:	f8ad 2012 	strh.w	r2, [sp, #18]
  if(MOTION_EXT_Server_App_Context.NotificationStatus)
 80033e4:	b123      	cbz	r3, 80033f0 <MOTION_EXT_Handle_IT+0xf8>
      MOTENV_STM_App_Update_Char(ACC_EVENT_CHAR_UUID, VALUE_LEN_SMALL, (uint8_t *)&valueSmall);
 80033e6:	2104      	movs	r1, #4
 80033e8:	4608      	mov	r0, r1
 80033ea:	aa04      	add	r2, sp, #16
 80033ec:	f009 ff2c 	bl	800d248 <MOTENV_STM_App_Update_Char>
 80033f0:	682b      	ldr	r3, [r5, #0]
 80033f2:	e79f      	b.n	8003334 <MOTION_EXT_Handle_IT+0x3c>
    if(status.TapStatus != 0)
 80033f4:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80033f8:	0796      	lsls	r6, r2, #30
 80033fa:	d597      	bpl.n	800332c <MOTION_EXT_Handle_IT+0x34>
    STORE_LE_16(valueSmall, (HAL_GetTick()>>3));
 80033fc:	f007 f828 	bl	800a450 <HAL_GetTick>
 8003400:	08c0      	lsrs	r0, r0, #3
 8003402:	f88d 0010 	strb.w	r0, [sp, #16]
 8003406:	f007 f823 	bl	800a450 <HAL_GetTick>
  if(MOTION_EXT_Server_App_Context.NotificationStatus)
 800340a:	4b75      	ldr	r3, [pc, #468]	; (80035e0 <MOTION_EXT_Handle_IT+0x2e8>)
 800340c:	781b      	ldrb	r3, [r3, #0]
    STORE_LE_16(valueSmall, (HAL_GetTick()>>3));
 800340e:	0ac0      	lsrs	r0, r0, #11
    STORE_LE_16(valueSmall+2, Command);
 8003410:	2220      	movs	r2, #32
    STORE_LE_16(valueSmall, (HAL_GetTick()>>3));
 8003412:	f88d 0011 	strb.w	r0, [sp, #17]
    STORE_LE_16(valueSmall+2, Command);
 8003416:	f8ad 2012 	strh.w	r2, [sp, #18]
  if(MOTION_EXT_Server_App_Context.NotificationStatus)
 800341a:	b123      	cbz	r3, 8003426 <MOTION_EXT_Handle_IT+0x12e>
      MOTENV_STM_App_Update_Char(ACC_EVENT_CHAR_UUID, VALUE_LEN_SMALL, (uint8_t *)&valueSmall);
 800341c:	2104      	movs	r1, #4
 800341e:	4608      	mov	r0, r1
 8003420:	aa04      	add	r2, sp, #16
 8003422:	f009 ff11 	bl	800d248 <MOTENV_STM_App_Update_Char>
 8003426:	682b      	ldr	r3, [r5, #0]
 8003428:	e780      	b.n	800332c <MOTION_EXT_Handle_IT+0x34>
    if(status.FreeFallStatus != 0)
 800342a:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800342e:	07d0      	lsls	r0, r2, #31
 8003430:	f57f af78 	bpl.w	8003324 <MOTION_EXT_Handle_IT+0x2c>
    STORE_LE_16(valueSmall, (HAL_GetTick()>>3));
 8003434:	f007 f80c 	bl	800a450 <HAL_GetTick>
 8003438:	08c0      	lsrs	r0, r0, #3
 800343a:	f88d 0010 	strb.w	r0, [sp, #16]
 800343e:	f007 f807 	bl	800a450 <HAL_GetTick>
  if(MOTION_EXT_Server_App_Context.NotificationStatus)
 8003442:	4b67      	ldr	r3, [pc, #412]	; (80035e0 <MOTION_EXT_Handle_IT+0x2e8>)
 8003444:	781b      	ldrb	r3, [r3, #0]
    STORE_LE_16(valueSmall, (HAL_GetTick()>>3));
 8003446:	0ac0      	lsrs	r0, r0, #11
    STORE_LE_16(valueSmall+2, Command);
 8003448:	2210      	movs	r2, #16
    STORE_LE_16(valueSmall, (HAL_GetTick()>>3));
 800344a:	f88d 0011 	strb.w	r0, [sp, #17]
    STORE_LE_16(valueSmall+2, Command);
 800344e:	f8ad 2012 	strh.w	r2, [sp, #18]
  if(MOTION_EXT_Server_App_Context.NotificationStatus)
 8003452:	b123      	cbz	r3, 800345e <MOTION_EXT_Handle_IT+0x166>
      MOTENV_STM_App_Update_Char(ACC_EVENT_CHAR_UUID, VALUE_LEN_SMALL, (uint8_t *)&valueSmall);
 8003454:	2104      	movs	r1, #4
 8003456:	4608      	mov	r0, r1
 8003458:	446a      	add	r2, sp
 800345a:	f009 fef5 	bl	800d248 <MOTENV_STM_App_Update_Char>
 800345e:	682b      	ldr	r3, [r5, #0]
 8003460:	e760      	b.n	8003324 <MOTION_EXT_Handle_IT+0x2c>
  if((EXT_CHECK_HW_FEATURE(EXT_HWF_6D_ORIENTATION)) ||
 8003462:	0619      	lsls	r1, r3, #24
 8003464:	f53f af73 	bmi.w	800334e <MOTION_EXT_Handle_IT+0x56>
  if(EXT_CHECK_HW_FEATURE(EXT_HWF_WAKE_UP))
 8003468:	06d9      	lsls	r1, r3, #27
 800346a:	f53f af77 	bmi.w	800335c <MOTION_EXT_Handle_IT+0x64>
 800346e:	e77d      	b.n	800336c <MOTION_EXT_Handle_IT+0x74>
    AccEvent_Notify(MOTION_EXT_Server_App_Context.PedometerStepCount, 3);
 8003470:	4d5b      	ldr	r5, [pc, #364]	; (80035e0 <MOTION_EXT_Handle_IT+0x2e8>)
 8003472:	886c      	ldrh	r4, [r5, #2]
    STORE_LE_16(valueLarge, (HAL_GetTick()>>3));
 8003474:	f006 ffec 	bl	800a450 <HAL_GetTick>
 8003478:	08c0      	lsrs	r0, r0, #3
 800347a:	f88d 0010 	strb.w	r0, [sp, #16]
 800347e:	f006 ffe7 	bl	800a450 <HAL_GetTick>
  if(MOTION_EXT_Server_App_Context.NotificationStatus)
 8003482:	782b      	ldrb	r3, [r5, #0]
    STORE_LE_16(valueLarge+3, Command);
 8003484:	f88d 4013 	strb.w	r4, [sp, #19]
    STORE_LE_16(valueLarge, (HAL_GetTick()>>3));
 8003488:	0ac0      	lsrs	r0, r0, #11
    STORE_LE_16(valueLarge+3, Command);
 800348a:	0a24      	lsrs	r4, r4, #8
    valueLarge[2] = 0;
 800348c:	2200      	movs	r2, #0
    STORE_LE_16(valueLarge+3, Command);
 800348e:	f88d 4014 	strb.w	r4, [sp, #20]
    STORE_LE_16(valueLarge, (HAL_GetTick()>>3));
 8003492:	f88d 0011 	strb.w	r0, [sp, #17]
    valueLarge[2] = 0;
 8003496:	f88d 2012 	strb.w	r2, [sp, #18]
  if(MOTION_EXT_Server_App_Context.NotificationStatus)
 800349a:	2b00      	cmp	r3, #0
 800349c:	f43f af66 	beq.w	800336c <MOTION_EXT_Handle_IT+0x74>
      MOTENV_STM_App_Update_Char(ACC_EVENT_CHAR_UUID, VALUE_LEN_LARGE, (uint8_t *)&valueLarge);
 80034a0:	aa04      	add	r2, sp, #16
 80034a2:	2105      	movs	r1, #5
 80034a4:	2004      	movs	r0, #4
 80034a6:	f009 fecf 	bl	800d248 <MOTENV_STM_App_Update_Char>
 80034aa:	e75f      	b.n	800336c <MOTION_EXT_Handle_IT+0x74>
  if((EXT_CHECK_HW_FEATURE(EXT_HWF_6D_ORIENTATION)) ||
 80034ac:	065a      	lsls	r2, r3, #25
 80034ae:	f53f af4e 	bmi.w	800334e <MOTION_EXT_Handle_IT+0x56>
 80034b2:	e7d9      	b.n	8003468 <MOTION_EXT_Handle_IT+0x170>
    STORE_LE_16(valueSmall, (HAL_GetTick()>>3));
 80034b4:	f006 ffcc 	bl	800a450 <HAL_GetTick>
 80034b8:	08c0      	lsrs	r0, r0, #3
 80034ba:	f88d 0010 	strb.w	r0, [sp, #16]
 80034be:	f006 ffc7 	bl	800a450 <HAL_GetTick>
  if(MOTION_EXT_Server_App_Context.NotificationStatus)
 80034c2:	4b47      	ldr	r3, [pc, #284]	; (80035e0 <MOTION_EXT_Handle_IT+0x2e8>)
 80034c4:	781b      	ldrb	r3, [r3, #0]
    STORE_LE_16(valueSmall, (HAL_GetTick()>>3));
 80034c6:	0ac0      	lsrs	r0, r0, #11
    STORE_LE_16(valueSmall+2, Command);
 80034c8:	2280      	movs	r2, #128	; 0x80
    STORE_LE_16(valueSmall, (HAL_GetTick()>>3));
 80034ca:	f88d 0011 	strb.w	r0, [sp, #17]
    STORE_LE_16(valueSmall+2, Command);
 80034ce:	f8ad 2012 	strh.w	r2, [sp, #18]
  if(MOTION_EXT_Server_App_Context.NotificationStatus)
 80034d2:	b123      	cbz	r3, 80034de <MOTION_EXT_Handle_IT+0x1e6>
      MOTENV_STM_App_Update_Char(ACC_EVENT_CHAR_UUID, VALUE_LEN_SMALL, (uint8_t *)&valueSmall);
 80034d4:	2104      	movs	r1, #4
 80034d6:	4608      	mov	r0, r1
 80034d8:	aa04      	add	r2, sp, #16
 80034da:	f009 feb5 	bl	800d248 <MOTENV_STM_App_Update_Char>
 80034de:	682b      	ldr	r3, [r5, #0]
 80034e0:	e741      	b.n	8003366 <MOTION_EXT_Handle_IT+0x6e>
    STORE_LE_16(valueSmall, (HAL_GetTick()>>3));
 80034e2:	f006 ffb5 	bl	800a450 <HAL_GetTick>
 80034e6:	08c0      	lsrs	r0, r0, #3
 80034e8:	f88d 0010 	strb.w	r0, [sp, #16]
 80034ec:	f006 ffb0 	bl	800a450 <HAL_GetTick>
  if(MOTION_EXT_Server_App_Context.NotificationStatus)
 80034f0:	4b3b      	ldr	r3, [pc, #236]	; (80035e0 <MOTION_EXT_Handle_IT+0x2e8>)
 80034f2:	781b      	ldrb	r3, [r3, #0]
    STORE_LE_16(valueSmall, (HAL_GetTick()>>3));
 80034f4:	0ac0      	lsrs	r0, r0, #11
    STORE_LE_16(valueSmall+2, Command);
 80034f6:	2208      	movs	r2, #8
    STORE_LE_16(valueSmall, (HAL_GetTick()>>3));
 80034f8:	f88d 0011 	strb.w	r0, [sp, #17]
    STORE_LE_16(valueSmall+2, Command);
 80034fc:	f8ad 2012 	strh.w	r2, [sp, #18]
  if(MOTION_EXT_Server_App_Context.NotificationStatus)
 8003500:	b123      	cbz	r3, 800350c <MOTION_EXT_Handle_IT+0x214>
      MOTENV_STM_App_Update_Char(ACC_EVENT_CHAR_UUID, VALUE_LEN_SMALL, (uint8_t *)&valueSmall);
 8003502:	2104      	movs	r1, #4
 8003504:	4608      	mov	r0, r1
 8003506:	aa04      	add	r2, sp, #16
 8003508:	f009 fe9e 	bl	800d248 <MOTENV_STM_App_Update_Char>
 800350c:	682b      	ldr	r3, [r5, #0]
 800350e:	e71b      	b.n	8003348 <MOTION_EXT_Handle_IT+0x50>
  uint8_t xl = 0;
 8003510:	2400      	movs	r4, #0
  if (IKS01A3_MOTION_SENSOR_Get_6D_Orientation_XL(IKS01A3_LSM6DSO_0, &xl) != BSP_ERROR_NONE)
 8003512:	f10d 0107 	add.w	r1, sp, #7
 8003516:	4620      	mov	r0, r4
  uint8_t xl = 0;
 8003518:	f88d 4007 	strb.w	r4, [sp, #7]
  uint8_t xh = 0;
 800351c:	f88d 4008 	strb.w	r4, [sp, #8]
  uint8_t yl = 0;
 8003520:	f88d 4009 	strb.w	r4, [sp, #9]
  uint8_t yh = 0;
 8003524:	f88d 400a 	strb.w	r4, [sp, #10]
  uint8_t zl = 0;
 8003528:	f88d 400b 	strb.w	r4, [sp, #11]
  uint8_t zh = 0;
 800352c:	f88d 4010 	strb.w	r4, [sp, #16]
  if (IKS01A3_MOTION_SENSOR_Get_6D_Orientation_XL(IKS01A3_LSM6DSO_0, &xl) != BSP_ERROR_NONE)
 8003530:	f006 fe0e 	bl	800a150 <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_XL>
  if (IKS01A3_MOTION_SENSOR_Get_6D_Orientation_XH(IKS01A3_LSM6DSO_0, &xh) != BSP_ERROR_NONE)
 8003534:	a902      	add	r1, sp, #8
 8003536:	4620      	mov	r0, r4
 8003538:	f006 fe28 	bl	800a18c <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_XH>
  if (IKS01A3_MOTION_SENSOR_Get_6D_Orientation_YL(IKS01A3_LSM6DSO_0, &yl) != BSP_ERROR_NONE)
 800353c:	f10d 0109 	add.w	r1, sp, #9
 8003540:	4620      	mov	r0, r4
 8003542:	f006 fe41 	bl	800a1c8 <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_YL>
  if (IKS01A3_MOTION_SENSOR_Get_6D_Orientation_YH(IKS01A3_LSM6DSO_0, &yh) != BSP_ERROR_NONE)
 8003546:	f10d 010a 	add.w	r1, sp, #10
 800354a:	4620      	mov	r0, r4
 800354c:	f006 fe5a 	bl	800a204 <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_YH>
  if (IKS01A3_MOTION_SENSOR_Get_6D_Orientation_ZL(IKS01A3_LSM6DSO_0, &zl) != BSP_ERROR_NONE)
 8003550:	f10d 010b 	add.w	r1, sp, #11
 8003554:	4620      	mov	r0, r4
 8003556:	f006 fe73 	bl	800a240 <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_ZL>
  if (IKS01A3_MOTION_SENSOR_Get_6D_Orientation_ZH(IKS01A3_LSM6DSO_0, &zh) != BSP_ERROR_NONE)
 800355a:	4620      	mov	r0, r4
 800355c:	a904      	add	r1, sp, #16
 800355e:	f006 fe8d 	bl	800a27c <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_ZH>
  if (xl == 0U && yl == 0U && zl == 0U && xh == 0U && yh == 1U && zh == 0U)
 8003562:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8003566:	2a00      	cmp	r2, #0
 8003568:	d13c      	bne.n	80035e4 <MOTION_EXT_Handle_IT+0x2ec>
 800356a:	f89d 4009 	ldrb.w	r4, [sp, #9]
 800356e:	2c00      	cmp	r4, #0
 8003570:	d14e      	bne.n	8003610 <MOTION_EXT_Handle_IT+0x318>
 8003572:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d161      	bne.n	800363e <MOTION_EXT_Handle_IT+0x346>
 800357a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800357e:	b91b      	cbnz	r3, 8003588 <MOTION_EXT_Handle_IT+0x290>
 8003580:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8003584:	2b01      	cmp	r3, #1
 8003586:	d075      	beq.n	8003674 <MOTION_EXT_Handle_IT+0x37c>
  else if (xl == 0U && yl == 0U && zl == 0U && xh == 1U && yh == 0U && zh == 0U)
 8003588:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800358c:	2b01      	cmp	r3, #1
 800358e:	d067      	beq.n	8003660 <MOTION_EXT_Handle_IT+0x368>
  else if (xl == 0U && yl == 0U && zl == 0U && xh == 0U && yh == 0U && zh == 1U)
 8003590:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8003594:	2c00      	cmp	r4, #0
 8003596:	d14e      	bne.n	8003636 <MOTION_EXT_Handle_IT+0x33e>
 8003598:	f89d 300a 	ldrb.w	r3, [sp, #10]
 800359c:	b92b      	cbnz	r3, 80035aa <MOTION_EXT_Handle_IT+0x2b2>
 800359e:	f89d 3010 	ldrb.w	r3, [sp, #16]
  MOTION_EXT_Server_App_AccEvent_t OrientationResult = ACC_NOT_USED;
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	bf0c      	ite	eq
 80035a6:	2405      	moveq	r4, #5
 80035a8:	2400      	movne	r4, #0
    STORE_LE_16(valueSmall, (HAL_GetTick()>>3));
 80035aa:	f006 ff51 	bl	800a450 <HAL_GetTick>
 80035ae:	08c0      	lsrs	r0, r0, #3
 80035b0:	f88d 0010 	strb.w	r0, [sp, #16]
 80035b4:	f006 ff4c 	bl	800a450 <HAL_GetTick>
  if(MOTION_EXT_Server_App_Context.NotificationStatus)
 80035b8:	4b09      	ldr	r3, [pc, #36]	; (80035e0 <MOTION_EXT_Handle_IT+0x2e8>)
    STORE_LE_16(valueSmall+2, Command);
 80035ba:	f88d 4012 	strb.w	r4, [sp, #18]
  if(MOTION_EXT_Server_App_Context.NotificationStatus)
 80035be:	781b      	ldrb	r3, [r3, #0]
    STORE_LE_16(valueSmall, (HAL_GetTick()>>3));
 80035c0:	0ac0      	lsrs	r0, r0, #11
    STORE_LE_16(valueSmall+2, Command);
 80035c2:	2200      	movs	r2, #0
    STORE_LE_16(valueSmall, (HAL_GetTick()>>3));
 80035c4:	f88d 0011 	strb.w	r0, [sp, #17]
    STORE_LE_16(valueSmall+2, Command);
 80035c8:	f88d 2013 	strb.w	r2, [sp, #19]
  if(MOTION_EXT_Server_App_Context.NotificationStatus)
 80035cc:	b123      	cbz	r3, 80035d8 <MOTION_EXT_Handle_IT+0x2e0>
      MOTENV_STM_App_Update_Char(ACC_EVENT_CHAR_UUID, VALUE_LEN_SMALL, (uint8_t *)&valueSmall);
 80035ce:	2104      	movs	r1, #4
 80035d0:	aa04      	add	r2, sp, #16
 80035d2:	4608      	mov	r0, r1
 80035d4:	f009 fe38 	bl	800d248 <MOTENV_STM_App_Update_Char>
 80035d8:	682b      	ldr	r3, [r5, #0]
 80035da:	e6bd      	b.n	8003358 <MOTION_EXT_Handle_IT+0x60>
 80035dc:	200018ec 	.word	0x200018ec
 80035e0:	20001750 	.word	0x20001750
  else if (xl == 1U && yl == 0U && zl == 0U && xh == 0U && yh == 0U && zh == 0U)
 80035e4:	2a01      	cmp	r2, #1
 80035e6:	d1e0      	bne.n	80035aa <MOTION_EXT_Handle_IT+0x2b2>
 80035e8:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d1dc      	bne.n	80035aa <MOTION_EXT_Handle_IT+0x2b2>
 80035f0:	f89d 400b 	ldrb.w	r4, [sp, #11]
 80035f4:	bb0c      	cbnz	r4, 800363a <MOTION_EXT_Handle_IT+0x342>
 80035f6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d1d5      	bne.n	80035aa <MOTION_EXT_Handle_IT+0x2b2>
 80035fe:	f89d 200a 	ldrb.w	r2, [sp, #10]
 8003602:	b9d2      	cbnz	r2, 800363a <MOTION_EXT_Handle_IT+0x342>
 8003604:	f89d 4010 	ldrb.w	r4, [sp, #16]
    OrientationResult = ACC_6D_OR_RIGTH;
 8003608:	fab4 f484 	clz	r4, r4
 800360c:	0964      	lsrs	r4, r4, #5
 800360e:	e7cc      	b.n	80035aa <MOTION_EXT_Handle_IT+0x2b2>
  else if (xl == 0U && yl == 1U && zl == 0U && xh == 0U && yh == 0U && zh == 0U)
 8003610:	2c01      	cmp	r4, #1
 8003612:	d110      	bne.n	8003636 <MOTION_EXT_Handle_IT+0x33e>
 8003614:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8003618:	b96b      	cbnz	r3, 8003636 <MOTION_EXT_Handle_IT+0x33e>
 800361a:	f89d 4008 	ldrb.w	r4, [sp, #8]
 800361e:	b964      	cbnz	r4, 800363a <MOTION_EXT_Handle_IT+0x342>
 8003620:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d1c0      	bne.n	80035aa <MOTION_EXT_Handle_IT+0x2b2>
 8003628:	f89d 3010 	ldrb.w	r3, [sp, #16]
    OrientationResult = ACC_6D_OR_LEFT;
 800362c:	2b00      	cmp	r3, #0
 800362e:	bf14      	ite	ne
 8003630:	2400      	movne	r4, #0
 8003632:	2402      	moveq	r4, #2
 8003634:	e7b9      	b.n	80035aa <MOTION_EXT_Handle_IT+0x2b2>
  MOTION_EXT_Server_App_AccEvent_t OrientationResult = ACC_NOT_USED;
 8003636:	2400      	movs	r4, #0
 8003638:	e7b7      	b.n	80035aa <MOTION_EXT_Handle_IT+0x2b2>
 800363a:	461c      	mov	r4, r3
 800363c:	e7b5      	b.n	80035aa <MOTION_EXT_Handle_IT+0x2b2>
  else if (xl == 0U && yl == 0U && zl == 1U && xh == 0U && yh == 0U && zh == 0U)
 800363e:	2b01      	cmp	r3, #1
 8003640:	d1b3      	bne.n	80035aa <MOTION_EXT_Handle_IT+0x2b2>
 8003642:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d1af      	bne.n	80035aa <MOTION_EXT_Handle_IT+0x2b2>
 800364a:	f89d 200a 	ldrb.w	r2, [sp, #10]
 800364e:	2a00      	cmp	r2, #0
 8003650:	d1f3      	bne.n	800363a <MOTION_EXT_Handle_IT+0x342>
 8003652:	f89d 3010 	ldrb.w	r3, [sp, #16]
    OrientationResult = ACC_6D_OR_DOWN;
 8003656:	2b00      	cmp	r3, #0
 8003658:	bf14      	ite	ne
 800365a:	2400      	movne	r4, #0
 800365c:	2406      	moveq	r4, #6
 800365e:	e7a4      	b.n	80035aa <MOTION_EXT_Handle_IT+0x2b2>
  else if (xl == 0U && yl == 0U && zl == 0U && xh == 1U && yh == 0U && zh == 0U)
 8003660:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d193      	bne.n	8003590 <MOTION_EXT_Handle_IT+0x298>
 8003668:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d18f      	bne.n	8003590 <MOTION_EXT_Handle_IT+0x298>
    OrientationResult = ACC_6D_OR_BOTTOM;
 8003670:	2403      	movs	r4, #3
 8003672:	e79a      	b.n	80035aa <MOTION_EXT_Handle_IT+0x2b2>
  if (xl == 0U && yl == 0U && zl == 0U && xh == 0U && yh == 1U && zh == 0U)
 8003674:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d185      	bne.n	8003588 <MOTION_EXT_Handle_IT+0x290>
    OrientationResult = ACC_6D_OR_RIGTH;
 800367c:	2404      	movs	r4, #4
 800367e:	e794      	b.n	80035aa <MOTION_EXT_Handle_IT+0x2b2>

08003680 <MOTION_Context_Init>:
 * @brief  Init the HW/Motion Service/Char Context
 * @param  None
 * @retval None
 */
void MOTION_Context_Init(void)
{
 8003680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Motion Sensors */
  (void)IKS01A3_MOTION_SENSOR_Init(IKS01A3_LSM6DSO_0, MOTION_ACCELERO | MOTION_GYRO);
 8003682:	2103      	movs	r1, #3
 8003684:	2000      	movs	r0, #0
 8003686:	f006 f92b 	bl	80098e0 <IKS01A3_MOTION_SENSOR_Init>
  (void)IKS01A3_MOTION_SENSOR_Init(IKS01A3_LIS2DW12_0, MOTION_ACCELERO);
 800368a:	2102      	movs	r1, #2
 800368c:	2001      	movs	r0, #1
 800368e:	f006 f927 	bl	80098e0 <IKS01A3_MOTION_SENSOR_Init>
  (void)IKS01A3_MOTION_SENSOR_Init(IKS01A3_LIS2MDL_0, MOTION_MAGNETO);
 8003692:	2104      	movs	r1, #4
 8003694:	2002      	movs	r0, #2
 8003696:	f006 f923 	bl	80098e0 <IKS01A3_MOTION_SENSOR_Init>

  MOTION_Server_App_Context.hasAcc = 0;
 800369a:	2700      	movs	r7, #0
 800369c:	4e1e      	ldr	r6, [pc, #120]	; (8003718 <MOTION_Context_Init+0x98>)
 800369e:	4c1f      	ldr	r4, [pc, #124]	; (800371c <MOTION_Context_Init+0x9c>)
 80036a0:	8537      	strh	r7, [r6, #40]	; 0x28
  * @retval None
  */
void MOTION_Set2G_Accelerometer_FullScale(void)
{
  /* Set Full Scale to +/-2g */
  IKS01A3_MOTION_SENSOR_SetFullScale(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, 2);
 80036a2:	2202      	movs	r2, #2
 80036a4:	4638      	mov	r0, r7
 80036a6:	4611      	mov	r1, r2
  MOTION_Server_App_Context.hasGyro = 0;
 80036a8:	f886 702a 	strb.w	r7, [r6, #42]	; 0x2a
 * @param  status The new notification status
 * @retval None
 */
void MOTION_Set_Notification_Status(uint8_t status)
{
  MOTION_Server_App_Context.NotificationStatus = status;
 80036ac:	463d      	mov	r5, r7
  IKS01A3_MOTION_SENSOR_SetFullScale(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, 2);
 80036ae:	f006 fb75 	bl	8009d9c <IKS01A3_MOTION_SENSOR_SetFullScale>
  MOTION_Server_App_Context.NotificationStatus = status;
 80036b2:	7037      	strb	r7, [r6, #0]
  for(i = 0; i < IKS01A3_MOTION_INSTANCES_NBR; i++)
  {
    IKS01A3_MOTION_SENSOR_GetCapabilities(i, &MotionCapabilities[i]);
    if(MotionCapabilities[i].Acc)
    {
      MOTION_Server_App_Context.hasAcc = 1;
 80036b4:	2701      	movs	r7, #1
    IKS01A3_MOTION_SENSOR_GetCapabilities(i, &MotionCapabilities[i]);
 80036b6:	4628      	mov	r0, r5
 80036b8:	4621      	mov	r1, r4
 80036ba:	f006 fad3 	bl	8009c64 <IKS01A3_MOTION_SENSOR_GetCapabilities>
    if(MotionCapabilities[i].Acc)
 80036be:	7823      	ldrb	r3, [r4, #0]
 80036c0:	3501      	adds	r5, #1
 80036c2:	b10b      	cbz	r3, 80036c8 <MOTION_Context_Init+0x48>
      MOTION_Server_App_Context.hasAcc = 1;
 80036c4:	f886 7028 	strb.w	r7, [r6, #40]	; 0x28
    }
    if(MotionCapabilities[i].Gyro)
 80036c8:	7863      	ldrb	r3, [r4, #1]
 80036ca:	b10b      	cbz	r3, 80036d0 <MOTION_Context_Init+0x50>
    {
      MOTION_Server_App_Context.hasGyro = 1;
 80036cc:	f886 7029 	strb.w	r7, [r6, #41]	; 0x29
    }
    if(MotionCapabilities[i].Magneto)
 80036d0:	78a3      	ldrb	r3, [r4, #2]
 80036d2:	341c      	adds	r4, #28
 80036d4:	b10b      	cbz	r3, 80036da <MOTION_Context_Init+0x5a>
    {
      MOTION_Server_App_Context.hasMag = 1;
 80036d6:	f886 702a 	strb.w	r7, [r6, #42]	; 0x2a
  for(i = 0; i < IKS01A3_MOTION_INSTANCES_NBR; i++)
 80036da:	2d03      	cmp	r5, #3
 80036dc:	d1eb      	bne.n	80036b6 <MOTION_Context_Init+0x36>
    }
  }

  /* Update BLE ADV field (Motion) */
  if(MOTION_Server_App_Context.hasAcc)
 80036de:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
 80036e2:	b143      	cbz	r3, 80036f6 <MOTION_Context_Init+0x76>
  {
    manuf_data[5] |= 0x80; /* Acc value */
 80036e4:	4b0e      	ldr	r3, [pc, #56]	; (8003720 <MOTION_Context_Init+0xa0>)
 80036e6:	7959      	ldrb	r1, [r3, #5]
    manuf_data[6] |= 0x04; /* Extended Acc events */
 80036e8:	799a      	ldrb	r2, [r3, #6]
    manuf_data[5] |= 0x80; /* Acc value */
 80036ea:	f061 017f 	orn	r1, r1, #127	; 0x7f
    manuf_data[6] |= 0x04; /* Extended Acc events */
 80036ee:	f042 0204 	orr.w	r2, r2, #4
    manuf_data[5] |= 0x80; /* Acc value */
 80036f2:	7159      	strb	r1, [r3, #5]
    manuf_data[6] |= 0x04; /* Extended Acc events */
 80036f4:	719a      	strb	r2, [r3, #6]
  }
  if(MOTION_Server_App_Context.hasGyro)
 80036f6:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
 80036fa:	b123      	cbz	r3, 8003706 <MOTION_Context_Init+0x86>
  {
    manuf_data[5] |= 0x40; /* Gyro value */
 80036fc:	4a08      	ldr	r2, [pc, #32]	; (8003720 <MOTION_Context_Init+0xa0>)
 80036fe:	7953      	ldrb	r3, [r2, #5]
 8003700:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003704:	7153      	strb	r3, [r2, #5]
  }
  if(MOTION_Server_App_Context.hasMag)
 8003706:	f896 302a 	ldrb.w	r3, [r6, #42]	; 0x2a
 800370a:	b123      	cbz	r3, 8003716 <MOTION_Context_Init+0x96>
  {
    manuf_data[5] |= 0x20; /* Mag value */
 800370c:	4a04      	ldr	r2, [pc, #16]	; (8003720 <MOTION_Context_Init+0xa0>)
 800370e:	7953      	ldrb	r3, [r2, #5]
 8003710:	f043 0320 	orr.w	r3, r3, #32
 8003714:	7153      	strb	r3, [r2, #5]
}
 8003716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003718:	20001758 	.word	0x20001758
 800371c:	200018f0 	.word	0x200018f0
 8003720:	2000000c 	.word	0x2000000c

08003724 <MOTION_Set_Notification_Status>:
  MOTION_Server_App_Context.NotificationStatus = status;
 8003724:	4b01      	ldr	r3, [pc, #4]	; (800372c <MOTION_Set_Notification_Status+0x8>)
 8003726:	7018      	strb	r0, [r3, #0]
}
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop
 800372c:	20001758 	.word	0x20001758

08003730 <MOTION_Send_Notification_Task>:
{
 8003730:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(MOTION_Server_App_Context.hasAcc == 1)
 8003732:	4c92      	ldr	r4, [pc, #584]	; (800397c <MOTION_Send_Notification_Task+0x24c>)
 8003734:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8003738:	2b01      	cmp	r3, #1
{
 800373a:	b08d      	sub	sp, #52	; 0x34
    if(MOTION_Server_App_Context.hasAcc == 1)
 800373c:	f000 810f 	beq.w	800395e <MOTION_Send_Notification_Task+0x22e>
    if(MOTION_Server_App_Context.hasGyro == 1)
 8003740:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
 8003744:	2901      	cmp	r1, #1
 8003746:	f000 80fc 	beq.w	8003942 <MOTION_Send_Notification_Task+0x212>
    if(MOTION_Server_App_Context.hasMag == 1)
 800374a:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 800374e:	2b01      	cmp	r3, #1
 8003750:	f000 80e8 	beq.w	8003924 <MOTION_Send_Notification_Task+0x1f4>
    if(MOTION_Server_App_Context.hasAcc == 1)
 8003754:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
 8003758:	2801      	cmp	r0, #1
 800375a:	f000 80d5 	beq.w	8003908 <MOTION_Send_Notification_Task+0x1d8>
    if(MOTION_Server_App_Context.hasGyro == 1)
 800375e:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
 8003762:	2901      	cmp	r1, #1
 8003764:	f000 80c2 	beq.w	80038ec <MOTION_Send_Notification_Task+0x1bc>
    if(MOTION_Server_App_Context.hasMag == 1)
 8003768:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
 800376c:	2801      	cmp	r0, #1
 800376e:	f000 80af 	beq.w	80038d0 <MOTION_Send_Notification_Task+0x1a0>
    if(MOTION_Server_App_Context.hasAcc == 1)
 8003772:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8003776:	2b01      	cmp	r3, #1
 8003778:	f000 809b 	beq.w	80038b2 <MOTION_Send_Notification_Task+0x182>
    if(MOTION_Server_App_Context.hasGyro == 1)
 800377c:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
 8003780:	2901      	cmp	r1, #1
 8003782:	f000 8088 	beq.w	8003896 <MOTION_Send_Notification_Task+0x166>
    if(MOTION_Server_App_Context.hasMag == 1)
 8003786:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 800378a:	2b01      	cmp	r3, #1
 800378c:	d075      	beq.n	800387a <MOTION_Send_Notification_Task+0x14a>
  STORE_LE_16(value, (HAL_GetTick()>>3));
 800378e:	f006 fe5f 	bl	800a450 <HAL_GetTick>
 8003792:	08c0      	lsrs	r0, r0, #3
 8003794:	f88d 001c 	strb.w	r0, [sp, #28]
 8003798:	f006 fe5a 	bl	800a450 <HAL_GetTick>
  if(MOTION_Server_App_Context.hasAcc == 1)
 800379c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  STORE_LE_16(value, (HAL_GetTick()>>3));
 80037a0:	0ac0      	lsrs	r0, r0, #11
  if(MOTION_Server_App_Context.hasAcc == 1)
 80037a2:	2b01      	cmp	r3, #1
  STORE_LE_16(value, (HAL_GetTick()>>3));
 80037a4:	f88d 001d 	strb.w	r0, [sp, #29]
  if(MOTION_Server_App_Context.hasAcc == 1)
 80037a8:	d111      	bne.n	80037ce <MOTION_Send_Notification_Task+0x9e>
    STORE_LE_16(value+4, MOTION_Server_App_Context.acceleration.y);
 80037aa:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    STORE_LE_16(value+6, MOTION_Server_App_Context.acceleration.z);
 80037ae:	68e2      	ldr	r2, [r4, #12]
    STORE_LE_16(value+2, MOTION_Server_App_Context.acceleration.x);
 80037b0:	f88d 301e 	strb.w	r3, [sp, #30]
    STORE_LE_16(value+4, MOTION_Server_App_Context.acceleration.y);
 80037b4:	120d      	asrs	r5, r1, #8
    STORE_LE_16(value+2, MOTION_Server_App_Context.acceleration.x);
 80037b6:	121b      	asrs	r3, r3, #8
    STORE_LE_16(value+6, MOTION_Server_App_Context.acceleration.z);
 80037b8:	1210      	asrs	r0, r2, #8
    STORE_LE_16(value+2, MOTION_Server_App_Context.acceleration.x);
 80037ba:	f88d 301f 	strb.w	r3, [sp, #31]
    STORE_LE_16(value+4, MOTION_Server_App_Context.acceleration.y);
 80037be:	f88d 1020 	strb.w	r1, [sp, #32]
 80037c2:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
    STORE_LE_16(value+6, MOTION_Server_App_Context.acceleration.z);
 80037c6:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
 80037ca:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
  if(MOTION_Server_App_Context.hasGyro == 1)
 80037ce:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d124      	bne.n	8003820 <MOTION_Send_Notification_Task+0xf0>
    MOTION_Server_App_Context.angular_velocity.z/=100;
 80037d6:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
    MOTION_Server_App_Context.angular_velocity.x/=100;
 80037da:	4b69      	ldr	r3, [pc, #420]	; (8003980 <MOTION_Send_Notification_Task+0x250>)
 80037dc:	6920      	ldr	r0, [r4, #16]
 80037de:	fb83 6500 	smull	r6, r5, r3, r0
 80037e2:	17c0      	asrs	r0, r0, #31
 80037e4:	ebc0 1065 	rsb	r0, r0, r5, asr #5
    MOTION_Server_App_Context.angular_velocity.y/=100;
 80037e8:	fb83 5601 	smull	r5, r6, r3, r1
    MOTION_Server_App_Context.angular_velocity.z/=100;
 80037ec:	fb83 3502 	smull	r3, r5, r3, r2
    MOTION_Server_App_Context.angular_velocity.y/=100;
 80037f0:	17c9      	asrs	r1, r1, #31
    MOTION_Server_App_Context.angular_velocity.z/=100;
 80037f2:	17d3      	asrs	r3, r2, #31
 80037f4:	ebc3 1365 	rsb	r3, r3, r5, asr #5
    MOTION_Server_App_Context.angular_velocity.y/=100;
 80037f8:	ebc1 1266 	rsb	r2, r1, r6, asr #5
    STORE_LE_16(value+10, MOTION_Server_App_Context.angular_velocity.y);
 80037fc:	1215      	asrs	r5, r2, #8
    STORE_LE_16(value+8, MOTION_Server_App_Context.angular_velocity.x);
 80037fe:	1206      	asrs	r6, r0, #8
    STORE_LE_16(value+12, MOTION_Server_App_Context.angular_velocity.z);
 8003800:	1219      	asrs	r1, r3, #8
    MOTION_Server_App_Context.angular_velocity.x/=100;
 8003802:	6120      	str	r0, [r4, #16]
    STORE_LE_16(value+8, MOTION_Server_App_Context.angular_velocity.x);
 8003804:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
 8003808:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
    MOTION_Server_App_Context.angular_velocity.y/=100;
 800380c:	6162      	str	r2, [r4, #20]
    STORE_LE_16(value+10, MOTION_Server_App_Context.angular_velocity.y);
 800380e:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
 8003812:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
    MOTION_Server_App_Context.angular_velocity.z/=100;
 8003816:	61a3      	str	r3, [r4, #24]
    STORE_LE_16(value+12, MOTION_Server_App_Context.angular_velocity.z);
 8003818:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 800381c:	f88d 1029 	strb.w	r1, [sp, #41]	; 0x29
  if(MOTION_Server_App_Context.hasMag == 1)
 8003820:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8003824:	2b01      	cmp	r3, #1
 8003826:	d009      	beq.n	800383c <MOTION_Send_Notification_Task+0x10c>
  if(MOTION_Server_App_Context.NotificationStatus)
 8003828:	7823      	ldrb	r3, [r4, #0]
 800382a:	b12b      	cbz	r3, 8003838 <MOTION_Send_Notification_Task+0x108>
    MOTENV_STM_App_Update_Char(MOTION_CHAR_UUID, VALUE_LEN_MOTION, (uint8_t *)&value);
 800382c:	aa07      	add	r2, sp, #28
 800382e:	2114      	movs	r1, #20
 8003830:	f44f 4060 	mov.w	r0, #57344	; 0xe000
 8003834:	f009 fd08 	bl	800d248 <MOTENV_STM_App_Update_Char>
}
 8003838:	b00d      	add	sp, #52	; 0x34
 800383a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    AXIS.x = MOTION_Server_App_Context.magnetic_field.x - MOTIONFX_Get_MAG_Offset()->x;
 800383c:	69e5      	ldr	r5, [r4, #28]
 800383e:	f000 fd75 	bl	800432c <MOTIONFX_Get_MAG_Offset>
 8003842:	6803      	ldr	r3, [r0, #0]
    AXIS.y = MOTION_Server_App_Context.magnetic_field.y - MOTIONFX_Get_MAG_Offset()->y;
 8003844:	6a27      	ldr	r7, [r4, #32]
    AXIS.x = MOTION_Server_App_Context.magnetic_field.x - MOTIONFX_Get_MAG_Offset()->x;
 8003846:	1aed      	subs	r5, r5, r3
    AXIS.y = MOTION_Server_App_Context.magnetic_field.y - MOTIONFX_Get_MAG_Offset()->y;
 8003848:	f000 fd70 	bl	800432c <MOTIONFX_Get_MAG_Offset>
 800384c:	6843      	ldr	r3, [r0, #4]
    AXIS.z = MOTION_Server_App_Context.magnetic_field.z - MOTIONFX_Get_MAG_Offset()->z;
 800384e:	6a66      	ldr	r6, [r4, #36]	; 0x24
    AXIS.y = MOTION_Server_App_Context.magnetic_field.y - MOTIONFX_Get_MAG_Offset()->y;
 8003850:	1aff      	subs	r7, r7, r3
    AXIS.z = MOTION_Server_App_Context.magnetic_field.z - MOTIONFX_Get_MAG_Offset()->z;
 8003852:	f000 fd6b 	bl	800432c <MOTIONFX_Get_MAG_Offset>
 8003856:	6883      	ldr	r3, [r0, #8]
    STORE_LE_16(value+14, AXIS.x);
 8003858:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
    AXIS.z = MOTION_Server_App_Context.magnetic_field.z - MOTIONFX_Get_MAG_Offset()->z;
 800385c:	1af3      	subs	r3, r6, r3
    STORE_LE_16(value+14, AXIS.x);
 800385e:	122d      	asrs	r5, r5, #8
    STORE_LE_16(value+16, AXIS.y);
 8003860:	1239      	asrs	r1, r7, #8
    STORE_LE_16(value+18, AXIS.z);
 8003862:	121a      	asrs	r2, r3, #8
    STORE_LE_16(value+14, AXIS.x);
 8003864:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
    STORE_LE_16(value+16, AXIS.y);
 8003868:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
 800386c:	f88d 102d 	strb.w	r1, [sp, #45]	; 0x2d
    STORE_LE_16(value+18, AXIS.z);
 8003870:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 8003874:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
 8003878:	e7d6      	b.n	8003828 <MOTION_Send_Notification_Task+0xf8>
      if (IKS01A3_MOTION_SENSOR_GetAxes(i, MOTION_MAGNETO, &magnetic_field) == 0)
 800387a:	ad07      	add	r5, sp, #28
 800387c:	462a      	mov	r2, r5
 800387e:	2104      	movs	r1, #4
 8003880:	2002      	movs	r0, #2
 8003882:	f006 fa07 	bl	8009c94 <IKS01A3_MOTION_SENSOR_GetAxes>
 8003886:	2800      	cmp	r0, #0
 8003888:	d181      	bne.n	800378e <MOTION_Send_Notification_Task+0x5e>
        MOTION_Server_App_Context.magnetic_field = magnetic_field;
 800388a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800388e:	4b3d      	ldr	r3, [pc, #244]	; (8003984 <MOTION_Send_Notification_Task+0x254>)
 8003890:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003894:	e77b      	b.n	800378e <MOTION_Send_Notification_Task+0x5e>
      if (IKS01A3_MOTION_SENSOR_GetAxes(i, MOTION_GYRO, &angular_velocity) == 0)
 8003896:	ad04      	add	r5, sp, #16
 8003898:	462a      	mov	r2, r5
 800389a:	2002      	movs	r0, #2
 800389c:	f006 f9fa 	bl	8009c94 <IKS01A3_MOTION_SENSOR_GetAxes>
 80038a0:	2800      	cmp	r0, #0
 80038a2:	f47f af70 	bne.w	8003786 <MOTION_Send_Notification_Task+0x56>
        MOTION_Server_App_Context.angular_velocity = angular_velocity;
 80038a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80038aa:	4b37      	ldr	r3, [pc, #220]	; (8003988 <MOTION_Send_Notification_Task+0x258>)
 80038ac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80038b0:	e769      	b.n	8003786 <MOTION_Send_Notification_Task+0x56>
      if (IKS01A3_MOTION_SENSOR_GetAxes(i, MOTION_ACCELERO, &acceleration) == 0)
 80038b2:	ad01      	add	r5, sp, #4
 80038b4:	2102      	movs	r1, #2
 80038b6:	462a      	mov	r2, r5
 80038b8:	4608      	mov	r0, r1
 80038ba:	f006 f9eb 	bl	8009c94 <IKS01A3_MOTION_SENSOR_GetAxes>
 80038be:	2800      	cmp	r0, #0
 80038c0:	f47f af5c 	bne.w	800377c <MOTION_Send_Notification_Task+0x4c>
        MOTION_Server_App_Context.acceleration = acceleration;
 80038c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80038c8:	4b30      	ldr	r3, [pc, #192]	; (800398c <MOTION_Send_Notification_Task+0x25c>)
 80038ca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80038ce:	e755      	b.n	800377c <MOTION_Send_Notification_Task+0x4c>
      if (IKS01A3_MOTION_SENSOR_GetAxes(i, MOTION_MAGNETO, &magnetic_field) == 0)
 80038d0:	ad07      	add	r5, sp, #28
 80038d2:	462a      	mov	r2, r5
 80038d4:	2104      	movs	r1, #4
 80038d6:	f006 f9dd 	bl	8009c94 <IKS01A3_MOTION_SENSOR_GetAxes>
 80038da:	2800      	cmp	r0, #0
 80038dc:	f47f af49 	bne.w	8003772 <MOTION_Send_Notification_Task+0x42>
        MOTION_Server_App_Context.magnetic_field = magnetic_field;
 80038e0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80038e4:	4b27      	ldr	r3, [pc, #156]	; (8003984 <MOTION_Send_Notification_Task+0x254>)
 80038e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80038ea:	e742      	b.n	8003772 <MOTION_Send_Notification_Task+0x42>
      if (IKS01A3_MOTION_SENSOR_GetAxes(i, MOTION_GYRO, &angular_velocity) == 0)
 80038ec:	ad04      	add	r5, sp, #16
 80038ee:	462a      	mov	r2, r5
 80038f0:	4608      	mov	r0, r1
 80038f2:	f006 f9cf 	bl	8009c94 <IKS01A3_MOTION_SENSOR_GetAxes>
 80038f6:	2800      	cmp	r0, #0
 80038f8:	f47f af36 	bne.w	8003768 <MOTION_Send_Notification_Task+0x38>
        MOTION_Server_App_Context.angular_velocity = angular_velocity;
 80038fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003900:	4b21      	ldr	r3, [pc, #132]	; (8003988 <MOTION_Send_Notification_Task+0x258>)
 8003902:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003906:	e72f      	b.n	8003768 <MOTION_Send_Notification_Task+0x38>
      if (IKS01A3_MOTION_SENSOR_GetAxes(i, MOTION_ACCELERO, &acceleration) == 0)
 8003908:	ad01      	add	r5, sp, #4
 800390a:	462a      	mov	r2, r5
 800390c:	2102      	movs	r1, #2
 800390e:	f006 f9c1 	bl	8009c94 <IKS01A3_MOTION_SENSOR_GetAxes>
 8003912:	2800      	cmp	r0, #0
 8003914:	f47f af23 	bne.w	800375e <MOTION_Send_Notification_Task+0x2e>
        MOTION_Server_App_Context.acceleration = acceleration;
 8003918:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800391c:	4b1b      	ldr	r3, [pc, #108]	; (800398c <MOTION_Send_Notification_Task+0x25c>)
 800391e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003922:	e71c      	b.n	800375e <MOTION_Send_Notification_Task+0x2e>
      if (IKS01A3_MOTION_SENSOR_GetAxes(i, MOTION_MAGNETO, &magnetic_field) == 0)
 8003924:	ad07      	add	r5, sp, #28
 8003926:	462a      	mov	r2, r5
 8003928:	2104      	movs	r1, #4
 800392a:	2000      	movs	r0, #0
 800392c:	f006 f9b2 	bl	8009c94 <IKS01A3_MOTION_SENSOR_GetAxes>
 8003930:	2800      	cmp	r0, #0
 8003932:	f47f af0f 	bne.w	8003754 <MOTION_Send_Notification_Task+0x24>
        MOTION_Server_App_Context.magnetic_field = magnetic_field;
 8003936:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800393a:	4b12      	ldr	r3, [pc, #72]	; (8003984 <MOTION_Send_Notification_Task+0x254>)
 800393c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003940:	e708      	b.n	8003754 <MOTION_Send_Notification_Task+0x24>
      if (IKS01A3_MOTION_SENSOR_GetAxes(i, MOTION_GYRO, &angular_velocity) == 0)
 8003942:	ad04      	add	r5, sp, #16
 8003944:	462a      	mov	r2, r5
 8003946:	2000      	movs	r0, #0
 8003948:	f006 f9a4 	bl	8009c94 <IKS01A3_MOTION_SENSOR_GetAxes>
 800394c:	2800      	cmp	r0, #0
 800394e:	f47f aefc 	bne.w	800374a <MOTION_Send_Notification_Task+0x1a>
        MOTION_Server_App_Context.angular_velocity = angular_velocity;
 8003952:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003956:	4b0c      	ldr	r3, [pc, #48]	; (8003988 <MOTION_Send_Notification_Task+0x258>)
 8003958:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800395c:	e6f5      	b.n	800374a <MOTION_Send_Notification_Task+0x1a>
      if (IKS01A3_MOTION_SENSOR_GetAxes(i, MOTION_ACCELERO, &acceleration) == 0)
 800395e:	ad01      	add	r5, sp, #4
 8003960:	462a      	mov	r2, r5
 8003962:	2102      	movs	r1, #2
 8003964:	2000      	movs	r0, #0
 8003966:	f006 f995 	bl	8009c94 <IKS01A3_MOTION_SENSOR_GetAxes>
 800396a:	2800      	cmp	r0, #0
 800396c:	f47f aee8 	bne.w	8003740 <MOTION_Send_Notification_Task+0x10>
        MOTION_Server_App_Context.acceleration = acceleration;
 8003970:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003974:	1d23      	adds	r3, r4, #4
 8003976:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800397a:	e6e1      	b.n	8003740 <MOTION_Send_Notification_Task+0x10>
 800397c:	20001758 	.word	0x20001758
 8003980:	51eb851f 	.word	0x51eb851f
 8003984:	20001774 	.word	0x20001774
 8003988:	20001768 	.word	0x20001768
 800398c:	2000175c 	.word	0x2000175c

08003990 <MOTIONAR_Context_Init>:
 *         and update the ADV data accordingly
 * @param  None
 * @retval None
 */
void MOTIONAR_Context_Init(void)
{
 8003990:	b530      	push	{r4, r5, lr}
 8003992:	b083      	sub	sp, #12
  /* Activity Rec API initialization function */
  MotionAR_manager_init();
 8003994:	f7fd fffa 	bl	800198c <MotionAR_manager_init>

  /* Update BLE ADV field (ActivityRec) */
  manuf_data[7] |= 0x10; /* ActivityRec */
 8003998:	4910      	ldr	r1, [pc, #64]	; (80039dc <MOTIONAR_Context_Init+0x4c>)

  MOTIONAR_Server_App_Context.TimeStamp = 0;
 800399a:	4d11      	ldr	r5, [pc, #68]	; (80039e0 <MOTIONAR_Context_Init+0x50>)
  manuf_data[7] |= 0x10; /* ActivityRec */
 800399c:	79cb      	ldrb	r3, [r1, #7]
  MOTIONAR_Server_App_Context.TimeStamp = 0;
 800399e:	2400      	movs	r4, #0
  else
  {
    /* Set accelerometer:
     *   - FS   = <-2g, 2g>
     */
    (void)IKS01A3_MOTION_SENSOR_SetFullScale(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, 2);
 80039a0:	2202      	movs	r2, #2
  manuf_data[7] |= 0x10; /* ActivityRec */
 80039a2:	f043 0310 	orr.w	r3, r3, #16
 80039a6:	71cb      	strb	r3, [r1, #7]
    (void)IKS01A3_MOTION_SENSOR_SetFullScale(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, 2);
 80039a8:	4620      	mov	r0, r4
 80039aa:	4611      	mov	r1, r2
  MOTIONAR_Server_App_Context.TimeStamp = 0;
 80039ac:	606c      	str	r4, [r5, #4]
  MOTIONAR_Server_App_Context.NotificationStatus = status;
 80039ae:	702c      	strb	r4, [r5, #0]
    (void)IKS01A3_MOTION_SENSOR_SetFullScale(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, 2);
 80039b0:	f006 f9f4 	bl	8009d9c <IKS01A3_MOTION_SENSOR_SetFullScale>
  MOTIONAR_Server_App_Context.ActivityCode = MAR_NOACTIVITY;
 80039b4:	722c      	strb	r4, [r5, #8]
static void ActivityRec_Update(MAR_output_t ActivityCode)
{
  uint8_t value[VALUE_LEN_AR];

  /* Timestamp */
  STORE_LE_16(value, (HAL_GetTick()>>3));
 80039b6:	f006 fd4b 	bl	800a450 <HAL_GetTick>
 80039ba:	08c0      	lsrs	r0, r0, #3
 80039bc:	f88d 0004 	strb.w	r0, [sp, #4]
 80039c0:	f006 fd46 	bl	800a450 <HAL_GetTick>

#if(CFG_DEBUG_APP_TRACE != 0)
  APP_DBG_MSG("-- MOTIONAR APPLICATION SERVER : NOTIFY CLIENT WITH NEW PARAMETER VALUE \n ");
  APP_DBG_MSG(" \n\r");
#endif
  MOTENV_STM_App_Update_Char(ACTIVITY_REC_CHAR_UUID, VALUE_LEN_AR, (uint8_t *)&value);
 80039c4:	aa01      	add	r2, sp, #4
  STORE_LE_16(value, (HAL_GetTick()>>3));
 80039c6:	0ac3      	lsrs	r3, r0, #11
  MOTENV_STM_App_Update_Char(ACTIVITY_REC_CHAR_UUID, VALUE_LEN_AR, (uint8_t *)&value);
 80039c8:	2103      	movs	r1, #3
 80039ca:	2010      	movs	r0, #16
  value[2] = ActivityCode;
 80039cc:	f88d 4006 	strb.w	r4, [sp, #6]
  STORE_LE_16(value, (HAL_GetTick()>>3));
 80039d0:	f88d 3005 	strb.w	r3, [sp, #5]
  MOTENV_STM_App_Update_Char(ACTIVITY_REC_CHAR_UUID, VALUE_LEN_AR, (uint8_t *)&value);
 80039d4:	f009 fc38 	bl	800d248 <MOTENV_STM_App_Update_Char>
}
 80039d8:	b003      	add	sp, #12
 80039da:	bd30      	pop	{r4, r5, pc}
 80039dc:	2000000c 	.word	0x2000000c
 80039e0:	20001784 	.word	0x20001784

080039e4 <MOTIONAR_Set_Notification_Status>:
  MOTIONAR_Server_App_Context.NotificationStatus = status;
 80039e4:	4b06      	ldr	r3, [pc, #24]	; (8003a00 <MOTIONAR_Set_Notification_Status+0x1c>)
  if(status == 1)
 80039e6:	2801      	cmp	r0, #1
  MOTIONAR_Server_App_Context.NotificationStatus = status;
 80039e8:	7018      	strb	r0, [r3, #0]
  if(status == 1)
 80039ea:	d004      	beq.n	80039f6 <MOTIONAR_Set_Notification_Status+0x12>
    (void)IKS01A3_MOTION_SENSOR_SetFullScale(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, 2);
 80039ec:	2202      	movs	r2, #2
 80039ee:	4611      	mov	r1, r2
 80039f0:	2000      	movs	r0, #0
 80039f2:	f006 b9d3 	b.w	8009d9c <IKS01A3_MOTION_SENSOR_SetFullScale>
    (void)IKS01A3_MOTION_SENSOR_SetFullScale(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, 4);
 80039f6:	2204      	movs	r2, #4
 80039f8:	2102      	movs	r1, #2
 80039fa:	2000      	movs	r0, #0
 80039fc:	f006 b9ce 	b.w	8009d9c <IKS01A3_MOTION_SENSOR_SetFullScale>
 8003a00:	20001784 	.word	0x20001784

08003a04 <MOTIONAR_Send_Notification_Task>:
{
 8003a04:	b530      	push	{r4, r5, lr}
 8003a06:	b089      	sub	sp, #36	; 0x24
  MAR_input_t data_in = {.acc_x = 0.0f, .acc_y = 0.0f, .acc_z = 0.0f};
 8003a08:	2300      	movs	r3, #0
  (void)IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, &ACC_Value);
 8003a0a:	aa02      	add	r2, sp, #8
 8003a0c:	2102      	movs	r1, #2
 8003a0e:	2000      	movs	r0, #0
  MAR_input_t data_in = {.acc_x = 0.0f, .acc_y = 0.0f, .acc_z = 0.0f};
 8003a10:	9305      	str	r3, [sp, #20]
 8003a12:	9306      	str	r3, [sp, #24]
 8003a14:	9307      	str	r3, [sp, #28]
  (void)IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, &ACC_Value);
 8003a16:	f006 f93d 	bl	8009c94 <IKS01A3_MOTION_SENSOR_GetAxes>
  data_in.acc_x = (float)ACC_Value.x * FROM_MG_TO_G;
 8003a1a:	eddd 7a02 	vldr	s15, [sp, #8]
 8003a1e:	ed9f 6a1f 	vldr	s12, [pc, #124]	; 8003a9c <MOTIONAR_Send_Notification_Task+0x98>
  MotionAR_manager_run(&data_in, &MOTIONAR_Server_App_Context.ActivityCode, MOTIONAR_Server_App_Context.TimeStamp);
 8003a22:	4c1f      	ldr	r4, [pc, #124]	; (8003aa0 <MOTIONAR_Send_Notification_Task+0x9c>)
  data_in.acc_x = (float)ACC_Value.x * FROM_MG_TO_G;
 8003a24:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  data_in.acc_y = (float)ACC_Value.y * FROM_MG_TO_G;
 8003a28:	eddd 7a03 	vldr	s15, [sp, #12]
  MotionAR_manager_run(&data_in, &MOTIONAR_Server_App_Context.ActivityCode, MOTIONAR_Server_App_Context.TimeStamp);
 8003a2c:	6862      	ldr	r2, [r4, #4]
  data_in.acc_y = (float)ACC_Value.y * FROM_MG_TO_G;
 8003a2e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  data_in.acc_z = (float)ACC_Value.z * FROM_MG_TO_G;
 8003a32:	eddd 7a04 	vldr	s15, [sp, #16]
 8003a36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  data_in.acc_x = (float)ACC_Value.x * FROM_MG_TO_G;
 8003a3a:	ee66 6a86 	vmul.f32	s13, s13, s12
  data_in.acc_y = (float)ACC_Value.y * FROM_MG_TO_G;
 8003a3e:	ee27 7a06 	vmul.f32	s14, s14, s12
  data_in.acc_z = (float)ACC_Value.z * FROM_MG_TO_G;
 8003a42:	ee67 7a86 	vmul.f32	s15, s15, s12
  MotionAR_manager_run(&data_in, &MOTIONAR_Server_App_Context.ActivityCode, MOTIONAR_Server_App_Context.TimeStamp);
 8003a46:	f104 0108 	add.w	r1, r4, #8
 8003a4a:	a805      	add	r0, sp, #20
  data_in.acc_x = (float)ACC_Value.x * FROM_MG_TO_G;
 8003a4c:	edcd 6a05 	vstr	s13, [sp, #20]
  data_in.acc_y = (float)ACC_Value.y * FROM_MG_TO_G;
 8003a50:	ed8d 7a06 	vstr	s14, [sp, #24]
  data_in.acc_z = (float)ACC_Value.z * FROM_MG_TO_G;
 8003a54:	edcd 7a07 	vstr	s15, [sp, #28]
  MotionAR_manager_run(&data_in, &MOTIONAR_Server_App_Context.ActivityCode, MOTIONAR_Server_App_Context.TimeStamp);
 8003a58:	f7fd ffaa 	bl	80019b0 <MotionAR_manager_run>
  if(ActivityCodePrev != MOTIONAR_Server_App_Context.ActivityCode)
 8003a5c:	4b11      	ldr	r3, [pc, #68]	; (8003aa4 <MOTIONAR_Send_Notification_Task+0xa0>)
 8003a5e:	7a25      	ldrb	r5, [r4, #8]
 8003a60:	781a      	ldrb	r2, [r3, #0]
 8003a62:	42aa      	cmp	r2, r5
 8003a64:	d002      	beq.n	8003a6c <MOTIONAR_Send_Notification_Task+0x68>
    if(MOTIONAR_Server_App_Context.NotificationStatus)
 8003a66:	7822      	ldrb	r2, [r4, #0]
    ActivityCodePrev = MOTIONAR_Server_App_Context.ActivityCode;
 8003a68:	701d      	strb	r5, [r3, #0]
    if(MOTIONAR_Server_App_Context.NotificationStatus)
 8003a6a:	b922      	cbnz	r2, 8003a76 <MOTIONAR_Send_Notification_Task+0x72>
  MOTIONAR_Server_App_Context.TimeStamp += MOTIONAR_ALGO_PERIOD;
 8003a6c:	6863      	ldr	r3, [r4, #4]
 8003a6e:	333e      	adds	r3, #62	; 0x3e
 8003a70:	6063      	str	r3, [r4, #4]
}
 8003a72:	b009      	add	sp, #36	; 0x24
 8003a74:	bd30      	pop	{r4, r5, pc}
  STORE_LE_16(value, (HAL_GetTick()>>3));
 8003a76:	f006 fceb 	bl	800a450 <HAL_GetTick>
 8003a7a:	08c0      	lsrs	r0, r0, #3
 8003a7c:	f88d 0004 	strb.w	r0, [sp, #4]
 8003a80:	f006 fce6 	bl	800a450 <HAL_GetTick>
  MOTENV_STM_App_Update_Char(ACTIVITY_REC_CHAR_UUID, VALUE_LEN_AR, (uint8_t *)&value);
 8003a84:	aa01      	add	r2, sp, #4
  STORE_LE_16(value, (HAL_GetTick()>>3));
 8003a86:	0ac3      	lsrs	r3, r0, #11
  MOTENV_STM_App_Update_Char(ACTIVITY_REC_CHAR_UUID, VALUE_LEN_AR, (uint8_t *)&value);
 8003a88:	2103      	movs	r1, #3
 8003a8a:	2010      	movs	r0, #16
  STORE_LE_16(value, (HAL_GetTick()>>3));
 8003a8c:	f88d 3005 	strb.w	r3, [sp, #5]
  value[2] = ActivityCode;
 8003a90:	f88d 5006 	strb.w	r5, [sp, #6]
  MOTENV_STM_App_Update_Char(ACTIVITY_REC_CHAR_UUID, VALUE_LEN_AR, (uint8_t *)&value);
 8003a94:	f009 fbd8 	bl	800d248 <MOTENV_STM_App_Update_Char>
 8003a98:	e7e8      	b.n	8003a6c <MOTIONAR_Send_Notification_Task+0x68>
 8003a9a:	bf00      	nop
 8003a9c:	3a83126f 	.word	0x3a83126f
 8003aa0:	20001784 	.word	0x20001784
 8003aa4:	20001944 	.word	0x20001944

08003aa8 <MOTIONAR_ActivityRec_Update>:
{
 8003aa8:	b510      	push	{r4, lr}
  ActivityRec_Update(MOTIONAR_Server_App_Context.ActivityCode);
 8003aaa:	4b0b      	ldr	r3, [pc, #44]	; (8003ad8 <MOTIONAR_ActivityRec_Update+0x30>)
{
 8003aac:	b082      	sub	sp, #8
  ActivityRec_Update(MOTIONAR_Server_App_Context.ActivityCode);
 8003aae:	7a1c      	ldrb	r4, [r3, #8]
  STORE_LE_16(value, (HAL_GetTick()>>3));
 8003ab0:	f006 fcce 	bl	800a450 <HAL_GetTick>
 8003ab4:	08c0      	lsrs	r0, r0, #3
 8003ab6:	f88d 0004 	strb.w	r0, [sp, #4]
 8003aba:	f006 fcc9 	bl	800a450 <HAL_GetTick>
  MOTENV_STM_App_Update_Char(ACTIVITY_REC_CHAR_UUID, VALUE_LEN_AR, (uint8_t *)&value);
 8003abe:	aa01      	add	r2, sp, #4
  STORE_LE_16(value, (HAL_GetTick()>>3));
 8003ac0:	0ac3      	lsrs	r3, r0, #11
  MOTENV_STM_App_Update_Char(ACTIVITY_REC_CHAR_UUID, VALUE_LEN_AR, (uint8_t *)&value);
 8003ac2:	2103      	movs	r1, #3
 8003ac4:	2010      	movs	r0, #16
  value[2] = ActivityCode;
 8003ac6:	f88d 4006 	strb.w	r4, [sp, #6]
  STORE_LE_16(value, (HAL_GetTick()>>3));
 8003aca:	f88d 3005 	strb.w	r3, [sp, #5]
  MOTENV_STM_App_Update_Char(ACTIVITY_REC_CHAR_UUID, VALUE_LEN_AR, (uint8_t *)&value);
 8003ace:	f009 fbbb 	bl	800d248 <MOTENV_STM_App_Update_Char>
}
 8003ad2:	b002      	add	sp, #8
 8003ad4:	bd10      	pop	{r4, pc}
 8003ad6:	bf00      	nop
 8003ad8:	20001784 	.word	0x20001784

08003adc <MOTIONCP_Context_Init>:
 *         and update the ADV data accordingly
 * @param  None
 * @retval None
 */
void MOTIONCP_Context_Init(void)
{
 8003adc:	b530      	push	{r4, r5, lr}
 8003ade:	b083      	sub	sp, #12
  /* CarryPosition API initialization function */
  MotionCP_manager_init();
 8003ae0:	f7fd ff6a 	bl	80019b8 <MotionCP_manager_init>

  /* Update BLE ADV field (CarryPosition) */
  manuf_data[7] |= 0x08; /* CarryPosition */
 8003ae4:	4910      	ldr	r1, [pc, #64]	; (8003b28 <MOTIONCP_Context_Init+0x4c>)
 * @param  status The new notification status
 * @retval None
 */
void MOTIONCP_Set_Notification_Status(uint8_t status)
{
  MOTIONCP_Server_App_Context.NotificationStatus = status;
 8003ae6:	4d11      	ldr	r5, [pc, #68]	; (8003b2c <MOTIONCP_Context_Init+0x50>)
  manuf_data[7] |= 0x08; /* CarryPosition */
 8003ae8:	79cb      	ldrb	r3, [r1, #7]
  MOTIONCP_Server_App_Context.NotificationStatus = status;
 8003aea:	2400      	movs	r4, #0
  else
  {
    /* Set accelerometer:
     *   - FS   = <-2g, 2g>
     */
    (void)IKS01A3_MOTION_SENSOR_SetFullScale(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, 2);
 8003aec:	2202      	movs	r2, #2
  manuf_data[7] |= 0x08; /* CarryPosition */
 8003aee:	f043 0308 	orr.w	r3, r3, #8
 8003af2:	71cb      	strb	r3, [r1, #7]
    (void)IKS01A3_MOTION_SENSOR_SetFullScale(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, 2);
 8003af4:	4620      	mov	r0, r4
 8003af6:	4611      	mov	r1, r2
  MOTIONCP_Server_App_Context.NotificationStatus = status;
 8003af8:	702c      	strb	r4, [r5, #0]
    (void)IKS01A3_MOTION_SENSOR_SetFullScale(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, 2);
 8003afa:	f006 f94f 	bl	8009d9c <IKS01A3_MOTION_SENSOR_SetFullScale>
  MOTIONCP_Server_App_Context.CarryPositionCode = MCP_UNKNOWN;
 8003afe:	706c      	strb	r4, [r5, #1]
static void CarryPosition_Update(MCP_output_t CarryPositionCode)
{
  uint8_t value[VALUE_LEN_CP];

  /* Timestamp */
  STORE_LE_16(value, (HAL_GetTick()>>3));
 8003b00:	f006 fca6 	bl	800a450 <HAL_GetTick>
 8003b04:	08c0      	lsrs	r0, r0, #3
 8003b06:	f88d 0004 	strb.w	r0, [sp, #4]
 8003b0a:	f006 fca1 	bl	800a450 <HAL_GetTick>

#if(CFG_DEBUG_APP_TRACE != 0)
  APP_DBG_MSG("-- MOTIONCP APPLICATION SERVER : NOTIFY CLIENT WITH NEW PARAMETER VALUE \n ");
  APP_DBG_MSG(" \n\r");
#endif
  MOTENV_STM_App_Update_Char(CARRY_POSITION_CHAR_UUID, VALUE_LEN_CP, (uint8_t *)&value);
 8003b0e:	aa01      	add	r2, sp, #4
  STORE_LE_16(value, (HAL_GetTick()>>3));
 8003b10:	0ac3      	lsrs	r3, r0, #11
  MOTENV_STM_App_Update_Char(CARRY_POSITION_CHAR_UUID, VALUE_LEN_CP, (uint8_t *)&value);
 8003b12:	2103      	movs	r1, #3
 8003b14:	2008      	movs	r0, #8
  value[2] = CarryPositionCode;
 8003b16:	f88d 4006 	strb.w	r4, [sp, #6]
  STORE_LE_16(value, (HAL_GetTick()>>3));
 8003b1a:	f88d 3005 	strb.w	r3, [sp, #5]
  MOTENV_STM_App_Update_Char(CARRY_POSITION_CHAR_UUID, VALUE_LEN_CP, (uint8_t *)&value);
 8003b1e:	f009 fb93 	bl	800d248 <MOTENV_STM_App_Update_Char>
}
 8003b22:	b003      	add	sp, #12
 8003b24:	bd30      	pop	{r4, r5, pc}
 8003b26:	bf00      	nop
 8003b28:	2000000c 	.word	0x2000000c
 8003b2c:	20001790 	.word	0x20001790

08003b30 <MOTIONCP_Set_Notification_Status>:
  MOTIONCP_Server_App_Context.NotificationStatus = status;
 8003b30:	4b06      	ldr	r3, [pc, #24]	; (8003b4c <MOTIONCP_Set_Notification_Status+0x1c>)
  if(status == 1)
 8003b32:	2801      	cmp	r0, #1
  MOTIONCP_Server_App_Context.NotificationStatus = status;
 8003b34:	7018      	strb	r0, [r3, #0]
  if(status == 1)
 8003b36:	d004      	beq.n	8003b42 <MOTIONCP_Set_Notification_Status+0x12>
    (void)IKS01A3_MOTION_SENSOR_SetFullScale(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, 2);
 8003b38:	2202      	movs	r2, #2
 8003b3a:	4611      	mov	r1, r2
 8003b3c:	2000      	movs	r0, #0
 8003b3e:	f006 b92d 	b.w	8009d9c <IKS01A3_MOTION_SENSOR_SetFullScale>
    (void)IKS01A3_MOTION_SENSOR_SetFullScale(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, 4);
 8003b42:	2204      	movs	r2, #4
 8003b44:	2102      	movs	r1, #2
 8003b46:	2000      	movs	r0, #0
 8003b48:	f006 b928 	b.w	8009d9c <IKS01A3_MOTION_SENSOR_SetFullScale>
 8003b4c:	20001790 	.word	0x20001790

08003b50 <MOTIONCP_Send_Notification_Task>:
{
 8003b50:	b530      	push	{r4, r5, lr}
 8003b52:	b089      	sub	sp, #36	; 0x24
  MCP_input_t data_in = {.AccX = 0.0f, .AccY = 0.0f, .AccZ = 0.0f};
 8003b54:	2300      	movs	r3, #0
  (void)IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, &ACC_Value);
 8003b56:	aa02      	add	r2, sp, #8
 8003b58:	2102      	movs	r1, #2
 8003b5a:	2000      	movs	r0, #0
  MCP_input_t data_in = {.AccX = 0.0f, .AccY = 0.0f, .AccZ = 0.0f};
 8003b5c:	9305      	str	r3, [sp, #20]
 8003b5e:	9306      	str	r3, [sp, #24]
 8003b60:	9307      	str	r3, [sp, #28]
  (void)IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, &ACC_Value);
 8003b62:	f006 f897 	bl	8009c94 <IKS01A3_MOTION_SENSOR_GetAxes>
  data_in.AccX = (float)ACC_Value.x * FROM_MG_TO_G;
 8003b66:	eddd 7a02 	vldr	s15, [sp, #8]
 8003b6a:	ed9f 6a1d 	vldr	s12, [pc, #116]	; 8003be0 <MOTIONCP_Send_Notification_Task+0x90>
  MotionCP_manager_run(&data_in, &MOTIONCP_Server_App_Context.CarryPositionCode);
 8003b6e:	4c1d      	ldr	r4, [pc, #116]	; (8003be4 <MOTIONCP_Send_Notification_Task+0x94>)
  data_in.AccX = (float)ACC_Value.x * FROM_MG_TO_G;
 8003b70:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  data_in.AccY = (float)ACC_Value.y * FROM_MG_TO_G;
 8003b74:	eddd 7a03 	vldr	s15, [sp, #12]
 8003b78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  data_in.AccZ = (float)ACC_Value.z * FROM_MG_TO_G;
 8003b7c:	eddd 7a04 	vldr	s15, [sp, #16]
 8003b80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  data_in.AccX = (float)ACC_Value.x * FROM_MG_TO_G;
 8003b84:	ee66 6a86 	vmul.f32	s13, s13, s12
  data_in.AccY = (float)ACC_Value.y * FROM_MG_TO_G;
 8003b88:	ee27 7a06 	vmul.f32	s14, s14, s12
  data_in.AccZ = (float)ACC_Value.z * FROM_MG_TO_G;
 8003b8c:	ee67 7a86 	vmul.f32	s15, s15, s12
  MotionCP_manager_run(&data_in, &MOTIONCP_Server_App_Context.CarryPositionCode);
 8003b90:	1c61      	adds	r1, r4, #1
 8003b92:	a805      	add	r0, sp, #20
  data_in.AccX = (float)ACC_Value.x * FROM_MG_TO_G;
 8003b94:	edcd 6a05 	vstr	s13, [sp, #20]
  data_in.AccY = (float)ACC_Value.y * FROM_MG_TO_G;
 8003b98:	ed8d 7a06 	vstr	s14, [sp, #24]
  data_in.AccZ = (float)ACC_Value.z * FROM_MG_TO_G;
 8003b9c:	edcd 7a07 	vstr	s15, [sp, #28]
  MotionCP_manager_run(&data_in, &MOTIONCP_Server_App_Context.CarryPositionCode);
 8003ba0:	f7fd ff1c 	bl	80019dc <MotionCP_manager_run>
  if(CarryPositionCodePrev != MOTIONCP_Server_App_Context.CarryPositionCode)
 8003ba4:	4b10      	ldr	r3, [pc, #64]	; (8003be8 <MOTIONCP_Send_Notification_Task+0x98>)
 8003ba6:	7865      	ldrb	r5, [r4, #1]
 8003ba8:	781a      	ldrb	r2, [r3, #0]
 8003baa:	42aa      	cmp	r2, r5
 8003bac:	d002      	beq.n	8003bb4 <MOTIONCP_Send_Notification_Task+0x64>
    if(MOTIONCP_Server_App_Context.NotificationStatus)
 8003bae:	7822      	ldrb	r2, [r4, #0]
    CarryPositionCodePrev = MOTIONCP_Server_App_Context.CarryPositionCode;
 8003bb0:	701d      	strb	r5, [r3, #0]
    if(MOTIONCP_Server_App_Context.NotificationStatus)
 8003bb2:	b90a      	cbnz	r2, 8003bb8 <MOTIONCP_Send_Notification_Task+0x68>
}
 8003bb4:	b009      	add	sp, #36	; 0x24
 8003bb6:	bd30      	pop	{r4, r5, pc}
  STORE_LE_16(value, (HAL_GetTick()>>3));
 8003bb8:	f006 fc4a 	bl	800a450 <HAL_GetTick>
 8003bbc:	08c0      	lsrs	r0, r0, #3
 8003bbe:	f88d 0004 	strb.w	r0, [sp, #4]
 8003bc2:	f006 fc45 	bl	800a450 <HAL_GetTick>
  MOTENV_STM_App_Update_Char(CARRY_POSITION_CHAR_UUID, VALUE_LEN_CP, (uint8_t *)&value);
 8003bc6:	aa01      	add	r2, sp, #4
  STORE_LE_16(value, (HAL_GetTick()>>3));
 8003bc8:	0ac3      	lsrs	r3, r0, #11
  MOTENV_STM_App_Update_Char(CARRY_POSITION_CHAR_UUID, VALUE_LEN_CP, (uint8_t *)&value);
 8003bca:	2103      	movs	r1, #3
 8003bcc:	2008      	movs	r0, #8
  STORE_LE_16(value, (HAL_GetTick()>>3));
 8003bce:	f88d 3005 	strb.w	r3, [sp, #5]
  value[2] = CarryPositionCode;
 8003bd2:	f88d 5006 	strb.w	r5, [sp, #6]
  MOTENV_STM_App_Update_Char(CARRY_POSITION_CHAR_UUID, VALUE_LEN_CP, (uint8_t *)&value);
 8003bd6:	f009 fb37 	bl	800d248 <MOTENV_STM_App_Update_Char>
}
 8003bda:	b009      	add	sp, #36	; 0x24
 8003bdc:	bd30      	pop	{r4, r5, pc}
 8003bde:	bf00      	nop
 8003be0:	3a83126f 	.word	0x3a83126f
 8003be4:	20001790 	.word	0x20001790
 8003be8:	20001945 	.word	0x20001945

08003bec <MOTIONCP_CarryPosition_Update>:
{
 8003bec:	b510      	push	{r4, lr}
  CarryPosition_Update(MOTIONCP_Server_App_Context.CarryPositionCode);
 8003bee:	4b0b      	ldr	r3, [pc, #44]	; (8003c1c <MOTIONCP_CarryPosition_Update+0x30>)
{
 8003bf0:	b082      	sub	sp, #8
  CarryPosition_Update(MOTIONCP_Server_App_Context.CarryPositionCode);
 8003bf2:	785c      	ldrb	r4, [r3, #1]
  STORE_LE_16(value, (HAL_GetTick()>>3));
 8003bf4:	f006 fc2c 	bl	800a450 <HAL_GetTick>
 8003bf8:	08c0      	lsrs	r0, r0, #3
 8003bfa:	f88d 0004 	strb.w	r0, [sp, #4]
 8003bfe:	f006 fc27 	bl	800a450 <HAL_GetTick>
  MOTENV_STM_App_Update_Char(CARRY_POSITION_CHAR_UUID, VALUE_LEN_CP, (uint8_t *)&value);
 8003c02:	aa01      	add	r2, sp, #4
  STORE_LE_16(value, (HAL_GetTick()>>3));
 8003c04:	0ac3      	lsrs	r3, r0, #11
  MOTENV_STM_App_Update_Char(CARRY_POSITION_CHAR_UUID, VALUE_LEN_CP, (uint8_t *)&value);
 8003c06:	2103      	movs	r1, #3
 8003c08:	2008      	movs	r0, #8
  value[2] = CarryPositionCode;
 8003c0a:	f88d 4006 	strb.w	r4, [sp, #6]
  STORE_LE_16(value, (HAL_GetTick()>>3));
 8003c0e:	f88d 3005 	strb.w	r3, [sp, #5]
  MOTENV_STM_App_Update_Char(CARRY_POSITION_CHAR_UUID, VALUE_LEN_CP, (uint8_t *)&value);
 8003c12:	f009 fb19 	bl	800d248 <MOTENV_STM_App_Update_Char>
}
 8003c16:	b002      	add	sp, #8
 8003c18:	bd10      	pop	{r4, pc}
 8003c1a:	bf00      	nop
 8003c1c:	20001790 	.word	0x20001790

08003c20 <Quat_Update.constprop.0>:
/**
 * @brief  Update quaternions characteristic value
 * @param  data Structure containing the quaterions
 * @retval None
 */
static void Quat_Update(IKS01A3_MOTION_SENSOR_Axes_t *data)
 8003c20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c22:	b087      	sub	sp, #28
{
  uint8_t value[VALUE_LEN_QUAT];

  /* Timestamp */
  STORE_LE_16(value, (HAL_GetTick()>>3));
 8003c24:	f006 fc14 	bl	800a450 <HAL_GetTick>
 8003c28:	08c0      	lsrs	r0, r0, #3
 8003c2a:	f88d 0004 	strb.w	r0, [sp, #4]
 8003c2e:	f006 fc0f 	bl	800a450 <HAL_GetTick>

  STORE_LE_16(value+2,data[0].x);
 8003c32:	4b22      	ldr	r3, [pc, #136]	; (8003cbc <Quat_Update.constprop.0+0x9c>)
  STORE_LE_16(value+4,data[0].y);
 8003c34:	e9d3 6506 	ldrd	r6, r5, [r3, #24]
  STORE_LE_16(value+6,data[0].z);

  STORE_LE_16(value+8 ,data[1].x);
  STORE_LE_16(value+10,data[1].y);
  STORE_LE_16(value+12,data[1].z);
 8003c38:	e9d3 270a 	ldrd	r2, r7, [r3, #40]	; 0x28
  STORE_LE_16(value+8 ,data[1].x);
 8003c3c:	e9d3 4108 	ldrd	r4, r1, [r3, #32]
  STORE_LE_16(value+2,data[0].x);
 8003c40:	f88d 6006 	strb.w	r6, [sp, #6]
 8003c44:	1236      	asrs	r6, r6, #8
  STORE_LE_16(value, (HAL_GetTick()>>3));
 8003c46:	0ac0      	lsrs	r0, r0, #11
  STORE_LE_16(value+2,data[0].x);
 8003c48:	f88d 6007 	strb.w	r6, [sp, #7]

  STORE_LE_16(value+14,data[2].x);
  STORE_LE_16(value+16,data[2].y);
 8003c4c:	e9d3 c60c 	ldrd	ip, r6, [r3, #48]	; 0x30
  STORE_LE_16(value, (HAL_GetTick()>>3));
 8003c50:	f88d 0005 	strb.w	r0, [sp, #5]
  STORE_LE_16(value+10,data[1].y);
 8003c54:	f88d 200e 	strb.w	r2, [sp, #14]
  STORE_LE_16(value+18,data[2].z);
 8003c58:	6b98      	ldr	r0, [r3, #56]	; 0x38
  STORE_LE_16(value+6,data[0].z);
 8003c5a:	f88d 400a 	strb.w	r4, [sp, #10]
  STORE_LE_16(value+10,data[1].y);
 8003c5e:	1212      	asrs	r2, r2, #8
  STORE_LE_16(value+6,data[0].z);
 8003c60:	1224      	asrs	r4, r4, #8
  STORE_LE_16(value+8 ,data[1].x);
 8003c62:	f88d 100c 	strb.w	r1, [sp, #12]
  STORE_LE_16(value+10,data[1].y);
 8003c66:	f88d 200f 	strb.w	r2, [sp, #15]
  STORE_LE_16(value+8 ,data[1].x);
 8003c6a:	1209      	asrs	r1, r1, #8
  STORE_LE_16(value+12,data[1].z);
 8003c6c:	123a      	asrs	r2, r7, #8

  if(MOTIONFX_Server_App_Context.QuatNotificationStatus)
 8003c6e:	781b      	ldrb	r3, [r3, #0]
  STORE_LE_16(value+4,data[0].y);
 8003c70:	f88d 5008 	strb.w	r5, [sp, #8]
  STORE_LE_16(value+6,data[0].z);
 8003c74:	f88d 400b 	strb.w	r4, [sp, #11]
  STORE_LE_16(value+4,data[0].y);
 8003c78:	122d      	asrs	r5, r5, #8
  STORE_LE_16(value+8 ,data[1].x);
 8003c7a:	f88d 100d 	strb.w	r1, [sp, #13]
  STORE_LE_16(value+14,data[2].x);
 8003c7e:	ea4f 242c 	mov.w	r4, ip, asr #8
  STORE_LE_16(value+12,data[1].z);
 8003c82:	f88d 2011 	strb.w	r2, [sp, #17]
  STORE_LE_16(value+16,data[2].y);
 8003c86:	1231      	asrs	r1, r6, #8
  STORE_LE_16(value+18,data[2].z);
 8003c88:	1202      	asrs	r2, r0, #8
  STORE_LE_16(value+4,data[0].y);
 8003c8a:	f88d 5009 	strb.w	r5, [sp, #9]
  STORE_LE_16(value+12,data[1].z);
 8003c8e:	f88d 7010 	strb.w	r7, [sp, #16]
  STORE_LE_16(value+14,data[2].x);
 8003c92:	f88d c012 	strb.w	ip, [sp, #18]
 8003c96:	f88d 4013 	strb.w	r4, [sp, #19]
  STORE_LE_16(value+16,data[2].y);
 8003c9a:	f88d 6014 	strb.w	r6, [sp, #20]
 8003c9e:	f88d 1015 	strb.w	r1, [sp, #21]
  STORE_LE_16(value+18,data[2].z);
 8003ca2:	f88d 0016 	strb.w	r0, [sp, #22]
 8003ca6:	f88d 2017 	strb.w	r2, [sp, #23]
  if(MOTIONFX_Server_App_Context.QuatNotificationStatus)
 8003caa:	b12b      	cbz	r3, 8003cb8 <Quat_Update.constprop.0+0x98>
  {
#if(CFG_DEBUG_APP_TRACE != 0)
    //APP_DBG_MSG("-- MOTIONFX APPLICATION SERVER : NOTIFY CLIENT WITH NEW QUAT PARAMETER VALUE \n ");
    //APP_DBG_MSG(" \n\r");
#endif
    MOTENV_STM_App_Update_Char(MOTION_FX_CHAR_UUID, VALUE_LEN_QUAT, (uint8_t *)&value);
 8003cac:	aa01      	add	r2, sp, #4
 8003cae:	2114      	movs	r1, #20
 8003cb0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003cb4:	f009 fac8 	bl	800d248 <MOTENV_STM_App_Update_Char>
    APP_DBG_MSG("-- MOTIONFX APPLICATION SERVER : CAN'T INFORM CLIENT - NOTIFICATION DISABLED\n ");
#endif
  }

  return;
}
 8003cb8:	b007      	add	sp, #28
 8003cba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cbc:	20001794 	.word	0x20001794

08003cc0 <MOTIONFX_Context_Init>:
{
 8003cc0:	b530      	push	{r4, r5, lr}
  MOTIONFX_Server_App_Context.MagTimeStamp = 0;
 8003cc2:	4c20      	ldr	r4, [pc, #128]	; (8003d44 <MOTIONFX_Context_Init+0x84>)
{
 8003cc4:	b085      	sub	sp, #20
  MOTIONFX_Server_App_Context.MagTimeStamp = 0;
 8003cc6:	2500      	movs	r5, #0
 8003cc8:	6125      	str	r5, [r4, #16]
  MOTIONFX_Server_App_Context.MagCalStatus = 0;
 8003cca:	7525      	strb	r5, [r4, #20]
  MotionFX_manager_init();
 8003ccc:	f7fd fe88 	bl	80019e0 <MotionFX_manager_init>
  MotionFX_manager_start_9X();
 8003cd0:	f7fd fef2 	bl	8001ab8 <MotionFX_manager_start_9X>
static void MagCalibTest(void)
{
  MFX_MagCal_output_t mag_cal_test;
  
  /* Recall the calibration Credential saved */
  MotionFX_manager_MagCal_start(MOTIONFX_ALGO_PERIOD);
 8003cd4:	200a      	movs	r0, #10
 8003cd6:	f7fd fefd 	bl	8001ad4 <MotionFX_manager_MagCal_start>
  MotionFX_MagCal_getParams(&mag_cal_test);
 8003cda:	4668      	mov	r0, sp
 8003cdc:	f018 f84c 	bl	801bd78 <MotionFX_MagCal_getParams>
    
  if(mag_cal_test.cal_quality == MFX_MAGCALGOOD)
 8003ce0:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8003ce4:	2b03      	cmp	r3, #3
 8003ce6:	d010      	beq.n	8003d0a <MOTIONFX_Context_Init+0x4a>
  }
  
  if(!MOTIONFX_Server_App_Context.MagCalStatus)
  {
    MOTIONFX_Server_App_Context.MAG_Offset.x = 0;
    MOTIONFX_Server_App_Context.MAG_Offset.y = 0;
 8003ce8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003cec:	7525      	strb	r5, [r4, #20]
    MOTIONFX_Server_App_Context.MAG_Offset.z = 0;
 8003cee:	60e5      	str	r5, [r4, #12]
  manuf_data[6] |= 0x01; /* Sensor fusion*/
 8003cf0:	4b15      	ldr	r3, [pc, #84]	; (8003d48 <MOTIONFX_Context_Init+0x88>)
 8003cf2:	7999      	ldrb	r1, [r3, #6]
  manuf_data[7] |= 0x40; /* ECompass*/
 8003cf4:	79da      	ldrb	r2, [r3, #7]
  manuf_data[6] |= 0x01; /* Sensor fusion*/
 8003cf6:	f041 0101 	orr.w	r1, r1, #1
  manuf_data[7] |= 0x40; /* ECompass*/
 8003cfa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  MOTIONFX_Server_App_Context.QuatNotificationStatus = status;
 8003cfe:	2000      	movs	r0, #0
  manuf_data[6] |= 0x01; /* Sensor fusion*/
 8003d00:	7199      	strb	r1, [r3, #6]
  manuf_data[7] |= 0x40; /* ECompass*/
 8003d02:	71da      	strb	r2, [r3, #7]
  MOTIONFX_Server_App_Context.QuatNotificationStatus = status;
 8003d04:	8020      	strh	r0, [r4, #0]
}
 8003d06:	b005      	add	sp, #20
 8003d08:	bd30      	pop	{r4, r5, pc}
    MOTIONFX_Server_App_Context.MAG_Offset.x = (int32_t) (mag_cal_test.hi_bias[0] * FROM_UT50_TO_MGAUSS);
 8003d0a:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8003d4c <MOTIONFX_Context_Init+0x8c>
 8003d0e:	eddd 6a00 	vldr	s13, [sp]
    MOTIONFX_Server_App_Context.MAG_Offset.y = (int32_t) (mag_cal_test.hi_bias[1] * FROM_UT50_TO_MGAUSS);
 8003d12:	ed9d 7a01 	vldr	s14, [sp, #4]
    MOTIONFX_Server_App_Context.MAG_Offset.z = (int32_t) (mag_cal_test.hi_bias[2] * FROM_UT50_TO_MGAUSS);
 8003d16:	eddd 7a02 	vldr	s15, [sp, #8]
    MOTIONFX_Server_App_Context.MAG_Offset.x = (int32_t) (mag_cal_test.hi_bias[0] * FROM_UT50_TO_MGAUSS);
 8003d1a:	ee66 6a86 	vmul.f32	s13, s13, s12
    MOTIONFX_Server_App_Context.MAG_Offset.y = (int32_t) (mag_cal_test.hi_bias[1] * FROM_UT50_TO_MGAUSS);
 8003d1e:	ee27 7a06 	vmul.f32	s14, s14, s12
    MOTIONFX_Server_App_Context.MAG_Offset.z = (int32_t) (mag_cal_test.hi_bias[2] * FROM_UT50_TO_MGAUSS);
 8003d22:	ee67 7a86 	vmul.f32	s15, s15, s12
    MOTIONFX_Server_App_Context.MAG_Offset.x = (int32_t) (mag_cal_test.hi_bias[0] * FROM_UT50_TO_MGAUSS);
 8003d26:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    MOTIONFX_Server_App_Context.MAG_Offset.y = (int32_t) (mag_cal_test.hi_bias[1] * FROM_UT50_TO_MGAUSS);
 8003d2a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
    MOTIONFX_Server_App_Context.MAG_Offset.z = (int32_t) (mag_cal_test.hi_bias[2] * FROM_UT50_TO_MGAUSS);
 8003d2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d32:	2301      	movs	r3, #1
    MOTIONFX_Server_App_Context.MAG_Offset.x = (int32_t) (mag_cal_test.hi_bias[0] * FROM_UT50_TO_MGAUSS);
 8003d34:	edc4 6a01 	vstr	s13, [r4, #4]
    MOTIONFX_Server_App_Context.MAG_Offset.y = (int32_t) (mag_cal_test.hi_bias[1] * FROM_UT50_TO_MGAUSS);
 8003d38:	ed84 7a02 	vstr	s14, [r4, #8]
    MOTIONFX_Server_App_Context.MAG_Offset.z = (int32_t) (mag_cal_test.hi_bias[2] * FROM_UT50_TO_MGAUSS);
 8003d3c:	edc4 7a03 	vstr	s15, [r4, #12]
 8003d40:	7523      	strb	r3, [r4, #20]
 8003d42:	e7d5      	b.n	8003cf0 <MOTIONFX_Context_Init+0x30>
 8003d44:	20001794 	.word	0x20001794
 8003d48:	2000000c 	.word	0x2000000c
 8003d4c:	43fa0000 	.word	0x43fa0000

08003d50 <MOTIONFX_Set_Quat_Notification_Status>:
  MOTIONFX_Server_App_Context.QuatNotificationStatus = status;
 8003d50:	4b01      	ldr	r3, [pc, #4]	; (8003d58 <MOTIONFX_Set_Quat_Notification_Status+0x8>)
 8003d52:	7018      	strb	r0, [r3, #0]
}
 8003d54:	4770      	bx	lr
 8003d56:	bf00      	nop
 8003d58:	20001794 	.word	0x20001794

08003d5c <MOTIONFX_Set_ECompass_Notification_Status>:
  MOTIONFX_Server_App_Context.ECompassNotificationStatus = status;
 8003d5c:	4b01      	ldr	r3, [pc, #4]	; (8003d64 <MOTIONFX_Set_ECompass_Notification_Status+0x8>)
 8003d5e:	7058      	strb	r0, [r3, #1]
}
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	20001794 	.word	0x20001794

08003d68 <MOTIONFX_Send_Quat_Notification_Task>:
{
 8003d68:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(MOTIONFX_Server_App_Context.QuatNotificationStatus)
 8003d6a:	4cad      	ldr	r4, [pc, #692]	; (8004020 <MOTIONFX_Send_Quat_Notification_Task+0x2b8>)
 8003d6c:	7823      	ldrb	r3, [r4, #0]
{
 8003d6e:	b0b5      	sub	sp, #212	; 0xd4
  if(MOTIONFX_Server_App_Context.QuatNotificationStatus)
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	f000 80e3 	beq.w	8003f3c <MOTIONFX_Send_Quat_Notification_Task+0x1d4>
    CounterFX++;
 8003d76:	4dab      	ldr	r5, [pc, #684]	; (8004024 <MOTIONFX_Send_Quat_Notification_Task+0x2bc>)
 8003d78:	682b      	ldr	r3, [r5, #0]
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	602b      	str	r3, [r5, #0]
  (void)IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, ACC_Value);
 8003d7e:	aa04      	add	r2, sp, #16
 8003d80:	2102      	movs	r1, #2
 8003d82:	2000      	movs	r0, #0
 8003d84:	f005 ff86 	bl	8009c94 <IKS01A3_MOTION_SENSOR_GetAxes>
  (void)IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LSM6DSO_0, MOTION_GYRO, GYR_Value);
 8003d88:	aa07      	add	r2, sp, #28
 8003d8a:	2101      	movs	r1, #1
 8003d8c:	2000      	movs	r0, #0
 8003d8e:	f005 ff81 	bl	8009c94 <IKS01A3_MOTION_SENSOR_GetAxes>
  IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LIS2MDL_0, MOTION_MAGNETO, MAG_Value);
 8003d92:	2104      	movs	r1, #4
 8003d94:	aa0a      	add	r2, sp, #40	; 0x28
 8003d96:	2002      	movs	r0, #2
 8003d98:	f005 ff7c 	bl	8009c94 <IKS01A3_MOTION_SENSOR_GetAxes>
  if (MOTIONFX_Server_App_Context.MagCalStatus == 0U)
 8003d9c:	7d21      	ldrb	r1, [r4, #20]
 8003d9e:	2900      	cmp	r1, #0
 8003da0:	f040 80c6 	bne.w	8003f30 <MOTIONFX_Send_Quat_Notification_Task+0x1c8>
    calibIndex++;
 8003da4:	68aa      	ldr	r2, [r5, #8]
 8003da6:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003da8:	3201      	adds	r2, #1
    if (calibIndex == 4)
 8003daa:	2a04      	cmp	r2, #4
 8003dac:	e9dd 3e0a 	ldrd	r3, lr, [sp, #40]	; 0x28
    calibIndex++;
 8003db0:	60aa      	str	r2, [r5, #8]
    if (calibIndex == 4)
 8003db2:	f000 80cc 	beq.w	8003f4e <MOTIONFX_Send_Quat_Notification_Task+0x1e6>
 8003db6:	af16      	add	r7, sp, #88	; 0x58
 8003db8:	ae0d      	add	r6, sp, #52	; 0x34
  data_in.gyro[0] = (float)GYR_Value.x * FROM_MDPS_TO_DPS;
 8003dba:	eddd 5a07 	vldr	s11, [sp, #28]
 8003dbe:	ed9f 6a9a 	vldr	s12, [pc, #616]	; 8004028 <MOTIONFX_Send_Quat_Notification_Task+0x2c0>
  data_in.mag[0] = (float)MAG_Value.x * FROM_MGAUSS_TO_UT50;
 8003dc2:	eddf 2a9a 	vldr	s5, [pc, #616]	; 800402c <MOTIONFX_Send_Quat_Notification_Task+0x2c4>
  MAG_Value->z = (int32_t)(MAG_Value->z - MOTIONFX_Server_App_Context.MAG_Offset.z);
 8003dc6:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
  data_in.gyro[0] = (float)GYR_Value.x * FROM_MDPS_TO_DPS;
 8003dca:	eeb8 3ae5 	vcvt.f32.s32	s6, s11
  data_in.gyro[1] = (float)GYR_Value.y * FROM_MDPS_TO_DPS;
 8003dce:	eddd 5a08 	vldr	s11, [sp, #32]
  MAG_Value->z = (int32_t)(MAG_Value->z - MOTIONFX_Server_App_Context.MAG_Offset.z);
 8003dd2:	9201      	str	r2, [sp, #4]
  data_in.gyro[1] = (float)GYR_Value.y * FROM_MDPS_TO_DPS;
 8003dd4:	eef8 3ae5 	vcvt.f32.s32	s7, s11
  data_in.gyro[2] = (float)GYR_Value.z * FROM_MDPS_TO_DPS;
 8003dd8:	eddd 5a09 	vldr	s11, [sp, #36]	; 0x24
  MAG_Value->x = (int32_t)(MAG_Value->x - MOTIONFX_Server_App_Context.MAG_Offset.x);
 8003ddc:	6862      	ldr	r2, [r4, #4]
  data_in.gyro[2] = (float)GYR_Value.z * FROM_MDPS_TO_DPS;
 8003dde:	eeb8 4ae5 	vcvt.f32.s32	s8, s11
  data_in.acc[0] = (float)ACC_Value.x * FROM_MG_TO_G;
 8003de2:	eddd 5a04 	vldr	s11, [sp, #16]
  MAG_Value->x = (int32_t)(MAG_Value->x - MOTIONFX_Server_App_Context.MAG_Offset.x);
 8003de6:	1a9b      	subs	r3, r3, r2
  MAG_Value->y = (int32_t)(MAG_Value->y - MOTIONFX_Server_App_Context.MAG_Offset.y);
 8003de8:	ebae 0101 	sub.w	r1, lr, r1
  MAG_Value->z = (int32_t)(MAG_Value->z - MOTIONFX_Server_App_Context.MAG_Offset.z);
 8003dec:	9a01      	ldr	r2, [sp, #4]
  MAG_Value->y = (int32_t)(MAG_Value->y - MOTIONFX_Server_App_Context.MAG_Offset.y);
 8003dee:	910b      	str	r1, [sp, #44]	; 0x2c
  data_in.mag[1] = (float)MAG_Value.y * FROM_MGAUSS_TO_UT50;
 8003df0:	ee07 1a10 	vmov	s14, r1
  data_in.acc[0] = (float)ACC_Value.x * FROM_MG_TO_G;
 8003df4:	eef8 4ae5 	vcvt.f32.s32	s9, s11
  data_in.acc[1] = (float)ACC_Value.y * FROM_MG_TO_G;
 8003df8:	eddd 5a05 	vldr	s11, [sp, #20]
  MAG_Value->x = (int32_t)(MAG_Value->x - MOTIONFX_Server_App_Context.MAG_Offset.x);
 8003dfc:	930a      	str	r3, [sp, #40]	; 0x28
  MAG_Value->z = (int32_t)(MAG_Value->z - MOTIONFX_Server_App_Context.MAG_Offset.z);
 8003dfe:	1a82      	subs	r2, r0, r2
  data_in.mag[0] = (float)MAG_Value.x * FROM_MGAUSS_TO_UT50;
 8003e00:	ee07 3a90 	vmov	s15, r3
  data_in.mag[1] = (float)MAG_Value.y * FROM_MGAUSS_TO_UT50;
 8003e04:	eef8 6ac7 	vcvt.f32.s32	s13, s14
  data_in.acc[1] = (float)ACC_Value.y * FROM_MG_TO_G;
 8003e08:	eeb8 5ae5 	vcvt.f32.s32	s10, s11
  data_in.mag[2] = (float)MAG_Value.z * FROM_MGAUSS_TO_UT50;
 8003e0c:	ee07 2a10 	vmov	s14, r2
  data_in.acc[2] = (float)ACC_Value.z * FROM_MG_TO_G;
 8003e10:	eddd 5a06 	vldr	s11, [sp, #24]
  MAG_Value->z = (int32_t)(MAG_Value->z - MOTIONFX_Server_App_Context.MAG_Offset.z);
 8003e14:	920c      	str	r2, [sp, #48]	; 0x30
  data_in.acc[2] = (float)ACC_Value.z * FROM_MG_TO_G;
 8003e16:	eef8 5ae5 	vcvt.f32.s32	s11, s11
  data_in.mag[0] = (float)MAG_Value.x * FROM_MGAUSS_TO_UT50;
 8003e1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  data_in.mag[2] = (float)MAG_Value.z * FROM_MGAUSS_TO_UT50;
 8003e1e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  data_in.gyro[0] = (float)GYR_Value.x * FROM_MDPS_TO_DPS;
 8003e22:	ee23 3a06 	vmul.f32	s6, s6, s12
  data_in.gyro[1] = (float)GYR_Value.y * FROM_MDPS_TO_DPS;
 8003e26:	ee63 3a86 	vmul.f32	s7, s7, s12
  data_in.gyro[2] = (float)GYR_Value.z * FROM_MDPS_TO_DPS;
 8003e2a:	ee24 4a06 	vmul.f32	s8, s8, s12
  data_in.acc[0] = (float)ACC_Value.x * FROM_MG_TO_G;
 8003e2e:	ee64 4a86 	vmul.f32	s9, s9, s12
  data_in.acc[1] = (float)ACC_Value.y * FROM_MG_TO_G;
 8003e32:	ee25 5a06 	vmul.f32	s10, s10, s12
  data_in.mag[0] = (float)MAG_Value.x * FROM_MGAUSS_TO_UT50;
 8003e36:	ee67 7aa2 	vmul.f32	s15, s15, s5
  data_in.mag[1] = (float)MAG_Value.y * FROM_MGAUSS_TO_UT50;
 8003e3a:	ee66 6aa2 	vmul.f32	s13, s13, s5
  data_in.mag[2] = (float)MAG_Value.z * FROM_MGAUSS_TO_UT50;
 8003e3e:	ee27 7a22 	vmul.f32	s14, s14, s5
  data_in.acc[2] = (float)ACC_Value.z * FROM_MG_TO_G;
 8003e42:	ee25 6a86 	vmul.f32	s12, s11, s12
  MotionFX_manager_run(pdata_in, pdata_out, MOTIONFX_ENGINE_DELTATIME);
 8003e46:	4639      	mov	r1, r7
 8003e48:	4630      	mov	r0, r6
 8003e4a:	4a79      	ldr	r2, [pc, #484]	; (8004030 <MOTIONFX_Send_Quat_Notification_Task+0x2c8>)
  data_in.mag[0] = (float)MAG_Value.x * FROM_MGAUSS_TO_UT50;
 8003e4c:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
  data_in.mag[1] = (float)MAG_Value.y * FROM_MGAUSS_TO_UT50;
 8003e50:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
  data_in.mag[2] = (float)MAG_Value.z * FROM_MGAUSS_TO_UT50;
 8003e54:	ed8d 7a0f 	vstr	s14, [sp, #60]	; 0x3c
  data_in.gyro[0] = (float)GYR_Value.x * FROM_MDPS_TO_DPS;
 8003e58:	ed8d 3a13 	vstr	s6, [sp, #76]	; 0x4c
  data_in.gyro[1] = (float)GYR_Value.y * FROM_MDPS_TO_DPS;
 8003e5c:	edcd 3a14 	vstr	s7, [sp, #80]	; 0x50
  data_in.gyro[2] = (float)GYR_Value.z * FROM_MDPS_TO_DPS;
 8003e60:	ed8d 4a15 	vstr	s8, [sp, #84]	; 0x54
  data_in.acc[0] = (float)ACC_Value.x * FROM_MG_TO_G;
 8003e64:	edcd 4a10 	vstr	s9, [sp, #64]	; 0x40
  data_in.acc[1] = (float)ACC_Value.y * FROM_MG_TO_G;
 8003e68:	ed8d 5a11 	vstr	s10, [sp, #68]	; 0x44
  data_in.acc[2] = (float)ACC_Value.z * FROM_MG_TO_G;
 8003e6c:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
  MotionFX_manager_run(pdata_in, pdata_out, MOTIONFX_ENGINE_DELTATIME);
 8003e70:	f7fd fe02 	bl	8001a78 <MotionFX_manager_run>
  if(MOTIONFX_Server_App_Context.QuatNotificationStatus)
 8003e74:	7823      	ldrb	r3, [r4, #0]
 8003e76:	b383      	cbz	r3, 8003eda <MOTIONFX_Send_Quat_Notification_Task+0x172>
    if(pdata_out->quaternion_9X[3] < 0)
 8003e78:	ed9d 6a1c 	vldr	s12, [sp, #112]	; 0x70
    int32_t QuaternionNumber = (CounterFX>SEND_N_QUATERNIONS) ? (SEND_N_QUATERNIONS-1) : (CounterFX-1);
 8003e7c:	682a      	ldr	r2, [r5, #0]
 8003e7e:	eddd 6a19 	vldr	s13, [sp, #100]	; 0x64
 8003e82:	ed9d 7a1a 	vldr	s14, [sp, #104]	; 0x68
 8003e86:	eddd 7a1b 	vldr	s15, [sp, #108]	; 0x6c
    if(pdata_out->quaternion_9X[3] < 0)
 8003e8a:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
    int32_t QuaternionNumber = (CounterFX>SEND_N_QUATERNIONS) ? (SEND_N_QUATERNIONS-1) : (CounterFX-1);
 8003e8e:	2a03      	cmp	r2, #3
 8003e90:	4613      	mov	r3, r2
 8003e92:	bfa8      	it	ge
 8003e94:	2303      	movge	r3, #3
    if(pdata_out->quaternion_9X[3] < 0)
 8003e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      MOTIONFX_Server_App_Context.quat_axes[QuaternionNumber].x = (int32_t)(pdata_out->quaternion_9X[0] * (-10000));
 8003e9a:	bf4c      	ite	mi
 8003e9c:	ed9f 6a65 	vldrmi	s12, [pc, #404]	; 8004034 <MOTIONFX_Send_Quat_Notification_Task+0x2cc>
      MOTIONFX_Server_App_Context.quat_axes[QuaternionNumber].x = (int32_t)(pdata_out->quaternion_9X[0] * 10000);
 8003ea0:	ed9f 6a65 	vldrpl	s12, [pc, #404]	; 8004038 <MOTIONFX_Send_Quat_Notification_Task+0x2d0>
 8003ea4:	ee66 6a86 	vmul.f32	s13, s13, s12
      MOTIONFX_Server_App_Context.quat_axes[QuaternionNumber].y = (int32_t)(pdata_out->quaternion_9X[1] * 10000);
 8003ea8:	ee27 7a06 	vmul.f32	s14, s14, s12
      MOTIONFX_Server_App_Context.quat_axes[QuaternionNumber].z = (int32_t)(pdata_out->quaternion_9X[2] * 10000);
 8003eac:	ee67 7a86 	vmul.f32	s15, s15, s12
    int32_t QuaternionNumber = (CounterFX>SEND_N_QUATERNIONS) ? (SEND_N_QUATERNIONS-1) : (CounterFX-1);
 8003eb0:	3b01      	subs	r3, #1
      MOTIONFX_Server_App_Context.quat_axes[QuaternionNumber].x = (int32_t)(pdata_out->quaternion_9X[0] * 10000);
 8003eb2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003eb6:	eefd 6ae6 	vcvt.s32.f32	s13, s13
      MOTIONFX_Server_App_Context.quat_axes[QuaternionNumber].y = (int32_t)(pdata_out->quaternion_9X[1] * 10000);
 8003eba:	eebd 7ac7 	vcvt.s32.f32	s14, s14
      MOTIONFX_Server_App_Context.quat_axes[QuaternionNumber].z = (int32_t)(pdata_out->quaternion_9X[2] * 10000);
 8003ebe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
      MOTIONFX_Server_App_Context.quat_axes[QuaternionNumber].x = (int32_t)(pdata_out->quaternion_9X[0] * 10000);
 8003ec2:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    if(CounterFX == QUAT_UPDATE_MUL_10MS)
 8003ec6:	2a03      	cmp	r2, #3
      MOTIONFX_Server_App_Context.quat_axes[QuaternionNumber].x = (int32_t)(pdata_out->quaternion_9X[0] * 10000);
 8003ec8:	edc4 6a06 	vstr	s13, [r4, #24]
      MOTIONFX_Server_App_Context.quat_axes[QuaternionNumber].y = (int32_t)(pdata_out->quaternion_9X[1] * 10000);
 8003ecc:	ed84 7a07 	vstr	s14, [r4, #28]
      MOTIONFX_Server_App_Context.quat_axes[QuaternionNumber].z = (int32_t)(pdata_out->quaternion_9X[2] * 10000);
 8003ed0:	edc4 7a08 	vstr	s15, [r4, #32]
    if(CounterFX == QUAT_UPDATE_MUL_10MS)
 8003ed4:	d06c      	beq.n	8003fb0 <MOTIONFX_Send_Quat_Notification_Task+0x248>
}
 8003ed6:	b035      	add	sp, #212	; 0xd4
 8003ed8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(MOTIONFX_Server_App_Context.ECompassNotificationStatus)
 8003eda:	7863      	ldrb	r3, [r4, #1]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d0fa      	beq.n	8003ed6 <MOTIONFX_Send_Quat_Notification_Task+0x16e>
    if(CounterEC == 10)
 8003ee0:	686b      	ldr	r3, [r5, #4]
 8003ee2:	2b0a      	cmp	r3, #10
 8003ee4:	d1f7      	bne.n	8003ed6 <MOTIONFX_Send_Quat_Notification_Task+0x16e>
      MOTIONFX_Server_App_Context.Angle = (uint16_t)trunc(100*pdata_out->heading_9X);
 8003ee6:	ed9d 7a23 	vldr	s14, [sp, #140]	; 0x8c
 8003eea:	eddf 7a54 	vldr	s15, [pc, #336]	; 800403c <MOTIONFX_Send_Quat_Notification_Task+0x2d4>
 8003eee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ef2:	ee17 0a90 	vmov	r0, s15
 8003ef6:	f7fc faa7 	bl	8000448 <__aeabi_f2d>
 8003efa:	f01c ff29 	bl	8020d50 <trunc>
 8003efe:	f7fc fdd3 	bl	8000aa8 <__aeabi_d2uiz>
 8003f02:	b286      	uxth	r6, r0
 8003f04:	87a6      	strh	r6, [r4, #60]	; 0x3c
  STORE_LE_16(value, (HAL_GetTick()>>3));
 8003f06:	f006 faa3 	bl	800a450 <HAL_GetTick>
 8003f0a:	08c0      	lsrs	r0, r0, #3
 8003f0c:	f88d 000c 	strb.w	r0, [sp, #12]
 8003f10:	f006 fa9e 	bl	800a450 <HAL_GetTick>
  if(MOTIONFX_Server_App_Context.ECompassNotificationStatus)
 8003f14:	7863      	ldrb	r3, [r4, #1]
  STORE_LE_16(value+2, Angle);
 8003f16:	f88d 600e 	strb.w	r6, [sp, #14]
  STORE_LE_16(value, (HAL_GetTick()>>3));
 8003f1a:	0ac0      	lsrs	r0, r0, #11
  STORE_LE_16(value+2, Angle);
 8003f1c:	0a36      	lsrs	r6, r6, #8
 8003f1e:	f88d 600f 	strb.w	r6, [sp, #15]
  STORE_LE_16(value, (HAL_GetTick()>>3));
 8003f22:	f88d 000d 	strb.w	r0, [sp, #13]
  if(MOTIONFX_Server_App_Context.ECompassNotificationStatus)
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d148      	bne.n	8003fbc <MOTIONFX_Send_Quat_Notification_Task+0x254>
      CounterEC = 0;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	606b      	str	r3, [r5, #4]
}
 8003f2e:	e7d2      	b.n	8003ed6 <MOTIONFX_Send_Quat_Notification_Task+0x16e>
    calibIndex = 0;
 8003f30:	2200      	movs	r2, #0
 8003f32:	e9dd 3e0a 	ldrd	r3, lr, [sp, #40]	; 0x28
 8003f36:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003f38:	60aa      	str	r2, [r5, #8]
 8003f3a:	e73c      	b.n	8003db6 <MOTIONFX_Send_Quat_Notification_Task+0x4e>
  else if(MOTIONFX_Server_App_Context.ECompassNotificationStatus)
 8003f3c:	7863      	ldrb	r3, [r4, #1]
    CounterEC++;
 8003f3e:	4d39      	ldr	r5, [pc, #228]	; (8004024 <MOTIONFX_Send_Quat_Notification_Task+0x2bc>)
  else if(MOTIONFX_Server_App_Context.ECompassNotificationStatus)
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	f43f af1c 	beq.w	8003d7e <MOTIONFX_Send_Quat_Notification_Task+0x16>
    CounterEC++;
 8003f46:	686b      	ldr	r3, [r5, #4]
 8003f48:	3301      	adds	r3, #1
 8003f4a:	606b      	str	r3, [r5, #4]
 8003f4c:	e717      	b.n	8003d7e <MOTIONFX_Send_Quat_Notification_Task+0x16>
      mag_data_in.mag[1] = (float)MAG_Value->y * FROM_MGAUSS_TO_UT50;
 8003f4e:	ee07 ea10 	vmov	s14, lr
      mag_data_in.mag[0] = (float)MAG_Value->x * FROM_MGAUSS_TO_UT50;
 8003f52:	ee07 3a90 	vmov	s15, r3
      mag_data_in.mag[1] = (float)MAG_Value->y * FROM_MGAUSS_TO_UT50;
 8003f56:	eef8 6ac7 	vcvt.f32.s32	s13, s14
      mag_data_in.mag[2] = (float)MAG_Value->z * FROM_MGAUSS_TO_UT50;
 8003f5a:	ee07 0a10 	vmov	s14, r0
      mag_data_in.mag[0] = (float)MAG_Value->x * FROM_MGAUSS_TO_UT50;
 8003f5e:	ed9f 6a33 	vldr	s12, [pc, #204]	; 800402c <MOTIONFX_Send_Quat_Notification_Task+0x2c4>
      mag_data_in.time_stamp = (int)MOTIONFX_Server_App_Context.MagTimeStamp;
 8003f62:	6923      	ldr	r3, [r4, #16]
      calibIndex = 0;
 8003f64:	60a9      	str	r1, [r5, #8]
      mag_data_in.mag[0] = (float)MAG_Value->x * FROM_MGAUSS_TO_UT50;
 8003f66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
      mag_data_in.mag[2] = (float)MAG_Value->z * FROM_MGAUSS_TO_UT50;
 8003f6a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
      mag_data_in.mag[0] = (float)MAG_Value->x * FROM_MGAUSS_TO_UT50;
 8003f6e:	ee67 7a86 	vmul.f32	s15, s15, s12
      mag_data_in.mag[1] = (float)MAG_Value->y * FROM_MGAUSS_TO_UT50;
 8003f72:	ee66 6a86 	vmul.f32	s13, s13, s12
      mag_data_in.mag[2] = (float)MAG_Value->z * FROM_MGAUSS_TO_UT50;
 8003f76:	ee27 7a06 	vmul.f32	s14, s14, s12
      MotionFX_manager_MagCal_run(&mag_data_in, &mag_data_out);
 8003f7a:	af16      	add	r7, sp, #88	; 0x58
 8003f7c:	ae0d      	add	r6, sp, #52	; 0x34
      MOTIONFX_Server_App_Context.MagTimeStamp += (uint32_t)MOTIONFX_ALGO_PERIOD;
 8003f7e:	f103 020a 	add.w	r2, r3, #10
      MotionFX_manager_MagCal_run(&mag_data_in, &mag_data_out);
 8003f82:	4639      	mov	r1, r7
 8003f84:	4630      	mov	r0, r6
      mag_data_in.time_stamp = (int)MOTIONFX_Server_App_Context.MagTimeStamp;
 8003f86:	9310      	str	r3, [sp, #64]	; 0x40
      mag_data_in.mag[0] = (float)MAG_Value->x * FROM_MGAUSS_TO_UT50;
 8003f88:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
      mag_data_in.mag[1] = (float)MAG_Value->y * FROM_MGAUSS_TO_UT50;
 8003f8c:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
      mag_data_in.mag[2] = (float)MAG_Value->z * FROM_MGAUSS_TO_UT50;
 8003f90:	ed8d 7a0f 	vstr	s14, [sp, #60]	; 0x3c
      MOTIONFX_Server_App_Context.MagTimeStamp += (uint32_t)MOTIONFX_ALGO_PERIOD;
 8003f94:	6122      	str	r2, [r4, #16]
      MotionFX_manager_MagCal_run(&mag_data_in, &mag_data_out);
 8003f96:	f7fd fd93 	bl	8001ac0 <MotionFX_manager_MagCal_run>
      if (mag_data_out.cal_quality == MFX_MAGCALGOOD)
 8003f9a:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8003f9e:	2b03      	cmp	r3, #3
 8003fa0:	d01e      	beq.n	8003fe0 <MOTIONFX_Send_Quat_Notification_Task+0x278>
      if(MOTIONFX_Server_App_Context.MagCalStatus == 1)
 8003fa2:	7d23      	ldrb	r3, [r4, #20]
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d00f      	beq.n	8003fc8 <MOTIONFX_Send_Quat_Notification_Task+0x260>
 8003fa8:	e9dd 3e0a 	ldrd	r3, lr, [sp, #40]	; 0x28
 8003fac:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003fae:	e704      	b.n	8003dba <MOTIONFX_Send_Quat_Notification_Task+0x52>
      Quat_Update(MOTIONFX_Server_App_Context.quat_axes);
 8003fb0:	f7ff fe36 	bl	8003c20 <Quat_Update.constprop.0>
      CounterFX = 0;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	602b      	str	r3, [r5, #0]
}
 8003fb8:	b035      	add	sp, #212	; 0xd4
 8003fba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MOTENV_STM_App_Update_Char(ECOMPASS_CHAR_UUID, VALUE_LEN_ECOMPASS, (uint8_t *)&value);
 8003fbc:	aa03      	add	r2, sp, #12
 8003fbe:	2104      	movs	r1, #4
 8003fc0:	2040      	movs	r0, #64	; 0x40
 8003fc2:	f009 f941 	bl	800d248 <MOTENV_STM_App_Update_Char>
 8003fc6:	e7b0      	b.n	8003f2a <MOTIONFX_Send_Quat_Notification_Task+0x1c2>
        CONFIG_Send_Notification(FEATURE_MASK_SENSORFUSION_SHORT, W2ST_COMMAND_CAL_STATUS, 100);
 8003fc8:	2264      	movs	r2, #100	; 0x64
 8003fca:	21ff      	movs	r1, #255	; 0xff
 8003fcc:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003fd0:	f7fd ffb8 	bl	8001f44 <CONFIG_Send_Notification>
        CONFIG_Send_Notification(FEATURE_MASK_ECOMPASS, W2ST_COMMAND_CAL_STATUS, 100);
 8003fd4:	2264      	movs	r2, #100	; 0x64
 8003fd6:	21ff      	movs	r1, #255	; 0xff
 8003fd8:	2040      	movs	r0, #64	; 0x40
 8003fda:	f7fd ffb3 	bl	8001f44 <CONFIG_Send_Notification>
 8003fde:	e7e3      	b.n	8003fa8 <MOTIONFX_Send_Quat_Notification_Task+0x240>
        ans_float = (mag_data_out.hi_bias[0] * FROM_UT50_TO_MGAUSS);
 8003fe0:	ed9f 6a17 	vldr	s12, [pc, #92]	; 8004040 <MOTIONFX_Send_Quat_Notification_Task+0x2d8>
 8003fe4:	eddd 6a16 	vldr	s13, [sp, #88]	; 0x58
        ans_float = (mag_data_out.hi_bias[1] * FROM_UT50_TO_MGAUSS);
 8003fe8:	ed9d 7a17 	vldr	s14, [sp, #92]	; 0x5c
        ans_float = (mag_data_out.hi_bias[2] * FROM_UT50_TO_MGAUSS);
 8003fec:	eddd 7a18 	vldr	s15, [sp, #96]	; 0x60
        ans_float = (mag_data_out.hi_bias[0] * FROM_UT50_TO_MGAUSS);
 8003ff0:	ee66 6a86 	vmul.f32	s13, s13, s12
        ans_float = (mag_data_out.hi_bias[1] * FROM_UT50_TO_MGAUSS);
 8003ff4:	ee27 7a06 	vmul.f32	s14, s14, s12
        ans_float = (mag_data_out.hi_bias[2] * FROM_UT50_TO_MGAUSS);
 8003ff8:	ee67 7a86 	vmul.f32	s15, s15, s12
        MOTIONFX_Server_App_Context.MAG_Offset.x = (int32_t)ans_float;
 8003ffc:	eefd 6ae6 	vcvt.s32.f32	s13, s13
        MOTIONFX_Server_App_Context.MAG_Offset.y = (int32_t)ans_float;
 8004000:	eebd 7ac7 	vcvt.s32.f32	s14, s14
        MOTIONFX_Server_App_Context.MAG_Offset.z = (int32_t)ans_float;
 8004004:	eefd 7ae7 	vcvt.s32.f32	s15, s15
        MOTIONFX_Server_App_Context.MagCalStatus = 1;
 8004008:	2301      	movs	r3, #1
        MotionFX_manager_MagCal_stop(MOTIONFX_ALGO_PERIOD);
 800400a:	200a      	movs	r0, #10
        MOTIONFX_Server_App_Context.MAG_Offset.x = (int32_t)ans_float;
 800400c:	edc4 6a01 	vstr	s13, [r4, #4]
        MOTIONFX_Server_App_Context.MAG_Offset.y = (int32_t)ans_float;
 8004010:	ed84 7a02 	vstr	s14, [r4, #8]
        MOTIONFX_Server_App_Context.MAG_Offset.z = (int32_t)ans_float;
 8004014:	edc4 7a03 	vstr	s15, [r4, #12]
        MOTIONFX_Server_App_Context.MagCalStatus = 1;
 8004018:	7523      	strb	r3, [r4, #20]
        MotionFX_manager_MagCal_stop(MOTIONFX_ALGO_PERIOD);
 800401a:	f7fd fd5f 	bl	8001adc <MotionFX_manager_MagCal_stop>
 800401e:	e7c0      	b.n	8003fa2 <MOTIONFX_Send_Quat_Notification_Task+0x23a>
 8004020:	20001794 	.word	0x20001794
 8004024:	20001948 	.word	0x20001948
 8004028:	3a83126f 	.word	0x3a83126f
 800402c:	3b03126f 	.word	0x3b03126f
 8004030:	3c23d70a 	.word	0x3c23d70a
 8004034:	c61c4000 	.word	0xc61c4000
 8004038:	461c4000 	.word	0x461c4000
 800403c:	42c80000 	.word	0x42c80000
 8004040:	43fa0000 	.word	0x43fa0000

08004044 <MOTIONFX_Send_ECompass_Notification_Task>:
 8004044:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004046:	4cad      	ldr	r4, [pc, #692]	; (80042fc <MOTIONFX_Send_ECompass_Notification_Task+0x2b8>)
 8004048:	7823      	ldrb	r3, [r4, #0]
 800404a:	b0b5      	sub	sp, #212	; 0xd4
 800404c:	2b00      	cmp	r3, #0
 800404e:	f000 80e3 	beq.w	8004218 <MOTIONFX_Send_ECompass_Notification_Task+0x1d4>
 8004052:	4dab      	ldr	r5, [pc, #684]	; (8004300 <MOTIONFX_Send_ECompass_Notification_Task+0x2bc>)
 8004054:	682b      	ldr	r3, [r5, #0]
 8004056:	3301      	adds	r3, #1
 8004058:	602b      	str	r3, [r5, #0]
 800405a:	aa0a      	add	r2, sp, #40	; 0x28
 800405c:	2102      	movs	r1, #2
 800405e:	2000      	movs	r0, #0
 8004060:	f005 fe18 	bl	8009c94 <IKS01A3_MOTION_SENSOR_GetAxes>
 8004064:	aa07      	add	r2, sp, #28
 8004066:	2101      	movs	r1, #1
 8004068:	2000      	movs	r0, #0
 800406a:	f005 fe13 	bl	8009c94 <IKS01A3_MOTION_SENSOR_GetAxes>
 800406e:	2104      	movs	r1, #4
 8004070:	aa04      	add	r2, sp, #16
 8004072:	2002      	movs	r0, #2
 8004074:	f005 fe0e 	bl	8009c94 <IKS01A3_MOTION_SENSOR_GetAxes>
 8004078:	7d21      	ldrb	r1, [r4, #20]
 800407a:	2900      	cmp	r1, #0
 800407c:	f040 80c6 	bne.w	800420c <MOTIONFX_Send_ECompass_Notification_Task+0x1c8>
 8004080:	68aa      	ldr	r2, [r5, #8]
 8004082:	9806      	ldr	r0, [sp, #24]
 8004084:	3201      	adds	r2, #1
 8004086:	2a04      	cmp	r2, #4
 8004088:	e9dd 3e04 	ldrd	r3, lr, [sp, #16]
 800408c:	60aa      	str	r2, [r5, #8]
 800408e:	f000 80cc 	beq.w	800422a <MOTIONFX_Send_ECompass_Notification_Task+0x1e6>
 8004092:	ae0d      	add	r6, sp, #52	; 0x34
 8004094:	af16      	add	r7, sp, #88	; 0x58
 8004096:	eddd 5a07 	vldr	s11, [sp, #28]
 800409a:	ed9f 6a9a 	vldr	s12, [pc, #616]	; 8004304 <MOTIONFX_Send_ECompass_Notification_Task+0x2c0>
 800409e:	eddf 2a9a 	vldr	s5, [pc, #616]	; 8004308 <MOTIONFX_Send_ECompass_Notification_Task+0x2c4>
 80040a2:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 80040a6:	eeb8 3ae5 	vcvt.f32.s32	s6, s11
 80040aa:	eddd 5a08 	vldr	s11, [sp, #32]
 80040ae:	9201      	str	r2, [sp, #4]
 80040b0:	eef8 3ae5 	vcvt.f32.s32	s7, s11
 80040b4:	eddd 5a09 	vldr	s11, [sp, #36]	; 0x24
 80040b8:	6862      	ldr	r2, [r4, #4]
 80040ba:	eeb8 4ae5 	vcvt.f32.s32	s8, s11
 80040be:	eddd 5a0a 	vldr	s11, [sp, #40]	; 0x28
 80040c2:	1a9b      	subs	r3, r3, r2
 80040c4:	ebae 0101 	sub.w	r1, lr, r1
 80040c8:	9a01      	ldr	r2, [sp, #4]
 80040ca:	9105      	str	r1, [sp, #20]
 80040cc:	ee07 1a10 	vmov	s14, r1
 80040d0:	eef8 4ae5 	vcvt.f32.s32	s9, s11
 80040d4:	eddd 5a0b 	vldr	s11, [sp, #44]	; 0x2c
 80040d8:	9304      	str	r3, [sp, #16]
 80040da:	1a82      	subs	r2, r0, r2
 80040dc:	ee07 3a90 	vmov	s15, r3
 80040e0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80040e4:	eeb8 5ae5 	vcvt.f32.s32	s10, s11
 80040e8:	ee07 2a10 	vmov	s14, r2
 80040ec:	eddd 5a0c 	vldr	s11, [sp, #48]	; 0x30
 80040f0:	9206      	str	r2, [sp, #24]
 80040f2:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80040f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040fa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80040fe:	ee23 3a06 	vmul.f32	s6, s6, s12
 8004102:	ee63 3a86 	vmul.f32	s7, s7, s12
 8004106:	ee24 4a06 	vmul.f32	s8, s8, s12
 800410a:	ee64 4a86 	vmul.f32	s9, s9, s12
 800410e:	ee25 5a06 	vmul.f32	s10, s10, s12
 8004112:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8004116:	ee66 6aa2 	vmul.f32	s13, s13, s5
 800411a:	ee27 7a22 	vmul.f32	s14, s14, s5
 800411e:	ee25 6a86 	vmul.f32	s12, s11, s12
 8004122:	4639      	mov	r1, r7
 8004124:	4630      	mov	r0, r6
 8004126:	4a79      	ldr	r2, [pc, #484]	; (800430c <MOTIONFX_Send_ECompass_Notification_Task+0x2c8>)
 8004128:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 800412c:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 8004130:	ed8d 7a0f 	vstr	s14, [sp, #60]	; 0x3c
 8004134:	ed8d 3a13 	vstr	s6, [sp, #76]	; 0x4c
 8004138:	edcd 3a14 	vstr	s7, [sp, #80]	; 0x50
 800413c:	ed8d 4a15 	vstr	s8, [sp, #84]	; 0x54
 8004140:	edcd 4a10 	vstr	s9, [sp, #64]	; 0x40
 8004144:	ed8d 5a11 	vstr	s10, [sp, #68]	; 0x44
 8004148:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 800414c:	f7fd fc94 	bl	8001a78 <MotionFX_manager_run>
 8004150:	7823      	ldrb	r3, [r4, #0]
 8004152:	b383      	cbz	r3, 80041b6 <MOTIONFX_Send_ECompass_Notification_Task+0x172>
 8004154:	ed9d 6a1c 	vldr	s12, [sp, #112]	; 0x70
 8004158:	682a      	ldr	r2, [r5, #0]
 800415a:	eddd 6a19 	vldr	s13, [sp, #100]	; 0x64
 800415e:	ed9d 7a1a 	vldr	s14, [sp, #104]	; 0x68
 8004162:	eddd 7a1b 	vldr	s15, [sp, #108]	; 0x6c
 8004166:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 800416a:	2a03      	cmp	r2, #3
 800416c:	4613      	mov	r3, r2
 800416e:	bfa8      	it	ge
 8004170:	2303      	movge	r3, #3
 8004172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004176:	bf4c      	ite	mi
 8004178:	ed9f 6a65 	vldrmi	s12, [pc, #404]	; 8004310 <MOTIONFX_Send_ECompass_Notification_Task+0x2cc>
 800417c:	ed9f 6a65 	vldrpl	s12, [pc, #404]	; 8004314 <MOTIONFX_Send_ECompass_Notification_Task+0x2d0>
 8004180:	ee66 6a86 	vmul.f32	s13, s13, s12
 8004184:	ee27 7a06 	vmul.f32	s14, s14, s12
 8004188:	ee67 7a86 	vmul.f32	s15, s15, s12
 800418c:	3b01      	subs	r3, #1
 800418e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004192:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8004196:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800419a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800419e:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80041a2:	2a03      	cmp	r2, #3
 80041a4:	edc4 6a06 	vstr	s13, [r4, #24]
 80041a8:	ed84 7a07 	vstr	s14, [r4, #28]
 80041ac:	edc4 7a08 	vstr	s15, [r4, #32]
 80041b0:	d06c      	beq.n	800428c <MOTIONFX_Send_ECompass_Notification_Task+0x248>
 80041b2:	b035      	add	sp, #212	; 0xd4
 80041b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041b6:	7863      	ldrb	r3, [r4, #1]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d0fa      	beq.n	80041b2 <MOTIONFX_Send_ECompass_Notification_Task+0x16e>
 80041bc:	686b      	ldr	r3, [r5, #4]
 80041be:	2b0a      	cmp	r3, #10
 80041c0:	d1f7      	bne.n	80041b2 <MOTIONFX_Send_ECompass_Notification_Task+0x16e>
 80041c2:	ed9d 7a23 	vldr	s14, [sp, #140]	; 0x8c
 80041c6:	eddf 7a54 	vldr	s15, [pc, #336]	; 8004318 <MOTIONFX_Send_ECompass_Notification_Task+0x2d4>
 80041ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041ce:	ee17 0a90 	vmov	r0, s15
 80041d2:	f7fc f939 	bl	8000448 <__aeabi_f2d>
 80041d6:	f01c fdbb 	bl	8020d50 <trunc>
 80041da:	f7fc fc65 	bl	8000aa8 <__aeabi_d2uiz>
 80041de:	b286      	uxth	r6, r0
 80041e0:	87a6      	strh	r6, [r4, #60]	; 0x3c
 80041e2:	f006 f935 	bl	800a450 <HAL_GetTick>
 80041e6:	08c0      	lsrs	r0, r0, #3
 80041e8:	f88d 000c 	strb.w	r0, [sp, #12]
 80041ec:	f006 f930 	bl	800a450 <HAL_GetTick>
 80041f0:	7863      	ldrb	r3, [r4, #1]
 80041f2:	f88d 600e 	strb.w	r6, [sp, #14]
 80041f6:	0ac0      	lsrs	r0, r0, #11
 80041f8:	0a36      	lsrs	r6, r6, #8
 80041fa:	f88d 600f 	strb.w	r6, [sp, #15]
 80041fe:	f88d 000d 	strb.w	r0, [sp, #13]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d148      	bne.n	8004298 <MOTIONFX_Send_ECompass_Notification_Task+0x254>
 8004206:	2300      	movs	r3, #0
 8004208:	606b      	str	r3, [r5, #4]
 800420a:	e7d2      	b.n	80041b2 <MOTIONFX_Send_ECompass_Notification_Task+0x16e>
 800420c:	2200      	movs	r2, #0
 800420e:	e9dd 3e04 	ldrd	r3, lr, [sp, #16]
 8004212:	9806      	ldr	r0, [sp, #24]
 8004214:	60aa      	str	r2, [r5, #8]
 8004216:	e73c      	b.n	8004092 <MOTIONFX_Send_ECompass_Notification_Task+0x4e>
 8004218:	7863      	ldrb	r3, [r4, #1]
 800421a:	4d39      	ldr	r5, [pc, #228]	; (8004300 <MOTIONFX_Send_ECompass_Notification_Task+0x2bc>)
 800421c:	2b00      	cmp	r3, #0
 800421e:	f43f af1c 	beq.w	800405a <MOTIONFX_Send_ECompass_Notification_Task+0x16>
 8004222:	686b      	ldr	r3, [r5, #4]
 8004224:	3301      	adds	r3, #1
 8004226:	606b      	str	r3, [r5, #4]
 8004228:	e717      	b.n	800405a <MOTIONFX_Send_ECompass_Notification_Task+0x16>
 800422a:	ee07 ea10 	vmov	s14, lr
 800422e:	ee07 3a90 	vmov	s15, r3
 8004232:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8004236:	ee07 0a10 	vmov	s14, r0
 800423a:	ed9f 6a33 	vldr	s12, [pc, #204]	; 8004308 <MOTIONFX_Send_ECompass_Notification_Task+0x2c4>
 800423e:	6923      	ldr	r3, [r4, #16]
 8004240:	60a9      	str	r1, [r5, #8]
 8004242:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004246:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800424a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800424e:	ee66 6a86 	vmul.f32	s13, s13, s12
 8004252:	ee27 7a06 	vmul.f32	s14, s14, s12
 8004256:	ae0d      	add	r6, sp, #52	; 0x34
 8004258:	af16      	add	r7, sp, #88	; 0x58
 800425a:	f103 020a 	add.w	r2, r3, #10
 800425e:	4631      	mov	r1, r6
 8004260:	4638      	mov	r0, r7
 8004262:	9319      	str	r3, [sp, #100]	; 0x64
 8004264:	edcd 7a16 	vstr	s15, [sp, #88]	; 0x58
 8004268:	edcd 6a17 	vstr	s13, [sp, #92]	; 0x5c
 800426c:	ed8d 7a18 	vstr	s14, [sp, #96]	; 0x60
 8004270:	6122      	str	r2, [r4, #16]
 8004272:	f7fd fc25 	bl	8001ac0 <MotionFX_manager_MagCal_run>
 8004276:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 800427a:	2b03      	cmp	r3, #3
 800427c:	d01e      	beq.n	80042bc <MOTIONFX_Send_ECompass_Notification_Task+0x278>
 800427e:	7d23      	ldrb	r3, [r4, #20]
 8004280:	2b01      	cmp	r3, #1
 8004282:	d00f      	beq.n	80042a4 <MOTIONFX_Send_ECompass_Notification_Task+0x260>
 8004284:	e9dd 3e04 	ldrd	r3, lr, [sp, #16]
 8004288:	9806      	ldr	r0, [sp, #24]
 800428a:	e704      	b.n	8004096 <MOTIONFX_Send_ECompass_Notification_Task+0x52>
 800428c:	f7ff fcc8 	bl	8003c20 <Quat_Update.constprop.0>
 8004290:	2300      	movs	r3, #0
 8004292:	602b      	str	r3, [r5, #0]
 8004294:	b035      	add	sp, #212	; 0xd4
 8004296:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004298:	aa03      	add	r2, sp, #12
 800429a:	2104      	movs	r1, #4
 800429c:	2040      	movs	r0, #64	; 0x40
 800429e:	f008 ffd3 	bl	800d248 <MOTENV_STM_App_Update_Char>
 80042a2:	e7b0      	b.n	8004206 <MOTIONFX_Send_ECompass_Notification_Task+0x1c2>
 80042a4:	2264      	movs	r2, #100	; 0x64
 80042a6:	21ff      	movs	r1, #255	; 0xff
 80042a8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80042ac:	f7fd fe4a 	bl	8001f44 <CONFIG_Send_Notification>
 80042b0:	2264      	movs	r2, #100	; 0x64
 80042b2:	21ff      	movs	r1, #255	; 0xff
 80042b4:	2040      	movs	r0, #64	; 0x40
 80042b6:	f7fd fe45 	bl	8001f44 <CONFIG_Send_Notification>
 80042ba:	e7e3      	b.n	8004284 <MOTIONFX_Send_ECompass_Notification_Task+0x240>
 80042bc:	ed9f 6a17 	vldr	s12, [pc, #92]	; 800431c <MOTIONFX_Send_ECompass_Notification_Task+0x2d8>
 80042c0:	eddd 6a0d 	vldr	s13, [sp, #52]	; 0x34
 80042c4:	ed9d 7a0e 	vldr	s14, [sp, #56]	; 0x38
 80042c8:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 80042cc:	ee66 6a86 	vmul.f32	s13, s13, s12
 80042d0:	ee27 7a06 	vmul.f32	s14, s14, s12
 80042d4:	ee67 7a86 	vmul.f32	s15, s15, s12
 80042d8:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 80042dc:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80042e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80042e4:	2301      	movs	r3, #1
 80042e6:	200a      	movs	r0, #10
 80042e8:	edc4 6a01 	vstr	s13, [r4, #4]
 80042ec:	ed84 7a02 	vstr	s14, [r4, #8]
 80042f0:	edc4 7a03 	vstr	s15, [r4, #12]
 80042f4:	7523      	strb	r3, [r4, #20]
 80042f6:	f7fd fbf1 	bl	8001adc <MotionFX_manager_MagCal_stop>
 80042fa:	e7c0      	b.n	800427e <MOTIONFX_Send_ECompass_Notification_Task+0x23a>
 80042fc:	20001794 	.word	0x20001794
 8004300:	20001948 	.word	0x20001948
 8004304:	3a83126f 	.word	0x3a83126f
 8004308:	3b03126f 	.word	0x3b03126f
 800430c:	3c23d70a 	.word	0x3c23d70a
 8004310:	c61c4000 	.word	0xc61c4000
 8004314:	461c4000 	.word	0x461c4000
 8004318:	42c80000 	.word	0x42c80000
 800431c:	43fa0000 	.word	0x43fa0000

08004320 <MOTIONFX_Get_MagCalStatus>:
  return MOTIONFX_Server_App_Context.MagCalStatus;
 8004320:	4b01      	ldr	r3, [pc, #4]	; (8004328 <MOTIONFX_Get_MagCalStatus+0x8>)
}
 8004322:	7d18      	ldrb	r0, [r3, #20]
 8004324:	4770      	bx	lr
 8004326:	bf00      	nop
 8004328:	20001794 	.word	0x20001794

0800432c <MOTIONFX_Get_MAG_Offset>:
}
 800432c:	4800      	ldr	r0, [pc, #0]	; (8004330 <MOTIONFX_Get_MAG_Offset+0x4>)
 800432e:	4770      	bx	lr
 8004330:	20001798 	.word	0x20001798

08004334 <MOTIONFX_ReCalibration>:
{
 8004334:	b510      	push	{r4, lr}
  MOTIONFX_Server_App_Context.MagCalStatus = 0;
 8004336:	4b09      	ldr	r3, [pc, #36]	; (800435c <MOTIONFX_ReCalibration+0x28>)
 8004338:	2400      	movs	r4, #0
  CONFIG_Send_Notification(FEATURE_MASK_SENSORFUSION_SHORT, W2ST_COMMAND_CAL_STATUS, 0);
 800433a:	4622      	mov	r2, r4
 800433c:	21ff      	movs	r1, #255	; 0xff
 800433e:	f44f 7080 	mov.w	r0, #256	; 0x100
  MOTIONFX_Server_App_Context.MagCalStatus = 0;
 8004342:	751c      	strb	r4, [r3, #20]
  CONFIG_Send_Notification(FEATURE_MASK_SENSORFUSION_SHORT, W2ST_COMMAND_CAL_STATUS, 0);
 8004344:	f7fd fdfe 	bl	8001f44 <CONFIG_Send_Notification>
  CONFIG_Send_Notification(FEATURE_MASK_ECOMPASS, W2ST_COMMAND_CAL_STATUS, 0);
 8004348:	4622      	mov	r2, r4
 800434a:	2040      	movs	r0, #64	; 0x40
 800434c:	21ff      	movs	r1, #255	; 0xff
 800434e:	f7fd fdf9 	bl	8001f44 <CONFIG_Send_Notification>
  MotionFX_manager_MagCal_start(MOTIONFX_ALGO_PERIOD);
 8004352:	200a      	movs	r0, #10
}
 8004354:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  MotionFX_manager_MagCal_start(MOTIONFX_ALGO_PERIOD);
 8004358:	f7fd bbbc 	b.w	8001ad4 <MotionFX_manager_MagCal_start>
 800435c:	20001794 	.word	0x20001794

08004360 <MOTIONGR_Context_Init>:
 *         and update the ADV data accordingly
 * @param  None
 * @retval None
 */
void MOTIONGR_Context_Init(void)
{
 8004360:	b530      	push	{r4, r5, lr}
 8004362:	b083      	sub	sp, #12
  /* CarryPosition API initialization function */
  MotionGR_manager_init();
 8004364:	f7fd fbc2 	bl	8001aec <MotionGR_manager_init>

  /* Update BLE ADV field (GestureRec) */
  manuf_data[7] |= 0x02; /* GestureRec */
 8004368:	4910      	ldr	r1, [pc, #64]	; (80043ac <MOTIONGR_Context_Init+0x4c>)
 * @param  status The new notification status
 * @retval None
 */
void MOTIONGR_Set_Notification_Status(uint8_t status)
{
  MOTIONGR_Server_App_Context.NotificationStatus = status;
 800436a:	4d11      	ldr	r5, [pc, #68]	; (80043b0 <MOTIONGR_Context_Init+0x50>)
  manuf_data[7] |= 0x02; /* GestureRec */
 800436c:	79cb      	ldrb	r3, [r1, #7]
  else
  {
    /* Set accelerometer:
     *   - FS   = <-2g, 2g>
     */
    (void)IKS01A3_MOTION_SENSOR_SetFullScale(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, 2);
 800436e:	2202      	movs	r2, #2
  manuf_data[7] |= 0x02; /* GestureRec */
 8004370:	4313      	orrs	r3, r2
  MOTIONGR_Server_App_Context.NotificationStatus = status;
 8004372:	2400      	movs	r4, #0
  manuf_data[7] |= 0x02; /* GestureRec */
 8004374:	71cb      	strb	r3, [r1, #7]
    (void)IKS01A3_MOTION_SENSOR_SetFullScale(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, 2);
 8004376:	4620      	mov	r0, r4
 8004378:	4611      	mov	r1, r2
  MOTIONGR_Server_App_Context.NotificationStatus = status;
 800437a:	702c      	strb	r4, [r5, #0]
    (void)IKS01A3_MOTION_SENSOR_SetFullScale(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, 2);
 800437c:	f005 fd0e 	bl	8009d9c <IKS01A3_MOTION_SENSOR_SetFullScale>
  MOTIONGR_Server_App_Context.GestureRecCode = MGR_NOGESTURE;
 8004380:	706c      	strb	r4, [r5, #1]
static void GestureRec_Update(MGR_output_t GestureRecCode)
{
  uint8_t value[VALUE_LEN_GR];

  /* Timestamp */
  STORE_LE_16(value, (HAL_GetTick()>>3));
 8004382:	f006 f865 	bl	800a450 <HAL_GetTick>
 8004386:	08c0      	lsrs	r0, r0, #3
 8004388:	f88d 0004 	strb.w	r0, [sp, #4]
 800438c:	f006 f860 	bl	800a450 <HAL_GetTick>

#if(CFG_DEBUG_APP_TRACE != 0)
  APP_DBG_MSG("-- MOTIONGR APPLICATION SERVER : NOTIFY CLIENT WITH NEW PARAMETER VALUE \n ");
  APP_DBG_MSG(" \n\r");
#endif
  MOTENV_STM_App_Update_Char(GESTURE_REC_CHAR_UUID, VALUE_LEN_GR, (uint8_t *)&value);
 8004390:	aa01      	add	r2, sp, #4
  STORE_LE_16(value, (HAL_GetTick()>>3));
 8004392:	0ac3      	lsrs	r3, r0, #11
  MOTENV_STM_App_Update_Char(GESTURE_REC_CHAR_UUID, VALUE_LEN_GR, (uint8_t *)&value);
 8004394:	2103      	movs	r1, #3
 8004396:	f44f 7000 	mov.w	r0, #512	; 0x200
  value[2] = GestureRecCode;
 800439a:	f88d 4006 	strb.w	r4, [sp, #6]
  STORE_LE_16(value, (HAL_GetTick()>>3));
 800439e:	f88d 3005 	strb.w	r3, [sp, #5]
  MOTENV_STM_App_Update_Char(GESTURE_REC_CHAR_UUID, VALUE_LEN_GR, (uint8_t *)&value);
 80043a2:	f008 ff51 	bl	800d248 <MOTENV_STM_App_Update_Char>
}
 80043a6:	b003      	add	sp, #12
 80043a8:	bd30      	pop	{r4, r5, pc}
 80043aa:	bf00      	nop
 80043ac:	2000000c 	.word	0x2000000c
 80043b0:	200017d4 	.word	0x200017d4

080043b4 <MOTIONGR_Set_Notification_Status>:
  MOTIONGR_Server_App_Context.NotificationStatus = status;
 80043b4:	4b06      	ldr	r3, [pc, #24]	; (80043d0 <MOTIONGR_Set_Notification_Status+0x1c>)
  if(status == 1)
 80043b6:	2801      	cmp	r0, #1
  MOTIONGR_Server_App_Context.NotificationStatus = status;
 80043b8:	7018      	strb	r0, [r3, #0]
  if(status == 1)
 80043ba:	d004      	beq.n	80043c6 <MOTIONGR_Set_Notification_Status+0x12>
    (void)IKS01A3_MOTION_SENSOR_SetFullScale(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, 2);
 80043bc:	2202      	movs	r2, #2
 80043be:	4611      	mov	r1, r2
 80043c0:	2000      	movs	r0, #0
 80043c2:	f005 bceb 	b.w	8009d9c <IKS01A3_MOTION_SENSOR_SetFullScale>
    (void)IKS01A3_MOTION_SENSOR_SetFullScale(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, 4);
 80043c6:	2204      	movs	r2, #4
 80043c8:	2102      	movs	r1, #2
 80043ca:	2000      	movs	r0, #0
 80043cc:	f005 bce6 	b.w	8009d9c <IKS01A3_MOTION_SENSOR_SetFullScale>
 80043d0:	200017d4 	.word	0x200017d4

080043d4 <MOTIONGR_Send_Notification_Task>:
{
 80043d4:	b530      	push	{r4, r5, lr}
 80043d6:	b089      	sub	sp, #36	; 0x24
  MGR_input_t data_in = {.AccX = 0.0f, .AccY = 0.0f, .AccZ = 0.0f};
 80043d8:	2300      	movs	r3, #0
  (void)IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, &ACC_Value);
 80043da:	aa02      	add	r2, sp, #8
 80043dc:	2102      	movs	r1, #2
 80043de:	2000      	movs	r0, #0
  MGR_input_t data_in = {.AccX = 0.0f, .AccY = 0.0f, .AccZ = 0.0f};
 80043e0:	9305      	str	r3, [sp, #20]
 80043e2:	9306      	str	r3, [sp, #24]
 80043e4:	9307      	str	r3, [sp, #28]
  (void)IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, &ACC_Value);
 80043e6:	f005 fc55 	bl	8009c94 <IKS01A3_MOTION_SENSOR_GetAxes>
  data_in.AccX = (float)ACC_Value.x * FROM_MG_TO_G;
 80043ea:	eddd 7a02 	vldr	s15, [sp, #8]
 80043ee:	ed9f 6a1d 	vldr	s12, [pc, #116]	; 8004464 <MOTIONGR_Send_Notification_Task+0x90>
  MotionGR_manager_run(&data_in, &MOTIONGR_Server_App_Context.GestureRecCode);
 80043f2:	4c1d      	ldr	r4, [pc, #116]	; (8004468 <MOTIONGR_Send_Notification_Task+0x94>)
  data_in.AccX = (float)ACC_Value.x * FROM_MG_TO_G;
 80043f4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  data_in.AccY = (float)ACC_Value.y * FROM_MG_TO_G;
 80043f8:	eddd 7a03 	vldr	s15, [sp, #12]
 80043fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  data_in.AccZ = (float)ACC_Value.z * FROM_MG_TO_G;
 8004400:	eddd 7a04 	vldr	s15, [sp, #16]
 8004404:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  data_in.AccX = (float)ACC_Value.x * FROM_MG_TO_G;
 8004408:	ee66 6a86 	vmul.f32	s13, s13, s12
  data_in.AccY = (float)ACC_Value.y * FROM_MG_TO_G;
 800440c:	ee27 7a06 	vmul.f32	s14, s14, s12
  data_in.AccZ = (float)ACC_Value.z * FROM_MG_TO_G;
 8004410:	ee67 7a86 	vmul.f32	s15, s15, s12
  MotionGR_manager_run(&data_in, &MOTIONGR_Server_App_Context.GestureRecCode);
 8004414:	1c61      	adds	r1, r4, #1
 8004416:	a805      	add	r0, sp, #20
  data_in.AccX = (float)ACC_Value.x * FROM_MG_TO_G;
 8004418:	edcd 6a05 	vstr	s13, [sp, #20]
  data_in.AccY = (float)ACC_Value.y * FROM_MG_TO_G;
 800441c:	ed8d 7a06 	vstr	s14, [sp, #24]
  data_in.AccZ = (float)ACC_Value.z * FROM_MG_TO_G;
 8004420:	edcd 7a07 	vstr	s15, [sp, #28]
  MotionGR_manager_run(&data_in, &MOTIONGR_Server_App_Context.GestureRecCode);
 8004424:	f7fd fb74 	bl	8001b10 <MotionGR_manager_run>
  if(GestureRecCodePrev != MOTIONGR_Server_App_Context.GestureRecCode)
 8004428:	4b10      	ldr	r3, [pc, #64]	; (800446c <MOTIONGR_Send_Notification_Task+0x98>)
 800442a:	7865      	ldrb	r5, [r4, #1]
 800442c:	781a      	ldrb	r2, [r3, #0]
 800442e:	42aa      	cmp	r2, r5
 8004430:	d002      	beq.n	8004438 <MOTIONGR_Send_Notification_Task+0x64>
    if(MOTIONGR_Server_App_Context.NotificationStatus)
 8004432:	7822      	ldrb	r2, [r4, #0]
    GestureRecCodePrev = MOTIONGR_Server_App_Context.GestureRecCode;
 8004434:	701d      	strb	r5, [r3, #0]
    if(MOTIONGR_Server_App_Context.NotificationStatus)
 8004436:	b90a      	cbnz	r2, 800443c <MOTIONGR_Send_Notification_Task+0x68>
}
 8004438:	b009      	add	sp, #36	; 0x24
 800443a:	bd30      	pop	{r4, r5, pc}
  STORE_LE_16(value, (HAL_GetTick()>>3));
 800443c:	f006 f808 	bl	800a450 <HAL_GetTick>
 8004440:	08c0      	lsrs	r0, r0, #3
 8004442:	f88d 0004 	strb.w	r0, [sp, #4]
 8004446:	f006 f803 	bl	800a450 <HAL_GetTick>
  MOTENV_STM_App_Update_Char(GESTURE_REC_CHAR_UUID, VALUE_LEN_GR, (uint8_t *)&value);
 800444a:	aa01      	add	r2, sp, #4
  STORE_LE_16(value, (HAL_GetTick()>>3));
 800444c:	0ac3      	lsrs	r3, r0, #11
  MOTENV_STM_App_Update_Char(GESTURE_REC_CHAR_UUID, VALUE_LEN_GR, (uint8_t *)&value);
 800444e:	2103      	movs	r1, #3
 8004450:	f44f 7000 	mov.w	r0, #512	; 0x200
  STORE_LE_16(value, (HAL_GetTick()>>3));
 8004454:	f88d 3005 	strb.w	r3, [sp, #5]
  value[2] = GestureRecCode;
 8004458:	f88d 5006 	strb.w	r5, [sp, #6]
  MOTENV_STM_App_Update_Char(GESTURE_REC_CHAR_UUID, VALUE_LEN_GR, (uint8_t *)&value);
 800445c:	f008 fef4 	bl	800d248 <MOTENV_STM_App_Update_Char>
}
 8004460:	b009      	add	sp, #36	; 0x24
 8004462:	bd30      	pop	{r4, r5, pc}
 8004464:	3a83126f 	.word	0x3a83126f
 8004468:	200017d4 	.word	0x200017d4
 800446c:	20001954 	.word	0x20001954

08004470 <MOTIONGR_GestureRec_Update>:
{
 8004470:	b510      	push	{r4, lr}
  GestureRec_Update(MOTIONGR_Server_App_Context.GestureRecCode);
 8004472:	4b0b      	ldr	r3, [pc, #44]	; (80044a0 <MOTIONGR_GestureRec_Update+0x30>)
{
 8004474:	b082      	sub	sp, #8
  GestureRec_Update(MOTIONGR_Server_App_Context.GestureRecCode);
 8004476:	785c      	ldrb	r4, [r3, #1]
  STORE_LE_16(value, (HAL_GetTick()>>3));
 8004478:	f005 ffea 	bl	800a450 <HAL_GetTick>
 800447c:	08c0      	lsrs	r0, r0, #3
 800447e:	f88d 0004 	strb.w	r0, [sp, #4]
 8004482:	f005 ffe5 	bl	800a450 <HAL_GetTick>
  MOTENV_STM_App_Update_Char(GESTURE_REC_CHAR_UUID, VALUE_LEN_GR, (uint8_t *)&value);
 8004486:	aa01      	add	r2, sp, #4
  STORE_LE_16(value, (HAL_GetTick()>>3));
 8004488:	0ac3      	lsrs	r3, r0, #11
  MOTENV_STM_App_Update_Char(GESTURE_REC_CHAR_UUID, VALUE_LEN_GR, (uint8_t *)&value);
 800448a:	2103      	movs	r1, #3
 800448c:	f44f 7000 	mov.w	r0, #512	; 0x200
  value[2] = GestureRecCode;
 8004490:	f88d 4006 	strb.w	r4, [sp, #6]
  STORE_LE_16(value, (HAL_GetTick()>>3));
 8004494:	f88d 3005 	strb.w	r3, [sp, #5]
  MOTENV_STM_App_Update_Char(GESTURE_REC_CHAR_UUID, VALUE_LEN_GR, (uint8_t *)&value);
 8004498:	f008 fed6 	bl	800d248 <MOTENV_STM_App_Update_Char>
}
 800449c:	b002      	add	sp, #8
 800449e:	bd10      	pop	{r4, pc}
 80044a0:	200017d4 	.word	0x200017d4

080044a4 <MOTIONID_Context_Init>:
 *         and update the ADV data accordingly
 * @param  None
 * @retval None
 */
void MOTIONID_Context_Init(void)
{
 80044a4:	b530      	push	{r4, r5, lr}
 80044a6:	b083      	sub	sp, #12
  /* CarryPosition API initialization function */
  MotionID_manager_init();
 80044a8:	f7fd fb34 	bl	8001b14 <MotionID_manager_init>

  /* Update BLE ADV field (IntensityDet) */
  manuf_data[7] |= 0x20; /* IntensityDet */
 80044ac:	4910      	ldr	r1, [pc, #64]	; (80044f0 <MOTIONID_Context_Init+0x4c>)
 * @param  status The new notification status
 * @retval None
 */
void MOTIONID_Set_Notification_Status(uint8_t status)
{
  MOTIONID_Server_App_Context.NotificationStatus = status;
 80044ae:	4d11      	ldr	r5, [pc, #68]	; (80044f4 <MOTIONID_Context_Init+0x50>)
  manuf_data[7] |= 0x20; /* IntensityDet */
 80044b0:	79cb      	ldrb	r3, [r1, #7]
  MOTIONID_Server_App_Context.NotificationStatus = status;
 80044b2:	2400      	movs	r4, #0
  else
  {
    /* Set accelerometer:
     *   - FS   = <-2g, 2g>
     */
    (void)IKS01A3_MOTION_SENSOR_SetFullScale(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, 2);
 80044b4:	2202      	movs	r2, #2
  manuf_data[7] |= 0x20; /* IntensityDet */
 80044b6:	f043 0320 	orr.w	r3, r3, #32
 80044ba:	71cb      	strb	r3, [r1, #7]
    (void)IKS01A3_MOTION_SENSOR_SetFullScale(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, 2);
 80044bc:	4620      	mov	r0, r4
 80044be:	4611      	mov	r1, r2
  MOTIONID_Server_App_Context.NotificationStatus = status;
 80044c0:	702c      	strb	r4, [r5, #0]
    (void)IKS01A3_MOTION_SENSOR_SetFullScale(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, 2);
 80044c2:	f005 fc6b 	bl	8009d9c <IKS01A3_MOTION_SENSOR_SetFullScale>
  MOTIONID_Server_App_Context.MIDCode = MID_ON_DESK;
 80044c6:	706c      	strb	r4, [r5, #1]
static void IntensityDet_Update(MID_output_t MIDCode)
{
  uint8_t value[VALUE_LEN_ID];

  /* Timestamp */
  STORE_LE_16(value, (HAL_GetTick()>>3));
 80044c8:	f005 ffc2 	bl	800a450 <HAL_GetTick>
 80044cc:	08c0      	lsrs	r0, r0, #3
 80044ce:	f88d 0004 	strb.w	r0, [sp, #4]
 80044d2:	f005 ffbd 	bl	800a450 <HAL_GetTick>

#if(CFG_DEBUG_APP_TRACE != 0)
  APP_DBG_MSG("-- MOTIONID APPLICATION SERVER : NOTIFY CLIENT WITH NEW PARAMETER VALUE \n ");
  APP_DBG_MSG(" \n\r");
#endif
  MOTENV_STM_App_Update_Char(INTENSITY_DET_CHAR_UUID, VALUE_LEN_ID, (uint8_t *)&value);
 80044d6:	aa01      	add	r2, sp, #4
  STORE_LE_16(value, (HAL_GetTick()>>3));
 80044d8:	0ac3      	lsrs	r3, r0, #11
  MOTENV_STM_App_Update_Char(INTENSITY_DET_CHAR_UUID, VALUE_LEN_ID, (uint8_t *)&value);
 80044da:	2103      	movs	r1, #3
 80044dc:	2020      	movs	r0, #32
  value[2] = MIDCode;
 80044de:	f88d 4006 	strb.w	r4, [sp, #6]
  STORE_LE_16(value, (HAL_GetTick()>>3));
 80044e2:	f88d 3005 	strb.w	r3, [sp, #5]
  MOTENV_STM_App_Update_Char(INTENSITY_DET_CHAR_UUID, VALUE_LEN_ID, (uint8_t *)&value);
 80044e6:	f008 feaf 	bl	800d248 <MOTENV_STM_App_Update_Char>
}
 80044ea:	b003      	add	sp, #12
 80044ec:	bd30      	pop	{r4, r5, pc}
 80044ee:	bf00      	nop
 80044f0:	2000000c 	.word	0x2000000c
 80044f4:	200017d8 	.word	0x200017d8

080044f8 <MOTIONID_Set_Notification_Status>:
  MOTIONID_Server_App_Context.NotificationStatus = status;
 80044f8:	4b06      	ldr	r3, [pc, #24]	; (8004514 <MOTIONID_Set_Notification_Status+0x1c>)
  if(status == 1)
 80044fa:	2801      	cmp	r0, #1
  MOTIONID_Server_App_Context.NotificationStatus = status;
 80044fc:	7018      	strb	r0, [r3, #0]
  if(status == 1)
 80044fe:	d004      	beq.n	800450a <MOTIONID_Set_Notification_Status+0x12>
    (void)IKS01A3_MOTION_SENSOR_SetFullScale(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, 2);
 8004500:	2202      	movs	r2, #2
 8004502:	4611      	mov	r1, r2
 8004504:	2000      	movs	r0, #0
 8004506:	f005 bc49 	b.w	8009d9c <IKS01A3_MOTION_SENSOR_SetFullScale>
    (void)IKS01A3_MOTION_SENSOR_SetFullScale(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, 4);
 800450a:	2204      	movs	r2, #4
 800450c:	2102      	movs	r1, #2
 800450e:	2000      	movs	r0, #0
 8004510:	f005 bc44 	b.w	8009d9c <IKS01A3_MOTION_SENSOR_SetFullScale>
 8004514:	200017d8 	.word	0x200017d8

08004518 <MOTIONID_Send_Notification_Task>:
{
 8004518:	b530      	push	{r4, r5, lr}
 800451a:	b089      	sub	sp, #36	; 0x24
  MID_input_t data_in = {.AccX = 0.0f, .AccY = 0.0f, .AccZ = 0.0f};
 800451c:	2300      	movs	r3, #0
  (void)IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, &ACC_Value);
 800451e:	aa02      	add	r2, sp, #8
 8004520:	2102      	movs	r1, #2
 8004522:	2000      	movs	r0, #0
  MID_input_t data_in = {.AccX = 0.0f, .AccY = 0.0f, .AccZ = 0.0f};
 8004524:	9305      	str	r3, [sp, #20]
 8004526:	9306      	str	r3, [sp, #24]
 8004528:	9307      	str	r3, [sp, #28]
  (void)IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, &ACC_Value);
 800452a:	f005 fbb3 	bl	8009c94 <IKS01A3_MOTION_SENSOR_GetAxes>
  data_in.AccX = (float)ACC_Value.x * FROM_MG_TO_G;
 800452e:	eddd 7a02 	vldr	s15, [sp, #8]
 8004532:	ed9f 6a1d 	vldr	s12, [pc, #116]	; 80045a8 <MOTIONID_Send_Notification_Task+0x90>
  MotionID_manager_run(&data_in, &MOTIONID_Server_App_Context.MIDCode);
 8004536:	4c1d      	ldr	r4, [pc, #116]	; (80045ac <MOTIONID_Send_Notification_Task+0x94>)
  data_in.AccX = (float)ACC_Value.x * FROM_MG_TO_G;
 8004538:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  data_in.AccY = (float)ACC_Value.y * FROM_MG_TO_G;
 800453c:	eddd 7a03 	vldr	s15, [sp, #12]
 8004540:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  data_in.AccZ = (float)ACC_Value.z * FROM_MG_TO_G;
 8004544:	eddd 7a04 	vldr	s15, [sp, #16]
 8004548:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  data_in.AccX = (float)ACC_Value.x * FROM_MG_TO_G;
 800454c:	ee66 6a86 	vmul.f32	s13, s13, s12
  data_in.AccY = (float)ACC_Value.y * FROM_MG_TO_G;
 8004550:	ee27 7a06 	vmul.f32	s14, s14, s12
  data_in.AccZ = (float)ACC_Value.z * FROM_MG_TO_G;
 8004554:	ee67 7a86 	vmul.f32	s15, s15, s12
  MotionID_manager_run(&data_in, &MOTIONID_Server_App_Context.MIDCode);
 8004558:	1c61      	adds	r1, r4, #1
 800455a:	a805      	add	r0, sp, #20
  data_in.AccX = (float)ACC_Value.x * FROM_MG_TO_G;
 800455c:	edcd 6a05 	vstr	s13, [sp, #20]
  data_in.AccY = (float)ACC_Value.y * FROM_MG_TO_G;
 8004560:	ed8d 7a06 	vstr	s14, [sp, #24]
  data_in.AccZ = (float)ACC_Value.z * FROM_MG_TO_G;
 8004564:	edcd 7a07 	vstr	s15, [sp, #28]
  MotionID_manager_run(&data_in, &MOTIONID_Server_App_Context.MIDCode);
 8004568:	f7fd fad6 	bl	8001b18 <MotionID_manager_run>
  if(MIDCodePrev != MOTIONID_Server_App_Context.MIDCode)
 800456c:	4b10      	ldr	r3, [pc, #64]	; (80045b0 <MOTIONID_Send_Notification_Task+0x98>)
 800456e:	7865      	ldrb	r5, [r4, #1]
 8004570:	781a      	ldrb	r2, [r3, #0]
 8004572:	42aa      	cmp	r2, r5
 8004574:	d002      	beq.n	800457c <MOTIONID_Send_Notification_Task+0x64>
    if(MOTIONID_Server_App_Context.NotificationStatus)
 8004576:	7822      	ldrb	r2, [r4, #0]
    MIDCodePrev = MOTIONID_Server_App_Context.MIDCode;
 8004578:	701d      	strb	r5, [r3, #0]
    if(MOTIONID_Server_App_Context.NotificationStatus)
 800457a:	b90a      	cbnz	r2, 8004580 <MOTIONID_Send_Notification_Task+0x68>
}
 800457c:	b009      	add	sp, #36	; 0x24
 800457e:	bd30      	pop	{r4, r5, pc}
  STORE_LE_16(value, (HAL_GetTick()>>3));
 8004580:	f005 ff66 	bl	800a450 <HAL_GetTick>
 8004584:	08c0      	lsrs	r0, r0, #3
 8004586:	f88d 0004 	strb.w	r0, [sp, #4]
 800458a:	f005 ff61 	bl	800a450 <HAL_GetTick>
  MOTENV_STM_App_Update_Char(INTENSITY_DET_CHAR_UUID, VALUE_LEN_ID, (uint8_t *)&value);
 800458e:	aa01      	add	r2, sp, #4
  STORE_LE_16(value, (HAL_GetTick()>>3));
 8004590:	0ac3      	lsrs	r3, r0, #11
  MOTENV_STM_App_Update_Char(INTENSITY_DET_CHAR_UUID, VALUE_LEN_ID, (uint8_t *)&value);
 8004592:	2103      	movs	r1, #3
 8004594:	2020      	movs	r0, #32
  STORE_LE_16(value, (HAL_GetTick()>>3));
 8004596:	f88d 3005 	strb.w	r3, [sp, #5]
  value[2] = MIDCode;
 800459a:	f88d 5006 	strb.w	r5, [sp, #6]
  MOTENV_STM_App_Update_Char(INTENSITY_DET_CHAR_UUID, VALUE_LEN_ID, (uint8_t *)&value);
 800459e:	f008 fe53 	bl	800d248 <MOTENV_STM_App_Update_Char>
}
 80045a2:	b009      	add	sp, #36	; 0x24
 80045a4:	bd30      	pop	{r4, r5, pc}
 80045a6:	bf00      	nop
 80045a8:	3a83126f 	.word	0x3a83126f
 80045ac:	200017d8 	.word	0x200017d8
 80045b0:	20001955 	.word	0x20001955

080045b4 <MOTIONPM_Context_Init>:
 *         and update the ADV data accordingly
 * @param  None
 * @retval None
 */
void MOTIONPM_Context_Init(void)
{
 80045b4:	b530      	push	{r4, r5, lr}
 80045b6:	b083      	sub	sp, #12
  /* Pedometer API initialization function */
  MotionPM_manager_init();
 80045b8:	f7fd fab0 	bl	8001b1c <MotionPM_manager_init>

  /* Update BLE ADV field (Pedometer) */
  manuf_data[7] |= 0x01; /* Pedometer */
 80045bc:	4917      	ldr	r1, [pc, #92]	; (800461c <MOTIONPM_Context_Init+0x68>)
 * @param  status The new notification status
 * @retval None
 */
void MOTIONPM_Set_Notification_Status(uint8_t status)
{
  MOTIONPM_Server_App_Context.NotificationStatus = status;
 80045be:	4d18      	ldr	r5, [pc, #96]	; (8004620 <MOTIONPM_Context_Init+0x6c>)
  manuf_data[7] |= 0x01; /* Pedometer */
 80045c0:	79cb      	ldrb	r3, [r1, #7]
  MOTIONPM_Server_App_Context.NotificationStatus = status;
 80045c2:	2400      	movs	r4, #0
  else
  {
    /* Set accelerometer:
     *   - FS   = <-2g, 2g>
     */
    (void)IKS01A3_MOTION_SENSOR_SetFullScale(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, 2);
 80045c4:	2202      	movs	r2, #2
  manuf_data[7] |= 0x01; /* Pedometer */
 80045c6:	f043 0301 	orr.w	r3, r3, #1
 80045ca:	71cb      	strb	r3, [r1, #7]
    (void)IKS01A3_MOTION_SENSOR_SetFullScale(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, 2);
 80045cc:	4620      	mov	r0, r4
 80045ce:	4611      	mov	r1, r2
  MOTIONPM_Server_App_Context.NotificationStatus = status;
 80045d0:	702c      	strb	r4, [r5, #0]
    (void)IKS01A3_MOTION_SENSOR_SetFullScale(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, 2);
 80045d2:	f005 fbe3 	bl	8009d9c <IKS01A3_MOTION_SENSOR_SetFullScale>
  MOTIONPM_Server_App_Context.PMData.Cadence = 0;
 80045d6:	712c      	strb	r4, [r5, #4]
  MOTIONPM_Server_App_Context.PMData.Nsteps = 0;
 80045d8:	60ac      	str	r4, [r5, #8]
{
  uint8_t value[VALUE_LEN_PM];
  uint16_t Cadence = (uint16_t) PMData->Cadence;

  /* Timestamp */
  STORE_LE_16(value, (HAL_GetTick()>>3));
 80045da:	f005 ff39 	bl	800a450 <HAL_GetTick>
 80045de:	08c0      	lsrs	r0, r0, #3
 80045e0:	f88d 0000 	strb.w	r0, [sp]
 80045e4:	f005 ff34 	bl	800a450 <HAL_GetTick>
  STORE_LE_32(value+2,PMData->Nsteps);
 80045e8:	68ab      	ldr	r3, [r5, #8]
  STORE_LE_16(value+6,Cadence);
 80045ea:	f8ad 4006 	strh.w	r4, [sp, #6]
  STORE_LE_16(value, (HAL_GetTick()>>3));
 80045ee:	0ac0      	lsrs	r0, r0, #11
 80045f0:	f360 0407 	bfi	r4, r0, #0, #8
  STORE_LE_32(value+2,PMData->Nsteps);
 80045f4:	0a1a      	lsrs	r2, r3, #8
  STORE_LE_16(value, (HAL_GetTick()>>3));
 80045f6:	f363 240f 	bfi	r4, r3, #8, #8
 80045fa:	f362 4417 	bfi	r4, r2, #16, #8
  STORE_LE_32(value+2,PMData->Nsteps);
 80045fe:	0c1a      	lsrs	r2, r3, #16
  STORE_LE_16(value, (HAL_GetTick()>>3));
 8004600:	f362 641f 	bfi	r4, r2, #24, #8
  STORE_LE_32(value+2,PMData->Nsteps);
 8004604:	0e1b      	lsrs	r3, r3, #24

#if(CFG_DEBUG_APP_TRACE != 0)
  APP_DBG_MSG("-- MOTIONPM APPLICATION SERVER : NOTIFY CLIENT WITH NEW PARAMETER VALUE \n ");
  APP_DBG_MSG(" \n\r");
#endif
  MOTENV_STM_App_Update_Char(PEDOMETER_CHAR_UUID, VALUE_LEN_PM, (uint8_t *)&value);
 8004606:	466a      	mov	r2, sp
 8004608:	2108      	movs	r1, #8
 800460a:	2001      	movs	r0, #1
  STORE_LE_16(value, (HAL_GetTick()>>3));
 800460c:	f8cd 4001 	str.w	r4, [sp, #1]
  STORE_LE_32(value+2,PMData->Nsteps);
 8004610:	f88d 3005 	strb.w	r3, [sp, #5]
  MOTENV_STM_App_Update_Char(PEDOMETER_CHAR_UUID, VALUE_LEN_PM, (uint8_t *)&value);
 8004614:	f008 fe18 	bl	800d248 <MOTENV_STM_App_Update_Char>
}
 8004618:	b003      	add	sp, #12
 800461a:	bd30      	pop	{r4, r5, pc}
 800461c:	2000000c 	.word	0x2000000c
 8004620:	200017dc 	.word	0x200017dc

08004624 <MOTIONPM_Set_Notification_Status>:
  MOTIONPM_Server_App_Context.NotificationStatus = status;
 8004624:	4b06      	ldr	r3, [pc, #24]	; (8004640 <MOTIONPM_Set_Notification_Status+0x1c>)
  if(status == 1)
 8004626:	2801      	cmp	r0, #1
  MOTIONPM_Server_App_Context.NotificationStatus = status;
 8004628:	7018      	strb	r0, [r3, #0]
  if(status == 1)
 800462a:	d004      	beq.n	8004636 <MOTIONPM_Set_Notification_Status+0x12>
    (void)IKS01A3_MOTION_SENSOR_SetFullScale(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, 2);
 800462c:	2202      	movs	r2, #2
 800462e:	4611      	mov	r1, r2
 8004630:	2000      	movs	r0, #0
 8004632:	f005 bbb3 	b.w	8009d9c <IKS01A3_MOTION_SENSOR_SetFullScale>
    (void)IKS01A3_MOTION_SENSOR_SetFullScale(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, 4);
 8004636:	2204      	movs	r2, #4
 8004638:	2102      	movs	r1, #2
 800463a:	2000      	movs	r0, #0
 800463c:	f005 bbae 	b.w	8009d9c <IKS01A3_MOTION_SENSOR_SetFullScale>
 8004640:	200017dc 	.word	0x200017dc

08004644 <MOTIONPM_Send_Notification_Task>:
{
 8004644:	b570      	push	{r4, r5, r6, lr}
 8004646:	b088      	sub	sp, #32
  MPM_input_t data_in = {.AccX = 0.0f, .AccY = 0.0f, .AccZ = 0.0f};
 8004648:	2300      	movs	r3, #0
  (void)IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, &ACC_Value);
 800464a:	aa02      	add	r2, sp, #8
 800464c:	2102      	movs	r1, #2
 800464e:	2000      	movs	r0, #0
  MPM_input_t data_in = {.AccX = 0.0f, .AccY = 0.0f, .AccZ = 0.0f};
 8004650:	9305      	str	r3, [sp, #20]
 8004652:	9306      	str	r3, [sp, #24]
 8004654:	9307      	str	r3, [sp, #28]
  (void)IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, &ACC_Value);
 8004656:	f005 fb1d 	bl	8009c94 <IKS01A3_MOTION_SENSOR_GetAxes>
  data_in.AccX = (float)ACC_Value.x * FROM_MG_TO_G;
 800465a:	eddd 7a02 	vldr	s15, [sp, #8]
 800465e:	ed9f 6a2a 	vldr	s12, [pc, #168]	; 8004708 <MOTIONPM_Send_Notification_Task+0xc4>
  MotionPM_manager_run(&data_in, &MOTIONPM_Server_App_Context.PMData);
 8004662:	4c2a      	ldr	r4, [pc, #168]	; (800470c <MOTIONPM_Send_Notification_Task+0xc8>)
  data_in.AccX = (float)ACC_Value.x * FROM_MG_TO_G;
 8004664:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  data_in.AccY = (float)ACC_Value.y * FROM_MG_TO_G;
 8004668:	eddd 7a03 	vldr	s15, [sp, #12]
 800466c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  data_in.AccZ = (float)ACC_Value.z * FROM_MG_TO_G;
 8004670:	eddd 7a04 	vldr	s15, [sp, #16]
 8004674:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  data_in.AccX = (float)ACC_Value.x * FROM_MG_TO_G;
 8004678:	ee66 6a86 	vmul.f32	s13, s13, s12
  data_in.AccY = (float)ACC_Value.y * FROM_MG_TO_G;
 800467c:	ee27 7a06 	vmul.f32	s14, s14, s12
  data_in.AccZ = (float)ACC_Value.z * FROM_MG_TO_G;
 8004680:	ee67 7a86 	vmul.f32	s15, s15, s12
  MotionPM_manager_run(&data_in, &MOTIONPM_Server_App_Context.PMData);
 8004684:	1d21      	adds	r1, r4, #4
 8004686:	a805      	add	r0, sp, #20
  data_in.AccX = (float)ACC_Value.x * FROM_MG_TO_G;
 8004688:	edcd 6a05 	vstr	s13, [sp, #20]
  data_in.AccY = (float)ACC_Value.y * FROM_MG_TO_G;
 800468c:	ed8d 7a06 	vstr	s14, [sp, #24]
  data_in.AccZ = (float)ACC_Value.z * FROM_MG_TO_G;
 8004690:	edcd 7a07 	vstr	s15, [sp, #28]
  MotionPM_manager_run(&data_in, &MOTIONPM_Server_App_Context.PMData);
 8004694:	f7fd fa44 	bl	8001b20 <MotionPM_manager_run>
  if((PMDataPrev.Cadence != MOTIONPM_Server_App_Context.PMData.Cadence) ||
 8004698:	4b1d      	ldr	r3, [pc, #116]	; (8004710 <MOTIONPM_Send_Notification_Task+0xcc>)
 800469a:	7925      	ldrb	r5, [r4, #4]
 800469c:	781a      	ldrb	r2, [r3, #0]
 800469e:	42aa      	cmp	r2, r5
 80046a0:	d02b      	beq.n	80046fa <MOTIONPM_Send_Notification_Task+0xb6>
    PMDataPrev = MOTIONPM_Server_App_Context.PMData;
 80046a2:	4a1c      	ldr	r2, [pc, #112]	; (8004714 <MOTIONPM_Send_Notification_Task+0xd0>)
    if(MOTIONPM_Server_App_Context.NotificationStatus)
 80046a4:	7826      	ldrb	r6, [r4, #0]
    PMDataPrev = MOTIONPM_Server_App_Context.PMData;
 80046a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80046aa:	e883 0003 	stmia.w	r3, {r0, r1}
    if(MOTIONPM_Server_App_Context.NotificationStatus)
 80046ae:	b316      	cbz	r6, 80046f6 <MOTIONPM_Send_Notification_Task+0xb2>
  STORE_LE_16(value, (HAL_GetTick()>>3));
 80046b0:	f005 fece 	bl	800a450 <HAL_GetTick>
 80046b4:	08c0      	lsrs	r0, r0, #3
 80046b6:	f88d 0000 	strb.w	r0, [sp]
 80046ba:	f005 fec9 	bl	800a450 <HAL_GetTick>
  STORE_LE_32(value+2,PMData->Nsteps);
 80046be:	68a3      	ldr	r3, [r4, #8]
  STORE_LE_16(value+6,Cadence);
 80046c0:	f88d 5006 	strb.w	r5, [sp, #6]
  STORE_LE_16(value, (HAL_GetTick()>>3));
 80046c4:	0ac0      	lsrs	r0, r0, #11
 80046c6:	2400      	movs	r4, #0
 80046c8:	f360 0407 	bfi	r4, r0, #0, #8
  STORE_LE_32(value+2,PMData->Nsteps);
 80046cc:	0a1a      	lsrs	r2, r3, #8
  STORE_LE_16(value, (HAL_GetTick()>>3));
 80046ce:	f363 240f 	bfi	r4, r3, #8, #8
 80046d2:	f362 4417 	bfi	r4, r2, #16, #8
  STORE_LE_32(value+2,PMData->Nsteps);
 80046d6:	0c1a      	lsrs	r2, r3, #16
  STORE_LE_16(value, (HAL_GetTick()>>3));
 80046d8:	f362 641f 	bfi	r4, r2, #24, #8
  STORE_LE_32(value+2,PMData->Nsteps);
 80046dc:	0e1b      	lsrs	r3, r3, #24
  STORE_LE_16(value+6,Cadence);
 80046de:	2500      	movs	r5, #0
  MOTENV_STM_App_Update_Char(PEDOMETER_CHAR_UUID, VALUE_LEN_PM, (uint8_t *)&value);
 80046e0:	466a      	mov	r2, sp
 80046e2:	2108      	movs	r1, #8
 80046e4:	2001      	movs	r0, #1
  STORE_LE_16(value, (HAL_GetTick()>>3));
 80046e6:	f8cd 4001 	str.w	r4, [sp, #1]
  STORE_LE_32(value+2,PMData->Nsteps);
 80046ea:	f88d 3005 	strb.w	r3, [sp, #5]
  STORE_LE_16(value+6,Cadence);
 80046ee:	f88d 5007 	strb.w	r5, [sp, #7]
  MOTENV_STM_App_Update_Char(PEDOMETER_CHAR_UUID, VALUE_LEN_PM, (uint8_t *)&value);
 80046f2:	f008 fda9 	bl	800d248 <MOTENV_STM_App_Update_Char>
}
 80046f6:	b008      	add	sp, #32
 80046f8:	bd70      	pop	{r4, r5, r6, pc}
  if((PMDataPrev.Cadence != MOTIONPM_Server_App_Context.PMData.Cadence) ||
 80046fa:	6859      	ldr	r1, [r3, #4]
 80046fc:	68a2      	ldr	r2, [r4, #8]
 80046fe:	4291      	cmp	r1, r2
 8004700:	d1cf      	bne.n	80046a2 <MOTIONPM_Send_Notification_Task+0x5e>
}
 8004702:	b008      	add	sp, #32
 8004704:	bd70      	pop	{r4, r5, r6, pc}
 8004706:	bf00      	nop
 8004708:	3a83126f 	.word	0x3a83126f
 800470c:	200017dc 	.word	0x200017dc
 8004710:	20001958 	.word	0x20001958
 8004714:	200017e0 	.word	0x200017e0

08004718 <MOTIONPM_Pedometer_Update>:
{
 8004718:	b530      	push	{r4, r5, lr}
  Pedometer_Update(&MOTIONPM_Server_App_Context.PMData);
 800471a:	4c14      	ldr	r4, [pc, #80]	; (800476c <MOTIONPM_Pedometer_Update+0x54>)
{
 800471c:	b083      	sub	sp, #12
  Pedometer_Update(&MOTIONPM_Server_App_Context.PMData);
 800471e:	7925      	ldrb	r5, [r4, #4]
  STORE_LE_16(value, (HAL_GetTick()>>3));
 8004720:	f005 fe96 	bl	800a450 <HAL_GetTick>
 8004724:	08c0      	lsrs	r0, r0, #3
 8004726:	f88d 0000 	strb.w	r0, [sp]
 800472a:	f005 fe91 	bl	800a450 <HAL_GetTick>
  STORE_LE_32(value+2,PMData->Nsteps);
 800472e:	68a3      	ldr	r3, [r4, #8]
  STORE_LE_16(value+6,Cadence);
 8004730:	f88d 5006 	strb.w	r5, [sp, #6]
  STORE_LE_16(value, (HAL_GetTick()>>3));
 8004734:	0ac0      	lsrs	r0, r0, #11
 8004736:	2400      	movs	r4, #0
 8004738:	f360 0407 	bfi	r4, r0, #0, #8
  STORE_LE_32(value+2,PMData->Nsteps);
 800473c:	0a1a      	lsrs	r2, r3, #8
  STORE_LE_16(value, (HAL_GetTick()>>3));
 800473e:	f363 240f 	bfi	r4, r3, #8, #8
 8004742:	f362 4417 	bfi	r4, r2, #16, #8
  STORE_LE_32(value+2,PMData->Nsteps);
 8004746:	0c1a      	lsrs	r2, r3, #16
  STORE_LE_16(value, (HAL_GetTick()>>3));
 8004748:	f362 641f 	bfi	r4, r2, #24, #8
  STORE_LE_32(value+2,PMData->Nsteps);
 800474c:	0e1b      	lsrs	r3, r3, #24
  STORE_LE_16(value+6,Cadence);
 800474e:	2500      	movs	r5, #0
  MOTENV_STM_App_Update_Char(PEDOMETER_CHAR_UUID, VALUE_LEN_PM, (uint8_t *)&value);
 8004750:	466a      	mov	r2, sp
 8004752:	2108      	movs	r1, #8
 8004754:	2001      	movs	r0, #1
  STORE_LE_16(value, (HAL_GetTick()>>3));
 8004756:	f8cd 4001 	str.w	r4, [sp, #1]
  STORE_LE_32(value+2,PMData->Nsteps);
 800475a:	f88d 3005 	strb.w	r3, [sp, #5]
  STORE_LE_16(value+6,Cadence);
 800475e:	f88d 5007 	strb.w	r5, [sp, #7]
  MOTENV_STM_App_Update_Char(PEDOMETER_CHAR_UUID, VALUE_LEN_PM, (uint8_t *)&value);
 8004762:	f008 fd71 	bl	800d248 <MOTENV_STM_App_Update_Char>
}
 8004766:	b003      	add	sp, #12
 8004768:	bd30      	pop	{r4, r5, pc}
 800476a:	bf00      	nop
 800476c:	200017dc 	.word	0x200017dc

08004770 <P2PS_Send_Notification>:
 *************************************************************/
/* USER CODE BEGIN FD_LOCAL_FUNCTIONS*/
static void P2PS_Send_Notification(void)
{
  /* Update P2P_NOTIFY characteristic */
  P2PS_STM_App_Update_Char(P2P_NOTIFY_CHAR_UUID, 0x00);
 8004770:	2100      	movs	r1, #0
 8004772:	f64f 6042 	movw	r0, #65090	; 0xfe42
 8004776:	f008 beb5 	b.w	800d4e4 <P2PS_STM_App_Update_Char>
 800477a:	bf00      	nop

0800477c <P2PS_STM_App_Notification>:
  switch(pNotification->P2P_Evt_Opcode)
 800477c:	7803      	ldrb	r3, [r0, #0]
 800477e:	2b03      	cmp	r3, #3
 8004780:	d000      	beq.n	8004784 <P2PS_STM_App_Notification+0x8>
}
 8004782:	4770      	bx	lr
      if(pNotification->DataTransfered.pPayload[1] == 0x01) {
 8004784:	6843      	ldr	r3, [r0, #4]
        HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8004786:	4804      	ldr	r0, [pc, #16]	; (8004798 <P2PS_STM_App_Notification+0x1c>)
      if(pNotification->DataTransfered.pPayload[1] == 0x01) {
 8004788:	785a      	ldrb	r2, [r3, #1]
 800478a:	2a01      	cmp	r2, #1
        HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 800478c:	bf18      	it	ne
 800478e:	2200      	movne	r2, #0
 8004790:	2102      	movs	r1, #2
 8004792:	f006 b989 	b.w	800aaa8 <HAL_GPIO_WritePin>
 8004796:	bf00      	nop
 8004798:	48000400 	.word	0x48000400

0800479c <P2PS_APP_Notification>:
  switch(pNotification->P2P_Evt_Opcode)
 800479c:	7803      	ldrb	r3, [r0, #0]
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d101      	bne.n	80047a6 <P2PS_APP_Notification+0xa>
      MOTENV_APP_HandleDisconnection();
 80047a2:	f7fe b95d 	b.w	8002a60 <MOTENV_APP_HandleDisconnection>
}
 80047a6:	4770      	bx	lr

080047a8 <P2PS_APP_Init>:
  UTIL_SEQ_RegTask( 1<<CFG_TASK_SW2_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, P2PS_Send_Notification);
 80047a8:	4a02      	ldr	r2, [pc, #8]	; (80047b4 <P2PS_APP_Init+0xc>)
 80047aa:	2100      	movs	r1, #0
 80047ac:	2008      	movs	r0, #8
 80047ae:	f009 b95d 	b.w	800da6c <UTIL_SEQ_RegTask>
 80047b2:	bf00      	nop
 80047b4:	08004771 	.word	0x08004771

080047b8 <HW_IPCC_Enable>:
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 80047b8:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 80047ba:	bf20      	wfe
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 80047bc:	4a02      	ldr	r2, [pc, #8]	; (80047c8 <HW_IPCC_Enable+0x10>)
 80047be:	68d3      	ldr	r3, [r2, #12]
 80047c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047c4:	60d3      	str	r3, [r2, #12]
  LL_PWR_EnableBootC2( );

  return;
}
 80047c6:	4770      	bx	lr
 80047c8:	58000400 	.word	0x58000400

080047cc <HW_IPCC_Init>:
  SET_BIT(RCC->AHB3ENR, Periphs);
 80047cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000

void HW_IPCC_Init( void )
{
 80047d0:	b500      	push	{lr}
 80047d2:	6d11      	ldr	r1, [r2, #80]	; 0x50
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 80047d4:	4b0d      	ldr	r3, [pc, #52]	; (800480c <HW_IPCC_Init+0x40>)
 80047d6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80047da:	6511      	str	r1, [r2, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80047dc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80047de:	b083      	sub	sp, #12
 80047e0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80047e4:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 80047e6:	9a01      	ldr	r2, [sp, #4]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	f042 0201 	orr.w	r2, r2, #1
 80047ee:	601a      	str	r2, [r3, #0]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80047f6:	601a      	str	r2, [r3, #0]
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );

  LL_C1_IPCC_EnableIT_RXO( IPCC );
  LL_C1_IPCC_EnableIT_TXF( IPCC );

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80047f8:	202c      	movs	r0, #44	; 0x2c
 80047fa:	f005 fe97 	bl	800a52c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80047fe:	202d      	movs	r0, #45	; 0x2d

  return;
}
 8004800:	b003      	add	sp, #12
 8004802:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8004806:	f005 be91 	b.w	800a52c <HAL_NVIC_EnableIRQ>
 800480a:	bf00      	nop
 800480c:	58000c00 	.word	0x58000c00

08004810 <HW_IPCC_BLE_Init>:
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8004810:	4a02      	ldr	r2, [pc, #8]	; (800481c <HW_IPCC_BLE_Init+0xc>)
 8004812:	6853      	ldr	r3, [r2, #4]
 8004814:	f023 0301 	bic.w	r3, r3, #1
 8004818:	6053      	str	r3, [r2, #4]
void HW_IPCC_BLE_Init( void )
{
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );

  return;
}
 800481a:	4770      	bx	lr
 800481c:	58000c00 	.word	0x58000c00

08004820 <HW_IPCC_BLE_SendCmd>:
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8004820:	4b02      	ldr	r3, [pc, #8]	; (800482c <HW_IPCC_BLE_SendCmd+0xc>)
 8004822:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004826:	609a      	str	r2, [r3, #8]
void HW_IPCC_BLE_SendCmd( void )
{
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );

  return;
}
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	58000c00 	.word	0x58000c00

08004830 <HW_IPCC_SYS_Init>:
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8004830:	4a02      	ldr	r2, [pc, #8]	; (800483c <HW_IPCC_SYS_Init+0xc>)
 8004832:	6853      	ldr	r3, [r2, #4]
 8004834:	f023 0302 	bic.w	r3, r3, #2
 8004838:	6053      	str	r3, [r2, #4]
void HW_IPCC_SYS_Init( void )
{
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );

  return;
}
 800483a:	4770      	bx	lr
 800483c:	58000c00 	.word	0x58000c00

08004840 <HW_IPCC_SYS_SendCmd>:
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8004840:	4b04      	ldr	r3, [pc, #16]	; (8004854 <HW_IPCC_SYS_SendCmd+0x14>)
 8004842:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004846:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8004848:	685a      	ldr	r2, [r3, #4]
 800484a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800484e:	605a      	str	r2, [r3, #4]
{
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );

  return;
}
 8004850:	4770      	bx	lr
 8004852:	bf00      	nop
 8004854:	58000c00 	.word	0x58000c00

08004858 <HW_IPCC_Tx_Handler>:
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8004858:	4b1b      	ldr	r3, [pc, #108]	; (80048c8 <HW_IPCC_Tx_Handler+0x70>)
 800485a:	68da      	ldr	r2, [r3, #12]
{
 800485c:	b510      	push	{r4, lr}
 800485e:	0794      	lsls	r4, r2, #30
 8004860:	d402      	bmi.n	8004868 <HW_IPCC_Tx_Handler+0x10>
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8004862:	685a      	ldr	r2, [r3, #4]
 8004864:	0390      	lsls	r0, r2, #14
 8004866:	d512      	bpl.n	800488e <HW_IPCC_Tx_Handler+0x36>
 8004868:	4b17      	ldr	r3, [pc, #92]	; (80048c8 <HW_IPCC_Tx_Handler+0x70>)
 800486a:	68da      	ldr	r2, [r3, #12]
 800486c:	0791      	lsls	r1, r2, #30
 800486e:	d50b      	bpl.n	8004888 <HW_IPCC_Tx_Handler+0x30>
 8004870:	4c15      	ldr	r4, [pc, #84]	; (80048c8 <HW_IPCC_Tx_Handler+0x70>)
 8004872:	68e3      	ldr	r3, [r4, #12]
 8004874:	071b      	lsls	r3, r3, #28
 8004876:	d511      	bpl.n	800489c <HW_IPCC_Tx_Handler+0x44>
 8004878:	4b13      	ldr	r3, [pc, #76]	; (80048c8 <HW_IPCC_Tx_Handler+0x70>)
 800487a:	68da      	ldr	r2, [r3, #12]
 800487c:	0691      	lsls	r1, r2, #26
 800487e:	d402      	bmi.n	8004886 <HW_IPCC_Tx_Handler+0x2e>
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8004880:	685a      	ldr	r2, [r3, #4]
 8004882:	0292      	lsls	r2, r2, #10
 8004884:	d518      	bpl.n	80048b8 <HW_IPCC_Tx_Handler+0x60>
}
 8004886:	bd10      	pop	{r4, pc}
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8004888:	685a      	ldr	r2, [r3, #4]
 800488a:	0392      	lsls	r2, r2, #14
 800488c:	d4f0      	bmi.n	8004870 <HW_IPCC_Tx_Handler+0x18>
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800488e:	685a      	ldr	r2, [r3, #4]
 8004890:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004894:	605a      	str	r2, [r3, #4]

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );

  HW_IPCC_SYS_CmdEvtNot();
 8004896:	f009 f853 	bl	800d940 <HW_IPCC_SYS_CmdEvtNot>
}
 800489a:	bd10      	pop	{r4, pc}
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800489c:	6863      	ldr	r3, [r4, #4]
 800489e:	0318      	lsls	r0, r3, #12
 80048a0:	d4ea      	bmi.n	8004878 <HW_IPCC_Tx_Handler+0x20>
 80048a2:	6863      	ldr	r3, [r4, #4]

static void HW_IPCC_MM_FreeBufHandler( void )
{
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );

  FreeBufCb();
 80048a4:	4a09      	ldr	r2, [pc, #36]	; (80048cc <HW_IPCC_Tx_Handler+0x74>)
 80048a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80048aa:	6063      	str	r3, [r4, #4]
 80048ac:	6813      	ldr	r3, [r2, #0]
 80048ae:	4798      	blx	r3
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 80048b0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80048b4:	60a3      	str	r3, [r4, #8]
}
 80048b6:	bd10      	pop	{r4, pc}
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80048b8:	685a      	ldr	r2, [r3, #4]
 80048ba:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80048be:	605a      	str	r2, [r3, #4]
  HW_IPCC_BLE_AclDataAckNot();
 80048c0:	f009 f812 	bl	800d8e8 <HW_IPCC_BLE_AclDataAckNot>
}
 80048c4:	bd10      	pop	{r4, pc}
 80048c6:	bf00      	nop
 80048c8:	58000c00 	.word	0x58000c00
 80048cc:	20001960 	.word	0x20001960

080048d0 <HW_IPCC_MM_SendFreeBuf>:
{
 80048d0:	b510      	push	{r4, lr}
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 80048d2:	4c08      	ldr	r4, [pc, #32]	; (80048f4 <HW_IPCC_MM_SendFreeBuf+0x24>)
 80048d4:	68e3      	ldr	r3, [r4, #12]
 80048d6:	071b      	lsls	r3, r3, #28
 80048d8:	d404      	bmi.n	80048e4 <HW_IPCC_MM_SendFreeBuf+0x14>
    cb();
 80048da:	4780      	blx	r0
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 80048dc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80048e0:	60a3      	str	r3, [r4, #8]
}
 80048e2:	bd10      	pop	{r4, pc}
    FreeBufCb = cb;
 80048e4:	4b04      	ldr	r3, [pc, #16]	; (80048f8 <HW_IPCC_MM_SendFreeBuf+0x28>)
 80048e6:	6018      	str	r0, [r3, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80048e8:	6863      	ldr	r3, [r4, #4]
 80048ea:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80048ee:	6063      	str	r3, [r4, #4]
}
 80048f0:	bd10      	pop	{r4, pc}
 80048f2:	bf00      	nop
 80048f4:	58000c00 	.word	0x58000c00
 80048f8:	20001960 	.word	0x20001960

080048fc <HW_IPCC_TRACES_Init>:
  CLEAR_BIT(IPCCx->C1MR, Channel);
 80048fc:	4a02      	ldr	r2, [pc, #8]	; (8004908 <HW_IPCC_TRACES_Init+0xc>)
 80048fe:	6853      	ldr	r3, [r2, #4]
 8004900:	f023 0308 	bic.w	r3, r3, #8
 8004904:	6053      	str	r3, [r2, #4]
void HW_IPCC_TRACES_Init( void )
{
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );

  return;
}
 8004906:	4770      	bx	lr
 8004908:	58000c00 	.word	0x58000c00

0800490c <HW_IPCC_Rx_Handler>:
{
 800490c:	b510      	push	{r4, lr}
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800490e:	4c12      	ldr	r4, [pc, #72]	; (8004958 <HW_IPCC_Rx_Handler+0x4c>)
 8004910:	69e3      	ldr	r3, [r4, #28]
 8004912:	079a      	lsls	r2, r3, #30
 8004914:	d502      	bpl.n	800491c <HW_IPCC_Rx_Handler+0x10>
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8004916:	6863      	ldr	r3, [r4, #4]
 8004918:	079b      	lsls	r3, r3, #30
 800491a:	d50e      	bpl.n	800493a <HW_IPCC_Rx_Handler+0x2e>
 800491c:	4c0e      	ldr	r4, [pc, #56]	; (8004958 <HW_IPCC_Rx_Handler+0x4c>)
 800491e:	69e3      	ldr	r3, [r4, #28]
 8004920:	07d8      	lsls	r0, r3, #31
 8004922:	d502      	bpl.n	800492a <HW_IPCC_Rx_Handler+0x1e>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8004924:	6863      	ldr	r3, [r4, #4]
 8004926:	07d9      	lsls	r1, r3, #31
 8004928:	d511      	bpl.n	800494e <HW_IPCC_Rx_Handler+0x42>
 800492a:	4c0b      	ldr	r4, [pc, #44]	; (8004958 <HW_IPCC_Rx_Handler+0x4c>)
 800492c:	69e3      	ldr	r3, [r4, #28]
 800492e:	071a      	lsls	r2, r3, #28
 8004930:	d502      	bpl.n	8004938 <HW_IPCC_Rx_Handler+0x2c>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8004932:	6863      	ldr	r3, [r4, #4]
 8004934:	071b      	lsls	r3, r3, #28
 8004936:	d505      	bpl.n	8004944 <HW_IPCC_Rx_Handler+0x38>
}
 8004938:	bd10      	pop	{r4, pc}
  HW_IPCC_SYS_EvtNot();
 800493a:	f009 f80b 	bl	800d954 <HW_IPCC_SYS_EvtNot>
  WRITE_REG(IPCCx->C1SCR, Channel);
 800493e:	2302      	movs	r3, #2
 8004940:	60a3      	str	r3, [r4, #8]
}
 8004942:	bd10      	pop	{r4, pc}

static void HW_IPCC_TRACES_EvtHandler( void )
{
  HW_IPCC_TRACES_EvtNot();
 8004944:	f009 f85e 	bl	800da04 <HW_IPCC_TRACES_EvtNot>
 8004948:	2308      	movs	r3, #8
 800494a:	60a3      	str	r3, [r4, #8]
}
 800494c:	bd10      	pop	{r4, pc}
  HW_IPCC_BLE_RxEvtNot();
 800494e:	f008 ffb3 	bl	800d8b8 <HW_IPCC_BLE_RxEvtNot>
 8004952:	2301      	movs	r3, #1
 8004954:	60a3      	str	r3, [r4, #8]
}
 8004956:	bd10      	pop	{r4, pc}
 8004958:	58000c00 	.word	0x58000c00

0800495c <HTS221_GetCapabilities>:

  Capabilities->Humidity    = 1;
  Capabilities->Pressure    = 0;
  Capabilities->Temperature = 1;
  Capabilities->LowPower    = 0;
  Capabilities->HumMaxOdr   = 12.5f;
 800495c:	4b04      	ldr	r3, [pc, #16]	; (8004970 <HTS221_GetCapabilities+0x14>)
 800495e:	604b      	str	r3, [r1, #4]
  Capabilities->TempMaxOdr  = 12.5f;
  Capabilities->PressMaxOdr = 0.0f;
 8004960:	2200      	movs	r2, #0
  Capabilities->Temperature = 1;
 8004962:	f04f 1001 	mov.w	r0, #65537	; 0x10001
 8004966:	6008      	str	r0, [r1, #0]
  Capabilities->PressMaxOdr = 0.0f;
 8004968:	60ca      	str	r2, [r1, #12]
  Capabilities->TempMaxOdr  = 12.5f;
 800496a:	608b      	str	r3, [r1, #8]
  return HTS221_OK;
}
 800496c:	2000      	movs	r0, #0
 800496e:	4770      	bx	lr
 8004970:	41480000 	.word	0x41480000

08004974 <HTS221_Init>:
{
 8004974:	b538      	push	{r3, r4, r5, lr}
  if (pObj->is_initialized == 0U)
 8004976:	f890 1028 	ldrb.w	r1, [r0, #40]	; 0x28
{
 800497a:	4604      	mov	r4, r0
  if (pObj->is_initialized == 0U)
 800497c:	b121      	cbz	r1, 8004988 <HTS221_Init+0x14>
  pObj->is_initialized = 1;
 800497e:	2301      	movs	r3, #1
 8004980:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  return HTS221_OK;
 8004984:	2000      	movs	r0, #0
}
 8004986:	bd38      	pop	{r3, r4, r5, pc}
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_Initialize(HTS221_Object_t *pObj)
{
  /* Power off the component. */
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8004988:	f100 051c 	add.w	r5, r0, #28
 800498c:	4628      	mov	r0, r5
 800498e:	f000 fac7 	bl	8004f20 <hts221_power_on_set>
 8004992:	b950      	cbnz	r0, 80049aa <HTS221_Init+0x36>
  {
    return HTS221_ERROR;
  }

  /* Enable BDU */
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8004994:	2101      	movs	r1, #1
 8004996:	4628      	mov	r0, r5
 8004998:	f000 fa8a 	bl	8004eb0 <hts221_block_data_update_set>
 800499c:	b928      	cbnz	r0, 80049aa <HTS221_Init+0x36>
  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 800499e:	4628      	mov	r0, r5
 80049a0:	2101      	movs	r1, #1
 80049a2:	f000 fa43 	bl	8004e2c <hts221_data_rate_set>
 80049a6:	2800      	cmp	r0, #0
 80049a8:	d0e9      	beq.n	800497e <HTS221_Init+0xa>
      return HTS221_ERROR;
 80049aa:	f04f 30ff 	mov.w	r0, #4294967295
}
 80049ae:	bd38      	pop	{r3, r4, r5, pc}

080049b0 <HTS221_HUM_SetOutputDataRate>:
{
 80049b0:	ee07 1a90 	vmov	s15, r1
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 80049b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
 80049c0:	b508      	push	{r3, lr}
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 80049c2:	d910      	bls.n	80049e6 <HTS221_HUM_SetOutputDataRate+0x36>
 80049c4:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 80049c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049d0:	bf94      	ite	ls
 80049d2:	2102      	movls	r1, #2
 80049d4:	2103      	movhi	r1, #3
  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 80049d6:	301c      	adds	r0, #28
 80049d8:	f000 fa28 	bl	8004e2c <hts221_data_rate_set>
 80049dc:	3000      	adds	r0, #0
 80049de:	bf18      	it	ne
 80049e0:	2001      	movne	r0, #1
}
 80049e2:	4240      	negs	r0, r0
 80049e4:	bd08      	pop	{r3, pc}
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 80049e6:	2101      	movs	r1, #1
 80049e8:	e7f5      	b.n	80049d6 <HTS221_HUM_SetOutputDataRate+0x26>
 80049ea:	bf00      	nop

080049ec <HTS221_ReadID>:
{
 80049ec:	b508      	push	{r3, lr}
  if (hts221_device_id_get(&(pObj->Ctx), Id) != HTS221_OK)
 80049ee:	301c      	adds	r0, #28
 80049f0:	f000 fa8c 	bl	8004f0c <hts221_device_id_get>
 80049f4:	3000      	adds	r0, #0
 80049f6:	bf18      	it	ne
 80049f8:	2001      	movne	r0, #1
}
 80049fa:	4240      	negs	r0, r0
 80049fc:	bd08      	pop	{r3, pc}
 80049fe:	bf00      	nop

08004a00 <HTS221_HUM_GetHumidity>:
{
 8004a00:	b530      	push	{r4, r5, lr}
 8004a02:	ed2d 8b04 	vpush	{d8-d9}
  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8004a06:	f100 041c 	add.w	r4, r0, #28
{
 8004a0a:	b083      	sub	sp, #12
 8004a0c:	460d      	mov	r5, r1
  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8004a0e:	4620      	mov	r0, r4
 8004a10:	a901      	add	r1, sp, #4
 8004a12:	f000 faf3 	bl	8004ffc <hts221_hum_adc_point_0_get>
 8004a16:	2800      	cmp	r0, #0
 8004a18:	d15d      	bne.n	8004ad6 <HTS221_HUM_GetHumidity+0xd6>
  lin_hum.x0 = (float)coeff.i16bit;
 8004a1a:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8004a1e:	ee08 3a10 	vmov	s16, r3
  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8004a22:	a901      	add	r1, sp, #4
 8004a24:	4620      	mov	r0, r4
  lin_hum.x0 = (float)coeff.i16bit;
 8004a26:	eeb8 9ac8 	vcvt.f32.s32	s18, s16
  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8004a2a:	f000 fa93 	bl	8004f54 <hts221_hum_rh_point_0_get>
 8004a2e:	2800      	cmp	r0, #0
 8004a30:	d151      	bne.n	8004ad6 <HTS221_HUM_GetHumidity+0xd6>
  lin_hum.y0 = (float)coeff.u8bit[0];
 8004a32:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004a36:	ee08 3a90 	vmov	s17, r3
  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8004a3a:	a901      	add	r1, sp, #4
 8004a3c:	4620      	mov	r0, r4
  lin_hum.y0 = (float)coeff.u8bit[0];
 8004a3e:	eef8 9a68 	vcvt.f32.u32	s19, s17
  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8004a42:	f000 fae5 	bl	8005010 <hts221_hum_adc_point_1_get>
 8004a46:	2800      	cmp	r0, #0
 8004a48:	d145      	bne.n	8004ad6 <HTS221_HUM_GetHumidity+0xd6>
  lin_hum.x1 = (float)coeff.i16bit;
 8004a4a:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8004a4e:	ee08 3a10 	vmov	s16, r3
  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8004a52:	a901      	add	r1, sp, #4
 8004a54:	4620      	mov	r0, r4
  lin_hum.x1 = (float)coeff.i16bit;
 8004a56:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8004a5a:	f000 fa87 	bl	8004f6c <hts221_hum_rh_point_1_get>
 8004a5e:	bbd0      	cbnz	r0, 8004ad6 <HTS221_HUM_GetHumidity+0xd6>
  lin_hum.y1 = (float)coeff.u8bit[0];
 8004a60:	f89d 3004 	ldrb.w	r3, [sp, #4]
  (void)memset(data_raw_humidity.u8bit, 0x00, sizeof(int16_t));
 8004a64:	f8ad 0000 	strh.w	r0, [sp]
  lin_hum.y1 = (float)coeff.u8bit[0];
 8004a68:	ee08 3a90 	vmov	s17, r3
  if (hts221_humidity_raw_get(&(pObj->Ctx), data_raw_humidity.u8bit) != HTS221_OK)
 8004a6c:	4620      	mov	r0, r4
 8004a6e:	4669      	mov	r1, sp
  lin_hum.y1 = (float)coeff.u8bit[0];
 8004a70:	eef8 8a68 	vcvt.f32.u32	s17, s17
  if (hts221_humidity_raw_get(&(pObj->Ctx), data_raw_humidity.u8bit) != HTS221_OK)
 8004a74:	f000 fa36 	bl	8004ee4 <hts221_humidity_raw_get>
 8004a78:	bb68      	cbnz	r0, 8004ad6 <HTS221_HUM_GetHumidity+0xd6>
 * @param  Coeff the coefficient
 * @retval Calculation result
 */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8004a7a:	ee68 7ac9 	vnmul.f32	s15, s17, s18
  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 8004a7e:	f9bd 3000 	ldrsh.w	r3, [sp]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8004a82:	eee9 7a88 	vfma.f32	s15, s19, s16
  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 8004a86:	ee07 3a10 	vmov	s14, r3
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8004a8a:	ee78 8ae9 	vsub.f32	s17, s17, s19
  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 8004a8e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8004a92:	ee38 8a49 	vsub.f32	s16, s16, s18
 8004a96:	eee7 7a28 	vfma.f32	s15, s14, s17
 8004a9a:	ee87 7a88 	vdiv.f32	s14, s15, s16
  if (*Value < 0.0f)
 8004a9e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8004aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 8004aa6:	ed85 7a00 	vstr	s14, [r5]
  if (*Value < 0.0f)
 8004aaa:	d40c      	bmi.n	8004ac6 <HTS221_HUM_GetHumidity+0xc6>
  if (*Value > 100.0f)
 8004aac:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8004ae4 <HTS221_HUM_GetHumidity+0xe4>
 8004ab0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004ab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ab8:	dd07      	ble.n	8004aca <HTS221_HUM_GetHumidity+0xca>
    *Value = 100.0f;
 8004aba:	edc5 7a00 	vstr	s15, [r5]
}
 8004abe:	b003      	add	sp, #12
 8004ac0:	ecbd 8b04 	vpop	{d8-d9}
 8004ac4:	bd30      	pop	{r4, r5, pc}
    *Value = 0.0f;
 8004ac6:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8004ae8 <HTS221_HUM_GetHumidity+0xe8>
 8004aca:	ed85 7a00 	vstr	s14, [r5]
}
 8004ace:	b003      	add	sp, #12
 8004ad0:	ecbd 8b04 	vpop	{d8-d9}
 8004ad4:	bd30      	pop	{r4, r5, pc}
    return HTS221_ERROR;
 8004ad6:	f04f 30ff 	mov.w	r0, #4294967295
}
 8004ada:	b003      	add	sp, #12
 8004adc:	ecbd 8b04 	vpop	{d8-d9}
 8004ae0:	bd30      	pop	{r4, r5, pc}
 8004ae2:	bf00      	nop
 8004ae4:	42c80000 	.word	0x42c80000
 8004ae8:	00000000 	.word	0x00000000

08004aec <HTS221_TEMP_GetTemperature>:
{
 8004aec:	b530      	push	{r4, r5, lr}
 8004aee:	ed2d 8b04 	vpush	{d8-d9}
  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8004af2:	f100 041c 	add.w	r4, r0, #28
{
 8004af6:	b083      	sub	sp, #12
 8004af8:	460d      	mov	r5, r1
  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8004afa:	4620      	mov	r0, r4
 8004afc:	a901      	add	r1, sp, #4
 8004afe:	f000 fa91 	bl	8005024 <hts221_temp_adc_point_0_get>
 8004b02:	2800      	cmp	r0, #0
 8004b04:	d145      	bne.n	8004b92 <HTS221_TEMP_GetTemperature+0xa6>
  lin_temp.x0 = (float)coeff.i16bit;
 8004b06:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8004b0a:	ee08 3a10 	vmov	s16, r3
  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8004b0e:	a901      	add	r1, sp, #4
 8004b10:	4620      	mov	r0, r4
  lin_temp.x0 = (float)coeff.i16bit;
 8004b12:	eeb8 9ac8 	vcvt.f32.s32	s18, s16
  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8004b16:	f000 fa35 	bl	8004f84 <hts221_temp_deg_point_0_get>
 8004b1a:	bbd0      	cbnz	r0, 8004b92 <HTS221_TEMP_GetTemperature+0xa6>
  lin_temp.y0 = (float)coeff.u8bit[0];
 8004b1c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004b20:	ee08 3a90 	vmov	s17, r3
  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8004b24:	a901      	add	r1, sp, #4
 8004b26:	4620      	mov	r0, r4
  lin_temp.y0 = (float)coeff.u8bit[0];
 8004b28:	eef8 9a68 	vcvt.f32.u32	s19, s17
  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8004b2c:	f000 fa84 	bl	8005038 <hts221_temp_adc_point_1_get>
 8004b30:	bb78      	cbnz	r0, 8004b92 <HTS221_TEMP_GetTemperature+0xa6>
  lin_temp.x1 = (float)coeff.i16bit;
 8004b32:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8004b36:	ee08 3a10 	vmov	s16, r3
  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8004b3a:	a901      	add	r1, sp, #4
 8004b3c:	4620      	mov	r0, r4
  lin_temp.x1 = (float)coeff.i16bit;
 8004b3e:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8004b42:	f000 fa3d 	bl	8004fc0 <hts221_temp_deg_point_1_get>
 8004b46:	bb20      	cbnz	r0, 8004b92 <HTS221_TEMP_GetTemperature+0xa6>
  lin_temp.y1 = (float)coeff.u8bit[0];
 8004b48:	f89d 3004 	ldrb.w	r3, [sp, #4]
  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 8004b4c:	f8ad 0000 	strh.w	r0, [sp]
  lin_temp.y1 = (float)coeff.u8bit[0];
 8004b50:	ee08 3a90 	vmov	s17, r3
  if (hts221_temperature_raw_get(&(pObj->Ctx), data_raw_temperature.u8bit) != HTS221_OK)
 8004b54:	4620      	mov	r0, r4
 8004b56:	4669      	mov	r1, sp
  lin_temp.y1 = (float)coeff.u8bit[0];
 8004b58:	eef8 8a68 	vcvt.f32.u32	s17, s17
  if (hts221_temperature_raw_get(&(pObj->Ctx), data_raw_temperature.u8bit) != HTS221_OK)
 8004b5c:	f000 f9cc 	bl	8004ef8 <hts221_temperature_raw_get>
 8004b60:	b9b8      	cbnz	r0, 8004b92 <HTS221_TEMP_GetTemperature+0xa6>
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8004b62:	ee68 7ac9 	vnmul.f32	s15, s17, s18
  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 8004b66:	f9bd 3000 	ldrsh.w	r3, [sp]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8004b6a:	eee9 7a88 	vfma.f32	s15, s19, s16
  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 8004b6e:	ee07 3a10 	vmov	s14, r3
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8004b72:	ee78 8ae9 	vsub.f32	s17, s17, s19
  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 8004b76:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8004b7a:	ee38 8a49 	vsub.f32	s16, s16, s18
 8004b7e:	eee7 7a28 	vfma.f32	s15, s14, s17
 8004b82:	ee87 7a88 	vdiv.f32	s14, s15, s16
  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 8004b86:	ed85 7a00 	vstr	s14, [r5]
}
 8004b8a:	b003      	add	sp, #12
 8004b8c:	ecbd 8b04 	vpop	{d8-d9}
 8004b90:	bd30      	pop	{r4, r5, pc}
    return HTS221_ERROR;
 8004b92:	f04f 30ff 	mov.w	r0, #4294967295
}
 8004b96:	b003      	add	sp, #12
 8004b98:	ecbd 8b04 	vpop	{d8-d9}
 8004b9c:	bd30      	pop	{r4, r5, pc}
 8004b9e:	bf00      	nop

08004ba0 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004ba0:	b430      	push	{r4, r5}
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8004ba2:	6885      	ldr	r5, [r0, #8]
 8004ba4:	6944      	ldr	r4, [r0, #20]
 8004ba6:	7b00      	ldrb	r0, [r0, #12]
 8004ba8:	b125      	cbz	r5, 8004bb4 <ReadRegWrap+0x14>
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8004baa:	46a4      	mov	ip, r4
 8004bac:	f041 0140 	orr.w	r1, r1, #64	; 0x40
  }
}
 8004bb0:	bc30      	pop	{r4, r5}
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8004bb2:	4760      	bx	ip
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8004bb4:	46a4      	mov	ip, r4
 8004bb6:	f041 0180 	orr.w	r1, r1, #128	; 0x80
}
 8004bba:	bc30      	pop	{r4, r5}
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8004bbc:	4760      	bx	ip
 8004bbe:	bf00      	nop

08004bc0 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004bc0:	b430      	push	{r4, r5}
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8004bc2:	6885      	ldr	r5, [r0, #8]
 8004bc4:	6904      	ldr	r4, [r0, #16]
 8004bc6:	7b00      	ldrb	r0, [r0, #12]
 8004bc8:	b125      	cbz	r5, 8004bd4 <WriteRegWrap+0x14>
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8004bca:	46a4      	mov	ip, r4
 8004bcc:	f041 0140 	orr.w	r1, r1, #64	; 0x40
  }
}
 8004bd0:	bc30      	pop	{r4, r5}
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8004bd2:	4760      	bx	ip
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8004bd4:	46a4      	mov	ip, r4
 8004bd6:	f041 0180 	orr.w	r1, r1, #128	; 0x80
}
 8004bda:	bc30      	pop	{r4, r5}
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8004bdc:	4760      	bx	ip
 8004bde:	bf00      	nop

08004be0 <HTS221_HUM_Enable>:
  if (pObj->hum_is_enabled == 1U)
 8004be0:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d012      	beq.n	8004c0e <HTS221_HUM_Enable+0x2e>
{
 8004be8:	b510      	push	{r4, lr}
  if (pObj->temp_is_enabled == 0U)
 8004bea:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 8004bee:	4604      	mov	r4, r0
 8004bf0:	b123      	cbz	r3, 8004bfc <HTS221_HUM_Enable+0x1c>
  pObj->hum_is_enabled = 1;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
  return HTS221_OK;
 8004bf8:	2000      	movs	r0, #0
}
 8004bfa:	bd10      	pop	{r4, pc}
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8004bfc:	2101      	movs	r1, #1
 8004bfe:	301c      	adds	r0, #28
 8004c00:	f000 f98e 	bl	8004f20 <hts221_power_on_set>
 8004c04:	2800      	cmp	r0, #0
 8004c06:	d0f4      	beq.n	8004bf2 <HTS221_HUM_Enable+0x12>
      return HTS221_ERROR;
 8004c08:	f04f 30ff 	mov.w	r0, #4294967295
}
 8004c0c:	bd10      	pop	{r4, pc}
    return HTS221_OK;
 8004c0e:	2000      	movs	r0, #0
}
 8004c10:	4770      	bx	lr
 8004c12:	bf00      	nop

08004c14 <HTS221_TEMP_Enable>:
  if (pObj->temp_is_enabled == 1U)
 8004c14:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d012      	beq.n	8004c42 <HTS221_TEMP_Enable+0x2e>
{
 8004c1c:	b510      	push	{r4, lr}
  if (pObj->hum_is_enabled == 0U)
 8004c1e:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8004c22:	4604      	mov	r4, r0
 8004c24:	b123      	cbz	r3, 8004c30 <HTS221_TEMP_Enable+0x1c>
  pObj->temp_is_enabled = 1;
 8004c26:	2301      	movs	r3, #1
 8004c28:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
  return HTS221_OK;
 8004c2c:	2000      	movs	r0, #0
}
 8004c2e:	bd10      	pop	{r4, pc}
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8004c30:	2101      	movs	r1, #1
 8004c32:	301c      	adds	r0, #28
 8004c34:	f000 f974 	bl	8004f20 <hts221_power_on_set>
 8004c38:	2800      	cmp	r0, #0
 8004c3a:	d0f4      	beq.n	8004c26 <HTS221_TEMP_Enable+0x12>
      return HTS221_ERROR;
 8004c3c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8004c40:	bd10      	pop	{r4, pc}
    return HTS221_OK;
 8004c42:	2000      	movs	r0, #0
}
 8004c44:	4770      	bx	lr
 8004c46:	bf00      	nop

08004c48 <HTS221_DeInit>:
{
 8004c48:	b510      	push	{r4, lr}
  if (pObj->is_initialized == 1U)
 8004c4a:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8004c4e:	2b01      	cmp	r3, #1
{
 8004c50:	4604      	mov	r4, r0
  if (pObj->is_initialized == 1U)
 8004c52:	d003      	beq.n	8004c5c <HTS221_DeInit+0x14>
  pObj->is_initialized = 0;
 8004c54:	2000      	movs	r0, #0
 8004c56:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
}
 8004c5a:	bd10      	pop	{r4, pc}
  if (pObj->hum_is_enabled == 0U)
 8004c5c:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8004c60:	f890 102a 	ldrb.w	r1, [r0, #42]	; 0x2a
 8004c64:	b953      	cbnz	r3, 8004c7c <HTS221_DeInit+0x34>
  if (pObj->temp_is_enabled == 0U)
 8004c66:	2900      	cmp	r1, #0
 8004c68:	d0f4      	beq.n	8004c54 <HTS221_DeInit+0xc>
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8004c6a:	2100      	movs	r1, #0
 8004c6c:	f104 001c 	add.w	r0, r4, #28
 8004c70:	f000 f956 	bl	8004f20 <hts221_power_on_set>
 8004c74:	b980      	cbnz	r0, 8004c98 <HTS221_DeInit+0x50>
  pObj->temp_is_enabled = 0;
 8004c76:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
 8004c7a:	e7eb      	b.n	8004c54 <HTS221_DeInit+0xc>
  if (pObj->temp_is_enabled == 0U)
 8004c7c:	b129      	cbz	r1, 8004c8a <HTS221_DeInit+0x42>
  pObj->hum_is_enabled = 0;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
  if (pObj->temp_is_enabled == 0U)
 8004c84:	2900      	cmp	r1, #0
 8004c86:	d0e5      	beq.n	8004c54 <HTS221_DeInit+0xc>
 8004c88:	e7ef      	b.n	8004c6a <HTS221_DeInit+0x22>
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8004c8a:	301c      	adds	r0, #28
 8004c8c:	f000 f948 	bl	8004f20 <hts221_power_on_set>
 8004c90:	b910      	cbnz	r0, 8004c98 <HTS221_DeInit+0x50>
 8004c92:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
 8004c96:	e7f2      	b.n	8004c7e <HTS221_DeInit+0x36>
      return HTS221_ERROR;
 8004c98:	f04f 30ff 	mov.w	r0, #4294967295
}
 8004c9c:	bd10      	pop	{r4, pc}
 8004c9e:	bf00      	nop

08004ca0 <HTS221_TEMP_GetOutputDataRate>:
 8004ca0:	b510      	push	{r4, lr}
 8004ca2:	b082      	sub	sp, #8
 8004ca4:	460c      	mov	r4, r1
 8004ca6:	301c      	adds	r0, #28
 8004ca8:	f10d 0107 	add.w	r1, sp, #7
 8004cac:	f000 f8d8 	bl	8004e60 <hts221_data_rate_get>
 8004cb0:	b9c0      	cbnz	r0, 8004ce4 <HTS221_TEMP_GetOutputDataRate+0x44>
 8004cb2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004cb6:	2b03      	cmp	r3, #3
 8004cb8:	d814      	bhi.n	8004ce4 <HTS221_TEMP_GetOutputDataRate+0x44>
 8004cba:	e8df f003 	tbb	[pc, r3]
 8004cbe:	0a06      	.short	0x0a06
 8004cc0:	020f      	.short	0x020f
 8004cc2:	4b0a      	ldr	r3, [pc, #40]	; (8004cec <HTS221_TEMP_GetOutputDataRate+0x4c>)
 8004cc4:	6023      	str	r3, [r4, #0]
 8004cc6:	b002      	add	sp, #8
 8004cc8:	bd10      	pop	{r4, pc}
 8004cca:	2300      	movs	r3, #0
 8004ccc:	6023      	str	r3, [r4, #0]
 8004cce:	b002      	add	sp, #8
 8004cd0:	bd10      	pop	{r4, pc}
 8004cd2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004cd6:	6023      	str	r3, [r4, #0]
 8004cd8:	b002      	add	sp, #8
 8004cda:	bd10      	pop	{r4, pc}
 8004cdc:	4b04      	ldr	r3, [pc, #16]	; (8004cf0 <HTS221_TEMP_GetOutputDataRate+0x50>)
 8004cde:	6023      	str	r3, [r4, #0]
 8004ce0:	b002      	add	sp, #8
 8004ce2:	bd10      	pop	{r4, pc}
 8004ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ce8:	e7ed      	b.n	8004cc6 <HTS221_TEMP_GetOutputDataRate+0x26>
 8004cea:	bf00      	nop
 8004cec:	41480000 	.word	0x41480000
 8004cf0:	40e00000 	.word	0x40e00000

08004cf4 <HTS221_TEMP_Disable>:
  if (pObj->temp_is_enabled == 0U)
 8004cf4:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 8004cf8:	b14b      	cbz	r3, 8004d0e <HTS221_TEMP_Disable+0x1a>
{
 8004cfa:	b510      	push	{r4, lr}
  if (pObj->hum_is_enabled == 0U)
 8004cfc:	f890 1029 	ldrb.w	r1, [r0, #41]	; 0x29
 8004d00:	4604      	mov	r4, r0
 8004d02:	b131      	cbz	r1, 8004d12 <HTS221_TEMP_Disable+0x1e>
  pObj->temp_is_enabled = 0;
 8004d04:	2300      	movs	r3, #0
 8004d06:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
  return HTS221_OK;
 8004d0a:	4618      	mov	r0, r3
}
 8004d0c:	bd10      	pop	{r4, pc}
    return HTS221_OK;
 8004d0e:	4618      	mov	r0, r3
}
 8004d10:	4770      	bx	lr
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8004d12:	301c      	adds	r0, #28
 8004d14:	f000 f904 	bl	8004f20 <hts221_power_on_set>
 8004d18:	2800      	cmp	r0, #0
 8004d1a:	d0f3      	beq.n	8004d04 <HTS221_TEMP_Disable+0x10>
      return HTS221_ERROR;
 8004d1c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8004d20:	bd10      	pop	{r4, pc}
 8004d22:	bf00      	nop

08004d24 <HTS221_HUM_Disable>:
  if (pObj->hum_is_enabled == 0U)
 8004d24:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8004d28:	b14b      	cbz	r3, 8004d3e <HTS221_HUM_Disable+0x1a>
{
 8004d2a:	b510      	push	{r4, lr}
  if (pObj->temp_is_enabled == 0U)
 8004d2c:	f890 102a 	ldrb.w	r1, [r0, #42]	; 0x2a
 8004d30:	4604      	mov	r4, r0
 8004d32:	b131      	cbz	r1, 8004d42 <HTS221_HUM_Disable+0x1e>
  pObj->hum_is_enabled = 0;
 8004d34:	2300      	movs	r3, #0
 8004d36:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
  return HTS221_OK;
 8004d3a:	4618      	mov	r0, r3
}
 8004d3c:	bd10      	pop	{r4, pc}
    return HTS221_OK;
 8004d3e:	4618      	mov	r0, r3
}
 8004d40:	4770      	bx	lr
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8004d42:	301c      	adds	r0, #28
 8004d44:	f000 f8ec 	bl	8004f20 <hts221_power_on_set>
 8004d48:	2800      	cmp	r0, #0
 8004d4a:	d0f3      	beq.n	8004d34 <HTS221_HUM_Disable+0x10>
      return HTS221_ERROR;
 8004d4c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8004d50:	bd10      	pop	{r4, pc}
 8004d52:	bf00      	nop

08004d54 <HTS221_HUM_GetOutputDataRate>:
{
 8004d54:	b510      	push	{r4, lr}
 8004d56:	b082      	sub	sp, #8
 8004d58:	460c      	mov	r4, r1
  if (hts221_data_rate_get(&(pObj->Ctx), &odr_low_level) != HTS221_OK)
 8004d5a:	301c      	adds	r0, #28
 8004d5c:	f10d 0107 	add.w	r1, sp, #7
 8004d60:	f000 f87e 	bl	8004e60 <hts221_data_rate_get>
 8004d64:	b9c0      	cbnz	r0, 8004d98 <HTS221_HUM_GetOutputDataRate+0x44>
  switch (odr_low_level)
 8004d66:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004d6a:	2b03      	cmp	r3, #3
 8004d6c:	d814      	bhi.n	8004d98 <HTS221_HUM_GetOutputDataRate+0x44>
 8004d6e:	e8df f003 	tbb	[pc, r3]
 8004d72:	0a06      	.short	0x0a06
 8004d74:	020f      	.short	0x020f
      *Odr = 12.5f;
 8004d76:	4b0a      	ldr	r3, [pc, #40]	; (8004da0 <HTS221_HUM_GetOutputDataRate+0x4c>)
 8004d78:	6023      	str	r3, [r4, #0]
}
 8004d7a:	b002      	add	sp, #8
 8004d7c:	bd10      	pop	{r4, pc}
      *Odr = 0.0f;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	6023      	str	r3, [r4, #0]
}
 8004d82:	b002      	add	sp, #8
 8004d84:	bd10      	pop	{r4, pc}
      *Odr = 1.0f;
 8004d86:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004d8a:	6023      	str	r3, [r4, #0]
}
 8004d8c:	b002      	add	sp, #8
 8004d8e:	bd10      	pop	{r4, pc}
      *Odr = 7.0f;
 8004d90:	4b04      	ldr	r3, [pc, #16]	; (8004da4 <HTS221_HUM_GetOutputDataRate+0x50>)
 8004d92:	6023      	str	r3, [r4, #0]
}
 8004d94:	b002      	add	sp, #8
 8004d96:	bd10      	pop	{r4, pc}
      ret = HTS221_ERROR;
 8004d98:	f04f 30ff 	mov.w	r0, #4294967295
  return HTS221_GetOutputDataRate(pObj, Odr);
 8004d9c:	e7ed      	b.n	8004d7a <HTS221_HUM_GetOutputDataRate+0x26>
 8004d9e:	bf00      	nop
 8004da0:	41480000 	.word	0x41480000
 8004da4:	40e00000 	.word	0x40e00000

08004da8 <HTS221_TEMP_SetOutputDataRate>:
 8004da8:	ee07 1a90 	vmov	s15, r1
 8004dac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004db0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004db4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004db8:	b508      	push	{r3, lr}
 8004dba:	d910      	bls.n	8004dde <HTS221_TEMP_SetOutputDataRate+0x36>
 8004dbc:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8004dc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dc8:	bf94      	ite	ls
 8004dca:	2102      	movls	r1, #2
 8004dcc:	2103      	movhi	r1, #3
 8004dce:	301c      	adds	r0, #28
 8004dd0:	f000 f82c 	bl	8004e2c <hts221_data_rate_set>
 8004dd4:	3000      	adds	r0, #0
 8004dd6:	bf18      	it	ne
 8004dd8:	2001      	movne	r0, #1
 8004dda:	4240      	negs	r0, r0
 8004ddc:	bd08      	pop	{r3, pc}
 8004dde:	2101      	movs	r1, #1
 8004de0:	e7f5      	b.n	8004dce <HTS221_TEMP_SetOutputDataRate+0x26>
 8004de2:	bf00      	nop

08004de4 <HTS221_RegisterBusIO>:
  if (pObj == NULL)
 8004de4:	b1d0      	cbz	r0, 8004e1c <HTS221_RegisterBusIO+0x38>
{
 8004de6:	b430      	push	{r4, r5}
    pObj->IO.DeInit    = pIO->DeInit;
 8004de8:	e9d1 3400 	ldrd	r3, r4, [r1]
    pObj->IO.BusType   = pIO->BusType;
 8004dec:	688a      	ldr	r2, [r1, #8]
 8004dee:	6082      	str	r2, [r0, #8]
    pObj->IO.DeInit    = pIO->DeInit;
 8004df0:	e9c0 3400 	strd	r3, r4, [r0]
    pObj->IO.Address   = pIO->Address;
 8004df4:	7b0a      	ldrb	r2, [r1, #12]
 8004df6:	7302      	strb	r2, [r0, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004df8:	e9d1 2504 	ldrd	r2, r5, [r1, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8004dfc:	698c      	ldr	r4, [r1, #24]
    pObj->Ctx.read_reg  = ReadRegWrap;
 8004dfe:	4909      	ldr	r1, [pc, #36]	; (8004e24 <HTS221_RegisterBusIO+0x40>)
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004e00:	6102      	str	r2, [r0, #16]
    pObj->Ctx.write_reg = WriteRegWrap;
 8004e02:	4a09      	ldr	r2, [pc, #36]	; (8004e28 <HTS221_RegisterBusIO+0x44>)
 8004e04:	61c2      	str	r2, [r0, #28]
    pObj->IO.GetTick   = pIO->GetTick;
 8004e06:	e9c0 5405 	strd	r5, r4, [r0, #20]
    pObj->Ctx.read_reg  = ReadRegWrap;
 8004e0a:	e9c0 1008 	strd	r1, r0, [r0, #32]
    if (pObj->IO.Init != NULL)
 8004e0e:	b10b      	cbz	r3, 8004e14 <HTS221_RegisterBusIO+0x30>
}
 8004e10:	bc30      	pop	{r4, r5}
      ret = pObj->IO.Init();
 8004e12:	4718      	bx	r3
}
 8004e14:	f04f 30ff 	mov.w	r0, #4294967295
 8004e18:	bc30      	pop	{r4, r5}
 8004e1a:	4770      	bx	lr
 8004e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e20:	4770      	bx	lr
 8004e22:	bf00      	nop
 8004e24:	08004ba1 	.word	0x08004ba1
 8004e28:	08004bc1 	.word	0x08004bc1

08004e2c <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(hts221_ctx_t *ctx, hts221_odr_t val)
{
 8004e2c:	b570      	push	{r4, r5, r6, lr}
 8004e2e:	b082      	sub	sp, #8
 8004e30:	4604      	mov	r4, r0
 8004e32:	460e      	mov	r6, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004e34:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8004e38:	aa01      	add	r2, sp, #4
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	2120      	movs	r1, #32
 8004e3e:	47a8      	blx	r5
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);

  if(ret == 0){
 8004e40:	b958      	cbnz	r0, 8004e5a <hts221_data_rate_set+0x2e>
    reg.odr = (uint8_t)val;
 8004e42:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004e46:	6825      	ldr	r5, [r4, #0]
 8004e48:	68a0      	ldr	r0, [r4, #8]
    reg.odr = (uint8_t)val;
 8004e4a:	f366 0301 	bfi	r3, r6, #0, #2
 8004e4e:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004e52:	aa01      	add	r2, sp, #4
 8004e54:	2301      	movs	r3, #1
 8004e56:	2120      	movs	r1, #32
 8004e58:	47a8      	blx	r5
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
  }

  return ret;
}
 8004e5a:	b002      	add	sp, #8
 8004e5c:	bd70      	pop	{r4, r5, r6, pc}
 8004e5e:	bf00      	nop

08004e60 <hts221_data_rate_get>:
  * @param  val     Get the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_get(hts221_ctx_t *ctx, hts221_odr_t *val)
{
 8004e60:	b530      	push	{r4, r5, lr}
 8004e62:	b083      	sub	sp, #12
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004e64:	2301      	movs	r3, #1
{
 8004e66:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004e68:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8004e6c:	aa01      	add	r2, sp, #4
 8004e6e:	2120      	movs	r1, #32
 8004e70:	47a8      	blx	r5
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);

  switch (reg.odr) {
 8004e72:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004e76:	f003 0303 	and.w	r3, r3, #3
 8004e7a:	2b03      	cmp	r3, #3
 8004e7c:	d813      	bhi.n	8004ea6 <hts221_data_rate_get+0x46>
 8004e7e:	e8df f003 	tbb	[pc, r3]
 8004e82:	0a0e      	.short	0x0a0e
 8004e84:	0206      	.short	0x0206
      break;
    case HTS221_ODR_7Hz:
      *val = HTS221_ODR_7Hz;
      break;
    case HTS221_ODR_12Hz5:
      *val = HTS221_ODR_12Hz5;
 8004e86:	2303      	movs	r3, #3
 8004e88:	7023      	strb	r3, [r4, #0]
      *val = HTS221_ODR_ND;
      break;
  }

  return ret;
}
 8004e8a:	b003      	add	sp, #12
 8004e8c:	bd30      	pop	{r4, r5, pc}
      *val = HTS221_ODR_7Hz;
 8004e8e:	2302      	movs	r3, #2
 8004e90:	7023      	strb	r3, [r4, #0]
}
 8004e92:	b003      	add	sp, #12
 8004e94:	bd30      	pop	{r4, r5, pc}
      *val = HTS221_ODR_1Hz;
 8004e96:	2301      	movs	r3, #1
 8004e98:	7023      	strb	r3, [r4, #0]
}
 8004e9a:	b003      	add	sp, #12
 8004e9c:	bd30      	pop	{r4, r5, pc}
      *val = HTS221_ONE_SHOT;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	7023      	strb	r3, [r4, #0]
}
 8004ea2:	b003      	add	sp, #12
 8004ea4:	bd30      	pop	{r4, r5, pc}
      *val = HTS221_ODR_ND;
 8004ea6:	2304      	movs	r3, #4
 8004ea8:	7023      	strb	r3, [r4, #0]
}
 8004eaa:	b003      	add	sp, #12
 8004eac:	bd30      	pop	{r4, r5, pc}
 8004eae:	bf00      	nop

08004eb0 <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(hts221_ctx_t *ctx, uint8_t val)
{
 8004eb0:	b570      	push	{r4, r5, r6, lr}
 8004eb2:	b082      	sub	sp, #8
 8004eb4:	4604      	mov	r4, r0
 8004eb6:	460e      	mov	r6, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004eb8:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8004ebc:	aa01      	add	r2, sp, #4
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	2120      	movs	r1, #32
 8004ec2:	47a8      	blx	r5
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);

  if(ret == 0){
 8004ec4:	b958      	cbnz	r0, 8004ede <hts221_block_data_update_set+0x2e>
    reg.bdu = val;
 8004ec6:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004eca:	6825      	ldr	r5, [r4, #0]
 8004ecc:	68a0      	ldr	r0, [r4, #8]
    reg.bdu = val;
 8004ece:	f366 0382 	bfi	r3, r6, #2, #1
 8004ed2:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004ed6:	aa01      	add	r2, sp, #4
 8004ed8:	2301      	movs	r3, #1
 8004eda:	2120      	movs	r1, #32
 8004edc:	47a8      	blx	r5
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
  }

  return ret;
}
 8004ede:	b002      	add	sp, #8
 8004ee0:	bd70      	pop	{r4, r5, r6, pc}
 8004ee2:	bf00      	nop

08004ee4 <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(hts221_ctx_t *ctx, uint8_t *buff)
{
 8004ee4:	b410      	push	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004ee6:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8004eea:	460a      	mov	r2, r1
 8004eec:	46a4      	mov	ip, r4
 8004eee:	2302      	movs	r3, #2
 8004ef0:	2128      	movs	r1, #40	; 0x28
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
  return ret;
}
 8004ef2:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004ef6:	4760      	bx	ip

08004ef8 <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(hts221_ctx_t *ctx, uint8_t *buff)
{
 8004ef8:	b410      	push	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004efa:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8004efe:	460a      	mov	r2, r1
 8004f00:	46a4      	mov	ip, r4
 8004f02:	2302      	movs	r3, #2
 8004f04:	212a      	movs	r1, #42	; 0x2a
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
  return ret;
}
 8004f06:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004f0a:	4760      	bx	ip

08004f0c <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(hts221_ctx_t *ctx, uint8_t *buff)
{
 8004f0c:	b410      	push	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004f0e:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8004f12:	460a      	mov	r2, r1
 8004f14:	46a4      	mov	ip, r4
 8004f16:	2301      	movs	r3, #1
 8004f18:	210f      	movs	r1, #15
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
  return ret;
}
 8004f1a:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004f1e:	4760      	bx	ip

08004f20 <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(hts221_ctx_t *ctx, uint8_t val)
{
 8004f20:	b570      	push	{r4, r5, r6, lr}
 8004f22:	b082      	sub	sp, #8
 8004f24:	4604      	mov	r4, r0
 8004f26:	460e      	mov	r6, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004f28:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8004f2c:	aa01      	add	r2, sp, #4
 8004f2e:	2301      	movs	r3, #1
 8004f30:	2120      	movs	r1, #32
 8004f32:	47a8      	blx	r5
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);

  if(ret == 0){
 8004f34:	b958      	cbnz	r0, 8004f4e <hts221_power_on_set+0x2e>
    reg.pd = val;
 8004f36:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004f3a:	6825      	ldr	r5, [r4, #0]
 8004f3c:	68a0      	ldr	r0, [r4, #8]
    reg.pd = val;
 8004f3e:	f366 13c7 	bfi	r3, r6, #7, #1
 8004f42:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004f46:	aa01      	add	r2, sp, #4
 8004f48:	2301      	movs	r3, #1
 8004f4a:	2120      	movs	r1, #32
 8004f4c:	47a8      	blx	r5
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
  }
  return ret;
}
 8004f4e:	b002      	add	sp, #8
 8004f50:	bd70      	pop	{r4, r5, r6, pc}
 8004f52:	bf00      	nop

08004f54 <hts221_hum_rh_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(hts221_ctx_t *ctx, uint8_t *buff)
{
 8004f54:	b538      	push	{r3, r4, r5, lr}
 8004f56:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004f58:	460a      	mov	r2, r1
 8004f5a:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8004f5e:	2301      	movs	r3, #1
 8004f60:	2130      	movs	r1, #48	; 0x30
 8004f62:	47a8      	blx	r5
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, buff, 1);
  *buff = (uint8_t)(((uint16_t)(*buff) >> 1) & 0x7FFFu);
 8004f64:	7823      	ldrb	r3, [r4, #0]
 8004f66:	085b      	lsrs	r3, r3, #1
 8004f68:	7023      	strb	r3, [r4, #0]

  return ret;
}
 8004f6a:	bd38      	pop	{r3, r4, r5, pc}

08004f6c <hts221_hum_rh_point_1_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(hts221_ctx_t *ctx, uint8_t *buff)
{
 8004f6c:	b538      	push	{r3, r4, r5, lr}
 8004f6e:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004f70:	460a      	mov	r2, r1
 8004f72:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8004f76:	2301      	movs	r3, #1
 8004f78:	2131      	movs	r1, #49	; 0x31
 8004f7a:	47a8      	blx	r5
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, buff, 1);
  *buff = (uint8_t)(((uint16_t)(*buff) >> 1) & 0x7FFFu);
 8004f7c:	7823      	ldrb	r3, [r4, #0]
 8004f7e:	085b      	lsrs	r3, r3, #1
 8004f80:	7023      	strb	r3, [r4, #0]

  return ret;
}
 8004f82:	bd38      	pop	{r3, r4, r5, pc}

08004f84 <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(hts221_ctx_t *ctx, uint8_t *buff)
{
 8004f84:	b570      	push	{r4, r5, r6, lr}
 8004f86:	b082      	sub	sp, #8
 8004f88:	4604      	mov	r4, r0
 8004f8a:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004f8c:	e9d0 6001 	ldrd	r6, r0, [r0, #4]
 8004f90:	2301      	movs	r3, #1
 8004f92:	f10d 0207 	add.w	r2, sp, #7
 8004f96:	2132      	movs	r1, #50	; 0x32
 8004f98:	47b0      	blx	r6
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);

  if(ret == 0){
 8004f9a:	b978      	cbnz	r0, 8004fbc <hts221_temp_deg_point_0_get+0x38>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	aa01      	add	r2, sp, #4
 8004fa0:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
 8004fa4:	2135      	movs	r1, #53	; 0x35
 8004fa6:	47b0      	blx	r6
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t*) &reg, 1);
    coeff_h = reg.t0_msb;
 8004fa8:	f89d 2004 	ldrb.w	r2, [sp, #4]
    *(buff) = (uint8_t)(((coeff_h << 8) + coeff_l) >> 3);
 8004fac:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004fb0:	f002 0203 	and.w	r2, r2, #3
 8004fb4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004fb8:	10db      	asrs	r3, r3, #3
 8004fba:	702b      	strb	r3, [r5, #0]
  }

  return ret;
}
 8004fbc:	b002      	add	sp, #8
 8004fbe:	bd70      	pop	{r4, r5, r6, pc}

08004fc0 <hts221_temp_deg_point_1_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(hts221_ctx_t *ctx, uint8_t *buff)
{
 8004fc0:	b570      	push	{r4, r5, r6, lr}
 8004fc2:	b082      	sub	sp, #8
 8004fc4:	4604      	mov	r4, r0
 8004fc6:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004fc8:	e9d0 6001 	ldrd	r6, r0, [r0, #4]
 8004fcc:	2301      	movs	r3, #1
 8004fce:	f10d 0207 	add.w	r2, sp, #7
 8004fd2:	2133      	movs	r1, #51	; 0x33
 8004fd4:	47b0      	blx	r6
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);

  if(ret == 0){
 8004fd6:	b978      	cbnz	r0, 8004ff8 <hts221_temp_deg_point_1_get+0x38>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004fd8:	2301      	movs	r3, #1
 8004fda:	aa01      	add	r2, sp, #4
 8004fdc:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
 8004fe0:	2135      	movs	r1, #53	; 0x35
 8004fe2:	47b0      	blx	r6
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t*) &reg, 1);
    coeff_h = reg.t1_msb;
 8004fe4:	f89d 2004 	ldrb.w	r2, [sp, #4]
    *(buff) = (uint8_t)(((coeff_h << 8) + coeff_l) >> 3);
 8004fe8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004fec:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8004ff0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004ff4:	10db      	asrs	r3, r3, #3
 8004ff6:	702b      	strb	r3, [r5, #0]
  }

  return ret;
}
 8004ff8:	b002      	add	sp, #8
 8004ffa:	bd70      	pop	{r4, r5, r6, pc}

08004ffc <hts221_hum_adc_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(hts221_ctx_t *ctx, uint8_t *buff)
{
 8004ffc:	b410      	push	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004ffe:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8005002:	460a      	mov	r2, r1
 8005004:	46a4      	mov	ip, r4
 8005006:	2302      	movs	r3, #2
 8005008:	2136      	movs	r1, #54	; 0x36
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, buff, 2);
  return ret;
}
 800500a:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800500e:	4760      	bx	ip

08005010 <hts221_hum_adc_point_1_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(hts221_ctx_t *ctx, uint8_t *buff)
{
 8005010:	b410      	push	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005012:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8005016:	460a      	mov	r2, r1
 8005018:	46a4      	mov	ip, r4
 800501a:	2302      	movs	r3, #2
 800501c:	213a      	movs	r1, #58	; 0x3a
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, buff, 2);
  return ret;
}
 800501e:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005022:	4760      	bx	ip

08005024 <hts221_temp_adc_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(hts221_ctx_t *ctx, uint8_t *buff)
{
 8005024:	b410      	push	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005026:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 800502a:	460a      	mov	r2, r1
 800502c:	46a4      	mov	ip, r4
 800502e:	2302      	movs	r3, #2
 8005030:	213c      	movs	r1, #60	; 0x3c
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, buff, 2);
  return ret;
}
 8005032:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005036:	4760      	bx	ip

08005038 <hts221_temp_adc_point_1_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(hts221_ctx_t *ctx, uint8_t *buff)
{
 8005038:	b410      	push	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800503a:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 800503e:	460a      	mov	r2, r1
 8005040:	46a4      	mov	ip, r4
 8005042:	2302      	movs	r3, #2
 8005044:	213e      	movs	r1, #62	; 0x3e
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, buff, 2);
  return ret;
}
 8005046:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800504a:	4760      	bx	ip

0800504c <LIS2DW12_GetCapabilities>:
  Capabilities->LowPower     = 0;
  Capabilities->GyroMaxFS    = 0;
  Capabilities->AccMaxFS     = 16;
  Capabilities->MagMaxFS     = 0;
  Capabilities->GyroMaxOdr   = 0.0f;
  Capabilities->AccMaxOdr    = 1600.0f;
 800504c:	4a07      	ldr	r2, [pc, #28]	; (800506c <LIS2DW12_GetCapabilities+0x20>)
 800504e:	614a      	str	r2, [r1, #20]
  Capabilities->GyroMaxFS    = 0;
 8005050:	2000      	movs	r0, #0
{
 8005052:	b410      	push	{r4}
  Capabilities->GyroMaxOdr   = 0.0f;
 8005054:	2300      	movs	r3, #0
  Capabilities->Acc          = 1;
 8005056:	2401      	movs	r4, #1
  Capabilities->AccMaxFS     = 16;
 8005058:	2210      	movs	r2, #16
  Capabilities->Acc          = 1;
 800505a:	600c      	str	r4, [r1, #0]
  Capabilities->GyroMaxFS    = 0;
 800505c:	e9c1 0201 	strd	r0, r2, [r1, #4]
  Capabilities->MagMaxFS     = 0;
 8005060:	60c8      	str	r0, [r1, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8005062:	610b      	str	r3, [r1, #16]
  Capabilities->MagMaxOdr    = 0.0f;
 8005064:	618b      	str	r3, [r1, #24]
  return LIS2DW12_OK;
}
 8005066:	f85d 4b04 	ldr.w	r4, [sp], #4
 800506a:	4770      	bx	lr
 800506c:	44c80000 	.word	0x44c80000

08005070 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005070:	b410      	push	{r4}
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8005072:	6944      	ldr	r4, [r0, #20]
 8005074:	7b00      	ldrb	r0, [r0, #12]
 8005076:	46a4      	mov	ip, r4
}
 8005078:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800507c:	4760      	bx	ip
 800507e:	bf00      	nop

08005080 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005080:	b410      	push	{r4}
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8005082:	6904      	ldr	r4, [r0, #16]
 8005084:	7b00      	ldrb	r0, [r0, #12]
 8005086:	46a4      	mov	ip, r4
}
 8005088:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800508c:	4760      	bx	ip
 800508e:	bf00      	nop

08005090 <LIS2DW12_Init>:
{
 8005090:	b538      	push	{r3, r4, r5, lr}
  if (lis2dw12_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8005092:	f100 041c 	add.w	r4, r0, #28
{
 8005096:	4605      	mov	r5, r0
  if (lis2dw12_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8005098:	2101      	movs	r1, #1
 800509a:	4620      	mov	r0, r4
 800509c:	f000 fff2 	bl	8006084 <lis2dw12_auto_increment_set>
 80050a0:	bb10      	cbnz	r0, 80050e8 <LIS2DW12_Init+0x58>
  if (lis2dw12_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 80050a2:	2101      	movs	r1, #1
 80050a4:	4620      	mov	r0, r4
 80050a6:	f000 ff89 	bl	8005fbc <lis2dw12_block_data_update_set>
 80050aa:	b9e8      	cbnz	r0, 80050e8 <LIS2DW12_Init+0x58>
  if (lis2dw12_fifo_mode_set(&(pObj->Ctx), LIS2DW12_BYPASS_MODE) != LIS2DW12_OK)
 80050ac:	4601      	mov	r1, r0
 80050ae:	4620      	mov	r0, r4
 80050b0:	f001 f896 	bl	80061e0 <lis2dw12_fifo_mode_set>
 80050b4:	b9c0      	cbnz	r0, 80050e8 <LIS2DW12_Init+0x58>
  if (lis2dw12_power_mode_set(&(pObj->Ctx), LIS2DW12_HIGH_PERFORMANCE) != LIS2DW12_OK)
 80050b6:	2104      	movs	r1, #4
 80050b8:	4620      	mov	r0, r4
 80050ba:	f000 fe63 	bl	8005d84 <lis2dw12_power_mode_set>
 80050be:	b998      	cbnz	r0, 80050e8 <LIS2DW12_Init+0x58>
  pObj->acc_odr = 100.0f;
 80050c0:	4b0b      	ldr	r3, [pc, #44]	; (80050f0 <LIS2DW12_Init+0x60>)
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 80050c2:	f885 0030 	strb.w	r0, [r5, #48]	; 0x30
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 80050c6:	f885 0031 	strb.w	r0, [r5, #49]	; 0x31
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 80050ca:	4601      	mov	r1, r0
  pObj->acc_odr = 100.0f;
 80050cc:	62eb      	str	r3, [r5, #44]	; 0x2c
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 80050ce:	4620      	mov	r0, r4
 80050d0:	f000 fef2 	bl	8005eb8 <lis2dw12_data_rate_set>
 80050d4:	b940      	cbnz	r0, 80050e8 <LIS2DW12_Init+0x58>
  if (lis2dw12_full_scale_set(&(pObj->Ctx), LIS2DW12_2g) != LIS2DW12_OK)
 80050d6:	4601      	mov	r1, r0
 80050d8:	4620      	mov	r0, r4
 80050da:	f000 ff89 	bl	8005ff0 <lis2dw12_full_scale_set>
 80050de:	b918      	cbnz	r0, 80050e8 <LIS2DW12_Init+0x58>
  pObj->is_initialized = 1;
 80050e0:	2301      	movs	r3, #1
 80050e2:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
}
 80050e6:	bd38      	pop	{r3, r4, r5, pc}
    return LIS2DW12_ERROR;
 80050e8:	f04f 30ff 	mov.w	r0, #4294967295
}
 80050ec:	bd38      	pop	{r3, r4, r5, pc}
 80050ee:	bf00      	nop
 80050f0:	42c80000 	.word	0x42c80000

080050f4 <LIS2DW12_ACC_SetFullScale>:
         : (FullScale <= 4) ? LIS2DW12_4g
 80050f4:	2902      	cmp	r1, #2
{
 80050f6:	b508      	push	{r3, lr}
         : (FullScale <= 4) ? LIS2DW12_4g
 80050f8:	dd06      	ble.n	8005108 <LIS2DW12_ACC_SetFullScale+0x14>
 80050fa:	2904      	cmp	r1, #4
 80050fc:	dd0d      	ble.n	800511a <LIS2DW12_ACC_SetFullScale+0x26>
 80050fe:	2909      	cmp	r1, #9
 8005100:	bfb4      	ite	lt
 8005102:	2102      	movlt	r1, #2
 8005104:	2103      	movge	r1, #3
 8005106:	e000      	b.n	800510a <LIS2DW12_ACC_SetFullScale+0x16>
 8005108:	2100      	movs	r1, #0
  if (lis2dw12_full_scale_set(&(pObj->Ctx), new_fs) != LIS2DW12_OK)
 800510a:	301c      	adds	r0, #28
 800510c:	f000 ff70 	bl	8005ff0 <lis2dw12_full_scale_set>
 8005110:	3000      	adds	r0, #0
 8005112:	bf18      	it	ne
 8005114:	2001      	movne	r0, #1
}
 8005116:	4240      	negs	r0, r0
 8005118:	bd08      	pop	{r3, pc}
         : (FullScale <= 4) ? LIS2DW12_4g
 800511a:	2101      	movs	r1, #1
 800511c:	e7f5      	b.n	800510a <LIS2DW12_ACC_SetFullScale+0x16>
 800511e:	bf00      	nop

08005120 <LIS2DW12_ReadID>:
{
 8005120:	b508      	push	{r3, lr}
  if (lis2dw12_device_id_get(&(pObj->Ctx), Id) != LIS2DW12_OK)
 8005122:	301c      	adds	r0, #28
 8005124:	f000 ffa4 	bl	8006070 <lis2dw12_device_id_get>
 8005128:	3000      	adds	r0, #0
 800512a:	bf18      	it	ne
 800512c:	2001      	movne	r0, #1
}
 800512e:	4240      	negs	r0, r0
 8005130:	bd08      	pop	{r3, pc}
 8005132:	bf00      	nop

08005134 <LIS2DW12_ACC_GetFullScale>:
{
 8005134:	b510      	push	{r4, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	460c      	mov	r4, r1
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &fs_low_level) != LIS2DW12_OK)
 800513a:	301c      	adds	r0, #28
 800513c:	f10d 0107 	add.w	r1, sp, #7
 8005140:	f000 ff70 	bl	8006024 <lis2dw12_full_scale_get>
 8005144:	b9e0      	cbnz	r0, 8005180 <LIS2DW12_ACC_GetFullScale+0x4c>
  switch (fs_low_level)
 8005146:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800514a:	2b03      	cmp	r3, #3
 800514c:	d813      	bhi.n	8005176 <LIS2DW12_ACC_GetFullScale+0x42>
 800514e:	e8df f003 	tbb	[pc, r3]
 8005152:	0a06      	.short	0x0a06
 8005154:	020e      	.short	0x020e
      *FullScale = 16;
 8005156:	2310      	movs	r3, #16
 8005158:	6023      	str	r3, [r4, #0]
}
 800515a:	b002      	add	sp, #8
 800515c:	bd10      	pop	{r4, pc}
      *FullScale =  2;
 800515e:	2302      	movs	r3, #2
 8005160:	6023      	str	r3, [r4, #0]
}
 8005162:	b002      	add	sp, #8
 8005164:	bd10      	pop	{r4, pc}
      *FullScale =  4;
 8005166:	2304      	movs	r3, #4
 8005168:	6023      	str	r3, [r4, #0]
}
 800516a:	b002      	add	sp, #8
 800516c:	bd10      	pop	{r4, pc}
      *FullScale =  8;
 800516e:	2308      	movs	r3, #8
 8005170:	6023      	str	r3, [r4, #0]
}
 8005172:	b002      	add	sp, #8
 8005174:	bd10      	pop	{r4, pc}
      *FullScale = -1;
 8005176:	f04f 30ff 	mov.w	r0, #4294967295
 800517a:	6020      	str	r0, [r4, #0]
}
 800517c:	b002      	add	sp, #8
 800517e:	bd10      	pop	{r4, pc}
    return LIS2DW12_ERROR;
 8005180:	f04f 30ff 	mov.w	r0, #4294967295
 8005184:	e7e9      	b.n	800515a <LIS2DW12_ACC_GetFullScale+0x26>
 8005186:	bf00      	nop

08005188 <LIS2DW12_ACC_GetSensitivity>:
{
 8005188:	b530      	push	{r4, r5, lr}
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &full_scale) != LIS2DW12_OK)
 800518a:	f100 041c 	add.w	r4, r0, #28
{
 800518e:	b083      	sub	sp, #12
 8005190:	460d      	mov	r5, r1
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &full_scale) != LIS2DW12_OK)
 8005192:	4620      	mov	r0, r4
 8005194:	f10d 0106 	add.w	r1, sp, #6
 8005198:	f000 ff44 	bl	8006024 <lis2dw12_full_scale_get>
 800519c:	bb28      	cbnz	r0, 80051ea <LIS2DW12_ACC_GetSensitivity+0x62>
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 800519e:	4620      	mov	r0, r4
 80051a0:	f10d 0107 	add.w	r1, sp, #7
 80051a4:	f000 fe20 	bl	8005de8 <lis2dw12_power_mode_get>
 80051a8:	b9f8      	cbnz	r0, 80051ea <LIS2DW12_ACC_GetSensitivity+0x62>
  switch(mode)
 80051aa:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80051ae:	2a1b      	cmp	r2, #27
 80051b0:	d819      	bhi.n	80051e6 <LIS2DW12_ACC_GetSensitivity+0x5e>
 80051b2:	2301      	movs	r3, #1
 80051b4:	4093      	lsls	r3, r2
 80051b6:	f003 321e 	and.w	r2, r3, #505290270	; 0x1e1e1e1e
 80051ba:	f022 2210 	bic.w	r2, r2, #268439552	; 0x10001000
 80051be:	b952      	cbnz	r2, 80051d6 <LIS2DW12_ACC_GetSensitivity+0x4e>
 80051c0:	f013 3f01 	tst.w	r3, #16843009	; 0x1010101
 80051c4:	d00f      	beq.n	80051e6 <LIS2DW12_ACC_GetSensitivity+0x5e>
      switch (full_scale)
 80051c6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80051ca:	2b03      	cmp	r3, #3
 80051cc:	d80b      	bhi.n	80051e6 <LIS2DW12_ACC_GetSensitivity+0x5e>
 80051ce:	e8df f003 	tbb	[pc, r3]
 80051d2:	1014      	.short	0x1014
 80051d4:	1e21      	.short	0x1e21
      switch (full_scale)
 80051d6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80051da:	2b03      	cmp	r3, #3
 80051dc:	d803      	bhi.n	80051e6 <LIS2DW12_ACC_GetSensitivity+0x5e>
 80051de:	e8df f003 	tbb	[pc, r3]
 80051e2:	1013      	.short	0x1013
 80051e4:	080c      	.short	0x080c
          *Sensitivity = -1.0f;
 80051e6:	4b0d      	ldr	r3, [pc, #52]	; (800521c <LIS2DW12_ACC_GetSensitivity+0x94>)
 80051e8:	602b      	str	r3, [r5, #0]
          ret = LIS2DW12_ERROR;
 80051ea:	f04f 30ff 	mov.w	r0, #4294967295
}
 80051ee:	b003      	add	sp, #12
 80051f0:	bd30      	pop	{r4, r5, pc}
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_LOPOW1_MODE;
 80051f2:	4b0b      	ldr	r3, [pc, #44]	; (8005220 <LIS2DW12_ACC_GetSensitivity+0x98>)
 80051f4:	602b      	str	r3, [r5, #0]
}
 80051f6:	b003      	add	sp, #12
 80051f8:	bd30      	pop	{r4, r5, pc}
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_LOPOW1_MODE;
 80051fa:	4b0a      	ldr	r3, [pc, #40]	; (8005224 <LIS2DW12_ACC_GetSensitivity+0x9c>)
 80051fc:	602b      	str	r3, [r5, #0]
}
 80051fe:	b003      	add	sp, #12
 8005200:	bd30      	pop	{r4, r5, pc}
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_OTHER_MODES;
 8005202:	4b09      	ldr	r3, [pc, #36]	; (8005228 <LIS2DW12_ACC_GetSensitivity+0xa0>)
 8005204:	602b      	str	r3, [r5, #0]
          break;
 8005206:	e7f2      	b.n	80051ee <LIS2DW12_ACC_GetSensitivity+0x66>
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_OTHER_MODES;
 8005208:	4b08      	ldr	r3, [pc, #32]	; (800522c <LIS2DW12_ACC_GetSensitivity+0xa4>)
 800520a:	602b      	str	r3, [r5, #0]
           break;
 800520c:	e7ef      	b.n	80051ee <LIS2DW12_ACC_GetSensitivity+0x66>
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_LOPOW1_MODE;
 800520e:	4b08      	ldr	r3, [pc, #32]	; (8005230 <LIS2DW12_ACC_GetSensitivity+0xa8>)
 8005210:	602b      	str	r3, [r5, #0]
          break;
 8005212:	e7ec      	b.n	80051ee <LIS2DW12_ACC_GetSensitivity+0x66>
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_LOPOW1_MODE;
 8005214:	4b07      	ldr	r3, [pc, #28]	; (8005234 <LIS2DW12_ACC_GetSensitivity+0xac>)
 8005216:	602b      	str	r3, [r5, #0]
           break;
 8005218:	e7e9      	b.n	80051ee <LIS2DW12_ACC_GetSensitivity+0x66>
 800521a:	bf00      	nop
 800521c:	bf800000 	.word	0xbf800000
 8005220:	3ff9db23 	.word	0x3ff9db23
 8005224:	3f79db23 	.word	0x3f79db23
 8005228:	3ef9db23 	.word	0x3ef9db23
 800522c:	3e79db23 	.word	0x3e79db23
 8005230:	40f9db23 	.word	0x40f9db23
 8005234:	4079db23 	.word	0x4079db23

08005238 <LIS2DW12_ACC_GetOutputDataRate>:
{
 8005238:	b530      	push	{r4, r5, lr}
  if (lis2dw12_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2DW12_OK)
 800523a:	f100 041c 	add.w	r4, r0, #28
{
 800523e:	b083      	sub	sp, #12
 8005240:	460d      	mov	r5, r1
  if (lis2dw12_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2DW12_OK)
 8005242:	4620      	mov	r0, r4
 8005244:	f10d 0106 	add.w	r1, sp, #6
 8005248:	f000 fe64 	bl	8005f14 <lis2dw12_data_rate_get>
 800524c:	2800      	cmp	r0, #0
 800524e:	d166      	bne.n	800531e <LIS2DW12_ACC_GetOutputDataRate+0xe6>
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8005250:	4620      	mov	r0, r4
 8005252:	f10d 0107 	add.w	r1, sp, #7
 8005256:	f000 fdc7 	bl	8005de8 <lis2dw12_power_mode_get>
 800525a:	2800      	cmp	r0, #0
 800525c:	d15f      	bne.n	800531e <LIS2DW12_ACC_GetOutputDataRate+0xe6>
  switch (odr_low_level)
 800525e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8005262:	2b20      	cmp	r3, #32
 8005264:	d859      	bhi.n	800531a <LIS2DW12_ACC_GetOutputDataRate+0xe2>
 8005266:	e8df f003 	tbb	[pc, r3]
 800526a:	1e4c      	.short	0x1e4c
 800526c:	4f55522a 	.word	0x4f55522a
 8005270:	3d2e111a 	.word	0x3d2e111a
 8005274:	58585858 	.word	0x58585858
 8005278:	584c5858 	.word	0x584c5858
 800527c:	58585858 	.word	0x58585858
 8005280:	58585858 	.word	0x58585858
 8005284:	58585858 	.word	0x58585858
 8005288:	5858      	.short	0x5858
 800528a:	4c          	.byte	0x4c
 800528b:	00          	.byte	0x00
      switch (mode)
 800528c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8005290:	2a1b      	cmp	r2, #27
 8005292:	d842      	bhi.n	800531a <LIS2DW12_ACC_GetOutputDataRate+0xe2>
 8005294:	2301      	movs	r3, #1
 8005296:	4093      	lsls	r3, r2
 8005298:	f013 3f0f 	tst.w	r3, #252645135	; 0xf0f0f0f
 800529c:	d043      	beq.n	8005326 <LIS2DW12_ACC_GetOutputDataRate+0xee>
      *Odr = 200.0f;
 800529e:	4b26      	ldr	r3, [pc, #152]	; (8005338 <LIS2DW12_ACC_GetOutputDataRate+0x100>)
 80052a0:	602b      	str	r3, [r5, #0]
}
 80052a2:	b003      	add	sp, #12
 80052a4:	bd30      	pop	{r4, r5, pc}
      switch (mode)
 80052a6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80052aa:	2a1b      	cmp	r2, #27
 80052ac:	d835      	bhi.n	800531a <LIS2DW12_ACC_GetOutputDataRate+0xe2>
 80052ae:	2301      	movs	r3, #1
 80052b0:	4093      	lsls	r3, r2
 80052b2:	f013 3f0f 	tst.w	r3, #252645135	; 0xf0f0f0f
 80052b6:	d13c      	bne.n	8005332 <LIS2DW12_ACC_GetOutputDataRate+0xfa>
 80052b8:	f013 1f10 	tst.w	r3, #1048592	; 0x100010
 80052bc:	d02d      	beq.n	800531a <LIS2DW12_ACC_GetOutputDataRate+0xe2>
          *Odr = 12.5f;
 80052be:	4b1f      	ldr	r3, [pc, #124]	; (800533c <LIS2DW12_ACC_GetOutputDataRate+0x104>)
 80052c0:	602b      	str	r3, [r5, #0]
}
 80052c2:	b003      	add	sp, #12
 80052c4:	bd30      	pop	{r4, r5, pc}
      switch (mode)
 80052c6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80052ca:	2a1b      	cmp	r2, #27
 80052cc:	d825      	bhi.n	800531a <LIS2DW12_ACC_GetOutputDataRate+0xe2>
 80052ce:	2301      	movs	r3, #1
 80052d0:	4093      	lsls	r3, r2
 80052d2:	f013 3f0f 	tst.w	r3, #252645135	; 0xf0f0f0f
 80052d6:	d1e2      	bne.n	800529e <LIS2DW12_ACC_GetOutputDataRate+0x66>
 80052d8:	f013 1f10 	tst.w	r3, #1048592	; 0x100010
 80052dc:	d01d      	beq.n	800531a <LIS2DW12_ACC_GetOutputDataRate+0xe2>
          *Odr = 800.0f;
 80052de:	4b18      	ldr	r3, [pc, #96]	; (8005340 <LIS2DW12_ACC_GetOutputDataRate+0x108>)
 80052e0:	602b      	str	r3, [r5, #0]
           break;
 80052e2:	e7de      	b.n	80052a2 <LIS2DW12_ACC_GetOutputDataRate+0x6a>
      switch (mode)
 80052e4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80052e8:	2a1b      	cmp	r2, #27
 80052ea:	d816      	bhi.n	800531a <LIS2DW12_ACC_GetOutputDataRate+0xe2>
 80052ec:	2301      	movs	r3, #1
 80052ee:	4093      	lsls	r3, r2
 80052f0:	f013 3f0f 	tst.w	r3, #252645135	; 0xf0f0f0f
 80052f4:	d1d3      	bne.n	800529e <LIS2DW12_ACC_GetOutputDataRate+0x66>
 80052f6:	f013 1f10 	tst.w	r3, #1048592	; 0x100010
 80052fa:	d00e      	beq.n	800531a <LIS2DW12_ACC_GetOutputDataRate+0xe2>
          *Odr = 1600.0f;
 80052fc:	4b11      	ldr	r3, [pc, #68]	; (8005344 <LIS2DW12_ACC_GetOutputDataRate+0x10c>)
 80052fe:	602b      	str	r3, [r5, #0]
           break;
 8005300:	e7cf      	b.n	80052a2 <LIS2DW12_ACC_GetOutputDataRate+0x6a>
      *Odr = 0.0f;
 8005302:	2300      	movs	r3, #0
 8005304:	602b      	str	r3, [r5, #0]
      break;
 8005306:	e7cc      	b.n	80052a2 <LIS2DW12_ACC_GetOutputDataRate+0x6a>
      *Odr = 100.0f;
 8005308:	4b0f      	ldr	r3, [pc, #60]	; (8005348 <LIS2DW12_ACC_GetOutputDataRate+0x110>)
 800530a:	602b      	str	r3, [r5, #0]
      break;
 800530c:	e7c9      	b.n	80052a2 <LIS2DW12_ACC_GetOutputDataRate+0x6a>
      *Odr = 25.0f;
 800530e:	4b0f      	ldr	r3, [pc, #60]	; (800534c <LIS2DW12_ACC_GetOutputDataRate+0x114>)
 8005310:	602b      	str	r3, [r5, #0]
      break;
 8005312:	e7c6      	b.n	80052a2 <LIS2DW12_ACC_GetOutputDataRate+0x6a>
      *Odr = 50.0f;
 8005314:	4b0e      	ldr	r3, [pc, #56]	; (8005350 <LIS2DW12_ACC_GetOutputDataRate+0x118>)
 8005316:	602b      	str	r3, [r5, #0]
      break;
 8005318:	e7c3      	b.n	80052a2 <LIS2DW12_ACC_GetOutputDataRate+0x6a>
          *Odr = -1.0f;
 800531a:	4b0e      	ldr	r3, [pc, #56]	; (8005354 <LIS2DW12_ACC_GetOutputDataRate+0x11c>)
 800531c:	602b      	str	r3, [r5, #0]
          ret = LIS2DW12_ERROR;
 800531e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005322:	b003      	add	sp, #12
 8005324:	bd30      	pop	{r4, r5, pc}
 8005326:	f013 1f10 	tst.w	r3, #1048592	; 0x100010
 800532a:	d0f6      	beq.n	800531a <LIS2DW12_ACC_GetOutputDataRate+0xe2>
          *Odr = 400.0f;
 800532c:	4b0a      	ldr	r3, [pc, #40]	; (8005358 <LIS2DW12_ACC_GetOutputDataRate+0x120>)
 800532e:	602b      	str	r3, [r5, #0]
           break;
 8005330:	e7b7      	b.n	80052a2 <LIS2DW12_ACC_GetOutputDataRate+0x6a>
          *Odr = 1.6f;
 8005332:	4b0a      	ldr	r3, [pc, #40]	; (800535c <LIS2DW12_ACC_GetOutputDataRate+0x124>)
 8005334:	602b      	str	r3, [r5, #0]
          break;
 8005336:	e7b4      	b.n	80052a2 <LIS2DW12_ACC_GetOutputDataRate+0x6a>
 8005338:	43480000 	.word	0x43480000
 800533c:	41480000 	.word	0x41480000
 8005340:	44480000 	.word	0x44480000
 8005344:	44c80000 	.word	0x44c80000
 8005348:	42c80000 	.word	0x42c80000
 800534c:	41c80000 	.word	0x41c80000
 8005350:	42480000 	.word	0x42480000
 8005354:	bf800000 	.word	0xbf800000
 8005358:	43c80000 	.word	0x43c80000
 800535c:	3fcccccd 	.word	0x3fcccccd

08005360 <LIS2DW12_ACC_GetAxesRaw>:
{
 8005360:	b530      	push	{r4, r5, lr}
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8005362:	f100 051c 	add.w	r5, r0, #28
{
 8005366:	b085      	sub	sp, #20
 8005368:	460c      	mov	r4, r1
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 800536a:	4628      	mov	r0, r5
 800536c:	f10d 0107 	add.w	r1, sp, #7
 8005370:	f000 fd3a 	bl	8005de8 <lis2dw12_power_mode_get>
 8005374:	2800      	cmp	r0, #0
 8005376:	d141      	bne.n	80053fc <LIS2DW12_ACC_GetAxesRaw+0x9c>
  if (lis2dw12_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LIS2DW12_OK)
 8005378:	4628      	mov	r0, r5
 800537a:	a902      	add	r1, sp, #8
 800537c:	f000 fe6e 	bl	800605c <lis2dw12_acceleration_raw_get>
 8005380:	2800      	cmp	r0, #0
 8005382:	d13b      	bne.n	80053fc <LIS2DW12_ACC_GetAxesRaw+0x9c>
  switch(mode)
 8005384:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8005388:	2a1b      	cmp	r2, #27
 800538a:	d837      	bhi.n	80053fc <LIS2DW12_ACC_GetAxesRaw+0x9c>
 800538c:	2301      	movs	r3, #1
 800538e:	4093      	lsls	r3, r2
 8005390:	f003 321e 	and.w	r2, r3, #505290270	; 0x1e1e1e1e
 8005394:	f022 2210 	bic.w	r2, r2, #268439552	; 0x10001000
 8005398:	b9ca      	cbnz	r2, 80053ce <LIS2DW12_ACC_GetAxesRaw+0x6e>
 800539a:	f013 3f01 	tst.w	r3, #16843009	; 0x1010101
 800539e:	d02d      	beq.n	80053fc <LIS2DW12_ACC_GetAxesRaw+0x9c>
      Value->x = (data_raw.i16bit[0] / 16);
 80053a0:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
      Value->y = (data_raw.i16bit[1] / 16);
 80053a4:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
      Value->x = (data_raw.i16bit[0] / 16);
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	bfb8      	it	lt
 80053ac:	330f      	addlt	r3, #15
 80053ae:	111b      	asrs	r3, r3, #4
 80053b0:	8023      	strh	r3, [r4, #0]
      Value->z = (data_raw.i16bit[2] / 16);
 80053b2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
      Value->y = (data_raw.i16bit[1] / 16);
 80053b6:	2a00      	cmp	r2, #0
 80053b8:	bfb8      	it	lt
 80053ba:	320f      	addlt	r2, #15
      Value->z = (data_raw.i16bit[2] / 16);
 80053bc:	2b00      	cmp	r3, #0
 80053be:	bfb8      	it	lt
 80053c0:	330f      	addlt	r3, #15
      Value->y = (data_raw.i16bit[1] / 16);
 80053c2:	1112      	asrs	r2, r2, #4
      Value->z = (data_raw.i16bit[2] / 16);
 80053c4:	111b      	asrs	r3, r3, #4
      Value->y = (data_raw.i16bit[1] / 16);
 80053c6:	8062      	strh	r2, [r4, #2]
      Value->z = (data_raw.i16bit[2] / 16);
 80053c8:	80a3      	strh	r3, [r4, #4]
}
 80053ca:	b005      	add	sp, #20
 80053cc:	bd30      	pop	{r4, r5, pc}
      Value->x = (data_raw.i16bit[0] / 4);
 80053ce:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
      Value->y = (data_raw.i16bit[1] / 4);
 80053d2:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
      Value->x = (data_raw.i16bit[0] / 4);
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	bfb8      	it	lt
 80053da:	3303      	addlt	r3, #3
 80053dc:	109b      	asrs	r3, r3, #2
 80053de:	8023      	strh	r3, [r4, #0]
      Value->z = (data_raw.i16bit[2] / 4);
 80053e0:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
      Value->y = (data_raw.i16bit[1] / 4);
 80053e4:	2a00      	cmp	r2, #0
 80053e6:	bfb8      	it	lt
 80053e8:	3203      	addlt	r2, #3
      Value->z = (data_raw.i16bit[2] / 4);
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	bfb8      	it	lt
 80053ee:	3303      	addlt	r3, #3
      Value->y = (data_raw.i16bit[1] / 4);
 80053f0:	1092      	asrs	r2, r2, #2
      Value->z = (data_raw.i16bit[2] / 4);
 80053f2:	109b      	asrs	r3, r3, #2
      Value->y = (data_raw.i16bit[1] / 4);
 80053f4:	8062      	strh	r2, [r4, #2]
      Value->z = (data_raw.i16bit[2] / 4);
 80053f6:	80a3      	strh	r3, [r4, #4]
}
 80053f8:	b005      	add	sp, #20
 80053fa:	bd30      	pop	{r4, r5, pc}
    return LIS2DW12_ERROR;
 80053fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005400:	e7fa      	b.n	80053f8 <LIS2DW12_ACC_GetAxesRaw+0x98>
 8005402:	bf00      	nop

08005404 <LIS2DW12_DeInit>:
{
 8005404:	b510      	push	{r4, lr}
  if (pObj->acc_is_enabled == 0U)
 8005406:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
{
 800540a:	4604      	mov	r4, r0
  if (pObj->acc_is_enabled == 0U)
 800540c:	b94b      	cbnz	r3, 8005422 <LIS2DW12_DeInit+0x1e>
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 800540e:	2000      	movs	r0, #0
  pObj->acc_odr = 0.0f;
 8005410:	2300      	movs	r3, #0
  pObj->is_initialized = 0;
 8005412:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
  pObj->acc_odr = 0.0f;
 8005416:	62e3      	str	r3, [r4, #44]	; 0x2c
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 8005418:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 800541c:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
}
 8005420:	bd10      	pop	{r4, pc}
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 8005422:	2100      	movs	r1, #0
 8005424:	301c      	adds	r0, #28
 8005426:	f000 fd47 	bl	8005eb8 <lis2dw12_data_rate_set>
 800542a:	b910      	cbnz	r0, 8005432 <LIS2DW12_DeInit+0x2e>
  pObj->acc_is_enabled = 0;
 800542c:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
 8005430:	e7ed      	b.n	800540e <LIS2DW12_DeInit+0xa>
    return LIS2DW12_ERROR;
 8005432:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005436:	bd10      	pop	{r4, pc}

08005438 <LIS2DW12_ACC_Disable>:
  if (pObj->acc_is_enabled == 0U)
 8005438:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 800543c:	b90b      	cbnz	r3, 8005442 <LIS2DW12_ACC_Disable+0xa>
    return LIS2DW12_OK;
 800543e:	4618      	mov	r0, r3
}
 8005440:	4770      	bx	lr
{
 8005442:	b510      	push	{r4, lr}
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 8005444:	2100      	movs	r1, #0
 8005446:	4604      	mov	r4, r0
 8005448:	301c      	adds	r0, #28
 800544a:	f000 fd35 	bl	8005eb8 <lis2dw12_data_rate_set>
 800544e:	b910      	cbnz	r0, 8005456 <LIS2DW12_ACC_Disable+0x1e>
  pObj->acc_is_enabled = 0;
 8005450:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
}
 8005454:	bd10      	pop	{r4, pc}
    return LIS2DW12_ERROR;
 8005456:	f04f 30ff 	mov.w	r0, #4294967295
}
 800545a:	bd10      	pop	{r4, pc}

0800545c <LIS2DW12_ACC_GetAxes>:
{
 800545c:	b530      	push	{r4, r5, lr}
 800545e:	ed2d 8b04 	vpush	{d8-d9}
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8005462:	f100 051c 	add.w	r5, r0, #28
{
 8005466:	b085      	sub	sp, #20
 8005468:	460c      	mov	r4, r1
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 800546a:	4628      	mov	r0, r5
 800546c:	f10d 0107 	add.w	r1, sp, #7
 8005470:	f000 fcba 	bl	8005de8 <lis2dw12_power_mode_get>
 8005474:	2800      	cmp	r0, #0
 8005476:	d170      	bne.n	800555a <LIS2DW12_ACC_GetAxes+0xfe>
  if (lis2dw12_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LIS2DW12_OK)
 8005478:	a902      	add	r1, sp, #8
 800547a:	4628      	mov	r0, r5
 800547c:	f000 fdee 	bl	800605c <lis2dw12_acceleration_raw_get>
 8005480:	2800      	cmp	r0, #0
 8005482:	d16a      	bne.n	800555a <LIS2DW12_ACC_GetAxes+0xfe>
  switch(mode)
 8005484:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8005488:	2a1b      	cmp	r2, #27
 800548a:	d866      	bhi.n	800555a <LIS2DW12_ACC_GetAxes+0xfe>
 800548c:	2301      	movs	r3, #1
 800548e:	4093      	lsls	r3, r2
 8005490:	f003 321e 	and.w	r2, r3, #505290270	; 0x1e1e1e1e
 8005494:	f022 2210 	bic.w	r2, r2, #268439552	; 0x10001000
 8005498:	2a00      	cmp	r2, #0
 800549a:	d03a      	beq.n	8005512 <LIS2DW12_ACC_GetAxes+0xb6>
      Value->x = (data_raw.i16bit[0] / 4);
 800549c:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
      Value->y = (data_raw.i16bit[1] / 4);
 80054a0:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
      Value->x = (data_raw.i16bit[0] / 4);
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	bfb8      	it	lt
 80054a8:	3303      	addlt	r3, #3
 80054aa:	109b      	asrs	r3, r3, #2
 80054ac:	ee09 3a10 	vmov	s18, r3
      Value->z = (data_raw.i16bit[2] / 4);
 80054b0:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
      Value->y = (data_raw.i16bit[1] / 4);
 80054b4:	2a00      	cmp	r2, #0
 80054b6:	bfb8      	it	lt
 80054b8:	3203      	addlt	r2, #3
      Value->z = (data_raw.i16bit[2] / 4);
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	bfb8      	it	lt
 80054be:	3303      	addlt	r3, #3
      Value->y = (data_raw.i16bit[1] / 4);
 80054c0:	1092      	asrs	r2, r2, #2
      Value->z = (data_raw.i16bit[2] / 4);
 80054c2:	109b      	asrs	r3, r3, #2
      Value->y = (data_raw.i16bit[1] / 4);
 80054c4:	ee08 2a90 	vmov	s17, r2
      Value->z = (data_raw.i16bit[2] / 4);
 80054c8:	ee08 3a10 	vmov	s16, r3
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &full_scale) != LIS2DW12_OK)
 80054cc:	f10d 0107 	add.w	r1, sp, #7
 80054d0:	4628      	mov	r0, r5
 80054d2:	f000 fda7 	bl	8006024 <lis2dw12_full_scale_get>
 80054d6:	2800      	cmp	r0, #0
 80054d8:	d13f      	bne.n	800555a <LIS2DW12_ACC_GetAxes+0xfe>
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 80054da:	a902      	add	r1, sp, #8
 80054dc:	4628      	mov	r0, r5
 80054de:	f000 fc83 	bl	8005de8 <lis2dw12_power_mode_get>
 80054e2:	2800      	cmp	r0, #0
 80054e4:	d139      	bne.n	800555a <LIS2DW12_ACC_GetAxes+0xfe>
  switch(mode)
 80054e6:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80054ea:	2a1b      	cmp	r2, #27
 80054ec:	d835      	bhi.n	800555a <LIS2DW12_ACC_GetAxes+0xfe>
 80054ee:	2301      	movs	r3, #1
 80054f0:	4093      	lsls	r3, r2
 80054f2:	f003 321e 	and.w	r2, r3, #505290270	; 0x1e1e1e1e
 80054f6:	f022 2210 	bic.w	r2, r2, #268439552	; 0x10001000
 80054fa:	bb32      	cbnz	r2, 800554a <LIS2DW12_ACC_GetAxes+0xee>
 80054fc:	f013 3f01 	tst.w	r3, #16843009	; 0x1010101
 8005500:	d02b      	beq.n	800555a <LIS2DW12_ACC_GetAxes+0xfe>
      switch (full_scale)
 8005502:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005506:	2b03      	cmp	r3, #3
 8005508:	d827      	bhi.n	800555a <LIS2DW12_ACC_GetAxes+0xfe>
 800550a:	e8df f003 	tbb	[pc, r3]
 800550e:	2c4a      	.short	0x2c4a
 8005510:	5653      	.short	0x5653
 8005512:	f013 3f01 	tst.w	r3, #16843009	; 0x1010101
 8005516:	d020      	beq.n	800555a <LIS2DW12_ACC_GetAxes+0xfe>
      Value->x = (data_raw.i16bit[0] / 16);
 8005518:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
      Value->y = (data_raw.i16bit[1] / 16);
 800551c:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
      Value->x = (data_raw.i16bit[0] / 16);
 8005520:	2b00      	cmp	r3, #0
 8005522:	bfb8      	it	lt
 8005524:	330f      	addlt	r3, #15
 8005526:	111b      	asrs	r3, r3, #4
 8005528:	ee09 3a10 	vmov	s18, r3
      Value->z = (data_raw.i16bit[2] / 16);
 800552c:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
      Value->y = (data_raw.i16bit[1] / 16);
 8005530:	2a00      	cmp	r2, #0
 8005532:	bfb8      	it	lt
 8005534:	320f      	addlt	r2, #15
      Value->z = (data_raw.i16bit[2] / 16);
 8005536:	2b00      	cmp	r3, #0
 8005538:	bfb8      	it	lt
 800553a:	330f      	addlt	r3, #15
      Value->y = (data_raw.i16bit[1] / 16);
 800553c:	1112      	asrs	r2, r2, #4
      Value->z = (data_raw.i16bit[2] / 16);
 800553e:	111b      	asrs	r3, r3, #4
      Value->y = (data_raw.i16bit[1] / 16);
 8005540:	ee08 2a90 	vmov	s17, r2
      Value->z = (data_raw.i16bit[2] / 16);
 8005544:	ee08 3a10 	vmov	s16, r3
 8005548:	e7c0      	b.n	80054cc <LIS2DW12_ACC_GetAxes+0x70>
      switch (full_scale)
 800554a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800554e:	2b03      	cmp	r3, #3
 8005550:	d803      	bhi.n	800555a <LIS2DW12_ACC_GetAxes+0xfe>
 8005552:	e8df f003 	tbb	[pc, r3]
 8005556:	292c      	.short	0x292c
 8005558:	0826      	.short	0x0826
    return LIS2DW12_ERROR;
 800555a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800555e:	b005      	add	sp, #20
 8005560:	ecbd 8b04 	vpop	{d8-d9}
 8005564:	bd30      	pop	{r4, r5, pc}
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_OTHER_MODES;
 8005566:	ed9f 6a16 	vldr	s12, [pc, #88]	; 80055c0 <LIS2DW12_ACC_GetAxes+0x164>
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 800556a:	eef8 6ac9 	vcvt.f32.s32	s13, s18
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 800556e:	eeb8 7ae8 	vcvt.f32.s32	s14, s17
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8005572:	eef8 7ac8 	vcvt.f32.s32	s15, s16
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8005576:	ee66 6a86 	vmul.f32	s13, s13, s12
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 800557a:	ee27 7a06 	vmul.f32	s14, s14, s12
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 800557e:	ee67 7a86 	vmul.f32	s15, s15, s12
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8005582:	eefd 6ae6 	vcvt.s32.f32	s13, s13
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8005586:	eebd 7ac7 	vcvt.s32.f32	s14, s14
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 800558a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 800558e:	edc4 6a00 	vstr	s13, [r4]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8005592:	ed84 7a01 	vstr	s14, [r4, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8005596:	edc4 7a02 	vstr	s15, [r4, #8]
}
 800559a:	b005      	add	sp, #20
 800559c:	ecbd 8b04 	vpop	{d8-d9}
 80055a0:	bd30      	pop	{r4, r5, pc}
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_OTHER_MODES;
 80055a2:	ed9f 6a08 	vldr	s12, [pc, #32]	; 80055c4 <LIS2DW12_ACC_GetAxes+0x168>
 80055a6:	e7e0      	b.n	800556a <LIS2DW12_ACC_GetAxes+0x10e>
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_OTHER_MODES;
 80055a8:	ed9f 6a07 	vldr	s12, [pc, #28]	; 80055c8 <LIS2DW12_ACC_GetAxes+0x16c>
 80055ac:	e7dd      	b.n	800556a <LIS2DW12_ACC_GetAxes+0x10e>
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_OTHER_MODES;
 80055ae:	ed9f 6a07 	vldr	s12, [pc, #28]	; 80055cc <LIS2DW12_ACC_GetAxes+0x170>
 80055b2:	e7da      	b.n	800556a <LIS2DW12_ACC_GetAxes+0x10e>
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_LOPOW1_MODE;
 80055b4:	ed9f 6a06 	vldr	s12, [pc, #24]	; 80055d0 <LIS2DW12_ACC_GetAxes+0x174>
 80055b8:	e7d7      	b.n	800556a <LIS2DW12_ACC_GetAxes+0x10e>
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_LOPOW1_MODE;
 80055ba:	ed9f 6a06 	vldr	s12, [pc, #24]	; 80055d4 <LIS2DW12_ACC_GetAxes+0x178>
 80055be:	e7d4      	b.n	800556a <LIS2DW12_ACC_GetAxes+0x10e>
 80055c0:	3ff9db23 	.word	0x3ff9db23
 80055c4:	3f79db23 	.word	0x3f79db23
 80055c8:	3ef9db23 	.word	0x3ef9db23
 80055cc:	3e79db23 	.word	0x3e79db23
 80055d0:	4079db23 	.word	0x4079db23
 80055d4:	40f9db23 	.word	0x40f9db23

080055d8 <LIS2DW12_ACC_SetOutputDataRate>:
{
 80055d8:	b538      	push	{r3, r4, r5, lr}
 80055da:	ed2d 8b02 	vpush	{d8}
 80055de:	ee08 1a10 	vmov	s16, r1
  if (pObj->acc_is_enabled == 1U)
 80055e2:	f890 1029 	ldrb.w	r1, [r0, #41]	; 0x29
 80055e6:	2901      	cmp	r1, #1
{
 80055e8:	4604      	mov	r4, r0
  if (pObj->acc_is_enabled == 1U)
 80055ea:	d047      	beq.n	800567c <LIS2DW12_ACC_SetOutputDataRate+0xa4>
                : (Odr <=   12.5f) ?   12.5f
 80055ec:	eddf 7a57 	vldr	s15, [pc, #348]	; 800574c <LIS2DW12_ACC_SetOutputDataRate+0x174>
 80055f0:	eeb4 8ae7 	vcmpe.f32	s16, s15
  pObj->acc_operating_mode = Mode;
 80055f4:	2300      	movs	r3, #0
                : (Odr <=   12.5f) ?   12.5f
 80055f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  pObj->acc_operating_mode = Mode;
 80055fa:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  pObj->acc_low_noise = Noise;
 80055fe:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
                : (Odr <=   12.5f) ?   12.5f
 8005602:	d805      	bhi.n	8005610 <LIS2DW12_ACC_SetOutputDataRate+0x38>
  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
 8005604:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
    return LIS2DW12_ACC_SetOutputDataRate_When_Disabled(pObj, Odr, Mode, Noise);
 8005608:	2000      	movs	r0, #0
}
 800560a:	ecbd 8b02 	vpop	{d8}
 800560e:	bd38      	pop	{r3, r4, r5, pc}
                : (Odr <=   25.0f) ?   25.0f
 8005610:	eef2 7a09 	vmov.f32	s15, #41	; 0x41480000  12.5
 8005614:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800561c:	d9f2      	bls.n	8005604 <LIS2DW12_ACC_SetOutputDataRate+0x2c>
                : (Odr <=   50.0f) ?   50.0f
 800561e:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
 8005622:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800562a:	d9eb      	bls.n	8005604 <LIS2DW12_ACC_SetOutputDataRate+0x2c>
                : (Odr <=  100.0f) ?  100.0f
 800562c:	eddf 7a48 	vldr	s15, [pc, #288]	; 8005750 <LIS2DW12_ACC_SetOutputDataRate+0x178>
 8005630:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005638:	d9e4      	bls.n	8005604 <LIS2DW12_ACC_SetOutputDataRate+0x2c>
                : (Odr <=  200.0f) ?  200.0f
 800563a:	eddf 7a46 	vldr	s15, [pc, #280]	; 8005754 <LIS2DW12_ACC_SetOutputDataRate+0x17c>
 800563e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005646:	d9dd      	bls.n	8005604 <LIS2DW12_ACC_SetOutputDataRate+0x2c>
                : (Odr <=  400.0f) ?  400.0f
 8005648:	eddf 7a43 	vldr	s15, [pc, #268]	; 8005758 <LIS2DW12_ACC_SetOutputDataRate+0x180>
 800564c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005654:	d9d6      	bls.n	8005604 <LIS2DW12_ACC_SetOutputDataRate+0x2c>
                : (Odr <=  800.0f) ?  800.0f
 8005656:	eddf 7a41 	vldr	s15, [pc, #260]	; 800575c <LIS2DW12_ACC_SetOutputDataRate+0x184>
 800565a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800565e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005662:	d9cf      	bls.n	8005604 <LIS2DW12_ACC_SetOutputDataRate+0x2c>
                :                    1600.0f;
 8005664:	eddf 7a3e 	vldr	s15, [pc, #248]	; 8005760 <LIS2DW12_ACC_SetOutputDataRate+0x188>
 8005668:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8005764 <LIS2DW12_ACC_SetOutputDataRate+0x18c>
 800566c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005674:	bf88      	it	hi
 8005676:	eef0 7a47 	vmovhi.f32	s15, s14
 800567a:	e7c3      	b.n	8005604 <LIS2DW12_ACC_SetOutputDataRate+0x2c>
      if(Odr < 12.5f)
 800567c:	eef2 7a09 	vmov.f32	s15, #41	; 0x41480000  12.5
 8005680:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005688:	d41a      	bmi.n	80056c0 <LIS2DW12_ACC_SetOutputDataRate+0xe8>
          : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 800568a:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800574c <LIS2DW12_ACC_SetOutputDataRate+0x174>
 800568e:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8005692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005696:	d81a      	bhi.n	80056ce <LIS2DW12_ACC_SetOutputDataRate+0xf6>
  if (lis2dw12_data_rate_set(&(pObj->Ctx), new_odr) != LIS2DW12_OK)
 8005698:	f104 051c 	add.w	r5, r4, #28
 800569c:	4628      	mov	r0, r5
 800569e:	f000 fc0b 	bl	8005eb8 <lis2dw12_data_rate_set>
 80056a2:	b988      	cbnz	r0, 80056c8 <LIS2DW12_ACC_SetOutputDataRate+0xf0>
  if (lis2dw12_power_mode_set(&(pObj->Ctx), new_power_mode) != LIS2DW12_OK)
 80056a4:	4628      	mov	r0, r5
 80056a6:	2104      	movs	r1, #4
 80056a8:	f000 fb6c 	bl	8005d84 <lis2dw12_power_mode_set>
 80056ac:	b960      	cbnz	r0, 80056c8 <LIS2DW12_ACC_SetOutputDataRate+0xf0>
  pObj->acc_odr = Odr;
 80056ae:	ed84 8a0b 	vstr	s16, [r4, #44]	; 0x2c
}
 80056b2:	ecbd 8b02 	vpop	{d8}
  pObj->acc_operating_mode = Mode;
 80056b6:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
  pObj->acc_low_noise = Noise;
 80056ba:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
}
 80056be:	bd38      	pop	{r3, r4, r5, pc}
        Odr = 12.5f;
 80056c0:	eeb0 8a67 	vmov.f32	s16, s15
          : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 80056c4:	2102      	movs	r1, #2
 80056c6:	e7e7      	b.n	8005698 <LIS2DW12_ACC_SetOutputDataRate+0xc0>
    return LIS2DW12_ERROR;
 80056c8:	f04f 30ff 	mov.w	r0, #4294967295
 80056cc:	e79d      	b.n	800560a <LIS2DW12_ACC_SetOutputDataRate+0x32>
          : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 80056ce:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80056d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056d6:	d936      	bls.n	8005746 <LIS2DW12_ACC_SetOutputDataRate+0x16e>
 80056d8:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
 80056dc:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80056e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056e4:	d925      	bls.n	8005732 <LIS2DW12_ACC_SetOutputDataRate+0x15a>
 80056e6:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8005750 <LIS2DW12_ACC_SetOutputDataRate+0x178>
 80056ea:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80056ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056f2:	d920      	bls.n	8005736 <LIS2DW12_ACC_SetOutputDataRate+0x15e>
 80056f4:	eddf 7a17 	vldr	s15, [pc, #92]	; 8005754 <LIS2DW12_ACC_SetOutputDataRate+0x17c>
 80056f8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80056fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005700:	d91b      	bls.n	800573a <LIS2DW12_ACC_SetOutputDataRate+0x162>
 8005702:	eddf 7a15 	vldr	s15, [pc, #84]	; 8005758 <LIS2DW12_ACC_SetOutputDataRate+0x180>
 8005706:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800570a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800570e:	d916      	bls.n	800573e <LIS2DW12_ACC_SetOutputDataRate+0x166>
 8005710:	eddf 7a12 	vldr	s15, [pc, #72]	; 800575c <LIS2DW12_ACC_SetOutputDataRate+0x184>
 8005714:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800571c:	d911      	bls.n	8005742 <LIS2DW12_ACC_SetOutputDataRate+0x16a>
 800571e:	eddf 7a10 	vldr	s15, [pc, #64]	; 8005760 <LIS2DW12_ACC_SetOutputDataRate+0x188>
 8005722:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800572a:	bf94      	ite	ls
 800572c:	2108      	movls	r1, #8
 800572e:	2109      	movhi	r1, #9
 8005730:	e7b2      	b.n	8005698 <LIS2DW12_ACC_SetOutputDataRate+0xc0>
 8005732:	2103      	movs	r1, #3
 8005734:	e7b0      	b.n	8005698 <LIS2DW12_ACC_SetOutputDataRate+0xc0>
 8005736:	2104      	movs	r1, #4
 8005738:	e7ae      	b.n	8005698 <LIS2DW12_ACC_SetOutputDataRate+0xc0>
 800573a:	2105      	movs	r1, #5
 800573c:	e7ac      	b.n	8005698 <LIS2DW12_ACC_SetOutputDataRate+0xc0>
 800573e:	2106      	movs	r1, #6
 8005740:	e7aa      	b.n	8005698 <LIS2DW12_ACC_SetOutputDataRate+0xc0>
 8005742:	2107      	movs	r1, #7
 8005744:	e7a8      	b.n	8005698 <LIS2DW12_ACC_SetOutputDataRate+0xc0>
 8005746:	2102      	movs	r1, #2
 8005748:	e7a6      	b.n	8005698 <LIS2DW12_ACC_SetOutputDataRate+0xc0>
 800574a:	bf00      	nop
 800574c:	3fcccccd 	.word	0x3fcccccd
 8005750:	42480000 	.word	0x42480000
 8005754:	42c80000 	.word	0x42c80000
 8005758:	43480000 	.word	0x43480000
 800575c:	43c80000 	.word	0x43c80000
 8005760:	44480000 	.word	0x44480000
 8005764:	44c80000 	.word	0x44c80000

08005768 <LIS2DW12_ACC_Enable>:
  if (pObj->acc_is_enabled == 1U)
 8005768:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 800576c:	2b01      	cmp	r3, #1
 800576e:	d010      	beq.n	8005792 <LIS2DW12_ACC_Enable+0x2a>
{
 8005770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr, pObj->acc_operating_mode, pObj->acc_low_noise) != LIS2DW12_OK)
 8005774:	f890 5030 	ldrb.w	r5, [r0, #48]	; 0x30
 8005778:	f890 6031 	ldrb.w	r6, [r0, #49]	; 0x31
  switch (Mode)
 800577c:	1e6b      	subs	r3, r5, #1
{
 800577e:	ed2d 8b02 	vpush	{d8}
  if (LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr, pObj->acc_operating_mode, pObj->acc_low_noise) != LIS2DW12_OK)
 8005782:	ed90 8a0b 	vldr	s16, [r0, #44]	; 0x2c
  switch (Mode)
 8005786:	2b03      	cmp	r3, #3
 8005788:	d862      	bhi.n	8005850 <LIS2DW12_ACC_Enable+0xe8>
 800578a:	e8df f003 	tbb	[pc, r3]
 800578e:	452f      	.short	0x452f
 8005790:	0453      	.short	0x0453
    return LIS2DW12_OK;
 8005792:	2000      	movs	r0, #0
}
 8005794:	4770      	bx	lr
      if(Odr > 200.0f)
 8005796:	eddf 7a58 	vldr	s15, [pc, #352]	; 80058f8 <LIS2DW12_ACC_Enable+0x190>
      switch (Noise)
 800579a:	2e01      	cmp	r6, #1
      if(Odr > 200.0f)
 800579c:	eeb4 8ae7 	vcmpe.f32	s16, s15
          new_power_mode = LIS2DW12_CONT_LOW_PWR_12bit; 
 80057a0:	bf0c      	ite	eq
 80057a2:	f04f 0810 	moveq.w	r8, #16
 80057a6:	f04f 0800 	movne.w	r8, #0
      if(Odr > 200.0f)
 80057aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057ae:	dd2a      	ble.n	8005806 <LIS2DW12_ACC_Enable+0x9e>
 80057b0:	eeb0 8a67 	vmov.f32	s16, s15
          : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 80057b4:	2106      	movs	r1, #6
  if (lis2dw12_data_rate_set(&(pObj->Ctx), new_odr) != LIS2DW12_OK)
 80057b6:	f100 071c 	add.w	r7, r0, #28
 80057ba:	4604      	mov	r4, r0
 80057bc:	4638      	mov	r0, r7
 80057be:	f000 fb7b 	bl	8005eb8 <lis2dw12_data_rate_set>
 80057c2:	2800      	cmp	r0, #0
 80057c4:	d155      	bne.n	8005872 <LIS2DW12_ACC_Enable+0x10a>
  if (lis2dw12_power_mode_set(&(pObj->Ctx), new_power_mode) != LIS2DW12_OK)
 80057c6:	4641      	mov	r1, r8
 80057c8:	4638      	mov	r0, r7
 80057ca:	f000 fadb 	bl	8005d84 <lis2dw12_power_mode_set>
 80057ce:	2800      	cmp	r0, #0
 80057d0:	d14f      	bne.n	8005872 <LIS2DW12_ACC_Enable+0x10a>
  pObj->acc_is_enabled = 1;
 80057d2:	2301      	movs	r3, #1
  pObj->acc_odr = Odr;
 80057d4:	ed84 8a0b 	vstr	s16, [r4, #44]	; 0x2c
  pObj->acc_operating_mode = Mode;
 80057d8:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
  pObj->acc_low_noise = Noise;
 80057dc:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
  pObj->acc_is_enabled = 1;
 80057e0:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
}
 80057e4:	ecbd 8b02 	vpop	{d8}
 80057e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(Odr > 200.0f)
 80057ec:	eddf 7a42 	vldr	s15, [pc, #264]	; 80058f8 <LIS2DW12_ACC_Enable+0x190>
      switch (Noise)
 80057f0:	2e01      	cmp	r6, #1
      if(Odr > 200.0f)
 80057f2:	eeb4 8ae7 	vcmpe.f32	s16, s15
          new_power_mode = LIS2DW12_CONT_LOW_PWR_4; 
 80057f6:	bf0c      	ite	eq
 80057f8:	f04f 0813 	moveq.w	r8, #19
 80057fc:	f04f 0803 	movne.w	r8, #3
      if(Odr > 200.0f)
 8005800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005804:	dcd4      	bgt.n	80057b0 <LIS2DW12_ACC_Enable+0x48>
          : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 8005806:	eddf 7a3d 	vldr	s15, [pc, #244]	; 80058fc <LIS2DW12_ACC_Enable+0x194>
 800580a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800580e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005812:	d831      	bhi.n	8005878 <LIS2DW12_ACC_Enable+0x110>
 8005814:	2101      	movs	r1, #1
 8005816:	e7ce      	b.n	80057b6 <LIS2DW12_ACC_Enable+0x4e>
      if(Odr > 200.0f)
 8005818:	eddf 7a37 	vldr	s15, [pc, #220]	; 80058f8 <LIS2DW12_ACC_Enable+0x190>
      switch (Noise)
 800581c:	2e01      	cmp	r6, #1
      if(Odr > 200.0f)
 800581e:	eeb4 8ae7 	vcmpe.f32	s16, s15
          new_power_mode = LIS2DW12_CONT_LOW_PWR_3; 
 8005822:	bf0c      	ite	eq
 8005824:	f04f 0812 	moveq.w	r8, #18
 8005828:	f04f 0802 	movne.w	r8, #2
      if(Odr > 200.0f)
 800582c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005830:	dcbe      	bgt.n	80057b0 <LIS2DW12_ACC_Enable+0x48>
 8005832:	e7e8      	b.n	8005806 <LIS2DW12_ACC_Enable+0x9e>
      if(Odr > 200.0f)
 8005834:	eddf 7a30 	vldr	s15, [pc, #192]	; 80058f8 <LIS2DW12_ACC_Enable+0x190>
      switch (Noise)
 8005838:	2e01      	cmp	r6, #1
      if(Odr > 200.0f)
 800583a:	eeb4 8ae7 	vcmpe.f32	s16, s15
          new_power_mode = LIS2DW12_CONT_LOW_PWR_2; 
 800583e:	bf0c      	ite	eq
 8005840:	f04f 0811 	moveq.w	r8, #17
 8005844:	f04f 0801 	movne.w	r8, #1
      if(Odr > 200.0f)
 8005848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800584c:	dcb0      	bgt.n	80057b0 <LIS2DW12_ACC_Enable+0x48>
 800584e:	e7da      	b.n	8005806 <LIS2DW12_ACC_Enable+0x9e>
      if(Odr < 12.5f)
 8005850:	eef2 7a09 	vmov.f32	s15, #41	; 0x41480000  12.5
      switch (Noise)
 8005854:	2e01      	cmp	r6, #1
      if(Odr < 12.5f)
 8005856:	eeb4 8ae7 	vcmpe.f32	s16, s15
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE; 
 800585a:	bf0c      	ite	eq
 800585c:	f04f 0814 	moveq.w	r8, #20
 8005860:	f04f 0804 	movne.w	r8, #4
      if(Odr < 12.5f)
 8005864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005868:	d5cd      	bpl.n	8005806 <LIS2DW12_ACC_Enable+0x9e>
        Odr = 12.5f;
 800586a:	eeb0 8a67 	vmov.f32	s16, s15
          : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 800586e:	2102      	movs	r1, #2
 8005870:	e7a1      	b.n	80057b6 <LIS2DW12_ACC_Enable+0x4e>
    return LIS2DW12_ERROR;
 8005872:	f04f 30ff 	mov.w	r0, #4294967295
 8005876:	e7b5      	b.n	80057e4 <LIS2DW12_ACC_Enable+0x7c>
          : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 8005878:	eef2 7a09 	vmov.f32	s15, #41	; 0x41480000  12.5
 800587c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005884:	d908      	bls.n	8005898 <LIS2DW12_ACC_Enable+0x130>
 8005886:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
 800588a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800588e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005892:	d803      	bhi.n	800589c <LIS2DW12_ACC_Enable+0x134>
 8005894:	2103      	movs	r1, #3
 8005896:	e78e      	b.n	80057b6 <LIS2DW12_ACC_Enable+0x4e>
 8005898:	2102      	movs	r1, #2
 800589a:	e78c      	b.n	80057b6 <LIS2DW12_ACC_Enable+0x4e>
 800589c:	eddf 7a18 	vldr	s15, [pc, #96]	; 8005900 <LIS2DW12_ACC_Enable+0x198>
 80058a0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80058a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058a8:	d801      	bhi.n	80058ae <LIS2DW12_ACC_Enable+0x146>
 80058aa:	2104      	movs	r1, #4
 80058ac:	e783      	b.n	80057b6 <LIS2DW12_ACC_Enable+0x4e>
 80058ae:	eddf 7a15 	vldr	s15, [pc, #84]	; 8005904 <LIS2DW12_ACC_Enable+0x19c>
 80058b2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80058b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058ba:	d801      	bhi.n	80058c0 <LIS2DW12_ACC_Enable+0x158>
 80058bc:	2105      	movs	r1, #5
 80058be:	e77a      	b.n	80057b6 <LIS2DW12_ACC_Enable+0x4e>
 80058c0:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80058f8 <LIS2DW12_ACC_Enable+0x190>
 80058c4:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80058c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058cc:	d912      	bls.n	80058f4 <LIS2DW12_ACC_Enable+0x18c>
 80058ce:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8005908 <LIS2DW12_ACC_Enable+0x1a0>
 80058d2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80058d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058da:	d909      	bls.n	80058f0 <LIS2DW12_ACC_Enable+0x188>
 80058dc:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800590c <LIS2DW12_ACC_Enable+0x1a4>
 80058e0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80058e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058e8:	bf94      	ite	ls
 80058ea:	2108      	movls	r1, #8
 80058ec:	2109      	movhi	r1, #9
 80058ee:	e762      	b.n	80057b6 <LIS2DW12_ACC_Enable+0x4e>
 80058f0:	2107      	movs	r1, #7
 80058f2:	e760      	b.n	80057b6 <LIS2DW12_ACC_Enable+0x4e>
 80058f4:	2106      	movs	r1, #6
 80058f6:	e75e      	b.n	80057b6 <LIS2DW12_ACC_Enable+0x4e>
 80058f8:	43480000 	.word	0x43480000
 80058fc:	3fcccccd 	.word	0x3fcccccd
 8005900:	42480000 	.word	0x42480000
 8005904:	42c80000 	.word	0x42c80000
 8005908:	43c80000 	.word	0x43c80000
 800590c:	44480000 	.word	0x44480000

08005910 <LIS2DW12_RegisterBusIO>:
  if (pObj == NULL)
 8005910:	2800      	cmp	r0, #0
 8005912:	d034      	beq.n	800597e <LIS2DW12_RegisterBusIO+0x6e>
{
 8005914:	b530      	push	{r4, r5, lr}
    pObj->IO.DeInit    = pIO->DeInit;
 8005916:	e9d1 3400 	ldrd	r3, r4, [r1]
    pObj->IO.BusType   = pIO->BusType;
 800591a:	688a      	ldr	r2, [r1, #8]
 800591c:	6082      	str	r2, [r0, #8]
    pObj->IO.DeInit    = pIO->DeInit;
 800591e:	e9c0 3400 	strd	r3, r4, [r0]
    pObj->IO.Address   = pIO->Address;
 8005922:	7b0a      	ldrb	r2, [r1, #12]
 8005924:	7302      	strb	r2, [r0, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8005926:	e9d1 2504 	ldrd	r2, r5, [r1, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 800592a:	698c      	ldr	r4, [r1, #24]
    pObj->Ctx.read_reg  = ReadRegWrap;
 800592c:	4915      	ldr	r1, [pc, #84]	; (8005984 <LIS2DW12_RegisterBusIO+0x74>)
    pObj->IO.WriteReg  = pIO->WriteReg;
 800592e:	6102      	str	r2, [r0, #16]
    pObj->Ctx.write_reg = WriteRegWrap;
 8005930:	4a15      	ldr	r2, [pc, #84]	; (8005988 <LIS2DW12_RegisterBusIO+0x78>)
 8005932:	61c2      	str	r2, [r0, #28]
{
 8005934:	b083      	sub	sp, #12
    pObj->IO.GetTick   = pIO->GetTick;
 8005936:	e9c0 5405 	strd	r5, r4, [r0, #20]
    pObj->Ctx.read_reg  = ReadRegWrap;
 800593a:	e9c0 1008 	strd	r1, r0, [r0, #32]
    if (pObj->IO.Init == NULL)
 800593e:	b1db      	cbz	r3, 8005978 <LIS2DW12_RegisterBusIO+0x68>
 8005940:	4604      	mov	r4, r0
    else if (pObj->IO.Init() != LIS2DW12_OK)
 8005942:	4798      	blx	r3
 8005944:	b9c0      	cbnz	r0, 8005978 <LIS2DW12_RegisterBusIO+0x68>
      if (pObj->IO.BusType == LIS2DW12_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8005946:	68a3      	ldr	r3, [r4, #8]
 8005948:	2b02      	cmp	r3, #2
 800594a:	d001      	beq.n	8005950 <LIS2DW12_RegisterBusIO+0x40>
}
 800594c:	b003      	add	sp, #12
 800594e:	bd30      	pop	{r4, r5, pc}
        if (pObj->is_initialized == 0U)
 8005950:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8005954:	2b00      	cmp	r3, #0
 8005956:	d1f9      	bne.n	800594c <LIS2DW12_RegisterBusIO+0x3c>
 8005958:	aa02      	add	r2, sp, #8
 800595a:	2305      	movs	r3, #5
 800595c:	f802 3d01 	strb.w	r3, [r2, #-1]!
  if (lis2dw12_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2DW12_OK)
 8005960:	f104 001c 	add.w	r0, r4, #28
 8005964:	2301      	movs	r3, #1
 8005966:	2121      	movs	r1, #33	; 0x21
 8005968:	f000 fa04 	bl	8005d74 <lis2dw12_write_reg>
 800596c:	3000      	adds	r0, #0
 800596e:	bf18      	it	ne
 8005970:	2001      	movne	r0, #1
 8005972:	4240      	negs	r0, r0
}
 8005974:	b003      	add	sp, #12
 8005976:	bd30      	pop	{r4, r5, pc}
    ret = LIS2DW12_ERROR;
 8005978:	f04f 30ff 	mov.w	r0, #4294967295
 800597c:	e7e6      	b.n	800594c <LIS2DW12_RegisterBusIO+0x3c>
 800597e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005982:	4770      	bx	lr
 8005984:	08005071 	.word	0x08005071
 8005988:	08005081 	.word	0x08005081

0800598c <LIS2DW12_ACC_Enable_Wake_Up_Detection>:
{
 800598c:	b530      	push	{r4, r5, lr}
  if (pObj->acc_is_enabled == 1U)
 800598e:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8005992:	2b01      	cmp	r3, #1
{
 8005994:	b083      	sub	sp, #12
 8005996:	4604      	mov	r4, r0
 8005998:	f100 051c 	add.w	r5, r0, #28
  if (pObj->acc_is_enabled == 1U)
 800599c:	d02a      	beq.n	80059f4 <LIS2DW12_ACC_Enable_Wake_Up_Detection+0x68>
  pObj->acc_operating_mode = Mode;
 800599e:	2300      	movs	r3, #0
  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
 80059a0:	4a1f      	ldr	r2, [pc, #124]	; (8005a20 <LIS2DW12_ACC_Enable_Wake_Up_Detection+0x94>)
 80059a2:	62c2      	str	r2, [r0, #44]	; 0x2c
  pObj->acc_operating_mode = Mode;
 80059a4:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  pObj->acc_low_noise = Noise;
 80059a8:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
  if (lis2dw12_full_scale_set(&(pObj->Ctx), new_fs) != LIS2DW12_OK)
 80059ac:	2100      	movs	r1, #0
 80059ae:	4628      	mov	r0, r5
 80059b0:	f000 fb1e 	bl	8005ff0 <lis2dw12_full_scale_set>
 80059b4:	bb78      	cbnz	r0, 8005a16 <LIS2DW12_ACC_Enable_Wake_Up_Detection+0x8a>
  if (lis2dw12_wkup_dur_set(&(pObj->Ctx), 0x00) != LIS2DW12_OK)
 80059b6:	4601      	mov	r1, r0
 80059b8:	4628      	mov	r0, r5
 80059ba:	f000 fbdd 	bl	8006178 <lis2dw12_wkup_dur_set>
 80059be:	bb50      	cbnz	r0, 8005a16 <LIS2DW12_ACC_Enable_Wake_Up_Detection+0x8a>
  if (lis2dw12_wkup_threshold_set(&(pObj->Ctx), 0x02) != LIS2DW12_OK)
 80059c0:	2102      	movs	r1, #2
 80059c2:	4628      	mov	r0, r5
 80059c4:	f000 fbbe 	bl	8006144 <lis2dw12_wkup_threshold_set>
 80059c8:	bb28      	cbnz	r0, 8005a16 <LIS2DW12_ACC_Enable_Wake_Up_Detection+0x8a>
  if (lis2dw12_pin_int1_route_get(&(pObj->Ctx), &val) != LIS2DW12_OK)
 80059ca:	a901      	add	r1, sp, #4
 80059cc:	4628      	mov	r0, r5
 80059ce:	f000 fbaf 	bl	8006130 <lis2dw12_pin_int1_route_get>
 80059d2:	bb00      	cbnz	r0, 8005a16 <LIS2DW12_ACC_Enable_Wake_Up_Detection+0x8a>
  val.int1_wu = PROPERTY_ENABLE;
 80059d4:	f89d 3004 	ldrb.w	r3, [sp, #4]
  if (lis2dw12_pin_int1_route_set(&(pObj->Ctx), &val) != LIS2DW12_OK)
 80059d8:	a901      	add	r1, sp, #4
  val.int1_wu = PROPERTY_ENABLE;
 80059da:	f043 0320 	orr.w	r3, r3, #32
  if (lis2dw12_pin_int1_route_set(&(pObj->Ctx), &val) != LIS2DW12_OK)
 80059de:	4628      	mov	r0, r5
  val.int1_wu = PROPERTY_ENABLE;
 80059e0:	f88d 3004 	strb.w	r3, [sp, #4]
  if (lis2dw12_pin_int1_route_set(&(pObj->Ctx), &val) != LIS2DW12_OK)
 80059e4:	f000 fb68 	bl	80060b8 <lis2dw12_pin_int1_route_set>
 80059e8:	3000      	adds	r0, #0
 80059ea:	bf18      	it	ne
 80059ec:	2001      	movne	r0, #1
 80059ee:	4240      	negs	r0, r0
}
 80059f0:	b003      	add	sp, #12
 80059f2:	bd30      	pop	{r4, r5, pc}
  if (lis2dw12_data_rate_set(&(pObj->Ctx), new_odr) != LIS2DW12_OK)
 80059f4:	2106      	movs	r1, #6
 80059f6:	4628      	mov	r0, r5
 80059f8:	f000 fa5e 	bl	8005eb8 <lis2dw12_data_rate_set>
 80059fc:	b958      	cbnz	r0, 8005a16 <LIS2DW12_ACC_Enable_Wake_Up_Detection+0x8a>
  if (lis2dw12_power_mode_set(&(pObj->Ctx), new_power_mode) != LIS2DW12_OK)
 80059fe:	2104      	movs	r1, #4
 8005a00:	4628      	mov	r0, r5
 8005a02:	f000 f9bf 	bl	8005d84 <lis2dw12_power_mode_set>
 8005a06:	b930      	cbnz	r0, 8005a16 <LIS2DW12_ACC_Enable_Wake_Up_Detection+0x8a>
  pObj->acc_odr = Odr;
 8005a08:	4b05      	ldr	r3, [pc, #20]	; (8005a20 <LIS2DW12_ACC_Enable_Wake_Up_Detection+0x94>)
  pObj->acc_operating_mode = Mode;
 8005a0a:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
  pObj->acc_low_noise = Noise;
 8005a0e:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
  pObj->acc_odr = Odr;
 8005a12:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005a14:	e7ca      	b.n	80059ac <LIS2DW12_ACC_Enable_Wake_Up_Detection+0x20>
    return LIS2DW12_ERROR;
 8005a16:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005a1a:	b003      	add	sp, #12
 8005a1c:	bd30      	pop	{r4, r5, pc}
 8005a1e:	bf00      	nop
 8005a20:	43480000 	.word	0x43480000

08005a24 <LIS2DW12_ACC_Disable_Wake_Up_Detection>:
{
 8005a24:	b530      	push	{r4, r5, lr}
  if (lis2dw12_read_reg(&(pObj->Ctx), LIS2DW12_CTRL4_INT1_PAD_CTRL, (uint8_t *)&ctrl4_int1_reg, 1) != LIS2DW12_OK)
 8005a26:	f100 041c 	add.w	r4, r0, #28
{
 8005a2a:	b085      	sub	sp, #20
  if (lis2dw12_read_reg(&(pObj->Ctx), LIS2DW12_CTRL4_INT1_PAD_CTRL, (uint8_t *)&ctrl4_int1_reg, 1) != LIS2DW12_OK)
 8005a2c:	4620      	mov	r0, r4
 8005a2e:	aa01      	add	r2, sp, #4
 8005a30:	2301      	movs	r3, #1
 8005a32:	2123      	movs	r1, #35	; 0x23
 8005a34:	f000 f996 	bl	8005d64 <lis2dw12_read_reg>
 8005a38:	2800      	cmp	r0, #0
 8005a3a:	d140      	bne.n	8005abe <LIS2DW12_ACC_Disable_Wake_Up_Detection+0x9a>
  ctrl4_int1_reg.int1_wu = PROPERTY_DISABLE;
 8005a3c:	f89d 5004 	ldrb.w	r5, [sp, #4]
  if (lis2dw12_write_reg(&(pObj->Ctx), LIS2DW12_CTRL4_INT1_PAD_CTRL, (uint8_t *)&ctrl4_int1_reg, 1) != LIS2DW12_OK)
 8005a40:	aa01      	add	r2, sp, #4
  ctrl4_int1_reg.int1_wu = PROPERTY_DISABLE;
 8005a42:	f360 1545 	bfi	r5, r0, #5, #1
  if (lis2dw12_write_reg(&(pObj->Ctx), LIS2DW12_CTRL4_INT1_PAD_CTRL, (uint8_t *)&ctrl4_int1_reg, 1) != LIS2DW12_OK)
 8005a46:	2301      	movs	r3, #1
 8005a48:	2123      	movs	r1, #35	; 0x23
 8005a4a:	4620      	mov	r0, r4
  ctrl4_int1_reg.int1_wu = PROPERTY_DISABLE;
 8005a4c:	f88d 5004 	strb.w	r5, [sp, #4]
  if (lis2dw12_write_reg(&(pObj->Ctx), LIS2DW12_CTRL4_INT1_PAD_CTRL, (uint8_t *)&ctrl4_int1_reg, 1) != LIS2DW12_OK)
 8005a50:	f000 f990 	bl	8005d74 <lis2dw12_write_reg>
 8005a54:	bb98      	cbnz	r0, 8005abe <LIS2DW12_ACC_Disable_Wake_Up_Detection+0x9a>
  if (lis2dw12_read_reg(&(pObj->Ctx), LIS2DW12_CTRL5_INT2_PAD_CTRL, (uint8_t *)&ctrl5_int2_reg, 1) != LIS2DW12_OK)
 8005a56:	2301      	movs	r3, #1
 8005a58:	aa02      	add	r2, sp, #8
 8005a5a:	2124      	movs	r1, #36	; 0x24
 8005a5c:	4620      	mov	r0, r4
 8005a5e:	f000 f981 	bl	8005d64 <lis2dw12_read_reg>
 8005a62:	bb60      	cbnz	r0, 8005abe <LIS2DW12_ACC_Disable_Wake_Up_Detection+0x9a>
  if(ctrl5_int2_reg.int2_sleep_chg == 0 && ctrl4_int1_reg.int1_wu == 0 && ctrl4_int1_reg.int1_6d == 0)
 8005a64:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8005a68:	065b      	lsls	r3, r3, #25
 8005a6a:	d404      	bmi.n	8005a76 <LIS2DW12_ACC_Disable_Wake_Up_Detection+0x52>
 8005a6c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005a70:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 8005a74:	d00e      	beq.n	8005a94 <LIS2DW12_ACC_Disable_Wake_Up_Detection+0x70>
  if (lis2dw12_wkup_threshold_set(&(pObj->Ctx), 0x00) != LIS2DW12_OK)
 8005a76:	2100      	movs	r1, #0
 8005a78:	4620      	mov	r0, r4
 8005a7a:	f000 fb63 	bl	8006144 <lis2dw12_wkup_threshold_set>
 8005a7e:	b9f0      	cbnz	r0, 8005abe <LIS2DW12_ACC_Disable_Wake_Up_Detection+0x9a>
  if (lis2dw12_wkup_dur_set(&(pObj->Ctx), 0x00) != LIS2DW12_OK)
 8005a80:	4601      	mov	r1, r0
 8005a82:	4620      	mov	r0, r4
 8005a84:	f000 fb78 	bl	8006178 <lis2dw12_wkup_dur_set>
 8005a88:	3000      	adds	r0, #0
 8005a8a:	bf18      	it	ne
 8005a8c:	2001      	movne	r0, #1
 8005a8e:	4240      	negs	r0, r0
}
 8005a90:	b005      	add	sp, #20
 8005a92:	bd30      	pop	{r4, r5, pc}
    if (lis2dw12_read_reg(&(pObj->Ctx), LIS2DW12_CTRL_REG7, (uint8_t *)&ctrl_reg7, 1) != LIS2DW12_OK)
 8005a94:	aa03      	add	r2, sp, #12
 8005a96:	2301      	movs	r3, #1
 8005a98:	213f      	movs	r1, #63	; 0x3f
 8005a9a:	4620      	mov	r0, r4
 8005a9c:	f000 f962 	bl	8005d64 <lis2dw12_read_reg>
 8005aa0:	b968      	cbnz	r0, 8005abe <LIS2DW12_ACC_Disable_Wake_Up_Detection+0x9a>
    ctrl_reg7.interrupts_enable = PROPERTY_DISABLE;
 8005aa2:	f89d 500c 	ldrb.w	r5, [sp, #12]
    if (lis2dw12_write_reg(&(pObj->Ctx), LIS2DW12_CTRL_REG7, (uint8_t *)&ctrl_reg7, 1) != LIS2DW12_OK)
 8005aa6:	aa03      	add	r2, sp, #12
    ctrl_reg7.interrupts_enable = PROPERTY_DISABLE;
 8005aa8:	f360 1545 	bfi	r5, r0, #5, #1
    if (lis2dw12_write_reg(&(pObj->Ctx), LIS2DW12_CTRL_REG7, (uint8_t *)&ctrl_reg7, 1) != LIS2DW12_OK)
 8005aac:	2301      	movs	r3, #1
 8005aae:	213f      	movs	r1, #63	; 0x3f
 8005ab0:	4620      	mov	r0, r4
    ctrl_reg7.interrupts_enable = PROPERTY_DISABLE;
 8005ab2:	f88d 500c 	strb.w	r5, [sp, #12]
    if (lis2dw12_write_reg(&(pObj->Ctx), LIS2DW12_CTRL_REG7, (uint8_t *)&ctrl_reg7, 1) != LIS2DW12_OK)
 8005ab6:	f000 f95d 	bl	8005d74 <lis2dw12_write_reg>
 8005aba:	2800      	cmp	r0, #0
 8005abc:	d0db      	beq.n	8005a76 <LIS2DW12_ACC_Disable_Wake_Up_Detection+0x52>
    return LIS2DW12_ERROR;
 8005abe:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005ac2:	b005      	add	sp, #20
 8005ac4:	bd30      	pop	{r4, r5, pc}
 8005ac6:	bf00      	nop

08005ac8 <LIS2DW12_ACC_Enable_6D_Orientation>:
{
 8005ac8:	b530      	push	{r4, r5, lr}
  if (pObj->acc_is_enabled == 1U)
 8005aca:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8005ace:	2b01      	cmp	r3, #1
{
 8005ad0:	b083      	sub	sp, #12
 8005ad2:	4604      	mov	r4, r0
 8005ad4:	f100 051c 	add.w	r5, r0, #28
  if (pObj->acc_is_enabled == 1U)
 8005ad8:	d025      	beq.n	8005b26 <LIS2DW12_ACC_Enable_6D_Orientation+0x5e>
  pObj->acc_operating_mode = Mode;
 8005ada:	2300      	movs	r3, #0
  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
 8005adc:	4a1c      	ldr	r2, [pc, #112]	; (8005b50 <LIS2DW12_ACC_Enable_6D_Orientation+0x88>)
 8005ade:	62c2      	str	r2, [r0, #44]	; 0x2c
  pObj->acc_operating_mode = Mode;
 8005ae0:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  pObj->acc_low_noise = Noise;
 8005ae4:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
  if (lis2dw12_full_scale_set(&(pObj->Ctx), new_fs) != LIS2DW12_OK)
 8005ae8:	2100      	movs	r1, #0
 8005aea:	4628      	mov	r0, r5
 8005aec:	f000 fa80 	bl	8005ff0 <lis2dw12_full_scale_set>
 8005af0:	bb50      	cbnz	r0, 8005b48 <LIS2DW12_ACC_Enable_6D_Orientation+0x80>
  if (lis2dw12_6d_threshold_set(&(pObj->Ctx), 2) != LIS2DW12_OK) /* 60 degrees */
 8005af2:	2102      	movs	r1, #2
 8005af4:	4628      	mov	r0, r5
 8005af6:	f000 fb59 	bl	80061ac <lis2dw12_6d_threshold_set>
 8005afa:	bb28      	cbnz	r0, 8005b48 <LIS2DW12_ACC_Enable_6D_Orientation+0x80>
  if (lis2dw12_pin_int1_route_get(&(pObj->Ctx), &val) != LIS2DW12_OK)
 8005afc:	a901      	add	r1, sp, #4
 8005afe:	4628      	mov	r0, r5
 8005b00:	f000 fb16 	bl	8006130 <lis2dw12_pin_int1_route_get>
 8005b04:	bb00      	cbnz	r0, 8005b48 <LIS2DW12_ACC_Enable_6D_Orientation+0x80>
  val.int1_6d = PROPERTY_ENABLE;
 8005b06:	f89d 3004 	ldrb.w	r3, [sp, #4]
  if (lis2dw12_pin_int1_route_set(&(pObj->Ctx), &val) != LIS2DW12_OK)
 8005b0a:	a901      	add	r1, sp, #4
  val.int1_6d = PROPERTY_ENABLE;
 8005b0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  if (lis2dw12_pin_int1_route_set(&(pObj->Ctx), &val) != LIS2DW12_OK)
 8005b10:	4628      	mov	r0, r5
  val.int1_6d = PROPERTY_ENABLE;
 8005b12:	f88d 3004 	strb.w	r3, [sp, #4]
  if (lis2dw12_pin_int1_route_set(&(pObj->Ctx), &val) != LIS2DW12_OK)
 8005b16:	f000 facf 	bl	80060b8 <lis2dw12_pin_int1_route_set>
 8005b1a:	3000      	adds	r0, #0
 8005b1c:	bf18      	it	ne
 8005b1e:	2001      	movne	r0, #1
 8005b20:	4240      	negs	r0, r0
}
 8005b22:	b003      	add	sp, #12
 8005b24:	bd30      	pop	{r4, r5, pc}
  if (lis2dw12_data_rate_set(&(pObj->Ctx), new_odr) != LIS2DW12_OK)
 8005b26:	2106      	movs	r1, #6
 8005b28:	4628      	mov	r0, r5
 8005b2a:	f000 f9c5 	bl	8005eb8 <lis2dw12_data_rate_set>
 8005b2e:	b958      	cbnz	r0, 8005b48 <LIS2DW12_ACC_Enable_6D_Orientation+0x80>
  if (lis2dw12_power_mode_set(&(pObj->Ctx), new_power_mode) != LIS2DW12_OK)
 8005b30:	2104      	movs	r1, #4
 8005b32:	4628      	mov	r0, r5
 8005b34:	f000 f926 	bl	8005d84 <lis2dw12_power_mode_set>
 8005b38:	b930      	cbnz	r0, 8005b48 <LIS2DW12_ACC_Enable_6D_Orientation+0x80>
  pObj->acc_odr = Odr;
 8005b3a:	4b05      	ldr	r3, [pc, #20]	; (8005b50 <LIS2DW12_ACC_Enable_6D_Orientation+0x88>)
  pObj->acc_operating_mode = Mode;
 8005b3c:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
  pObj->acc_low_noise = Noise;
 8005b40:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
  pObj->acc_odr = Odr;
 8005b44:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005b46:	e7cf      	b.n	8005ae8 <LIS2DW12_ACC_Enable_6D_Orientation+0x20>
    return LIS2DW12_ERROR;
 8005b48:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005b4c:	b003      	add	sp, #12
 8005b4e:	bd30      	pop	{r4, r5, pc}
 8005b50:	43480000 	.word	0x43480000

08005b54 <LIS2DW12_ACC_Disable_6D_Orientation>:
{
 8005b54:	b530      	push	{r4, r5, lr}
  if (lis2dw12_read_reg(&(pObj->Ctx), LIS2DW12_CTRL4_INT1_PAD_CTRL, (uint8_t *)&ctrl4_int1_reg, 1) != LIS2DW12_OK)
 8005b56:	f100 041c 	add.w	r4, r0, #28
{
 8005b5a:	b085      	sub	sp, #20
  if (lis2dw12_read_reg(&(pObj->Ctx), LIS2DW12_CTRL4_INT1_PAD_CTRL, (uint8_t *)&ctrl4_int1_reg, 1) != LIS2DW12_OK)
 8005b5c:	4620      	mov	r0, r4
 8005b5e:	aa01      	add	r2, sp, #4
 8005b60:	2301      	movs	r3, #1
 8005b62:	2123      	movs	r1, #35	; 0x23
 8005b64:	f000 f8fe 	bl	8005d64 <lis2dw12_read_reg>
 8005b68:	2800      	cmp	r0, #0
 8005b6a:	d13b      	bne.n	8005be4 <LIS2DW12_ACC_Disable_6D_Orientation+0x90>
  ctrl4_int1_reg.int1_6d = PROPERTY_DISABLE;
 8005b6c:	f89d 5004 	ldrb.w	r5, [sp, #4]
  if (lis2dw12_write_reg(&(pObj->Ctx), LIS2DW12_CTRL4_INT1_PAD_CTRL, (uint8_t *)&ctrl4_int1_reg, 1) != LIS2DW12_OK)
 8005b70:	aa01      	add	r2, sp, #4
  ctrl4_int1_reg.int1_6d = PROPERTY_DISABLE;
 8005b72:	f360 15c7 	bfi	r5, r0, #7, #1
  if (lis2dw12_write_reg(&(pObj->Ctx), LIS2DW12_CTRL4_INT1_PAD_CTRL, (uint8_t *)&ctrl4_int1_reg, 1) != LIS2DW12_OK)
 8005b76:	2301      	movs	r3, #1
 8005b78:	2123      	movs	r1, #35	; 0x23
 8005b7a:	4620      	mov	r0, r4
  ctrl4_int1_reg.int1_6d = PROPERTY_DISABLE;
 8005b7c:	f88d 5004 	strb.w	r5, [sp, #4]
  if (lis2dw12_write_reg(&(pObj->Ctx), LIS2DW12_CTRL4_INT1_PAD_CTRL, (uint8_t *)&ctrl4_int1_reg, 1) != LIS2DW12_OK)
 8005b80:	f000 f8f8 	bl	8005d74 <lis2dw12_write_reg>
 8005b84:	bb70      	cbnz	r0, 8005be4 <LIS2DW12_ACC_Disable_6D_Orientation+0x90>
  if (lis2dw12_read_reg(&(pObj->Ctx), LIS2DW12_CTRL5_INT2_PAD_CTRL, (uint8_t *)&ctrl5_int2_reg, 1) != LIS2DW12_OK)
 8005b86:	2301      	movs	r3, #1
 8005b88:	aa02      	add	r2, sp, #8
 8005b8a:	2124      	movs	r1, #36	; 0x24
 8005b8c:	4620      	mov	r0, r4
 8005b8e:	f000 f8e9 	bl	8005d64 <lis2dw12_read_reg>
 8005b92:	bb38      	cbnz	r0, 8005be4 <LIS2DW12_ACC_Disable_6D_Orientation+0x90>
  if(ctrl5_int2_reg.int2_sleep_chg == 0 && ctrl4_int1_reg.int1_wu == 0 && ctrl4_int1_reg.int1_6d == 0)
 8005b94:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8005b98:	065b      	lsls	r3, r3, #25
 8005b9a:	d404      	bmi.n	8005ba6 <LIS2DW12_ACC_Disable_6D_Orientation+0x52>
 8005b9c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005ba0:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 8005ba4:	d009      	beq.n	8005bba <LIS2DW12_ACC_Disable_6D_Orientation+0x66>
  if (lis2dw12_6d_threshold_set(&(pObj->Ctx), 0) != LIS2DW12_OK)
 8005ba6:	4620      	mov	r0, r4
 8005ba8:	2100      	movs	r1, #0
 8005baa:	f000 faff 	bl	80061ac <lis2dw12_6d_threshold_set>
 8005bae:	3000      	adds	r0, #0
 8005bb0:	bf18      	it	ne
 8005bb2:	2001      	movne	r0, #1
 8005bb4:	4240      	negs	r0, r0
}
 8005bb6:	b005      	add	sp, #20
 8005bb8:	bd30      	pop	{r4, r5, pc}
    if (lis2dw12_read_reg(&(pObj->Ctx), LIS2DW12_CTRL_REG7, (uint8_t *)&ctrl_reg7, 1) != LIS2DW12_OK)
 8005bba:	aa03      	add	r2, sp, #12
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	213f      	movs	r1, #63	; 0x3f
 8005bc0:	4620      	mov	r0, r4
 8005bc2:	f000 f8cf 	bl	8005d64 <lis2dw12_read_reg>
 8005bc6:	b968      	cbnz	r0, 8005be4 <LIS2DW12_ACC_Disable_6D_Orientation+0x90>
    ctrl_reg7.interrupts_enable = PROPERTY_DISABLE;
 8005bc8:	f89d 500c 	ldrb.w	r5, [sp, #12]
    if (lis2dw12_write_reg(&(pObj->Ctx), LIS2DW12_CTRL_REG7, (uint8_t *)&ctrl_reg7, 1) != LIS2DW12_OK)
 8005bcc:	aa03      	add	r2, sp, #12
    ctrl_reg7.interrupts_enable = PROPERTY_DISABLE;
 8005bce:	f360 1545 	bfi	r5, r0, #5, #1
    if (lis2dw12_write_reg(&(pObj->Ctx), LIS2DW12_CTRL_REG7, (uint8_t *)&ctrl_reg7, 1) != LIS2DW12_OK)
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	213f      	movs	r1, #63	; 0x3f
 8005bd6:	4620      	mov	r0, r4
    ctrl_reg7.interrupts_enable = PROPERTY_DISABLE;
 8005bd8:	f88d 500c 	strb.w	r5, [sp, #12]
    if (lis2dw12_write_reg(&(pObj->Ctx), LIS2DW12_CTRL_REG7, (uint8_t *)&ctrl_reg7, 1) != LIS2DW12_OK)
 8005bdc:	f000 f8ca 	bl	8005d74 <lis2dw12_write_reg>
 8005be0:	2800      	cmp	r0, #0
 8005be2:	d0e0      	beq.n	8005ba6 <LIS2DW12_ACC_Disable_6D_Orientation+0x52>
    return LIS2DW12_ERROR;
 8005be4:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005be8:	b005      	add	sp, #20
 8005bea:	bd30      	pop	{r4, r5, pc}

08005bec <LIS2DW12_ACC_Get_6D_Orientation_XL>:
{
 8005bec:	b510      	push	{r4, lr}
 8005bee:	b082      	sub	sp, #8
 8005bf0:	460c      	mov	r4, r1
  if (lis2dw12_read_reg(&(pObj->Ctx), LIS2DW12_SIXD_SRC, (uint8_t *)&data, 1) != LIS2DW12_OK)
 8005bf2:	301c      	adds	r0, #28
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	aa01      	add	r2, sp, #4
 8005bf8:	213a      	movs	r1, #58	; 0x3a
 8005bfa:	f000 f8b3 	bl	8005d64 <lis2dw12_read_reg>
 8005bfe:	b930      	cbnz	r0, 8005c0e <LIS2DW12_ACC_Get_6D_Orientation_XL+0x22>
  *XLow = data.xl;
 8005c00:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005c04:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005c08:	7023      	strb	r3, [r4, #0]
}
 8005c0a:	b002      	add	sp, #8
 8005c0c:	bd10      	pop	{r4, pc}
    return LIS2DW12_ERROR;
 8005c0e:	f04f 30ff 	mov.w	r0, #4294967295
 8005c12:	e7fa      	b.n	8005c0a <LIS2DW12_ACC_Get_6D_Orientation_XL+0x1e>

08005c14 <LIS2DW12_ACC_Get_6D_Orientation_XH>:
{
 8005c14:	b510      	push	{r4, lr}
 8005c16:	b082      	sub	sp, #8
 8005c18:	460c      	mov	r4, r1
  if (lis2dw12_read_reg(&(pObj->Ctx), LIS2DW12_SIXD_SRC, (uint8_t *)&data, 1) != LIS2DW12_OK)
 8005c1a:	301c      	adds	r0, #28
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	aa01      	add	r2, sp, #4
 8005c20:	213a      	movs	r1, #58	; 0x3a
 8005c22:	f000 f89f 	bl	8005d64 <lis2dw12_read_reg>
 8005c26:	b930      	cbnz	r0, 8005c36 <LIS2DW12_ACC_Get_6D_Orientation_XH+0x22>
  *XHigh = data.xh;
 8005c28:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005c2c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005c30:	7023      	strb	r3, [r4, #0]
}
 8005c32:	b002      	add	sp, #8
 8005c34:	bd10      	pop	{r4, pc}
    return LIS2DW12_ERROR;
 8005c36:	f04f 30ff 	mov.w	r0, #4294967295
 8005c3a:	e7fa      	b.n	8005c32 <LIS2DW12_ACC_Get_6D_Orientation_XH+0x1e>

08005c3c <LIS2DW12_ACC_Get_6D_Orientation_YL>:
{
 8005c3c:	b510      	push	{r4, lr}
 8005c3e:	b082      	sub	sp, #8
 8005c40:	460c      	mov	r4, r1
  if (lis2dw12_read_reg(&(pObj->Ctx), LIS2DW12_SIXD_SRC, (uint8_t *)&data, 1) != LIS2DW12_OK)
 8005c42:	301c      	adds	r0, #28
 8005c44:	2301      	movs	r3, #1
 8005c46:	aa01      	add	r2, sp, #4
 8005c48:	213a      	movs	r1, #58	; 0x3a
 8005c4a:	f000 f88b 	bl	8005d64 <lis2dw12_read_reg>
 8005c4e:	b930      	cbnz	r0, 8005c5e <LIS2DW12_ACC_Get_6D_Orientation_YL+0x22>
  *YLow = data.yl;
 8005c50:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005c54:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005c58:	7023      	strb	r3, [r4, #0]
}
 8005c5a:	b002      	add	sp, #8
 8005c5c:	bd10      	pop	{r4, pc}
    return LIS2DW12_ERROR;
 8005c5e:	f04f 30ff 	mov.w	r0, #4294967295
 8005c62:	e7fa      	b.n	8005c5a <LIS2DW12_ACC_Get_6D_Orientation_YL+0x1e>

08005c64 <LIS2DW12_ACC_Get_6D_Orientation_YH>:
{
 8005c64:	b510      	push	{r4, lr}
 8005c66:	b082      	sub	sp, #8
 8005c68:	460c      	mov	r4, r1
  if (lis2dw12_read_reg(&(pObj->Ctx), LIS2DW12_SIXD_SRC, (uint8_t *)&data, 1) != LIS2DW12_OK)
 8005c6a:	301c      	adds	r0, #28
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	aa01      	add	r2, sp, #4
 8005c70:	213a      	movs	r1, #58	; 0x3a
 8005c72:	f000 f877 	bl	8005d64 <lis2dw12_read_reg>
 8005c76:	b930      	cbnz	r0, 8005c86 <LIS2DW12_ACC_Get_6D_Orientation_YH+0x22>
  *YHigh = data.yh;
 8005c78:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005c7c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005c80:	7023      	strb	r3, [r4, #0]
}
 8005c82:	b002      	add	sp, #8
 8005c84:	bd10      	pop	{r4, pc}
    return LIS2DW12_ERROR;
 8005c86:	f04f 30ff 	mov.w	r0, #4294967295
 8005c8a:	e7fa      	b.n	8005c82 <LIS2DW12_ACC_Get_6D_Orientation_YH+0x1e>

08005c8c <LIS2DW12_ACC_Get_6D_Orientation_ZL>:
{
 8005c8c:	b510      	push	{r4, lr}
 8005c8e:	b082      	sub	sp, #8
 8005c90:	460c      	mov	r4, r1
  if (lis2dw12_read_reg(&(pObj->Ctx), LIS2DW12_SIXD_SRC, (uint8_t *)&data, 1) != LIS2DW12_OK)
 8005c92:	301c      	adds	r0, #28
 8005c94:	2301      	movs	r3, #1
 8005c96:	aa01      	add	r2, sp, #4
 8005c98:	213a      	movs	r1, #58	; 0x3a
 8005c9a:	f000 f863 	bl	8005d64 <lis2dw12_read_reg>
 8005c9e:	b930      	cbnz	r0, 8005cae <LIS2DW12_ACC_Get_6D_Orientation_ZL+0x22>
  *ZLow = data.zl;
 8005ca0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005ca4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005ca8:	7023      	strb	r3, [r4, #0]
}
 8005caa:	b002      	add	sp, #8
 8005cac:	bd10      	pop	{r4, pc}
    return LIS2DW12_ERROR;
 8005cae:	f04f 30ff 	mov.w	r0, #4294967295
 8005cb2:	e7fa      	b.n	8005caa <LIS2DW12_ACC_Get_6D_Orientation_ZL+0x1e>

08005cb4 <LIS2DW12_ACC_Get_6D_Orientation_ZH>:
{
 8005cb4:	b510      	push	{r4, lr}
 8005cb6:	b082      	sub	sp, #8
 8005cb8:	460c      	mov	r4, r1
  if (lis2dw12_read_reg(&(pObj->Ctx), LIS2DW12_SIXD_SRC, (uint8_t *)&data, 1) != LIS2DW12_OK)
 8005cba:	301c      	adds	r0, #28
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	aa01      	add	r2, sp, #4
 8005cc0:	213a      	movs	r1, #58	; 0x3a
 8005cc2:	f000 f84f 	bl	8005d64 <lis2dw12_read_reg>
 8005cc6:	b930      	cbnz	r0, 8005cd6 <LIS2DW12_ACC_Get_6D_Orientation_ZH+0x22>
  *ZHigh = data.zh;
 8005cc8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005ccc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005cd0:	7023      	strb	r3, [r4, #0]
}
 8005cd2:	b002      	add	sp, #8
 8005cd4:	bd10      	pop	{r4, pc}
    return LIS2DW12_ERROR;
 8005cd6:	f04f 30ff 	mov.w	r0, #4294967295
 8005cda:	e7fa      	b.n	8005cd2 <LIS2DW12_ACC_Get_6D_Orientation_ZH+0x1e>

08005cdc <LIS2DW12_ACC_Get_Event_Status>:
{
 8005cdc:	b530      	push	{r4, r5, lr}
  (void)memset((void *)Status, 0x0, sizeof(LIS2DW12_Event_Status_t));
 8005cde:	2300      	movs	r3, #0
{
 8005ce0:	b085      	sub	sp, #20
  if (lis2dw12_read_reg(&(pObj->Ctx), LIS2DW12_STATUS, (uint8_t *)&status_reg, 1) != LIS2DW12_OK)
 8005ce2:	f100 041c 	add.w	r4, r0, #28
  (void)memset((void *)Status, 0x0, sizeof(LIS2DW12_Event_Status_t));
 8005ce6:	600b      	str	r3, [r1, #0]
{
 8005ce8:	460d      	mov	r5, r1
  if (lis2dw12_read_reg(&(pObj->Ctx), LIS2DW12_STATUS, (uint8_t *)&status_reg, 1) != LIS2DW12_OK)
 8005cea:	4620      	mov	r0, r4
 8005cec:	2301      	movs	r3, #1
 8005cee:	aa01      	add	r2, sp, #4
 8005cf0:	2127      	movs	r1, #39	; 0x27
 8005cf2:	f000 f837 	bl	8005d64 <lis2dw12_read_reg>
 8005cf6:	bb90      	cbnz	r0, 8005d5e <LIS2DW12_ACC_Get_Event_Status+0x82>
  if (lis2dw12_read_reg(&(pObj->Ctx), LIS2DW12_CTRL4_INT1_PAD_CTRL, (uint8_t *)&ctrl4_int1_reg, 1) != LIS2DW12_OK)
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	aa02      	add	r2, sp, #8
 8005cfc:	2123      	movs	r1, #35	; 0x23
 8005cfe:	4620      	mov	r0, r4
 8005d00:	f000 f830 	bl	8005d64 <lis2dw12_read_reg>
 8005d04:	bb58      	cbnz	r0, 8005d5e <LIS2DW12_ACC_Get_Event_Status+0x82>
  if (lis2dw12_read_reg(&(pObj->Ctx), LIS2DW12_CTRL5_INT2_PAD_CTRL, (uint8_t *)&ctrl5_int2_reg, 1) != LIS2DW12_OK)
 8005d06:	4620      	mov	r0, r4
 8005d08:	2301      	movs	r3, #1
 8005d0a:	aa03      	add	r2, sp, #12
 8005d0c:	2124      	movs	r1, #36	; 0x24
 8005d0e:	f000 f829 	bl	8005d64 <lis2dw12_read_reg>
 8005d12:	bb20      	cbnz	r0, 8005d5e <LIS2DW12_ACC_Get_Event_Status+0x82>
  if (ctrl4_int1_reg.int1_wu == 1U)
 8005d14:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8005d18:	0699      	lsls	r1, r3, #26
 8005d1a:	d507      	bpl.n	8005d2c <LIS2DW12_ACC_Get_Event_Status+0x50>
    if (status_reg.wu_ia == 1U)
 8005d1c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8005d20:	0652      	lsls	r2, r2, #25
 8005d22:	d503      	bpl.n	8005d2c <LIS2DW12_ACC_Get_Event_Status+0x50>
      Status->WakeUpStatus = 1;
 8005d24:	782a      	ldrb	r2, [r5, #0]
 8005d26:	f042 0208 	orr.w	r2, r2, #8
 8005d2a:	702a      	strb	r2, [r5, #0]
  if (ctrl4_int1_reg.int1_6d == 1U)
 8005d2c:	061c      	lsls	r4, r3, #24
 8005d2e:	d40d      	bmi.n	8005d4c <LIS2DW12_ACC_Get_Event_Status+0x70>
  if (ctrl5_int2_reg.int2_sleep_chg == 1U)
 8005d30:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8005d34:	065a      	lsls	r2, r3, #25
 8005d36:	d507      	bpl.n	8005d48 <LIS2DW12_ACC_Get_Event_Status+0x6c>
    if (status_reg.sleep_state == 1U)
 8005d38:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005d3c:	069b      	lsls	r3, r3, #26
 8005d3e:	d503      	bpl.n	8005d48 <LIS2DW12_ACC_Get_Event_Status+0x6c>
      Status->SleepStatus = 1;
 8005d40:	782b      	ldrb	r3, [r5, #0]
 8005d42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d46:	702b      	strb	r3, [r5, #0]
}
 8005d48:	b005      	add	sp, #20
 8005d4a:	bd30      	pop	{r4, r5, pc}
    if (status_reg._6d_ia == 1U)
 8005d4c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005d50:	0759      	lsls	r1, r3, #29
 8005d52:	d5ed      	bpl.n	8005d30 <LIS2DW12_ACC_Get_Event_Status+0x54>
      Status->D6DOrientationStatus = 1;
 8005d54:	782b      	ldrb	r3, [r5, #0]
 8005d56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d5a:	702b      	strb	r3, [r5, #0]
 8005d5c:	e7e8      	b.n	8005d30 <LIS2DW12_ACC_Get_Event_Status+0x54>
    return LIS2DW12_ERROR;
 8005d5e:	f04f 30ff 	mov.w	r0, #4294967295
 8005d62:	e7f1      	b.n	8005d48 <LIS2DW12_ACC_Get_Event_Status+0x6c>

08005d64 <lis2dw12_read_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_read_reg(lis2dw12_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 8005d64:	b410      	push	{r4}
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005d66:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8005d6a:	46a4      	mov	ip, r4
  return ret;
}
 8005d6c:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005d70:	4760      	bx	ip
 8005d72:	bf00      	nop

08005d74 <lis2dw12_write_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_write_reg(lis2dw12_ctx_t* ctx, uint8_t reg, uint8_t* data,
                           uint16_t len)
{
 8005d74:	b410      	push	{r4}
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005d76:	6804      	ldr	r4, [r0, #0]
 8005d78:	6880      	ldr	r0, [r0, #8]
 8005d7a:	46a4      	mov	ip, r4
  return ret;
}
 8005d7c:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005d80:	4760      	bx	ip
 8005d82:	bf00      	nop

08005d84 <lis2dw12_power_mode_set>:
  *                  and low_noise in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(lis2dw12_ctx_t *ctx, lis2dw12_mode_t val)
{
 8005d84:	b570      	push	{r4, r5, r6, lr}
 8005d86:	b082      	sub	sp, #8
 8005d88:	4604      	mov	r4, r0
 8005d8a:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005d8c:	e9d0 6001 	ldrd	r6, r0, [r0, #4]
 8005d90:	466a      	mov	r2, sp
 8005d92:	2301      	movs	r3, #1
 8005d94:	2120      	movs	r1, #32
 8005d96:	47b0      	blx	r6
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1,(uint8_t*) &ctrl1, 1);
  if (ret == 0) {
 8005d98:	bb18      	cbnz	r0, 8005de2 <lis2dw12_power_mode_set+0x5e>
    ctrl1.mode = ( (uint8_t) val & 0x0CU ) >> 2;
 8005d9a:	f89d 3000 	ldrb.w	r3, [sp]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005d9e:	6826      	ldr	r6, [r4, #0]
 8005da0:	68a0      	ldr	r0, [r4, #8]
    ctrl1.mode = ( (uint8_t) val & 0x0CU ) >> 2;
 8005da2:	08aa      	lsrs	r2, r5, #2
 8005da4:	f362 0383 	bfi	r3, r2, #2, #2
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 8005da8:	f365 0301 	bfi	r3, r5, #0, #2
 8005dac:	f88d 3000 	strb.w	r3, [sp]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005db0:	466a      	mov	r2, sp
 8005db2:	2301      	movs	r3, #1
 8005db4:	2120      	movs	r1, #32
 8005db6:	47b0      	blx	r6
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1,(uint8_t*) &ctrl1, 1);
  }
  if (ret == 0) {
 8005db8:	b998      	cbnz	r0, 8005de2 <lis2dw12_power_mode_set+0x5e>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005dba:	aa01      	add	r2, sp, #4
 8005dbc:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	2125      	movs	r1, #37	; 0x25
 8005dc4:	47b0      	blx	r6
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6,(uint8_t*) &ctrl6, 1);
  }
  if (ret == 0) {
 8005dc6:	b960      	cbnz	r0, 8005de2 <lis2dw12_power_mode_set+0x5e>
    ctrl6.low_noise = ( (uint8_t) val & 0x10U ) >> 4;
 8005dc8:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005dcc:	6826      	ldr	r6, [r4, #0]
 8005dce:	68a0      	ldr	r0, [r4, #8]
    ctrl6.low_noise = ( (uint8_t) val & 0x10U ) >> 4;
 8005dd0:	092d      	lsrs	r5, r5, #4
 8005dd2:	f365 0382 	bfi	r3, r5, #2, #1
 8005dd6:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005dda:	aa01      	add	r2, sp, #4
 8005ddc:	2301      	movs	r3, #1
 8005dde:	2125      	movs	r1, #37	; 0x25
 8005de0:	47b0      	blx	r6
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6,(uint8_t*) &ctrl6, 1);
  }
  return ret;
}
 8005de2:	b002      	add	sp, #8
 8005de4:	bd70      	pop	{r4, r5, r6, pc}
 8005de6:	bf00      	nop

08005de8 <lis2dw12_power_mode_get>:
  *                  and low_noise in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_get(lis2dw12_ctx_t *ctx, lis2dw12_mode_t *val)
{
 8005de8:	b570      	push	{r4, r5, r6, lr}
 8005dea:	b082      	sub	sp, #8
 8005dec:	4604      	mov	r4, r0
 8005dee:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005df0:	e9d0 6001 	ldrd	r6, r0, [r0, #4]
 8005df4:	2301      	movs	r3, #1
 8005df6:	466a      	mov	r2, sp
 8005df8:	2120      	movs	r1, #32
 8005dfa:	47b0      	blx	r6
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1,(uint8_t*) &ctrl1, 1);
  if (ret == 0) {
 8005dfc:	bb30      	cbnz	r0, 8005e4c <lis2dw12_power_mode_get+0x64>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005dfe:	2301      	movs	r3, #1
 8005e00:	aa01      	add	r2, sp, #4
 8005e02:	2125      	movs	r1, #37	; 0x25
 8005e04:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
 8005e08:	47b0      	blx	r6
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6,(uint8_t*) &ctrl6, 1);

    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 8005e0a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005e0e:	f89d 2000 	ldrb.w	r2, [sp]
 8005e12:	f3c3 0180 	ubfx	r1, r3, #2, #1
 8005e16:	f002 030c 	and.w	r3, r2, #12
 8005e1a:	eb03 1301 	add.w	r3, r3, r1, lsl #4
            ctrl1.lp_mode)) {
 8005e1e:	f002 0203 	and.w	r2, r2, #3
    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 8005e22:	4413      	add	r3, r2
 8005e24:	2b1b      	cmp	r3, #27
 8005e26:	d80f      	bhi.n	8005e48 <lis2dw12_power_mode_get+0x60>
 8005e28:	e8df f003 	tbb	[pc, r3]
 8005e2c:	3c3f4212 	.word	0x3c3f4212
 8005e30:	0e0e0e0e 	.word	0x0e0e0e0e
 8005e34:	2d303336 	.word	0x2d303336
 8005e38:	0e0e0e0e 	.word	0x0e0e0e0e
 8005e3c:	2124272a 	.word	0x2124272a
 8005e40:	0e0e0e1e 	.word	0x0e0e0e1e
 8005e44:	3915181b 	.word	0x3915181b
        break;
      case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit;
        break;
      default:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 8005e48:	2304      	movs	r3, #4
 8005e4a:	702b      	strb	r3, [r5, #0]
        break;
    }
  }
  return ret;
}
 8005e4c:	b002      	add	sp, #8
 8005e4e:	bd70      	pop	{r4, r5, r6, pc}
        *val = LIS2DW12_CONT_LOW_PWR_12bit;
 8005e50:	2300      	movs	r3, #0
 8005e52:	702b      	strb	r3, [r5, #0]
        break;
 8005e54:	e7fa      	b.n	8005e4c <lis2dw12_power_mode_get+0x64>
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3;
 8005e56:	231a      	movs	r3, #26
 8005e58:	702b      	strb	r3, [r5, #0]
        break;
 8005e5a:	e7f7      	b.n	8005e4c <lis2dw12_power_mode_get+0x64>
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2;
 8005e5c:	2319      	movs	r3, #25
 8005e5e:	702b      	strb	r3, [r5, #0]
        break;
 8005e60:	e7f4      	b.n	8005e4c <lis2dw12_power_mode_get+0x64>
        *val = LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit;
 8005e62:	2318      	movs	r3, #24
 8005e64:	702b      	strb	r3, [r5, #0]
        break;
 8005e66:	e7f1      	b.n	8005e4c <lis2dw12_power_mode_get+0x64>
        *val = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 8005e68:	2314      	movs	r3, #20
 8005e6a:	702b      	strb	r3, [r5, #0]
        break;
 8005e6c:	e7ee      	b.n	8005e4c <lis2dw12_power_mode_get+0x64>
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 8005e6e:	2313      	movs	r3, #19
 8005e70:	702b      	strb	r3, [r5, #0]
        break;
 8005e72:	e7eb      	b.n	8005e4c <lis2dw12_power_mode_get+0x64>
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 8005e74:	2312      	movs	r3, #18
 8005e76:	702b      	strb	r3, [r5, #0]
        break;
 8005e78:	e7e8      	b.n	8005e4c <lis2dw12_power_mode_get+0x64>
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8005e7a:	2311      	movs	r3, #17
 8005e7c:	702b      	strb	r3, [r5, #0]
        break;
 8005e7e:	e7e5      	b.n	8005e4c <lis2dw12_power_mode_get+0x64>
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 8005e80:	2310      	movs	r3, #16
 8005e82:	702b      	strb	r3, [r5, #0]
        break;
 8005e84:	e7e2      	b.n	8005e4c <lis2dw12_power_mode_get+0x64>
        *val = LIS2DW12_SINGLE_LOW_PWR_4;
 8005e86:	230b      	movs	r3, #11
 8005e88:	702b      	strb	r3, [r5, #0]
        break;
 8005e8a:	e7df      	b.n	8005e4c <lis2dw12_power_mode_get+0x64>
        *val = LIS2DW12_SINGLE_LOW_PWR_3;
 8005e8c:	230a      	movs	r3, #10
 8005e8e:	702b      	strb	r3, [r5, #0]
        break;
 8005e90:	e7dc      	b.n	8005e4c <lis2dw12_power_mode_get+0x64>
        *val = LIS2DW12_SINGLE_LOW_PWR_2;
 8005e92:	2309      	movs	r3, #9
 8005e94:	702b      	strb	r3, [r5, #0]
        break;
 8005e96:	e7d9      	b.n	8005e4c <lis2dw12_power_mode_get+0x64>
        *val = LIS2DW12_SINGLE_LOW_PWR_12bit;
 8005e98:	2308      	movs	r3, #8
 8005e9a:	702b      	strb	r3, [r5, #0]
        break;
 8005e9c:	e7d6      	b.n	8005e4c <lis2dw12_power_mode_get+0x64>
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4;
 8005e9e:	231b      	movs	r3, #27
 8005ea0:	702b      	strb	r3, [r5, #0]
        break;
 8005ea2:	e7d3      	b.n	8005e4c <lis2dw12_power_mode_get+0x64>
        *val = LIS2DW12_CONT_LOW_PWR_4;
 8005ea4:	2303      	movs	r3, #3
 8005ea6:	702b      	strb	r3, [r5, #0]
        break;
 8005ea8:	e7d0      	b.n	8005e4c <lis2dw12_power_mode_get+0x64>
        *val = LIS2DW12_CONT_LOW_PWR_3;
 8005eaa:	2302      	movs	r3, #2
 8005eac:	702b      	strb	r3, [r5, #0]
        break;
 8005eae:	e7cd      	b.n	8005e4c <lis2dw12_power_mode_get+0x64>
        *val = LIS2DW12_CONT_LOW_PWR_2;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	702b      	strb	r3, [r5, #0]
        break;
 8005eb4:	e7ca      	b.n	8005e4c <lis2dw12_power_mode_get+0x64>
 8005eb6:	bf00      	nop

08005eb8 <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(lis2dw12_ctx_t *ctx, lis2dw12_odr_t val)
{
 8005eb8:	b570      	push	{r4, r5, r6, lr}
 8005eba:	b082      	sub	sp, #8
 8005ebc:	4604      	mov	r4, r0
 8005ebe:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005ec0:	e9d0 6001 	ldrd	r6, r0, [r0, #4]
 8005ec4:	466a      	mov	r2, sp
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	2120      	movs	r1, #32
 8005eca:	47b0      	blx	r6
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1,(uint8_t*) &ctrl1, 1);
  if (ret == 0) {
 8005ecc:	bb00      	cbnz	r0, 8005f10 <lis2dw12_data_rate_set+0x58>
    ctrl1.odr = (uint8_t) val;
 8005ece:	f89d 3000 	ldrb.w	r3, [sp]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005ed2:	6826      	ldr	r6, [r4, #0]
 8005ed4:	68a0      	ldr	r0, [r4, #8]
    ctrl1.odr = (uint8_t) val;
 8005ed6:	f365 1307 	bfi	r3, r5, #4, #4
 8005eda:	f88d 3000 	strb.w	r3, [sp]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005ede:	466a      	mov	r2, sp
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	2120      	movs	r1, #32
 8005ee4:	47b0      	blx	r6
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1,(uint8_t*) &ctrl1, 1);
  }
  if (ret == 0) {
 8005ee6:	b998      	cbnz	r0, 8005f10 <lis2dw12_data_rate_set+0x58>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005ee8:	aa01      	add	r2, sp, #4
 8005eea:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
 8005eee:	2301      	movs	r3, #1
 8005ef0:	2122      	movs	r1, #34	; 0x22
 8005ef2:	47b0      	blx	r6
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3,(uint8_t*) &ctrl3, 1);
  }
  if (ret == 0) {
 8005ef4:	b960      	cbnz	r0, 8005f10 <lis2dw12_data_rate_set+0x58>
    ctrl3.slp_mode = ( (uint8_t) val & 0x30U ) >> 4;
 8005ef6:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005efa:	6826      	ldr	r6, [r4, #0]
 8005efc:	68a0      	ldr	r0, [r4, #8]
    ctrl3.slp_mode = ( (uint8_t) val & 0x30U ) >> 4;
 8005efe:	092d      	lsrs	r5, r5, #4
 8005f00:	f365 0301 	bfi	r3, r5, #0, #2
 8005f04:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005f08:	aa01      	add	r2, sp, #4
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	2122      	movs	r1, #34	; 0x22
 8005f0e:	47b0      	blx	r6
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3,(uint8_t*) &ctrl3, 1);
  }
  return ret;
}
 8005f10:	b002      	add	sp, #8
 8005f12:	bd70      	pop	{r4, r5, r6, pc}

08005f14 <lis2dw12_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_get(lis2dw12_ctx_t *ctx, lis2dw12_odr_t *val)
{
 8005f14:	b570      	push	{r4, r5, r6, lr}
 8005f16:	b082      	sub	sp, #8
 8005f18:	4604      	mov	r4, r0
 8005f1a:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005f1c:	e9d0 6001 	ldrd	r6, r0, [r0, #4]
 8005f20:	2301      	movs	r3, #1
 8005f22:	466a      	mov	r2, sp
 8005f24:	2120      	movs	r1, #32
 8005f26:	47b0      	blx	r6
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1,(uint8_t*) &ctrl1, 1);
  if (ret == 0) {
 8005f28:	bb28      	cbnz	r0, 8005f76 <lis2dw12_data_rate_get+0x62>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	aa01      	add	r2, sp, #4
 8005f2e:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
 8005f32:	2122      	movs	r1, #34	; 0x22
 8005f34:	47b0      	blx	r6
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3,(uint8_t*) &ctrl3, 1);

    switch ((ctrl3.slp_mode << 4) + ctrl1.odr) {
 8005f36:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8005f3a:	f89d 3000 	ldrb.w	r3, [sp]
 8005f3e:	f002 0203 	and.w	r2, r2, #3
 8005f42:	091b      	lsrs	r3, r3, #4
 8005f44:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8005f48:	2b20      	cmp	r3, #32
 8005f4a:	d812      	bhi.n	8005f72 <lis2dw12_data_rate_get+0x5e>
 8005f4c:	e8df f003 	tbb	[pc, r3]
 8005f50:	1e1b1811 	.word	0x1e1b1811
 8005f54:	2a272421 	.word	0x2a272421
 8005f58:	1111302d 	.word	0x1111302d
 8005f5c:	11111111 	.word	0x11111111
 8005f60:	11111133 	.word	0x11111133
 8005f64:	11111111 	.word	0x11111111
 8005f68:	11111111 	.word	0x11111111
 8005f6c:	11111111 	.word	0x11111111
 8005f70:	15          	.byte	0x15
 8005f71:	00          	.byte	0x00
        break;
      case LIS2DW12_XL_SET_PIN_TRIG:
        *val = LIS2DW12_XL_SET_PIN_TRIG;
        break;
      default:
        *val = LIS2DW12_XL_ODR_OFF;
 8005f72:	2300      	movs	r3, #0
 8005f74:	702b      	strb	r3, [r5, #0]
        break;
    }
  }
  return ret;
}
 8005f76:	b002      	add	sp, #8
 8005f78:	bd70      	pop	{r4, r5, r6, pc}
        *val = LIS2DW12_XL_SET_PIN_TRIG;
 8005f7a:	2320      	movs	r3, #32
 8005f7c:	702b      	strb	r3, [r5, #0]
        break;
 8005f7e:	e7fa      	b.n	8005f76 <lis2dw12_data_rate_get+0x62>
        *val = LIS2DW12_XL_ODR_1Hz6_LP_ONLY;
 8005f80:	2301      	movs	r3, #1
 8005f82:	702b      	strb	r3, [r5, #0]
        break;
 8005f84:	e7f7      	b.n	8005f76 <lis2dw12_data_rate_get+0x62>
        *val = LIS2DW12_XL_ODR_12Hz5;
 8005f86:	2302      	movs	r3, #2
 8005f88:	702b      	strb	r3, [r5, #0]
        break;
 8005f8a:	e7f4      	b.n	8005f76 <lis2dw12_data_rate_get+0x62>
        *val = LIS2DW12_XL_ODR_25Hz;
 8005f8c:	2303      	movs	r3, #3
 8005f8e:	702b      	strb	r3, [r5, #0]
        break;
 8005f90:	e7f1      	b.n	8005f76 <lis2dw12_data_rate_get+0x62>
        *val = LIS2DW12_XL_ODR_50Hz;
 8005f92:	2304      	movs	r3, #4
 8005f94:	702b      	strb	r3, [r5, #0]
        break;
 8005f96:	e7ee      	b.n	8005f76 <lis2dw12_data_rate_get+0x62>
        *val = LIS2DW12_XL_ODR_100Hz;
 8005f98:	2305      	movs	r3, #5
 8005f9a:	702b      	strb	r3, [r5, #0]
        break;
 8005f9c:	e7eb      	b.n	8005f76 <lis2dw12_data_rate_get+0x62>
        *val = LIS2DW12_XL_ODR_200Hz;
 8005f9e:	2306      	movs	r3, #6
 8005fa0:	702b      	strb	r3, [r5, #0]
        break;
 8005fa2:	e7e8      	b.n	8005f76 <lis2dw12_data_rate_get+0x62>
        *val = LIS2DW12_XL_ODR_400Hz;
 8005fa4:	2307      	movs	r3, #7
 8005fa6:	702b      	strb	r3, [r5, #0]
        break;
 8005fa8:	e7e5      	b.n	8005f76 <lis2dw12_data_rate_get+0x62>
        *val = LIS2DW12_XL_ODR_800Hz;
 8005faa:	2308      	movs	r3, #8
 8005fac:	702b      	strb	r3, [r5, #0]
        break;
 8005fae:	e7e2      	b.n	8005f76 <lis2dw12_data_rate_get+0x62>
        *val = LIS2DW12_XL_ODR_1k6Hz;
 8005fb0:	2309      	movs	r3, #9
 8005fb2:	702b      	strb	r3, [r5, #0]
        break;
 8005fb4:	e7df      	b.n	8005f76 <lis2dw12_data_rate_get+0x62>
        *val = LIS2DW12_XL_SET_SW_TRIG;
 8005fb6:	2310      	movs	r3, #16
 8005fb8:	702b      	strb	r3, [r5, #0]
        break;
 8005fba:	e7dc      	b.n	8005f76 <lis2dw12_data_rate_get+0x62>

08005fbc <lis2dw12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_block_data_update_set(lis2dw12_ctx_t *ctx, uint8_t val)
{
 8005fbc:	b570      	push	{r4, r5, r6, lr}
 8005fbe:	b082      	sub	sp, #8
 8005fc0:	4604      	mov	r4, r0
 8005fc2:	460e      	mov	r6, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005fc4:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8005fc8:	aa01      	add	r2, sp, #4
 8005fca:	2301      	movs	r3, #1
 8005fcc:	2121      	movs	r1, #33	; 0x21
 8005fce:	47a8      	blx	r5
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2,(uint8_t*) &reg, 1);
  if (ret == 0) {
 8005fd0:	b958      	cbnz	r0, 8005fea <lis2dw12_block_data_update_set+0x2e>
    reg.bdu = val;
 8005fd2:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005fd6:	6825      	ldr	r5, [r4, #0]
 8005fd8:	68a0      	ldr	r0, [r4, #8]
    reg.bdu = val;
 8005fda:	f366 03c3 	bfi	r3, r6, #3, #1
 8005fde:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005fe2:	aa01      	add	r2, sp, #4
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	2121      	movs	r1, #33	; 0x21
 8005fe8:	47a8      	blx	r5
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2,(uint8_t*) &reg, 1);
  }
  return ret;
}
 8005fea:	b002      	add	sp, #8
 8005fec:	bd70      	pop	{r4, r5, r6, pc}
 8005fee:	bf00      	nop

08005ff0 <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(lis2dw12_ctx_t *ctx, lis2dw12_fs_t val)
{
 8005ff0:	b570      	push	{r4, r5, r6, lr}
 8005ff2:	b082      	sub	sp, #8
 8005ff4:	4604      	mov	r4, r0
 8005ff6:	460e      	mov	r6, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005ff8:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8005ffc:	aa01      	add	r2, sp, #4
 8005ffe:	2301      	movs	r3, #1
 8006000:	2125      	movs	r1, #37	; 0x25
 8006002:	47a8      	blx	r5
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6,(uint8_t*) &reg, 1);
  if (ret == 0) {
 8006004:	b958      	cbnz	r0, 800601e <lis2dw12_full_scale_set+0x2e>
    reg.fs = (uint8_t) val;
 8006006:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800600a:	6825      	ldr	r5, [r4, #0]
 800600c:	68a0      	ldr	r0, [r4, #8]
    reg.fs = (uint8_t) val;
 800600e:	f366 1305 	bfi	r3, r6, #4, #2
 8006012:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006016:	aa01      	add	r2, sp, #4
 8006018:	2301      	movs	r3, #1
 800601a:	2125      	movs	r1, #37	; 0x25
 800601c:	47a8      	blx	r5
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6,(uint8_t*) &reg, 1);
  }
  return ret;
}
 800601e:	b002      	add	sp, #8
 8006020:	bd70      	pop	{r4, r5, r6, pc}
 8006022:	bf00      	nop

08006024 <lis2dw12_full_scale_get>:
  * @param  val      Get the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_get(lis2dw12_ctx_t *ctx, lis2dw12_fs_t *val)
{
 8006024:	b530      	push	{r4, r5, lr}
 8006026:	b083      	sub	sp, #12
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006028:	2301      	movs	r3, #1
 800602a:	aa01      	add	r2, sp, #4
{
 800602c:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800602e:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8006032:	2125      	movs	r1, #37	; 0x25
 8006034:	47a0      	blx	r4
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6,(uint8_t*) &reg, 1);

  switch (reg.fs) {
 8006036:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800603a:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800603e:	b2da      	uxtb	r2, r3
 8006040:	2a02      	cmp	r2, #2
 8006042:	d002      	beq.n	800604a <lis2dw12_full_scale_get+0x26>
 8006044:	d808      	bhi.n	8006058 <lis2dw12_full_scale_get+0x34>
 8006046:	2a01      	cmp	r2, #1
 8006048:	d102      	bne.n	8006050 <lis2dw12_full_scale_get+0x2c>
      break;
    case LIS2DW12_8g:
      *val = LIS2DW12_8g;
      break;
    case LIS2DW12_16g:
      *val = LIS2DW12_16g;
 800604a:	702b      	strb	r3, [r5, #0]
    default:
      *val = LIS2DW12_2g;
      break;
  }
  return ret;
}
 800604c:	b003      	add	sp, #12
 800604e:	bd30      	pop	{r4, r5, pc}
      *val = LIS2DW12_2g;
 8006050:	2300      	movs	r3, #0
 8006052:	702b      	strb	r3, [r5, #0]
}
 8006054:	b003      	add	sp, #12
 8006056:	bd30      	pop	{r4, r5, pc}
      *val = LIS2DW12_16g;
 8006058:	2303      	movs	r3, #3
 800605a:	e7f6      	b.n	800604a <lis2dw12_full_scale_get+0x26>

0800605c <lis2dw12_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_acceleration_raw_get(lis2dw12_ctx_t *ctx, uint8_t *buff)
{
 800605c:	b410      	push	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800605e:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8006062:	460a      	mov	r2, r1
 8006064:	46a4      	mov	ip, r4
 8006066:	2306      	movs	r3, #6
 8006068:	2128      	movs	r1, #40	; 0x28
  int32_t ret;
  ret = lis2dw12_read_reg(ctx, LIS2DW12_OUT_X_L, buff, 6);
  return ret;
}
 800606a:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800606e:	4760      	bx	ip

08006070 <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(lis2dw12_ctx_t *ctx, uint8_t *buff)
{
 8006070:	b410      	push	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006072:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8006076:	460a      	mov	r2, r1
 8006078:	46a4      	mov	ip, r4
 800607a:	2301      	movs	r3, #1
 800607c:	210f      	movs	r1, #15
  int32_t ret;
  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
  return ret;
}
 800607e:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006082:	4760      	bx	ip

08006084 <lis2dw12_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_auto_increment_set(lis2dw12_ctx_t *ctx, uint8_t val)
{
 8006084:	b570      	push	{r4, r5, r6, lr}
 8006086:	b082      	sub	sp, #8
 8006088:	4604      	mov	r4, r0
 800608a:	460e      	mov	r6, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800608c:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8006090:	aa01      	add	r2, sp, #4
 8006092:	2301      	movs	r3, #1
 8006094:	2121      	movs	r1, #33	; 0x21
 8006096:	47a8      	blx	r5
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2,(uint8_t*) &reg, 1);
  if (ret == 0) {
 8006098:	b958      	cbnz	r0, 80060b2 <lis2dw12_auto_increment_set+0x2e>
    reg.if_add_inc = val;
 800609a:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800609e:	6825      	ldr	r5, [r4, #0]
 80060a0:	68a0      	ldr	r0, [r4, #8]
    reg.if_add_inc = val;
 80060a2:	f366 0382 	bfi	r3, r6, #2, #1
 80060a6:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80060aa:	aa01      	add	r2, sp, #4
 80060ac:	2301      	movs	r3, #1
 80060ae:	2121      	movs	r1, #33	; 0x21
 80060b0:	47a8      	blx	r5
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2,(uint8_t*) &reg, 1);
  }
  return ret;
}
 80060b2:	b002      	add	sp, #8
 80060b4:	bd70      	pop	{r4, r5, r6, pc}
 80060b6:	bf00      	nop

080060b8 <lis2dw12_pin_int1_route_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_pin_int1_route_set(lis2dw12_ctx_t *ctx,
                                    lis2dw12_ctrl4_int1_pad_ctrl_t *val)
{
 80060b8:	b570      	push	{r4, r5, r6, lr}
 80060ba:	b082      	sub	sp, #8
 80060bc:	4604      	mov	r4, r0
 80060be:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80060c0:	e9d0 6001 	ldrd	r6, r0, [r0, #4]
 80060c4:	2301      	movs	r3, #1
 80060c6:	466a      	mov	r2, sp
 80060c8:	2124      	movs	r1, #36	; 0x24
 80060ca:	47b0      	blx	r6
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL5_INT2_PAD_CTRL,
                          (uint8_t*)&ctrl5_int2_pad_ctrl, 1);

  if (ret == 0) {
 80060cc:	bb70      	cbnz	r0, 800612c <lis2dw12_pin_int1_route_set+0x74>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80060ce:	aa01      	add	r2, sp, #4
 80060d0:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
 80060d4:	2301      	movs	r3, #1
 80060d6:	213f      	movs	r1, #63	; 0x3f
 80060d8:	47b0      	blx	r6
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL_REG7,(uint8_t*) &reg, 1);
  }
  if (ret == 0) {
 80060da:	bb38      	cbnz	r0, 800612c <lis2dw12_pin_int1_route_set+0x74>
    if ((val->int1_tap |
         val->int1_ff |
         val->int1_wu |
         val->int1_single_tap |
         val->int1_6d |
         ctrl5_int2_pad_ctrl.int2_sleep_state |
 80060dc:	f89d 0000 	ldrb.w	r0, [sp]
    if ((val->int1_tap |
 80060e0:	782a      	ldrb	r2, [r5, #0]
 80060e2:	f89d 1004 	ldrb.w	r1, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80060e6:	6826      	ldr	r6, [r4, #0]
         ctrl5_int2_pad_ctrl.int2_sleep_chg ) != PROPERTY_DISABLE){
 80060e8:	f3c0 1380 	ubfx	r3, r0, #6, #1
         ctrl5_int2_pad_ctrl.int2_sleep_state |
 80060ec:	ea43 13d0 	orr.w	r3, r3, r0, lsr #7
    if ((val->int1_tap |
 80060f0:	f3c2 00c0 	ubfx	r0, r2, #3, #1
         ctrl5_int2_pad_ctrl.int2_sleep_state |
 80060f4:	4303      	orrs	r3, r0
         val->int1_ff |
 80060f6:	f3c2 1000 	ubfx	r0, r2, #4, #1
         ctrl5_int2_pad_ctrl.int2_sleep_state |
 80060fa:	4303      	orrs	r3, r0
         val->int1_wu |
 80060fc:	f3c2 1040 	ubfx	r0, r2, #5, #1
         ctrl5_int2_pad_ctrl.int2_sleep_state |
 8006100:	4303      	orrs	r3, r0
         val->int1_single_tap |
 8006102:	f3c2 1080 	ubfx	r0, r2, #6, #1
         ctrl5_int2_pad_ctrl.int2_sleep_state |
 8006106:	4303      	orrs	r3, r0
 8006108:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
 800610c:	f363 1145 	bfi	r1, r3, #5, #1
 8006110:	f88d 1004 	strb.w	r1, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006114:	462a      	mov	r2, r5
 8006116:	2301      	movs	r3, #1
 8006118:	2123      	movs	r1, #35	; 0x23
 800611a:	68a0      	ldr	r0, [r4, #8]
 800611c:	47b0      	blx	r6
      reg.interrupts_enable = PROPERTY_DISABLE;
    }

    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL4_INT1_PAD_CTRL,
                                (uint8_t*) val, 1);
  } if (ret == 0) {
 800611e:	b928      	cbnz	r0, 800612c <lis2dw12_pin_int1_route_set+0x74>
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006120:	aa01      	add	r2, sp, #4
 8006122:	6825      	ldr	r5, [r4, #0]
 8006124:	68a0      	ldr	r0, [r4, #8]
 8006126:	2301      	movs	r3, #1
 8006128:	213f      	movs	r1, #63	; 0x3f
 800612a:	47a8      	blx	r5
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL_REG7,(uint8_t*) &reg, 1);
  }
  return ret;
}
 800612c:	b002      	add	sp, #8
 800612e:	bd70      	pop	{r4, r5, r6, pc}

08006130 <lis2dw12_pin_int1_route_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_pin_int1_route_get(lis2dw12_ctx_t *ctx,
                                    lis2dw12_ctrl4_int1_pad_ctrl_t *val)
{
 8006130:	b410      	push	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006132:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8006136:	460a      	mov	r2, r1
 8006138:	46a4      	mov	ip, r4
 800613a:	2301      	movs	r3, #1
 800613c:	2123      	movs	r1, #35	; 0x23
  int32_t ret;
  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL4_INT1_PAD_CTRL,
                          (uint8_t*) val, 1);
  return ret;
}
 800613e:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006142:	4760      	bx	ip

08006144 <lis2dw12_wkup_threshold_set>:
  * @param  val      change the values of wk_ths in reg WAKE_UP_THS
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_wkup_threshold_set(lis2dw12_ctx_t *ctx, uint8_t val)
{
 8006144:	b570      	push	{r4, r5, r6, lr}
 8006146:	b082      	sub	sp, #8
 8006148:	4604      	mov	r4, r0
 800614a:	460e      	mov	r6, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800614c:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8006150:	aa01      	add	r2, sp, #4
 8006152:	2301      	movs	r3, #1
 8006154:	2134      	movs	r1, #52	; 0x34
 8006156:	47a8      	blx	r5
  lis2dw12_wake_up_ths_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WAKE_UP_THS,(uint8_t*) &reg, 1);
  if (ret == 0) {
 8006158:	b958      	cbnz	r0, 8006172 <lis2dw12_wkup_threshold_set+0x2e>
    reg.wk_ths = val;
 800615a:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800615e:	6825      	ldr	r5, [r4, #0]
 8006160:	68a0      	ldr	r0, [r4, #8]
    reg.wk_ths = val;
 8006162:	f366 0305 	bfi	r3, r6, #0, #6
 8006166:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800616a:	aa01      	add	r2, sp, #4
 800616c:	2301      	movs	r3, #1
 800616e:	2134      	movs	r1, #52	; 0x34
 8006170:	47a8      	blx	r5
    ret = lis2dw12_write_reg(ctx, LIS2DW12_WAKE_UP_THS,(uint8_t*) &reg, 1);
  }
  return ret;
}
 8006172:	b002      	add	sp, #8
 8006174:	bd70      	pop	{r4, r5, r6, pc}
 8006176:	bf00      	nop

08006178 <lis2dw12_wkup_dur_set>:
  * @param  val      change the values of wake_dur in reg WAKE_UP_DUR
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_wkup_dur_set(lis2dw12_ctx_t *ctx, uint8_t val)
{
 8006178:	b570      	push	{r4, r5, r6, lr}
 800617a:	b082      	sub	sp, #8
 800617c:	4604      	mov	r4, r0
 800617e:	460e      	mov	r6, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006180:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8006184:	aa01      	add	r2, sp, #4
 8006186:	2301      	movs	r3, #1
 8006188:	2135      	movs	r1, #53	; 0x35
 800618a:	47a8      	blx	r5
  lis2dw12_wake_up_dur_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WAKE_UP_DUR,(uint8_t*) &reg, 1);
  if (ret == 0) {
 800618c:	b958      	cbnz	r0, 80061a6 <lis2dw12_wkup_dur_set+0x2e>
    reg.wake_dur = val;
 800618e:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006192:	6825      	ldr	r5, [r4, #0]
 8006194:	68a0      	ldr	r0, [r4, #8]
    reg.wake_dur = val;
 8006196:	f366 1346 	bfi	r3, r6, #5, #2
 800619a:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800619e:	aa01      	add	r2, sp, #4
 80061a0:	2301      	movs	r3, #1
 80061a2:	2135      	movs	r1, #53	; 0x35
 80061a4:	47a8      	blx	r5
    ret = lis2dw12_write_reg(ctx, LIS2DW12_WAKE_UP_DUR,(uint8_t*) &reg, 1);
  }
  return ret;
}
 80061a6:	b002      	add	sp, #8
 80061a8:	bd70      	pop	{r4, r5, r6, pc}
 80061aa:	bf00      	nop

080061ac <lis2dw12_6d_threshold_set>:
  * @param  val      change the values of 6d_ths in reg TAP_THS_X
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_6d_threshold_set(lis2dw12_ctx_t *ctx, uint8_t val)
{
 80061ac:	b570      	push	{r4, r5, r6, lr}
 80061ae:	b082      	sub	sp, #8
 80061b0:	4604      	mov	r4, r0
 80061b2:	460e      	mov	r6, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80061b4:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 80061b8:	aa01      	add	r2, sp, #4
 80061ba:	2301      	movs	r3, #1
 80061bc:	2130      	movs	r1, #48	; 0x30
 80061be:	47a8      	blx	r5
  lis2dw12_tap_ths_x_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_TAP_THS_X,(uint8_t*) &reg, 1);
  if (ret == 0) {
 80061c0:	b958      	cbnz	r0, 80061da <lis2dw12_6d_threshold_set+0x2e>
    reg._6d_ths = val;
 80061c2:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80061c6:	6825      	ldr	r5, [r4, #0]
 80061c8:	68a0      	ldr	r0, [r4, #8]
    reg._6d_ths = val;
 80061ca:	f366 1346 	bfi	r3, r6, #5, #2
 80061ce:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80061d2:	aa01      	add	r2, sp, #4
 80061d4:	2301      	movs	r3, #1
 80061d6:	2130      	movs	r1, #48	; 0x30
 80061d8:	47a8      	blx	r5
    ret = lis2dw12_write_reg(ctx, LIS2DW12_TAP_THS_X,(uint8_t*) &reg, 1);
  }
  return ret;
}
 80061da:	b002      	add	sp, #8
 80061dc:	bd70      	pop	{r4, r5, r6, pc}
 80061de:	bf00      	nop

080061e0 <lis2dw12_fifo_mode_set>:
  * @param  val      change the values of fmode in reg FIFO_CTRL
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_fifo_mode_set(lis2dw12_ctx_t *ctx, lis2dw12_fmode_t val)
{
 80061e0:	b570      	push	{r4, r5, r6, lr}
 80061e2:	b082      	sub	sp, #8
 80061e4:	4604      	mov	r4, r0
 80061e6:	460e      	mov	r6, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80061e8:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 80061ec:	aa01      	add	r2, sp, #4
 80061ee:	2301      	movs	r3, #1
 80061f0:	212e      	movs	r1, #46	; 0x2e
 80061f2:	47a8      	blx	r5
  lis2dw12_fifo_ctrl_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_FIFO_CTRL,(uint8_t*) &reg, 1);
  if (ret == 0) {
 80061f4:	b958      	cbnz	r0, 800620e <lis2dw12_fifo_mode_set+0x2e>
    reg.fmode = (uint8_t) val;
 80061f6:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80061fa:	6825      	ldr	r5, [r4, #0]
 80061fc:	68a0      	ldr	r0, [r4, #8]
    reg.fmode = (uint8_t) val;
 80061fe:	f366 1347 	bfi	r3, r6, #5, #3
 8006202:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006206:	aa01      	add	r2, sp, #4
 8006208:	2301      	movs	r3, #1
 800620a:	212e      	movs	r1, #46	; 0x2e
 800620c:	47a8      	blx	r5
    ret = lis2dw12_write_reg(ctx, LIS2DW12_FIFO_CTRL,(uint8_t*) &reg, 1);
  }
  return ret;
}
 800620e:	b002      	add	sp, #8
 8006210:	bd70      	pop	{r4, r5, r6, pc}
 8006212:	bf00      	nop

08006214 <LIS2MDL_GetCapabilities>:
  Capabilities->GyroMaxFS    = 0;
  Capabilities->AccMaxFS     = 0;
  Capabilities->MagMaxFS     = 50;
  Capabilities->GyroMaxOdr   = 0.0f;
  Capabilities->AccMaxOdr    = 0.0f;
  Capabilities->MagMaxOdr    = 100.0f;
 8006214:	4a08      	ldr	r2, [pc, #32]	; (8006238 <LIS2MDL_GetCapabilities+0x24>)
 8006216:	618a      	str	r2, [r1, #24]
{
 8006218:	b410      	push	{r4}
  Capabilities->GyroMaxOdr   = 0.0f;
 800621a:	2300      	movs	r3, #0
  Capabilities->Acc          = 0;
 800621c:	f44f 3480 	mov.w	r4, #65536	; 0x10000
  Capabilities->GyroMaxFS    = 0;
 8006220:	2000      	movs	r0, #0
  Capabilities->MagMaxFS     = 50;
 8006222:	2232      	movs	r2, #50	; 0x32
  Capabilities->Acc          = 0;
 8006224:	600c      	str	r4, [r1, #0]
  Capabilities->MagMaxFS     = 50;
 8006226:	60ca      	str	r2, [r1, #12]
  Capabilities->AccMaxFS     = 0;
 8006228:	e9c1 0001 	strd	r0, r0, [r1, #4]
  Capabilities->GyroMaxOdr   = 0.0f;
 800622c:	610b      	str	r3, [r1, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 800622e:	614b      	str	r3, [r1, #20]
  return LIS2MDL_OK;
}
 8006230:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006234:	4770      	bx	lr
 8006236:	bf00      	nop
 8006238:	42c80000 	.word	0x42c80000

0800623c <LIS2MDL_MAG_GetSensitivity>:
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_GetSensitivity(LIS2MDL_Object_t *pObj, float *Sensitivity)
{
  *Sensitivity = LIS2MDL_MAG_SENSITIVITY_FS_50GAUSS;
 800623c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8006240:	600b      	str	r3, [r1, #0]

  return LIS2MDL_OK;
}
 8006242:	2000      	movs	r0, #0
 8006244:	4770      	bx	lr
 8006246:	bf00      	nop

08006248 <LIS2MDL_MAG_GetFullScale>:
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_GetFullScale(LIS2MDL_Object_t *pObj, int32_t *FullScale)
{
  *FullScale = 50;
 8006248:	2332      	movs	r3, #50	; 0x32
 800624a:	600b      	str	r3, [r1, #0]

  return LIS2MDL_OK;
}
 800624c:	2000      	movs	r0, #0
 800624e:	4770      	bx	lr

08006250 <LIS2MDL_MAG_SetFullScale>:
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_SetFullScale(LIS2MDL_Object_t *pObj, int32_t FullScale)
{
  return LIS2MDL_OK;
}
 8006250:	2000      	movs	r0, #0
 8006252:	4770      	bx	lr

08006254 <LIS2MDL_MAG_SetOutputDataRate>:
{
 8006254:	ee07 1a90 	vmov	s15, r1
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 8006258:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800625c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
 8006264:	b508      	push	{r3, lr}
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 8006266:	d908      	bls.n	800627a <LIS2MDL_MAG_SetOutputDataRate+0x26>
 8006268:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800626c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006274:	d80a      	bhi.n	800628c <LIS2MDL_MAG_SetOutputDataRate+0x38>
 8006276:	2101      	movs	r1, #1
 8006278:	e000      	b.n	800627c <LIS2MDL_MAG_SetOutputDataRate+0x28>
 800627a:	2100      	movs	r1, #0
  if (lis2mdl_data_rate_set(&(pObj->Ctx), new_odr) != LIS2MDL_OK)
 800627c:	301c      	adds	r0, #28
 800627e:	f000 f96d 	bl	800655c <lis2mdl_data_rate_set>
 8006282:	3000      	adds	r0, #0
 8006284:	bf18      	it	ne
 8006286:	2001      	movne	r0, #1
}
 8006288:	4240      	negs	r0, r0
 800628a:	bd08      	pop	{r3, pc}
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 800628c:	ed9f 7a04 	vldr	s14, [pc, #16]	; 80062a0 <LIS2MDL_MAG_SetOutputDataRate+0x4c>
 8006290:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006298:	bf94      	ite	ls
 800629a:	2102      	movls	r1, #2
 800629c:	2103      	movhi	r1, #3
 800629e:	e7ed      	b.n	800627c <LIS2MDL_MAG_SetOutputDataRate+0x28>
 80062a0:	42480000 	.word	0x42480000

080062a4 <LIS2MDL_Init>:
{
 80062a4:	b538      	push	{r3, r4, r5, lr}
  if (lis2mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2MDL_OK)
 80062a6:	f100 041c 	add.w	r4, r0, #28
{
 80062aa:	4605      	mov	r5, r0
  if (lis2mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2MDL_OK)
 80062ac:	2101      	movs	r1, #1
 80062ae:	4620      	mov	r0, r4
 80062b0:	f000 f98a 	bl	80065c8 <lis2mdl_block_data_update_set>
 80062b4:	b990      	cbnz	r0, 80062dc <LIS2MDL_Init+0x38>
  if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 80062b6:	2102      	movs	r1, #2
 80062b8:	4620      	mov	r0, r4
 80062ba:	f000 f935 	bl	8006528 <lis2mdl_operating_mode_set>
 80062be:	b968      	cbnz	r0, 80062dc <LIS2MDL_Init+0x38>
  if (lis2mdl_data_rate_set(&(pObj->Ctx), LIS2MDL_ODR_100Hz) != LIS2MDL_OK)
 80062c0:	2103      	movs	r1, #3
 80062c2:	4620      	mov	r0, r4
 80062c4:	f000 f94a 	bl	800655c <lis2mdl_data_rate_set>
 80062c8:	b940      	cbnz	r0, 80062dc <LIS2MDL_Init+0x38>
  if (lis2mdl_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LIS2MDL_OK)
 80062ca:	4601      	mov	r1, r0
 80062cc:	4620      	mov	r0, r4
 80062ce:	f000 f9a9 	bl	8006624 <lis2mdl_self_test_set>
 80062d2:	b918      	cbnz	r0, 80062dc <LIS2MDL_Init+0x38>
  pObj->is_initialized = 1;
 80062d4:	2301      	movs	r3, #1
 80062d6:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
}
 80062da:	bd38      	pop	{r3, r4, r5, pc}
    return LIS2MDL_ERROR;
 80062dc:	f04f 30ff 	mov.w	r0, #4294967295
}
 80062e0:	bd38      	pop	{r3, r4, r5, pc}
 80062e2:	bf00      	nop

080062e4 <LIS2MDL_ReadID>:
{
 80062e4:	b508      	push	{r3, lr}
  if (lis2mdl_device_id_get(&(pObj->Ctx), Id) != LIS2MDL_OK)
 80062e6:	301c      	adds	r0, #28
 80062e8:	f000 f992 	bl	8006610 <lis2mdl_device_id_get>
 80062ec:	3000      	adds	r0, #0
 80062ee:	bf18      	it	ne
 80062f0:	2001      	movne	r0, #1
}
 80062f2:	4240      	negs	r0, r0
 80062f4:	bd08      	pop	{r3, pc}
 80062f6:	bf00      	nop

080062f8 <LIS2MDL_MAG_GetOutputDataRate>:
{
 80062f8:	b510      	push	{r4, lr}
 80062fa:	b082      	sub	sp, #8
 80062fc:	460c      	mov	r4, r1
  if (lis2mdl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2MDL_OK)
 80062fe:	301c      	adds	r0, #28
 8006300:	f10d 0107 	add.w	r1, sp, #7
 8006304:	f000 f944 	bl	8006590 <lis2mdl_data_rate_get>
 8006308:	b9b8      	cbnz	r0, 800633a <LIS2MDL_MAG_GetOutputDataRate+0x42>
  switch (odr_low_level)
 800630a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800630e:	2b03      	cmp	r3, #3
 8006310:	d813      	bhi.n	800633a <LIS2MDL_MAG_GetOutputDataRate+0x42>
 8006312:	e8df f003 	tbb	[pc, r3]
 8006316:	0a06      	.short	0x0a06
 8006318:	020e      	.short	0x020e
      *Odr = 100.0f;
 800631a:	4b09      	ldr	r3, [pc, #36]	; (8006340 <LIS2MDL_MAG_GetOutputDataRate+0x48>)
 800631c:	6023      	str	r3, [r4, #0]
}
 800631e:	b002      	add	sp, #8
 8006320:	bd10      	pop	{r4, pc}
      *Odr = 10.0f;
 8006322:	4b08      	ldr	r3, [pc, #32]	; (8006344 <LIS2MDL_MAG_GetOutputDataRate+0x4c>)
 8006324:	6023      	str	r3, [r4, #0]
}
 8006326:	b002      	add	sp, #8
 8006328:	bd10      	pop	{r4, pc}
      *Odr = 20.0f;
 800632a:	4b07      	ldr	r3, [pc, #28]	; (8006348 <LIS2MDL_MAG_GetOutputDataRate+0x50>)
 800632c:	6023      	str	r3, [r4, #0]
}
 800632e:	b002      	add	sp, #8
 8006330:	bd10      	pop	{r4, pc}
      *Odr = 50.0f;
 8006332:	4b06      	ldr	r3, [pc, #24]	; (800634c <LIS2MDL_MAG_GetOutputDataRate+0x54>)
 8006334:	6023      	str	r3, [r4, #0]
}
 8006336:	b002      	add	sp, #8
 8006338:	bd10      	pop	{r4, pc}
      ret = LIS2MDL_ERROR;
 800633a:	f04f 30ff 	mov.w	r0, #4294967295
 800633e:	e7ee      	b.n	800631e <LIS2MDL_MAG_GetOutputDataRate+0x26>
 8006340:	42c80000 	.word	0x42c80000
 8006344:	41200000 	.word	0x41200000
 8006348:	41a00000 	.word	0x41a00000
 800634c:	42480000 	.word	0x42480000

08006350 <LIS2MDL_MAG_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_GetAxesRaw(LIS2MDL_Object_t *pObj, LIS2MDL_AxesRaw_t *Value)
{
 8006350:	b510      	push	{r4, lr}
 8006352:	b082      	sub	sp, #8
 8006354:	460c      	mov	r4, r1
  axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.u8bit) != LIS2MDL_OK)
 8006356:	301c      	adds	r0, #28
 8006358:	4669      	mov	r1, sp
 800635a:	f000 f94f 	bl	80065fc <lis2mdl_magnetic_raw_get>
 800635e:	b930      	cbnz	r0, 800636e <LIS2MDL_MAG_GetAxesRaw+0x1e>
  {
    return LIS2MDL_ERROR;
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8006360:	9a00      	ldr	r2, [sp, #0]
  Value->y = data_raw.i16bit[1];
  Value->z = data_raw.i16bit[2];
 8006362:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  Value->x = data_raw.i16bit[0];
 8006366:	6022      	str	r2, [r4, #0]
  Value->z = data_raw.i16bit[2];
 8006368:	80a3      	strh	r3, [r4, #4]

  return LIS2MDL_OK;
}
 800636a:	b002      	add	sp, #8
 800636c:	bd10      	pop	{r4, pc}
    return LIS2MDL_ERROR;
 800636e:	f04f 30ff 	mov.w	r0, #4294967295
 8006372:	e7fa      	b.n	800636a <LIS2MDL_MAG_GetAxesRaw+0x1a>

08006374 <LIS2MDL_MAG_GetAxes>:
 * @param  pObj the device pObj
 * @param  MagneticField pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_GetAxes(LIS2MDL_Object_t *pObj, LIS2MDL_Axes_t *MagneticField)
{
 8006374:	b510      	push	{r4, lr}
 8006376:	b082      	sub	sp, #8
 8006378:	460c      	mov	r4, r1
  axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.u8bit) != LIS2MDL_OK)
 800637a:	301c      	adds	r0, #28
 800637c:	4669      	mov	r1, sp
 800637e:	f000 f93d 	bl	80065fc <lis2mdl_magnetic_raw_get>
 8006382:	bb38      	cbnz	r0, 80063d4 <LIS2MDL_MAG_GetAxes+0x60>

  /* Get LIS2MDL actual sensitivity. */
  (void)LIS2MDL_MAG_GetSensitivity(pObj, &sensitivity);

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8006384:	f9bd 3000 	ldrsh.w	r3, [sp]
 8006388:	ee06 3a90 	vmov	s13, r3
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 800638c:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8006390:	ee07 3a10 	vmov	s14, r3
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8006394:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8006398:	ee07 3a90 	vmov	s15, r3
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 800639c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80063a0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80063a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80063a8:	eeb7 6a08 	vmov.f32	s12, #120	; 0x3fc00000  1.5
 80063ac:	ee66 6a86 	vmul.f32	s13, s13, s12
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80063b0:	ee27 7a06 	vmul.f32	s14, s14, s12
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80063b4:	ee67 7a86 	vmul.f32	s15, s15, s12
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80063b8:	eefd 6ae6 	vcvt.s32.f32	s13, s13
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80063bc:	eebd 7ac7 	vcvt.s32.f32	s14, s14
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80063c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80063c4:	edc4 6a00 	vstr	s13, [r4]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80063c8:	ed84 7a01 	vstr	s14, [r4, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80063cc:	edc4 7a02 	vstr	s15, [r4, #8]

  return LIS2MDL_OK;
}
 80063d0:	b002      	add	sp, #8
 80063d2:	bd10      	pop	{r4, pc}
    return LIS2MDL_ERROR;
 80063d4:	f04f 30ff 	mov.w	r0, #4294967295
 80063d8:	e7fa      	b.n	80063d0 <LIS2MDL_MAG_GetAxes+0x5c>
 80063da:	bf00      	nop

080063dc <ReadMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80063dc:	b430      	push	{r4, r5}
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 80063de:	6885      	ldr	r5, [r0, #8]
 80063e0:	6944      	ldr	r4, [r0, #20]
 80063e2:	7b00      	ldrb	r0, [r0, #12]
 80063e4:	b125      	cbz	r5, 80063f0 <ReadMagRegWrap+0x14>
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80063e6:	46a4      	mov	ip, r4
 80063e8:	f041 0140 	orr.w	r1, r1, #64	; 0x40
  }
}
 80063ec:	bc30      	pop	{r4, r5}
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80063ee:	4760      	bx	ip
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80063f0:	46a4      	mov	ip, r4
 80063f2:	f041 0180 	orr.w	r1, r1, #128	; 0x80
}
 80063f6:	bc30      	pop	{r4, r5}
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80063f8:	4760      	bx	ip
 80063fa:	bf00      	nop

080063fc <WriteMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80063fc:	b430      	push	{r4, r5}
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 80063fe:	6885      	ldr	r5, [r0, #8]
 8006400:	6904      	ldr	r4, [r0, #16]
 8006402:	7b00      	ldrb	r0, [r0, #12]
 8006404:	b125      	cbz	r5, 8006410 <WriteMagRegWrap+0x14>
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8006406:	46a4      	mov	ip, r4
 8006408:	f041 0140 	orr.w	r1, r1, #64	; 0x40
  }
}
 800640c:	bc30      	pop	{r4, r5}
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800640e:	4760      	bx	ip
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8006410:	46a4      	mov	ip, r4
 8006412:	f041 0180 	orr.w	r1, r1, #128	; 0x80
}
 8006416:	bc30      	pop	{r4, r5}
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8006418:	4760      	bx	ip
 800641a:	bf00      	nop

0800641c <LIS2MDL_MAG_Enable>:
  if (pObj->mag_is_enabled == 1U)
 800641c:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8006420:	2b01      	cmp	r3, #1
 8006422:	d00a      	beq.n	800643a <LIS2MDL_MAG_Enable+0x1e>
{
 8006424:	b510      	push	{r4, lr}
  if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_CONTINUOUS_MODE) != LIS2MDL_OK)
 8006426:	2100      	movs	r1, #0
 8006428:	4604      	mov	r4, r0
 800642a:	301c      	adds	r0, #28
 800642c:	f000 f87c 	bl	8006528 <lis2mdl_operating_mode_set>
 8006430:	b928      	cbnz	r0, 800643e <LIS2MDL_MAG_Enable+0x22>
  pObj->mag_is_enabled = 1;
 8006432:	2301      	movs	r3, #1
 8006434:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
}
 8006438:	bd10      	pop	{r4, pc}
    return LIS2MDL_OK;
 800643a:	2000      	movs	r0, #0
}
 800643c:	4770      	bx	lr
    return LIS2MDL_ERROR;
 800643e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006442:	bd10      	pop	{r4, pc}

08006444 <LIS2MDL_DeInit>:
{
 8006444:	b510      	push	{r4, lr}
  if (pObj->mag_is_enabled == 0U)
 8006446:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
{
 800644a:	4604      	mov	r4, r0
  if (pObj->mag_is_enabled == 0U)
 800644c:	b91b      	cbnz	r3, 8006456 <LIS2MDL_DeInit+0x12>
  pObj->is_initialized = 0;
 800644e:	2000      	movs	r0, #0
 8006450:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
}
 8006454:	bd10      	pop	{r4, pc}
  if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 8006456:	2102      	movs	r1, #2
 8006458:	301c      	adds	r0, #28
 800645a:	f000 f865 	bl	8006528 <lis2mdl_operating_mode_set>
 800645e:	b910      	cbnz	r0, 8006466 <LIS2MDL_DeInit+0x22>
  pObj->mag_is_enabled = 0;
 8006460:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
 8006464:	e7f3      	b.n	800644e <LIS2MDL_DeInit+0xa>
    return LIS2MDL_ERROR;
 8006466:	f04f 30ff 	mov.w	r0, #4294967295
}
 800646a:	bd10      	pop	{r4, pc}

0800646c <LIS2MDL_MAG_Disable>:
  if (pObj->mag_is_enabled == 0U)
 800646c:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8006470:	b90b      	cbnz	r3, 8006476 <LIS2MDL_MAG_Disable+0xa>
    return LIS2MDL_OK;
 8006472:	4618      	mov	r0, r3
}
 8006474:	4770      	bx	lr
{
 8006476:	b510      	push	{r4, lr}
  if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 8006478:	2102      	movs	r1, #2
 800647a:	4604      	mov	r4, r0
 800647c:	301c      	adds	r0, #28
 800647e:	f000 f853 	bl	8006528 <lis2mdl_operating_mode_set>
 8006482:	b910      	cbnz	r0, 800648a <LIS2MDL_MAG_Disable+0x1e>
  pObj->mag_is_enabled = 0;
 8006484:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
}
 8006488:	bd10      	pop	{r4, pc}
    return LIS2MDL_ERROR;
 800648a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800648e:	bd10      	pop	{r4, pc}

08006490 <LIS2MDL_RegisterBusIO>:
  if (pObj == NULL)
 8006490:	2800      	cmp	r0, #0
 8006492:	d039      	beq.n	8006508 <LIS2MDL_RegisterBusIO+0x78>
{
 8006494:	b530      	push	{r4, r5, lr}
    pObj->IO.DeInit    = pIO->DeInit;
 8006496:	e9d1 3400 	ldrd	r3, r4, [r1]
    pObj->IO.BusType   = pIO->BusType;
 800649a:	688a      	ldr	r2, [r1, #8]
 800649c:	6082      	str	r2, [r0, #8]
    pObj->IO.DeInit    = pIO->DeInit;
 800649e:	e9c0 3400 	strd	r3, r4, [r0]
    pObj->IO.Address   = pIO->Address;
 80064a2:	7b0a      	ldrb	r2, [r1, #12]
 80064a4:	7302      	strb	r2, [r0, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80064a6:	e9d1 2504 	ldrd	r2, r5, [r1, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 80064aa:	698c      	ldr	r4, [r1, #24]
    pObj->Ctx.read_reg  = ReadMagRegWrap;
 80064ac:	4918      	ldr	r1, [pc, #96]	; (8006510 <LIS2MDL_RegisterBusIO+0x80>)
    pObj->IO.WriteReg  = pIO->WriteReg;
 80064ae:	6102      	str	r2, [r0, #16]
    pObj->Ctx.write_reg = WriteMagRegWrap;
 80064b0:	4a18      	ldr	r2, [pc, #96]	; (8006514 <LIS2MDL_RegisterBusIO+0x84>)
 80064b2:	61c2      	str	r2, [r0, #28]
{
 80064b4:	b083      	sub	sp, #12
    pObj->IO.GetTick   = pIO->GetTick;
 80064b6:	e9c0 5405 	strd	r5, r4, [r0, #20]
    pObj->Ctx.read_reg  = ReadMagRegWrap;
 80064ba:	e9c0 1008 	strd	r1, r0, [r0, #32]
    if (pObj->IO.Init == NULL)
 80064be:	b303      	cbz	r3, 8006502 <LIS2MDL_RegisterBusIO+0x72>
 80064c0:	4604      	mov	r4, r0
    else if (pObj->IO.Init() != LIS2MDL_OK)
 80064c2:	4798      	blx	r3
 80064c4:	b9e8      	cbnz	r0, 8006502 <LIS2MDL_RegisterBusIO+0x72>
      if (pObj->IO.BusType != LIS2MDL_I2C_BUS) /* If the bus type is not I2C */
 80064c6:	68a3      	ldr	r3, [r4, #8]
 80064c8:	b16b      	cbz	r3, 80064e6 <LIS2MDL_RegisterBusIO+0x56>
        if (pObj->is_initialized == 0U)
 80064ca:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 80064ce:	b952      	cbnz	r2, 80064e6 <LIS2MDL_RegisterBusIO+0x56>
          if (pObj->IO.BusType == LIS2MDL_SPI_4WIRES_BUS) /* SPI 4-Wires */
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	f104 001c 	add.w	r0, r4, #28
 80064d6:	d008      	beq.n	80064ea <LIS2MDL_RegisterBusIO+0x5a>
            if (lis2mdl_i2c_interface_set(&(pObj->Ctx), LIS2MDL_I2C_DISABLE) != LIS2MDL_OK)
 80064d8:	2101      	movs	r1, #1
 80064da:	f000 f8bd 	bl	8006658 <lis2mdl_i2c_interface_set>
 80064de:	3000      	adds	r0, #0
 80064e0:	bf18      	it	ne
 80064e2:	2001      	movne	r0, #1
 80064e4:	4240      	negs	r0, r0
}
 80064e6:	b003      	add	sp, #12
 80064e8:	bd30      	pop	{r4, r5, pc}
 80064ea:	aa02      	add	r2, sp, #8
 80064ec:	2134      	movs	r1, #52	; 0x34
 80064ee:	f802 1d01 	strb.w	r1, [r2, #-1]!
  if (lis2mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2MDL_OK)
 80064f2:	2162      	movs	r1, #98	; 0x62
 80064f4:	f000 f810 	bl	8006518 <lis2mdl_write_reg>
 80064f8:	3000      	adds	r0, #0
 80064fa:	bf18      	it	ne
 80064fc:	2001      	movne	r0, #1
 80064fe:	4240      	negs	r0, r0
 8006500:	e7f1      	b.n	80064e6 <LIS2MDL_RegisterBusIO+0x56>
    ret = LIS2MDL_ERROR;
 8006502:	f04f 30ff 	mov.w	r0, #4294967295
 8006506:	e7ee      	b.n	80064e6 <LIS2MDL_RegisterBusIO+0x56>
 8006508:	f04f 30ff 	mov.w	r0, #4294967295
}
 800650c:	4770      	bx	lr
 800650e:	bf00      	nop
 8006510:	080063dd 	.word	0x080063dd
 8006514:	080063fd 	.word	0x080063fd

08006518 <lis2mdl_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_write_reg(lis2mdl_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 8006518:	b410      	push	{r4}
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800651a:	6804      	ldr	r4, [r0, #0]
 800651c:	6880      	ldr	r0, [r0, #8]
 800651e:	46a4      	mov	ip, r4
  return ret;
}
 8006520:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006524:	4760      	bx	ip
 8006526:	bf00      	nop

08006528 <lis2mdl_operating_mode_set>:
  * @param  val    change the values of md in reg CFG_REG_A
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(lis2mdl_ctx_t *ctx, lis2mdl_md_t val)
{
 8006528:	b570      	push	{r4, r5, r6, lr}
 800652a:	b082      	sub	sp, #8
 800652c:	4604      	mov	r4, r0
 800652e:	460e      	mov	r6, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006530:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8006534:	aa01      	add	r2, sp, #4
 8006536:	2301      	movs	r3, #1
 8006538:	2160      	movs	r1, #96	; 0x60
 800653a:	47a8      	blx	r5
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);

  if(ret == 0){
 800653c:	b958      	cbnz	r0, 8006556 <lis2mdl_operating_mode_set+0x2e>
    reg.md = (uint8_t)val;
 800653e:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006542:	6825      	ldr	r5, [r4, #0]
 8006544:	68a0      	ldr	r0, [r4, #8]
    reg.md = (uint8_t)val;
 8006546:	f366 0301 	bfi	r3, r6, #0, #2
 800654a:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800654e:	aa01      	add	r2, sp, #4
 8006550:	2301      	movs	r3, #1
 8006552:	2160      	movs	r1, #96	; 0x60
 8006554:	47a8      	blx	r5
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
  }

  return ret;
}
 8006556:	b002      	add	sp, #8
 8006558:	bd70      	pop	{r4, r5, r6, pc}
 800655a:	bf00      	nop

0800655c <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(lis2mdl_ctx_t *ctx, lis2mdl_odr_t val)
{
 800655c:	b570      	push	{r4, r5, r6, lr}
 800655e:	b082      	sub	sp, #8
 8006560:	4604      	mov	r4, r0
 8006562:	460e      	mov	r6, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006564:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8006568:	aa01      	add	r2, sp, #4
 800656a:	2301      	movs	r3, #1
 800656c:	2160      	movs	r1, #96	; 0x60
 800656e:	47a8      	blx	r5
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);

  if(ret == 0){
 8006570:	b958      	cbnz	r0, 800658a <lis2mdl_data_rate_set+0x2e>
    reg.odr = (uint8_t)val;
 8006572:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006576:	6825      	ldr	r5, [r4, #0]
 8006578:	68a0      	ldr	r0, [r4, #8]
    reg.odr = (uint8_t)val;
 800657a:	f366 0383 	bfi	r3, r6, #2, #2
 800657e:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006582:	aa01      	add	r2, sp, #4
 8006584:	2301      	movs	r3, #1
 8006586:	2160      	movs	r1, #96	; 0x60
 8006588:	47a8      	blx	r5
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
  }

  return ret;
}
 800658a:	b002      	add	sp, #8
 800658c:	bd70      	pop	{r4, r5, r6, pc}
 800658e:	bf00      	nop

08006590 <lis2mdl_data_rate_get>:
  * @param  val   Get the values of odr in reg CFG_REG_A.(ptr)
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_get(lis2mdl_ctx_t *ctx, lis2mdl_odr_t *val)
{
 8006590:	b530      	push	{r4, r5, lr}
 8006592:	b083      	sub	sp, #12
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006594:	2301      	movs	r3, #1
 8006596:	aa01      	add	r2, sp, #4
{
 8006598:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800659a:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 800659e:	2160      	movs	r1, #96	; 0x60
 80065a0:	47a0      	blx	r4
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
  switch (reg.odr){
 80065a2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80065a6:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80065aa:	b2da      	uxtb	r2, r3
 80065ac:	2a02      	cmp	r2, #2
 80065ae:	d002      	beq.n	80065b6 <lis2mdl_data_rate_get+0x26>
 80065b0:	d808      	bhi.n	80065c4 <lis2mdl_data_rate_get+0x34>
 80065b2:	2a01      	cmp	r2, #1
 80065b4:	d102      	bne.n	80065bc <lis2mdl_data_rate_get+0x2c>
      break;
    case LIS2MDL_ODR_50Hz:
      *val = LIS2MDL_ODR_50Hz;
      break;
    case LIS2MDL_ODR_100Hz:
      *val = LIS2MDL_ODR_100Hz;
 80065b6:	702b      	strb	r3, [r5, #0]
    default:
      *val = LIS2MDL_ODR_10Hz;
      break;
  }
  return ret;
}
 80065b8:	b003      	add	sp, #12
 80065ba:	bd30      	pop	{r4, r5, pc}
      *val = LIS2MDL_ODR_10Hz;
 80065bc:	2300      	movs	r3, #0
 80065be:	702b      	strb	r3, [r5, #0]
}
 80065c0:	b003      	add	sp, #12
 80065c2:	bd30      	pop	{r4, r5, pc}
      *val = LIS2MDL_ODR_100Hz;
 80065c4:	2303      	movs	r3, #3
 80065c6:	e7f6      	b.n	80065b6 <lis2mdl_data_rate_get+0x26>

080065c8 <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(lis2mdl_ctx_t *ctx, uint8_t val)
{
 80065c8:	b570      	push	{r4, r5, r6, lr}
 80065ca:	b082      	sub	sp, #8
 80065cc:	4604      	mov	r4, r0
 80065ce:	460e      	mov	r6, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80065d0:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 80065d4:	aa01      	add	r2, sp, #4
 80065d6:	2301      	movs	r3, #1
 80065d8:	2162      	movs	r1, #98	; 0x62
 80065da:	47a8      	blx	r5
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t*)&reg, 1);

  if(ret == 0){
 80065dc:	b958      	cbnz	r0, 80065f6 <lis2mdl_block_data_update_set+0x2e>
    reg.bdu = val;
 80065de:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80065e2:	6825      	ldr	r5, [r4, #0]
 80065e4:	68a0      	ldr	r0, [r4, #8]
    reg.bdu = val;
 80065e6:	f366 1304 	bfi	r3, r6, #4, #1
 80065ea:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80065ee:	aa01      	add	r2, sp, #4
 80065f0:	2301      	movs	r3, #1
 80065f2:	2162      	movs	r1, #98	; 0x62
 80065f4:	47a8      	blx	r5
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t*)&reg, 1);
  }

  return ret;
}
 80065f6:	b002      	add	sp, #8
 80065f8:	bd70      	pop	{r4, r5, r6, pc}
 80065fa:	bf00      	nop

080065fc <lis2mdl_magnetic_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_magnetic_raw_get(lis2mdl_ctx_t *ctx, uint8_t *buff)
{
 80065fc:	b410      	push	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80065fe:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8006602:	460a      	mov	r2, r1
 8006604:	46a4      	mov	ip, r4
 8006606:	2306      	movs	r3, #6
 8006608:	2168      	movs	r1, #104	; 0x68
  int32_t ret;
  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
  return ret;
}
 800660a:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800660e:	4760      	bx	ip

08006610 <lis2mdl_device_id_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_device_id_get(lis2mdl_ctx_t *ctx, uint8_t *buff)
{
 8006610:	b410      	push	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006612:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8006616:	460a      	mov	r2, r1
 8006618:	46a4      	mov	ip, r4
 800661a:	2301      	movs	r3, #1
 800661c:	214f      	movs	r1, #79	; 0x4f
  int32_t ret;
  ret = lis2mdl_read_reg(ctx, LIS2MDL_WHO_AM_I, buff, 1);
  return ret;
}
 800661e:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006622:	4760      	bx	ip

08006624 <lis2mdl_self_test_set>:
  * @param  val   change the values of self_test in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_self_test_set(lis2mdl_ctx_t *ctx, uint8_t val)
{
 8006624:	b570      	push	{r4, r5, r6, lr}
 8006626:	b082      	sub	sp, #8
 8006628:	4604      	mov	r4, r0
 800662a:	460e      	mov	r6, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800662c:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8006630:	aa01      	add	r2, sp, #4
 8006632:	2301      	movs	r3, #1
 8006634:	2162      	movs	r1, #98	; 0x62
 8006636:	47a8      	blx	r5
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t*)&reg, 1);

  if(ret == 0){
 8006638:	b958      	cbnz	r0, 8006652 <lis2mdl_self_test_set+0x2e>
    reg.self_test = val;
 800663a:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800663e:	6825      	ldr	r5, [r4, #0]
 8006640:	68a0      	ldr	r0, [r4, #8]
    reg.self_test = val;
 8006642:	f366 0341 	bfi	r3, r6, #1, #1
 8006646:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800664a:	aa01      	add	r2, sp, #4
 800664c:	2301      	movs	r3, #1
 800664e:	2162      	movs	r1, #98	; 0x62
 8006650:	47a8      	blx	r5
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t*)&reg, 1);
  }

  return ret;
}
 8006652:	b002      	add	sp, #8
 8006654:	bd70      	pop	{r4, r5, r6, pc}
 8006656:	bf00      	nop

08006658 <lis2mdl_i2c_interface_set>:
  * @param  val   change the values of i2c_dis in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_i2c_interface_set(lis2mdl_ctx_t *ctx, lis2mdl_i2c_dis_t val)
{
 8006658:	b570      	push	{r4, r5, r6, lr}
 800665a:	b082      	sub	sp, #8
 800665c:	4604      	mov	r4, r0
 800665e:	460e      	mov	r6, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006660:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8006664:	aa01      	add	r2, sp, #4
 8006666:	2301      	movs	r3, #1
 8006668:	2162      	movs	r1, #98	; 0x62
 800666a:	47a8      	blx	r5
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t*)&reg, 1);

  if(ret == 0){
 800666c:	b958      	cbnz	r0, 8006686 <lis2mdl_i2c_interface_set+0x2e>
    reg.i2c_dis = (uint8_t)val;
 800666e:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006672:	6825      	ldr	r5, [r4, #0]
 8006674:	68a0      	ldr	r0, [r4, #8]
    reg.i2c_dis = (uint8_t)val;
 8006676:	f366 1345 	bfi	r3, r6, #5, #1
 800667a:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800667e:	aa01      	add	r2, sp, #4
 8006680:	2301      	movs	r3, #1
 8006682:	2162      	movs	r1, #98	; 0x62
 8006684:	47a8      	blx	r5
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t*)&reg, 1);
  }

  return ret;
}
 8006686:	b002      	add	sp, #8
 8006688:	bd70      	pop	{r4, r5, r6, pc}
 800668a:	bf00      	nop

0800668c <LPS22HH_GetCapabilities>:

  Capabilities->Humidity    = 0;
  Capabilities->Pressure    = 1;
  Capabilities->Temperature = 1;
  Capabilities->LowPower    = 0;
  Capabilities->HumMaxOdr   = 0.0f;
 800668c:	2200      	movs	r2, #0
  Capabilities->TempMaxOdr  = 200.0f;
 800668e:	4b04      	ldr	r3, [pc, #16]	; (80066a0 <LPS22HH_GetCapabilities+0x14>)
  Capabilities->HumMaxOdr   = 0.0f;
 8006690:	604a      	str	r2, [r1, #4]
  Capabilities->Temperature = 1;
 8006692:	f240 1201 	movw	r2, #257	; 0x101
 8006696:	600a      	str	r2, [r1, #0]
  Capabilities->TempMaxOdr  = 200.0f;
 8006698:	608b      	str	r3, [r1, #8]
  Capabilities->PressMaxOdr = 200.0f;
 800669a:	60cb      	str	r3, [r1, #12]
  return LPS22HH_OK;
}
 800669c:	2000      	movs	r0, #0
 800669e:	4770      	bx	lr
 80066a0:	43480000 	.word	0x43480000

080066a4 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80066a4:	b410      	push	{r4}
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80066a6:	6944      	ldr	r4, [r0, #20]
 80066a8:	7b00      	ldrb	r0, [r0, #12]
 80066aa:	46a4      	mov	ip, r4
}
 80066ac:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80066b0:	4760      	bx	ip
 80066b2:	bf00      	nop

080066b4 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80066b4:	b410      	push	{r4}
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80066b6:	6904      	ldr	r4, [r0, #16]
 80066b8:	7b00      	ldrb	r0, [r0, #12]
 80066ba:	46a4      	mov	ip, r4
}
 80066bc:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80066c0:	4760      	bx	ip
 80066c2:	bf00      	nop

080066c4 <LPS22HH_Init>:
{
 80066c4:	b538      	push	{r3, r4, r5, lr}
  if (pObj->is_initialized == 0U)
 80066c6:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
{
 80066ca:	4604      	mov	r4, r0
  if (pObj->is_initialized == 0U)
 80066cc:	b123      	cbz	r3, 80066d8 <LPS22HH_Init+0x14>
  pObj->is_initialized = 1U;
 80066ce:	2301      	movs	r3, #1
 80066d0:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  return LPS22HH_OK;
 80066d4:	2000      	movs	r0, #0
}
 80066d6:	bd38      	pop	{r3, r4, r5, pc}
  if (lps22hh_i3c_interface_set(&(pObj->Ctx), LPS22HH_I3C_DISABLE) != LPS22HH_OK)
 80066d8:	f100 051c 	add.w	r5, r0, #28
 80066dc:	4628      	mov	r0, r5
 80066de:	2111      	movs	r1, #17
 80066e0:	f000 fbf6 	bl	8006ed0 <lps22hh_i3c_interface_set>
 80066e4:	b9b8      	cbnz	r0, 8006716 <LPS22HH_Init+0x52>
  if (lps22hh_data_rate_set(&(pObj->Ctx), (lps22hh_odr_t)(LPS22HH_POWER_DOWN | 0x10)) != LPS22HH_OK)
 80066e6:	2110      	movs	r1, #16
 80066e8:	4628      	mov	r0, r5
 80066ea:	f000 fb0d 	bl	8006d08 <lps22hh_data_rate_set>
 80066ee:	b990      	cbnz	r0, 8006716 <LPS22HH_Init+0x52>
  if (lps22hh_lp_bandwidth_set(&(pObj->Ctx), LPS22HH_LPF_ODR_DIV_2) != LPS22HH_OK)
 80066f0:	4601      	mov	r1, r0
 80066f2:	4628      	mov	r0, r5
 80066f4:	f000 fbd2 	bl	8006e9c <lps22hh_lp_bandwidth_set>
 80066f8:	b968      	cbnz	r0, 8006716 <LPS22HH_Init+0x52>
  if (lps22hh_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 80066fa:	2101      	movs	r1, #1
 80066fc:	4628      	mov	r0, r5
 80066fe:	f000 fae9 	bl	8006cd4 <lps22hh_block_data_update_set>
 8006702:	b940      	cbnz	r0, 8006716 <LPS22HH_Init+0x52>
  if (lps22hh_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 8006704:	4628      	mov	r0, r5
 8006706:	2101      	movs	r1, #1
 8006708:	f000 fbae 	bl	8006e68 <lps22hh_auto_increment_set>
 800670c:	b918      	cbnz	r0, 8006716 <LPS22HH_Init+0x52>
  pObj->last_odr = LPS22HH_25_Hz;
 800670e:	2303      	movs	r3, #3
 8006710:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
 8006714:	e7db      	b.n	80066ce <LPS22HH_Init+0xa>
      return LPS22HH_ERROR;
 8006716:	f04f 30ff 	mov.w	r0, #4294967295
}
 800671a:	bd38      	pop	{r3, r4, r5, pc}

0800671c <LPS22HH_ReadID>:
{
 800671c:	b508      	push	{r3, lr}
  if (lps22hh_device_id_get(&(pObj->Ctx), Id) != LPS22HH_OK)
 800671e:	301c      	adds	r0, #28
 8006720:	f000 fb98 	bl	8006e54 <lps22hh_device_id_get>
 8006724:	3000      	adds	r0, #0
 8006726:	bf18      	it	ne
 8006728:	2001      	movne	r0, #1
}
 800672a:	4240      	negs	r0, r0
 800672c:	bd08      	pop	{r3, pc}
 800672e:	bf00      	nop

08006730 <LPS22HH_PRESS_SetOutputDataRate>:
{
 8006730:	b538      	push	{r3, r4, r5, lr}
 8006732:	ee07 1a90 	vmov	s15, r1
  if (pObj->press_is_enabled == 1U)
 8006736:	f890 1029 	ldrb.w	r1, [r0, #41]	; 0x29
          : (Odr <=  10.0f) ? LPS22HH_10_Hz
 800673a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
  if (pObj->press_is_enabled == 1U)
 800673e:	2901      	cmp	r1, #1
          : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8006740:	eef4 7ac7 	vcmpe.f32	s15, s14
  if (pObj->press_is_enabled == 1U)
 8006744:	d029      	beq.n	800679a <LPS22HH_PRESS_SetOutputDataRate+0x6a>
                 : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8006746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800674a:	d922      	bls.n	8006792 <LPS22HH_PRESS_SetOutputDataRate+0x62>
 800674c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8006750:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006758:	d804      	bhi.n	8006764 <LPS22HH_PRESS_SetOutputDataRate+0x34>
 800675a:	2302      	movs	r3, #2
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 800675c:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 8006760:	2000      	movs	r0, #0
}
 8006762:	bd38      	pop	{r3, r4, r5, pc}
                 : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8006764:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8006768:	eef4 7ac7 	vcmpe.f32	s15, s14
 800676c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006770:	d911      	bls.n	8006796 <LPS22HH_PRESS_SetOutputDataRate+0x66>
 8006772:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800683c <LPS22HH_PRESS_SetOutputDataRate+0x10c>
 8006776:	eef4 7ac7 	vcmpe.f32	s15, s14
 800677a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800677e:	d945      	bls.n	800680c <LPS22HH_PRESS_SetOutputDataRate+0xdc>
 8006780:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8006840 <LPS22HH_PRESS_SetOutputDataRate+0x110>
 8006784:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800678c:	d842      	bhi.n	8006814 <LPS22HH_PRESS_SetOutputDataRate+0xe4>
 800678e:	2305      	movs	r3, #5
 8006790:	e7e4      	b.n	800675c <LPS22HH_PRESS_SetOutputDataRate+0x2c>
 8006792:	2301      	movs	r3, #1
 8006794:	e7e2      	b.n	800675c <LPS22HH_PRESS_SetOutputDataRate+0x2c>
 8006796:	2303      	movs	r3, #3
 8006798:	e7e0      	b.n	800675c <LPS22HH_PRESS_SetOutputDataRate+0x2c>
          : (Odr <=  10.0f) ? LPS22HH_10_Hz
 800679a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800679e:	d924      	bls.n	80067ea <LPS22HH_PRESS_SetOutputDataRate+0xba>
 80067a0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80067a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80067a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067ac:	d930      	bls.n	8006810 <LPS22HH_PRESS_SetOutputDataRate+0xe0>
 80067ae:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80067b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80067b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067ba:	d935      	bls.n	8006828 <LPS22HH_PRESS_SetOutputDataRate+0xf8>
 80067bc:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800683c <LPS22HH_PRESS_SetOutputDataRate+0x10c>
 80067c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80067c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067c8:	d930      	bls.n	800682c <LPS22HH_PRESS_SetOutputDataRate+0xfc>
 80067ca:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8006840 <LPS22HH_PRESS_SetOutputDataRate+0x110>
 80067ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80067d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067d6:	d92e      	bls.n	8006836 <LPS22HH_PRESS_SetOutputDataRate+0x106>
 80067d8:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8006844 <LPS22HH_PRESS_SetOutputDataRate+0x114>
 80067dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80067e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067e4:	bf94      	ite	ls
 80067e6:	2106      	movls	r1, #6
 80067e8:	2107      	movhi	r1, #7
  if (lps22hh_data_rate_set(&(pObj->Ctx), new_odr) != LPS22HH_OK)
 80067ea:	f100 051c 	add.w	r5, r0, #28
 80067ee:	4604      	mov	r4, r0
 80067f0:	4628      	mov	r0, r5
 80067f2:	f000 fa89 	bl	8006d08 <lps22hh_data_rate_set>
 80067f6:	b9d8      	cbnz	r0, 8006830 <LPS22HH_PRESS_SetOutputDataRate+0x100>
  if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 80067f8:	f104 012b 	add.w	r1, r4, #43	; 0x2b
 80067fc:	4628      	mov	r0, r5
 80067fe:	f000 fab5 	bl	8006d6c <lps22hh_data_rate_get>
 8006802:	3000      	adds	r0, #0
 8006804:	bf18      	it	ne
 8006806:	2001      	movne	r0, #1
 8006808:	4240      	negs	r0, r0
}
 800680a:	bd38      	pop	{r3, r4, r5, pc}
                 : (Odr <=  10.0f) ? LPS22HH_10_Hz
 800680c:	2304      	movs	r3, #4
 800680e:	e7a5      	b.n	800675c <LPS22HH_PRESS_SetOutputDataRate+0x2c>
          : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8006810:	2102      	movs	r1, #2
 8006812:	e7ea      	b.n	80067ea <LPS22HH_PRESS_SetOutputDataRate+0xba>
                 : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8006814:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8006844 <LPS22HH_PRESS_SetOutputDataRate+0x114>
 8006818:	eef4 7ac7 	vcmpe.f32	s15, s14
 800681c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006820:	bf94      	ite	ls
 8006822:	2306      	movls	r3, #6
 8006824:	2307      	movhi	r3, #7
 8006826:	e799      	b.n	800675c <LPS22HH_PRESS_SetOutputDataRate+0x2c>
          : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8006828:	2103      	movs	r1, #3
 800682a:	e7de      	b.n	80067ea <LPS22HH_PRESS_SetOutputDataRate+0xba>
 800682c:	2104      	movs	r1, #4
 800682e:	e7dc      	b.n	80067ea <LPS22HH_PRESS_SetOutputDataRate+0xba>
    return LPS22HH_ERROR;
 8006830:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006834:	bd38      	pop	{r3, r4, r5, pc}
          : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8006836:	2105      	movs	r1, #5
 8006838:	e7d7      	b.n	80067ea <LPS22HH_PRESS_SetOutputDataRate+0xba>
 800683a:	bf00      	nop
 800683c:	42480000 	.word	0x42480000
 8006840:	42960000 	.word	0x42960000
 8006844:	42c80000 	.word	0x42c80000

08006848 <LPS22HH_PRESS_GetPressure>:
{
 8006848:	b530      	push	{r4, r5, lr}
 800684a:	b083      	sub	sp, #12
 800684c:	460d      	mov	r5, r1
  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 800684e:	2300      	movs	r3, #0
  if (lps22hh_pressure_raw_get(&(pObj->Ctx), data_raw_pressure.u8bit) != LPS22HH_OK)
 8006850:	301c      	adds	r0, #28
 8006852:	a901      	add	r1, sp, #4
  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 8006854:	9301      	str	r3, [sp, #4]
  if (lps22hh_pressure_raw_get(&(pObj->Ctx), data_raw_pressure.u8bit) != LPS22HH_OK)
 8006856:	f000 fae9 	bl	8006e2c <lps22hh_pressure_raw_get>
 800685a:	b938      	cbnz	r0, 800686c <LPS22HH_PRESS_GetPressure+0x24>
 800685c:	4604      	mov	r4, r0
  *Value = lps22hh_from_lsb_to_hpa(data_raw_pressure.i32bit);
 800685e:	9801      	ldr	r0, [sp, #4]
 8006860:	f000 fa22 	bl	8006ca8 <lps22hh_from_lsb_to_hpa>
 8006864:	6028      	str	r0, [r5, #0]
}
 8006866:	4620      	mov	r0, r4
 8006868:	b003      	add	sp, #12
 800686a:	bd30      	pop	{r4, r5, pc}
    return LPS22HH_ERROR;
 800686c:	f04f 34ff 	mov.w	r4, #4294967295
 8006870:	e7f9      	b.n	8006866 <LPS22HH_PRESS_GetPressure+0x1e>
 8006872:	bf00      	nop

08006874 <LPS22HH_TEMP_GetTemperature>:
{
 8006874:	b530      	push	{r4, r5, lr}
 8006876:	b083      	sub	sp, #12
 8006878:	460d      	mov	r5, r1
  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 800687a:	2300      	movs	r3, #0
  if (lps22hh_temperature_raw_get(&(pObj->Ctx), data_raw_temperature.u8bit) != LPS22HH_OK)
 800687c:	301c      	adds	r0, #28
 800687e:	a901      	add	r1, sp, #4
  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 8006880:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (lps22hh_temperature_raw_get(&(pObj->Ctx), data_raw_temperature.u8bit) != LPS22HH_OK)
 8006884:	f000 fadc 	bl	8006e40 <lps22hh_temperature_raw_get>
 8006888:	b940      	cbnz	r0, 800689c <LPS22HH_TEMP_GetTemperature+0x28>
 800688a:	4604      	mov	r4, r0
  *Value = lps22hh_from_lsb_to_celsius(data_raw_temperature.i16bit);
 800688c:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
 8006890:	f000 fa12 	bl	8006cb8 <lps22hh_from_lsb_to_celsius>
 8006894:	6028      	str	r0, [r5, #0]
}
 8006896:	4620      	mov	r0, r4
 8006898:	b003      	add	sp, #12
 800689a:	bd30      	pop	{r4, r5, pc}
    return LPS22HH_ERROR;
 800689c:	f04f 34ff 	mov.w	r4, #4294967295
 80068a0:	e7f9      	b.n	8006896 <LPS22HH_TEMP_GetTemperature+0x22>
 80068a2:	bf00      	nop

080068a4 <LPS22HH_PRESS_Enable>:
  if (pObj->press_is_enabled == 1U)
 80068a4:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d00b      	beq.n	80068c4 <LPS22HH_PRESS_Enable+0x20>
{
 80068ac:	b510      	push	{r4, lr}
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 80068ae:	f890 102b 	ldrb.w	r1, [r0, #43]	; 0x2b
 80068b2:	4604      	mov	r4, r0
 80068b4:	301c      	adds	r0, #28
 80068b6:	f000 fa27 	bl	8006d08 <lps22hh_data_rate_set>
 80068ba:	b928      	cbnz	r0, 80068c8 <LPS22HH_PRESS_Enable+0x24>
  pObj->press_is_enabled = 1;
 80068bc:	2301      	movs	r3, #1
 80068be:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
}
 80068c2:	bd10      	pop	{r4, pc}
    return LPS22HH_OK;
 80068c4:	2000      	movs	r0, #0
}
 80068c6:	4770      	bx	lr
    return LPS22HH_ERROR;
 80068c8:	f04f 30ff 	mov.w	r0, #4294967295
}
 80068cc:	bd10      	pop	{r4, pc}
 80068ce:	bf00      	nop

080068d0 <LPS22HH_TEMP_Enable>:
  if (pObj->temp_is_enabled == 1U)
 80068d0:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d00b      	beq.n	80068f0 <LPS22HH_TEMP_Enable+0x20>
{
 80068d8:	b510      	push	{r4, lr}
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 80068da:	f890 102b 	ldrb.w	r1, [r0, #43]	; 0x2b
 80068de:	4604      	mov	r4, r0
 80068e0:	301c      	adds	r0, #28
 80068e2:	f000 fa11 	bl	8006d08 <lps22hh_data_rate_set>
 80068e6:	b928      	cbnz	r0, 80068f4 <LPS22HH_TEMP_Enable+0x24>
  pObj->temp_is_enabled = 1;
 80068e8:	2301      	movs	r3, #1
 80068ea:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
}
 80068ee:	bd10      	pop	{r4, pc}
    return LPS22HH_OK;
 80068f0:	2000      	movs	r0, #0
}
 80068f2:	4770      	bx	lr
    return LPS22HH_ERROR;
 80068f4:	f04f 30ff 	mov.w	r0, #4294967295
}
 80068f8:	bd10      	pop	{r4, pc}
 80068fa:	bf00      	nop

080068fc <LPS22HH_DeInit>:
{
 80068fc:	b570      	push	{r4, r5, r6, lr}
  if (pObj->is_initialized == 1U)
 80068fe:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8006902:	2b01      	cmp	r3, #1
{
 8006904:	4604      	mov	r4, r0
  if (pObj->is_initialized == 1U)
 8006906:	d003      	beq.n	8006910 <LPS22HH_DeInit+0x14>
  pObj->is_initialized = 0;
 8006908:	2000      	movs	r0, #0
 800690a:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
}
 800690e:	bd70      	pop	{r4, r5, r6, pc}
  if (pObj->press_is_enabled == 0U)
 8006910:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8006914:	f890 502a 	ldrb.w	r5, [r0, #42]	; 0x2a
 8006918:	b98b      	cbnz	r3, 800693e <LPS22HH_DeInit+0x42>
  if (pObj->temp_is_enabled == 0U)
 800691a:	2d00      	cmp	r5, #0
 800691c:	d0f4      	beq.n	8006908 <LPS22HH_DeInit+0xc>
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 800691e:	f104 051c 	add.w	r5, r4, #28
 8006922:	4628      	mov	r0, r5
 8006924:	f104 012b 	add.w	r1, r4, #43	; 0x2b
 8006928:	f000 fa20 	bl	8006d6c <lps22hh_data_rate_get>
 800692c:	b9f0      	cbnz	r0, 800696c <LPS22HH_DeInit+0x70>
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 800692e:	4601      	mov	r1, r0
 8006930:	4628      	mov	r0, r5
 8006932:	f000 f9e9 	bl	8006d08 <lps22hh_data_rate_set>
 8006936:	b9c8      	cbnz	r0, 800696c <LPS22HH_DeInit+0x70>
  pObj->temp_is_enabled = 0;
 8006938:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
 800693c:	e7e4      	b.n	8006908 <LPS22HH_DeInit+0xc>
  if (pObj->temp_is_enabled == 0U)
 800693e:	b12d      	cbz	r5, 800694c <LPS22HH_DeInit+0x50>
  pObj->press_is_enabled = 0;
 8006940:	2300      	movs	r3, #0
 8006942:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
  if (pObj->temp_is_enabled == 0U)
 8006946:	2d00      	cmp	r5, #0
 8006948:	d0de      	beq.n	8006908 <LPS22HH_DeInit+0xc>
 800694a:	e7e8      	b.n	800691e <LPS22HH_DeInit+0x22>
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 800694c:	f100 061c 	add.w	r6, r0, #28
 8006950:	4630      	mov	r0, r6
 8006952:	f104 012b 	add.w	r1, r4, #43	; 0x2b
 8006956:	f000 fa09 	bl	8006d6c <lps22hh_data_rate_get>
 800695a:	b938      	cbnz	r0, 800696c <LPS22HH_DeInit+0x70>
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 800695c:	4629      	mov	r1, r5
 800695e:	4630      	mov	r0, r6
 8006960:	f000 f9d2 	bl	8006d08 <lps22hh_data_rate_set>
 8006964:	b910      	cbnz	r0, 800696c <LPS22HH_DeInit+0x70>
 8006966:	f894 502a 	ldrb.w	r5, [r4, #42]	; 0x2a
 800696a:	e7e9      	b.n	8006940 <LPS22HH_DeInit+0x44>
      return LPS22HH_ERROR;
 800696c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006970:	bd70      	pop	{r4, r5, r6, pc}
 8006972:	bf00      	nop

08006974 <LPS22HH_TEMP_GetOutputDataRate>:
 8006974:	b510      	push	{r4, lr}
 8006976:	b082      	sub	sp, #8
 8006978:	460c      	mov	r4, r1
 800697a:	301c      	adds	r0, #28
 800697c:	f10d 0107 	add.w	r1, sp, #7
 8006980:	f000 f9f4 	bl	8006d6c <lps22hh_data_rate_get>
 8006984:	2800      	cmp	r0, #0
 8006986:	d12a      	bne.n	80069de <LPS22HH_TEMP_GetOutputDataRate+0x6a>
 8006988:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800698c:	2b07      	cmp	r3, #7
 800698e:	d826      	bhi.n	80069de <LPS22HH_TEMP_GetOutputDataRate+0x6a>
 8006990:	e8df f003 	tbb	[pc, r3]
 8006994:	15110c08 	.word	0x15110c08
 8006998:	04211d19 	.word	0x04211d19
 800699c:	4b11      	ldr	r3, [pc, #68]	; (80069e4 <LPS22HH_TEMP_GetOutputDataRate+0x70>)
 800699e:	6023      	str	r3, [r4, #0]
 80069a0:	b002      	add	sp, #8
 80069a2:	bd10      	pop	{r4, pc}
 80069a4:	2300      	movs	r3, #0
 80069a6:	6023      	str	r3, [r4, #0]
 80069a8:	b002      	add	sp, #8
 80069aa:	bd10      	pop	{r4, pc}
 80069ac:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80069b0:	6023      	str	r3, [r4, #0]
 80069b2:	b002      	add	sp, #8
 80069b4:	bd10      	pop	{r4, pc}
 80069b6:	4b0c      	ldr	r3, [pc, #48]	; (80069e8 <LPS22HH_TEMP_GetOutputDataRate+0x74>)
 80069b8:	6023      	str	r3, [r4, #0]
 80069ba:	b002      	add	sp, #8
 80069bc:	bd10      	pop	{r4, pc}
 80069be:	4b0b      	ldr	r3, [pc, #44]	; (80069ec <LPS22HH_TEMP_GetOutputDataRate+0x78>)
 80069c0:	6023      	str	r3, [r4, #0]
 80069c2:	b002      	add	sp, #8
 80069c4:	bd10      	pop	{r4, pc}
 80069c6:	4b0a      	ldr	r3, [pc, #40]	; (80069f0 <LPS22HH_TEMP_GetOutputDataRate+0x7c>)
 80069c8:	6023      	str	r3, [r4, #0]
 80069ca:	b002      	add	sp, #8
 80069cc:	bd10      	pop	{r4, pc}
 80069ce:	4b09      	ldr	r3, [pc, #36]	; (80069f4 <LPS22HH_TEMP_GetOutputDataRate+0x80>)
 80069d0:	6023      	str	r3, [r4, #0]
 80069d2:	b002      	add	sp, #8
 80069d4:	bd10      	pop	{r4, pc}
 80069d6:	4b08      	ldr	r3, [pc, #32]	; (80069f8 <LPS22HH_TEMP_GetOutputDataRate+0x84>)
 80069d8:	6023      	str	r3, [r4, #0]
 80069da:	b002      	add	sp, #8
 80069dc:	bd10      	pop	{r4, pc}
 80069de:	f04f 30ff 	mov.w	r0, #4294967295
 80069e2:	e7dd      	b.n	80069a0 <LPS22HH_TEMP_GetOutputDataRate+0x2c>
 80069e4:	43480000 	.word	0x43480000
 80069e8:	41200000 	.word	0x41200000
 80069ec:	41c80000 	.word	0x41c80000
 80069f0:	42480000 	.word	0x42480000
 80069f4:	42960000 	.word	0x42960000
 80069f8:	42c80000 	.word	0x42c80000

080069fc <LPS22HH_PRESS_GetOutputDataRate>:
{
 80069fc:	b510      	push	{r4, lr}
 80069fe:	b082      	sub	sp, #8
 8006a00:	460c      	mov	r4, r1
  if (lps22hh_data_rate_get(&(pObj->Ctx), &odr_low_level) != LPS22HH_OK)
 8006a02:	301c      	adds	r0, #28
 8006a04:	f10d 0107 	add.w	r1, sp, #7
 8006a08:	f000 f9b0 	bl	8006d6c <lps22hh_data_rate_get>
 8006a0c:	2800      	cmp	r0, #0
 8006a0e:	d12a      	bne.n	8006a66 <LPS22HH_PRESS_GetOutputDataRate+0x6a>
  switch (odr_low_level)
 8006a10:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006a14:	2b07      	cmp	r3, #7
 8006a16:	d826      	bhi.n	8006a66 <LPS22HH_PRESS_GetOutputDataRate+0x6a>
 8006a18:	e8df f003 	tbb	[pc, r3]
 8006a1c:	15110c08 	.word	0x15110c08
 8006a20:	04211d19 	.word	0x04211d19
      *Odr = 200.0f;
 8006a24:	4b11      	ldr	r3, [pc, #68]	; (8006a6c <LPS22HH_PRESS_GetOutputDataRate+0x70>)
 8006a26:	6023      	str	r3, [r4, #0]
}
 8006a28:	b002      	add	sp, #8
 8006a2a:	bd10      	pop	{r4, pc}
      *Odr = 0.0f;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	6023      	str	r3, [r4, #0]
}
 8006a30:	b002      	add	sp, #8
 8006a32:	bd10      	pop	{r4, pc}
      *Odr = 1.0f;
 8006a34:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8006a38:	6023      	str	r3, [r4, #0]
}
 8006a3a:	b002      	add	sp, #8
 8006a3c:	bd10      	pop	{r4, pc}
      *Odr = 10.0f;
 8006a3e:	4b0c      	ldr	r3, [pc, #48]	; (8006a70 <LPS22HH_PRESS_GetOutputDataRate+0x74>)
 8006a40:	6023      	str	r3, [r4, #0]
}
 8006a42:	b002      	add	sp, #8
 8006a44:	bd10      	pop	{r4, pc}
      *Odr = 25.0f;
 8006a46:	4b0b      	ldr	r3, [pc, #44]	; (8006a74 <LPS22HH_PRESS_GetOutputDataRate+0x78>)
 8006a48:	6023      	str	r3, [r4, #0]
}
 8006a4a:	b002      	add	sp, #8
 8006a4c:	bd10      	pop	{r4, pc}
      *Odr = 50.0f;
 8006a4e:	4b0a      	ldr	r3, [pc, #40]	; (8006a78 <LPS22HH_PRESS_GetOutputDataRate+0x7c>)
 8006a50:	6023      	str	r3, [r4, #0]
}
 8006a52:	b002      	add	sp, #8
 8006a54:	bd10      	pop	{r4, pc}
      *Odr = 75.0f;
 8006a56:	4b09      	ldr	r3, [pc, #36]	; (8006a7c <LPS22HH_PRESS_GetOutputDataRate+0x80>)
 8006a58:	6023      	str	r3, [r4, #0]
}
 8006a5a:	b002      	add	sp, #8
 8006a5c:	bd10      	pop	{r4, pc}
      *Odr = 100.0f;
 8006a5e:	4b08      	ldr	r3, [pc, #32]	; (8006a80 <LPS22HH_PRESS_GetOutputDataRate+0x84>)
 8006a60:	6023      	str	r3, [r4, #0]
}
 8006a62:	b002      	add	sp, #8
 8006a64:	bd10      	pop	{r4, pc}
      ret = LPS22HH_ERROR;
 8006a66:	f04f 30ff 	mov.w	r0, #4294967295
  return LPS22HH_GetOutputDataRate(pObj, Odr);
 8006a6a:	e7dd      	b.n	8006a28 <LPS22HH_PRESS_GetOutputDataRate+0x2c>
 8006a6c:	43480000 	.word	0x43480000
 8006a70:	41200000 	.word	0x41200000
 8006a74:	41c80000 	.word	0x41c80000
 8006a78:	42480000 	.word	0x42480000
 8006a7c:	42960000 	.word	0x42960000
 8006a80:	42c80000 	.word	0x42c80000

08006a84 <LPS22HH_PRESS_Disable>:
{
 8006a84:	b538      	push	{r3, r4, r5, lr}
  if (pObj->press_is_enabled == 0U)
 8006a86:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8006a8a:	b143      	cbz	r3, 8006a9e <LPS22HH_PRESS_Disable+0x1a>
  if (pObj->temp_is_enabled == 0U)
 8006a8c:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 8006a90:	4604      	mov	r4, r0
 8006a92:	b133      	cbz	r3, 8006aa2 <LPS22HH_PRESS_Disable+0x1e>
  pObj->press_is_enabled = 0;
 8006a94:	2300      	movs	r3, #0
 8006a96:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
  return LPS22HH_OK;
 8006a9a:	4618      	mov	r0, r3
}
 8006a9c:	bd38      	pop	{r3, r4, r5, pc}
    return LPS22HH_OK;
 8006a9e:	4618      	mov	r0, r3
}
 8006aa0:	bd38      	pop	{r3, r4, r5, pc}
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8006aa2:	f100 051c 	add.w	r5, r0, #28
 8006aa6:	4628      	mov	r0, r5
 8006aa8:	f104 012b 	add.w	r1, r4, #43	; 0x2b
 8006aac:	f000 f95e 	bl	8006d6c <lps22hh_data_rate_get>
 8006ab0:	b928      	cbnz	r0, 8006abe <LPS22HH_PRESS_Disable+0x3a>
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 8006ab2:	4601      	mov	r1, r0
 8006ab4:	4628      	mov	r0, r5
 8006ab6:	f000 f927 	bl	8006d08 <lps22hh_data_rate_set>
 8006aba:	2800      	cmp	r0, #0
 8006abc:	d0ea      	beq.n	8006a94 <LPS22HH_PRESS_Disable+0x10>
      return LPS22HH_ERROR;
 8006abe:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006ac2:	bd38      	pop	{r3, r4, r5, pc}

08006ac4 <LPS22HH_TEMP_Disable>:
{
 8006ac4:	b538      	push	{r3, r4, r5, lr}
  if (pObj->temp_is_enabled == 0U)
 8006ac6:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 8006aca:	b143      	cbz	r3, 8006ade <LPS22HH_TEMP_Disable+0x1a>
  if (pObj->press_is_enabled == 0U)
 8006acc:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8006ad0:	4604      	mov	r4, r0
 8006ad2:	b133      	cbz	r3, 8006ae2 <LPS22HH_TEMP_Disable+0x1e>
  pObj->temp_is_enabled = 0;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
  return LPS22HH_OK;
 8006ada:	4618      	mov	r0, r3
}
 8006adc:	bd38      	pop	{r3, r4, r5, pc}
    return LPS22HH_OK;
 8006ade:	4618      	mov	r0, r3
}
 8006ae0:	bd38      	pop	{r3, r4, r5, pc}
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8006ae2:	f100 051c 	add.w	r5, r0, #28
 8006ae6:	4628      	mov	r0, r5
 8006ae8:	f104 012b 	add.w	r1, r4, #43	; 0x2b
 8006aec:	f000 f93e 	bl	8006d6c <lps22hh_data_rate_get>
 8006af0:	b928      	cbnz	r0, 8006afe <LPS22HH_TEMP_Disable+0x3a>
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 8006af2:	4601      	mov	r1, r0
 8006af4:	4628      	mov	r0, r5
 8006af6:	f000 f907 	bl	8006d08 <lps22hh_data_rate_set>
 8006afa:	2800      	cmp	r0, #0
 8006afc:	d0ea      	beq.n	8006ad4 <LPS22HH_TEMP_Disable+0x10>
      return LPS22HH_ERROR;
 8006afe:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006b02:	bd38      	pop	{r3, r4, r5, pc}

08006b04 <LPS22HH_TEMP_SetOutputDataRate>:
{
 8006b04:	b538      	push	{r3, r4, r5, lr}
 8006b06:	ee07 1a90 	vmov	s15, r1
  if (pObj->temp_is_enabled == 1U)
 8006b0a:	f890 102a 	ldrb.w	r1, [r0, #42]	; 0x2a
          : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8006b0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
  if (pObj->temp_is_enabled == 1U)
 8006b12:	2901      	cmp	r1, #1
          : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8006b14:	eef4 7ac7 	vcmpe.f32	s15, s14
  if (pObj->temp_is_enabled == 1U)
 8006b18:	d029      	beq.n	8006b6e <LPS22HH_TEMP_SetOutputDataRate+0x6a>
                 : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8006b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b1e:	d922      	bls.n	8006b66 <LPS22HH_TEMP_SetOutputDataRate+0x62>
 8006b20:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8006b24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006b28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b2c:	d804      	bhi.n	8006b38 <LPS22HH_TEMP_SetOutputDataRate+0x34>
 8006b2e:	2302      	movs	r3, #2
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 8006b30:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 8006b34:	2000      	movs	r0, #0
}
 8006b36:	bd38      	pop	{r3, r4, r5, pc}
                 : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8006b38:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8006b3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006b40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b44:	d911      	bls.n	8006b6a <LPS22HH_TEMP_SetOutputDataRate+0x66>
 8006b46:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8006c10 <LPS22HH_TEMP_SetOutputDataRate+0x10c>
 8006b4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b52:	d945      	bls.n	8006be0 <LPS22HH_TEMP_SetOutputDataRate+0xdc>
 8006b54:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8006c14 <LPS22HH_TEMP_SetOutputDataRate+0x110>
 8006b58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006b5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b60:	d842      	bhi.n	8006be8 <LPS22HH_TEMP_SetOutputDataRate+0xe4>
 8006b62:	2305      	movs	r3, #5
 8006b64:	e7e4      	b.n	8006b30 <LPS22HH_TEMP_SetOutputDataRate+0x2c>
 8006b66:	2301      	movs	r3, #1
 8006b68:	e7e2      	b.n	8006b30 <LPS22HH_TEMP_SetOutputDataRate+0x2c>
 8006b6a:	2303      	movs	r3, #3
 8006b6c:	e7e0      	b.n	8006b30 <LPS22HH_TEMP_SetOutputDataRate+0x2c>
          : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8006b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b72:	d924      	bls.n	8006bbe <LPS22HH_TEMP_SetOutputDataRate+0xba>
 8006b74:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8006b78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b80:	d930      	bls.n	8006be4 <LPS22HH_TEMP_SetOutputDataRate+0xe0>
 8006b82:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8006b86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b8e:	d935      	bls.n	8006bfc <LPS22HH_TEMP_SetOutputDataRate+0xf8>
 8006b90:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8006c10 <LPS22HH_TEMP_SetOutputDataRate+0x10c>
 8006b94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b9c:	d930      	bls.n	8006c00 <LPS22HH_TEMP_SetOutputDataRate+0xfc>
 8006b9e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8006c14 <LPS22HH_TEMP_SetOutputDataRate+0x110>
 8006ba2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006baa:	d92e      	bls.n	8006c0a <LPS22HH_TEMP_SetOutputDataRate+0x106>
 8006bac:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8006c18 <LPS22HH_TEMP_SetOutputDataRate+0x114>
 8006bb0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bb8:	bf94      	ite	ls
 8006bba:	2106      	movls	r1, #6
 8006bbc:	2107      	movhi	r1, #7
  if (lps22hh_data_rate_set(&(pObj->Ctx), new_odr) != LPS22HH_OK)
 8006bbe:	f100 051c 	add.w	r5, r0, #28
 8006bc2:	4604      	mov	r4, r0
 8006bc4:	4628      	mov	r0, r5
 8006bc6:	f000 f89f 	bl	8006d08 <lps22hh_data_rate_set>
 8006bca:	b9d8      	cbnz	r0, 8006c04 <LPS22HH_TEMP_SetOutputDataRate+0x100>
  if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8006bcc:	f104 012b 	add.w	r1, r4, #43	; 0x2b
 8006bd0:	4628      	mov	r0, r5
 8006bd2:	f000 f8cb 	bl	8006d6c <lps22hh_data_rate_get>
 8006bd6:	3000      	adds	r0, #0
 8006bd8:	bf18      	it	ne
 8006bda:	2001      	movne	r0, #1
 8006bdc:	4240      	negs	r0, r0
}
 8006bde:	bd38      	pop	{r3, r4, r5, pc}
                 : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8006be0:	2304      	movs	r3, #4
 8006be2:	e7a5      	b.n	8006b30 <LPS22HH_TEMP_SetOutputDataRate+0x2c>
          : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8006be4:	2102      	movs	r1, #2
 8006be6:	e7ea      	b.n	8006bbe <LPS22HH_TEMP_SetOutputDataRate+0xba>
                 : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8006be8:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8006c18 <LPS22HH_TEMP_SetOutputDataRate+0x114>
 8006bec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bf4:	bf94      	ite	ls
 8006bf6:	2306      	movls	r3, #6
 8006bf8:	2307      	movhi	r3, #7
 8006bfa:	e799      	b.n	8006b30 <LPS22HH_TEMP_SetOutputDataRate+0x2c>
          : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8006bfc:	2103      	movs	r1, #3
 8006bfe:	e7de      	b.n	8006bbe <LPS22HH_TEMP_SetOutputDataRate+0xba>
 8006c00:	2104      	movs	r1, #4
 8006c02:	e7dc      	b.n	8006bbe <LPS22HH_TEMP_SetOutputDataRate+0xba>
    return LPS22HH_ERROR;
 8006c04:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006c08:	bd38      	pop	{r3, r4, r5, pc}
          : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8006c0a:	2105      	movs	r1, #5
 8006c0c:	e7d7      	b.n	8006bbe <LPS22HH_TEMP_SetOutputDataRate+0xba>
 8006c0e:	bf00      	nop
 8006c10:	42480000 	.word	0x42480000
 8006c14:	42960000 	.word	0x42960000
 8006c18:	42c80000 	.word	0x42c80000

08006c1c <LPS22HH_RegisterBusIO>:
  if (pObj == NULL)
 8006c1c:	2800      	cmp	r0, #0
 8006c1e:	d033      	beq.n	8006c88 <LPS22HH_RegisterBusIO+0x6c>
{
 8006c20:	b530      	push	{r4, r5, lr}
    pObj->IO.DeInit    = pIO->DeInit;
 8006c22:	e9d1 3400 	ldrd	r3, r4, [r1]
    pObj->IO.BusType   = pIO->BusType;
 8006c26:	688a      	ldr	r2, [r1, #8]
 8006c28:	6082      	str	r2, [r0, #8]
    pObj->IO.DeInit    = pIO->DeInit;
 8006c2a:	e9c0 3400 	strd	r3, r4, [r0]
    pObj->IO.Address   = pIO->Address;
 8006c2e:	7b0a      	ldrb	r2, [r1, #12]
 8006c30:	7302      	strb	r2, [r0, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8006c32:	e9d1 2504 	ldrd	r2, r5, [r1, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8006c36:	698c      	ldr	r4, [r1, #24]
    pObj->Ctx.read_reg  = ReadRegWrap;
 8006c38:	4915      	ldr	r1, [pc, #84]	; (8006c90 <LPS22HH_RegisterBusIO+0x74>)
    pObj->IO.WriteReg  = pIO->WriteReg;
 8006c3a:	6102      	str	r2, [r0, #16]
    pObj->Ctx.write_reg = WriteRegWrap;
 8006c3c:	4a15      	ldr	r2, [pc, #84]	; (8006c94 <LPS22HH_RegisterBusIO+0x78>)
 8006c3e:	61c2      	str	r2, [r0, #28]
{
 8006c40:	b083      	sub	sp, #12
    pObj->IO.GetTick   = pIO->GetTick;
 8006c42:	e9c0 5405 	strd	r5, r4, [r0, #20]
    pObj->Ctx.read_reg  = ReadRegWrap;
 8006c46:	e9c0 1008 	strd	r1, r0, [r0, #32]
    if (pObj->IO.Init == NULL)
 8006c4a:	b1d3      	cbz	r3, 8006c82 <LPS22HH_RegisterBusIO+0x66>
 8006c4c:	4604      	mov	r4, r0
    else if (pObj->IO.Init() != LPS22HH_OK)
 8006c4e:	4798      	blx	r3
 8006c50:	b9b8      	cbnz	r0, 8006c82 <LPS22HH_RegisterBusIO+0x66>
      if (pObj->IO.BusType == LPS22HH_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8006c52:	68a3      	ldr	r3, [r4, #8]
 8006c54:	2b02      	cmp	r3, #2
 8006c56:	d001      	beq.n	8006c5c <LPS22HH_RegisterBusIO+0x40>
}
 8006c58:	b003      	add	sp, #12
 8006c5a:	bd30      	pop	{r4, r5, pc}
        if (pObj->is_initialized == 0U)
 8006c5c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d1f9      	bne.n	8006c58 <LPS22HH_RegisterBusIO+0x3c>
 8006c64:	aa02      	add	r2, sp, #8
 8006c66:	2301      	movs	r3, #1
 8006c68:	f802 3d01 	strb.w	r3, [r2, #-1]!
  if (lps22hh_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HH_OK)
 8006c6c:	f104 001c 	add.w	r0, r4, #28
 8006c70:	2110      	movs	r1, #16
 8006c72:	f000 f811 	bl	8006c98 <lps22hh_write_reg>
 8006c76:	3000      	adds	r0, #0
 8006c78:	bf18      	it	ne
 8006c7a:	2001      	movne	r0, #1
 8006c7c:	4240      	negs	r0, r0
}
 8006c7e:	b003      	add	sp, #12
 8006c80:	bd30      	pop	{r4, r5, pc}
    ret = LPS22HH_ERROR;
 8006c82:	f04f 30ff 	mov.w	r0, #4294967295
 8006c86:	e7e7      	b.n	8006c58 <LPS22HH_RegisterBusIO+0x3c>
 8006c88:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006c8c:	4770      	bx	lr
 8006c8e:	bf00      	nop
 8006c90:	080066a5 	.word	0x080066a5
 8006c94:	080066b5 	.word	0x080066b5

08006c98 <lps22hh_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_write_reg(lps22hh_ctx_t* ctx, uint8_t reg, uint8_t* data,
                           uint16_t len)
{
 8006c98:	b410      	push	{r4}
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006c9a:	6804      	ldr	r4, [r0, #0]
 8006c9c:	6880      	ldr	r0, [r0, #8]
 8006c9e:	46a4      	mov	ip, r4
  return ret;
}
 8006ca0:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006ca4:	4760      	bx	ip
 8006ca6:	bf00      	nop

08006ca8 <lps22hh_from_lsb_to_hpa>:
  *
  */
float_t lps22hh_from_lsb_to_hpa(int32_t lsb)
{
  return ( (float_t) lsb / 4096.0f );
}
 8006ca8:	ee07 0a90 	vmov	s15, r0
 8006cac:	eefa 7aca 	vcvt.f32.s32	s15, s15, #12
 8006cb0:	ee17 0a90 	vmov	r0, s15
 8006cb4:	4770      	bx	lr
 8006cb6:	bf00      	nop

08006cb8 <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
  return ( (float_t) lsb / 100.0f );
 8006cb8:	ee07 0a90 	vmov	s15, r0
 8006cbc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006cc0:	eddf 7a03 	vldr	s15, [pc, #12]	; 8006cd0 <lps22hh_from_lsb_to_celsius+0x18>
}
 8006cc4:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8006cc8:	ee17 0a90 	vmov	r0, s15
 8006ccc:	4770      	bx	lr
 8006cce:	bf00      	nop
 8006cd0:	42c80000 	.word	0x42c80000

08006cd4 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(lps22hh_ctx_t *ctx, uint8_t val)
{
 8006cd4:	b570      	push	{r4, r5, r6, lr}
 8006cd6:	b082      	sub	sp, #8
 8006cd8:	4604      	mov	r4, r0
 8006cda:	460e      	mov	r6, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006cdc:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8006ce0:	aa01      	add	r2, sp, #4
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	2110      	movs	r1, #16
 8006ce6:	47a8      	blx	r5
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t*) &reg, 1);
  if (ret == 0) {
 8006ce8:	b958      	cbnz	r0, 8006d02 <lps22hh_block_data_update_set+0x2e>
    reg.bdu = val;
 8006cea:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006cee:	6825      	ldr	r5, [r4, #0]
 8006cf0:	68a0      	ldr	r0, [r4, #8]
    reg.bdu = val;
 8006cf2:	f366 0341 	bfi	r3, r6, #1, #1
 8006cf6:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006cfa:	aa01      	add	r2, sp, #4
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	2110      	movs	r1, #16
 8006d00:	47a8      	blx	r5
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t*) &reg, 1);
  }
  return ret;
}
 8006d02:	b002      	add	sp, #8
 8006d04:	bd70      	pop	{r4, r5, r6, pc}
 8006d06:	bf00      	nop

08006d08 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(lps22hh_ctx_t *ctx, lps22hh_odr_t val)
{
 8006d08:	b570      	push	{r4, r5, r6, lr}
 8006d0a:	b082      	sub	sp, #8
 8006d0c:	4604      	mov	r4, r0
 8006d0e:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006d10:	e9d0 6001 	ldrd	r6, r0, [r0, #4]
 8006d14:	466a      	mov	r2, sp
 8006d16:	2301      	movs	r3, #1
 8006d18:	2110      	movs	r1, #16
 8006d1a:	47b0      	blx	r6
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
  if (ret == 0) {
 8006d1c:	bb18      	cbnz	r0, 8006d66 <lps22hh_data_rate_set+0x5e>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006d1e:	aa01      	add	r2, sp, #4
 8006d20:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
 8006d24:	2301      	movs	r3, #1
 8006d26:	2111      	movs	r1, #17
 8006d28:	47b0      	blx	r6
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
  }
  if (ret == 0) {
 8006d2a:	b9e0      	cbnz	r0, 8006d66 <lps22hh_data_rate_set+0x5e>
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 8006d2c:	f89d 3000 	ldrb.w	r3, [sp]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006d30:	6826      	ldr	r6, [r4, #0]
 8006d32:	68a0      	ldr	r0, [r4, #8]
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 8006d34:	f365 1306 	bfi	r3, r5, #4, #3
 8006d38:	f88d 3000 	strb.w	r3, [sp]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006d3c:	466a      	mov	r2, sp
 8006d3e:	2301      	movs	r3, #1
 8006d40:	2110      	movs	r1, #16
 8006d42:	47b0      	blx	r6
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
  }
  if (ret == 0) {
 8006d44:	b978      	cbnz	r0, 8006d66 <lps22hh_data_rate_set+0x5e>
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 8006d46:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006d4a:	6826      	ldr	r6, [r4, #0]
 8006d4c:	68a0      	ldr	r0, [r4, #8]
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 8006d4e:	092a      	lsrs	r2, r5, #4
 8006d50:	f362 0341 	bfi	r3, r2, #1, #1
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 8006d54:	08ed      	lsrs	r5, r5, #3
 8006d56:	f365 0300 	bfi	r3, r5, #0, #1
 8006d5a:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006d5e:	aa01      	add	r2, sp, #4
 8006d60:	2301      	movs	r3, #1
 8006d62:	2111      	movs	r1, #17
 8006d64:	47b0      	blx	r6
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
  }
  return ret;
}
 8006d66:	b002      	add	sp, #8
 8006d68:	bd70      	pop	{r4, r5, r6, pc}
 8006d6a:	bf00      	nop

08006d6c <lps22hh_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_get(lps22hh_ctx_t *ctx, lps22hh_odr_t *val)
{
 8006d6c:	b570      	push	{r4, r5, r6, lr}
 8006d6e:	b082      	sub	sp, #8
 8006d70:	4604      	mov	r4, r0
 8006d72:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006d74:	e9d0 6001 	ldrd	r6, r0, [r0, #4]
 8006d78:	2301      	movs	r3, #1
 8006d7a:	466a      	mov	r2, sp
 8006d7c:	2110      	movs	r1, #16
 8006d7e:	47b0      	blx	r6
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
  if (ret == 0) {
 8006d80:	bb58      	cbnz	r0, 8006dda <lps22hh_data_rate_get+0x6e>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006d82:	aa01      	add	r2, sp, #4
 8006d84:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
 8006d88:	2301      	movs	r3, #1
 8006d8a:	2111      	movs	r1, #17
 8006d8c:	47b0      	blx	r6
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
  }
  if (ret == 0) {
 8006d8e:	bb20      	cbnz	r0, 8006dda <lps22hh_data_rate_get+0x6e>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006d90:	aa01      	add	r2, sp, #4
 8006d92:	2301      	movs	r3, #1
 8006d94:	2111      	movs	r1, #17
 8006d96:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
 8006d9a:	47b0      	blx	r6
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 8006d9c:	f89d 2004 	ldrb.w	r2, [sp, #4]
            ctrl_reg1.odr )) {
 8006da0:	f89d 1000 	ldrb.w	r1, [sp]
    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 8006da4:	f002 0301 	and.w	r3, r2, #1
 8006da8:	00db      	lsls	r3, r3, #3
 8006daa:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8006dae:	eb03 1302 	add.w	r3, r3, r2, lsl #4
            ctrl_reg1.odr )) {
 8006db2:	f3c1 1202 	ubfx	r2, r1, #4, #3
    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 8006db6:	4413      	add	r3, r2
 8006db8:	2b15      	cmp	r3, #21
 8006dba:	d80c      	bhi.n	8006dd6 <lps22hh_data_rate_get+0x6a>
 8006dbc:	e8df f003 	tbb	[pc, r3]
 8006dc0:	1815120b 	.word	0x1815120b
 8006dc4:	24211e1b 	.word	0x24211e1b
 8006dc8:	0b0b0b27 	.word	0x0b0b0b27
 8006dcc:	0b0b0b0b 	.word	0x0b0b0b0b
 8006dd0:	302d2a0b 	.word	0x302d2a0b
 8006dd4:	0f33      	.short	0x0f33
        break;
      case LPS22HH_200_Hz:
        *val = LPS22HH_200_Hz;
        break;
      default:
        *val = LPS22HH_POWER_DOWN;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	702b      	strb	r3, [r5, #0]
        break;
    }
  }
  return ret;
}
 8006dda:	b002      	add	sp, #8
 8006ddc:	bd70      	pop	{r4, r5, r6, pc}
        *val = LPS22HH_75_Hz_LOW_NOISE;
 8006dde:	2315      	movs	r3, #21
 8006de0:	702b      	strb	r3, [r5, #0]
        break;
 8006de2:	e7fa      	b.n	8006dda <lps22hh_data_rate_get+0x6e>
        *val = LPS22HH_1_Hz;
 8006de4:	2301      	movs	r3, #1
 8006de6:	702b      	strb	r3, [r5, #0]
        break;
 8006de8:	e7f7      	b.n	8006dda <lps22hh_data_rate_get+0x6e>
        *val = LPS22HH_10_Hz;
 8006dea:	2302      	movs	r3, #2
 8006dec:	702b      	strb	r3, [r5, #0]
        break;
 8006dee:	e7f4      	b.n	8006dda <lps22hh_data_rate_get+0x6e>
        *val = LPS22HH_25_Hz;
 8006df0:	2303      	movs	r3, #3
 8006df2:	702b      	strb	r3, [r5, #0]
        break;
 8006df4:	e7f1      	b.n	8006dda <lps22hh_data_rate_get+0x6e>
        *val = LPS22HH_50_Hz;
 8006df6:	2304      	movs	r3, #4
 8006df8:	702b      	strb	r3, [r5, #0]
        break;
 8006dfa:	e7ee      	b.n	8006dda <lps22hh_data_rate_get+0x6e>
        *val = LPS22HH_75_Hz;
 8006dfc:	2305      	movs	r3, #5
 8006dfe:	702b      	strb	r3, [r5, #0]
        break;
 8006e00:	e7eb      	b.n	8006dda <lps22hh_data_rate_get+0x6e>
        *val = LPS22HH_100_Hz;
 8006e02:	2306      	movs	r3, #6
 8006e04:	702b      	strb	r3, [r5, #0]
        break;
 8006e06:	e7e8      	b.n	8006dda <lps22hh_data_rate_get+0x6e>
        *val = LPS22HH_200_Hz;
 8006e08:	2307      	movs	r3, #7
 8006e0a:	702b      	strb	r3, [r5, #0]
        break;
 8006e0c:	e7e5      	b.n	8006dda <lps22hh_data_rate_get+0x6e>
        *val = LPS22HH_ONE_SHOOT;
 8006e0e:	2308      	movs	r3, #8
 8006e10:	702b      	strb	r3, [r5, #0]
        break;
 8006e12:	e7e2      	b.n	8006dda <lps22hh_data_rate_get+0x6e>
        *val = LPS22HH_1_Hz_LOW_NOISE;
 8006e14:	2311      	movs	r3, #17
 8006e16:	702b      	strb	r3, [r5, #0]
        break;
 8006e18:	e7df      	b.n	8006dda <lps22hh_data_rate_get+0x6e>
        *val = LPS22HH_10_Hz_LOW_NOISE;
 8006e1a:	2312      	movs	r3, #18
 8006e1c:	702b      	strb	r3, [r5, #0]
        break;
 8006e1e:	e7dc      	b.n	8006dda <lps22hh_data_rate_get+0x6e>
        *val = LPS22HH_25_Hz_LOW_NOISE;
 8006e20:	2313      	movs	r3, #19
 8006e22:	702b      	strb	r3, [r5, #0]
        break;
 8006e24:	e7d9      	b.n	8006dda <lps22hh_data_rate_get+0x6e>
        *val = LPS22HH_50_Hz_LOW_NOISE;
 8006e26:	2314      	movs	r3, #20
 8006e28:	702b      	strb	r3, [r5, #0]
        break;
 8006e2a:	e7d6      	b.n	8006dda <lps22hh_data_rate_get+0x6e>

08006e2c <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(lps22hh_ctx_t *ctx, uint8_t *buff)
{
 8006e2c:	b410      	push	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006e2e:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8006e32:	460a      	mov	r2, r1
 8006e34:	46a4      	mov	ip, r4
 8006e36:	2303      	movs	r3, #3
 8006e38:	2128      	movs	r1, #40	; 0x28
  int32_t ret;
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, buff, 3);
  return ret;
}
 8006e3a:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006e3e:	4760      	bx	ip

08006e40 <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(lps22hh_ctx_t *ctx, uint8_t *buff)
{
 8006e40:	b410      	push	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006e42:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8006e46:	460a      	mov	r2, r1
 8006e48:	46a4      	mov	ip, r4
 8006e4a:	2302      	movs	r3, #2
 8006e4c:	212b      	movs	r1, #43	; 0x2b
  int32_t ret;
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, buff, 2);
  return ret;
}
 8006e4e:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006e52:	4760      	bx	ip

08006e54 <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(lps22hh_ctx_t *ctx, uint8_t *buff)
{
 8006e54:	b410      	push	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006e56:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8006e5a:	460a      	mov	r2, r1
 8006e5c:	46a4      	mov	ip, r4
 8006e5e:	2301      	movs	r3, #1
 8006e60:	210f      	movs	r1, #15
  int32_t ret;
  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
  return ret;
}
 8006e62:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006e66:	4760      	bx	ip

08006e68 <lps22hh_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_auto_increment_set(lps22hh_ctx_t *ctx, uint8_t val)
{
 8006e68:	b570      	push	{r4, r5, r6, lr}
 8006e6a:	b082      	sub	sp, #8
 8006e6c:	4604      	mov	r4, r0
 8006e6e:	460e      	mov	r6, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006e70:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8006e74:	aa01      	add	r2, sp, #4
 8006e76:	2301      	movs	r3, #1
 8006e78:	2111      	movs	r1, #17
 8006e7a:	47a8      	blx	r5
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t*) &reg, 1);
  if (ret == 0) {
 8006e7c:	b958      	cbnz	r0, 8006e96 <lps22hh_auto_increment_set+0x2e>
    reg.if_add_inc = val;
 8006e7e:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006e82:	6825      	ldr	r5, [r4, #0]
 8006e84:	68a0      	ldr	r0, [r4, #8]
    reg.if_add_inc = val;
 8006e86:	f366 1304 	bfi	r3, r6, #4, #1
 8006e8a:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006e8e:	aa01      	add	r2, sp, #4
 8006e90:	2301      	movs	r3, #1
 8006e92:	2111      	movs	r1, #17
 8006e94:	47a8      	blx	r5
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t*) &reg, 1);
  }
  return ret;
}
 8006e96:	b002      	add	sp, #8
 8006e98:	bd70      	pop	{r4, r5, r6, pc}
 8006e9a:	bf00      	nop

08006e9c <lps22hh_lp_bandwidth_set>:
  * @param  val      change the values of lpfp_cfg in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_lp_bandwidth_set(lps22hh_ctx_t *ctx, lps22hh_lpfp_cfg_t val)
{
 8006e9c:	b570      	push	{r4, r5, r6, lr}
 8006e9e:	b082      	sub	sp, #8
 8006ea0:	4604      	mov	r4, r0
 8006ea2:	460e      	mov	r6, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006ea4:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8006ea8:	aa01      	add	r2, sp, #4
 8006eaa:	2301      	movs	r3, #1
 8006eac:	2110      	movs	r1, #16
 8006eae:	47a8      	blx	r5
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t*) &reg, 1);
  if (ret == 0) {
 8006eb0:	b958      	cbnz	r0, 8006eca <lps22hh_lp_bandwidth_set+0x2e>
    reg.lpfp_cfg = (uint8_t)val;
 8006eb2:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006eb6:	6825      	ldr	r5, [r4, #0]
 8006eb8:	68a0      	ldr	r0, [r4, #8]
    reg.lpfp_cfg = (uint8_t)val;
 8006eba:	f366 0383 	bfi	r3, r6, #2, #2
 8006ebe:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006ec2:	aa01      	add	r2, sp, #4
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	2110      	movs	r1, #16
 8006ec8:	47a8      	blx	r5
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t*) &reg, 1);
  }
  return ret;
}
 8006eca:	b002      	add	sp, #8
 8006ecc:	bd70      	pop	{r4, r5, r6, pc}
 8006ece:	bf00      	nop

08006ed0 <lps22hh_i3c_interface_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_i3c_interface_set(lps22hh_ctx_t *ctx,
                                  lps22hh_i3c_disable_t val)
{
 8006ed0:	b570      	push	{r4, r5, r6, lr}
 8006ed2:	b082      	sub	sp, #8
 8006ed4:	4604      	mov	r4, r0
 8006ed6:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006ed8:	e9d0 6001 	ldrd	r6, r0, [r0, #4]
 8006edc:	aa01      	add	r2, sp, #4
 8006ede:	2301      	movs	r3, #1
 8006ee0:	210e      	movs	r1, #14
 8006ee2:	47b0      	blx	r6
  lps22hh_if_ctrl_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_IF_CTRL, (uint8_t*) &reg, 1);
  if (ret == 0) {
 8006ee4:	b970      	cbnz	r0, 8006f04 <lps22hh_i3c_interface_set+0x34>
    reg.i3c_disable = ((uint8_t)val & 0x01u);
 8006ee6:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006eea:	6826      	ldr	r6, [r4, #0]
 8006eec:	68a0      	ldr	r0, [r4, #8]
    reg.i3c_disable = ((uint8_t)val & 0x01u);
 8006eee:	f365 0341 	bfi	r3, r5, #1, #1
    reg.int_en_i3c = ((uint8_t)val & 0x10U) >> 4;
 8006ef2:	092d      	lsrs	r5, r5, #4
 8006ef4:	f365 13c7 	bfi	r3, r5, #7, #1
 8006ef8:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006efc:	aa01      	add	r2, sp, #4
 8006efe:	2301      	movs	r3, #1
 8006f00:	210e      	movs	r1, #14
 8006f02:	47b0      	blx	r6
    ret = lps22hh_write_reg(ctx, LPS22HH_IF_CTRL, (uint8_t*) &reg, 1);
  }
  return ret;
}
 8006f04:	b002      	add	sp, #8
 8006f06:	bd70      	pop	{r4, r5, r6, pc}

08006f08 <LSM6DSO_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM6DSO sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GetCapabilities(LSM6DSO_Object_t *pObj, LSM6DSO_Capabilities_t *Capabilities)
{
 8006f08:	b430      	push	{r4, r5}
  Capabilities->GyroMaxFS    = 2000;
  Capabilities->AccMaxFS     = 16;
  Capabilities->MagMaxFS     = 0;
  Capabilities->GyroMaxOdr   = 6660.0f;
  Capabilities->AccMaxOdr    = 6660.0f;
  Capabilities->MagMaxOdr    = 0.0f;
 8006f0a:	2200      	movs	r2, #0
  Capabilities->GyroMaxOdr   = 6660.0f;
 8006f0c:	4b07      	ldr	r3, [pc, #28]	; (8006f2c <LSM6DSO_GetCapabilities+0x24>)
  Capabilities->MagMaxOdr    = 0.0f;
 8006f0e:	618a      	str	r2, [r1, #24]
  Capabilities->Acc          = 1;
 8006f10:	f240 1501 	movw	r5, #257	; 0x101
  Capabilities->GyroMaxFS    = 2000;
 8006f14:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
  Capabilities->MagMaxFS     = 0;
 8006f18:	2000      	movs	r0, #0
  Capabilities->AccMaxFS     = 16;
 8006f1a:	2210      	movs	r2, #16
  Capabilities->GyroMaxFS    = 2000;
 8006f1c:	e9c1 5400 	strd	r5, r4, [r1]
  Capabilities->MagMaxFS     = 0;
 8006f20:	e9c1 2002 	strd	r2, r0, [r1, #8]
  Capabilities->GyroMaxOdr   = 6660.0f;
 8006f24:	610b      	str	r3, [r1, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8006f26:	614b      	str	r3, [r1, #20]
  return LSM6DSO_OK;
}
 8006f28:	bc30      	pop	{r4, r5}
 8006f2a:	4770      	bx	lr
 8006f2c:	45d02000 	.word	0x45d02000

08006f30 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8006f30:	b410      	push	{r4}
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8006f32:	6944      	ldr	r4, [r0, #20]
 8006f34:	7b00      	ldrb	r0, [r0, #12]
 8006f36:	46a4      	mov	ip, r4
}
 8006f38:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8006f3c:	4760      	bx	ip
 8006f3e:	bf00      	nop

08006f40 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8006f40:	b410      	push	{r4}
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8006f42:	6904      	ldr	r4, [r0, #16]
 8006f44:	7b00      	ldrb	r0, [r0, #12]
 8006f46:	46a4      	mov	ip, r4
}
 8006f48:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8006f4c:	4760      	bx	ip
 8006f4e:	bf00      	nop

08006f50 <LSM6DSO_ACC_SetFullScale>:
           : (FullScale <= 4) ? LSM6DSO_4g
 8006f50:	2902      	cmp	r1, #2
{
 8006f52:	b508      	push	{r3, lr}
           : (FullScale <= 4) ? LSM6DSO_4g
 8006f54:	dd06      	ble.n	8006f64 <LSM6DSO_ACC_SetFullScale+0x14>
 8006f56:	2904      	cmp	r1, #4
 8006f58:	dd0d      	ble.n	8006f76 <LSM6DSO_ACC_SetFullScale+0x26>
 8006f5a:	2909      	cmp	r1, #9
 8006f5c:	bfb4      	ite	lt
 8006f5e:	2103      	movlt	r1, #3
 8006f60:	2101      	movge	r1, #1
 8006f62:	e000      	b.n	8006f66 <LSM6DSO_ACC_SetFullScale+0x16>
 8006f64:	2100      	movs	r1, #0
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8006f66:	301c      	adds	r0, #28
 8006f68:	f001 fa90 	bl	800848c <lsm6dso_xl_full_scale_set>
 8006f6c:	3000      	adds	r0, #0
 8006f6e:	bf18      	it	ne
 8006f70:	2001      	movne	r0, #1
}
 8006f72:	4240      	negs	r0, r0
 8006f74:	bd08      	pop	{r3, pc}
           : (FullScale <= 4) ? LSM6DSO_4g
 8006f76:	2102      	movs	r1, #2
 8006f78:	e7f5      	b.n	8006f66 <LSM6DSO_ACC_SetFullScale+0x16>
 8006f7a:	bf00      	nop

08006f7c <LSM6DSO_Init>:
{
 8006f7c:	b570      	push	{r4, r5, r6, lr}
  if (lsm6dso_i3c_disable_set(&(pObj->Ctx), LSM6DSO_I3C_DISABLE) != LSM6DSO_OK)
 8006f7e:	f100 041c 	add.w	r4, r0, #28
{
 8006f82:	4605      	mov	r5, r0
  if (lsm6dso_i3c_disable_set(&(pObj->Ctx), LSM6DSO_I3C_DISABLE) != LSM6DSO_OK)
 8006f84:	2180      	movs	r1, #128	; 0x80
 8006f86:	4620      	mov	r0, r4
 8006f88:	f001 fdaa 	bl	8008ae0 <lsm6dso_i3c_disable_set>
 8006f8c:	bb58      	cbnz	r0, 8006fe6 <LSM6DSO_Init+0x6a>
  if (lsm6dso_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8006f8e:	2101      	movs	r1, #1
 8006f90:	4620      	mov	r0, r4
 8006f92:	f001 fd8b 	bl	8008aac <lsm6dso_auto_increment_set>
 8006f96:	bb30      	cbnz	r0, 8006fe6 <LSM6DSO_Init+0x6a>
  if (lsm6dso_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8006f98:	2101      	movs	r1, #1
 8006f9a:	4620      	mov	r0, r4
 8006f9c:	f001 fb98 	bl	80086d0 <lsm6dso_block_data_update_set>
 8006fa0:	bb08      	cbnz	r0, 8006fe6 <LSM6DSO_Init+0x6a>
  if (lsm6dso_fifo_mode_set(&(pObj->Ctx), LSM6DSO_BYPASS_MODE) != LSM6DSO_OK)
 8006fa2:	4601      	mov	r1, r0
 8006fa4:	4620      	mov	r0, r4
 8006fa6:	f002 f9f5 	bl	8009394 <lsm6dso_fifo_mode_set>
 8006faa:	b9e0      	cbnz	r0, 8006fe6 <LSM6DSO_Init+0x6a>
  pObj->acc_odr = LSM6DSO_XL_ODR_104Hz;
 8006fac:	2604      	movs	r6, #4
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8006fae:	4601      	mov	r1, r0
  pObj->acc_odr = LSM6DSO_XL_ODR_104Hz;
 8006fb0:	f885 602b 	strb.w	r6, [r5, #43]	; 0x2b
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8006fb4:	4620      	mov	r0, r4
 8006fb6:	f001 fa9f 	bl	80084f8 <lsm6dso_xl_data_rate_set>
 8006fba:	b9a0      	cbnz	r0, 8006fe6 <LSM6DSO_Init+0x6a>
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), LSM6DSO_2g) != LSM6DSO_OK)
 8006fbc:	4601      	mov	r1, r0
 8006fbe:	4620      	mov	r0, r4
 8006fc0:	f001 fa64 	bl	800848c <lsm6dso_xl_full_scale_set>
 8006fc4:	b978      	cbnz	r0, 8006fe6 <LSM6DSO_Init+0x6a>
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8006fc6:	4601      	mov	r1, r0
  pObj->gyro_odr = LSM6DSO_GY_ODR_104Hz;
 8006fc8:	f885 602c 	strb.w	r6, [r5, #44]	; 0x2c
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8006fcc:	4620      	mov	r0, r4
 8006fce:	f001 fb2d 	bl	800862c <lsm6dso_gy_data_rate_set>
 8006fd2:	b940      	cbnz	r0, 8006fe6 <LSM6DSO_Init+0x6a>
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), LSM6DSO_2000dps) != LSM6DSO_OK)
 8006fd4:	4620      	mov	r0, r4
 8006fd6:	2106      	movs	r1, #6
 8006fd8:	f001 fae4 	bl	80085a4 <lsm6dso_gy_full_scale_set>
 8006fdc:	b918      	cbnz	r0, 8006fe6 <LSM6DSO_Init+0x6a>
  pObj->is_initialized = 1;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
}
 8006fe4:	bd70      	pop	{r4, r5, r6, pc}
    return LSM6DSO_ERROR;
 8006fe6:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006fea:	bd70      	pop	{r4, r5, r6, pc}

08006fec <LSM6DSO_GYRO_SetFullScale>:
           : (FullScale <= 250)  ? LSM6DSO_250dps
 8006fec:	297d      	cmp	r1, #125	; 0x7d
{
 8006fee:	b508      	push	{r3, lr}
           : (FullScale <= 250)  ? LSM6DSO_250dps
 8006ff0:	dd0a      	ble.n	8007008 <LSM6DSO_GYRO_SetFullScale+0x1c>
 8006ff2:	29fa      	cmp	r1, #250	; 0xfa
 8006ff4:	dd11      	ble.n	800701a <LSM6DSO_GYRO_SetFullScale+0x2e>
 8006ff6:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
 8006ffa:	dd10      	ble.n	800701e <LSM6DSO_GYRO_SetFullScale+0x32>
 8006ffc:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 8007000:	bfd4      	ite	le
 8007002:	2104      	movle	r1, #4
 8007004:	2106      	movgt	r1, #6
 8007006:	e000      	b.n	800700a <LSM6DSO_GYRO_SetFullScale+0x1e>
 8007008:	2101      	movs	r1, #1
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 800700a:	301c      	adds	r0, #28
 800700c:	f001 faca 	bl	80085a4 <lsm6dso_gy_full_scale_set>
 8007010:	3000      	adds	r0, #0
 8007012:	bf18      	it	ne
 8007014:	2001      	movne	r0, #1
}
 8007016:	4240      	negs	r0, r0
 8007018:	bd08      	pop	{r3, pc}
           : (FullScale <= 250)  ? LSM6DSO_250dps
 800701a:	2100      	movs	r1, #0
 800701c:	e7f5      	b.n	800700a <LSM6DSO_GYRO_SetFullScale+0x1e>
 800701e:	2102      	movs	r1, #2
 8007020:	e7f3      	b.n	800700a <LSM6DSO_GYRO_SetFullScale+0x1e>
 8007022:	bf00      	nop

08007024 <LSM6DSO_ReadID>:
{
 8007024:	b508      	push	{r3, lr}
  if (lsm6dso_device_id_get(&(pObj->Ctx), Id) != LSM6DSO_OK)
 8007026:	301c      	adds	r0, #28
 8007028:	f001 fd36 	bl	8008a98 <lsm6dso_device_id_get>
 800702c:	3000      	adds	r0, #0
 800702e:	bf18      	it	ne
 8007030:	2001      	movne	r0, #1
}
 8007032:	4240      	negs	r0, r0
 8007034:	bd08      	pop	{r3, pc}
 8007036:	bf00      	nop

08007038 <LSM6DSO_ACC_GetOutputDataRate>:
{
 8007038:	b510      	push	{r4, lr}
 800703a:	b082      	sub	sp, #8
 800703c:	460c      	mov	r4, r1
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 800703e:	301c      	adds	r0, #28
 8007040:	f10d 0107 	add.w	r1, sp, #7
 8007044:	f001 fa72 	bl	800852c <lsm6dso_xl_data_rate_get>
 8007048:	2800      	cmp	r0, #0
 800704a:	d130      	bne.n	80070ae <LSM6DSO_ACC_GetOutputDataRate+0x76>
  switch (odr_low_level)
 800704c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007050:	2b0b      	cmp	r3, #11
 8007052:	d82c      	bhi.n	80070ae <LSM6DSO_ACC_GetOutputDataRate+0x76>
 8007054:	e8df f003 	tbb	[pc, r3]
 8007058:	13100d0a 	.word	0x13100d0a
 800705c:	1f1c1916 	.word	0x1f1c1916
 8007060:	06282522 	.word	0x06282522
      *Odr = 6.5f;
 8007064:	4b13      	ldr	r3, [pc, #76]	; (80070b4 <LSM6DSO_ACC_GetOutputDataRate+0x7c>)
 8007066:	6023      	str	r3, [r4, #0]
}
 8007068:	b002      	add	sp, #8
 800706a:	bd10      	pop	{r4, pc}
      *Odr = 0.0f;
 800706c:	2300      	movs	r3, #0
 800706e:	6023      	str	r3, [r4, #0]
      break;
 8007070:	e7fa      	b.n	8007068 <LSM6DSO_ACC_GetOutputDataRate+0x30>
      *Odr = 12.5f;
 8007072:	4b11      	ldr	r3, [pc, #68]	; (80070b8 <LSM6DSO_ACC_GetOutputDataRate+0x80>)
 8007074:	6023      	str	r3, [r4, #0]
      break;
 8007076:	e7f7      	b.n	8007068 <LSM6DSO_ACC_GetOutputDataRate+0x30>
      *Odr = 26.0f;
 8007078:	4b10      	ldr	r3, [pc, #64]	; (80070bc <LSM6DSO_ACC_GetOutputDataRate+0x84>)
 800707a:	6023      	str	r3, [r4, #0]
      break;
 800707c:	e7f4      	b.n	8007068 <LSM6DSO_ACC_GetOutputDataRate+0x30>
      *Odr = 52.0f;
 800707e:	4b10      	ldr	r3, [pc, #64]	; (80070c0 <LSM6DSO_ACC_GetOutputDataRate+0x88>)
 8007080:	6023      	str	r3, [r4, #0]
      break;
 8007082:	e7f1      	b.n	8007068 <LSM6DSO_ACC_GetOutputDataRate+0x30>
      *Odr = 104.0f;
 8007084:	4b0f      	ldr	r3, [pc, #60]	; (80070c4 <LSM6DSO_ACC_GetOutputDataRate+0x8c>)
 8007086:	6023      	str	r3, [r4, #0]
      break;
 8007088:	e7ee      	b.n	8007068 <LSM6DSO_ACC_GetOutputDataRate+0x30>
      *Odr = 208.0f;
 800708a:	4b0f      	ldr	r3, [pc, #60]	; (80070c8 <LSM6DSO_ACC_GetOutputDataRate+0x90>)
 800708c:	6023      	str	r3, [r4, #0]
      break;
 800708e:	e7eb      	b.n	8007068 <LSM6DSO_ACC_GetOutputDataRate+0x30>
      *Odr = 417.0f;
 8007090:	4b0e      	ldr	r3, [pc, #56]	; (80070cc <LSM6DSO_ACC_GetOutputDataRate+0x94>)
 8007092:	6023      	str	r3, [r4, #0]
      break;
 8007094:	e7e8      	b.n	8007068 <LSM6DSO_ACC_GetOutputDataRate+0x30>
      *Odr = 833.0f;
 8007096:	4b0e      	ldr	r3, [pc, #56]	; (80070d0 <LSM6DSO_ACC_GetOutputDataRate+0x98>)
 8007098:	6023      	str	r3, [r4, #0]
      break;
 800709a:	e7e5      	b.n	8007068 <LSM6DSO_ACC_GetOutputDataRate+0x30>
      *Odr = 1667.0f;
 800709c:	4b0d      	ldr	r3, [pc, #52]	; (80070d4 <LSM6DSO_ACC_GetOutputDataRate+0x9c>)
 800709e:	6023      	str	r3, [r4, #0]
      break;
 80070a0:	e7e2      	b.n	8007068 <LSM6DSO_ACC_GetOutputDataRate+0x30>
      *Odr = 3333.0f;
 80070a2:	4b0d      	ldr	r3, [pc, #52]	; (80070d8 <LSM6DSO_ACC_GetOutputDataRate+0xa0>)
 80070a4:	6023      	str	r3, [r4, #0]
      break;
 80070a6:	e7df      	b.n	8007068 <LSM6DSO_ACC_GetOutputDataRate+0x30>
      *Odr = 6667.0f;
 80070a8:	4b0c      	ldr	r3, [pc, #48]	; (80070dc <LSM6DSO_ACC_GetOutputDataRate+0xa4>)
 80070aa:	6023      	str	r3, [r4, #0]
      break;
 80070ac:	e7dc      	b.n	8007068 <LSM6DSO_ACC_GetOutputDataRate+0x30>
      ret = LSM6DSO_ERROR;
 80070ae:	f04f 30ff 	mov.w	r0, #4294967295
 80070b2:	e7d9      	b.n	8007068 <LSM6DSO_ACC_GetOutputDataRate+0x30>
 80070b4:	40d00000 	.word	0x40d00000
 80070b8:	41480000 	.word	0x41480000
 80070bc:	41d00000 	.word	0x41d00000
 80070c0:	42500000 	.word	0x42500000
 80070c4:	42d00000 	.word	0x42d00000
 80070c8:	43500000 	.word	0x43500000
 80070cc:	43d08000 	.word	0x43d08000
 80070d0:	44504000 	.word	0x44504000
 80070d4:	44d06000 	.word	0x44d06000
 80070d8:	45505000 	.word	0x45505000
 80070dc:	45d05800 	.word	0x45d05800

080070e0 <LSM6DSO_ACC_GetSensitivity>:
{
 80070e0:	b510      	push	{r4, lr}
 80070e2:	b082      	sub	sp, #8
 80070e4:	460c      	mov	r4, r1
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 80070e6:	301c      	adds	r0, #28
 80070e8:	f10d 0107 	add.w	r1, sp, #7
 80070ec:	f001 f9e8 	bl	80084c0 <lsm6dso_xl_full_scale_get>
 80070f0:	b9b8      	cbnz	r0, 8007122 <LSM6DSO_ACC_GetSensitivity+0x42>
  switch (full_scale)
 80070f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80070f6:	2b03      	cmp	r3, #3
 80070f8:	d813      	bhi.n	8007122 <LSM6DSO_ACC_GetSensitivity+0x42>
 80070fa:	e8df f003 	tbb	[pc, r3]
 80070fe:	0a06      	.short	0x0a06
 8007100:	020e      	.short	0x020e
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_8G;
 8007102:	4b09      	ldr	r3, [pc, #36]	; (8007128 <LSM6DSO_ACC_GetSensitivity+0x48>)
 8007104:	6023      	str	r3, [r4, #0]
}
 8007106:	b002      	add	sp, #8
 8007108:	bd10      	pop	{r4, pc}
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_2G;
 800710a:	4b08      	ldr	r3, [pc, #32]	; (800712c <LSM6DSO_ACC_GetSensitivity+0x4c>)
 800710c:	6023      	str	r3, [r4, #0]
}
 800710e:	b002      	add	sp, #8
 8007110:	bd10      	pop	{r4, pc}
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_16G;
 8007112:	4b07      	ldr	r3, [pc, #28]	; (8007130 <LSM6DSO_ACC_GetSensitivity+0x50>)
 8007114:	6023      	str	r3, [r4, #0]
}
 8007116:	b002      	add	sp, #8
 8007118:	bd10      	pop	{r4, pc}
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_4G;
 800711a:	4b06      	ldr	r3, [pc, #24]	; (8007134 <LSM6DSO_ACC_GetSensitivity+0x54>)
 800711c:	6023      	str	r3, [r4, #0]
}
 800711e:	b002      	add	sp, #8
 8007120:	bd10      	pop	{r4, pc}
      ret = LSM6DSO_ERROR;
 8007122:	f04f 30ff 	mov.w	r0, #4294967295
 8007126:	e7ee      	b.n	8007106 <LSM6DSO_ACC_GetSensitivity+0x26>
 8007128:	3e79db23 	.word	0x3e79db23
 800712c:	3d79db23 	.word	0x3d79db23
 8007130:	3ef9db23 	.word	0x3ef9db23
 8007134:	3df9db23 	.word	0x3df9db23

08007138 <LSM6DSO_ACC_GetFullScale>:
{
 8007138:	b510      	push	{r4, lr}
 800713a:	b082      	sub	sp, #8
 800713c:	460c      	mov	r4, r1
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 800713e:	301c      	adds	r0, #28
 8007140:	f10d 0107 	add.w	r1, sp, #7
 8007144:	f001 f9bc 	bl	80084c0 <lsm6dso_xl_full_scale_get>
 8007148:	b9b8      	cbnz	r0, 800717a <LSM6DSO_ACC_GetFullScale+0x42>
  switch (fs_low_level)
 800714a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800714e:	2b03      	cmp	r3, #3
 8007150:	d813      	bhi.n	800717a <LSM6DSO_ACC_GetFullScale+0x42>
 8007152:	e8df f003 	tbb	[pc, r3]
 8007156:	0a06      	.short	0x0a06
 8007158:	020e      	.short	0x020e
      *FullScale =  8;
 800715a:	2308      	movs	r3, #8
 800715c:	6023      	str	r3, [r4, #0]
}
 800715e:	b002      	add	sp, #8
 8007160:	bd10      	pop	{r4, pc}
      *FullScale =  2;
 8007162:	2302      	movs	r3, #2
 8007164:	6023      	str	r3, [r4, #0]
}
 8007166:	b002      	add	sp, #8
 8007168:	bd10      	pop	{r4, pc}
      *FullScale = 16;
 800716a:	2310      	movs	r3, #16
 800716c:	6023      	str	r3, [r4, #0]
}
 800716e:	b002      	add	sp, #8
 8007170:	bd10      	pop	{r4, pc}
      *FullScale =  4;
 8007172:	2304      	movs	r3, #4
 8007174:	6023      	str	r3, [r4, #0]
}
 8007176:	b002      	add	sp, #8
 8007178:	bd10      	pop	{r4, pc}
      ret = LSM6DSO_ERROR;
 800717a:	f04f 30ff 	mov.w	r0, #4294967295
 800717e:	e7ee      	b.n	800715e <LSM6DSO_ACC_GetFullScale+0x26>

08007180 <LSM6DSO_ACC_GetAxesRaw>:
{
 8007180:	b510      	push	{r4, lr}
 8007182:	b082      	sub	sp, #8
 8007184:	460c      	mov	r4, r1
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSO_OK)
 8007186:	301c      	adds	r0, #28
 8007188:	4669      	mov	r1, sp
 800718a:	f001 fac5 	bl	8008718 <lsm6dso_acceleration_raw_get>
 800718e:	b930      	cbnz	r0, 800719e <LSM6DSO_ACC_GetAxesRaw+0x1e>
  Value->x = data_raw.i16bit[0];
 8007190:	9a00      	ldr	r2, [sp, #0]
  Value->z = data_raw.i16bit[2];
 8007192:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  Value->x = data_raw.i16bit[0];
 8007196:	6022      	str	r2, [r4, #0]
  Value->z = data_raw.i16bit[2];
 8007198:	80a3      	strh	r3, [r4, #4]
}
 800719a:	b002      	add	sp, #8
 800719c:	bd10      	pop	{r4, pc}
    return LSM6DSO_ERROR;
 800719e:	f04f 30ff 	mov.w	r0, #4294967295
 80071a2:	e7fa      	b.n	800719a <LSM6DSO_ACC_GetAxesRaw+0x1a>

080071a4 <LSM6DSO_GYRO_GetOutputDataRate>:
{
 80071a4:	b510      	push	{r4, lr}
 80071a6:	b082      	sub	sp, #8
 80071a8:	460c      	mov	r4, r1
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 80071aa:	301c      	adds	r0, #28
 80071ac:	f10d 0107 	add.w	r1, sp, #7
 80071b0:	f001 fa56 	bl	8008660 <lsm6dso_gy_data_rate_get>
 80071b4:	2800      	cmp	r0, #0
 80071b6:	d12d      	bne.n	8007214 <LSM6DSO_GYRO_GetOutputDataRate+0x70>
  switch (odr_low_level)
 80071b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80071bc:	2b0a      	cmp	r3, #10
 80071be:	d829      	bhi.n	8007214 <LSM6DSO_GYRO_GetOutputDataRate+0x70>
 80071c0:	e8df f003 	tbb	[pc, r3]
 80071c4:	13100d0a 	.word	0x13100d0a
 80071c8:	1f1c1916 	.word	0x1f1c1916
 80071cc:	2522      	.short	0x2522
 80071ce:	06          	.byte	0x06
 80071cf:	00          	.byte	0x00
      *Odr = 6667.0f;
 80071d0:	4b12      	ldr	r3, [pc, #72]	; (800721c <LSM6DSO_GYRO_GetOutputDataRate+0x78>)
 80071d2:	6023      	str	r3, [r4, #0]
}
 80071d4:	b002      	add	sp, #8
 80071d6:	bd10      	pop	{r4, pc}
      *Odr = 0.0f;
 80071d8:	2300      	movs	r3, #0
 80071da:	6023      	str	r3, [r4, #0]
      break;
 80071dc:	e7fa      	b.n	80071d4 <LSM6DSO_GYRO_GetOutputDataRate+0x30>
      *Odr = 12.5f;
 80071de:	4b10      	ldr	r3, [pc, #64]	; (8007220 <LSM6DSO_GYRO_GetOutputDataRate+0x7c>)
 80071e0:	6023      	str	r3, [r4, #0]
      break;
 80071e2:	e7f7      	b.n	80071d4 <LSM6DSO_GYRO_GetOutputDataRate+0x30>
      *Odr = 26.0f;
 80071e4:	4b0f      	ldr	r3, [pc, #60]	; (8007224 <LSM6DSO_GYRO_GetOutputDataRate+0x80>)
 80071e6:	6023      	str	r3, [r4, #0]
      break;
 80071e8:	e7f4      	b.n	80071d4 <LSM6DSO_GYRO_GetOutputDataRate+0x30>
      *Odr = 52.0f;
 80071ea:	4b0f      	ldr	r3, [pc, #60]	; (8007228 <LSM6DSO_GYRO_GetOutputDataRate+0x84>)
 80071ec:	6023      	str	r3, [r4, #0]
      break;
 80071ee:	e7f1      	b.n	80071d4 <LSM6DSO_GYRO_GetOutputDataRate+0x30>
      *Odr = 104.0f;
 80071f0:	4b0e      	ldr	r3, [pc, #56]	; (800722c <LSM6DSO_GYRO_GetOutputDataRate+0x88>)
 80071f2:	6023      	str	r3, [r4, #0]
      break;
 80071f4:	e7ee      	b.n	80071d4 <LSM6DSO_GYRO_GetOutputDataRate+0x30>
      *Odr = 208.0f;
 80071f6:	4b0e      	ldr	r3, [pc, #56]	; (8007230 <LSM6DSO_GYRO_GetOutputDataRate+0x8c>)
 80071f8:	6023      	str	r3, [r4, #0]
      break;
 80071fa:	e7eb      	b.n	80071d4 <LSM6DSO_GYRO_GetOutputDataRate+0x30>
      *Odr = 417.0f;
 80071fc:	4b0d      	ldr	r3, [pc, #52]	; (8007234 <LSM6DSO_GYRO_GetOutputDataRate+0x90>)
 80071fe:	6023      	str	r3, [r4, #0]
      break;
 8007200:	e7e8      	b.n	80071d4 <LSM6DSO_GYRO_GetOutputDataRate+0x30>
      *Odr = 833.0f;
 8007202:	4b0d      	ldr	r3, [pc, #52]	; (8007238 <LSM6DSO_GYRO_GetOutputDataRate+0x94>)
 8007204:	6023      	str	r3, [r4, #0]
      break;
 8007206:	e7e5      	b.n	80071d4 <LSM6DSO_GYRO_GetOutputDataRate+0x30>
      *Odr = 1667.0f;
 8007208:	4b0c      	ldr	r3, [pc, #48]	; (800723c <LSM6DSO_GYRO_GetOutputDataRate+0x98>)
 800720a:	6023      	str	r3, [r4, #0]
      break;
 800720c:	e7e2      	b.n	80071d4 <LSM6DSO_GYRO_GetOutputDataRate+0x30>
      *Odr = 3333.0f;
 800720e:	4b0c      	ldr	r3, [pc, #48]	; (8007240 <LSM6DSO_GYRO_GetOutputDataRate+0x9c>)
 8007210:	6023      	str	r3, [r4, #0]
      break;
 8007212:	e7df      	b.n	80071d4 <LSM6DSO_GYRO_GetOutputDataRate+0x30>
      ret = LSM6DSO_ERROR;
 8007214:	f04f 30ff 	mov.w	r0, #4294967295
 8007218:	e7dc      	b.n	80071d4 <LSM6DSO_GYRO_GetOutputDataRate+0x30>
 800721a:	bf00      	nop
 800721c:	45d05800 	.word	0x45d05800
 8007220:	41480000 	.word	0x41480000
 8007224:	41d00000 	.word	0x41d00000
 8007228:	42500000 	.word	0x42500000
 800722c:	42d00000 	.word	0x42d00000
 8007230:	43500000 	.word	0x43500000
 8007234:	43d08000 	.word	0x43d08000
 8007238:	44504000 	.word	0x44504000
 800723c:	44d06000 	.word	0x44d06000
 8007240:	45505000 	.word	0x45505000

08007244 <LSM6DSO_GYRO_GetSensitivity>:
{
 8007244:	b510      	push	{r4, lr}
 8007246:	b082      	sub	sp, #8
 8007248:	460c      	mov	r4, r1
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 800724a:	301c      	adds	r0, #28
 800724c:	f10d 0107 	add.w	r1, sp, #7
 8007250:	f001 f9c2 	bl	80085d8 <lsm6dso_gy_full_scale_get>
 8007254:	b9e8      	cbnz	r0, 8007292 <LSM6DSO_GYRO_GetSensitivity+0x4e>
  switch (full_scale)
 8007256:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800725a:	2b06      	cmp	r3, #6
 800725c:	d819      	bhi.n	8007292 <LSM6DSO_GYRO_GetSensitivity+0x4e>
 800725e:	e8df f003 	tbb	[pc, r3]
 8007262:	0c08      	.short	0x0c08
 8007264:	18141810 	.word	0x18141810
 8007268:	04          	.byte	0x04
 8007269:	00          	.byte	0x00
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_2000DPS;
 800726a:	4b0c      	ldr	r3, [pc, #48]	; (800729c <LSM6DSO_GYRO_GetSensitivity+0x58>)
 800726c:	6023      	str	r3, [r4, #0]
}
 800726e:	b002      	add	sp, #8
 8007270:	bd10      	pop	{r4, pc}
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_250DPS;
 8007272:	4b0b      	ldr	r3, [pc, #44]	; (80072a0 <LSM6DSO_GYRO_GetSensitivity+0x5c>)
 8007274:	6023      	str	r3, [r4, #0]
}
 8007276:	b002      	add	sp, #8
 8007278:	bd10      	pop	{r4, pc}
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_125DPS;
 800727a:	4b0a      	ldr	r3, [pc, #40]	; (80072a4 <LSM6DSO_GYRO_GetSensitivity+0x60>)
 800727c:	6023      	str	r3, [r4, #0]
}
 800727e:	b002      	add	sp, #8
 8007280:	bd10      	pop	{r4, pc}
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_500DPS;
 8007282:	4b09      	ldr	r3, [pc, #36]	; (80072a8 <LSM6DSO_GYRO_GetSensitivity+0x64>)
 8007284:	6023      	str	r3, [r4, #0]
}
 8007286:	b002      	add	sp, #8
 8007288:	bd10      	pop	{r4, pc}
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_1000DPS;
 800728a:	4b08      	ldr	r3, [pc, #32]	; (80072ac <LSM6DSO_GYRO_GetSensitivity+0x68>)
 800728c:	6023      	str	r3, [r4, #0]
}
 800728e:	b002      	add	sp, #8
 8007290:	bd10      	pop	{r4, pc}
      ret = LSM6DSO_ERROR;
 8007292:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007296:	b002      	add	sp, #8
 8007298:	bd10      	pop	{r4, pc}
 800729a:	bf00      	nop
 800729c:	428c0000 	.word	0x428c0000
 80072a0:	410c0000 	.word	0x410c0000
 80072a4:	408c0000 	.word	0x408c0000
 80072a8:	418c0000 	.word	0x418c0000
 80072ac:	420c0000 	.word	0x420c0000

080072b0 <LSM6DSO_GYRO_GetFullScale>:
{
 80072b0:	b510      	push	{r4, lr}
 80072b2:	b082      	sub	sp, #8
 80072b4:	460c      	mov	r4, r1
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 80072b6:	301c      	adds	r0, #28
 80072b8:	f10d 0107 	add.w	r1, sp, #7
 80072bc:	f001 f98c 	bl	80085d8 <lsm6dso_gy_full_scale_get>
 80072c0:	bb00      	cbnz	r0, 8007304 <LSM6DSO_GYRO_GetFullScale+0x54>
  switch (fs_low_level)
 80072c2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80072c6:	2b06      	cmp	r3, #6
 80072c8:	d81c      	bhi.n	8007304 <LSM6DSO_GYRO_GetFullScale+0x54>
 80072ca:	e8df f003 	tbb	[pc, r3]
 80072ce:	0d09      	.short	0x0d09
 80072d0:	1b161b11 	.word	0x1b161b11
 80072d4:	04          	.byte	0x04
 80072d5:	00          	.byte	0x00
      *FullScale = 2000;
 80072d6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80072da:	6023      	str	r3, [r4, #0]
}
 80072dc:	b002      	add	sp, #8
 80072de:	bd10      	pop	{r4, pc}
      *FullScale =  250;
 80072e0:	23fa      	movs	r3, #250	; 0xfa
 80072e2:	6023      	str	r3, [r4, #0]
}
 80072e4:	b002      	add	sp, #8
 80072e6:	bd10      	pop	{r4, pc}
      *FullScale =  125;
 80072e8:	237d      	movs	r3, #125	; 0x7d
 80072ea:	6023      	str	r3, [r4, #0]
}
 80072ec:	b002      	add	sp, #8
 80072ee:	bd10      	pop	{r4, pc}
      *FullScale =  500;
 80072f0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80072f4:	6023      	str	r3, [r4, #0]
}
 80072f6:	b002      	add	sp, #8
 80072f8:	bd10      	pop	{r4, pc}
      *FullScale = 1000;
 80072fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80072fe:	6023      	str	r3, [r4, #0]
}
 8007300:	b002      	add	sp, #8
 8007302:	bd10      	pop	{r4, pc}
      ret = LSM6DSO_ERROR;
 8007304:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007308:	b002      	add	sp, #8
 800730a:	bd10      	pop	{r4, pc}

0800730c <LSM6DSO_GYRO_GetAxesRaw>:
{
 800730c:	b510      	push	{r4, lr}
 800730e:	b082      	sub	sp, #8
 8007310:	460c      	mov	r4, r1
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSO_OK)
 8007312:	301c      	adds	r0, #28
 8007314:	4669      	mov	r1, sp
 8007316:	f001 f9f5 	bl	8008704 <lsm6dso_angular_rate_raw_get>
 800731a:	b930      	cbnz	r0, 800732a <LSM6DSO_GYRO_GetAxesRaw+0x1e>
  Value->x = data_raw.i16bit[0];
 800731c:	9a00      	ldr	r2, [sp, #0]
  Value->z = data_raw.i16bit[2];
 800731e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  Value->x = data_raw.i16bit[0];
 8007322:	6022      	str	r2, [r4, #0]
  Value->z = data_raw.i16bit[2];
 8007324:	80a3      	strh	r3, [r4, #4]
}
 8007326:	b002      	add	sp, #8
 8007328:	bd10      	pop	{r4, pc}
    return LSM6DSO_ERROR;
 800732a:	f04f 30ff 	mov.w	r0, #4294967295
 800732e:	e7fa      	b.n	8007326 <LSM6DSO_GYRO_GetAxesRaw+0x1a>

08007330 <LSM6DSO_GYRO_SetOutputDataRate>:
{
 8007330:	b508      	push	{r3, lr}
 8007332:	ee07 1a90 	vmov	s15, r1
  if (pObj->gyro_is_enabled == 1U)
 8007336:	f890 102a 	ldrb.w	r1, [r0, #42]	; 0x2a
          : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 800733a:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
  if (pObj->gyro_is_enabled == 1U)
 800733e:	2901      	cmp	r1, #1
          : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8007340:	eef4 7ac7 	vcmpe.f32	s15, s14
  if (pObj->gyro_is_enabled == 1U)
 8007344:	d042      	beq.n	80073cc <LSM6DSO_GYRO_SetOutputDataRate+0x9c>
                 : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8007346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800734a:	d93a      	bls.n	80073c2 <LSM6DSO_GYRO_SetOutputDataRate+0x92>
 800734c:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8007350:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007358:	d97f      	bls.n	800745a <LSM6DSO_GYRO_SetOutputDataRate+0x12a>
 800735a:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8007490 <LSM6DSO_GYRO_SetOutputDataRate+0x160>
 800735e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007366:	d976      	bls.n	8007456 <LSM6DSO_GYRO_SetOutputDataRate+0x126>
 8007368:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8007494 <LSM6DSO_GYRO_SetOutputDataRate+0x164>
 800736c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007374:	d975      	bls.n	8007462 <LSM6DSO_GYRO_SetOutputDataRate+0x132>
 8007376:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8007498 <LSM6DSO_GYRO_SetOutputDataRate+0x168>
 800737a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800737e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007382:	d972      	bls.n	800746a <LSM6DSO_GYRO_SetOutputDataRate+0x13a>
 8007384:	ed9f 7a45 	vldr	s14, [pc, #276]	; 800749c <LSM6DSO_GYRO_SetOutputDataRate+0x16c>
 8007388:	eef4 7ac7 	vcmpe.f32	s15, s14
 800738c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007390:	d96f      	bls.n	8007472 <LSM6DSO_GYRO_SetOutputDataRate+0x142>
 8007392:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80074a0 <LSM6DSO_GYRO_SetOutputDataRate+0x170>
 8007396:	eef4 7ac7 	vcmpe.f32	s15, s14
 800739a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800739e:	d96c      	bls.n	800747a <LSM6DSO_GYRO_SetOutputDataRate+0x14a>
 80073a0:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80074a4 <LSM6DSO_GYRO_SetOutputDataRate+0x174>
 80073a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80073a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073ac:	d969      	bls.n	8007482 <LSM6DSO_GYRO_SetOutputDataRate+0x152>
 80073ae:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80074a8 <LSM6DSO_GYRO_SetOutputDataRate+0x178>
 80073b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80073b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073ba:	bf94      	ite	ls
 80073bc:	2309      	movls	r3, #9
 80073be:	230a      	movhi	r3, #10
 80073c0:	e000      	b.n	80073c4 <LSM6DSO_GYRO_SetOutputDataRate+0x94>
 80073c2:	2301      	movs	r3, #1
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 80073c4:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
    return LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 80073c8:	2000      	movs	r0, #0
}
 80073ca:	bd08      	pop	{r3, pc}
          : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 80073cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073d0:	d939      	bls.n	8007446 <LSM6DSO_GYRO_SetOutputDataRate+0x116>
 80073d2:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80073d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80073da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073de:	d93e      	bls.n	800745e <LSM6DSO_GYRO_SetOutputDataRate+0x12e>
 80073e0:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8007490 <LSM6DSO_GYRO_SetOutputDataRate+0x160>
 80073e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80073e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073ec:	d93b      	bls.n	8007466 <LSM6DSO_GYRO_SetOutputDataRate+0x136>
 80073ee:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8007494 <LSM6DSO_GYRO_SetOutputDataRate+0x164>
 80073f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80073f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073fa:	d938      	bls.n	800746e <LSM6DSO_GYRO_SetOutputDataRate+0x13e>
 80073fc:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8007498 <LSM6DSO_GYRO_SetOutputDataRate+0x168>
 8007400:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007408:	d935      	bls.n	8007476 <LSM6DSO_GYRO_SetOutputDataRate+0x146>
 800740a:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800749c <LSM6DSO_GYRO_SetOutputDataRate+0x16c>
 800740e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007416:	d932      	bls.n	800747e <LSM6DSO_GYRO_SetOutputDataRate+0x14e>
 8007418:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80074a0 <LSM6DSO_GYRO_SetOutputDataRate+0x170>
 800741c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007424:	d92f      	bls.n	8007486 <LSM6DSO_GYRO_SetOutputDataRate+0x156>
 8007426:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80074a4 <LSM6DSO_GYRO_SetOutputDataRate+0x174>
 800742a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800742e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007432:	d92a      	bls.n	800748a <LSM6DSO_GYRO_SetOutputDataRate+0x15a>
 8007434:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80074a8 <LSM6DSO_GYRO_SetOutputDataRate+0x178>
 8007438:	eef4 7ac7 	vcmpe.f32	s15, s14
 800743c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007440:	bf94      	ite	ls
 8007442:	2109      	movls	r1, #9
 8007444:	210a      	movhi	r1, #10
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8007446:	301c      	adds	r0, #28
 8007448:	f001 f8f0 	bl	800862c <lsm6dso_gy_data_rate_set>
 800744c:	3000      	adds	r0, #0
 800744e:	bf18      	it	ne
 8007450:	2001      	movne	r0, #1
 8007452:	4240      	negs	r0, r0
}
 8007454:	bd08      	pop	{r3, pc}
                 : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8007456:	2303      	movs	r3, #3
 8007458:	e7b4      	b.n	80073c4 <LSM6DSO_GYRO_SetOutputDataRate+0x94>
 800745a:	2302      	movs	r3, #2
 800745c:	e7b2      	b.n	80073c4 <LSM6DSO_GYRO_SetOutputDataRate+0x94>
          : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 800745e:	2102      	movs	r1, #2
 8007460:	e7f1      	b.n	8007446 <LSM6DSO_GYRO_SetOutputDataRate+0x116>
                 : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8007462:	2304      	movs	r3, #4
 8007464:	e7ae      	b.n	80073c4 <LSM6DSO_GYRO_SetOutputDataRate+0x94>
          : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8007466:	2103      	movs	r1, #3
 8007468:	e7ed      	b.n	8007446 <LSM6DSO_GYRO_SetOutputDataRate+0x116>
                 : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 800746a:	2305      	movs	r3, #5
 800746c:	e7aa      	b.n	80073c4 <LSM6DSO_GYRO_SetOutputDataRate+0x94>
          : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 800746e:	2104      	movs	r1, #4
 8007470:	e7e9      	b.n	8007446 <LSM6DSO_GYRO_SetOutputDataRate+0x116>
                 : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8007472:	2306      	movs	r3, #6
 8007474:	e7a6      	b.n	80073c4 <LSM6DSO_GYRO_SetOutputDataRate+0x94>
          : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8007476:	2105      	movs	r1, #5
 8007478:	e7e5      	b.n	8007446 <LSM6DSO_GYRO_SetOutputDataRate+0x116>
                 : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 800747a:	2307      	movs	r3, #7
 800747c:	e7a2      	b.n	80073c4 <LSM6DSO_GYRO_SetOutputDataRate+0x94>
          : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 800747e:	2106      	movs	r1, #6
 8007480:	e7e1      	b.n	8007446 <LSM6DSO_GYRO_SetOutputDataRate+0x116>
                 : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8007482:	2308      	movs	r3, #8
 8007484:	e79e      	b.n	80073c4 <LSM6DSO_GYRO_SetOutputDataRate+0x94>
          : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8007486:	2107      	movs	r1, #7
 8007488:	e7dd      	b.n	8007446 <LSM6DSO_GYRO_SetOutputDataRate+0x116>
 800748a:	2108      	movs	r1, #8
 800748c:	e7db      	b.n	8007446 <LSM6DSO_GYRO_SetOutputDataRate+0x116>
 800748e:	bf00      	nop
 8007490:	42500000 	.word	0x42500000
 8007494:	42d00000 	.word	0x42d00000
 8007498:	43500000 	.word	0x43500000
 800749c:	43d08000 	.word	0x43d08000
 80074a0:	44504000 	.word	0x44504000
 80074a4:	44d06000 	.word	0x44d06000
 80074a8:	45505000 	.word	0x45505000

080074ac <LSM6DSO_ACC_Enable>:
  if (pObj->acc_is_enabled == 1U)
 80074ac:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	d00b      	beq.n	80074cc <LSM6DSO_ACC_Enable+0x20>
{
 80074b4:	b510      	push	{r4, lr}
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO_OK)
 80074b6:	f890 102b 	ldrb.w	r1, [r0, #43]	; 0x2b
 80074ba:	4604      	mov	r4, r0
 80074bc:	301c      	adds	r0, #28
 80074be:	f001 f81b 	bl	80084f8 <lsm6dso_xl_data_rate_set>
 80074c2:	b928      	cbnz	r0, 80074d0 <LSM6DSO_ACC_Enable+0x24>
  pObj->acc_is_enabled = 1;
 80074c4:	2301      	movs	r3, #1
 80074c6:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
}
 80074ca:	bd10      	pop	{r4, pc}
    return LSM6DSO_OK;
 80074cc:	2000      	movs	r0, #0
}
 80074ce:	4770      	bx	lr
    return LSM6DSO_ERROR;
 80074d0:	f04f 30ff 	mov.w	r0, #4294967295
}
 80074d4:	bd10      	pop	{r4, pc}
 80074d6:	bf00      	nop

080074d8 <LSM6DSO_GYRO_Enable>:
  if (pObj->gyro_is_enabled == 1U)
 80074d8:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d00b      	beq.n	80074f8 <LSM6DSO_GYRO_Enable+0x20>
{
 80074e0:	b510      	push	{r4, lr}
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO_OK)
 80074e2:	f890 102c 	ldrb.w	r1, [r0, #44]	; 0x2c
 80074e6:	4604      	mov	r4, r0
 80074e8:	301c      	adds	r0, #28
 80074ea:	f001 f89f 	bl	800862c <lsm6dso_gy_data_rate_set>
 80074ee:	b928      	cbnz	r0, 80074fc <LSM6DSO_GYRO_Enable+0x24>
  pObj->gyro_is_enabled = 1;
 80074f0:	2301      	movs	r3, #1
 80074f2:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
}
 80074f6:	bd10      	pop	{r4, pc}
    return LSM6DSO_OK;
 80074f8:	2000      	movs	r0, #0
}
 80074fa:	4770      	bx	lr
    return LSM6DSO_ERROR;
 80074fc:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007500:	bd10      	pop	{r4, pc}
 8007502:	bf00      	nop

08007504 <LSM6DSO_DeInit>:
{
 8007504:	b538      	push	{r3, r4, r5, lr}
  if (pObj->acc_is_enabled == 0U)
 8007506:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
{
 800750a:	4604      	mov	r4, r0
  if (pObj->acc_is_enabled == 0U)
 800750c:	b953      	cbnz	r3, 8007524 <LSM6DSO_DeInit+0x20>
  if (pObj->gyro_is_enabled == 0U)
 800750e:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8007512:	b9d3      	cbnz	r3, 800754a <LSM6DSO_DeInit+0x46>
  pObj->acc_odr = LSM6DSO_XL_ODR_OFF;
 8007514:	2000      	movs	r0, #0
  pObj->is_initialized = 0;
 8007516:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
  pObj->acc_odr = LSM6DSO_XL_ODR_OFF;
 800751a:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
  pObj->gyro_odr = LSM6DSO_GY_ODR_OFF;
 800751e:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
}
 8007522:	bd38      	pop	{r3, r4, r5, pc}
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSO_OK)
 8007524:	f100 051c 	add.w	r5, r0, #28
 8007528:	4628      	mov	r0, r5
 800752a:	f104 012b 	add.w	r1, r4, #43	; 0x2b
 800752e:	f000 fffd 	bl	800852c <lsm6dso_xl_data_rate_get>
 8007532:	b9d0      	cbnz	r0, 800756a <LSM6DSO_DeInit+0x66>
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8007534:	4601      	mov	r1, r0
 8007536:	4628      	mov	r0, r5
 8007538:	f000 ffde 	bl	80084f8 <lsm6dso_xl_data_rate_set>
 800753c:	b9a8      	cbnz	r0, 800756a <LSM6DSO_DeInit+0x66>
  if (pObj->gyro_is_enabled == 0U)
 800753e:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  pObj->acc_is_enabled = 0;
 8007542:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
  if (pObj->gyro_is_enabled == 0U)
 8007546:	2b00      	cmp	r3, #0
 8007548:	d0e4      	beq.n	8007514 <LSM6DSO_DeInit+0x10>
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO_OK)
 800754a:	f104 051c 	add.w	r5, r4, #28
 800754e:	4628      	mov	r0, r5
 8007550:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 8007554:	f001 f884 	bl	8008660 <lsm6dso_gy_data_rate_get>
 8007558:	b938      	cbnz	r0, 800756a <LSM6DSO_DeInit+0x66>
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 800755a:	4601      	mov	r1, r0
 800755c:	4628      	mov	r0, r5
 800755e:	f001 f865 	bl	800862c <lsm6dso_gy_data_rate_set>
 8007562:	b910      	cbnz	r0, 800756a <LSM6DSO_DeInit+0x66>
  pObj->gyro_is_enabled = 0;
 8007564:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
 8007568:	e7d4      	b.n	8007514 <LSM6DSO_DeInit+0x10>
    return LSM6DSO_ERROR;
 800756a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800756e:	bd38      	pop	{r3, r4, r5, pc}

08007570 <LSM6DSO_ACC_SetOutputDataRate>:
{
 8007570:	b508      	push	{r3, lr}
 8007572:	ee07 1a90 	vmov	s15, r1
  if (pObj->acc_is_enabled == 1U)
 8007576:	f890 1029 	ldrb.w	r1, [r0, #41]	; 0x29
          : (Odr <=   26.0f) ? LSM6DSO_XL_ODR_26Hz
 800757a:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
  if (pObj->acc_is_enabled == 1U)
 800757e:	2901      	cmp	r1, #1
          : (Odr <=   26.0f) ? LSM6DSO_XL_ODR_26Hz
 8007580:	eef4 7ac7 	vcmpe.f32	s15, s14
  if (pObj->acc_is_enabled == 1U)
 8007584:	d042      	beq.n	800760c <LSM6DSO_ACC_SetOutputDataRate+0x9c>
                : (Odr <=   26.0f) ? LSM6DSO_XL_ODR_26Hz
 8007586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800758a:	d93a      	bls.n	8007602 <LSM6DSO_ACC_SetOutputDataRate+0x92>
 800758c:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8007590:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007598:	d97f      	bls.n	800769a <LSM6DSO_ACC_SetOutputDataRate+0x12a>
 800759a:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 80076d0 <LSM6DSO_ACC_SetOutputDataRate+0x160>
 800759e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075a6:	d976      	bls.n	8007696 <LSM6DSO_ACC_SetOutputDataRate+0x126>
 80075a8:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80076d4 <LSM6DSO_ACC_SetOutputDataRate+0x164>
 80075ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075b4:	d975      	bls.n	80076a2 <LSM6DSO_ACC_SetOutputDataRate+0x132>
 80075b6:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80076d8 <LSM6DSO_ACC_SetOutputDataRate+0x168>
 80075ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075c2:	d972      	bls.n	80076aa <LSM6DSO_ACC_SetOutputDataRate+0x13a>
 80075c4:	ed9f 7a45 	vldr	s14, [pc, #276]	; 80076dc <LSM6DSO_ACC_SetOutputDataRate+0x16c>
 80075c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075d0:	d96f      	bls.n	80076b2 <LSM6DSO_ACC_SetOutputDataRate+0x142>
 80075d2:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80076e0 <LSM6DSO_ACC_SetOutputDataRate+0x170>
 80075d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075de:	d96c      	bls.n	80076ba <LSM6DSO_ACC_SetOutputDataRate+0x14a>
 80075e0:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80076e4 <LSM6DSO_ACC_SetOutputDataRate+0x174>
 80075e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075ec:	d969      	bls.n	80076c2 <LSM6DSO_ACC_SetOutputDataRate+0x152>
 80075ee:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80076e8 <LSM6DSO_ACC_SetOutputDataRate+0x178>
 80075f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075fa:	bf94      	ite	ls
 80075fc:	2309      	movls	r3, #9
 80075fe:	230a      	movhi	r3, #10
 8007600:	e000      	b.n	8007604 <LSM6DSO_ACC_SetOutputDataRate+0x94>
 8007602:	2301      	movs	r3, #1
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8007604:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
    return LSM6DSO_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8007608:	2000      	movs	r0, #0
}
 800760a:	bd08      	pop	{r3, pc}
          : (Odr <=   26.0f) ? LSM6DSO_XL_ODR_26Hz
 800760c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007610:	d939      	bls.n	8007686 <LSM6DSO_ACC_SetOutputDataRate+0x116>
 8007612:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8007616:	eef4 7ac7 	vcmpe.f32	s15, s14
 800761a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800761e:	d93e      	bls.n	800769e <LSM6DSO_ACC_SetOutputDataRate+0x12e>
 8007620:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80076d0 <LSM6DSO_ACC_SetOutputDataRate+0x160>
 8007624:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800762c:	d93b      	bls.n	80076a6 <LSM6DSO_ACC_SetOutputDataRate+0x136>
 800762e:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80076d4 <LSM6DSO_ACC_SetOutputDataRate+0x164>
 8007632:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800763a:	d938      	bls.n	80076ae <LSM6DSO_ACC_SetOutputDataRate+0x13e>
 800763c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80076d8 <LSM6DSO_ACC_SetOutputDataRate+0x168>
 8007640:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007648:	d935      	bls.n	80076b6 <LSM6DSO_ACC_SetOutputDataRate+0x146>
 800764a:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80076dc <LSM6DSO_ACC_SetOutputDataRate+0x16c>
 800764e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007656:	d932      	bls.n	80076be <LSM6DSO_ACC_SetOutputDataRate+0x14e>
 8007658:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80076e0 <LSM6DSO_ACC_SetOutputDataRate+0x170>
 800765c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007664:	d92f      	bls.n	80076c6 <LSM6DSO_ACC_SetOutputDataRate+0x156>
 8007666:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80076e4 <LSM6DSO_ACC_SetOutputDataRate+0x174>
 800766a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800766e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007672:	d92a      	bls.n	80076ca <LSM6DSO_ACC_SetOutputDataRate+0x15a>
 8007674:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80076e8 <LSM6DSO_ACC_SetOutputDataRate+0x178>
 8007678:	eef4 7ac7 	vcmpe.f32	s15, s14
 800767c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007680:	bf94      	ite	ls
 8007682:	2109      	movls	r1, #9
 8007684:	210a      	movhi	r1, #10
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8007686:	301c      	adds	r0, #28
 8007688:	f000 ff36 	bl	80084f8 <lsm6dso_xl_data_rate_set>
 800768c:	3000      	adds	r0, #0
 800768e:	bf18      	it	ne
 8007690:	2001      	movne	r0, #1
 8007692:	4240      	negs	r0, r0
}
 8007694:	bd08      	pop	{r3, pc}
                : (Odr <=   26.0f) ? LSM6DSO_XL_ODR_26Hz
 8007696:	2303      	movs	r3, #3
 8007698:	e7b4      	b.n	8007604 <LSM6DSO_ACC_SetOutputDataRate+0x94>
 800769a:	2302      	movs	r3, #2
 800769c:	e7b2      	b.n	8007604 <LSM6DSO_ACC_SetOutputDataRate+0x94>
          : (Odr <=   26.0f) ? LSM6DSO_XL_ODR_26Hz
 800769e:	2102      	movs	r1, #2
 80076a0:	e7f1      	b.n	8007686 <LSM6DSO_ACC_SetOutputDataRate+0x116>
                : (Odr <=   26.0f) ? LSM6DSO_XL_ODR_26Hz
 80076a2:	2304      	movs	r3, #4
 80076a4:	e7ae      	b.n	8007604 <LSM6DSO_ACC_SetOutputDataRate+0x94>
          : (Odr <=   26.0f) ? LSM6DSO_XL_ODR_26Hz
 80076a6:	2103      	movs	r1, #3
 80076a8:	e7ed      	b.n	8007686 <LSM6DSO_ACC_SetOutputDataRate+0x116>
                : (Odr <=   26.0f) ? LSM6DSO_XL_ODR_26Hz
 80076aa:	2305      	movs	r3, #5
 80076ac:	e7aa      	b.n	8007604 <LSM6DSO_ACC_SetOutputDataRate+0x94>
          : (Odr <=   26.0f) ? LSM6DSO_XL_ODR_26Hz
 80076ae:	2104      	movs	r1, #4
 80076b0:	e7e9      	b.n	8007686 <LSM6DSO_ACC_SetOutputDataRate+0x116>
                : (Odr <=   26.0f) ? LSM6DSO_XL_ODR_26Hz
 80076b2:	2306      	movs	r3, #6
 80076b4:	e7a6      	b.n	8007604 <LSM6DSO_ACC_SetOutputDataRate+0x94>
          : (Odr <=   26.0f) ? LSM6DSO_XL_ODR_26Hz
 80076b6:	2105      	movs	r1, #5
 80076b8:	e7e5      	b.n	8007686 <LSM6DSO_ACC_SetOutputDataRate+0x116>
                : (Odr <=   26.0f) ? LSM6DSO_XL_ODR_26Hz
 80076ba:	2307      	movs	r3, #7
 80076bc:	e7a2      	b.n	8007604 <LSM6DSO_ACC_SetOutputDataRate+0x94>
          : (Odr <=   26.0f) ? LSM6DSO_XL_ODR_26Hz
 80076be:	2106      	movs	r1, #6
 80076c0:	e7e1      	b.n	8007686 <LSM6DSO_ACC_SetOutputDataRate+0x116>
                : (Odr <=   26.0f) ? LSM6DSO_XL_ODR_26Hz
 80076c2:	2308      	movs	r3, #8
 80076c4:	e79e      	b.n	8007604 <LSM6DSO_ACC_SetOutputDataRate+0x94>
          : (Odr <=   26.0f) ? LSM6DSO_XL_ODR_26Hz
 80076c6:	2107      	movs	r1, #7
 80076c8:	e7dd      	b.n	8007686 <LSM6DSO_ACC_SetOutputDataRate+0x116>
 80076ca:	2108      	movs	r1, #8
 80076cc:	e7db      	b.n	8007686 <LSM6DSO_ACC_SetOutputDataRate+0x116>
 80076ce:	bf00      	nop
 80076d0:	42500000 	.word	0x42500000
 80076d4:	42d00000 	.word	0x42d00000
 80076d8:	43500000 	.word	0x43500000
 80076dc:	43d08000 	.word	0x43d08000
 80076e0:	44504000 	.word	0x44504000
 80076e4:	44d06000 	.word	0x44d06000
 80076e8:	45505000 	.word	0x45505000

080076ec <LSM6DSO_ACC_Disable>:
{
 80076ec:	b538      	push	{r3, r4, r5, lr}
  if (pObj->acc_is_enabled == 0U)
 80076ee:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 80076f2:	b90b      	cbnz	r3, 80076f8 <LSM6DSO_ACC_Disable+0xc>
    return LSM6DSO_OK;
 80076f4:	4618      	mov	r0, r3
}
 80076f6:	bd38      	pop	{r3, r4, r5, pc}
 80076f8:	4604      	mov	r4, r0
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSO_OK)
 80076fa:	f100 051c 	add.w	r5, r0, #28
 80076fe:	4628      	mov	r0, r5
 8007700:	f104 012b 	add.w	r1, r4, #43	; 0x2b
 8007704:	f000 ff12 	bl	800852c <lsm6dso_xl_data_rate_get>
 8007708:	b938      	cbnz	r0, 800771a <LSM6DSO_ACC_Disable+0x2e>
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 800770a:	4601      	mov	r1, r0
 800770c:	4628      	mov	r0, r5
 800770e:	f000 fef3 	bl	80084f8 <lsm6dso_xl_data_rate_set>
 8007712:	b910      	cbnz	r0, 800771a <LSM6DSO_ACC_Disable+0x2e>
  pObj->acc_is_enabled = 0;
 8007714:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
}
 8007718:	bd38      	pop	{r3, r4, r5, pc}
    return LSM6DSO_ERROR;
 800771a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800771e:	bd38      	pop	{r3, r4, r5, pc}

08007720 <LSM6DSO_GYRO_Disable>:
{
 8007720:	b538      	push	{r3, r4, r5, lr}
  if (pObj->gyro_is_enabled == 0U)
 8007722:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 8007726:	b90b      	cbnz	r3, 800772c <LSM6DSO_GYRO_Disable+0xc>
    return LSM6DSO_OK;
 8007728:	4618      	mov	r0, r3
}
 800772a:	bd38      	pop	{r3, r4, r5, pc}
 800772c:	4604      	mov	r4, r0
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO_OK)
 800772e:	f100 051c 	add.w	r5, r0, #28
 8007732:	4628      	mov	r0, r5
 8007734:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 8007738:	f000 ff92 	bl	8008660 <lsm6dso_gy_data_rate_get>
 800773c:	b938      	cbnz	r0, 800774e <LSM6DSO_GYRO_Disable+0x2e>
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 800773e:	4601      	mov	r1, r0
 8007740:	4628      	mov	r0, r5
 8007742:	f000 ff73 	bl	800862c <lsm6dso_gy_data_rate_set>
 8007746:	b910      	cbnz	r0, 800774e <LSM6DSO_GYRO_Disable+0x2e>
  pObj->gyro_is_enabled = 0;
 8007748:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
}
 800774c:	bd38      	pop	{r3, r4, r5, pc}
    return LSM6DSO_ERROR;
 800774e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007752:	bd38      	pop	{r3, r4, r5, pc}

08007754 <LSM6DSO_ACC_GetAxes>:
{
 8007754:	b530      	push	{r4, r5, lr}
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSO_OK)
 8007756:	f100 051c 	add.w	r5, r0, #28
{
 800775a:	b085      	sub	sp, #20
 800775c:	460c      	mov	r4, r1
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSO_OK)
 800775e:	4628      	mov	r0, r5
 8007760:	a902      	add	r1, sp, #8
 8007762:	f000 ffd9 	bl	8008718 <lsm6dso_acceleration_raw_get>
 8007766:	b968      	cbnz	r0, 8007784 <LSM6DSO_ACC_GetAxes+0x30>
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8007768:	4628      	mov	r0, r5
 800776a:	f10d 0107 	add.w	r1, sp, #7
 800776e:	f000 fea7 	bl	80084c0 <lsm6dso_xl_full_scale_get>
 8007772:	b938      	cbnz	r0, 8007784 <LSM6DSO_ACC_GetAxes+0x30>
  switch (full_scale)
 8007774:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007778:	2b03      	cmp	r3, #3
 800777a:	d803      	bhi.n	8007784 <LSM6DSO_ACC_GetAxes+0x30>
 800777c:	e8df f003 	tbb	[pc, r3]
 8007780:	0634312e 	.word	0x0634312e
    return LSM6DSO_ERROR;
 8007784:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007788:	b005      	add	sp, #20
 800778a:	bd30      	pop	{r4, r5, pc}
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_8G;
 800778c:	ed9f 6a18 	vldr	s12, [pc, #96]	; 80077f0 <LSM6DSO_ACC_GetAxes+0x9c>
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8007790:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8007794:	ee06 3a90 	vmov	s13, r3
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8007798:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 800779c:	ee07 3a10 	vmov	s14, r3
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80077a0:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80077a4:	ee07 3a90 	vmov	s15, r3
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80077a8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80077ac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80077b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80077b4:	ee66 6a86 	vmul.f32	s13, s13, s12
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80077b8:	ee27 7a06 	vmul.f32	s14, s14, s12
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80077bc:	ee67 7a86 	vmul.f32	s15, s15, s12
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80077c0:	eefd 6ae6 	vcvt.s32.f32	s13, s13
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80077c4:	eebd 7ac7 	vcvt.s32.f32	s14, s14
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80077c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80077cc:	edc4 6a00 	vstr	s13, [r4]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80077d0:	ed84 7a01 	vstr	s14, [r4, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80077d4:	edc4 7a02 	vstr	s15, [r4, #8]
}
 80077d8:	b005      	add	sp, #20
 80077da:	bd30      	pop	{r4, r5, pc}
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_2G;
 80077dc:	ed9f 6a05 	vldr	s12, [pc, #20]	; 80077f4 <LSM6DSO_ACC_GetAxes+0xa0>
 80077e0:	e7d6      	b.n	8007790 <LSM6DSO_ACC_GetAxes+0x3c>
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_16G;
 80077e2:	ed9f 6a05 	vldr	s12, [pc, #20]	; 80077f8 <LSM6DSO_ACC_GetAxes+0xa4>
 80077e6:	e7d3      	b.n	8007790 <LSM6DSO_ACC_GetAxes+0x3c>
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_4G;
 80077e8:	ed9f 6a04 	vldr	s12, [pc, #16]	; 80077fc <LSM6DSO_ACC_GetAxes+0xa8>
 80077ec:	e7d0      	b.n	8007790 <LSM6DSO_ACC_GetAxes+0x3c>
 80077ee:	bf00      	nop
 80077f0:	3e79db23 	.word	0x3e79db23
 80077f4:	3d79db23 	.word	0x3d79db23
 80077f8:	3ef9db23 	.word	0x3ef9db23
 80077fc:	3df9db23 	.word	0x3df9db23

08007800 <LSM6DSO_GYRO_GetAxes>:
{
 8007800:	b530      	push	{r4, r5, lr}
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSO_OK)
 8007802:	f100 051c 	add.w	r5, r0, #28
{
 8007806:	b085      	sub	sp, #20
 8007808:	460c      	mov	r4, r1
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSO_OK)
 800780a:	4628      	mov	r0, r5
 800780c:	a902      	add	r1, sp, #8
 800780e:	f000 ff79 	bl	8008704 <lsm6dso_angular_rate_raw_get>
 8007812:	b978      	cbnz	r0, 8007834 <LSM6DSO_GYRO_GetAxes+0x34>
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8007814:	4628      	mov	r0, r5
 8007816:	f10d 0107 	add.w	r1, sp, #7
 800781a:	f000 fedd 	bl	80085d8 <lsm6dso_gy_full_scale_get>
 800781e:	b948      	cbnz	r0, 8007834 <LSM6DSO_GYRO_GetAxes+0x34>
  switch (full_scale)
 8007820:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007824:	2b06      	cmp	r3, #6
 8007826:	d805      	bhi.n	8007834 <LSM6DSO_GYRO_GetAxes+0x34>
 8007828:	e8df f003 	tbb	[pc, r3]
 800782c:	04333039 	.word	0x04333039
 8007830:	0436      	.short	0x0436
 8007832:	08          	.byte	0x08
 8007833:	00          	.byte	0x00
    return LSM6DSO_ERROR;
 8007834:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007838:	b005      	add	sp, #20
 800783a:	bd30      	pop	{r4, r5, pc}
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_2000DPS;
 800783c:	ed9f 6a19 	vldr	s12, [pc, #100]	; 80078a4 <LSM6DSO_GYRO_GetAxes+0xa4>
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8007840:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8007844:	ee06 3a90 	vmov	s13, r3
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8007848:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 800784c:	ee07 3a10 	vmov	s14, r3
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8007850:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8007854:	ee07 3a90 	vmov	s15, r3
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8007858:	eef8 6ae6 	vcvt.f32.s32	s13, s13
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 800785c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8007860:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8007864:	ee66 6a86 	vmul.f32	s13, s13, s12
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8007868:	ee27 7a06 	vmul.f32	s14, s14, s12
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 800786c:	ee67 7a86 	vmul.f32	s15, s15, s12
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8007870:	eefd 6ae6 	vcvt.s32.f32	s13, s13
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8007874:	eebd 7ac7 	vcvt.s32.f32	s14, s14
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8007878:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 800787c:	edc4 6a00 	vstr	s13, [r4]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8007880:	ed84 7a01 	vstr	s14, [r4, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8007884:	edc4 7a02 	vstr	s15, [r4, #8]
}
 8007888:	b005      	add	sp, #20
 800788a:	bd30      	pop	{r4, r5, pc}
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_125DPS;
 800788c:	ed9f 6a06 	vldr	s12, [pc, #24]	; 80078a8 <LSM6DSO_GYRO_GetAxes+0xa8>
 8007890:	e7d6      	b.n	8007840 <LSM6DSO_GYRO_GetAxes+0x40>
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_500DPS;
 8007892:	ed9f 6a06 	vldr	s12, [pc, #24]	; 80078ac <LSM6DSO_GYRO_GetAxes+0xac>
 8007896:	e7d3      	b.n	8007840 <LSM6DSO_GYRO_GetAxes+0x40>
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_1000DPS;
 8007898:	ed9f 6a05 	vldr	s12, [pc, #20]	; 80078b0 <LSM6DSO_GYRO_GetAxes+0xb0>
 800789c:	e7d0      	b.n	8007840 <LSM6DSO_GYRO_GetAxes+0x40>
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_250DPS;
 800789e:	ed9f 6a05 	vldr	s12, [pc, #20]	; 80078b4 <LSM6DSO_GYRO_GetAxes+0xb4>
 80078a2:	e7cd      	b.n	8007840 <LSM6DSO_GYRO_GetAxes+0x40>
 80078a4:	428c0000 	.word	0x428c0000
 80078a8:	408c0000 	.word	0x408c0000
 80078ac:	418c0000 	.word	0x418c0000
 80078b0:	420c0000 	.word	0x420c0000
 80078b4:	410c0000 	.word	0x410c0000

080078b8 <LSM6DSO_RegisterBusIO>:
  if (pObj == NULL)
 80078b8:	2800      	cmp	r0, #0
 80078ba:	d034      	beq.n	8007926 <LSM6DSO_RegisterBusIO+0x6e>
{
 80078bc:	b530      	push	{r4, r5, lr}
    pObj->IO.DeInit    = pIO->DeInit;
 80078be:	e9d1 3400 	ldrd	r3, r4, [r1]
    pObj->IO.BusType   = pIO->BusType;
 80078c2:	688a      	ldr	r2, [r1, #8]
 80078c4:	6082      	str	r2, [r0, #8]
    pObj->IO.DeInit    = pIO->DeInit;
 80078c6:	e9c0 3400 	strd	r3, r4, [r0]
    pObj->IO.Address   = pIO->Address;
 80078ca:	7b0a      	ldrb	r2, [r1, #12]
 80078cc:	7302      	strb	r2, [r0, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80078ce:	e9d1 2504 	ldrd	r2, r5, [r1, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 80078d2:	698c      	ldr	r4, [r1, #24]
    pObj->Ctx.read_reg  = ReadRegWrap;
 80078d4:	4915      	ldr	r1, [pc, #84]	; (800792c <LSM6DSO_RegisterBusIO+0x74>)
    pObj->IO.WriteReg  = pIO->WriteReg;
 80078d6:	6102      	str	r2, [r0, #16]
    pObj->Ctx.write_reg = WriteRegWrap;
 80078d8:	4a15      	ldr	r2, [pc, #84]	; (8007930 <LSM6DSO_RegisterBusIO+0x78>)
 80078da:	61c2      	str	r2, [r0, #28]
{
 80078dc:	b083      	sub	sp, #12
    pObj->IO.GetTick   = pIO->GetTick;
 80078de:	e9c0 5405 	strd	r5, r4, [r0, #20]
    pObj->Ctx.read_reg  = ReadRegWrap;
 80078e2:	e9c0 1008 	strd	r1, r0, [r0, #32]
    if (pObj->IO.Init == NULL)
 80078e6:	b1db      	cbz	r3, 8007920 <LSM6DSO_RegisterBusIO+0x68>
 80078e8:	4604      	mov	r4, r0
    else if (pObj->IO.Init() != LSM6DSO_OK)
 80078ea:	4798      	blx	r3
 80078ec:	b9c0      	cbnz	r0, 8007920 <LSM6DSO_RegisterBusIO+0x68>
      if (pObj->IO.BusType == LSM6DSO_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80078ee:	68a3      	ldr	r3, [r4, #8]
 80078f0:	2b02      	cmp	r3, #2
 80078f2:	d001      	beq.n	80078f8 <LSM6DSO_RegisterBusIO+0x40>
}
 80078f4:	b003      	add	sp, #12
 80078f6:	bd30      	pop	{r4, r5, pc}
        if (pObj->is_initialized == 0U)
 80078f8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d1f9      	bne.n	80078f4 <LSM6DSO_RegisterBusIO+0x3c>
 8007900:	aa02      	add	r2, sp, #8
 8007902:	230c      	movs	r3, #12
 8007904:	f802 3d01 	strb.w	r3, [r2, #-1]!
  if (lsm6dso_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO_OK)
 8007908:	f104 001c 	add.w	r0, r4, #28
 800790c:	2301      	movs	r3, #1
 800790e:	2112      	movs	r1, #18
 8007910:	f000 fdb4 	bl	800847c <lsm6dso_write_reg>
 8007914:	3000      	adds	r0, #0
 8007916:	bf18      	it	ne
 8007918:	2001      	movne	r0, #1
 800791a:	4240      	negs	r0, r0
}
 800791c:	b003      	add	sp, #12
 800791e:	bd30      	pop	{r4, r5, pc}
    ret = LSM6DSO_ERROR;
 8007920:	f04f 30ff 	mov.w	r0, #4294967295
 8007924:	e7e6      	b.n	80078f4 <LSM6DSO_RegisterBusIO+0x3c>
 8007926:	f04f 30ff 	mov.w	r0, #4294967295
}
 800792a:	4770      	bx	lr
 800792c:	08006f31 	.word	0x08006f31
 8007930:	08006f41 	.word	0x08006f41

08007934 <LSM6DSO_ACC_Enable_Free_Fall_Detection>:
{
 8007934:	b530      	push	{r4, r5, lr}
  if (pObj->acc_is_enabled == 1U)
 8007936:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 800793a:	2b01      	cmp	r3, #1
{
 800793c:	b083      	sub	sp, #12
 800793e:	460d      	mov	r5, r1
 8007940:	f100 041c 	add.w	r4, r0, #28
  if (pObj->acc_is_enabled == 1U)
 8007944:	d033      	beq.n	80079ae <LSM6DSO_ACC_Enable_Free_Fall_Detection+0x7a>
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8007946:	2306      	movs	r3, #6
 8007948:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 800794c:	2100      	movs	r1, #0
 800794e:	4620      	mov	r0, r4
 8007950:	f000 fd9c 	bl	800848c <lsm6dso_xl_full_scale_set>
 8007954:	bb88      	cbnz	r0, 80079ba <LSM6DSO_ACC_Enable_Free_Fall_Detection+0x86>
  if (lsm6dso_ff_dur_set(&(pObj->Ctx), 0x06) != LSM6DSO_OK)
 8007956:	2106      	movs	r1, #6
 8007958:	4620      	mov	r0, r4
 800795a:	f001 fced 	bl	8009338 <lsm6dso_ff_dur_set>
 800795e:	bb60      	cbnz	r0, 80079ba <LSM6DSO_ACC_Enable_Free_Fall_Detection+0x86>
  if (lsm6dso_wkup_dur_set(&(pObj->Ctx), 0x00) != LSM6DSO_OK)
 8007960:	4601      	mov	r1, r0
 8007962:	4620      	mov	r0, r4
 8007964:	f001 fbb0 	bl	80090c8 <lsm6dso_wkup_dur_set>
 8007968:	bb38      	cbnz	r0, 80079ba <LSM6DSO_ACC_Enable_Free_Fall_Detection+0x86>
  if (lsm6dso_act_sleep_dur_set(&(pObj->Ctx), 0x00) != LSM6DSO_OK)
 800796a:	4601      	mov	r1, r0
 800796c:	4620      	mov	r0, r4
 800796e:	f001 fbc5 	bl	80090fc <lsm6dso_act_sleep_dur_set>
 8007972:	bb10      	cbnz	r0, 80079ba <LSM6DSO_ACC_Enable_Free_Fall_Detection+0x86>
  if (lsm6dso_ff_threshold_set(&(pObj->Ctx), LSM6DSO_FF_TSH_312mg) != LSM6DSO_OK)
 8007974:	2103      	movs	r1, #3
 8007976:	4620      	mov	r0, r4
 8007978:	f001 fcc4 	bl	8009304 <lsm6dso_ff_threshold_set>
 800797c:	b9e8      	cbnz	r0, 80079ba <LSM6DSO_ACC_Enable_Free_Fall_Detection+0x86>
  switch (IntPin)
 800797e:	b305      	cbz	r5, 80079c2 <LSM6DSO_ACC_Enable_Free_Fall_Detection+0x8e>
 8007980:	2d01      	cmp	r5, #1
 8007982:	d11a      	bne.n	80079ba <LSM6DSO_ACC_Enable_Free_Fall_Detection+0x86>
      if (lsm6dso_pin_int2_route_get(&(pObj->Ctx), &val2) != LSM6DSO_OK)
 8007984:	4669      	mov	r1, sp
 8007986:	4620      	mov	r0, r4
 8007988:	f001 fa2e 	bl	8008de8 <lsm6dso_pin_int2_route_get>
 800798c:	b9a8      	cbnz	r0, 80079ba <LSM6DSO_ACC_Enable_Free_Fall_Detection+0x86>
      val2.md2_cfg.int2_ff = PROPERTY_ENABLE;
 800798e:	f89d 3001 	ldrb.w	r3, [sp, #1]
      if (lsm6dso_pin_int2_route_set(&(pObj->Ctx), &val2) != LSM6DSO_OK)
 8007992:	4669      	mov	r1, sp
      val2.md2_cfg.int2_ff = PROPERTY_ENABLE;
 8007994:	f043 0310 	orr.w	r3, r3, #16
      if (lsm6dso_pin_int2_route_set(&(pObj->Ctx), &val2) != LSM6DSO_OK)
 8007998:	4620      	mov	r0, r4
      val2.md2_cfg.int2_ff = PROPERTY_ENABLE;
 800799a:	f88d 3001 	strb.w	r3, [sp, #1]
      if (lsm6dso_pin_int2_route_set(&(pObj->Ctx), &val2) != LSM6DSO_OK)
 800799e:	f001 f92f 	bl	8008c00 <lsm6dso_pin_int2_route_set>
 80079a2:	3000      	adds	r0, #0
 80079a4:	bf18      	it	ne
 80079a6:	2001      	movne	r0, #1
 80079a8:	4240      	negs	r0, r0
}
 80079aa:	b003      	add	sp, #12
 80079ac:	bd30      	pop	{r4, r5, pc}
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 80079ae:	2106      	movs	r1, #6
 80079b0:	4620      	mov	r0, r4
 80079b2:	f000 fda1 	bl	80084f8 <lsm6dso_xl_data_rate_set>
 80079b6:	2800      	cmp	r0, #0
 80079b8:	d0c8      	beq.n	800794c <LSM6DSO_ACC_Enable_Free_Fall_Detection+0x18>
      ret = LSM6DSO_ERROR;
 80079ba:	f04f 30ff 	mov.w	r0, #4294967295
}
 80079be:	b003      	add	sp, #12
 80079c0:	bd30      	pop	{r4, r5, pc}
      if (lsm6dso_pin_int1_route_get(&(pObj->Ctx), &val1) != LSM6DSO_OK)
 80079c2:	4669      	mov	r1, sp
 80079c4:	4620      	mov	r0, r4
 80079c6:	f001 f8b9 	bl	8008b3c <lsm6dso_pin_int1_route_get>
 80079ca:	2800      	cmp	r0, #0
 80079cc:	d1f5      	bne.n	80079ba <LSM6DSO_ACC_Enable_Free_Fall_Detection+0x86>
      val1.md1_cfg.int1_ff = PROPERTY_ENABLE;
 80079ce:	f89d 3001 	ldrb.w	r3, [sp, #1]
      if (lsm6dso_pin_int1_route_set(&(pObj->Ctx), &val1) != LSM6DSO_OK)
 80079d2:	4669      	mov	r1, sp
      val1.md1_cfg.int1_ff = PROPERTY_ENABLE;
 80079d4:	f043 0310 	orr.w	r3, r3, #16
      if (lsm6dso_pin_int1_route_set(&(pObj->Ctx), &val1) != LSM6DSO_OK)
 80079d8:	4620      	mov	r0, r4
      val1.md1_cfg.int1_ff = PROPERTY_ENABLE;
 80079da:	f88d 3001 	strb.w	r3, [sp, #1]
      if (lsm6dso_pin_int1_route_set(&(pObj->Ctx), &val1) != LSM6DSO_OK)
 80079de:	f001 fa65 	bl	8008eac <lsm6dso_pin_int1_route_set>
 80079e2:	3000      	adds	r0, #0
 80079e4:	bf18      	it	ne
 80079e6:	2001      	movne	r0, #1
 80079e8:	4240      	negs	r0, r0
}
 80079ea:	b003      	add	sp, #12
 80079ec:	bd30      	pop	{r4, r5, pc}
 80079ee:	bf00      	nop

080079f0 <LSM6DSO_ACC_Disable_Free_Fall_Detection>:
{
 80079f0:	b510      	push	{r4, lr}
  if (lsm6dso_pin_int1_route_get(&(pObj->Ctx), &val1) != LSM6DSO_OK)
 80079f2:	f100 041c 	add.w	r4, r0, #28
{
 80079f6:	b084      	sub	sp, #16
  if (lsm6dso_pin_int1_route_get(&(pObj->Ctx), &val1) != LSM6DSO_OK)
 80079f8:	4620      	mov	r0, r4
 80079fa:	4669      	mov	r1, sp
 80079fc:	f001 f89e 	bl	8008b3c <lsm6dso_pin_int1_route_get>
 8007a00:	bb48      	cbnz	r0, 8007a56 <LSM6DSO_ACC_Disable_Free_Fall_Detection+0x66>
  val1.md1_cfg.int1_ff = PROPERTY_DISABLE;
 8007a02:	f89d 3001 	ldrb.w	r3, [sp, #1]
  if (lsm6dso_pin_int1_route_set(&(pObj->Ctx), &val1) != LSM6DSO_OK)
 8007a06:	4669      	mov	r1, sp
  val1.md1_cfg.int1_ff = PROPERTY_DISABLE;
 8007a08:	f360 1304 	bfi	r3, r0, #4, #1
  if (lsm6dso_pin_int1_route_set(&(pObj->Ctx), &val1) != LSM6DSO_OK)
 8007a0c:	4620      	mov	r0, r4
  val1.md1_cfg.int1_ff = PROPERTY_DISABLE;
 8007a0e:	f88d 3001 	strb.w	r3, [sp, #1]
  if (lsm6dso_pin_int1_route_set(&(pObj->Ctx), &val1) != LSM6DSO_OK)
 8007a12:	f001 fa4b 	bl	8008eac <lsm6dso_pin_int1_route_set>
 8007a16:	b9f0      	cbnz	r0, 8007a56 <LSM6DSO_ACC_Disable_Free_Fall_Detection+0x66>
  if (lsm6dso_pin_int2_route_get(&(pObj->Ctx), &val2) != LSM6DSO_OK)
 8007a18:	a902      	add	r1, sp, #8
 8007a1a:	4620      	mov	r0, r4
 8007a1c:	f001 f9e4 	bl	8008de8 <lsm6dso_pin_int2_route_get>
 8007a20:	b9c8      	cbnz	r0, 8007a56 <LSM6DSO_ACC_Disable_Free_Fall_Detection+0x66>
  val2.md2_cfg.int2_ff = PROPERTY_DISABLE;
 8007a22:	f89d 3009 	ldrb.w	r3, [sp, #9]
  if (lsm6dso_pin_int2_route_set(&(pObj->Ctx), &val2) != LSM6DSO_OK)
 8007a26:	a902      	add	r1, sp, #8
  val2.md2_cfg.int2_ff = PROPERTY_DISABLE;
 8007a28:	f360 1304 	bfi	r3, r0, #4, #1
  if (lsm6dso_pin_int2_route_set(&(pObj->Ctx), &val2) != LSM6DSO_OK)
 8007a2c:	4620      	mov	r0, r4
  val2.md2_cfg.int2_ff = PROPERTY_DISABLE;
 8007a2e:	f88d 3009 	strb.w	r3, [sp, #9]
  if (lsm6dso_pin_int2_route_set(&(pObj->Ctx), &val2) != LSM6DSO_OK)
 8007a32:	f001 f8e5 	bl	8008c00 <lsm6dso_pin_int2_route_set>
 8007a36:	b970      	cbnz	r0, 8007a56 <LSM6DSO_ACC_Disable_Free_Fall_Detection+0x66>
  if (lsm6dso_ff_dur_set(&(pObj->Ctx), 0x00) != LSM6DSO_OK)
 8007a38:	4601      	mov	r1, r0
 8007a3a:	4620      	mov	r0, r4
 8007a3c:	f001 fc7c 	bl	8009338 <lsm6dso_ff_dur_set>
 8007a40:	b948      	cbnz	r0, 8007a56 <LSM6DSO_ACC_Disable_Free_Fall_Detection+0x66>
  if (lsm6dso_ff_threshold_set(&(pObj->Ctx), LSM6DSO_FF_TSH_156mg) != LSM6DSO_OK)
 8007a42:	4601      	mov	r1, r0
 8007a44:	4620      	mov	r0, r4
 8007a46:	f001 fc5d 	bl	8009304 <lsm6dso_ff_threshold_set>
 8007a4a:	3000      	adds	r0, #0
 8007a4c:	bf18      	it	ne
 8007a4e:	2001      	movne	r0, #1
 8007a50:	4240      	negs	r0, r0
}
 8007a52:	b004      	add	sp, #16
 8007a54:	bd10      	pop	{r4, pc}
    return LSM6DSO_ERROR;
 8007a56:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007a5a:	b004      	add	sp, #16
 8007a5c:	bd10      	pop	{r4, pc}
 8007a5e:	bf00      	nop

08007a60 <LSM6DSO_ACC_Set_Free_Fall_Threshold>:
{
 8007a60:	b508      	push	{r3, lr}
  if (lsm6dso_ff_threshold_set(&(pObj->Ctx), (lsm6dso_ff_ths_t)Threshold) != LSM6DSO_OK)
 8007a62:	301c      	adds	r0, #28
 8007a64:	f001 fc4e 	bl	8009304 <lsm6dso_ff_threshold_set>
 8007a68:	3000      	adds	r0, #0
 8007a6a:	bf18      	it	ne
 8007a6c:	2001      	movne	r0, #1
}
 8007a6e:	4240      	negs	r0, r0
 8007a70:	bd08      	pop	{r3, pc}
 8007a72:	bf00      	nop

08007a74 <LSM6DSO_ACC_Enable_Pedometer>:
{
 8007a74:	b510      	push	{r4, lr}
  if (pObj->acc_is_enabled == 1U)
 8007a76:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8007a7a:	2b01      	cmp	r3, #1
{
 8007a7c:	b082      	sub	sp, #8
 8007a7e:	f100 041c 	add.w	r4, r0, #28
  if (pObj->acc_is_enabled == 1U)
 8007a82:	d021      	beq.n	8007ac8 <LSM6DSO_ACC_Enable_Pedometer+0x54>
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8007a84:	2302      	movs	r3, #2
 8007a86:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8007a8a:	2100      	movs	r1, #0
 8007a8c:	4620      	mov	r0, r4
 8007a8e:	f000 fcfd 	bl	800848c <lsm6dso_xl_full_scale_set>
 8007a92:	b9f8      	cbnz	r0, 8007ad4 <LSM6DSO_ACC_Enable_Pedometer+0x60>
  if (lsm6dso_pedo_sens_set(&(pObj->Ctx), LSM6DSO_PEDO_BASE_MODE) != LSM6DSO_OK)
 8007a94:	2101      	movs	r1, #1
 8007a96:	4620      	mov	r0, r4
 8007a98:	f001 fc96 	bl	80093c8 <lsm6dso_pedo_sens_set>
 8007a9c:	b9d0      	cbnz	r0, 8007ad4 <LSM6DSO_ACC_Enable_Pedometer+0x60>
  if (lsm6dso_pin_int1_route_get(&(pObj->Ctx), &val) != LSM6DSO_OK)
 8007a9e:	4669      	mov	r1, sp
 8007aa0:	4620      	mov	r0, r4
 8007aa2:	f001 f84b 	bl	8008b3c <lsm6dso_pin_int1_route_get>
 8007aa6:	b9a8      	cbnz	r0, 8007ad4 <LSM6DSO_ACC_Enable_Pedometer+0x60>
  val.emb_func_int1.int1_step_detector = PROPERTY_ENABLE;
 8007aa8:	f89d 3002 	ldrb.w	r3, [sp, #2]
  if (lsm6dso_pin_int1_route_set(&(pObj->Ctx), &val) != LSM6DSO_OK)
 8007aac:	4669      	mov	r1, sp
  val.emb_func_int1.int1_step_detector = PROPERTY_ENABLE;
 8007aae:	f043 0308 	orr.w	r3, r3, #8
  if (lsm6dso_pin_int1_route_set(&(pObj->Ctx), &val) != LSM6DSO_OK)
 8007ab2:	4620      	mov	r0, r4
  val.emb_func_int1.int1_step_detector = PROPERTY_ENABLE;
 8007ab4:	f88d 3002 	strb.w	r3, [sp, #2]
  if (lsm6dso_pin_int1_route_set(&(pObj->Ctx), &val) != LSM6DSO_OK)
 8007ab8:	f001 f9f8 	bl	8008eac <lsm6dso_pin_int1_route_set>
 8007abc:	3000      	adds	r0, #0
 8007abe:	bf18      	it	ne
 8007ac0:	2001      	movne	r0, #1
 8007ac2:	4240      	negs	r0, r0
}
 8007ac4:	b002      	add	sp, #8
 8007ac6:	bd10      	pop	{r4, pc}
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8007ac8:	2102      	movs	r1, #2
 8007aca:	4620      	mov	r0, r4
 8007acc:	f000 fd14 	bl	80084f8 <lsm6dso_xl_data_rate_set>
 8007ad0:	2800      	cmp	r0, #0
 8007ad2:	d0da      	beq.n	8007a8a <LSM6DSO_ACC_Enable_Pedometer+0x16>
    return LSM6DSO_ERROR;
 8007ad4:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007ad8:	b002      	add	sp, #8
 8007ada:	bd10      	pop	{r4, pc}

08007adc <LSM6DSO_ACC_Disable_Pedometer>:
{
 8007adc:	b510      	push	{r4, lr}
  if (lsm6dso_pin_int1_route_get(&(pObj->Ctx), &val1) != LSM6DSO_OK)
 8007ade:	f100 041c 	add.w	r4, r0, #28
{
 8007ae2:	b082      	sub	sp, #8
  if (lsm6dso_pin_int1_route_get(&(pObj->Ctx), &val1) != LSM6DSO_OK)
 8007ae4:	4620      	mov	r0, r4
 8007ae6:	4669      	mov	r1, sp
 8007ae8:	f001 f828 	bl	8008b3c <lsm6dso_pin_int1_route_get>
 8007aec:	b9a0      	cbnz	r0, 8007b18 <LSM6DSO_ACC_Disable_Pedometer+0x3c>
  val1.emb_func_int1.int1_step_detector = PROPERTY_DISABLE;
 8007aee:	f89d 3002 	ldrb.w	r3, [sp, #2]
  if (lsm6dso_pin_int1_route_set(&(pObj->Ctx), &val1) != LSM6DSO_OK)
 8007af2:	4669      	mov	r1, sp
  val1.emb_func_int1.int1_step_detector = PROPERTY_DISABLE;
 8007af4:	f360 03c3 	bfi	r3, r0, #3, #1
  if (lsm6dso_pin_int1_route_set(&(pObj->Ctx), &val1) != LSM6DSO_OK)
 8007af8:	4620      	mov	r0, r4
  val1.emb_func_int1.int1_step_detector = PROPERTY_DISABLE;
 8007afa:	f88d 3002 	strb.w	r3, [sp, #2]
  if (lsm6dso_pin_int1_route_set(&(pObj->Ctx), &val1) != LSM6DSO_OK)
 8007afe:	f001 f9d5 	bl	8008eac <lsm6dso_pin_int1_route_set>
 8007b02:	b948      	cbnz	r0, 8007b18 <LSM6DSO_ACC_Disable_Pedometer+0x3c>
  if (lsm6dso_pedo_sens_set(&(pObj->Ctx), LSM6DSO_PEDO_DISABLE) != LSM6DSO_OK)
 8007b04:	4601      	mov	r1, r0
 8007b06:	4620      	mov	r0, r4
 8007b08:	f001 fc5e 	bl	80093c8 <lsm6dso_pedo_sens_set>
 8007b0c:	3000      	adds	r0, #0
 8007b0e:	bf18      	it	ne
 8007b10:	2001      	movne	r0, #1
 8007b12:	4240      	negs	r0, r0
}
 8007b14:	b002      	add	sp, #8
 8007b16:	bd10      	pop	{r4, pc}
    return LSM6DSO_ERROR;
 8007b18:	f04f 30ff 	mov.w	r0, #4294967295
 8007b1c:	e7fa      	b.n	8007b14 <LSM6DSO_ACC_Disable_Pedometer+0x38>
 8007b1e:	bf00      	nop

08007b20 <LSM6DSO_ACC_Get_Step_Count>:
{
 8007b20:	b508      	push	{r3, lr}
  if (lsm6dso_number_of_steps_get(&(pObj->Ctx), (uint8_t *)StepCount) != LSM6DSO_OK)
 8007b22:	301c      	adds	r0, #28
 8007b24:	f000 fe02 	bl	800872c <lsm6dso_number_of_steps_get>
 8007b28:	3000      	adds	r0, #0
 8007b2a:	bf18      	it	ne
 8007b2c:	2001      	movne	r0, #1
}
 8007b2e:	4240      	negs	r0, r0
 8007b30:	bd08      	pop	{r3, pc}
 8007b32:	bf00      	nop

08007b34 <LSM6DSO_ACC_Step_Counter_Reset>:
{
 8007b34:	b508      	push	{r3, lr}
  if (lsm6dso_steps_reset(&(pObj->Ctx)) != LSM6DSO_OK)
 8007b36:	301c      	adds	r0, #28
 8007b38:	f000 fe38 	bl	80087ac <lsm6dso_steps_reset>
 8007b3c:	3000      	adds	r0, #0
 8007b3e:	bf18      	it	ne
 8007b40:	2001      	movne	r0, #1
}
 8007b42:	4240      	negs	r0, r0
 8007b44:	bd08      	pop	{r3, pc}
 8007b46:	bf00      	nop

08007b48 <LSM6DSO_ACC_Enable_Tilt_Detection>:
{
 8007b48:	b530      	push	{r4, r5, lr}
  if (pObj->acc_is_enabled == 1U)
 8007b4a:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8007b4e:	2b01      	cmp	r3, #1
{
 8007b50:	b083      	sub	sp, #12
 8007b52:	460d      	mov	r5, r1
 8007b54:	f100 041c 	add.w	r4, r0, #28
  if (pObj->acc_is_enabled == 1U)
 8007b58:	d024      	beq.n	8007ba4 <LSM6DSO_ACC_Enable_Tilt_Detection+0x5c>
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8007b5a:	2302      	movs	r3, #2
 8007b5c:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8007b60:	2100      	movs	r1, #0
 8007b62:	4620      	mov	r0, r4
 8007b64:	f000 fc92 	bl	800848c <lsm6dso_xl_full_scale_set>
 8007b68:	bb10      	cbnz	r0, 8007bb0 <LSM6DSO_ACC_Enable_Tilt_Detection+0x68>
  if (lsm6dso_tilt_sens_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8007b6a:	2101      	movs	r1, #1
 8007b6c:	4620      	mov	r0, r4
 8007b6e:	f001 fc81 	bl	8009474 <lsm6dso_tilt_sens_set>
 8007b72:	b9e8      	cbnz	r0, 8007bb0 <LSM6DSO_ACC_Enable_Tilt_Detection+0x68>
  switch (IntPin)
 8007b74:	b305      	cbz	r5, 8007bb8 <LSM6DSO_ACC_Enable_Tilt_Detection+0x70>
 8007b76:	2d01      	cmp	r5, #1
 8007b78:	d11a      	bne.n	8007bb0 <LSM6DSO_ACC_Enable_Tilt_Detection+0x68>
      if (lsm6dso_pin_int2_route_get(&(pObj->Ctx), &val2) != LSM6DSO_OK)
 8007b7a:	4669      	mov	r1, sp
 8007b7c:	4620      	mov	r0, r4
 8007b7e:	f001 f933 	bl	8008de8 <lsm6dso_pin_int2_route_get>
 8007b82:	b9a8      	cbnz	r0, 8007bb0 <LSM6DSO_ACC_Enable_Tilt_Detection+0x68>
      val2.emb_func_int2.int2_tilt = PROPERTY_ENABLE;
 8007b84:	f89d 3002 	ldrb.w	r3, [sp, #2]
      if (lsm6dso_pin_int2_route_set(&(pObj->Ctx), &val2) != LSM6DSO_OK)
 8007b88:	4669      	mov	r1, sp
      val2.emb_func_int2.int2_tilt = PROPERTY_ENABLE;
 8007b8a:	f043 0310 	orr.w	r3, r3, #16
      if (lsm6dso_pin_int2_route_set(&(pObj->Ctx), &val2) != LSM6DSO_OK)
 8007b8e:	4620      	mov	r0, r4
      val2.emb_func_int2.int2_tilt = PROPERTY_ENABLE;
 8007b90:	f88d 3002 	strb.w	r3, [sp, #2]
      if (lsm6dso_pin_int2_route_set(&(pObj->Ctx), &val2) != LSM6DSO_OK)
 8007b94:	f001 f834 	bl	8008c00 <lsm6dso_pin_int2_route_set>
 8007b98:	3000      	adds	r0, #0
 8007b9a:	bf18      	it	ne
 8007b9c:	2001      	movne	r0, #1
 8007b9e:	4240      	negs	r0, r0
}
 8007ba0:	b003      	add	sp, #12
 8007ba2:	bd30      	pop	{r4, r5, pc}
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8007ba4:	2102      	movs	r1, #2
 8007ba6:	4620      	mov	r0, r4
 8007ba8:	f000 fca6 	bl	80084f8 <lsm6dso_xl_data_rate_set>
 8007bac:	2800      	cmp	r0, #0
 8007bae:	d0d7      	beq.n	8007b60 <LSM6DSO_ACC_Enable_Tilt_Detection+0x18>
      ret = LSM6DSO_ERROR;
 8007bb0:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007bb4:	b003      	add	sp, #12
 8007bb6:	bd30      	pop	{r4, r5, pc}
      if (lsm6dso_pin_int1_route_get(&(pObj->Ctx), &val1) != LSM6DSO_OK)
 8007bb8:	4669      	mov	r1, sp
 8007bba:	4620      	mov	r0, r4
 8007bbc:	f000 ffbe 	bl	8008b3c <lsm6dso_pin_int1_route_get>
 8007bc0:	2800      	cmp	r0, #0
 8007bc2:	d1f5      	bne.n	8007bb0 <LSM6DSO_ACC_Enable_Tilt_Detection+0x68>
      val1.emb_func_int1.int1_tilt = PROPERTY_ENABLE;
 8007bc4:	f89d 3002 	ldrb.w	r3, [sp, #2]
      if (lsm6dso_pin_int1_route_set(&(pObj->Ctx), &val1) != LSM6DSO_OK)
 8007bc8:	4669      	mov	r1, sp
      val1.emb_func_int1.int1_tilt = PROPERTY_ENABLE;
 8007bca:	f043 0310 	orr.w	r3, r3, #16
      if (lsm6dso_pin_int1_route_set(&(pObj->Ctx), &val1) != LSM6DSO_OK)
 8007bce:	4620      	mov	r0, r4
      val1.emb_func_int1.int1_tilt = PROPERTY_ENABLE;
 8007bd0:	f88d 3002 	strb.w	r3, [sp, #2]
      if (lsm6dso_pin_int1_route_set(&(pObj->Ctx), &val1) != LSM6DSO_OK)
 8007bd4:	f001 f96a 	bl	8008eac <lsm6dso_pin_int1_route_set>
 8007bd8:	3000      	adds	r0, #0
 8007bda:	bf18      	it	ne
 8007bdc:	2001      	movne	r0, #1
 8007bde:	4240      	negs	r0, r0
}
 8007be0:	b003      	add	sp, #12
 8007be2:	bd30      	pop	{r4, r5, pc}

08007be4 <LSM6DSO_ACC_Disable_Tilt_Detection>:
{
 8007be4:	b510      	push	{r4, lr}
  if (lsm6dso_pin_int1_route_get(&(pObj->Ctx), &val1) != LSM6DSO_OK)
 8007be6:	f100 041c 	add.w	r4, r0, #28
{
 8007bea:	b084      	sub	sp, #16
  if (lsm6dso_pin_int1_route_get(&(pObj->Ctx), &val1) != LSM6DSO_OK)
 8007bec:	4620      	mov	r0, r4
 8007bee:	4669      	mov	r1, sp
 8007bf0:	f000 ffa4 	bl	8008b3c <lsm6dso_pin_int1_route_get>
 8007bf4:	bb20      	cbnz	r0, 8007c40 <LSM6DSO_ACC_Disable_Tilt_Detection+0x5c>
  val1.emb_func_int1.int1_tilt = PROPERTY_DISABLE;
 8007bf6:	f89d 3002 	ldrb.w	r3, [sp, #2]
  if (lsm6dso_pin_int1_route_set(&(pObj->Ctx), &val1) != LSM6DSO_OK)
 8007bfa:	4669      	mov	r1, sp
  val1.emb_func_int1.int1_tilt = PROPERTY_DISABLE;
 8007bfc:	f360 1304 	bfi	r3, r0, #4, #1
  if (lsm6dso_pin_int1_route_set(&(pObj->Ctx), &val1) != LSM6DSO_OK)
 8007c00:	4620      	mov	r0, r4
  val1.emb_func_int1.int1_tilt = PROPERTY_DISABLE;
 8007c02:	f88d 3002 	strb.w	r3, [sp, #2]
  if (lsm6dso_pin_int1_route_set(&(pObj->Ctx), &val1) != LSM6DSO_OK)
 8007c06:	f001 f951 	bl	8008eac <lsm6dso_pin_int1_route_set>
 8007c0a:	b9c8      	cbnz	r0, 8007c40 <LSM6DSO_ACC_Disable_Tilt_Detection+0x5c>
  if (lsm6dso_pin_int2_route_get(&(pObj->Ctx), &val2) != LSM6DSO_OK)
 8007c0c:	a902      	add	r1, sp, #8
 8007c0e:	4620      	mov	r0, r4
 8007c10:	f001 f8ea 	bl	8008de8 <lsm6dso_pin_int2_route_get>
 8007c14:	b9a0      	cbnz	r0, 8007c40 <LSM6DSO_ACC_Disable_Tilt_Detection+0x5c>
  val2.emb_func_int2.int2_tilt = PROPERTY_DISABLE;
 8007c16:	f89d 300a 	ldrb.w	r3, [sp, #10]
  if (lsm6dso_pin_int2_route_set(&(pObj->Ctx), &val2) != LSM6DSO_OK)
 8007c1a:	a902      	add	r1, sp, #8
  val2.emb_func_int2.int2_tilt = PROPERTY_DISABLE;
 8007c1c:	f360 1304 	bfi	r3, r0, #4, #1
  if (lsm6dso_pin_int2_route_set(&(pObj->Ctx), &val2) != LSM6DSO_OK)
 8007c20:	4620      	mov	r0, r4
  val2.emb_func_int2.int2_tilt = PROPERTY_DISABLE;
 8007c22:	f88d 300a 	strb.w	r3, [sp, #10]
  if (lsm6dso_pin_int2_route_set(&(pObj->Ctx), &val2) != LSM6DSO_OK)
 8007c26:	f000 ffeb 	bl	8008c00 <lsm6dso_pin_int2_route_set>
 8007c2a:	b948      	cbnz	r0, 8007c40 <LSM6DSO_ACC_Disable_Tilt_Detection+0x5c>
  if (lsm6dso_tilt_sens_set(&(pObj->Ctx), PROPERTY_DISABLE) != LSM6DSO_OK)
 8007c2c:	4601      	mov	r1, r0
 8007c2e:	4620      	mov	r0, r4
 8007c30:	f001 fc20 	bl	8009474 <lsm6dso_tilt_sens_set>
 8007c34:	3000      	adds	r0, #0
 8007c36:	bf18      	it	ne
 8007c38:	2001      	movne	r0, #1
 8007c3a:	4240      	negs	r0, r0
}
 8007c3c:	b004      	add	sp, #16
 8007c3e:	bd10      	pop	{r4, pc}
    return LSM6DSO_ERROR;
 8007c40:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007c44:	b004      	add	sp, #16
 8007c46:	bd10      	pop	{r4, pc}

08007c48 <LSM6DSO_ACC_Enable_Wake_Up_Detection>:
{
 8007c48:	b530      	push	{r4, r5, lr}
  if (pObj->acc_is_enabled == 1U)
 8007c4a:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8007c4e:	2b01      	cmp	r3, #1
{
 8007c50:	b083      	sub	sp, #12
 8007c52:	460d      	mov	r5, r1
 8007c54:	f100 041c 	add.w	r4, r0, #28
  if (pObj->acc_is_enabled == 1U)
 8007c58:	d029      	beq.n	8007cae <LSM6DSO_ACC_Enable_Wake_Up_Detection+0x66>
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8007c5a:	2306      	movs	r3, #6
 8007c5c:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8007c60:	2100      	movs	r1, #0
 8007c62:	4620      	mov	r0, r4
 8007c64:	f000 fc12 	bl	800848c <lsm6dso_xl_full_scale_set>
 8007c68:	bb38      	cbnz	r0, 8007cba <LSM6DSO_ACC_Enable_Wake_Up_Detection+0x72>
  if (lsm6dso_wkup_dur_set(&(pObj->Ctx), 0x00) != LSM6DSO_OK)
 8007c6a:	4601      	mov	r1, r0
 8007c6c:	4620      	mov	r0, r4
 8007c6e:	f001 fa2b 	bl	80090c8 <lsm6dso_wkup_dur_set>
 8007c72:	bb10      	cbnz	r0, 8007cba <LSM6DSO_ACC_Enable_Wake_Up_Detection+0x72>
  if (lsm6dso_wkup_threshold_set(&(pObj->Ctx), 0x02) != LSM6DSO_OK)
 8007c74:	2102      	movs	r1, #2
 8007c76:	4620      	mov	r0, r4
 8007c78:	f001 fa0c 	bl	8009094 <lsm6dso_wkup_threshold_set>
 8007c7c:	b9e8      	cbnz	r0, 8007cba <LSM6DSO_ACC_Enable_Wake_Up_Detection+0x72>
  switch (IntPin)
 8007c7e:	b305      	cbz	r5, 8007cc2 <LSM6DSO_ACC_Enable_Wake_Up_Detection+0x7a>
 8007c80:	2d01      	cmp	r5, #1
 8007c82:	d11a      	bne.n	8007cba <LSM6DSO_ACC_Enable_Wake_Up_Detection+0x72>
      if (lsm6dso_pin_int2_route_get(&(pObj->Ctx), &val2) != LSM6DSO_OK)
 8007c84:	4669      	mov	r1, sp
 8007c86:	4620      	mov	r0, r4
 8007c88:	f001 f8ae 	bl	8008de8 <lsm6dso_pin_int2_route_get>
 8007c8c:	b9a8      	cbnz	r0, 8007cba <LSM6DSO_ACC_Enable_Wake_Up_Detection+0x72>
      val2.md2_cfg.int2_wu = PROPERTY_ENABLE;
 8007c8e:	f89d 3001 	ldrb.w	r3, [sp, #1]
      if (lsm6dso_pin_int2_route_set(&(pObj->Ctx), &val2) != LSM6DSO_OK)
 8007c92:	4669      	mov	r1, sp
      val2.md2_cfg.int2_wu = PROPERTY_ENABLE;
 8007c94:	f043 0320 	orr.w	r3, r3, #32
      if (lsm6dso_pin_int2_route_set(&(pObj->Ctx), &val2) != LSM6DSO_OK)
 8007c98:	4620      	mov	r0, r4
      val2.md2_cfg.int2_wu = PROPERTY_ENABLE;
 8007c9a:	f88d 3001 	strb.w	r3, [sp, #1]
      if (lsm6dso_pin_int2_route_set(&(pObj->Ctx), &val2) != LSM6DSO_OK)
 8007c9e:	f000 ffaf 	bl	8008c00 <lsm6dso_pin_int2_route_set>
 8007ca2:	3000      	adds	r0, #0
 8007ca4:	bf18      	it	ne
 8007ca6:	2001      	movne	r0, #1
 8007ca8:	4240      	negs	r0, r0
}
 8007caa:	b003      	add	sp, #12
 8007cac:	bd30      	pop	{r4, r5, pc}
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8007cae:	2106      	movs	r1, #6
 8007cb0:	4620      	mov	r0, r4
 8007cb2:	f000 fc21 	bl	80084f8 <lsm6dso_xl_data_rate_set>
 8007cb6:	2800      	cmp	r0, #0
 8007cb8:	d0d2      	beq.n	8007c60 <LSM6DSO_ACC_Enable_Wake_Up_Detection+0x18>
      ret = LSM6DSO_ERROR;
 8007cba:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007cbe:	b003      	add	sp, #12
 8007cc0:	bd30      	pop	{r4, r5, pc}
      if (lsm6dso_pin_int1_route_get(&(pObj->Ctx), &val1) != LSM6DSO_OK)
 8007cc2:	4669      	mov	r1, sp
 8007cc4:	4620      	mov	r0, r4
 8007cc6:	f000 ff39 	bl	8008b3c <lsm6dso_pin_int1_route_get>
 8007cca:	2800      	cmp	r0, #0
 8007ccc:	d1f5      	bne.n	8007cba <LSM6DSO_ACC_Enable_Wake_Up_Detection+0x72>
      val1.md1_cfg.int1_wu = PROPERTY_ENABLE;
 8007cce:	f89d 3001 	ldrb.w	r3, [sp, #1]
      if (lsm6dso_pin_int1_route_set(&(pObj->Ctx), &val1) != LSM6DSO_OK)
 8007cd2:	4669      	mov	r1, sp
      val1.md1_cfg.int1_wu = PROPERTY_ENABLE;
 8007cd4:	f043 0320 	orr.w	r3, r3, #32
      if (lsm6dso_pin_int1_route_set(&(pObj->Ctx), &val1) != LSM6DSO_OK)
 8007cd8:	4620      	mov	r0, r4
      val1.md1_cfg.int1_wu = PROPERTY_ENABLE;
 8007cda:	f88d 3001 	strb.w	r3, [sp, #1]
      if (lsm6dso_pin_int1_route_set(&(pObj->Ctx), &val1) != LSM6DSO_OK)
 8007cde:	f001 f8e5 	bl	8008eac <lsm6dso_pin_int1_route_set>
 8007ce2:	3000      	adds	r0, #0
 8007ce4:	bf18      	it	ne
 8007ce6:	2001      	movne	r0, #1
 8007ce8:	4240      	negs	r0, r0
}
 8007cea:	b003      	add	sp, #12
 8007cec:	bd30      	pop	{r4, r5, pc}
 8007cee:	bf00      	nop

08007cf0 <LSM6DSO_ACC_Disable_Wake_Up_Detection>:
{
 8007cf0:	b510      	push	{r4, lr}
  if (lsm6dso_pin_int1_route_get(&(pObj->Ctx), &val1) != LSM6DSO_OK)
 8007cf2:	f100 041c 	add.w	r4, r0, #28
{
 8007cf6:	b084      	sub	sp, #16
  if (lsm6dso_pin_int1_route_get(&(pObj->Ctx), &val1) != LSM6DSO_OK)
 8007cf8:	4620      	mov	r0, r4
 8007cfa:	4669      	mov	r1, sp
 8007cfc:	f000 ff1e 	bl	8008b3c <lsm6dso_pin_int1_route_get>
 8007d00:	bb48      	cbnz	r0, 8007d56 <LSM6DSO_ACC_Disable_Wake_Up_Detection+0x66>
  val1.md1_cfg.int1_wu = PROPERTY_DISABLE;
 8007d02:	f89d 3001 	ldrb.w	r3, [sp, #1]
  if (lsm6dso_pin_int1_route_set(&(pObj->Ctx), &val1) != LSM6DSO_OK)
 8007d06:	4669      	mov	r1, sp
  val1.md1_cfg.int1_wu = PROPERTY_DISABLE;
 8007d08:	f360 1345 	bfi	r3, r0, #5, #1
  if (lsm6dso_pin_int1_route_set(&(pObj->Ctx), &val1) != LSM6DSO_OK)
 8007d0c:	4620      	mov	r0, r4
  val1.md1_cfg.int1_wu = PROPERTY_DISABLE;
 8007d0e:	f88d 3001 	strb.w	r3, [sp, #1]
  if (lsm6dso_pin_int1_route_set(&(pObj->Ctx), &val1) != LSM6DSO_OK)
 8007d12:	f001 f8cb 	bl	8008eac <lsm6dso_pin_int1_route_set>
 8007d16:	b9f0      	cbnz	r0, 8007d56 <LSM6DSO_ACC_Disable_Wake_Up_Detection+0x66>
  if (lsm6dso_pin_int2_route_get(&(pObj->Ctx), &val2) != LSM6DSO_OK)
 8007d18:	a902      	add	r1, sp, #8
 8007d1a:	4620      	mov	r0, r4
 8007d1c:	f001 f864 	bl	8008de8 <lsm6dso_pin_int2_route_get>
 8007d20:	b9c8      	cbnz	r0, 8007d56 <LSM6DSO_ACC_Disable_Wake_Up_Detection+0x66>
  val2.md2_cfg.int2_wu = PROPERTY_DISABLE;
 8007d22:	f89d 3009 	ldrb.w	r3, [sp, #9]
  if (lsm6dso_pin_int2_route_set(&(pObj->Ctx), &val2) != LSM6DSO_OK)
 8007d26:	a902      	add	r1, sp, #8
  val2.md2_cfg.int2_wu = PROPERTY_DISABLE;
 8007d28:	f360 1345 	bfi	r3, r0, #5, #1
  if (lsm6dso_pin_int2_route_set(&(pObj->Ctx), &val2) != LSM6DSO_OK)
 8007d2c:	4620      	mov	r0, r4
  val2.md2_cfg.int2_wu = PROPERTY_DISABLE;
 8007d2e:	f88d 3009 	strb.w	r3, [sp, #9]
  if (lsm6dso_pin_int2_route_set(&(pObj->Ctx), &val2) != LSM6DSO_OK)
 8007d32:	f000 ff65 	bl	8008c00 <lsm6dso_pin_int2_route_set>
 8007d36:	b970      	cbnz	r0, 8007d56 <LSM6DSO_ACC_Disable_Wake_Up_Detection+0x66>
  if (lsm6dso_wkup_threshold_set(&(pObj->Ctx), 0x00) != LSM6DSO_OK)
 8007d38:	4601      	mov	r1, r0
 8007d3a:	4620      	mov	r0, r4
 8007d3c:	f001 f9aa 	bl	8009094 <lsm6dso_wkup_threshold_set>
 8007d40:	b948      	cbnz	r0, 8007d56 <LSM6DSO_ACC_Disable_Wake_Up_Detection+0x66>
  if (lsm6dso_wkup_dur_set(&(pObj->Ctx), 0x00) != LSM6DSO_OK)
 8007d42:	4601      	mov	r1, r0
 8007d44:	4620      	mov	r0, r4
 8007d46:	f001 f9bf 	bl	80090c8 <lsm6dso_wkup_dur_set>
 8007d4a:	3000      	adds	r0, #0
 8007d4c:	bf18      	it	ne
 8007d4e:	2001      	movne	r0, #1
 8007d50:	4240      	negs	r0, r0
}
 8007d52:	b004      	add	sp, #16
 8007d54:	bd10      	pop	{r4, pc}
    return LSM6DSO_ERROR;
 8007d56:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007d5a:	b004      	add	sp, #16
 8007d5c:	bd10      	pop	{r4, pc}
 8007d5e:	bf00      	nop

08007d60 <LSM6DSO_ACC_Enable_Single_Tap_Detection>:
{
 8007d60:	b530      	push	{r4, r5, lr}
  if (pObj->acc_is_enabled == 1U)
 8007d62:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8007d66:	2b01      	cmp	r3, #1
{
 8007d68:	b083      	sub	sp, #12
 8007d6a:	460d      	mov	r5, r1
 8007d6c:	f100 041c 	add.w	r4, r0, #28
  if (pObj->acc_is_enabled == 1U)
 8007d70:	d057      	beq.n	8007e22 <LSM6DSO_ACC_Enable_Single_Tap_Detection+0xc2>
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8007d72:	2306      	movs	r3, #6
 8007d74:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8007d78:	2100      	movs	r1, #0
 8007d7a:	4620      	mov	r0, r4
 8007d7c:	f000 fb86 	bl	800848c <lsm6dso_xl_full_scale_set>
 8007d80:	2800      	cmp	r0, #0
 8007d82:	d154      	bne.n	8007e2e <LSM6DSO_ACC_Enable_Single_Tap_Detection+0xce>
  if (lsm6dso_tap_detection_on_x_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8007d84:	2101      	movs	r1, #1
 8007d86:	4620      	mov	r0, r4
 8007d88:	f001 fa06 	bl	8009198 <lsm6dso_tap_detection_on_x_set>
 8007d8c:	2800      	cmp	r0, #0
 8007d8e:	d14e      	bne.n	8007e2e <LSM6DSO_ACC_Enable_Single_Tap_Detection+0xce>
  if (lsm6dso_tap_detection_on_y_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8007d90:	2101      	movs	r1, #1
 8007d92:	4620      	mov	r0, r4
 8007d94:	f001 f9e6 	bl	8009164 <lsm6dso_tap_detection_on_y_set>
 8007d98:	2800      	cmp	r0, #0
 8007d9a:	d148      	bne.n	8007e2e <LSM6DSO_ACC_Enable_Single_Tap_Detection+0xce>
  if (lsm6dso_tap_detection_on_z_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8007d9c:	2101      	movs	r1, #1
 8007d9e:	4620      	mov	r0, r4
 8007da0:	f001 f9c6 	bl	8009130 <lsm6dso_tap_detection_on_z_set>
 8007da4:	2800      	cmp	r0, #0
 8007da6:	d142      	bne.n	8007e2e <LSM6DSO_ACC_Enable_Single_Tap_Detection+0xce>
  if (lsm6dso_tap_threshold_x_set(&(pObj->Ctx), 0x08) != LSM6DSO_OK)
 8007da8:	2108      	movs	r1, #8
 8007daa:	4620      	mov	r0, r4
 8007dac:	f001 fa0e 	bl	80091cc <lsm6dso_tap_threshold_x_set>
 8007db0:	2800      	cmp	r0, #0
 8007db2:	d13c      	bne.n	8007e2e <LSM6DSO_ACC_Enable_Single_Tap_Detection+0xce>
  if (lsm6dso_tap_shock_set(&(pObj->Ctx), 0x02) != LSM6DSO_OK)
 8007db4:	2102      	movs	r1, #2
 8007db6:	4620      	mov	r0, r4
 8007db8:	f001 fa22 	bl	8009200 <lsm6dso_tap_shock_set>
 8007dbc:	bbb8      	cbnz	r0, 8007e2e <LSM6DSO_ACC_Enable_Single_Tap_Detection+0xce>
  if (lsm6dso_tap_quiet_set(&(pObj->Ctx), 0x01) != LSM6DSO_OK)
 8007dbe:	2101      	movs	r1, #1
 8007dc0:	4620      	mov	r0, r4
 8007dc2:	f001 fa37 	bl	8009234 <lsm6dso_tap_quiet_set>
 8007dc6:	bb90      	cbnz	r0, 8007e2e <LSM6DSO_ACC_Enable_Single_Tap_Detection+0xce>
  switch (IntPin)
 8007dc8:	b1b5      	cbz	r5, 8007df8 <LSM6DSO_ACC_Enable_Single_Tap_Detection+0x98>
 8007dca:	2d01      	cmp	r5, #1
 8007dcc:	d12f      	bne.n	8007e2e <LSM6DSO_ACC_Enable_Single_Tap_Detection+0xce>
      if (lsm6dso_pin_int2_route_get(&(pObj->Ctx), &val2) != LSM6DSO_OK)
 8007dce:	4669      	mov	r1, sp
 8007dd0:	4620      	mov	r0, r4
 8007dd2:	f001 f809 	bl	8008de8 <lsm6dso_pin_int2_route_get>
 8007dd6:	bb50      	cbnz	r0, 8007e2e <LSM6DSO_ACC_Enable_Single_Tap_Detection+0xce>
      val2.md2_cfg.int2_single_tap = PROPERTY_ENABLE;
 8007dd8:	f89d 3001 	ldrb.w	r3, [sp, #1]
      if (lsm6dso_pin_int2_route_set(&(pObj->Ctx), &val2) != LSM6DSO_OK)
 8007ddc:	4669      	mov	r1, sp
      val2.md2_cfg.int2_single_tap = PROPERTY_ENABLE;
 8007dde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
      if (lsm6dso_pin_int2_route_set(&(pObj->Ctx), &val2) != LSM6DSO_OK)
 8007de2:	4620      	mov	r0, r4
      val2.md2_cfg.int2_single_tap = PROPERTY_ENABLE;
 8007de4:	f88d 3001 	strb.w	r3, [sp, #1]
      if (lsm6dso_pin_int2_route_set(&(pObj->Ctx), &val2) != LSM6DSO_OK)
 8007de8:	f000 ff0a 	bl	8008c00 <lsm6dso_pin_int2_route_set>
 8007dec:	3000      	adds	r0, #0
 8007dee:	bf18      	it	ne
 8007df0:	2001      	movne	r0, #1
 8007df2:	4240      	negs	r0, r0
}
 8007df4:	b003      	add	sp, #12
 8007df6:	bd30      	pop	{r4, r5, pc}
      if (lsm6dso_pin_int1_route_get(&(pObj->Ctx), &val1) != LSM6DSO_OK)
 8007df8:	4669      	mov	r1, sp
 8007dfa:	4620      	mov	r0, r4
 8007dfc:	f000 fe9e 	bl	8008b3c <lsm6dso_pin_int1_route_get>
 8007e00:	b9a8      	cbnz	r0, 8007e2e <LSM6DSO_ACC_Enable_Single_Tap_Detection+0xce>
      val1.md1_cfg.int1_single_tap = PROPERTY_ENABLE;
 8007e02:	f89d 3001 	ldrb.w	r3, [sp, #1]
      if (lsm6dso_pin_int1_route_set(&(pObj->Ctx), &val1) != LSM6DSO_OK)
 8007e06:	4669      	mov	r1, sp
      val1.md1_cfg.int1_single_tap = PROPERTY_ENABLE;
 8007e08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
      if (lsm6dso_pin_int1_route_set(&(pObj->Ctx), &val1) != LSM6DSO_OK)
 8007e0c:	4620      	mov	r0, r4
      val1.md1_cfg.int1_single_tap = PROPERTY_ENABLE;
 8007e0e:	f88d 3001 	strb.w	r3, [sp, #1]
      if (lsm6dso_pin_int1_route_set(&(pObj->Ctx), &val1) != LSM6DSO_OK)
 8007e12:	f001 f84b 	bl	8008eac <lsm6dso_pin_int1_route_set>
 8007e16:	3000      	adds	r0, #0
 8007e18:	bf18      	it	ne
 8007e1a:	2001      	movne	r0, #1
 8007e1c:	4240      	negs	r0, r0
}
 8007e1e:	b003      	add	sp, #12
 8007e20:	bd30      	pop	{r4, r5, pc}
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8007e22:	2106      	movs	r1, #6
 8007e24:	4620      	mov	r0, r4
 8007e26:	f000 fb67 	bl	80084f8 <lsm6dso_xl_data_rate_set>
 8007e2a:	2800      	cmp	r0, #0
 8007e2c:	d0a4      	beq.n	8007d78 <LSM6DSO_ACC_Enable_Single_Tap_Detection+0x18>
      ret = LSM6DSO_ERROR;
 8007e2e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007e32:	b003      	add	sp, #12
 8007e34:	bd30      	pop	{r4, r5, pc}
 8007e36:	bf00      	nop

08007e38 <LSM6DSO_ACC_Disable_Single_Tap_Detection>:
{
 8007e38:	b510      	push	{r4, lr}
  if (lsm6dso_pin_int1_route_get(&(pObj->Ctx), &val1) != LSM6DSO_OK)
 8007e3a:	f100 041c 	add.w	r4, r0, #28
{
 8007e3e:	b084      	sub	sp, #16
  if (lsm6dso_pin_int1_route_get(&(pObj->Ctx), &val1) != LSM6DSO_OK)
 8007e40:	4620      	mov	r0, r4
 8007e42:	4669      	mov	r1, sp
 8007e44:	f000 fe7a 	bl	8008b3c <lsm6dso_pin_int1_route_get>
 8007e48:	2800      	cmp	r0, #0
 8007e4a:	d13d      	bne.n	8007ec8 <LSM6DSO_ACC_Disable_Single_Tap_Detection+0x90>
  val1.md1_cfg.int1_single_tap = PROPERTY_DISABLE;
 8007e4c:	f89d 3001 	ldrb.w	r3, [sp, #1]
  if (lsm6dso_pin_int1_route_set(&(pObj->Ctx), &val1) != LSM6DSO_OK)
 8007e50:	4669      	mov	r1, sp
  val1.md1_cfg.int1_single_tap = PROPERTY_DISABLE;
 8007e52:	f360 1386 	bfi	r3, r0, #6, #1
  if (lsm6dso_pin_int1_route_set(&(pObj->Ctx), &val1) != LSM6DSO_OK)
 8007e56:	4620      	mov	r0, r4
  val1.md1_cfg.int1_single_tap = PROPERTY_DISABLE;
 8007e58:	f88d 3001 	strb.w	r3, [sp, #1]
  if (lsm6dso_pin_int1_route_set(&(pObj->Ctx), &val1) != LSM6DSO_OK)
 8007e5c:	f001 f826 	bl	8008eac <lsm6dso_pin_int1_route_set>
 8007e60:	bb90      	cbnz	r0, 8007ec8 <LSM6DSO_ACC_Disable_Single_Tap_Detection+0x90>
  if (lsm6dso_pin_int2_route_get(&(pObj->Ctx), &val2) != LSM6DSO_OK)
 8007e62:	a902      	add	r1, sp, #8
 8007e64:	4620      	mov	r0, r4
 8007e66:	f000 ffbf 	bl	8008de8 <lsm6dso_pin_int2_route_get>
 8007e6a:	bb68      	cbnz	r0, 8007ec8 <LSM6DSO_ACC_Disable_Single_Tap_Detection+0x90>
  val2.md2_cfg.int2_single_tap = PROPERTY_DISABLE;
 8007e6c:	f89d 3009 	ldrb.w	r3, [sp, #9]
  if (lsm6dso_pin_int2_route_set(&(pObj->Ctx), &val2) != LSM6DSO_OK)
 8007e70:	a902      	add	r1, sp, #8
  val2.md2_cfg.int2_single_tap = PROPERTY_DISABLE;
 8007e72:	f360 1386 	bfi	r3, r0, #6, #1
  if (lsm6dso_pin_int2_route_set(&(pObj->Ctx), &val2) != LSM6DSO_OK)
 8007e76:	4620      	mov	r0, r4
  val2.md2_cfg.int2_single_tap = PROPERTY_DISABLE;
 8007e78:	f88d 3009 	strb.w	r3, [sp, #9]
  if (lsm6dso_pin_int2_route_set(&(pObj->Ctx), &val2) != LSM6DSO_OK)
 8007e7c:	f000 fec0 	bl	8008c00 <lsm6dso_pin_int2_route_set>
 8007e80:	bb10      	cbnz	r0, 8007ec8 <LSM6DSO_ACC_Disable_Single_Tap_Detection+0x90>
  if (lsm6dso_tap_quiet_set(&(pObj->Ctx), 0x00) != LSM6DSO_OK)
 8007e82:	4601      	mov	r1, r0
 8007e84:	4620      	mov	r0, r4
 8007e86:	f001 f9d5 	bl	8009234 <lsm6dso_tap_quiet_set>
 8007e8a:	b9e8      	cbnz	r0, 8007ec8 <LSM6DSO_ACC_Disable_Single_Tap_Detection+0x90>
  if (lsm6dso_tap_shock_set(&(pObj->Ctx), 0x00) != LSM6DSO_OK)
 8007e8c:	4601      	mov	r1, r0
 8007e8e:	4620      	mov	r0, r4
 8007e90:	f001 f9b6 	bl	8009200 <lsm6dso_tap_shock_set>
 8007e94:	b9c0      	cbnz	r0, 8007ec8 <LSM6DSO_ACC_Disable_Single_Tap_Detection+0x90>
  if (lsm6dso_tap_threshold_x_set(&(pObj->Ctx), 0x00) != LSM6DSO_OK)
 8007e96:	4601      	mov	r1, r0
 8007e98:	4620      	mov	r0, r4
 8007e9a:	f001 f997 	bl	80091cc <lsm6dso_tap_threshold_x_set>
 8007e9e:	b998      	cbnz	r0, 8007ec8 <LSM6DSO_ACC_Disable_Single_Tap_Detection+0x90>
  if (lsm6dso_tap_detection_on_z_set(&(pObj->Ctx), PROPERTY_DISABLE) != LSM6DSO_OK)
 8007ea0:	4601      	mov	r1, r0
 8007ea2:	4620      	mov	r0, r4
 8007ea4:	f001 f944 	bl	8009130 <lsm6dso_tap_detection_on_z_set>
 8007ea8:	b970      	cbnz	r0, 8007ec8 <LSM6DSO_ACC_Disable_Single_Tap_Detection+0x90>
  if (lsm6dso_tap_detection_on_y_set(&(pObj->Ctx), PROPERTY_DISABLE) != LSM6DSO_OK)
 8007eaa:	4601      	mov	r1, r0
 8007eac:	4620      	mov	r0, r4
 8007eae:	f001 f959 	bl	8009164 <lsm6dso_tap_detection_on_y_set>
 8007eb2:	b948      	cbnz	r0, 8007ec8 <LSM6DSO_ACC_Disable_Single_Tap_Detection+0x90>
  if (lsm6dso_tap_detection_on_x_set(&(pObj->Ctx), PROPERTY_DISABLE) != LSM6DSO_OK)
 8007eb4:	4601      	mov	r1, r0
 8007eb6:	4620      	mov	r0, r4
 8007eb8:	f001 f96e 	bl	8009198 <lsm6dso_tap_detection_on_x_set>
 8007ebc:	3000      	adds	r0, #0
 8007ebe:	bf18      	it	ne
 8007ec0:	2001      	movne	r0, #1
 8007ec2:	4240      	negs	r0, r0
}
 8007ec4:	b004      	add	sp, #16
 8007ec6:	bd10      	pop	{r4, pc}
    return LSM6DSO_ERROR;
 8007ec8:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007ecc:	b004      	add	sp, #16
 8007ece:	bd10      	pop	{r4, pc}

08007ed0 <LSM6DSO_ACC_Enable_Double_Tap_Detection>:
{
 8007ed0:	b530      	push	{r4, r5, lr}
  if (pObj->acc_is_enabled == 1U)
 8007ed2:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8007ed6:	2b01      	cmp	r3, #1
{
 8007ed8:	b083      	sub	sp, #12
 8007eda:	460d      	mov	r5, r1
 8007edc:	f100 041c 	add.w	r4, r0, #28
  if (pObj->acc_is_enabled == 1U)
 8007ee0:	d04a      	beq.n	8007f78 <LSM6DSO_ACC_Enable_Double_Tap_Detection+0xa8>
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8007ee2:	2306      	movs	r3, #6
 8007ee4:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8007ee8:	2100      	movs	r1, #0
 8007eea:	4620      	mov	r0, r4
 8007eec:	f000 face 	bl	800848c <lsm6dso_xl_full_scale_set>
 8007ef0:	2800      	cmp	r0, #0
 8007ef2:	d147      	bne.n	8007f84 <LSM6DSO_ACC_Enable_Double_Tap_Detection+0xb4>
  if (lsm6dso_tap_detection_on_x_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8007ef4:	2101      	movs	r1, #1
 8007ef6:	4620      	mov	r0, r4
 8007ef8:	f001 f94e 	bl	8009198 <lsm6dso_tap_detection_on_x_set>
 8007efc:	2800      	cmp	r0, #0
 8007efe:	d141      	bne.n	8007f84 <LSM6DSO_ACC_Enable_Double_Tap_Detection+0xb4>
  if (lsm6dso_tap_detection_on_y_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8007f00:	2101      	movs	r1, #1
 8007f02:	4620      	mov	r0, r4
 8007f04:	f001 f92e 	bl	8009164 <lsm6dso_tap_detection_on_y_set>
 8007f08:	2800      	cmp	r0, #0
 8007f0a:	d13b      	bne.n	8007f84 <LSM6DSO_ACC_Enable_Double_Tap_Detection+0xb4>
  if (lsm6dso_tap_detection_on_z_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8007f0c:	2101      	movs	r1, #1
 8007f0e:	4620      	mov	r0, r4
 8007f10:	f001 f90e 	bl	8009130 <lsm6dso_tap_detection_on_z_set>
 8007f14:	bbb0      	cbnz	r0, 8007f84 <LSM6DSO_ACC_Enable_Double_Tap_Detection+0xb4>
  if (lsm6dso_tap_threshold_x_set(&(pObj->Ctx), 0x08) != LSM6DSO_OK)
 8007f16:	2108      	movs	r1, #8
 8007f18:	4620      	mov	r0, r4
 8007f1a:	f001 f957 	bl	80091cc <lsm6dso_tap_threshold_x_set>
 8007f1e:	bb88      	cbnz	r0, 8007f84 <LSM6DSO_ACC_Enable_Double_Tap_Detection+0xb4>
  if (lsm6dso_tap_shock_set(&(pObj->Ctx), 0x03) != LSM6DSO_OK)
 8007f20:	2103      	movs	r1, #3
 8007f22:	4620      	mov	r0, r4
 8007f24:	f001 f96c 	bl	8009200 <lsm6dso_tap_shock_set>
 8007f28:	bb60      	cbnz	r0, 8007f84 <LSM6DSO_ACC_Enable_Double_Tap_Detection+0xb4>
  if (lsm6dso_tap_quiet_set(&(pObj->Ctx), 0x03) != LSM6DSO_OK)
 8007f2a:	2103      	movs	r1, #3
 8007f2c:	4620      	mov	r0, r4
 8007f2e:	f001 f981 	bl	8009234 <lsm6dso_tap_quiet_set>
 8007f32:	bb38      	cbnz	r0, 8007f84 <LSM6DSO_ACC_Enable_Double_Tap_Detection+0xb4>
  if (lsm6dso_tap_dur_set(&(pObj->Ctx), 0x08) != LSM6DSO_OK)
 8007f34:	2108      	movs	r1, #8
 8007f36:	4620      	mov	r0, r4
 8007f38:	f001 f996 	bl	8009268 <lsm6dso_tap_dur_set>
 8007f3c:	bb10      	cbnz	r0, 8007f84 <LSM6DSO_ACC_Enable_Double_Tap_Detection+0xb4>
  if (lsm6dso_tap_mode_set(&(pObj->Ctx), LSM6DSO_BOTH_SINGLE_DOUBLE) != LSM6DSO_OK)
 8007f3e:	2101      	movs	r1, #1
 8007f40:	4620      	mov	r0, r4
 8007f42:	f001 f9ab 	bl	800929c <lsm6dso_tap_mode_set>
 8007f46:	b9e8      	cbnz	r0, 8007f84 <LSM6DSO_ACC_Enable_Double_Tap_Detection+0xb4>
  switch (IntPin)
 8007f48:	b305      	cbz	r5, 8007f8c <LSM6DSO_ACC_Enable_Double_Tap_Detection+0xbc>
 8007f4a:	2d01      	cmp	r5, #1
 8007f4c:	d11a      	bne.n	8007f84 <LSM6DSO_ACC_Enable_Double_Tap_Detection+0xb4>
      if (lsm6dso_pin_int2_route_get(&(pObj->Ctx), &val2) != LSM6DSO_OK)
 8007f4e:	4669      	mov	r1, sp
 8007f50:	4620      	mov	r0, r4
 8007f52:	f000 ff49 	bl	8008de8 <lsm6dso_pin_int2_route_get>
 8007f56:	b9a8      	cbnz	r0, 8007f84 <LSM6DSO_ACC_Enable_Double_Tap_Detection+0xb4>
      val2.md2_cfg.int2_double_tap = PROPERTY_ENABLE;
 8007f58:	f89d 3001 	ldrb.w	r3, [sp, #1]
      if (lsm6dso_pin_int2_route_set(&(pObj->Ctx), &val2) != LSM6DSO_OK)
 8007f5c:	4669      	mov	r1, sp
      val2.md2_cfg.int2_double_tap = PROPERTY_ENABLE;
 8007f5e:	f043 0308 	orr.w	r3, r3, #8
      if (lsm6dso_pin_int2_route_set(&(pObj->Ctx), &val2) != LSM6DSO_OK)
 8007f62:	4620      	mov	r0, r4
      val2.md2_cfg.int2_double_tap = PROPERTY_ENABLE;
 8007f64:	f88d 3001 	strb.w	r3, [sp, #1]
      if (lsm6dso_pin_int2_route_set(&(pObj->Ctx), &val2) != LSM6DSO_OK)
 8007f68:	f000 fe4a 	bl	8008c00 <lsm6dso_pin_int2_route_set>
 8007f6c:	3000      	adds	r0, #0
 8007f6e:	bf18      	it	ne
 8007f70:	2001      	movne	r0, #1
 8007f72:	4240      	negs	r0, r0
}
 8007f74:	b003      	add	sp, #12
 8007f76:	bd30      	pop	{r4, r5, pc}
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8007f78:	2106      	movs	r1, #6
 8007f7a:	4620      	mov	r0, r4
 8007f7c:	f000 fabc 	bl	80084f8 <lsm6dso_xl_data_rate_set>
 8007f80:	2800      	cmp	r0, #0
 8007f82:	d0b1      	beq.n	8007ee8 <LSM6DSO_ACC_Enable_Double_Tap_Detection+0x18>
      ret = LSM6DSO_ERROR;
 8007f84:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007f88:	b003      	add	sp, #12
 8007f8a:	bd30      	pop	{r4, r5, pc}
      if (lsm6dso_pin_int1_route_get(&(pObj->Ctx), &val1) != LSM6DSO_OK)
 8007f8c:	4669      	mov	r1, sp
 8007f8e:	4620      	mov	r0, r4
 8007f90:	f000 fdd4 	bl	8008b3c <lsm6dso_pin_int1_route_get>
 8007f94:	2800      	cmp	r0, #0
 8007f96:	d1f5      	bne.n	8007f84 <LSM6DSO_ACC_Enable_Double_Tap_Detection+0xb4>
      val1.md1_cfg.int1_double_tap = PROPERTY_ENABLE;
 8007f98:	f89d 3001 	ldrb.w	r3, [sp, #1]
      if (lsm6dso_pin_int1_route_set(&(pObj->Ctx), &val1) != LSM6DSO_OK)
 8007f9c:	4669      	mov	r1, sp
      val1.md1_cfg.int1_double_tap = PROPERTY_ENABLE;
 8007f9e:	f043 0308 	orr.w	r3, r3, #8
      if (lsm6dso_pin_int1_route_set(&(pObj->Ctx), &val1) != LSM6DSO_OK)
 8007fa2:	4620      	mov	r0, r4
      val1.md1_cfg.int1_double_tap = PROPERTY_ENABLE;
 8007fa4:	f88d 3001 	strb.w	r3, [sp, #1]
      if (lsm6dso_pin_int1_route_set(&(pObj->Ctx), &val1) != LSM6DSO_OK)
 8007fa8:	f000 ff80 	bl	8008eac <lsm6dso_pin_int1_route_set>
 8007fac:	3000      	adds	r0, #0
 8007fae:	bf18      	it	ne
 8007fb0:	2001      	movne	r0, #1
 8007fb2:	4240      	negs	r0, r0
}
 8007fb4:	b003      	add	sp, #12
 8007fb6:	bd30      	pop	{r4, r5, pc}

08007fb8 <LSM6DSO_ACC_Disable_Double_Tap_Detection>:
{
 8007fb8:	b510      	push	{r4, lr}
  if (lsm6dso_pin_int1_route_get(&(pObj->Ctx), &val1) != LSM6DSO_OK)
 8007fba:	f100 041c 	add.w	r4, r0, #28
{
 8007fbe:	b084      	sub	sp, #16
  if (lsm6dso_pin_int1_route_get(&(pObj->Ctx), &val1) != LSM6DSO_OK)
 8007fc0:	4620      	mov	r0, r4
 8007fc2:	4669      	mov	r1, sp
 8007fc4:	f000 fdba 	bl	8008b3c <lsm6dso_pin_int1_route_get>
 8007fc8:	2800      	cmp	r0, #0
 8007fca:	d148      	bne.n	800805e <LSM6DSO_ACC_Disable_Double_Tap_Detection+0xa6>
  val1.md1_cfg.int1_double_tap = PROPERTY_DISABLE;
 8007fcc:	f89d 3001 	ldrb.w	r3, [sp, #1]
  if (lsm6dso_pin_int1_route_set(&(pObj->Ctx), &val1) != LSM6DSO_OK)
 8007fd0:	4669      	mov	r1, sp
  val1.md1_cfg.int1_double_tap = PROPERTY_DISABLE;
 8007fd2:	f360 03c3 	bfi	r3, r0, #3, #1
  if (lsm6dso_pin_int1_route_set(&(pObj->Ctx), &val1) != LSM6DSO_OK)
 8007fd6:	4620      	mov	r0, r4
  val1.md1_cfg.int1_double_tap = PROPERTY_DISABLE;
 8007fd8:	f88d 3001 	strb.w	r3, [sp, #1]
  if (lsm6dso_pin_int1_route_set(&(pObj->Ctx), &val1) != LSM6DSO_OK)
 8007fdc:	f000 ff66 	bl	8008eac <lsm6dso_pin_int1_route_set>
 8007fe0:	2800      	cmp	r0, #0
 8007fe2:	d13c      	bne.n	800805e <LSM6DSO_ACC_Disable_Double_Tap_Detection+0xa6>
  if (lsm6dso_pin_int2_route_get(&(pObj->Ctx), &val2) != LSM6DSO_OK)
 8007fe4:	a902      	add	r1, sp, #8
 8007fe6:	4620      	mov	r0, r4
 8007fe8:	f000 fefe 	bl	8008de8 <lsm6dso_pin_int2_route_get>
 8007fec:	bbb8      	cbnz	r0, 800805e <LSM6DSO_ACC_Disable_Double_Tap_Detection+0xa6>
  val2.md2_cfg.int2_double_tap = PROPERTY_DISABLE;
 8007fee:	f89d 3009 	ldrb.w	r3, [sp, #9]
  if (lsm6dso_pin_int2_route_set(&(pObj->Ctx), &val2) != LSM6DSO_OK)
 8007ff2:	a902      	add	r1, sp, #8
  val2.md2_cfg.int2_double_tap = PROPERTY_DISABLE;
 8007ff4:	f360 03c3 	bfi	r3, r0, #3, #1
  if (lsm6dso_pin_int2_route_set(&(pObj->Ctx), &val2) != LSM6DSO_OK)
 8007ff8:	4620      	mov	r0, r4
  val2.md2_cfg.int2_double_tap = PROPERTY_DISABLE;
 8007ffa:	f88d 3009 	strb.w	r3, [sp, #9]
  if (lsm6dso_pin_int2_route_set(&(pObj->Ctx), &val2) != LSM6DSO_OK)
 8007ffe:	f000 fdff 	bl	8008c00 <lsm6dso_pin_int2_route_set>
 8008002:	bb60      	cbnz	r0, 800805e <LSM6DSO_ACC_Disable_Double_Tap_Detection+0xa6>
  if (lsm6dso_tap_mode_set(&(pObj->Ctx), LSM6DSO_ONLY_SINGLE) != LSM6DSO_OK)
 8008004:	4601      	mov	r1, r0
 8008006:	4620      	mov	r0, r4
 8008008:	f001 f948 	bl	800929c <lsm6dso_tap_mode_set>
 800800c:	bb38      	cbnz	r0, 800805e <LSM6DSO_ACC_Disable_Double_Tap_Detection+0xa6>
  if (lsm6dso_tap_dur_set(&(pObj->Ctx), 0x00) != LSM6DSO_OK)
 800800e:	4601      	mov	r1, r0
 8008010:	4620      	mov	r0, r4
 8008012:	f001 f929 	bl	8009268 <lsm6dso_tap_dur_set>
 8008016:	bb10      	cbnz	r0, 800805e <LSM6DSO_ACC_Disable_Double_Tap_Detection+0xa6>
  if (lsm6dso_tap_quiet_set(&(pObj->Ctx), 0x00) != LSM6DSO_OK)
 8008018:	4601      	mov	r1, r0
 800801a:	4620      	mov	r0, r4
 800801c:	f001 f90a 	bl	8009234 <lsm6dso_tap_quiet_set>
 8008020:	b9e8      	cbnz	r0, 800805e <LSM6DSO_ACC_Disable_Double_Tap_Detection+0xa6>
  if (lsm6dso_tap_shock_set(&(pObj->Ctx), 0x00) != LSM6DSO_OK)
 8008022:	4601      	mov	r1, r0
 8008024:	4620      	mov	r0, r4
 8008026:	f001 f8eb 	bl	8009200 <lsm6dso_tap_shock_set>
 800802a:	b9c0      	cbnz	r0, 800805e <LSM6DSO_ACC_Disable_Double_Tap_Detection+0xa6>
  if (lsm6dso_tap_threshold_x_set(&(pObj->Ctx), 0x00) != LSM6DSO_OK)
 800802c:	4601      	mov	r1, r0
 800802e:	4620      	mov	r0, r4
 8008030:	f001 f8cc 	bl	80091cc <lsm6dso_tap_threshold_x_set>
 8008034:	b998      	cbnz	r0, 800805e <LSM6DSO_ACC_Disable_Double_Tap_Detection+0xa6>
  if (lsm6dso_tap_detection_on_z_set(&(pObj->Ctx), PROPERTY_DISABLE) != LSM6DSO_OK)
 8008036:	4601      	mov	r1, r0
 8008038:	4620      	mov	r0, r4
 800803a:	f001 f879 	bl	8009130 <lsm6dso_tap_detection_on_z_set>
 800803e:	b970      	cbnz	r0, 800805e <LSM6DSO_ACC_Disable_Double_Tap_Detection+0xa6>
  if (lsm6dso_tap_detection_on_y_set(&(pObj->Ctx), PROPERTY_DISABLE) != LSM6DSO_OK)
 8008040:	2100      	movs	r1, #0
 8008042:	4620      	mov	r0, r4
 8008044:	f001 f88e 	bl	8009164 <lsm6dso_tap_detection_on_y_set>
 8008048:	b948      	cbnz	r0, 800805e <LSM6DSO_ACC_Disable_Double_Tap_Detection+0xa6>
  if (lsm6dso_tap_detection_on_x_set(&(pObj->Ctx), PROPERTY_DISABLE) != LSM6DSO_OK)
 800804a:	4601      	mov	r1, r0
 800804c:	4620      	mov	r0, r4
 800804e:	f001 f8a3 	bl	8009198 <lsm6dso_tap_detection_on_x_set>
 8008052:	3000      	adds	r0, #0
 8008054:	bf18      	it	ne
 8008056:	2001      	movne	r0, #1
 8008058:	4240      	negs	r0, r0
}
 800805a:	b004      	add	sp, #16
 800805c:	bd10      	pop	{r4, pc}
    return LSM6DSO_ERROR;
 800805e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008062:	b004      	add	sp, #16
 8008064:	bd10      	pop	{r4, pc}
 8008066:	bf00      	nop

08008068 <LSM6DSO_ACC_Set_Tap_Threshold>:
{
 8008068:	b508      	push	{r3, lr}
  if (lsm6dso_tap_threshold_x_set(&(pObj->Ctx), Threshold) != LSM6DSO_OK)
 800806a:	301c      	adds	r0, #28
 800806c:	f001 f8ae 	bl	80091cc <lsm6dso_tap_threshold_x_set>
 8008070:	3000      	adds	r0, #0
 8008072:	bf18      	it	ne
 8008074:	2001      	movne	r0, #1
}
 8008076:	4240      	negs	r0, r0
 8008078:	bd08      	pop	{r3, pc}
 800807a:	bf00      	nop

0800807c <LSM6DSO_ACC_Enable_6D_Orientation>:
{
 800807c:	b530      	push	{r4, r5, lr}
  if (pObj->acc_is_enabled == 1U)
 800807e:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8008082:	2b01      	cmp	r3, #1
{
 8008084:	b083      	sub	sp, #12
 8008086:	460d      	mov	r5, r1
 8008088:	f100 041c 	add.w	r4, r0, #28
  if (pObj->acc_is_enabled == 1U)
 800808c:	d024      	beq.n	80080d8 <LSM6DSO_ACC_Enable_6D_Orientation+0x5c>
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 800808e:	2306      	movs	r3, #6
 8008090:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8008094:	2100      	movs	r1, #0
 8008096:	4620      	mov	r0, r4
 8008098:	f000 f9f8 	bl	800848c <lsm6dso_xl_full_scale_set>
 800809c:	bb10      	cbnz	r0, 80080e4 <LSM6DSO_ACC_Enable_6D_Orientation+0x68>
  if (lsm6dso_6d_threshold_set(&(pObj->Ctx), LSM6DSO_DEG_60) != LSM6DSO_OK)
 800809e:	2102      	movs	r1, #2
 80080a0:	4620      	mov	r0, r4
 80080a2:	f001 f915 	bl	80092d0 <lsm6dso_6d_threshold_set>
 80080a6:	b9e8      	cbnz	r0, 80080e4 <LSM6DSO_ACC_Enable_6D_Orientation+0x68>
  switch (IntPin)
 80080a8:	b305      	cbz	r5, 80080ec <LSM6DSO_ACC_Enable_6D_Orientation+0x70>
 80080aa:	2d01      	cmp	r5, #1
 80080ac:	d11a      	bne.n	80080e4 <LSM6DSO_ACC_Enable_6D_Orientation+0x68>
      if (lsm6dso_pin_int2_route_get(&(pObj->Ctx), &val2) != LSM6DSO_OK)
 80080ae:	4669      	mov	r1, sp
 80080b0:	4620      	mov	r0, r4
 80080b2:	f000 fe99 	bl	8008de8 <lsm6dso_pin_int2_route_get>
 80080b6:	b9a8      	cbnz	r0, 80080e4 <LSM6DSO_ACC_Enable_6D_Orientation+0x68>
      val2.md2_cfg.int2_6d = PROPERTY_ENABLE;
 80080b8:	f89d 3001 	ldrb.w	r3, [sp, #1]
      if (lsm6dso_pin_int2_route_set(&(pObj->Ctx), &val2) != LSM6DSO_OK)
 80080bc:	4669      	mov	r1, sp
      val2.md2_cfg.int2_6d = PROPERTY_ENABLE;
 80080be:	f043 0304 	orr.w	r3, r3, #4
      if (lsm6dso_pin_int2_route_set(&(pObj->Ctx), &val2) != LSM6DSO_OK)
 80080c2:	4620      	mov	r0, r4
      val2.md2_cfg.int2_6d = PROPERTY_ENABLE;
 80080c4:	f88d 3001 	strb.w	r3, [sp, #1]
      if (lsm6dso_pin_int2_route_set(&(pObj->Ctx), &val2) != LSM6DSO_OK)
 80080c8:	f000 fd9a 	bl	8008c00 <lsm6dso_pin_int2_route_set>
 80080cc:	3000      	adds	r0, #0
 80080ce:	bf18      	it	ne
 80080d0:	2001      	movne	r0, #1
 80080d2:	4240      	negs	r0, r0
}
 80080d4:	b003      	add	sp, #12
 80080d6:	bd30      	pop	{r4, r5, pc}
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 80080d8:	2106      	movs	r1, #6
 80080da:	4620      	mov	r0, r4
 80080dc:	f000 fa0c 	bl	80084f8 <lsm6dso_xl_data_rate_set>
 80080e0:	2800      	cmp	r0, #0
 80080e2:	d0d7      	beq.n	8008094 <LSM6DSO_ACC_Enable_6D_Orientation+0x18>
      ret = LSM6DSO_ERROR;
 80080e4:	f04f 30ff 	mov.w	r0, #4294967295
}
 80080e8:	b003      	add	sp, #12
 80080ea:	bd30      	pop	{r4, r5, pc}
      if (lsm6dso_pin_int1_route_get(&(pObj->Ctx), &val1) != LSM6DSO_OK)
 80080ec:	4669      	mov	r1, sp
 80080ee:	4620      	mov	r0, r4
 80080f0:	f000 fd24 	bl	8008b3c <lsm6dso_pin_int1_route_get>
 80080f4:	2800      	cmp	r0, #0
 80080f6:	d1f5      	bne.n	80080e4 <LSM6DSO_ACC_Enable_6D_Orientation+0x68>
      val1.md1_cfg.int1_6d = PROPERTY_ENABLE;
 80080f8:	f89d 3001 	ldrb.w	r3, [sp, #1]
      if (lsm6dso_pin_int1_route_set(&(pObj->Ctx), &val1) != LSM6DSO_OK)
 80080fc:	4669      	mov	r1, sp
      val1.md1_cfg.int1_6d = PROPERTY_ENABLE;
 80080fe:	f043 0304 	orr.w	r3, r3, #4
      if (lsm6dso_pin_int1_route_set(&(pObj->Ctx), &val1) != LSM6DSO_OK)
 8008102:	4620      	mov	r0, r4
      val1.md1_cfg.int1_6d = PROPERTY_ENABLE;
 8008104:	f88d 3001 	strb.w	r3, [sp, #1]
      if (lsm6dso_pin_int1_route_set(&(pObj->Ctx), &val1) != LSM6DSO_OK)
 8008108:	f000 fed0 	bl	8008eac <lsm6dso_pin_int1_route_set>
 800810c:	3000      	adds	r0, #0
 800810e:	bf18      	it	ne
 8008110:	2001      	movne	r0, #1
 8008112:	4240      	negs	r0, r0
}
 8008114:	b003      	add	sp, #12
 8008116:	bd30      	pop	{r4, r5, pc}

08008118 <LSM6DSO_ACC_Disable_6D_Orientation>:
{
 8008118:	b510      	push	{r4, lr}
  if (lsm6dso_pin_int1_route_get(&(pObj->Ctx), &val1) != LSM6DSO_OK)
 800811a:	f100 041c 	add.w	r4, r0, #28
{
 800811e:	b084      	sub	sp, #16
  if (lsm6dso_pin_int1_route_get(&(pObj->Ctx), &val1) != LSM6DSO_OK)
 8008120:	4620      	mov	r0, r4
 8008122:	4669      	mov	r1, sp
 8008124:	f000 fd0a 	bl	8008b3c <lsm6dso_pin_int1_route_get>
 8008128:	bb20      	cbnz	r0, 8008174 <LSM6DSO_ACC_Disable_6D_Orientation+0x5c>
  val1.md1_cfg.int1_6d = PROPERTY_DISABLE;
 800812a:	f89d 3001 	ldrb.w	r3, [sp, #1]
  if (lsm6dso_pin_int1_route_set(&(pObj->Ctx), &val1) != LSM6DSO_OK)
 800812e:	4669      	mov	r1, sp
  val1.md1_cfg.int1_6d = PROPERTY_DISABLE;
 8008130:	f360 0382 	bfi	r3, r0, #2, #1
  if (lsm6dso_pin_int1_route_set(&(pObj->Ctx), &val1) != LSM6DSO_OK)
 8008134:	4620      	mov	r0, r4
  val1.md1_cfg.int1_6d = PROPERTY_DISABLE;
 8008136:	f88d 3001 	strb.w	r3, [sp, #1]
  if (lsm6dso_pin_int1_route_set(&(pObj->Ctx), &val1) != LSM6DSO_OK)
 800813a:	f000 feb7 	bl	8008eac <lsm6dso_pin_int1_route_set>
 800813e:	b9c8      	cbnz	r0, 8008174 <LSM6DSO_ACC_Disable_6D_Orientation+0x5c>
  if (lsm6dso_pin_int2_route_get(&(pObj->Ctx), &val2) != LSM6DSO_OK)
 8008140:	a902      	add	r1, sp, #8
 8008142:	4620      	mov	r0, r4
 8008144:	f000 fe50 	bl	8008de8 <lsm6dso_pin_int2_route_get>
 8008148:	b9a0      	cbnz	r0, 8008174 <LSM6DSO_ACC_Disable_6D_Orientation+0x5c>
  val2.md2_cfg.int2_6d = PROPERTY_DISABLE;
 800814a:	f89d 3009 	ldrb.w	r3, [sp, #9]
  if (lsm6dso_pin_int2_route_set(&(pObj->Ctx), &val2) != LSM6DSO_OK)
 800814e:	a902      	add	r1, sp, #8
  val2.md2_cfg.int2_6d = PROPERTY_DISABLE;
 8008150:	f360 0382 	bfi	r3, r0, #2, #1
  if (lsm6dso_pin_int2_route_set(&(pObj->Ctx), &val2) != LSM6DSO_OK)
 8008154:	4620      	mov	r0, r4
  val2.md2_cfg.int2_6d = PROPERTY_DISABLE;
 8008156:	f88d 3009 	strb.w	r3, [sp, #9]
  if (lsm6dso_pin_int2_route_set(&(pObj->Ctx), &val2) != LSM6DSO_OK)
 800815a:	f000 fd51 	bl	8008c00 <lsm6dso_pin_int2_route_set>
 800815e:	b948      	cbnz	r0, 8008174 <LSM6DSO_ACC_Disable_6D_Orientation+0x5c>
  if (lsm6dso_6d_threshold_set(&(pObj->Ctx), LSM6DSO_DEG_80) != LSM6DSO_OK)
 8008160:	4601      	mov	r1, r0
 8008162:	4620      	mov	r0, r4
 8008164:	f001 f8b4 	bl	80092d0 <lsm6dso_6d_threshold_set>
 8008168:	3000      	adds	r0, #0
 800816a:	bf18      	it	ne
 800816c:	2001      	movne	r0, #1
 800816e:	4240      	negs	r0, r0
}
 8008170:	b004      	add	sp, #16
 8008172:	bd10      	pop	{r4, pc}
    return LSM6DSO_ERROR;
 8008174:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008178:	b004      	add	sp, #16
 800817a:	bd10      	pop	{r4, pc}

0800817c <LSM6DSO_ACC_Get_6D_Orientation_XL>:
{
 800817c:	b510      	push	{r4, lr}
 800817e:	b082      	sub	sp, #8
 8008180:	460c      	mov	r4, r1
  if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_D6D_SRC, (uint8_t *)&data, 1) != LSM6DSO_OK)
 8008182:	301c      	adds	r0, #28
 8008184:	2301      	movs	r3, #1
 8008186:	aa01      	add	r2, sp, #4
 8008188:	211d      	movs	r1, #29
 800818a:	f000 f96f 	bl	800846c <lsm6dso_read_reg>
 800818e:	b930      	cbnz	r0, 800819e <LSM6DSO_ACC_Get_6D_Orientation_XL+0x22>
  *XLow = data.xl;
 8008190:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008194:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008198:	7023      	strb	r3, [r4, #0]
}
 800819a:	b002      	add	sp, #8
 800819c:	bd10      	pop	{r4, pc}
    return LSM6DSO_ERROR;
 800819e:	f04f 30ff 	mov.w	r0, #4294967295
 80081a2:	e7fa      	b.n	800819a <LSM6DSO_ACC_Get_6D_Orientation_XL+0x1e>

080081a4 <LSM6DSO_ACC_Get_6D_Orientation_XH>:
{
 80081a4:	b510      	push	{r4, lr}
 80081a6:	b082      	sub	sp, #8
 80081a8:	460c      	mov	r4, r1
  if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_D6D_SRC, (uint8_t *)&data, 1) != LSM6DSO_OK)
 80081aa:	301c      	adds	r0, #28
 80081ac:	2301      	movs	r3, #1
 80081ae:	aa01      	add	r2, sp, #4
 80081b0:	211d      	movs	r1, #29
 80081b2:	f000 f95b 	bl	800846c <lsm6dso_read_reg>
 80081b6:	b930      	cbnz	r0, 80081c6 <LSM6DSO_ACC_Get_6D_Orientation_XH+0x22>
  *XHigh = data.xh;
 80081b8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80081bc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80081c0:	7023      	strb	r3, [r4, #0]
}
 80081c2:	b002      	add	sp, #8
 80081c4:	bd10      	pop	{r4, pc}
    return LSM6DSO_ERROR;
 80081c6:	f04f 30ff 	mov.w	r0, #4294967295
 80081ca:	e7fa      	b.n	80081c2 <LSM6DSO_ACC_Get_6D_Orientation_XH+0x1e>

080081cc <LSM6DSO_ACC_Get_6D_Orientation_YL>:
{
 80081cc:	b510      	push	{r4, lr}
 80081ce:	b082      	sub	sp, #8
 80081d0:	460c      	mov	r4, r1
  if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_D6D_SRC, (uint8_t *)&data, 1) != LSM6DSO_OK)
 80081d2:	301c      	adds	r0, #28
 80081d4:	2301      	movs	r3, #1
 80081d6:	aa01      	add	r2, sp, #4
 80081d8:	211d      	movs	r1, #29
 80081da:	f000 f947 	bl	800846c <lsm6dso_read_reg>
 80081de:	b930      	cbnz	r0, 80081ee <LSM6DSO_ACC_Get_6D_Orientation_YL+0x22>
  *YLow = data.yl;
 80081e0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80081e4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80081e8:	7023      	strb	r3, [r4, #0]
}
 80081ea:	b002      	add	sp, #8
 80081ec:	bd10      	pop	{r4, pc}
    return LSM6DSO_ERROR;
 80081ee:	f04f 30ff 	mov.w	r0, #4294967295
 80081f2:	e7fa      	b.n	80081ea <LSM6DSO_ACC_Get_6D_Orientation_YL+0x1e>

080081f4 <LSM6DSO_ACC_Get_6D_Orientation_YH>:
{
 80081f4:	b510      	push	{r4, lr}
 80081f6:	b082      	sub	sp, #8
 80081f8:	460c      	mov	r4, r1
  if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_D6D_SRC, (uint8_t *)&data, 1) != LSM6DSO_OK)
 80081fa:	301c      	adds	r0, #28
 80081fc:	2301      	movs	r3, #1
 80081fe:	aa01      	add	r2, sp, #4
 8008200:	211d      	movs	r1, #29
 8008202:	f000 f933 	bl	800846c <lsm6dso_read_reg>
 8008206:	b930      	cbnz	r0, 8008216 <LSM6DSO_ACC_Get_6D_Orientation_YH+0x22>
  *YHigh = data.yh;
 8008208:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800820c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008210:	7023      	strb	r3, [r4, #0]
}
 8008212:	b002      	add	sp, #8
 8008214:	bd10      	pop	{r4, pc}
    return LSM6DSO_ERROR;
 8008216:	f04f 30ff 	mov.w	r0, #4294967295
 800821a:	e7fa      	b.n	8008212 <LSM6DSO_ACC_Get_6D_Orientation_YH+0x1e>

0800821c <LSM6DSO_ACC_Get_6D_Orientation_ZL>:
{
 800821c:	b510      	push	{r4, lr}
 800821e:	b082      	sub	sp, #8
 8008220:	460c      	mov	r4, r1
  if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_D6D_SRC, (uint8_t *)&data, 1) != LSM6DSO_OK)
 8008222:	301c      	adds	r0, #28
 8008224:	2301      	movs	r3, #1
 8008226:	aa01      	add	r2, sp, #4
 8008228:	211d      	movs	r1, #29
 800822a:	f000 f91f 	bl	800846c <lsm6dso_read_reg>
 800822e:	b930      	cbnz	r0, 800823e <LSM6DSO_ACC_Get_6D_Orientation_ZL+0x22>
  *ZLow = data.zl;
 8008230:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008234:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8008238:	7023      	strb	r3, [r4, #0]
}
 800823a:	b002      	add	sp, #8
 800823c:	bd10      	pop	{r4, pc}
    return LSM6DSO_ERROR;
 800823e:	f04f 30ff 	mov.w	r0, #4294967295
 8008242:	e7fa      	b.n	800823a <LSM6DSO_ACC_Get_6D_Orientation_ZL+0x1e>

08008244 <LSM6DSO_ACC_Get_6D_Orientation_ZH>:
{
 8008244:	b510      	push	{r4, lr}
 8008246:	b082      	sub	sp, #8
 8008248:	460c      	mov	r4, r1
  if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_D6D_SRC, (uint8_t *)&data, 1) != LSM6DSO_OK)
 800824a:	301c      	adds	r0, #28
 800824c:	2301      	movs	r3, #1
 800824e:	aa01      	add	r2, sp, #4
 8008250:	211d      	movs	r1, #29
 8008252:	f000 f90b 	bl	800846c <lsm6dso_read_reg>
 8008256:	b930      	cbnz	r0, 8008266 <LSM6DSO_ACC_Get_6D_Orientation_ZH+0x22>
  *ZHigh = data.zh;
 8008258:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800825c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8008260:	7023      	strb	r3, [r4, #0]
}
 8008262:	b002      	add	sp, #8
 8008264:	bd10      	pop	{r4, pc}
    return LSM6DSO_ERROR;
 8008266:	f04f 30ff 	mov.w	r0, #4294967295
 800826a:	e7fa      	b.n	8008262 <LSM6DSO_ACC_Get_6D_Orientation_ZH+0x1e>

0800826c <LSM6DSO_ACC_Get_Event_Status>:
{
 800826c:	b530      	push	{r4, r5, lr}
  (void)memset((void *)Status, 0x0, sizeof(LSM6DSO_Event_Status_t));
 800826e:	2300      	movs	r3, #0
{
 8008270:	b089      	sub	sp, #36	; 0x24
  if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_WAKE_UP_SRC, (uint8_t *)&wake_up_src, 1) != LSM6DSO_OK)
 8008272:	f100 041c 	add.w	r4, r0, #28
  (void)memset((void *)Status, 0x0, sizeof(LSM6DSO_Event_Status_t));
 8008276:	600b      	str	r3, [r1, #0]
{
 8008278:	460d      	mov	r5, r1
  if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_WAKE_UP_SRC, (uint8_t *)&wake_up_src, 1) != LSM6DSO_OK)
 800827a:	4620      	mov	r0, r4
 800827c:	2301      	movs	r3, #1
 800827e:	466a      	mov	r2, sp
 8008280:	211b      	movs	r1, #27
 8008282:	f000 f8f3 	bl	800846c <lsm6dso_read_reg>
 8008286:	2800      	cmp	r0, #0
 8008288:	f040 80b1 	bne.w	80083ee <LSM6DSO_ACC_Get_Event_Status+0x182>
  if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_TAP_SRC, (uint8_t *)&tap_src, 1) != LSM6DSO_OK)
 800828c:	2301      	movs	r3, #1
 800828e:	aa01      	add	r2, sp, #4
 8008290:	211c      	movs	r1, #28
 8008292:	4620      	mov	r0, r4
 8008294:	f000 f8ea 	bl	800846c <lsm6dso_read_reg>
 8008298:	2800      	cmp	r0, #0
 800829a:	f040 80a8 	bne.w	80083ee <LSM6DSO_ACC_Get_Event_Status+0x182>
  if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_D6D_SRC, (uint8_t *)&d6d_src, 1) != LSM6DSO_OK)
 800829e:	2301      	movs	r3, #1
 80082a0:	aa02      	add	r2, sp, #8
 80082a2:	211d      	movs	r1, #29
 80082a4:	4620      	mov	r0, r4
 80082a6:	f000 f8e1 	bl	800846c <lsm6dso_read_reg>
 80082aa:	2800      	cmp	r0, #0
 80082ac:	f040 809f 	bne.w	80083ee <LSM6DSO_ACC_Get_Event_Status+0x182>
  if (lsm6dso_mem_bank_set(&(pObj->Ctx), LSM6DSO_EMBEDDED_FUNC_BANK) != LSM6DSO_OK)
 80082b0:	2102      	movs	r1, #2
 80082b2:	4620      	mov	r0, r4
 80082b4:	f000 fac6 	bl	8008844 <lsm6dso_mem_bank_set>
 80082b8:	2800      	cmp	r0, #0
 80082ba:	f040 8098 	bne.w	80083ee <LSM6DSO_ACC_Get_Event_Status+0x182>
  if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_EMB_FUNC_SRC, (uint8_t *)&func_src, 1) != LSM6DSO_OK)
 80082be:	2301      	movs	r3, #1
 80082c0:	aa03      	add	r2, sp, #12
 80082c2:	2164      	movs	r1, #100	; 0x64
 80082c4:	4620      	mov	r0, r4
 80082c6:	f000 f8d1 	bl	800846c <lsm6dso_read_reg>
 80082ca:	2800      	cmp	r0, #0
 80082cc:	f040 808f 	bne.w	80083ee <LSM6DSO_ACC_Get_Event_Status+0x182>
  if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_EMB_FUNC_INT1, (uint8_t *)&int1_ctrl, 1) != LSM6DSO_OK)
 80082d0:	2301      	movs	r3, #1
 80082d2:	aa06      	add	r2, sp, #24
 80082d4:	210a      	movs	r1, #10
 80082d6:	4620      	mov	r0, r4
 80082d8:	f000 f8c8 	bl	800846c <lsm6dso_read_reg>
 80082dc:	2800      	cmp	r0, #0
 80082de:	f040 8086 	bne.w	80083ee <LSM6DSO_ACC_Get_Event_Status+0x182>
  if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_EMB_FUNC_INT2, (uint8_t *)&int2_ctrl, 1) != LSM6DSO_OK)
 80082e2:	2301      	movs	r3, #1
 80082e4:	aa07      	add	r2, sp, #28
 80082e6:	210e      	movs	r1, #14
 80082e8:	4620      	mov	r0, r4
 80082ea:	f000 f8bf 	bl	800846c <lsm6dso_read_reg>
 80082ee:	2800      	cmp	r0, #0
 80082f0:	d17d      	bne.n	80083ee <LSM6DSO_ACC_Get_Event_Status+0x182>
  if (lsm6dso_mem_bank_set(&(pObj->Ctx), LSM6DSO_USER_BANK) != 0)
 80082f2:	4601      	mov	r1, r0
 80082f4:	4620      	mov	r0, r4
 80082f6:	f000 faa5 	bl	8008844 <lsm6dso_mem_bank_set>
 80082fa:	2800      	cmp	r0, #0
 80082fc:	d177      	bne.n	80083ee <LSM6DSO_ACC_Get_Event_Status+0x182>
  if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_MD1_CFG, (uint8_t *)&md1_cfg, 1) != LSM6DSO_OK)
 80082fe:	2301      	movs	r3, #1
 8008300:	aa04      	add	r2, sp, #16
 8008302:	215e      	movs	r1, #94	; 0x5e
 8008304:	4620      	mov	r0, r4
 8008306:	f000 f8b1 	bl	800846c <lsm6dso_read_reg>
 800830a:	2800      	cmp	r0, #0
 800830c:	d16f      	bne.n	80083ee <LSM6DSO_ACC_Get_Event_Status+0x182>
  if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_MD2_CFG, (uint8_t *)&md2_cfg, 1) != LSM6DSO_OK)
 800830e:	2301      	movs	r3, #1
 8008310:	aa05      	add	r2, sp, #20
 8008312:	215f      	movs	r1, #95	; 0x5f
 8008314:	4620      	mov	r0, r4
 8008316:	f000 f8a9 	bl	800846c <lsm6dso_read_reg>
 800831a:	2800      	cmp	r0, #0
 800831c:	d167      	bne.n	80083ee <LSM6DSO_ACC_Get_Event_Status+0x182>
  if (lsm6dso_tilt_flag_data_ready_get(&(pObj->Ctx), &tilt_ia) != LSM6DSO_OK)
 800831e:	4620      	mov	r0, r4
 8008320:	f10d 011f 	add.w	r1, sp, #31
 8008324:	f001 f8f4 	bl	8009510 <lsm6dso_tilt_flag_data_ready_get>
 8008328:	2800      	cmp	r0, #0
 800832a:	d160      	bne.n	80083ee <LSM6DSO_ACC_Get_Event_Status+0x182>
  if ((md1_cfg.int1_ff == 1U) || (md2_cfg.int2_ff == 1U))
 800832c:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8008330:	06d9      	lsls	r1, r3, #27
 8008332:	d557      	bpl.n	80083e4 <LSM6DSO_ACC_Get_Event_Status+0x178>
    if (wake_up_src.ff_ia == 1U)
 8008334:	f89d 2000 	ldrb.w	r2, [sp]
 8008338:	0694      	lsls	r4, r2, #26
 800833a:	d503      	bpl.n	8008344 <LSM6DSO_ACC_Get_Event_Status+0xd8>
      Status->FreeFallStatus = 1;
 800833c:	782a      	ldrb	r2, [r5, #0]
 800833e:	f042 0201 	orr.w	r2, r2, #1
 8008342:	702a      	strb	r2, [r5, #0]
  if ((md1_cfg.int1_wu == 1U) || (md2_cfg.int2_wu == 1U))
 8008344:	0699      	lsls	r1, r3, #26
 8008346:	d403      	bmi.n	8008350 <LSM6DSO_ACC_Get_Event_Status+0xe4>
 8008348:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800834c:	0692      	lsls	r2, r2, #26
 800834e:	d507      	bpl.n	8008360 <LSM6DSO_ACC_Get_Event_Status+0xf4>
    if (wake_up_src.wu_ia == 1U)
 8008350:	f89d 2000 	ldrb.w	r2, [sp]
 8008354:	0714      	lsls	r4, r2, #28
 8008356:	d503      	bpl.n	8008360 <LSM6DSO_ACC_Get_Event_Status+0xf4>
      Status->WakeUpStatus = 1;
 8008358:	782a      	ldrb	r2, [r5, #0]
 800835a:	f042 0208 	orr.w	r2, r2, #8
 800835e:	702a      	strb	r2, [r5, #0]
  if ((md1_cfg.int1_single_tap == 1U) || (md2_cfg.int2_single_tap == 1U))
 8008360:	0659      	lsls	r1, r3, #25
 8008362:	d403      	bmi.n	800836c <LSM6DSO_ACC_Get_Event_Status+0x100>
 8008364:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8008368:	0652      	lsls	r2, r2, #25
 800836a:	d507      	bpl.n	800837c <LSM6DSO_ACC_Get_Event_Status+0x110>
    if (tap_src.single_tap == 1U)
 800836c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008370:	0694      	lsls	r4, r2, #26
 8008372:	d503      	bpl.n	800837c <LSM6DSO_ACC_Get_Event_Status+0x110>
      Status->TapStatus = 1;
 8008374:	782a      	ldrb	r2, [r5, #0]
 8008376:	f042 0202 	orr.w	r2, r2, #2
 800837a:	702a      	strb	r2, [r5, #0]
  if ((md1_cfg.int1_double_tap == 1U) || (md2_cfg.int2_double_tap == 1U))
 800837c:	0719      	lsls	r1, r3, #28
 800837e:	d403      	bmi.n	8008388 <LSM6DSO_ACC_Get_Event_Status+0x11c>
 8008380:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8008384:	0712      	lsls	r2, r2, #28
 8008386:	d507      	bpl.n	8008398 <LSM6DSO_ACC_Get_Event_Status+0x12c>
    if (tap_src.double_tap == 1U)
 8008388:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800838c:	06d4      	lsls	r4, r2, #27
 800838e:	d503      	bpl.n	8008398 <LSM6DSO_ACC_Get_Event_Status+0x12c>
      Status->DoubleTapStatus = 1;
 8008390:	782a      	ldrb	r2, [r5, #0]
 8008392:	f042 0204 	orr.w	r2, r2, #4
 8008396:	702a      	strb	r2, [r5, #0]
  if ((md1_cfg.int1_6d == 1U) || (md2_cfg.int2_6d == 1U))
 8008398:	0759      	lsls	r1, r3, #29
 800839a:	d403      	bmi.n	80083a4 <LSM6DSO_ACC_Get_Event_Status+0x138>
 800839c:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80083a0:	075a      	lsls	r2, r3, #29
 80083a2:	d507      	bpl.n	80083b4 <LSM6DSO_ACC_Get_Event_Status+0x148>
    if (d6d_src.d6d_ia == 1U)
 80083a4:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80083a8:	065b      	lsls	r3, r3, #25
 80083aa:	d503      	bpl.n	80083b4 <LSM6DSO_ACC_Get_Event_Status+0x148>
      Status->D6DOrientationStatus = 1;
 80083ac:	782b      	ldrb	r3, [r5, #0]
 80083ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083b2:	702b      	strb	r3, [r5, #0]
  if (int1_ctrl.int1_step_detector == 1U)
 80083b4:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80083b8:	071c      	lsls	r4, r3, #28
 80083ba:	d503      	bpl.n	80083c4 <LSM6DSO_ACC_Get_Event_Status+0x158>
    if (func_src.step_detected == 1U)
 80083bc:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80083c0:	0691      	lsls	r1, r2, #26
 80083c2:	d418      	bmi.n	80083f6 <LSM6DSO_ACC_Get_Event_Status+0x18a>
  if ((int1_ctrl.int1_tilt == 1U) || (int2_ctrl.int2_tilt == 1U))
 80083c4:	06da      	lsls	r2, r3, #27
 80083c6:	d403      	bmi.n	80083d0 <LSM6DSO_ACC_Get_Event_Status+0x164>
 80083c8:	f89d 301c 	ldrb.w	r3, [sp, #28]
 80083cc:	06db      	lsls	r3, r3, #27
 80083ce:	d507      	bpl.n	80083e0 <LSM6DSO_ACC_Get_Event_Status+0x174>
    if (tilt_ia == 1U)
 80083d0:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80083d4:	2b01      	cmp	r3, #1
 80083d6:	d103      	bne.n	80083e0 <LSM6DSO_ACC_Get_Event_Status+0x174>
      Status->TiltStatus = 1;
 80083d8:	782b      	ldrb	r3, [r5, #0]
 80083da:	f043 0320 	orr.w	r3, r3, #32
 80083de:	702b      	strb	r3, [r5, #0]
}
 80083e0:	b009      	add	sp, #36	; 0x24
 80083e2:	bd30      	pop	{r4, r5, pc}
  if ((md1_cfg.int1_ff == 1U) || (md2_cfg.int2_ff == 1U))
 80083e4:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80083e8:	06d2      	lsls	r2, r2, #27
 80083ea:	d5ab      	bpl.n	8008344 <LSM6DSO_ACC_Get_Event_Status+0xd8>
 80083ec:	e7a2      	b.n	8008334 <LSM6DSO_ACC_Get_Event_Status+0xc8>
    return LSM6DSO_ERROR;
 80083ee:	f04f 30ff 	mov.w	r0, #4294967295
}
 80083f2:	b009      	add	sp, #36	; 0x24
 80083f4:	bd30      	pop	{r4, r5, pc}
      Status->StepStatus = 1;
 80083f6:	782a      	ldrb	r2, [r5, #0]
 80083f8:	f042 0210 	orr.w	r2, r2, #16
 80083fc:	702a      	strb	r2, [r5, #0]
 80083fe:	e7e1      	b.n	80083c4 <LSM6DSO_ACC_Get_Event_Status+0x158>

08008400 <lsm6dso_mem_bank_set.constprop.0>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of reg_access in
  *                               reg FUNC_CFG_ACCESS
  *
  */
int32_t lsm6dso_mem_bank_set(lsm6dso_ctx_t *ctx, lsm6dso_reg_access_t val)
 8008400:	b530      	push	{r4, r5, lr}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008402:	2301      	movs	r3, #1
int32_t lsm6dso_mem_bank_set(lsm6dso_ctx_t *ctx, lsm6dso_reg_access_t val)
 8008404:	b083      	sub	sp, #12
 8008406:	4604      	mov	r4, r0
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008408:	aa01      	add	r2, sp, #4
 800840a:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 800840e:	4619      	mov	r1, r3
 8008410:	47a8      	blx	r5
{
  lsm6dso_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t*)&reg, 1);
  if (ret == 0) {
 8008412:	b960      	cbnz	r0, 800842e <lsm6dso_mem_bank_set.constprop.0+0x2e>
    reg.reg_access = (uint8_t)val;
 8008414:	f89d 1004 	ldrb.w	r1, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008418:	6825      	ldr	r5, [r4, #0]
 800841a:	68a0      	ldr	r0, [r4, #8]
    reg.reg_access = (uint8_t)val;
 800841c:	2302      	movs	r3, #2
 800841e:	f363 1187 	bfi	r1, r3, #6, #2
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008422:	2301      	movs	r3, #1
    reg.reg_access = (uint8_t)val;
 8008424:	f88d 1004 	strb.w	r1, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008428:	aa01      	add	r2, sp, #4
 800842a:	4619      	mov	r1, r3
 800842c:	47a8      	blx	r5
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t*)&reg, 1);
  }
  return ret;
}
 800842e:	b003      	add	sp, #12
 8008430:	bd30      	pop	{r4, r5, pc}
 8008432:	bf00      	nop

08008434 <lsm6dso_mem_bank_set.constprop.2>:
int32_t lsm6dso_mem_bank_set(lsm6dso_ctx_t *ctx, lsm6dso_reg_access_t val)
 8008434:	b530      	push	{r4, r5, lr}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008436:	2301      	movs	r3, #1
int32_t lsm6dso_mem_bank_set(lsm6dso_ctx_t *ctx, lsm6dso_reg_access_t val)
 8008438:	b083      	sub	sp, #12
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800843a:	4619      	mov	r1, r3
int32_t lsm6dso_mem_bank_set(lsm6dso_ctx_t *ctx, lsm6dso_reg_access_t val)
 800843c:	4604      	mov	r4, r0
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800843e:	aa01      	add	r2, sp, #4
 8008440:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8008444:	47a8      	blx	r5
  if (ret == 0) {
 8008446:	4603      	mov	r3, r0
 8008448:	b960      	cbnz	r0, 8008464 <lsm6dso_mem_bank_set.constprop.2+0x30>
    reg.reg_access = (uint8_t)val;
 800844a:	f89d 1004 	ldrb.w	r1, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800844e:	6825      	ldr	r5, [r4, #0]
 8008450:	68a0      	ldr	r0, [r4, #8]
    reg.reg_access = (uint8_t)val;
 8008452:	f363 1187 	bfi	r1, r3, #6, #2
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008456:	2301      	movs	r3, #1
    reg.reg_access = (uint8_t)val;
 8008458:	f88d 1004 	strb.w	r1, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800845c:	aa01      	add	r2, sp, #4
 800845e:	4619      	mov	r1, r3
 8008460:	47a8      	blx	r5
 8008462:	4603      	mov	r3, r0
}
 8008464:	4618      	mov	r0, r3
 8008466:	b003      	add	sp, #12
 8008468:	bd30      	pop	{r4, r5, pc}
 800846a:	bf00      	nop

0800846c <lsm6dso_read_reg>:
{
 800846c:	b410      	push	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800846e:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8008472:	46a4      	mov	ip, r4
}
 8008474:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008478:	4760      	bx	ip
 800847a:	bf00      	nop

0800847c <lsm6dso_write_reg>:
{
 800847c:	b410      	push	{r4}
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800847e:	6804      	ldr	r4, [r0, #0]
 8008480:	6880      	ldr	r0, [r0, #8]
 8008482:	46a4      	mov	ip, r4
}
 8008484:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008488:	4760      	bx	ip
 800848a:	bf00      	nop

0800848c <lsm6dso_xl_full_scale_set>:
{
 800848c:	b570      	push	{r4, r5, r6, lr}
 800848e:	b082      	sub	sp, #8
 8008490:	4604      	mov	r4, r0
 8008492:	460e      	mov	r6, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008494:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8008498:	aa01      	add	r2, sp, #4
 800849a:	2301      	movs	r3, #1
 800849c:	2110      	movs	r1, #16
 800849e:	47a8      	blx	r5
  if (ret == 0) {
 80084a0:	b958      	cbnz	r0, 80084ba <lsm6dso_xl_full_scale_set+0x2e>
    reg.fs_xl = (uint8_t) val;
 80084a2:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80084a6:	6825      	ldr	r5, [r4, #0]
 80084a8:	68a0      	ldr	r0, [r4, #8]
    reg.fs_xl = (uint8_t) val;
 80084aa:	f366 0383 	bfi	r3, r6, #2, #2
 80084ae:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80084b2:	aa01      	add	r2, sp, #4
 80084b4:	2301      	movs	r3, #1
 80084b6:	2110      	movs	r1, #16
 80084b8:	47a8      	blx	r5
}
 80084ba:	b002      	add	sp, #8
 80084bc:	bd70      	pop	{r4, r5, r6, pc}
 80084be:	bf00      	nop

080084c0 <lsm6dso_xl_full_scale_get>:
{
 80084c0:	b530      	push	{r4, r5, lr}
 80084c2:	b083      	sub	sp, #12
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80084c4:	2301      	movs	r3, #1
 80084c6:	aa01      	add	r2, sp, #4
{
 80084c8:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80084ca:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 80084ce:	2110      	movs	r1, #16
 80084d0:	47a0      	blx	r4
  switch (reg.fs_xl) {
 80084d2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80084d6:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80084da:	b2da      	uxtb	r2, r3
 80084dc:	2a02      	cmp	r2, #2
 80084de:	d002      	beq.n	80084e6 <lsm6dso_xl_full_scale_get+0x26>
 80084e0:	d808      	bhi.n	80084f4 <lsm6dso_xl_full_scale_get+0x34>
 80084e2:	2a01      	cmp	r2, #1
 80084e4:	d102      	bne.n	80084ec <lsm6dso_xl_full_scale_get+0x2c>
      *val = LSM6DSO_8g;
 80084e6:	702b      	strb	r3, [r5, #0]
}
 80084e8:	b003      	add	sp, #12
 80084ea:	bd30      	pop	{r4, r5, pc}
      *val = LSM6DSO_2g;
 80084ec:	2300      	movs	r3, #0
 80084ee:	702b      	strb	r3, [r5, #0]
}
 80084f0:	b003      	add	sp, #12
 80084f2:	bd30      	pop	{r4, r5, pc}
      *val = LSM6DSO_8g;
 80084f4:	2303      	movs	r3, #3
 80084f6:	e7f6      	b.n	80084e6 <lsm6dso_xl_full_scale_get+0x26>

080084f8 <lsm6dso_xl_data_rate_set>:
{
 80084f8:	b570      	push	{r4, r5, r6, lr}
 80084fa:	b082      	sub	sp, #8
 80084fc:	4604      	mov	r4, r0
 80084fe:	460e      	mov	r6, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008500:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8008504:	aa01      	add	r2, sp, #4
 8008506:	2301      	movs	r3, #1
 8008508:	2110      	movs	r1, #16
 800850a:	47a8      	blx	r5
  if (ret == 0) {
 800850c:	b958      	cbnz	r0, 8008526 <lsm6dso_xl_data_rate_set+0x2e>
    reg.odr_xl = (uint8_t) val;
 800850e:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008512:	6825      	ldr	r5, [r4, #0]
 8008514:	68a0      	ldr	r0, [r4, #8]
    reg.odr_xl = (uint8_t) val;
 8008516:	f366 1307 	bfi	r3, r6, #4, #4
 800851a:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800851e:	aa01      	add	r2, sp, #4
 8008520:	2301      	movs	r3, #1
 8008522:	2110      	movs	r1, #16
 8008524:	47a8      	blx	r5
}
 8008526:	b002      	add	sp, #8
 8008528:	bd70      	pop	{r4, r5, r6, pc}
 800852a:	bf00      	nop

0800852c <lsm6dso_xl_data_rate_get>:
{
 800852c:	b530      	push	{r4, r5, lr}
 800852e:	b083      	sub	sp, #12
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008530:	2301      	movs	r3, #1
{
 8008532:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008534:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8008538:	aa01      	add	r2, sp, #4
 800853a:	2110      	movs	r1, #16
 800853c:	47a0      	blx	r4
  switch (reg.odr_xl) {
 800853e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008542:	091b      	lsrs	r3, r3, #4
 8008544:	2b0b      	cmp	r3, #11
 8008546:	d807      	bhi.n	8008558 <lsm6dso_xl_data_rate_get+0x2c>
 8008548:	e8df f003 	tbb	[pc, r3]
 800854c:	13100d06 	.word	0x13100d06
 8008550:	1f1c1916 	.word	0x1f1c1916
 8008554:	0a282522 	.word	0x0a282522
      *val = LSM6DSO_XL_ODR_OFF;
 8008558:	2300      	movs	r3, #0
 800855a:	702b      	strb	r3, [r5, #0]
}
 800855c:	b003      	add	sp, #12
 800855e:	bd30      	pop	{r4, r5, pc}
      *val = LSM6DSO_XL_ODR_6Hz5;
 8008560:	230b      	movs	r3, #11
 8008562:	702b      	strb	r3, [r5, #0]
      break;
 8008564:	e7fa      	b.n	800855c <lsm6dso_xl_data_rate_get+0x30>
      *val = LSM6DSO_XL_ODR_12Hz5;
 8008566:	2301      	movs	r3, #1
 8008568:	702b      	strb	r3, [r5, #0]
      break;
 800856a:	e7f7      	b.n	800855c <lsm6dso_xl_data_rate_get+0x30>
      *val = LSM6DSO_XL_ODR_26Hz;
 800856c:	2302      	movs	r3, #2
 800856e:	702b      	strb	r3, [r5, #0]
      break;
 8008570:	e7f4      	b.n	800855c <lsm6dso_xl_data_rate_get+0x30>
      *val = LSM6DSO_XL_ODR_52Hz;
 8008572:	2303      	movs	r3, #3
 8008574:	702b      	strb	r3, [r5, #0]
      break;
 8008576:	e7f1      	b.n	800855c <lsm6dso_xl_data_rate_get+0x30>
      *val = LSM6DSO_XL_ODR_104Hz;
 8008578:	2304      	movs	r3, #4
 800857a:	702b      	strb	r3, [r5, #0]
      break;
 800857c:	e7ee      	b.n	800855c <lsm6dso_xl_data_rate_get+0x30>
      *val = LSM6DSO_XL_ODR_208Hz;
 800857e:	2305      	movs	r3, #5
 8008580:	702b      	strb	r3, [r5, #0]
      break;
 8008582:	e7eb      	b.n	800855c <lsm6dso_xl_data_rate_get+0x30>
      *val = LSM6DSO_XL_ODR_417Hz;
 8008584:	2306      	movs	r3, #6
 8008586:	702b      	strb	r3, [r5, #0]
      break;
 8008588:	e7e8      	b.n	800855c <lsm6dso_xl_data_rate_get+0x30>
      *val = LSM6DSO_XL_ODR_833Hz;
 800858a:	2307      	movs	r3, #7
 800858c:	702b      	strb	r3, [r5, #0]
      break;
 800858e:	e7e5      	b.n	800855c <lsm6dso_xl_data_rate_get+0x30>
      *val = LSM6DSO_XL_ODR_1667Hz;
 8008590:	2308      	movs	r3, #8
 8008592:	702b      	strb	r3, [r5, #0]
      break;
 8008594:	e7e2      	b.n	800855c <lsm6dso_xl_data_rate_get+0x30>
      *val = LSM6DSO_XL_ODR_3333Hz;
 8008596:	2309      	movs	r3, #9
 8008598:	702b      	strb	r3, [r5, #0]
      break;
 800859a:	e7df      	b.n	800855c <lsm6dso_xl_data_rate_get+0x30>
      *val = LSM6DSO_XL_ODR_6667Hz;
 800859c:	230a      	movs	r3, #10
 800859e:	702b      	strb	r3, [r5, #0]
      break;
 80085a0:	e7dc      	b.n	800855c <lsm6dso_xl_data_rate_get+0x30>
 80085a2:	bf00      	nop

080085a4 <lsm6dso_gy_full_scale_set>:
{
 80085a4:	b570      	push	{r4, r5, r6, lr}
 80085a6:	b082      	sub	sp, #8
 80085a8:	4604      	mov	r4, r0
 80085aa:	460e      	mov	r6, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80085ac:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 80085b0:	aa01      	add	r2, sp, #4
 80085b2:	2301      	movs	r3, #1
 80085b4:	2111      	movs	r1, #17
 80085b6:	47a8      	blx	r5
  if (ret == 0) {
 80085b8:	b958      	cbnz	r0, 80085d2 <lsm6dso_gy_full_scale_set+0x2e>
    reg.fs_g = (uint8_t) val;
 80085ba:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80085be:	6825      	ldr	r5, [r4, #0]
 80085c0:	68a0      	ldr	r0, [r4, #8]
    reg.fs_g = (uint8_t) val;
 80085c2:	f366 0343 	bfi	r3, r6, #1, #3
 80085c6:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80085ca:	aa01      	add	r2, sp, #4
 80085cc:	2301      	movs	r3, #1
 80085ce:	2111      	movs	r1, #17
 80085d0:	47a8      	blx	r5
}
 80085d2:	b002      	add	sp, #8
 80085d4:	bd70      	pop	{r4, r5, r6, pc}
 80085d6:	bf00      	nop

080085d8 <lsm6dso_gy_full_scale_get>:
{
 80085d8:	b530      	push	{r4, r5, lr}
 80085da:	b083      	sub	sp, #12
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80085dc:	2301      	movs	r3, #1
{
 80085de:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80085e0:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 80085e4:	aa01      	add	r2, sp, #4
 80085e6:	2111      	movs	r1, #17
 80085e8:	47a0      	blx	r4
  switch (reg.fs_g) {
 80085ea:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80085ee:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80085f2:	3b01      	subs	r3, #1
 80085f4:	2b05      	cmp	r3, #5
 80085f6:	d804      	bhi.n	8008602 <lsm6dso_gy_full_scale_get+0x2a>
 80085f8:	e8df f003 	tbb	[pc, r3]
 80085fc:	07030f0b 	.word	0x07030f0b
 8008600:	1303      	.short	0x1303
      *val = LSM6DSO_250dps;
 8008602:	2300      	movs	r3, #0
 8008604:	702b      	strb	r3, [r5, #0]
}
 8008606:	b003      	add	sp, #12
 8008608:	bd30      	pop	{r4, r5, pc}
      *val = LSM6DSO_1000dps;
 800860a:	2304      	movs	r3, #4
 800860c:	702b      	strb	r3, [r5, #0]
}
 800860e:	b003      	add	sp, #12
 8008610:	bd30      	pop	{r4, r5, pc}
      *val = LSM6DSO_125dps;
 8008612:	2301      	movs	r3, #1
 8008614:	702b      	strb	r3, [r5, #0]
}
 8008616:	b003      	add	sp, #12
 8008618:	bd30      	pop	{r4, r5, pc}
      *val = LSM6DSO_500dps;
 800861a:	2302      	movs	r3, #2
 800861c:	702b      	strb	r3, [r5, #0]
}
 800861e:	b003      	add	sp, #12
 8008620:	bd30      	pop	{r4, r5, pc}
      *val = LSM6DSO_2000dps;
 8008622:	2306      	movs	r3, #6
 8008624:	702b      	strb	r3, [r5, #0]
}
 8008626:	b003      	add	sp, #12
 8008628:	bd30      	pop	{r4, r5, pc}
 800862a:	bf00      	nop

0800862c <lsm6dso_gy_data_rate_set>:
{
 800862c:	b570      	push	{r4, r5, r6, lr}
 800862e:	b082      	sub	sp, #8
 8008630:	4604      	mov	r4, r0
 8008632:	460e      	mov	r6, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008634:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8008638:	aa01      	add	r2, sp, #4
 800863a:	2301      	movs	r3, #1
 800863c:	2111      	movs	r1, #17
 800863e:	47a8      	blx	r5
  if (ret == 0) {
 8008640:	b958      	cbnz	r0, 800865a <lsm6dso_gy_data_rate_set+0x2e>
    reg.odr_g = (uint8_t) val;
 8008642:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008646:	6825      	ldr	r5, [r4, #0]
 8008648:	68a0      	ldr	r0, [r4, #8]
    reg.odr_g = (uint8_t) val;
 800864a:	f366 1307 	bfi	r3, r6, #4, #4
 800864e:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008652:	aa01      	add	r2, sp, #4
 8008654:	2301      	movs	r3, #1
 8008656:	2111      	movs	r1, #17
 8008658:	47a8      	blx	r5
}
 800865a:	b002      	add	sp, #8
 800865c:	bd70      	pop	{r4, r5, r6, pc}
 800865e:	bf00      	nop

08008660 <lsm6dso_gy_data_rate_get>:
{
 8008660:	b530      	push	{r4, r5, lr}
 8008662:	b083      	sub	sp, #12
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008664:	2301      	movs	r3, #1
{
 8008666:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008668:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 800866c:	aa01      	add	r2, sp, #4
 800866e:	2111      	movs	r1, #17
 8008670:	47a0      	blx	r4
  switch (reg.odr_g) {
 8008672:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008676:	091b      	lsrs	r3, r3, #4
 8008678:	2b0a      	cmp	r3, #10
 800867a:	d807      	bhi.n	800868c <lsm6dso_gy_data_rate_get+0x2c>
 800867c:	e8df f003 	tbb	[pc, r3]
 8008680:	13100d06 	.word	0x13100d06
 8008684:	1f1c1916 	.word	0x1f1c1916
 8008688:	2522      	.short	0x2522
 800868a:	0a          	.byte	0x0a
 800868b:	00          	.byte	0x00
      *val = LSM6DSO_GY_ODR_OFF;
 800868c:	2300      	movs	r3, #0
 800868e:	702b      	strb	r3, [r5, #0]
}
 8008690:	b003      	add	sp, #12
 8008692:	bd30      	pop	{r4, r5, pc}
      *val = LSM6DSO_GY_ODR_6667Hz;
 8008694:	230a      	movs	r3, #10
 8008696:	702b      	strb	r3, [r5, #0]
      break;
 8008698:	e7fa      	b.n	8008690 <lsm6dso_gy_data_rate_get+0x30>
      *val = LSM6DSO_GY_ODR_12Hz5;
 800869a:	2301      	movs	r3, #1
 800869c:	702b      	strb	r3, [r5, #0]
      break;
 800869e:	e7f7      	b.n	8008690 <lsm6dso_gy_data_rate_get+0x30>
      *val = LSM6DSO_GY_ODR_26Hz;
 80086a0:	2302      	movs	r3, #2
 80086a2:	702b      	strb	r3, [r5, #0]
      break;
 80086a4:	e7f4      	b.n	8008690 <lsm6dso_gy_data_rate_get+0x30>
      *val = LSM6DSO_GY_ODR_52Hz;
 80086a6:	2303      	movs	r3, #3
 80086a8:	702b      	strb	r3, [r5, #0]
      break;
 80086aa:	e7f1      	b.n	8008690 <lsm6dso_gy_data_rate_get+0x30>
      *val = LSM6DSO_GY_ODR_104Hz;
 80086ac:	2304      	movs	r3, #4
 80086ae:	702b      	strb	r3, [r5, #0]
      break;
 80086b0:	e7ee      	b.n	8008690 <lsm6dso_gy_data_rate_get+0x30>
      *val = LSM6DSO_GY_ODR_208Hz;
 80086b2:	2305      	movs	r3, #5
 80086b4:	702b      	strb	r3, [r5, #0]
      break;
 80086b6:	e7eb      	b.n	8008690 <lsm6dso_gy_data_rate_get+0x30>
      *val = LSM6DSO_GY_ODR_417Hz;
 80086b8:	2306      	movs	r3, #6
 80086ba:	702b      	strb	r3, [r5, #0]
      break;
 80086bc:	e7e8      	b.n	8008690 <lsm6dso_gy_data_rate_get+0x30>
      *val = LSM6DSO_GY_ODR_833Hz;
 80086be:	2307      	movs	r3, #7
 80086c0:	702b      	strb	r3, [r5, #0]
      break;
 80086c2:	e7e5      	b.n	8008690 <lsm6dso_gy_data_rate_get+0x30>
      *val = LSM6DSO_GY_ODR_1667Hz;
 80086c4:	2308      	movs	r3, #8
 80086c6:	702b      	strb	r3, [r5, #0]
      break;
 80086c8:	e7e2      	b.n	8008690 <lsm6dso_gy_data_rate_get+0x30>
      *val = LSM6DSO_GY_ODR_3333Hz;
 80086ca:	2309      	movs	r3, #9
 80086cc:	702b      	strb	r3, [r5, #0]
      break;
 80086ce:	e7df      	b.n	8008690 <lsm6dso_gy_data_rate_get+0x30>

080086d0 <lsm6dso_block_data_update_set>:
{
 80086d0:	b570      	push	{r4, r5, r6, lr}
 80086d2:	b082      	sub	sp, #8
 80086d4:	4604      	mov	r4, r0
 80086d6:	460e      	mov	r6, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80086d8:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 80086dc:	aa01      	add	r2, sp, #4
 80086de:	2301      	movs	r3, #1
 80086e0:	2112      	movs	r1, #18
 80086e2:	47a8      	blx	r5
  if (ret == 0) {
 80086e4:	b958      	cbnz	r0, 80086fe <lsm6dso_block_data_update_set+0x2e>
    reg.bdu = val;
 80086e6:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80086ea:	6825      	ldr	r5, [r4, #0]
 80086ec:	68a0      	ldr	r0, [r4, #8]
    reg.bdu = val;
 80086ee:	f366 1386 	bfi	r3, r6, #6, #1
 80086f2:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80086f6:	aa01      	add	r2, sp, #4
 80086f8:	2301      	movs	r3, #1
 80086fa:	2112      	movs	r1, #18
 80086fc:	47a8      	blx	r5
}
 80086fe:	b002      	add	sp, #8
 8008700:	bd70      	pop	{r4, r5, r6, pc}
 8008702:	bf00      	nop

08008704 <lsm6dso_angular_rate_raw_get>:
{
 8008704:	b410      	push	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008706:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 800870a:	460a      	mov	r2, r1
 800870c:	46a4      	mov	ip, r4
 800870e:	2306      	movs	r3, #6
 8008710:	2122      	movs	r1, #34	; 0x22
}
 8008712:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008716:	4760      	bx	ip

08008718 <lsm6dso_acceleration_raw_get>:
{
 8008718:	b410      	push	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800871a:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 800871e:	460a      	mov	r2, r1
 8008720:	46a4      	mov	ip, r4
 8008722:	2306      	movs	r3, #6
 8008724:	2128      	movs	r1, #40	; 0x28
}
 8008726:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800872a:	4760      	bx	ip

0800872c <lsm6dso_number_of_steps_get>:
{
 800872c:	b5f0      	push	{r4, r5, r6, r7, lr}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800872e:	2301      	movs	r3, #1
{
 8008730:	b083      	sub	sp, #12
 8008732:	4604      	mov	r4, r0
 8008734:	460f      	mov	r7, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008736:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 800873a:	4619      	mov	r1, r3
 800873c:	aa01      	add	r2, sp, #4
 800873e:	47a8      	blx	r5
  if (ret == 0) {
 8008740:	4603      	mov	r3, r0
 8008742:	b9b0      	cbnz	r0, 8008772 <lsm6dso_number_of_steps_get+0x46>
    reg.reg_access = (uint8_t)val;
 8008744:	f89d 2004 	ldrb.w	r2, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008748:	6826      	ldr	r6, [r4, #0]
 800874a:	68a0      	ldr	r0, [r4, #8]
    reg.reg_access = (uint8_t)val;
 800874c:	2502      	movs	r5, #2
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800874e:	2301      	movs	r3, #1
    reg.reg_access = (uint8_t)val;
 8008750:	f365 1287 	bfi	r2, r5, #6, #2
 8008754:	f88d 2004 	strb.w	r2, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008758:	4619      	mov	r1, r3
 800875a:	aa01      	add	r2, sp, #4
 800875c:	47b0      	blx	r6
  if (ret == 0) {
 800875e:	4603      	mov	r3, r0
 8008760:	b938      	cbnz	r0, 8008772 <lsm6dso_number_of_steps_get+0x46>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008762:	462b      	mov	r3, r5
 8008764:	463a      	mov	r2, r7
 8008766:	e9d4 5001 	ldrd	r5, r0, [r4, #4]
 800876a:	2162      	movs	r1, #98	; 0x62
 800876c:	47a8      	blx	r5
  if (ret == 0) {
 800876e:	4603      	mov	r3, r0
 8008770:	b110      	cbz	r0, 8008778 <lsm6dso_number_of_steps_get+0x4c>
}
 8008772:	4618      	mov	r0, r3
 8008774:	b003      	add	sp, #12
 8008776:	bdf0      	pop	{r4, r5, r6, r7, pc}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008778:	2301      	movs	r3, #1
 800877a:	4619      	mov	r1, r3
 800877c:	e9d4 5001 	ldrd	r5, r0, [r4, #4]
 8008780:	aa01      	add	r2, sp, #4
 8008782:	47a8      	blx	r5
  if (ret == 0) {
 8008784:	4603      	mov	r3, r0
 8008786:	2800      	cmp	r0, #0
 8008788:	d1f3      	bne.n	8008772 <lsm6dso_number_of_steps_get+0x46>
    reg.reg_access = (uint8_t)val;
 800878a:	f89d 1004 	ldrb.w	r1, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800878e:	6825      	ldr	r5, [r4, #0]
 8008790:	68a0      	ldr	r0, [r4, #8]
    reg.reg_access = (uint8_t)val;
 8008792:	f363 1187 	bfi	r1, r3, #6, #2
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008796:	2301      	movs	r3, #1
    reg.reg_access = (uint8_t)val;
 8008798:	f88d 1004 	strb.w	r1, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800879c:	aa01      	add	r2, sp, #4
 800879e:	4619      	mov	r1, r3
 80087a0:	47a8      	blx	r5
 80087a2:	4603      	mov	r3, r0
}
 80087a4:	4618      	mov	r0, r3
 80087a6:	b003      	add	sp, #12
 80087a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087aa:	bf00      	nop

080087ac <lsm6dso_steps_reset>:
{
 80087ac:	b530      	push	{r4, r5, lr}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80087ae:	2301      	movs	r3, #1
{
 80087b0:	b083      	sub	sp, #12
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80087b2:	4619      	mov	r1, r3
{
 80087b4:	4604      	mov	r4, r0
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80087b6:	aa01      	add	r2, sp, #4
 80087b8:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 80087bc:	47a8      	blx	r5
  if (ret == 0) {
 80087be:	4603      	mov	r3, r0
 80087c0:	bb20      	cbnz	r0, 800880c <lsm6dso_steps_reset+0x60>
    reg.reg_access = (uint8_t)val;
 80087c2:	f89d 2004 	ldrb.w	r2, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80087c6:	6825      	ldr	r5, [r4, #0]
 80087c8:	68a0      	ldr	r0, [r4, #8]
    reg.reg_access = (uint8_t)val;
 80087ca:	2302      	movs	r3, #2
 80087cc:	f363 1287 	bfi	r2, r3, #6, #2
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80087d0:	2301      	movs	r3, #1
    reg.reg_access = (uint8_t)val;
 80087d2:	f88d 2004 	strb.w	r2, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80087d6:	4619      	mov	r1, r3
 80087d8:	aa01      	add	r2, sp, #4
 80087da:	47a8      	blx	r5
  if (ret == 0) {
 80087dc:	4603      	mov	r3, r0
 80087de:	b9a8      	cbnz	r0, 800880c <lsm6dso_steps_reset+0x60>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80087e0:	2301      	movs	r3, #1
 80087e2:	466a      	mov	r2, sp
 80087e4:	e9d4 5001 	ldrd	r5, r0, [r4, #4]
 80087e8:	2164      	movs	r1, #100	; 0x64
 80087ea:	47a8      	blx	r5
  if (ret == 0) {
 80087ec:	4603      	mov	r3, r0
 80087ee:	b968      	cbnz	r0, 800880c <lsm6dso_steps_reset+0x60>
    reg.pedo_rst_step = PROPERTY_ENABLE;
 80087f0:	f89d 3000 	ldrb.w	r3, [sp]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80087f4:	6825      	ldr	r5, [r4, #0]
 80087f6:	68a0      	ldr	r0, [r4, #8]
    reg.pedo_rst_step = PROPERTY_ENABLE;
 80087f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087fc:	f88d 3000 	strb.w	r3, [sp]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008800:	466a      	mov	r2, sp
 8008802:	2301      	movs	r3, #1
 8008804:	2164      	movs	r1, #100	; 0x64
 8008806:	47a8      	blx	r5
  if (ret == 0) {
 8008808:	4603      	mov	r3, r0
 800880a:	b110      	cbz	r0, 8008812 <lsm6dso_steps_reset+0x66>
}
 800880c:	4618      	mov	r0, r3
 800880e:	b003      	add	sp, #12
 8008810:	bd30      	pop	{r4, r5, pc}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008812:	2301      	movs	r3, #1
 8008814:	4619      	mov	r1, r3
 8008816:	e9d4 5001 	ldrd	r5, r0, [r4, #4]
 800881a:	aa01      	add	r2, sp, #4
 800881c:	47a8      	blx	r5
  if (ret == 0) {
 800881e:	4603      	mov	r3, r0
 8008820:	2800      	cmp	r0, #0
 8008822:	d1f3      	bne.n	800880c <lsm6dso_steps_reset+0x60>
    reg.reg_access = (uint8_t)val;
 8008824:	f89d 1004 	ldrb.w	r1, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008828:	6825      	ldr	r5, [r4, #0]
 800882a:	68a0      	ldr	r0, [r4, #8]
    reg.reg_access = (uint8_t)val;
 800882c:	f363 1187 	bfi	r1, r3, #6, #2
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008830:	2301      	movs	r3, #1
    reg.reg_access = (uint8_t)val;
 8008832:	f88d 1004 	strb.w	r1, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008836:	aa01      	add	r2, sp, #4
 8008838:	4619      	mov	r1, r3
 800883a:	47a8      	blx	r5
 800883c:	4603      	mov	r3, r0
}
 800883e:	4618      	mov	r0, r3
 8008840:	b003      	add	sp, #12
 8008842:	bd30      	pop	{r4, r5, pc}

08008844 <lsm6dso_mem_bank_set>:
{
 8008844:	b570      	push	{r4, r5, r6, lr}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008846:	2301      	movs	r3, #1
{
 8008848:	b082      	sub	sp, #8
 800884a:	4604      	mov	r4, r0
 800884c:	460e      	mov	r6, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800884e:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8008852:	aa01      	add	r2, sp, #4
 8008854:	4619      	mov	r1, r3
 8008856:	47a8      	blx	r5
  if (ret == 0) {
 8008858:	b958      	cbnz	r0, 8008872 <lsm6dso_mem_bank_set+0x2e>
    reg.reg_access = (uint8_t)val;
 800885a:	f89d 1004 	ldrb.w	r1, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800885e:	6825      	ldr	r5, [r4, #0]
 8008860:	68a0      	ldr	r0, [r4, #8]
    reg.reg_access = (uint8_t)val;
 8008862:	f366 1187 	bfi	r1, r6, #6, #2
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008866:	2301      	movs	r3, #1
    reg.reg_access = (uint8_t)val;
 8008868:	f88d 1004 	strb.w	r1, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800886c:	aa01      	add	r2, sp, #4
 800886e:	4619      	mov	r1, r3
 8008870:	47a8      	blx	r5
}
 8008872:	b002      	add	sp, #8
 8008874:	bd70      	pop	{r4, r5, r6, pc}
 8008876:	bf00      	nop

08008878 <lsm6dso_ln_pg_write_byte>:
  * @param  val      value to write
  *
  */
int32_t lsm6dso_ln_pg_write_byte(lsm6dso_ctx_t *ctx, uint16_t address,
                                 uint8_t *val)
{
 8008878:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800887c:	2301      	movs	r3, #1
{
 800887e:	b085      	sub	sp, #20
 8008880:	4604      	mov	r4, r0
 8008882:	460e      	mov	r6, r1
 8008884:	4690      	mov	r8, r2
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008886:	4619      	mov	r1, r3
 8008888:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 800888c:	aa03      	add	r2, sp, #12
 800888e:	47a8      	blx	r5
  if (ret == 0) {
 8008890:	4603      	mov	r3, r0
 8008892:	2800      	cmp	r0, #0
 8008894:	d16b      	bne.n	800896e <lsm6dso_ln_pg_write_byte+0xf6>
    reg.reg_access = (uint8_t)val;
 8008896:	f89d 200c 	ldrb.w	r2, [sp, #12]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800889a:	6827      	ldr	r7, [r4, #0]
 800889c:	68a0      	ldr	r0, [r4, #8]
    reg.reg_access = (uint8_t)val;
 800889e:	2502      	movs	r5, #2
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80088a0:	2301      	movs	r3, #1
    reg.reg_access = (uint8_t)val;
 80088a2:	f365 1287 	bfi	r2, r5, #6, #2
 80088a6:	f88d 200c 	strb.w	r2, [sp, #12]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80088aa:	4619      	mov	r1, r3
 80088ac:	aa03      	add	r2, sp, #12
 80088ae:	47b8      	blx	r7
  lsm6dso_page_address_t page_address;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);

  if (ret == 0) {
 80088b0:	4603      	mov	r3, r0
 80088b2:	2800      	cmp	r0, #0
 80088b4:	d15b      	bne.n	800896e <lsm6dso_ln_pg_write_byte+0xf6>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80088b6:	2301      	movs	r3, #1
 80088b8:	aa01      	add	r2, sp, #4
 80088ba:	e9d4 7001 	ldrd	r7, r0, [r4, #4]
 80088be:	2117      	movs	r1, #23
 80088c0:	47b8      	blx	r7
    ret = lsm6dso_read_reg(ctx, LSM6DSO_PAGE_RW, (uint8_t*) &page_rw, 1);
  }
  if (ret == 0) {
 80088c2:	4603      	mov	r3, r0
 80088c4:	2800      	cmp	r0, #0
 80088c6:	d152      	bne.n	800896e <lsm6dso_ln_pg_write_byte+0xf6>
    page_rw.page_rw = 0x02; /* page_write enable */
 80088c8:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80088cc:	6827      	ldr	r7, [r4, #0]
 80088ce:	68a0      	ldr	r0, [r4, #8]
    page_rw.page_rw = 0x02; /* page_write enable */
 80088d0:	f365 1346 	bfi	r3, r5, #5, #2
 80088d4:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80088d8:	aa01      	add	r2, sp, #4
 80088da:	2301      	movs	r3, #1
 80088dc:	2117      	movs	r1, #23
 80088de:	47b8      	blx	r7
    ret = lsm6dso_write_reg(ctx, LSM6DSO_PAGE_RW, (uint8_t*) &page_rw, 1);
  }
  if (ret == 0) {
 80088e0:	4603      	mov	r3, r0
 80088e2:	2800      	cmp	r0, #0
 80088e4:	d143      	bne.n	800896e <lsm6dso_ln_pg_write_byte+0xf6>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80088e6:	2301      	movs	r3, #1
 80088e8:	aa02      	add	r2, sp, #8
 80088ea:	e9d4 7001 	ldrd	r7, r0, [r4, #4]
 80088ee:	4629      	mov	r1, r5
 80088f0:	47b8      	blx	r7
    ret = lsm6dso_read_reg(ctx, LSM6DSO_PAGE_SEL, (uint8_t*) &page_sel, 1);
  }

  if (ret == 0) {
 80088f2:	4603      	mov	r3, r0
 80088f4:	2800      	cmp	r0, #0
 80088f6:	d13a      	bne.n	800896e <lsm6dso_ln_pg_write_byte+0xf6>
    page_sel.page_sel = ((uint8_t)(address >> 8) & 0x0FU);
 80088f8:	f89d 3008 	ldrb.w	r3, [sp, #8]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80088fc:	6827      	ldr	r7, [r4, #0]
 80088fe:	68a0      	ldr	r0, [r4, #8]
    page_sel.page_sel = ((uint8_t)(address >> 8) & 0x0FU);
 8008900:	0a32      	lsrs	r2, r6, #8
 8008902:	f362 1307 	bfi	r3, r2, #4, #4
    page_sel.not_used_01 = 1;
 8008906:	f04f 0901 	mov.w	r9, #1
 800890a:	f369 0303 	bfi	r3, r9, #0, #4
 800890e:	f88d 3008 	strb.w	r3, [sp, #8]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008912:	aa02      	add	r2, sp, #8
 8008914:	464b      	mov	r3, r9
 8008916:	4629      	mov	r1, r5
 8008918:	47b8      	blx	r7
    ret = lsm6dso_write_reg(ctx, LSM6DSO_PAGE_SEL, (uint8_t*) &page_sel, 1);
  }
  if (ret == 0) {
 800891a:	4603      	mov	r3, r0
 800891c:	bb38      	cbnz	r0, 800896e <lsm6dso_ln_pg_write_byte+0xf6>
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800891e:	464b      	mov	r3, r9
    page_address.page_addr = (uint8_t)address & 0xFFU;
 8008920:	f88d 600c 	strb.w	r6, [sp, #12]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008924:	aa03      	add	r2, sp, #12
 8008926:	6825      	ldr	r5, [r4, #0]
 8008928:	68a0      	ldr	r0, [r4, #8]
 800892a:	2108      	movs	r1, #8
 800892c:	47a8      	blx	r5
    ret = lsm6dso_write_reg(ctx, LSM6DSO_PAGE_ADDRESS,
                            (uint8_t*)&page_address, 1);
  }
  if (ret == 0) {
 800892e:	4603      	mov	r3, r0
 8008930:	b9e8      	cbnz	r0, 800896e <lsm6dso_ln_pg_write_byte+0xf6>
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008932:	464b      	mov	r3, r9
 8008934:	4642      	mov	r2, r8
 8008936:	6825      	ldr	r5, [r4, #0]
 8008938:	68a0      	ldr	r0, [r4, #8]
 800893a:	2109      	movs	r1, #9
 800893c:	47a8      	blx	r5
    ret = lsm6dso_write_reg(ctx, LSM6DSO_PAGE_VALUE, val, 1);
  }
  if (ret == 0) {
 800893e:	4603      	mov	r3, r0
 8008940:	b9a8      	cbnz	r0, 800896e <lsm6dso_ln_pg_write_byte+0xf6>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008942:	464b      	mov	r3, r9
 8008944:	e9d4 5001 	ldrd	r5, r0, [r4, #4]
 8008948:	aa01      	add	r2, sp, #4
 800894a:	2117      	movs	r1, #23
 800894c:	47a8      	blx	r5
    ret = lsm6dso_read_reg(ctx, LSM6DSO_PAGE_RW, (uint8_t*) &page_rw, 1);
  }
  if (ret == 0) {
 800894e:	4603      	mov	r3, r0
 8008950:	b968      	cbnz	r0, 800896e <lsm6dso_ln_pg_write_byte+0xf6>
    page_rw.page_rw = 0x00; /* page_write disable */
 8008952:	f89d 1004 	ldrb.w	r1, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008956:	6825      	ldr	r5, [r4, #0]
 8008958:	68a0      	ldr	r0, [r4, #8]
    page_rw.page_rw = 0x00; /* page_write disable */
 800895a:	f363 1146 	bfi	r1, r3, #5, #2
 800895e:	f88d 1004 	strb.w	r1, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008962:	464b      	mov	r3, r9
 8008964:	aa01      	add	r2, sp, #4
 8008966:	2117      	movs	r1, #23
 8008968:	47a8      	blx	r5
    ret = lsm6dso_write_reg(ctx, LSM6DSO_PAGE_RW, (uint8_t*) &page_rw, 1);
  }
  if (ret == 0) {
 800896a:	4603      	mov	r3, r0
 800896c:	b118      	cbz	r0, 8008976 <lsm6dso_ln_pg_write_byte+0xfe>

    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
  }
  return ret;
}
 800896e:	4618      	mov	r0, r3
 8008970:	b005      	add	sp, #20
 8008972:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8008976:	4620      	mov	r0, r4
 8008978:	f7ff fd5c 	bl	8008434 <lsm6dso_mem_bank_set.constprop.2>
 800897c:	4603      	mov	r3, r0
}
 800897e:	4618      	mov	r0, r3
 8008980:	b005      	add	sp, #20
 8008982:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008986:	bf00      	nop

08008988 <lsm6dso_ln_pg_read_byte>:
  * @param  val      read value
  *
  */
int32_t lsm6dso_ln_pg_read_byte(lsm6dso_ctx_t *ctx, uint16_t address,
                                uint8_t *val)
{
 8008988:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800898c:	2301      	movs	r3, #1
{
 800898e:	b085      	sub	sp, #20
 8008990:	4604      	mov	r4, r0
 8008992:	460e      	mov	r6, r1
 8008994:	4690      	mov	r8, r2
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008996:	4619      	mov	r1, r3
 8008998:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 800899c:	aa03      	add	r2, sp, #12
 800899e:	47a8      	blx	r5
  if (ret == 0) {
 80089a0:	4603      	mov	r3, r0
 80089a2:	2800      	cmp	r0, #0
 80089a4:	d16b      	bne.n	8008a7e <lsm6dso_ln_pg_read_byte+0xf6>
    reg.reg_access = (uint8_t)val;
 80089a6:	f89d 200c 	ldrb.w	r2, [sp, #12]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80089aa:	6827      	ldr	r7, [r4, #0]
 80089ac:	68a0      	ldr	r0, [r4, #8]
    reg.reg_access = (uint8_t)val;
 80089ae:	2502      	movs	r5, #2
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80089b0:	2301      	movs	r3, #1
    reg.reg_access = (uint8_t)val;
 80089b2:	f365 1287 	bfi	r2, r5, #6, #2
 80089b6:	f88d 200c 	strb.w	r2, [sp, #12]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80089ba:	4619      	mov	r1, r3
 80089bc:	aa03      	add	r2, sp, #12
 80089be:	47b8      	blx	r7
  lsm6dso_page_sel_t page_sel;
  lsm6dso_page_address_t  page_address;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
  if (ret == 0) {
 80089c0:	4603      	mov	r3, r0
 80089c2:	2800      	cmp	r0, #0
 80089c4:	d15b      	bne.n	8008a7e <lsm6dso_ln_pg_read_byte+0xf6>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80089c6:	2301      	movs	r3, #1
 80089c8:	aa01      	add	r2, sp, #4
 80089ca:	e9d4 7001 	ldrd	r7, r0, [r4, #4]
 80089ce:	2117      	movs	r1, #23
 80089d0:	47b8      	blx	r7

    ret = lsm6dso_read_reg(ctx, LSM6DSO_PAGE_RW, (uint8_t*) &page_rw, 1);
  }
  if (ret == 0) {
 80089d2:	4603      	mov	r3, r0
 80089d4:	2800      	cmp	r0, #0
 80089d6:	d152      	bne.n	8008a7e <lsm6dso_ln_pg_read_byte+0xf6>
    page_rw.page_rw = 0x01; /* page_read enable*/
 80089d8:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80089dc:	6827      	ldr	r7, [r4, #0]
 80089de:	68a0      	ldr	r0, [r4, #8]
    page_rw.page_rw = 0x01; /* page_read enable*/
 80089e0:	f04f 0901 	mov.w	r9, #1
 80089e4:	f369 1346 	bfi	r3, r9, #5, #2
 80089e8:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80089ec:	aa01      	add	r2, sp, #4
 80089ee:	464b      	mov	r3, r9
 80089f0:	2117      	movs	r1, #23
 80089f2:	47b8      	blx	r7
    ret = lsm6dso_write_reg(ctx, LSM6DSO_PAGE_RW, (uint8_t*) &page_rw, 1);
  }
  if (ret == 0) {
 80089f4:	4603      	mov	r3, r0
 80089f6:	2800      	cmp	r0, #0
 80089f8:	d141      	bne.n	8008a7e <lsm6dso_ln_pg_read_byte+0xf6>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80089fa:	464b      	mov	r3, r9
 80089fc:	aa02      	add	r2, sp, #8
 80089fe:	e9d4 7001 	ldrd	r7, r0, [r4, #4]
 8008a02:	4629      	mov	r1, r5
 8008a04:	47b8      	blx	r7

    ret = lsm6dso_read_reg(ctx, LSM6DSO_PAGE_SEL, (uint8_t*) &page_sel, 1);
  }
  if (ret == 0) {
 8008a06:	4603      	mov	r3, r0
 8008a08:	2800      	cmp	r0, #0
 8008a0a:	d138      	bne.n	8008a7e <lsm6dso_ln_pg_read_byte+0xf6>
    page_sel.page_sel = ((uint8_t)(address >> 8) & 0x0FU);
 8008a0c:	f89d 3008 	ldrb.w	r3, [sp, #8]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008a10:	6827      	ldr	r7, [r4, #0]
 8008a12:	68a0      	ldr	r0, [r4, #8]
    page_sel.page_sel = ((uint8_t)(address >> 8) & 0x0FU);
 8008a14:	0a32      	lsrs	r2, r6, #8
 8008a16:	f362 1307 	bfi	r3, r2, #4, #4
    page_sel.not_used_01 = 1;
 8008a1a:	f369 0303 	bfi	r3, r9, #0, #4
 8008a1e:	f88d 3008 	strb.w	r3, [sp, #8]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008a22:	aa02      	add	r2, sp, #8
 8008a24:	464b      	mov	r3, r9
 8008a26:	4629      	mov	r1, r5
 8008a28:	47b8      	blx	r7
    ret = lsm6dso_write_reg(ctx, LSM6DSO_PAGE_SEL, (uint8_t*) &page_sel, 1);
  }
  if (ret == 0) {
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	bb38      	cbnz	r0, 8008a7e <lsm6dso_ln_pg_read_byte+0xf6>
    page_address.page_addr = (uint8_t)address & 0x00FFU;
 8008a2e:	f88d 600c 	strb.w	r6, [sp, #12]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008a32:	464b      	mov	r3, r9
 8008a34:	aa03      	add	r2, sp, #12
 8008a36:	6826      	ldr	r6, [r4, #0]
 8008a38:	68a0      	ldr	r0, [r4, #8]
 8008a3a:	2108      	movs	r1, #8
 8008a3c:	47b0      	blx	r6
    ret = lsm6dso_write_reg(ctx, LSM6DSO_PAGE_ADDRESS,
                            (uint8_t*)&page_address, 1);
  }
  if (ret == 0) {
 8008a3e:	4603      	mov	r3, r0
 8008a40:	b9e8      	cbnz	r0, 8008a7e <lsm6dso_ln_pg_read_byte+0xf6>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008a42:	462b      	mov	r3, r5
 8008a44:	4642      	mov	r2, r8
 8008a46:	e9d4 5001 	ldrd	r5, r0, [r4, #4]
 8008a4a:	2109      	movs	r1, #9
 8008a4c:	47a8      	blx	r5

    ret = lsm6dso_read_reg(ctx, LSM6DSO_PAGE_VALUE, val, 2);
  }
  if (ret == 0) {
 8008a4e:	4603      	mov	r3, r0
 8008a50:	b9a8      	cbnz	r0, 8008a7e <lsm6dso_ln_pg_read_byte+0xf6>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008a52:	464b      	mov	r3, r9
 8008a54:	e9d4 5001 	ldrd	r5, r0, [r4, #4]
 8008a58:	aa01      	add	r2, sp, #4
 8008a5a:	2117      	movs	r1, #23
 8008a5c:	47a8      	blx	r5
    ret = lsm6dso_read_reg(ctx, LSM6DSO_PAGE_RW, (uint8_t*) &page_rw, 1);
  }
  if (ret == 0) {
 8008a5e:	4603      	mov	r3, r0
 8008a60:	b968      	cbnz	r0, 8008a7e <lsm6dso_ln_pg_read_byte+0xf6>
    page_rw.page_rw = 0x00; /* page_read disable */
 8008a62:	f89d 1004 	ldrb.w	r1, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008a66:	6825      	ldr	r5, [r4, #0]
 8008a68:	68a0      	ldr	r0, [r4, #8]
    page_rw.page_rw = 0x00; /* page_read disable */
 8008a6a:	f363 1146 	bfi	r1, r3, #5, #2
 8008a6e:	f88d 1004 	strb.w	r1, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008a72:	464b      	mov	r3, r9
 8008a74:	aa01      	add	r2, sp, #4
 8008a76:	2117      	movs	r1, #23
 8008a78:	47a8      	blx	r5
    ret = lsm6dso_write_reg(ctx, LSM6DSO_PAGE_RW, (uint8_t*) &page_rw, 1);
  }
  if (ret == 0) {
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	b118      	cbz	r0, 8008a86 <lsm6dso_ln_pg_read_byte+0xfe>
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
  }

  return ret;
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	b005      	add	sp, #20
 8008a82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8008a86:	4620      	mov	r0, r4
 8008a88:	f7ff fcd4 	bl	8008434 <lsm6dso_mem_bank_set.constprop.2>
 8008a8c:	4603      	mov	r3, r0
}
 8008a8e:	4618      	mov	r0, r3
 8008a90:	b005      	add	sp, #20
 8008a92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008a96:	bf00      	nop

08008a98 <lsm6dso_device_id_get>:
  * @param  ctx      read / write interface definitions
  * @param  buff     buffer that stores data read
  *
  */
int32_t lsm6dso_device_id_get(lsm6dso_ctx_t *ctx, uint8_t *buff)
{
 8008a98:	b410      	push	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008a9a:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8008a9e:	460a      	mov	r2, r1
 8008aa0:	46a4      	mov	ip, r4
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	210f      	movs	r1, #15
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
  return ret;
}
 8008aa6:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008aaa:	4760      	bx	ip

08008aac <lsm6dso_auto_increment_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of if_inc in reg CTRL3_C
  *
  */
int32_t lsm6dso_auto_increment_set(lsm6dso_ctx_t *ctx, uint8_t val)
{
 8008aac:	b570      	push	{r4, r5, r6, lr}
 8008aae:	b082      	sub	sp, #8
 8008ab0:	4604      	mov	r4, r0
 8008ab2:	460e      	mov	r6, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008ab4:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8008ab8:	aa01      	add	r2, sp, #4
 8008aba:	2301      	movs	r3, #1
 8008abc:	2112      	movs	r1, #18
 8008abe:	47a8      	blx	r5
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t*)&reg, 1);
  if (ret == 0) {
 8008ac0:	b958      	cbnz	r0, 8008ada <lsm6dso_auto_increment_set+0x2e>
    reg.if_inc = val;
 8008ac2:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008ac6:	6825      	ldr	r5, [r4, #0]
 8008ac8:	68a0      	ldr	r0, [r4, #8]
    reg.if_inc = val;
 8008aca:	f366 0382 	bfi	r3, r6, #2, #1
 8008ace:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008ad2:	aa01      	add	r2, sp, #4
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	2112      	movs	r1, #18
 8008ad8:	47a8      	blx	r5
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t*)&reg, 1);
  }
  return ret;
}
 8008ada:	b002      	add	sp, #8
 8008adc:	bd70      	pop	{r4, r5, r6, pc}
 8008ade:	bf00      	nop

08008ae0 <lsm6dso_i3c_disable_set>:
  * @param  val      change the values of i3c_disable
  *                                    in reg CTRL9_XL
  *
  */
int32_t lsm6dso_i3c_disable_set(lsm6dso_ctx_t *ctx, lsm6dso_i3c_disable_t val)
{
 8008ae0:	b570      	push	{r4, r5, r6, lr}
 8008ae2:	b082      	sub	sp, #8
 8008ae4:	4604      	mov	r4, r0
 8008ae6:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008ae8:	e9d0 6001 	ldrd	r6, r0, [r0, #4]
 8008aec:	aa01      	add	r2, sp, #4
 8008aee:	2301      	movs	r3, #1
 8008af0:	2118      	movs	r1, #24
 8008af2:	47b0      	blx	r6
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t*)&ctrl9_xl, 1);
  if (ret == 0) {
 8008af4:	bb00      	cbnz	r0, 8008b38 <lsm6dso_i3c_disable_set+0x58>
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 8008af6:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008afa:	6826      	ldr	r6, [r4, #0]
 8008afc:	68a0      	ldr	r0, [r4, #8]
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 8008afe:	09ea      	lsrs	r2, r5, #7
 8008b00:	f362 0341 	bfi	r3, r2, #1, #1
 8008b04:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008b08:	aa01      	add	r2, sp, #4
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	2118      	movs	r1, #24
 8008b0e:	47b0      	blx	r6
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t*)&ctrl9_xl, 1);
  }
  if (ret == 0) {
 8008b10:	b990      	cbnz	r0, 8008b38 <lsm6dso_i3c_disable_set+0x58>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008b12:	466a      	mov	r2, sp
 8008b14:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
 8008b18:	2301      	movs	r3, #1
 8008b1a:	2162      	movs	r1, #98	; 0x62
 8008b1c:	47b0      	blx	r6

    ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB,
                           (uint8_t*)&i3c_bus_avb, 1);
  }
  if (ret == 0) {
 8008b1e:	b958      	cbnz	r0, 8008b38 <lsm6dso_i3c_disable_set+0x58>
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8008b20:	f89d 3000 	ldrb.w	r3, [sp]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008b24:	6826      	ldr	r6, [r4, #0]
 8008b26:	68a0      	ldr	r0, [r4, #8]
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8008b28:	f365 03c4 	bfi	r3, r5, #3, #2
 8008b2c:	f88d 3000 	strb.w	r3, [sp]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008b30:	466a      	mov	r2, sp
 8008b32:	2301      	movs	r3, #1
 8008b34:	2162      	movs	r1, #98	; 0x62
 8008b36:	47b0      	blx	r6
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
                            (uint8_t*)&i3c_bus_avb, 1);
  }

  return ret;
}
 8008b38:	b002      	add	sp, #8
 8008b3a:	bd70      	pop	{r4, r5, r6, pc}

08008b3c <lsm6dso_pin_int1_route_get>:
  *                  EMB_FUNC_INT1, FSM_INT1_A, FSM_INT1_B
  *
  */
int32_t lsm6dso_pin_int1_route_get(lsm6dso_ctx_t *ctx,
                                   lsm6dso_pin_int1_route_t *val)
{
 8008b3c:	b570      	push	{r4, r5, r6, lr}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008b3e:	2301      	movs	r3, #1
{
 8008b40:	b082      	sub	sp, #8
 8008b42:	4604      	mov	r4, r0
 8008b44:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008b46:	e9d0 6001 	ldrd	r6, r0, [r0, #4]
 8008b4a:	4619      	mov	r1, r3
 8008b4c:	aa01      	add	r2, sp, #4
 8008b4e:	47b0      	blx	r6
  if (ret == 0) {
 8008b50:	4603      	mov	r3, r0
 8008b52:	bb30      	cbnz	r0, 8008ba2 <lsm6dso_pin_int1_route_get+0x66>
    reg.reg_access = (uint8_t)val;
 8008b54:	f89d 2004 	ldrb.w	r2, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008b58:	6826      	ldr	r6, [r4, #0]
 8008b5a:	68a0      	ldr	r0, [r4, #8]
    reg.reg_access = (uint8_t)val;
 8008b5c:	2302      	movs	r3, #2
 8008b5e:	f363 1287 	bfi	r2, r3, #6, #2
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008b62:	2301      	movs	r3, #1
    reg.reg_access = (uint8_t)val;
 8008b64:	f88d 2004 	strb.w	r2, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008b68:	4619      	mov	r1, r3
 8008b6a:	aa01      	add	r2, sp, #4
 8008b6c:	47b0      	blx	r6
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
  if (ret == 0) {
 8008b6e:	4603      	mov	r3, r0
 8008b70:	b9b8      	cbnz	r0, 8008ba2 <lsm6dso_pin_int1_route_get+0x66>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008b72:	2301      	movs	r3, #1
 8008b74:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
 8008b78:	1caa      	adds	r2, r5, #2
 8008b7a:	210a      	movs	r1, #10
 8008b7c:	47b0      	blx	r6
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_INT1,
                           (uint8_t*)&val->emb_func_int1, 1);
  }
  if (ret == 0) {
 8008b7e:	4603      	mov	r3, r0
 8008b80:	b978      	cbnz	r0, 8008ba2 <lsm6dso_pin_int1_route_get+0x66>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008b82:	2301      	movs	r3, #1
 8008b84:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
 8008b88:	1cea      	adds	r2, r5, #3
 8008b8a:	210b      	movs	r1, #11
 8008b8c:	47b0      	blx	r6
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_INT1_A,
                           (uint8_t*)&val->fsm_int1_a, 1);
  }
  if (ret == 0) {
 8008b8e:	4603      	mov	r3, r0
 8008b90:	b938      	cbnz	r0, 8008ba2 <lsm6dso_pin_int1_route_get+0x66>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008b92:	2301      	movs	r3, #1
 8008b94:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
 8008b98:	1d2a      	adds	r2, r5, #4
 8008b9a:	210c      	movs	r1, #12
 8008b9c:	47b0      	blx	r6
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_INT1_B,
                           (uint8_t*)&val->fsm_int1_b, 1);
  }
  if (ret == 0) {
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	b110      	cbz	r0, 8008ba8 <lsm6dso_pin_int1_route_get+0x6c>
  if (ret == 0) {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_MD1_CFG, (uint8_t*)&val->md1_cfg, 1);
  }

  return ret;
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	b002      	add	sp, #8
 8008ba6:	bd70      	pop	{r4, r5, r6, pc}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008ba8:	2301      	movs	r3, #1
 8008baa:	4619      	mov	r1, r3
 8008bac:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
 8008bb0:	aa01      	add	r2, sp, #4
 8008bb2:	47b0      	blx	r6
  if (ret == 0) {
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	2800      	cmp	r0, #0
 8008bb8:	d1f3      	bne.n	8008ba2 <lsm6dso_pin_int1_route_get+0x66>
    reg.reg_access = (uint8_t)val;
 8008bba:	f89d 1004 	ldrb.w	r1, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008bbe:	6826      	ldr	r6, [r4, #0]
 8008bc0:	68a0      	ldr	r0, [r4, #8]
    reg.reg_access = (uint8_t)val;
 8008bc2:	f363 1187 	bfi	r1, r3, #6, #2
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008bc6:	2301      	movs	r3, #1
    reg.reg_access = (uint8_t)val;
 8008bc8:	f88d 1004 	strb.w	r1, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008bcc:	aa01      	add	r2, sp, #4
 8008bce:	4619      	mov	r1, r3
 8008bd0:	47b0      	blx	r6
  if (ret == 0) {
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	2800      	cmp	r0, #0
 8008bd6:	d1e4      	bne.n	8008ba2 <lsm6dso_pin_int1_route_get+0x66>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008bd8:	2301      	movs	r3, #1
 8008bda:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
 8008bde:	462a      	mov	r2, r5
 8008be0:	210d      	movs	r1, #13
 8008be2:	47b0      	blx	r6
  if (ret == 0) {
 8008be4:	4603      	mov	r3, r0
 8008be6:	2800      	cmp	r0, #0
 8008be8:	d1db      	bne.n	8008ba2 <lsm6dso_pin_int1_route_get+0x66>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008bea:	1c6a      	adds	r2, r5, #1
 8008bec:	2301      	movs	r3, #1
 8008bee:	e9d4 5001 	ldrd	r5, r0, [r4, #4]
 8008bf2:	215e      	movs	r1, #94	; 0x5e
 8008bf4:	47a8      	blx	r5
 8008bf6:	4603      	mov	r3, r0
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	b002      	add	sp, #8
 8008bfc:	bd70      	pop	{r4, r5, r6, pc}
 8008bfe:	bf00      	nop

08008c00 <lsm6dso_pin_int2_route_set>:
  *                  EMB_FUNC_INT2, FSM_INT2_A, FSM_INT2_B
  *
  */
int32_t lsm6dso_pin_int2_route_set(lsm6dso_ctx_t *ctx,
                                   lsm6dso_pin_int2_route_t *val)
{
 8008c00:	b5f0      	push	{r4, r5, r6, r7, lr}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008c02:	2301      	movs	r3, #1
{
 8008c04:	b085      	sub	sp, #20
 8008c06:	4604      	mov	r4, r0
 8008c08:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008c0a:	e9d0 6001 	ldrd	r6, r0, [r0, #4]
 8008c0e:	aa02      	add	r2, sp, #8
 8008c10:	4619      	mov	r1, r3
 8008c12:	47b0      	blx	r6
  if (ret == 0) {
 8008c14:	bb10      	cbnz	r0, 8008c5c <lsm6dso_pin_int2_route_set+0x5c>
    reg.reg_access = (uint8_t)val;
 8008c16:	f89d 2008 	ldrb.w	r2, [sp, #8]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008c1a:	6826      	ldr	r6, [r4, #0]
 8008c1c:	68a0      	ldr	r0, [r4, #8]
    reg.reg_access = (uint8_t)val;
 8008c1e:	2302      	movs	r3, #2
 8008c20:	f363 1287 	bfi	r2, r3, #6, #2
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008c24:	2301      	movs	r3, #1
    reg.reg_access = (uint8_t)val;
 8008c26:	f88d 2008 	strb.w	r2, [sp, #8]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008c2a:	4619      	mov	r1, r3
 8008c2c:	aa02      	add	r2, sp, #8
 8008c2e:	47b0      	blx	r6
  lsm6dso_pin_int1_route_t pin_int1_route;
  lsm6dso_tap_cfg2_t tap_cfg2;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
  if (ret == 0) {
 8008c30:	b9a0      	cbnz	r0, 8008c5c <lsm6dso_pin_int2_route_set+0x5c>
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008c32:	6826      	ldr	r6, [r4, #0]
 8008c34:	68a0      	ldr	r0, [r4, #8]
 8008c36:	2301      	movs	r3, #1
 8008c38:	1caa      	adds	r2, r5, #2
 8008c3a:	210e      	movs	r1, #14
 8008c3c:	47b0      	blx	r6
    ret = lsm6dso_write_reg(ctx, LSM6DSO_EMB_FUNC_INT2,
                            (uint8_t*)&val->emb_func_int2, 1);
  }
  if (ret == 0) {
 8008c3e:	b968      	cbnz	r0, 8008c5c <lsm6dso_pin_int2_route_set+0x5c>
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008c40:	6826      	ldr	r6, [r4, #0]
 8008c42:	68a0      	ldr	r0, [r4, #8]
 8008c44:	2301      	movs	r3, #1
 8008c46:	1cea      	adds	r2, r5, #3
 8008c48:	210f      	movs	r1, #15
 8008c4a:	47b0      	blx	r6
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FSM_INT2_A,
                            (uint8_t*)&val->fsm_int2_a, 1);
  }
  if (ret == 0) {
 8008c4c:	b930      	cbnz	r0, 8008c5c <lsm6dso_pin_int2_route_set+0x5c>
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008c4e:	6826      	ldr	r6, [r4, #0]
 8008c50:	68a0      	ldr	r0, [r4, #8]
 8008c52:	2301      	movs	r3, #1
 8008c54:	1d2a      	adds	r2, r5, #4
 8008c56:	2110      	movs	r1, #16
 8008c58:	47b0      	blx	r6
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FSM_INT2_B,
                            (uint8_t*)&val->fsm_int2_b, 1);
  }
  if (ret == 0) {
 8008c5a:	b108      	cbz	r0, 8008c60 <lsm6dso_pin_int2_route_set+0x60>
      tap_cfg2.interrupts_enable = PROPERTY_DISABLE;
    }
    ret = lsm6dso_write_reg(ctx, LSM6DSO_TAP_CFG2, (uint8_t*) &tap_cfg2, 1);
  }
  return ret;
}
 8008c5c:	b005      	add	sp, #20
 8008c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8008c60:	4620      	mov	r0, r4
 8008c62:	f7ff fbe7 	bl	8008434 <lsm6dso_mem_bank_set.constprop.2>
  if (ret == 0) {
 8008c66:	2800      	cmp	r0, #0
 8008c68:	d1f8      	bne.n	8008c5c <lsm6dso_pin_int2_route_set+0x5c>
    if (( val->emb_func_int2.int2_fsm_lc
 8008c6a:	78ae      	ldrb	r6, [r5, #2]
        | val->fsm_int2_a.int2_fsm1
 8008c6c:	78e8      	ldrb	r0, [r5, #3]
        | val->fsm_int2_b.int2_fsm9
 8008c6e:	7929      	ldrb	r1, [r5, #4]
 8008c70:	786a      	ldrb	r2, [r5, #1]
        | val->emb_func_int2.int2_sig_mot
 8008c72:	f3c6 1340 	ubfx	r3, r6, #5, #1
 8008c76:	ea43 13d6 	orr.w	r3, r3, r6, lsr #7
        | val->emb_func_int2.int2_step_detector
 8008c7a:	f3c6 07c0 	ubfx	r7, r6, #3, #1
 8008c7e:	433b      	orrs	r3, r7
        | val->emb_func_int2.int2_tilt
 8008c80:	f3c6 1600 	ubfx	r6, r6, #4, #1
 8008c84:	4333      	orrs	r3, r6
        | val->fsm_int2_a.int2_fsm1
 8008c86:	f3c0 0600 	ubfx	r6, r0, #0, #1
 8008c8a:	4333      	orrs	r3, r6
        | val->fsm_int2_a.int2_fsm2
 8008c8c:	f3c0 0640 	ubfx	r6, r0, #1, #1
 8008c90:	4333      	orrs	r3, r6
        | val->fsm_int2_a.int2_fsm3
 8008c92:	f3c0 0680 	ubfx	r6, r0, #2, #1
 8008c96:	4333      	orrs	r3, r6
        | val->fsm_int2_a.int2_fsm4
 8008c98:	f3c0 06c0 	ubfx	r6, r0, #3, #1
 8008c9c:	4333      	orrs	r3, r6
        | val->fsm_int2_a.int2_fsm5
 8008c9e:	f3c0 1600 	ubfx	r6, r0, #4, #1
 8008ca2:	4333      	orrs	r3, r6
        | val->fsm_int2_a.int2_fsm6
 8008ca4:	f3c0 1640 	ubfx	r6, r0, #5, #1
 8008ca8:	4333      	orrs	r3, r6
        | val->fsm_int2_a.int2_fsm7
 8008caa:	f3c0 1680 	ubfx	r6, r0, #6, #1
 8008cae:	4333      	orrs	r3, r6
        | val->fsm_int2_a.int2_fsm8
 8008cb0:	ea43 13d0 	orr.w	r3, r3, r0, lsr #7
        | val->fsm_int2_b.int2_fsm9
 8008cb4:	f3c1 0000 	ubfx	r0, r1, #0, #1
 8008cb8:	4303      	orrs	r3, r0
        | val->fsm_int2_b.int2_fsm10
 8008cba:	f3c1 0040 	ubfx	r0, r1, #1, #1
 8008cbe:	4303      	orrs	r3, r0
        | val->fsm_int2_b.int2_fsm11
 8008cc0:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8008cc4:	4303      	orrs	r3, r0
        | val->fsm_int2_b.int2_fsm12
 8008cc6:	f3c1 00c0 	ubfx	r0, r1, #3, #1
 8008cca:	4303      	orrs	r3, r0
        | val->fsm_int2_b.int2_fsm13
 8008ccc:	f3c1 1000 	ubfx	r0, r1, #4, #1
 8008cd0:	4303      	orrs	r3, r0
        | val->fsm_int2_b.int2_fsm14
 8008cd2:	f3c1 1040 	ubfx	r0, r1, #5, #1
 8008cd6:	4303      	orrs	r3, r0
        | val->fsm_int2_b.int2_fsm15
 8008cd8:	f3c1 1080 	ubfx	r0, r1, #6, #1
 8008cdc:	4303      	orrs	r3, r0
        | val->fsm_int2_b.int2_fsm16 )!= PROPERTY_DISABLE ){
 8008cde:	ea43 13d1 	orr.w	r3, r3, r1, lsr #7
 8008ce2:	f363 0241 	bfi	r2, r3, #1, #1
 8008ce6:	706a      	strb	r2, [r5, #1]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008ce8:	6826      	ldr	r6, [r4, #0]
 8008cea:	68a0      	ldr	r0, [r4, #8]
 8008cec:	2301      	movs	r3, #1
 8008cee:	462a      	mov	r2, r5
 8008cf0:	210e      	movs	r1, #14
 8008cf2:	47b0      	blx	r6
  if (ret == 0) {
 8008cf4:	2800      	cmp	r0, #0
 8008cf6:	d1b1      	bne.n	8008c5c <lsm6dso_pin_int2_route_set+0x5c>
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	6826      	ldr	r6, [r4, #0]
 8008cfc:	68a0      	ldr	r0, [r4, #8]
 8008cfe:	18ea      	adds	r2, r5, r3
 8008d00:	215f      	movs	r1, #95	; 0x5f
 8008d02:	47b0      	blx	r6
  if (ret == 0) {
 8008d04:	2800      	cmp	r0, #0
 8008d06:	d1a9      	bne.n	8008c5c <lsm6dso_pin_int2_route_set+0x5c>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008d08:	aa01      	add	r2, sp, #4
 8008d0a:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
 8008d0e:	2301      	movs	r3, #1
 8008d10:	2158      	movs	r1, #88	; 0x58
 8008d12:	47b0      	blx	r6
  if (ret == 0) {
 8008d14:	2800      	cmp	r0, #0
 8008d16:	d1a1      	bne.n	8008c5c <lsm6dso_pin_int2_route_set+0x5c>
    ret = lsm6dso_pin_int1_route_get(ctx, &pin_int1_route);
 8008d18:	a902      	add	r1, sp, #8
 8008d1a:	4620      	mov	r0, r4
 8008d1c:	f7ff ff0e 	bl	8008b3c <lsm6dso_pin_int1_route_get>
  if (ret == 0) {
 8008d20:	2800      	cmp	r0, #0
 8008d22:	d19b      	bne.n	8008c5c <lsm6dso_pin_int2_route_set+0x5c>
         | pin_int1_route.int1_ctrl.den_drdy_flag
 8008d24:	f89d 2008 	ldrb.w	r2, [sp, #8]
         | pin_int1_route.md1_cfg.int1_6d
 8008d28:	f89d 1009 	ldrb.w	r1, [sp, #9]
         | pin_int1_route.int1_ctrl.int1_boot
 8008d2c:	f3c2 0380 	ubfx	r3, r2, #2, #1
         | pin_int1_route.int1_ctrl.int1_cnt_bdr
 8008d30:	f3c2 1080 	ubfx	r0, r2, #6, #1
         | pin_int1_route.md1_cfg.int1_sleep_change ) != PROPERTY_DISABLE) {
 8008d34:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
 8008d38:	4303      	orrs	r3, r0
         | pin_int1_route.int1_ctrl.int1_drdy_g
 8008d3a:	f3c2 0040 	ubfx	r0, r2, #1, #1
         | pin_int1_route.md1_cfg.int1_sleep_change ) != PROPERTY_DISABLE) {
 8008d3e:	4303      	orrs	r3, r0
         | pin_int1_route.int1_ctrl.int1_drdy_xl
 8008d40:	f3c2 0000 	ubfx	r0, r2, #0, #1
         | pin_int1_route.md1_cfg.int1_sleep_change ) != PROPERTY_DISABLE) {
 8008d44:	4303      	orrs	r3, r0
         | pin_int1_route.int1_ctrl.int1_fifo_full
 8008d46:	f3c2 1040 	ubfx	r0, r2, #5, #1
         | pin_int1_route.md1_cfg.int1_sleep_change ) != PROPERTY_DISABLE) {
 8008d4a:	4303      	orrs	r3, r0
         | pin_int1_route.int1_ctrl.int1_fifo_ovr
 8008d4c:	f3c2 1000 	ubfx	r0, r2, #4, #1
         | pin_int1_route.md1_cfg.int1_sleep_change ) != PROPERTY_DISABLE) {
 8008d50:	4303      	orrs	r3, r0
         | pin_int1_route.int1_ctrl.int1_fifo_th
 8008d52:	f3c2 02c0 	ubfx	r2, r2, #3, #1
         | pin_int1_route.md1_cfg.int1_sleep_change ) != PROPERTY_DISABLE) {
 8008d56:	4313      	orrs	r3, r2
         | pin_int1_route.md1_cfg.int1_6d
 8008d58:	f3c1 0280 	ubfx	r2, r1, #2, #1
         | pin_int1_route.md1_cfg.int1_sleep_change ) != PROPERTY_DISABLE) {
 8008d5c:	4313      	orrs	r3, r2
         | pin_int1_route.md1_cfg.int1_double_tap
 8008d5e:	f3c1 02c0 	ubfx	r2, r1, #3, #1
         | pin_int1_route.md1_cfg.int1_sleep_change ) != PROPERTY_DISABLE) {
 8008d62:	4313      	orrs	r3, r2
         | pin_int1_route.md1_cfg.int1_ff
 8008d64:	f3c1 1200 	ubfx	r2, r1, #4, #1
         | pin_int1_route.md1_cfg.int1_sleep_change ) != PROPERTY_DISABLE) {
 8008d68:	4313      	orrs	r3, r2
         | pin_int1_route.md1_cfg.int1_wu
 8008d6a:	f3c1 1240 	ubfx	r2, r1, #5, #1
    if ( ( val->int2_ctrl.int2_cnt_bdr
 8008d6e:	7828      	ldrb	r0, [r5, #0]
         | pin_int1_route.md1_cfg.int1_single_tap
 8008d70:	f3c1 1680 	ubfx	r6, r1, #6, #1
         | pin_int1_route.md1_cfg.int1_sleep_change ) != PROPERTY_DISABLE) {
 8008d74:	4313      	orrs	r3, r2
 8008d76:	4333      	orrs	r3, r6
 8008d78:	ea43 13d1 	orr.w	r3, r3, r1, lsr #7
    if ( ( val->int2_ctrl.int2_cnt_bdr
 8008d7c:	f3c0 1180 	ubfx	r1, r0, #6, #1
         | pin_int1_route.md1_cfg.int1_sleep_change ) != PROPERTY_DISABLE) {
 8008d80:	430b      	orrs	r3, r1
         | val->int2_ctrl.int2_drdy_g
 8008d82:	f3c0 0140 	ubfx	r1, r0, #1, #1
         | pin_int1_route.md1_cfg.int1_sleep_change ) != PROPERTY_DISABLE) {
 8008d86:	430b      	orrs	r3, r1
         | val->int2_ctrl.int2_drdy_temp
 8008d88:	f3c0 0180 	ubfx	r1, r0, #2, #1
         | pin_int1_route.md1_cfg.int1_sleep_change ) != PROPERTY_DISABLE) {
 8008d8c:	430b      	orrs	r3, r1
         | val->int2_ctrl.int2_drdy_xl
 8008d8e:	f3c0 0100 	ubfx	r1, r0, #0, #1
         | pin_int1_route.md1_cfg.int1_sleep_change ) != PROPERTY_DISABLE) {
 8008d92:	430b      	orrs	r3, r1
         | val->int2_ctrl.int2_fifo_full
 8008d94:	f3c0 1140 	ubfx	r1, r0, #5, #1
         | val->md2_cfg.int2_6d
 8008d98:	786a      	ldrb	r2, [r5, #1]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008d9a:	6825      	ldr	r5, [r4, #0]
         | pin_int1_route.md1_cfg.int1_sleep_change ) != PROPERTY_DISABLE) {
 8008d9c:	430b      	orrs	r3, r1
         | val->int2_ctrl.int2_fifo_ovr
 8008d9e:	f3c0 1100 	ubfx	r1, r0, #4, #1
         | pin_int1_route.md1_cfg.int1_sleep_change ) != PROPERTY_DISABLE) {
 8008da2:	430b      	orrs	r3, r1
         | val->int2_ctrl.int2_fifo_th
 8008da4:	f3c0 00c0 	ubfx	r0, r0, #3, #1
         | val->md2_cfg.int2_6d
 8008da8:	f3c2 0180 	ubfx	r1, r2, #2, #1
         | pin_int1_route.md1_cfg.int1_sleep_change ) != PROPERTY_DISABLE) {
 8008dac:	4303      	orrs	r3, r0
 8008dae:	430b      	orrs	r3, r1
         | val->md2_cfg.int2_double_tap
 8008db0:	f3c2 01c0 	ubfx	r1, r2, #3, #1
         | pin_int1_route.md1_cfg.int1_sleep_change ) != PROPERTY_DISABLE) {
 8008db4:	430b      	orrs	r3, r1
         | val->md2_cfg.int2_ff
 8008db6:	f3c2 1100 	ubfx	r1, r2, #4, #1
         | pin_int1_route.md1_cfg.int1_sleep_change ) != PROPERTY_DISABLE) {
 8008dba:	430b      	orrs	r3, r1
         | val->md2_cfg.int2_wu
 8008dbc:	f3c2 1140 	ubfx	r1, r2, #5, #1
         | pin_int1_route.md1_cfg.int1_sleep_change ) != PROPERTY_DISABLE) {
 8008dc0:	430b      	orrs	r3, r1
         | val->md2_cfg.int2_single_tap
 8008dc2:	f3c2 1180 	ubfx	r1, r2, #6, #1
         | pin_int1_route.md1_cfg.int1_sleep_change ) != PROPERTY_DISABLE) {
 8008dc6:	430b      	orrs	r3, r1
 8008dc8:	f89d 1004 	ldrb.w	r1, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008dcc:	68a0      	ldr	r0, [r4, #8]
         | pin_int1_route.md1_cfg.int1_sleep_change ) != PROPERTY_DISABLE) {
 8008dce:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
 8008dd2:	f363 11c7 	bfi	r1, r3, #7, #1
 8008dd6:	f88d 1004 	strb.w	r1, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008dda:	aa01      	add	r2, sp, #4
 8008ddc:	2301      	movs	r3, #1
 8008dde:	2158      	movs	r1, #88	; 0x58
 8008de0:	47a8      	blx	r5
}
 8008de2:	b005      	add	sp, #20
 8008de4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008de6:	bf00      	nop

08008de8 <lsm6dso_pin_int2_route_get>:
  *                  EMB_FUNC_INT2, FSM_INT2_A, FSM_INT2_B
  *
  */
int32_t lsm6dso_pin_int2_route_get(lsm6dso_ctx_t *ctx,
                                   lsm6dso_pin_int2_route_t *val)
{
 8008de8:	b570      	push	{r4, r5, r6, lr}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008dea:	2301      	movs	r3, #1
{
 8008dec:	b082      	sub	sp, #8
 8008dee:	4604      	mov	r4, r0
 8008df0:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008df2:	e9d0 6001 	ldrd	r6, r0, [r0, #4]
 8008df6:	4619      	mov	r1, r3
 8008df8:	aa01      	add	r2, sp, #4
 8008dfa:	47b0      	blx	r6
  if (ret == 0) {
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	bb30      	cbnz	r0, 8008e4e <lsm6dso_pin_int2_route_get+0x66>
    reg.reg_access = (uint8_t)val;
 8008e00:	f89d 2004 	ldrb.w	r2, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008e04:	6826      	ldr	r6, [r4, #0]
 8008e06:	68a0      	ldr	r0, [r4, #8]
    reg.reg_access = (uint8_t)val;
 8008e08:	2302      	movs	r3, #2
 8008e0a:	f363 1287 	bfi	r2, r3, #6, #2
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008e0e:	2301      	movs	r3, #1
    reg.reg_access = (uint8_t)val;
 8008e10:	f88d 2004 	strb.w	r2, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008e14:	4619      	mov	r1, r3
 8008e16:	aa01      	add	r2, sp, #4
 8008e18:	47b0      	blx	r6
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
  if (ret == 0) {
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	b9b8      	cbnz	r0, 8008e4e <lsm6dso_pin_int2_route_get+0x66>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008e1e:	2301      	movs	r3, #1
 8008e20:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
 8008e24:	1caa      	adds	r2, r5, #2
 8008e26:	210e      	movs	r1, #14
 8008e28:	47b0      	blx	r6
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_INT2,
                           (uint8_t*)&val->emb_func_int2, 1);
  }
  if (ret == 0) {
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	b978      	cbnz	r0, 8008e4e <lsm6dso_pin_int2_route_get+0x66>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008e2e:	2301      	movs	r3, #1
 8008e30:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
 8008e34:	1cea      	adds	r2, r5, #3
 8008e36:	210f      	movs	r1, #15
 8008e38:	47b0      	blx	r6
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_INT2_A,
                           (uint8_t*)&val->fsm_int2_a, 1);
  }
  if (ret == 0) {
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	b938      	cbnz	r0, 8008e4e <lsm6dso_pin_int2_route_get+0x66>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008e3e:	2301      	movs	r3, #1
 8008e40:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
 8008e44:	1d2a      	adds	r2, r5, #4
 8008e46:	2110      	movs	r1, #16
 8008e48:	47b0      	blx	r6
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_INT2_B,
                           (uint8_t*)&val->fsm_int2_b, 1);
  }
  if (ret == 0) {
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	b110      	cbz	r0, 8008e54 <lsm6dso_pin_int2_route_get+0x6c>
  }
  if (ret == 0) {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_MD2_CFG, (uint8_t*)&val->md2_cfg, 1);
  }
  return ret;
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	b002      	add	sp, #8
 8008e52:	bd70      	pop	{r4, r5, r6, pc}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008e54:	2301      	movs	r3, #1
 8008e56:	4619      	mov	r1, r3
 8008e58:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
 8008e5c:	aa01      	add	r2, sp, #4
 8008e5e:	47b0      	blx	r6
  if (ret == 0) {
 8008e60:	4603      	mov	r3, r0
 8008e62:	2800      	cmp	r0, #0
 8008e64:	d1f3      	bne.n	8008e4e <lsm6dso_pin_int2_route_get+0x66>
    reg.reg_access = (uint8_t)val;
 8008e66:	f89d 1004 	ldrb.w	r1, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008e6a:	6826      	ldr	r6, [r4, #0]
 8008e6c:	68a0      	ldr	r0, [r4, #8]
    reg.reg_access = (uint8_t)val;
 8008e6e:	f363 1187 	bfi	r1, r3, #6, #2
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008e72:	2301      	movs	r3, #1
    reg.reg_access = (uint8_t)val;
 8008e74:	f88d 1004 	strb.w	r1, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008e78:	aa01      	add	r2, sp, #4
 8008e7a:	4619      	mov	r1, r3
 8008e7c:	47b0      	blx	r6
  if (ret == 0) {
 8008e7e:	4603      	mov	r3, r0
 8008e80:	2800      	cmp	r0, #0
 8008e82:	d1e4      	bne.n	8008e4e <lsm6dso_pin_int2_route_get+0x66>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008e84:	2301      	movs	r3, #1
 8008e86:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
 8008e8a:	462a      	mov	r2, r5
 8008e8c:	210e      	movs	r1, #14
 8008e8e:	47b0      	blx	r6
  if (ret == 0) {
 8008e90:	4603      	mov	r3, r0
 8008e92:	2800      	cmp	r0, #0
 8008e94:	d1db      	bne.n	8008e4e <lsm6dso_pin_int2_route_get+0x66>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008e96:	1c6a      	adds	r2, r5, #1
 8008e98:	2301      	movs	r3, #1
 8008e9a:	e9d4 5001 	ldrd	r5, r0, [r4, #4]
 8008e9e:	215f      	movs	r1, #95	; 0x5f
 8008ea0:	47a8      	blx	r5
 8008ea2:	4603      	mov	r3, r0
}
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	b002      	add	sp, #8
 8008ea8:	bd70      	pop	{r4, r5, r6, pc}
 8008eaa:	bf00      	nop

08008eac <lsm6dso_pin_int1_route_set>:
{
 8008eac:	b5f0      	push	{r4, r5, r6, r7, lr}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008eae:	2301      	movs	r3, #1
{
 8008eb0:	b085      	sub	sp, #20
 8008eb2:	4604      	mov	r4, r0
 8008eb4:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008eb6:	e9d0 6001 	ldrd	r6, r0, [r0, #4]
 8008eba:	aa02      	add	r2, sp, #8
 8008ebc:	4619      	mov	r1, r3
 8008ebe:	47b0      	blx	r6
  if (ret == 0) {
 8008ec0:	bb10      	cbnz	r0, 8008f08 <lsm6dso_pin_int1_route_set+0x5c>
    reg.reg_access = (uint8_t)val;
 8008ec2:	f89d 2008 	ldrb.w	r2, [sp, #8]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008ec6:	6826      	ldr	r6, [r4, #0]
 8008ec8:	68a0      	ldr	r0, [r4, #8]
    reg.reg_access = (uint8_t)val;
 8008eca:	2302      	movs	r3, #2
 8008ecc:	f363 1287 	bfi	r2, r3, #6, #2
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008ed0:	2301      	movs	r3, #1
    reg.reg_access = (uint8_t)val;
 8008ed2:	f88d 2008 	strb.w	r2, [sp, #8]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008ed6:	4619      	mov	r1, r3
 8008ed8:	aa02      	add	r2, sp, #8
 8008eda:	47b0      	blx	r6
  if (ret == 0) {
 8008edc:	b9a0      	cbnz	r0, 8008f08 <lsm6dso_pin_int1_route_set+0x5c>
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008ede:	6826      	ldr	r6, [r4, #0]
 8008ee0:	68a0      	ldr	r0, [r4, #8]
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	1caa      	adds	r2, r5, #2
 8008ee6:	210a      	movs	r1, #10
 8008ee8:	47b0      	blx	r6
  if (ret == 0) {
 8008eea:	b968      	cbnz	r0, 8008f08 <lsm6dso_pin_int1_route_set+0x5c>
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008eec:	6826      	ldr	r6, [r4, #0]
 8008eee:	68a0      	ldr	r0, [r4, #8]
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	1cea      	adds	r2, r5, #3
 8008ef4:	210b      	movs	r1, #11
 8008ef6:	47b0      	blx	r6
  if (ret == 0) {
 8008ef8:	b930      	cbnz	r0, 8008f08 <lsm6dso_pin_int1_route_set+0x5c>
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008efa:	6826      	ldr	r6, [r4, #0]
 8008efc:	68a0      	ldr	r0, [r4, #8]
 8008efe:	2301      	movs	r3, #1
 8008f00:	1d2a      	adds	r2, r5, #4
 8008f02:	210c      	movs	r1, #12
 8008f04:	47b0      	blx	r6
  if (ret == 0) {
 8008f06:	b108      	cbz	r0, 8008f0c <lsm6dso_pin_int1_route_set+0x60>
}
 8008f08:	b005      	add	sp, #20
 8008f0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8008f0c:	4620      	mov	r0, r4
 8008f0e:	f7ff fa91 	bl	8008434 <lsm6dso_mem_bank_set.constprop.2>
  if (ret == 0) {
 8008f12:	2800      	cmp	r0, #0
 8008f14:	d1f8      	bne.n	8008f08 <lsm6dso_pin_int1_route_set+0x5c>
    if ( ( val->emb_func_int1.int1_fsm_lc
 8008f16:	78ae      	ldrb	r6, [r5, #2]
         | val->fsm_int1_a.int1_fsm1
 8008f18:	78e8      	ldrb	r0, [r5, #3]
         | val->fsm_int1_b.int1_fsm9
 8008f1a:	7929      	ldrb	r1, [r5, #4]
 8008f1c:	786a      	ldrb	r2, [r5, #1]
         | val->emb_func_int1.int1_sig_mot
 8008f1e:	f3c6 1340 	ubfx	r3, r6, #5, #1
 8008f22:	ea43 13d6 	orr.w	r3, r3, r6, lsr #7
         | val->emb_func_int1.int1_step_detector
 8008f26:	f3c6 07c0 	ubfx	r7, r6, #3, #1
 8008f2a:	433b      	orrs	r3, r7
         | val->emb_func_int1.int1_tilt
 8008f2c:	f3c6 1600 	ubfx	r6, r6, #4, #1
 8008f30:	4333      	orrs	r3, r6
         | val->fsm_int1_a.int1_fsm1
 8008f32:	f3c0 0600 	ubfx	r6, r0, #0, #1
 8008f36:	4333      	orrs	r3, r6
         | val->fsm_int1_a.int1_fsm2
 8008f38:	f3c0 0640 	ubfx	r6, r0, #1, #1
 8008f3c:	4333      	orrs	r3, r6
         | val->fsm_int1_a.int1_fsm3
 8008f3e:	f3c0 0680 	ubfx	r6, r0, #2, #1
 8008f42:	4333      	orrs	r3, r6
         | val->fsm_int1_a.int1_fsm4
 8008f44:	f3c0 06c0 	ubfx	r6, r0, #3, #1
 8008f48:	4333      	orrs	r3, r6
         | val->fsm_int1_a.int1_fsm5
 8008f4a:	f3c0 1600 	ubfx	r6, r0, #4, #1
 8008f4e:	4333      	orrs	r3, r6
         | val->fsm_int1_a.int1_fsm6
 8008f50:	f3c0 1640 	ubfx	r6, r0, #5, #1
 8008f54:	4333      	orrs	r3, r6
         | val->fsm_int1_a.int1_fsm7
 8008f56:	f3c0 1680 	ubfx	r6, r0, #6, #1
 8008f5a:	4333      	orrs	r3, r6
         | val->fsm_int1_a.int1_fsm8
 8008f5c:	ea43 13d0 	orr.w	r3, r3, r0, lsr #7
         | val->fsm_int1_b.int1_fsm9
 8008f60:	f3c1 0000 	ubfx	r0, r1, #0, #1
 8008f64:	4303      	orrs	r3, r0
         | val->fsm_int1_b.int1_fsm10
 8008f66:	f3c1 0040 	ubfx	r0, r1, #1, #1
 8008f6a:	4303      	orrs	r3, r0
         | val->fsm_int1_b.int1_fsm11
 8008f6c:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8008f70:	4303      	orrs	r3, r0
         | val->fsm_int1_b.int1_fsm12
 8008f72:	f3c1 00c0 	ubfx	r0, r1, #3, #1
 8008f76:	4303      	orrs	r3, r0
         | val->fsm_int1_b.int1_fsm13
 8008f78:	f3c1 1000 	ubfx	r0, r1, #4, #1
 8008f7c:	4303      	orrs	r3, r0
         | val->fsm_int1_b.int1_fsm14
 8008f7e:	f3c1 1040 	ubfx	r0, r1, #5, #1
 8008f82:	4303      	orrs	r3, r0
         | val->fsm_int1_b.int1_fsm15
 8008f84:	f3c1 1080 	ubfx	r0, r1, #6, #1
 8008f88:	4303      	orrs	r3, r0
         | val->fsm_int1_b.int1_fsm16) != PROPERTY_DISABLE){
 8008f8a:	ea43 13d1 	orr.w	r3, r3, r1, lsr #7
 8008f8e:	f363 0241 	bfi	r2, r3, #1, #1
 8008f92:	706a      	strb	r2, [r5, #1]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008f94:	6826      	ldr	r6, [r4, #0]
 8008f96:	68a0      	ldr	r0, [r4, #8]
 8008f98:	2301      	movs	r3, #1
 8008f9a:	462a      	mov	r2, r5
 8008f9c:	210d      	movs	r1, #13
 8008f9e:	47b0      	blx	r6
  if (ret == 0) {
 8008fa0:	2800      	cmp	r0, #0
 8008fa2:	d1b1      	bne.n	8008f08 <lsm6dso_pin_int1_route_set+0x5c>
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008fa4:	2301      	movs	r3, #1
 8008fa6:	6826      	ldr	r6, [r4, #0]
 8008fa8:	68a0      	ldr	r0, [r4, #8]
 8008faa:	18ea      	adds	r2, r5, r3
 8008fac:	215e      	movs	r1, #94	; 0x5e
 8008fae:	47b0      	blx	r6
  if (ret == 0) {
 8008fb0:	2800      	cmp	r0, #0
 8008fb2:	d1a9      	bne.n	8008f08 <lsm6dso_pin_int1_route_set+0x5c>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008fb4:	aa01      	add	r2, sp, #4
 8008fb6:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
 8008fba:	2301      	movs	r3, #1
 8008fbc:	2158      	movs	r1, #88	; 0x58
 8008fbe:	47b0      	blx	r6
  if (ret == 0) {
 8008fc0:	2800      	cmp	r0, #0
 8008fc2:	d1a1      	bne.n	8008f08 <lsm6dso_pin_int1_route_set+0x5c>
    ret = lsm6dso_pin_int2_route_get(ctx, &pin_int2_route);
 8008fc4:	a902      	add	r1, sp, #8
 8008fc6:	4620      	mov	r0, r4
 8008fc8:	f7ff ff0e 	bl	8008de8 <lsm6dso_pin_int2_route_get>
  if (ret == 0) {
 8008fcc:	2800      	cmp	r0, #0
 8008fce:	d19b      	bne.n	8008f08 <lsm6dso_pin_int1_route_set+0x5c>
    if ( ( pin_int2_route.int2_ctrl.int2_cnt_bdr
 8008fd0:	f89d 2008 	ldrb.w	r2, [sp, #8]
         | pin_int2_route.md2_cfg.int2_6d
 8008fd4:	f89d 6009 	ldrb.w	r6, [sp, #9]
         | val->int1_ctrl.den_drdy_flag
 8008fd8:	7828      	ldrb	r0, [r5, #0]
         | pin_int2_route.int2_ctrl.int2_drdy_g
 8008fda:	f3c2 0140 	ubfx	r1, r2, #1, #1
    if ( ( pin_int2_route.int2_ctrl.int2_cnt_bdr
 8008fde:	f3c2 1380 	ubfx	r3, r2, #6, #1
         | pin_int2_route.int2_ctrl.int2_drdy_g
 8008fe2:	430b      	orrs	r3, r1
         | pin_int2_route.int2_ctrl.int2_drdy_temp
 8008fe4:	f3c2 0180 	ubfx	r1, r2, #2, #1
 8008fe8:	430b      	orrs	r3, r1
         | pin_int2_route.int2_ctrl.int2_drdy_xl
 8008fea:	f3c2 0100 	ubfx	r1, r2, #0, #1
 8008fee:	430b      	orrs	r3, r1
         | pin_int2_route.int2_ctrl.int2_fifo_full
 8008ff0:	f3c2 1140 	ubfx	r1, r2, #5, #1
 8008ff4:	430b      	orrs	r3, r1
         | pin_int2_route.int2_ctrl.int2_fifo_ovr
 8008ff6:	f3c2 1100 	ubfx	r1, r2, #4, #1
 8008ffa:	430b      	orrs	r3, r1
         | pin_int2_route.int2_ctrl.int2_fifo_th
 8008ffc:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 8009000:	4313      	orrs	r3, r2
         | pin_int2_route.md2_cfg.int2_6d
 8009002:	f3c6 0280 	ubfx	r2, r6, #2, #1
 8009006:	4313      	orrs	r3, r2
         | pin_int2_route.md2_cfg.int2_double_tap
 8009008:	f3c6 02c0 	ubfx	r2, r6, #3, #1
 800900c:	4313      	orrs	r3, r2
         | pin_int2_route.md2_cfg.int2_ff
 800900e:	f3c6 1200 	ubfx	r2, r6, #4, #1
 8009012:	4313      	orrs	r3, r2
         | pin_int2_route.md2_cfg.int2_wu
 8009014:	f3c6 1240 	ubfx	r2, r6, #5, #1
 8009018:	4313      	orrs	r3, r2
         | pin_int2_route.md2_cfg.int2_single_tap
 800901a:	f3c6 1280 	ubfx	r2, r6, #6, #1
 800901e:	4313      	orrs	r3, r2
         | pin_int2_route.md2_cfg.int2_sleep_change
 8009020:	ea43 13d6 	orr.w	r3, r3, r6, lsr #7
         | val->md1_cfg.int1_6d
 8009024:	786a      	ldrb	r2, [r5, #1]
 8009026:	f89d 1004 	ldrb.w	r1, [sp, #4]
         | val->int1_ctrl.int1_boot
 800902a:	f3c0 0580 	ubfx	r5, r0, #2, #1
         | val->int1_ctrl.den_drdy_flag
 800902e:	ea43 13d0 	orr.w	r3, r3, r0, lsr #7
         | val->int1_ctrl.int1_boot
 8009032:	432b      	orrs	r3, r5
         | val->int1_ctrl.int1_cnt_bdr
 8009034:	f3c0 1580 	ubfx	r5, r0, #6, #1
 8009038:	432b      	orrs	r3, r5
         | val->int1_ctrl.int1_drdy_g
 800903a:	f3c0 0540 	ubfx	r5, r0, #1, #1
 800903e:	432b      	orrs	r3, r5
         | val->int1_ctrl.int1_drdy_xl
 8009040:	f3c0 0500 	ubfx	r5, r0, #0, #1
 8009044:	432b      	orrs	r3, r5
         | val->int1_ctrl.int1_fifo_full
 8009046:	f3c0 1540 	ubfx	r5, r0, #5, #1
 800904a:	432b      	orrs	r3, r5
         | val->int1_ctrl.int1_fifo_ovr
 800904c:	f3c0 1500 	ubfx	r5, r0, #4, #1
 8009050:	432b      	orrs	r3, r5
         | val->int1_ctrl.int1_fifo_th
 8009052:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8009056:	4303      	orrs	r3, r0
         | val->md1_cfg.int1_6d
 8009058:	f3c2 0080 	ubfx	r0, r2, #2, #1
 800905c:	4303      	orrs	r3, r0
         | val->md1_cfg.int1_double_tap
 800905e:	f3c2 00c0 	ubfx	r0, r2, #3, #1
 8009062:	4303      	orrs	r3, r0
         | val->md1_cfg.int1_ff
 8009064:	f3c2 1000 	ubfx	r0, r2, #4, #1
 8009068:	4303      	orrs	r3, r0
         | val->md1_cfg.int1_wu
 800906a:	f3c2 1040 	ubfx	r0, r2, #5, #1
 800906e:	4303      	orrs	r3, r0
         | val->md1_cfg.int1_single_tap
 8009070:	f3c2 1080 	ubfx	r0, r2, #6, #1
 8009074:	4303      	orrs	r3, r0
         | val->md1_cfg.int1_sleep_change) != PROPERTY_DISABLE) {
 8009076:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
 800907a:	f363 11c7 	bfi	r1, r3, #7, #1
 800907e:	f88d 1004 	strb.w	r1, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8009082:	aa01      	add	r2, sp, #4
 8009084:	6825      	ldr	r5, [r4, #0]
 8009086:	68a0      	ldr	r0, [r4, #8]
 8009088:	2301      	movs	r3, #1
 800908a:	2158      	movs	r1, #88	; 0x58
 800908c:	47a8      	blx	r5
}
 800908e:	b005      	add	sp, #20
 8009090:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009092:	bf00      	nop

08009094 <lsm6dso_wkup_threshold_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of wk_ths in reg WAKE_UP_THS
  *
  */
int32_t lsm6dso_wkup_threshold_set(lsm6dso_ctx_t *ctx, uint8_t val)
{
 8009094:	b570      	push	{r4, r5, r6, lr}
 8009096:	b082      	sub	sp, #8
 8009098:	4604      	mov	r4, r0
 800909a:	460e      	mov	r6, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800909c:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 80090a0:	aa01      	add	r2, sp, #4
 80090a2:	2301      	movs	r3, #1
 80090a4:	215b      	movs	r1, #91	; 0x5b
 80090a6:	47a8      	blx	r5
  lsm6dso_wake_up_ths_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WAKE_UP_THS, (uint8_t*)&reg, 1);
  if (ret == 0) {
 80090a8:	b958      	cbnz	r0, 80090c2 <lsm6dso_wkup_threshold_set+0x2e>
    reg.wk_ths = val;
 80090aa:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80090ae:	6825      	ldr	r5, [r4, #0]
 80090b0:	68a0      	ldr	r0, [r4, #8]
    reg.wk_ths = val;
 80090b2:	f366 0305 	bfi	r3, r6, #0, #6
 80090b6:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80090ba:	aa01      	add	r2, sp, #4
 80090bc:	2301      	movs	r3, #1
 80090be:	215b      	movs	r1, #91	; 0x5b
 80090c0:	47a8      	blx	r5
    ret = lsm6dso_write_reg(ctx, LSM6DSO_WAKE_UP_THS, (uint8_t*)&reg, 1);
  }
  return ret;
}
 80090c2:	b002      	add	sp, #8
 80090c4:	bd70      	pop	{r4, r5, r6, pc}
 80090c6:	bf00      	nop

080090c8 <lsm6dso_wkup_dur_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of wake_dur in reg WAKE_UP_DUR
  *
  */
int32_t lsm6dso_wkup_dur_set(lsm6dso_ctx_t *ctx, uint8_t val)
{
 80090c8:	b570      	push	{r4, r5, r6, lr}
 80090ca:	b082      	sub	sp, #8
 80090cc:	4604      	mov	r4, r0
 80090ce:	460e      	mov	r6, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80090d0:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 80090d4:	aa01      	add	r2, sp, #4
 80090d6:	2301      	movs	r3, #1
 80090d8:	215c      	movs	r1, #92	; 0x5c
 80090da:	47a8      	blx	r5
  lsm6dso_wake_up_dur_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WAKE_UP_DUR, (uint8_t*)&reg, 1);
  if (ret == 0) {
 80090dc:	b958      	cbnz	r0, 80090f6 <lsm6dso_wkup_dur_set+0x2e>
    reg.wake_dur = val;
 80090de:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80090e2:	6825      	ldr	r5, [r4, #0]
 80090e4:	68a0      	ldr	r0, [r4, #8]
    reg.wake_dur = val;
 80090e6:	f366 1346 	bfi	r3, r6, #5, #2
 80090ea:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80090ee:	aa01      	add	r2, sp, #4
 80090f0:	2301      	movs	r3, #1
 80090f2:	215c      	movs	r1, #92	; 0x5c
 80090f4:	47a8      	blx	r5
    ret = lsm6dso_write_reg(ctx, LSM6DSO_WAKE_UP_DUR, (uint8_t*)&reg, 1);
  }
  return ret;
}
 80090f6:	b002      	add	sp, #8
 80090f8:	bd70      	pop	{r4, r5, r6, pc}
 80090fa:	bf00      	nop

080090fc <lsm6dso_act_sleep_dur_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of sleep_dur in reg WAKE_UP_DUR
  *
  */
int32_t lsm6dso_act_sleep_dur_set(lsm6dso_ctx_t *ctx, uint8_t val)
{
 80090fc:	b570      	push	{r4, r5, r6, lr}
 80090fe:	b082      	sub	sp, #8
 8009100:	4604      	mov	r4, r0
 8009102:	460e      	mov	r6, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8009104:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8009108:	aa01      	add	r2, sp, #4
 800910a:	2301      	movs	r3, #1
 800910c:	215c      	movs	r1, #92	; 0x5c
 800910e:	47a8      	blx	r5
  lsm6dso_wake_up_dur_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WAKE_UP_DUR, (uint8_t*)&reg, 1);
  if (ret == 0) {
 8009110:	b958      	cbnz	r0, 800912a <lsm6dso_act_sleep_dur_set+0x2e>
    reg.sleep_dur = val;
 8009112:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8009116:	6825      	ldr	r5, [r4, #0]
 8009118:	68a0      	ldr	r0, [r4, #8]
    reg.sleep_dur = val;
 800911a:	f366 0303 	bfi	r3, r6, #0, #4
 800911e:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8009122:	aa01      	add	r2, sp, #4
 8009124:	2301      	movs	r3, #1
 8009126:	215c      	movs	r1, #92	; 0x5c
 8009128:	47a8      	blx	r5
    ret = lsm6dso_write_reg(ctx, LSM6DSO_WAKE_UP_DUR, (uint8_t*)&reg, 1);
  }
  return ret;
}
 800912a:	b002      	add	sp, #8
 800912c:	bd70      	pop	{r4, r5, r6, pc}
 800912e:	bf00      	nop

08009130 <lsm6dso_tap_detection_on_z_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of tap_z_en in reg TAP_CFG0
  *
  */
int32_t lsm6dso_tap_detection_on_z_set(lsm6dso_ctx_t *ctx, uint8_t val)
{
 8009130:	b570      	push	{r4, r5, r6, lr}
 8009132:	b082      	sub	sp, #8
 8009134:	4604      	mov	r4, r0
 8009136:	460e      	mov	r6, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8009138:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 800913c:	aa01      	add	r2, sp, #4
 800913e:	2301      	movs	r3, #1
 8009140:	2156      	movs	r1, #86	; 0x56
 8009142:	47a8      	blx	r5
  lsm6dso_tap_cfg0_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_TAP_CFG0, (uint8_t*)&reg, 1);
  if (ret == 0) {
 8009144:	b958      	cbnz	r0, 800915e <lsm6dso_tap_detection_on_z_set+0x2e>
    reg.tap_z_en = val;
 8009146:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800914a:	6825      	ldr	r5, [r4, #0]
 800914c:	68a0      	ldr	r0, [r4, #8]
    reg.tap_z_en = val;
 800914e:	f366 0341 	bfi	r3, r6, #1, #1
 8009152:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8009156:	aa01      	add	r2, sp, #4
 8009158:	2301      	movs	r3, #1
 800915a:	2156      	movs	r1, #86	; 0x56
 800915c:	47a8      	blx	r5
    ret = lsm6dso_write_reg(ctx, LSM6DSO_TAP_CFG0, (uint8_t*)&reg, 1);
  }
  return ret;
}
 800915e:	b002      	add	sp, #8
 8009160:	bd70      	pop	{r4, r5, r6, pc}
 8009162:	bf00      	nop

08009164 <lsm6dso_tap_detection_on_y_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of tap_y_en in reg TAP_CFG0
  *
  */
int32_t lsm6dso_tap_detection_on_y_set(lsm6dso_ctx_t *ctx, uint8_t val)
{
 8009164:	b570      	push	{r4, r5, r6, lr}
 8009166:	b082      	sub	sp, #8
 8009168:	4604      	mov	r4, r0
 800916a:	460e      	mov	r6, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800916c:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8009170:	aa01      	add	r2, sp, #4
 8009172:	2301      	movs	r3, #1
 8009174:	2156      	movs	r1, #86	; 0x56
 8009176:	47a8      	blx	r5
  lsm6dso_tap_cfg0_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_TAP_CFG0, (uint8_t*)&reg, 1);
  if (ret == 0) {
 8009178:	b958      	cbnz	r0, 8009192 <lsm6dso_tap_detection_on_y_set+0x2e>
    reg.tap_y_en = val;
 800917a:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800917e:	6825      	ldr	r5, [r4, #0]
 8009180:	68a0      	ldr	r0, [r4, #8]
    reg.tap_y_en = val;
 8009182:	f366 0382 	bfi	r3, r6, #2, #1
 8009186:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800918a:	aa01      	add	r2, sp, #4
 800918c:	2301      	movs	r3, #1
 800918e:	2156      	movs	r1, #86	; 0x56
 8009190:	47a8      	blx	r5
    ret = lsm6dso_write_reg(ctx, LSM6DSO_TAP_CFG0, (uint8_t*)&reg, 1);
  }
  return ret;
}
 8009192:	b002      	add	sp, #8
 8009194:	bd70      	pop	{r4, r5, r6, pc}
 8009196:	bf00      	nop

08009198 <lsm6dso_tap_detection_on_x_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of tap_x_en in reg TAP_CFG0
  *
  */
int32_t lsm6dso_tap_detection_on_x_set(lsm6dso_ctx_t *ctx, uint8_t val)
{
 8009198:	b570      	push	{r4, r5, r6, lr}
 800919a:	b082      	sub	sp, #8
 800919c:	4604      	mov	r4, r0
 800919e:	460e      	mov	r6, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80091a0:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 80091a4:	aa01      	add	r2, sp, #4
 80091a6:	2301      	movs	r3, #1
 80091a8:	2156      	movs	r1, #86	; 0x56
 80091aa:	47a8      	blx	r5
  lsm6dso_tap_cfg0_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_TAP_CFG0, (uint8_t*)&reg, 1);
  if (ret == 0) {
 80091ac:	b958      	cbnz	r0, 80091c6 <lsm6dso_tap_detection_on_x_set+0x2e>
    reg.tap_x_en = val;
 80091ae:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80091b2:	6825      	ldr	r5, [r4, #0]
 80091b4:	68a0      	ldr	r0, [r4, #8]
    reg.tap_x_en = val;
 80091b6:	f366 03c3 	bfi	r3, r6, #3, #1
 80091ba:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80091be:	aa01      	add	r2, sp, #4
 80091c0:	2301      	movs	r3, #1
 80091c2:	2156      	movs	r1, #86	; 0x56
 80091c4:	47a8      	blx	r5
    ret = lsm6dso_write_reg(ctx, LSM6DSO_TAP_CFG0, (uint8_t*)&reg, 1);
  }
  return ret;
}
 80091c6:	b002      	add	sp, #8
 80091c8:	bd70      	pop	{r4, r5, r6, pc}
 80091ca:	bf00      	nop

080091cc <lsm6dso_tap_threshold_x_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of tap_ths_x in reg TAP_CFG1
  *
  */
int32_t lsm6dso_tap_threshold_x_set(lsm6dso_ctx_t *ctx, uint8_t val)
{
 80091cc:	b570      	push	{r4, r5, r6, lr}
 80091ce:	b082      	sub	sp, #8
 80091d0:	4604      	mov	r4, r0
 80091d2:	460e      	mov	r6, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80091d4:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 80091d8:	aa01      	add	r2, sp, #4
 80091da:	2301      	movs	r3, #1
 80091dc:	2157      	movs	r1, #87	; 0x57
 80091de:	47a8      	blx	r5
  lsm6dso_tap_cfg1_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_TAP_CFG1, (uint8_t*)&reg, 1);
  if (ret == 0) {
 80091e0:	b958      	cbnz	r0, 80091fa <lsm6dso_tap_threshold_x_set+0x2e>
    reg.tap_ths_x = val;
 80091e2:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80091e6:	6825      	ldr	r5, [r4, #0]
 80091e8:	68a0      	ldr	r0, [r4, #8]
    reg.tap_ths_x = val;
 80091ea:	f366 0304 	bfi	r3, r6, #0, #5
 80091ee:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80091f2:	aa01      	add	r2, sp, #4
 80091f4:	2301      	movs	r3, #1
 80091f6:	2157      	movs	r1, #87	; 0x57
 80091f8:	47a8      	blx	r5
    ret = lsm6dso_write_reg(ctx, LSM6DSO_TAP_CFG1, (uint8_t*)&reg, 1);
  }
  return ret;
}
 80091fa:	b002      	add	sp, #8
 80091fc:	bd70      	pop	{r4, r5, r6, pc}
 80091fe:	bf00      	nop

08009200 <lsm6dso_tap_shock_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of shock in reg INT_DUR2
  *
  */
int32_t lsm6dso_tap_shock_set(lsm6dso_ctx_t *ctx, uint8_t val)
{
 8009200:	b570      	push	{r4, r5, r6, lr}
 8009202:	b082      	sub	sp, #8
 8009204:	4604      	mov	r4, r0
 8009206:	460e      	mov	r6, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8009208:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 800920c:	aa01      	add	r2, sp, #4
 800920e:	2301      	movs	r3, #1
 8009210:	215a      	movs	r1, #90	; 0x5a
 8009212:	47a8      	blx	r5
  lsm6dso_int_dur2_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_INT_DUR2, (uint8_t*)&reg, 1);
  if (ret == 0) {
 8009214:	b958      	cbnz	r0, 800922e <lsm6dso_tap_shock_set+0x2e>
    reg.shock = val;
 8009216:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800921a:	6825      	ldr	r5, [r4, #0]
 800921c:	68a0      	ldr	r0, [r4, #8]
    reg.shock = val;
 800921e:	f366 0301 	bfi	r3, r6, #0, #2
 8009222:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8009226:	aa01      	add	r2, sp, #4
 8009228:	2301      	movs	r3, #1
 800922a:	215a      	movs	r1, #90	; 0x5a
 800922c:	47a8      	blx	r5
    ret = lsm6dso_write_reg(ctx, LSM6DSO_INT_DUR2, (uint8_t*)&reg, 1);
  }
  return ret;
}
 800922e:	b002      	add	sp, #8
 8009230:	bd70      	pop	{r4, r5, r6, pc}
 8009232:	bf00      	nop

08009234 <lsm6dso_tap_quiet_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of quiet in reg INT_DUR2
  *
  */
int32_t lsm6dso_tap_quiet_set(lsm6dso_ctx_t *ctx, uint8_t val)
{
 8009234:	b570      	push	{r4, r5, r6, lr}
 8009236:	b082      	sub	sp, #8
 8009238:	4604      	mov	r4, r0
 800923a:	460e      	mov	r6, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800923c:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8009240:	aa01      	add	r2, sp, #4
 8009242:	2301      	movs	r3, #1
 8009244:	215a      	movs	r1, #90	; 0x5a
 8009246:	47a8      	blx	r5
  lsm6dso_int_dur2_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_INT_DUR2, (uint8_t*)&reg, 1);
  if (ret == 0) {
 8009248:	b958      	cbnz	r0, 8009262 <lsm6dso_tap_quiet_set+0x2e>
    reg.quiet = val;
 800924a:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800924e:	6825      	ldr	r5, [r4, #0]
 8009250:	68a0      	ldr	r0, [r4, #8]
    reg.quiet = val;
 8009252:	f366 0383 	bfi	r3, r6, #2, #2
 8009256:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800925a:	aa01      	add	r2, sp, #4
 800925c:	2301      	movs	r3, #1
 800925e:	215a      	movs	r1, #90	; 0x5a
 8009260:	47a8      	blx	r5
    ret = lsm6dso_write_reg(ctx, LSM6DSO_INT_DUR2, (uint8_t*)&reg, 1);
  }
  return ret;
}
 8009262:	b002      	add	sp, #8
 8009264:	bd70      	pop	{r4, r5, r6, pc}
 8009266:	bf00      	nop

08009268 <lsm6dso_tap_dur_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of dur in reg INT_DUR2
  *
  */
int32_t lsm6dso_tap_dur_set(lsm6dso_ctx_t *ctx, uint8_t val)
{
 8009268:	b570      	push	{r4, r5, r6, lr}
 800926a:	b082      	sub	sp, #8
 800926c:	4604      	mov	r4, r0
 800926e:	460e      	mov	r6, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8009270:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8009274:	aa01      	add	r2, sp, #4
 8009276:	2301      	movs	r3, #1
 8009278:	215a      	movs	r1, #90	; 0x5a
 800927a:	47a8      	blx	r5
  lsm6dso_int_dur2_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_INT_DUR2, (uint8_t*)&reg, 1);
  if (ret == 0) {
 800927c:	b958      	cbnz	r0, 8009296 <lsm6dso_tap_dur_set+0x2e>
    reg.dur = val;
 800927e:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8009282:	6825      	ldr	r5, [r4, #0]
 8009284:	68a0      	ldr	r0, [r4, #8]
    reg.dur = val;
 8009286:	f366 1307 	bfi	r3, r6, #4, #4
 800928a:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800928e:	aa01      	add	r2, sp, #4
 8009290:	2301      	movs	r3, #1
 8009292:	215a      	movs	r1, #90	; 0x5a
 8009294:	47a8      	blx	r5
    ret = lsm6dso_write_reg(ctx, LSM6DSO_INT_DUR2, (uint8_t*)&reg, 1);
  }
  return ret;
}
 8009296:	b002      	add	sp, #8
 8009298:	bd70      	pop	{r4, r5, r6, pc}
 800929a:	bf00      	nop

0800929c <lsm6dso_tap_mode_set>:
  * @param  val      change the values of single_double_tap in reg WAKE_UP_THS
  *
  */
int32_t lsm6dso_tap_mode_set(lsm6dso_ctx_t *ctx,
                             lsm6dso_single_double_tap_t val)
{
 800929c:	b570      	push	{r4, r5, r6, lr}
 800929e:	b082      	sub	sp, #8
 80092a0:	4604      	mov	r4, r0
 80092a2:	460e      	mov	r6, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80092a4:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 80092a8:	aa01      	add	r2, sp, #4
 80092aa:	2301      	movs	r3, #1
 80092ac:	215b      	movs	r1, #91	; 0x5b
 80092ae:	47a8      	blx	r5
  lsm6dso_wake_up_ths_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WAKE_UP_THS, (uint8_t*)&reg, 1);
  if (ret == 0) {
 80092b0:	b958      	cbnz	r0, 80092ca <lsm6dso_tap_mode_set+0x2e>
    reg.single_double_tap = (uint8_t)val;
 80092b2:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80092b6:	6825      	ldr	r5, [r4, #0]
 80092b8:	68a0      	ldr	r0, [r4, #8]
    reg.single_double_tap = (uint8_t)val;
 80092ba:	f366 13c7 	bfi	r3, r6, #7, #1
 80092be:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80092c2:	aa01      	add	r2, sp, #4
 80092c4:	2301      	movs	r3, #1
 80092c6:	215b      	movs	r1, #91	; 0x5b
 80092c8:	47a8      	blx	r5
    ret = lsm6dso_write_reg(ctx, LSM6DSO_WAKE_UP_THS, (uint8_t*)&reg, 1);
  }
  return ret;
}
 80092ca:	b002      	add	sp, #8
 80092cc:	bd70      	pop	{r4, r5, r6, pc}
 80092ce:	bf00      	nop

080092d0 <lsm6dso_6d_threshold_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of sixd_ths in reg TAP_THS_6D
  *
  */
int32_t lsm6dso_6d_threshold_set(lsm6dso_ctx_t *ctx, lsm6dso_sixd_ths_t val)
{
 80092d0:	b570      	push	{r4, r5, r6, lr}
 80092d2:	b082      	sub	sp, #8
 80092d4:	4604      	mov	r4, r0
 80092d6:	460e      	mov	r6, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80092d8:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 80092dc:	aa01      	add	r2, sp, #4
 80092de:	2301      	movs	r3, #1
 80092e0:	2159      	movs	r1, #89	; 0x59
 80092e2:	47a8      	blx	r5
  lsm6dso_tap_ths_6d_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_TAP_THS_6D, (uint8_t*)&reg, 1);
  if (ret == 0) {
 80092e4:	b958      	cbnz	r0, 80092fe <lsm6dso_6d_threshold_set+0x2e>
    reg.sixd_ths = (uint8_t)val;
 80092e6:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80092ea:	6825      	ldr	r5, [r4, #0]
 80092ec:	68a0      	ldr	r0, [r4, #8]
    reg.sixd_ths = (uint8_t)val;
 80092ee:	f366 1346 	bfi	r3, r6, #5, #2
 80092f2:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80092f6:	aa01      	add	r2, sp, #4
 80092f8:	2301      	movs	r3, #1
 80092fa:	2159      	movs	r1, #89	; 0x59
 80092fc:	47a8      	blx	r5
    ret = lsm6dso_write_reg(ctx, LSM6DSO_TAP_THS_6D, (uint8_t*)&reg, 1);
  }
  return ret;
}
 80092fe:	b002      	add	sp, #8
 8009300:	bd70      	pop	{r4, r5, r6, pc}
 8009302:	bf00      	nop

08009304 <lsm6dso_ff_threshold_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of ff_ths in reg FREE_FALL
  *
  */
int32_t lsm6dso_ff_threshold_set(lsm6dso_ctx_t *ctx, lsm6dso_ff_ths_t val)
{
 8009304:	b570      	push	{r4, r5, r6, lr}
 8009306:	b082      	sub	sp, #8
 8009308:	4604      	mov	r4, r0
 800930a:	460e      	mov	r6, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800930c:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8009310:	aa01      	add	r2, sp, #4
 8009312:	2301      	movs	r3, #1
 8009314:	215d      	movs	r1, #93	; 0x5d
 8009316:	47a8      	blx	r5
  lsm6dso_free_fall_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FREE_FALL, (uint8_t*)&reg, 1);
  if (ret == 0) {
 8009318:	b958      	cbnz	r0, 8009332 <lsm6dso_ff_threshold_set+0x2e>
    reg.ff_ths = (uint8_t)val;
 800931a:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800931e:	6825      	ldr	r5, [r4, #0]
 8009320:	68a0      	ldr	r0, [r4, #8]
    reg.ff_ths = (uint8_t)val;
 8009322:	f366 0302 	bfi	r3, r6, #0, #3
 8009326:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800932a:	aa01      	add	r2, sp, #4
 800932c:	2301      	movs	r3, #1
 800932e:	215d      	movs	r1, #93	; 0x5d
 8009330:	47a8      	blx	r5
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FREE_FALL, (uint8_t*)&reg, 1);
  }
  return ret;
}
 8009332:	b002      	add	sp, #8
 8009334:	bd70      	pop	{r4, r5, r6, pc}
 8009336:	bf00      	nop

08009338 <lsm6dso_ff_dur_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of ff_dur in reg FREE_FALL
  *
  */
int32_t lsm6dso_ff_dur_set(lsm6dso_ctx_t *ctx, uint8_t val)
{
 8009338:	b570      	push	{r4, r5, r6, lr}
 800933a:	b082      	sub	sp, #8
 800933c:	4604      	mov	r4, r0
 800933e:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8009340:	e9d0 6001 	ldrd	r6, r0, [r0, #4]
 8009344:	466a      	mov	r2, sp
 8009346:	2301      	movs	r3, #1
 8009348:	215c      	movs	r1, #92	; 0x5c
 800934a:	47b0      	blx	r6
  lsm6dso_wake_up_dur_t wake_up_dur;
  lsm6dso_free_fall_t free_fall;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WAKE_UP_DUR, (uint8_t*)&wake_up_dur, 1);
  if (ret == 0) {
 800934c:	bb00      	cbnz	r0, 8009390 <lsm6dso_ff_dur_set+0x58>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800934e:	aa01      	add	r2, sp, #4
 8009350:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
 8009354:	2301      	movs	r3, #1
 8009356:	215d      	movs	r1, #93	; 0x5d
 8009358:	47b0      	blx	r6
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FREE_FALL, (uint8_t*)&free_fall, 1);
  }
  if (ret == 0) {
 800935a:	b9c8      	cbnz	r0, 8009390 <lsm6dso_ff_dur_set+0x58>
    wake_up_dur.ff_dur = ((uint8_t)val & 0x20U) >> 5;
 800935c:	f89d 1000 	ldrb.w	r1, [sp]
    free_fall.ff_dur = (uint8_t)val & 0x1FU;
 8009360:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8009364:	6826      	ldr	r6, [r4, #0]
 8009366:	68a0      	ldr	r0, [r4, #8]
    wake_up_dur.ff_dur = ((uint8_t)val & 0x20U) >> 5;
 8009368:	096a      	lsrs	r2, r5, #5
 800936a:	f362 11c7 	bfi	r1, r2, #7, #1
    free_fall.ff_dur = (uint8_t)val & 0x1FU;
 800936e:	f365 03c7 	bfi	r3, r5, #3, #5
    wake_up_dur.ff_dur = ((uint8_t)val & 0x20U) >> 5;
 8009372:	f88d 1000 	strb.w	r1, [sp]
    free_fall.ff_dur = (uint8_t)val & 0x1FU;
 8009376:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800937a:	466a      	mov	r2, sp
 800937c:	2301      	movs	r3, #1
 800937e:	215c      	movs	r1, #92	; 0x5c
 8009380:	47b0      	blx	r6
    ret = lsm6dso_write_reg(ctx, LSM6DSO_WAKE_UP_DUR,
                            (uint8_t*)&wake_up_dur, 1);
  }
  if (ret == 0) {
 8009382:	b928      	cbnz	r0, 8009390 <lsm6dso_ff_dur_set+0x58>
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8009384:	aa01      	add	r2, sp, #4
 8009386:	6825      	ldr	r5, [r4, #0]
 8009388:	68a0      	ldr	r0, [r4, #8]
 800938a:	2301      	movs	r3, #1
 800938c:	215d      	movs	r1, #93	; 0x5d
 800938e:	47a8      	blx	r5
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FREE_FALL, (uint8_t*)&free_fall, 1);
  }
  return ret;
}
 8009390:	b002      	add	sp, #8
 8009392:	bd70      	pop	{r4, r5, r6, pc}

08009394 <lsm6dso_fifo_mode_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of fifo_mode in reg FIFO_CTRL4
  *
  */
int32_t lsm6dso_fifo_mode_set(lsm6dso_ctx_t *ctx, lsm6dso_fifo_mode_t val)
{
 8009394:	b570      	push	{r4, r5, r6, lr}
 8009396:	b082      	sub	sp, #8
 8009398:	4604      	mov	r4, r0
 800939a:	460e      	mov	r6, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800939c:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 80093a0:	aa01      	add	r2, sp, #4
 80093a2:	2301      	movs	r3, #1
 80093a4:	210a      	movs	r1, #10
 80093a6:	47a8      	blx	r5
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t*)&reg, 1);
  if (ret == 0) {
 80093a8:	b958      	cbnz	r0, 80093c2 <lsm6dso_fifo_mode_set+0x2e>
    reg.fifo_mode = (uint8_t)val;
 80093aa:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80093ae:	6825      	ldr	r5, [r4, #0]
 80093b0:	68a0      	ldr	r0, [r4, #8]
    reg.fifo_mode = (uint8_t)val;
 80093b2:	f366 0302 	bfi	r3, r6, #0, #3
 80093b6:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80093ba:	aa01      	add	r2, sp, #4
 80093bc:	2301      	movs	r3, #1
 80093be:	210a      	movs	r1, #10
 80093c0:	47a8      	blx	r5
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t*)&reg, 1);
  }
  return ret;
}
 80093c2:	b002      	add	sp, #8
 80093c4:	bd70      	pop	{r4, r5, r6, pc}
 80093c6:	bf00      	nop

080093c8 <lsm6dso_pedo_sens_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      turn on and configure pedometer
  *
  */
int32_t lsm6dso_pedo_sens_set(lsm6dso_ctx_t *ctx, lsm6dso_pedo_md_t val)
{
 80093c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093ca:	b085      	sub	sp, #20
 80093cc:	460d      	mov	r5, r1
  lsm6dso_emb_func_en_a_t emb_func_en_a;
  lsm6dso_emb_func_en_b_t emb_func_en_b;
  lsm6dso_pedo_cmd_reg_t pedo_cmd_reg;
  int32_t ret;

  ret = lsm6dso_ln_pg_read_byte(ctx, LSM6DSO_PEDO_CMD_REG,
 80093ce:	aa03      	add	r2, sp, #12
 80093d0:	f240 1183 	movw	r1, #387	; 0x183
{
 80093d4:	4604      	mov	r4, r0
  ret = lsm6dso_ln_pg_read_byte(ctx, LSM6DSO_PEDO_CMD_REG,
 80093d6:	f7ff fad7 	bl	8008988 <lsm6dso_ln_pg_read_byte>
                                (uint8_t*)&pedo_cmd_reg);
  if (ret == 0) {
 80093da:	b108      	cbz	r0, 80093e0 <lsm6dso_pedo_sens_set+0x18>
  if (ret == 0) {
    ret = lsm6dso_ln_pg_write_byte(ctx, LSM6DSO_PEDO_CMD_REG,
                                   (uint8_t*)&pedo_cmd_reg);
  }
  return ret;
}
 80093dc:	b005      	add	sp, #20
 80093de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 80093e0:	4620      	mov	r0, r4
 80093e2:	f7ff f80d 	bl	8008400 <lsm6dso_mem_bank_set.constprop.0>
  if (ret == 0) {
 80093e6:	2800      	cmp	r0, #0
 80093e8:	d1f8      	bne.n	80093dc <lsm6dso_pedo_sens_set+0x14>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80093ea:	aa01      	add	r2, sp, #4
 80093ec:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
 80093f0:	2301      	movs	r3, #1
 80093f2:	2104      	movs	r1, #4
 80093f4:	47b0      	blx	r6
  if (ret == 0) {
 80093f6:	2800      	cmp	r0, #0
 80093f8:	d1f0      	bne.n	80093dc <lsm6dso_pedo_sens_set+0x14>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80093fa:	aa02      	add	r2, sp, #8
 80093fc:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
 8009400:	2301      	movs	r3, #1
 8009402:	2105      	movs	r1, #5
 8009404:	47b0      	blx	r6
    pedo_cmd_reg.fp_rejection_en = ((uint8_t)val & 0x10U)>>4;
 8009406:	f89d 300c 	ldrb.w	r3, [sp, #12]
    emb_func_en_a.pedo_en = (uint8_t)val & 0x01U;
 800940a:	f89d 1004 	ldrb.w	r1, [sp, #4]
    emb_func_en_b.pedo_adv_en = ((uint8_t)val & 0x02U)>>1;
 800940e:	f89d 2008 	ldrb.w	r2, [sp, #8]
    pedo_cmd_reg.fp_rejection_en = ((uint8_t)val & 0x10U)>>4;
 8009412:	092e      	lsrs	r6, r5, #4
 8009414:	f366 0382 	bfi	r3, r6, #2, #1
    pedo_cmd_reg.ad_det_en = ((uint8_t)val & 0x20U)>>5;
 8009418:	096f      	lsrs	r7, r5, #5
    emb_func_en_b.pedo_adv_en = ((uint8_t)val & 0x02U)>>1;
 800941a:	086e      	lsrs	r6, r5, #1
    pedo_cmd_reg.ad_det_en = ((uint8_t)val & 0x20U)>>5;
 800941c:	f367 0300 	bfi	r3, r7, #0, #1
    emb_func_en_a.pedo_en = (uint8_t)val & 0x01U;
 8009420:	f365 01c3 	bfi	r1, r5, #3, #1
    emb_func_en_b.pedo_adv_en = ((uint8_t)val & 0x02U)>>1;
 8009424:	f366 1204 	bfi	r2, r6, #4, #1
    pedo_cmd_reg.ad_det_en = ((uint8_t)val & 0x20U)>>5;
 8009428:	f88d 300c 	strb.w	r3, [sp, #12]
    emb_func_en_a.pedo_en = (uint8_t)val & 0x01U;
 800942c:	f88d 1004 	strb.w	r1, [sp, #4]
    emb_func_en_b.pedo_adv_en = ((uint8_t)val & 0x02U)>>1;
 8009430:	f88d 2008 	strb.w	r2, [sp, #8]
  if (ret == 0) {
 8009434:	2800      	cmp	r0, #0
 8009436:	d1d1      	bne.n	80093dc <lsm6dso_pedo_sens_set+0x14>
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8009438:	aa01      	add	r2, sp, #4
 800943a:	6825      	ldr	r5, [r4, #0]
 800943c:	68a0      	ldr	r0, [r4, #8]
 800943e:	2301      	movs	r3, #1
 8009440:	2104      	movs	r1, #4
 8009442:	47a8      	blx	r5
  if (ret == 0) {
 8009444:	2800      	cmp	r0, #0
 8009446:	d1c9      	bne.n	80093dc <lsm6dso_pedo_sens_set+0x14>
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8009448:	aa02      	add	r2, sp, #8
 800944a:	6825      	ldr	r5, [r4, #0]
 800944c:	68a0      	ldr	r0, [r4, #8]
 800944e:	2301      	movs	r3, #1
 8009450:	2105      	movs	r1, #5
 8009452:	47a8      	blx	r5
  if (ret == 0) {
 8009454:	2800      	cmp	r0, #0
 8009456:	d1c1      	bne.n	80093dc <lsm6dso_pedo_sens_set+0x14>
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8009458:	4620      	mov	r0, r4
 800945a:	f7fe ffeb 	bl	8008434 <lsm6dso_mem_bank_set.constprop.2>
  if (ret == 0) {
 800945e:	2800      	cmp	r0, #0
 8009460:	d1bc      	bne.n	80093dc <lsm6dso_pedo_sens_set+0x14>
    ret = lsm6dso_ln_pg_write_byte(ctx, LSM6DSO_PEDO_CMD_REG,
 8009462:	aa03      	add	r2, sp, #12
 8009464:	4620      	mov	r0, r4
 8009466:	f240 1183 	movw	r1, #387	; 0x183
 800946a:	f7ff fa05 	bl	8008878 <lsm6dso_ln_pg_write_byte>
}
 800946e:	b005      	add	sp, #20
 8009470:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009472:	bf00      	nop

08009474 <lsm6dso_tilt_sens_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of tilt_en in reg EMB_FUNC_EN_A
  *
  */
int32_t lsm6dso_tilt_sens_set(lsm6dso_ctx_t *ctx, uint8_t val)
{
 8009474:	b570      	push	{r4, r5, r6, lr}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8009476:	2301      	movs	r3, #1
{
 8009478:	b082      	sub	sp, #8
 800947a:	4604      	mov	r4, r0
 800947c:	460e      	mov	r6, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800947e:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 8009482:	4619      	mov	r1, r3
 8009484:	aa01      	add	r2, sp, #4
 8009486:	47a8      	blx	r5
  if (ret == 0) {
 8009488:	4603      	mov	r3, r0
 800948a:	bb20      	cbnz	r0, 80094d6 <lsm6dso_tilt_sens_set+0x62>
    reg.reg_access = (uint8_t)val;
 800948c:	f89d 2004 	ldrb.w	r2, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8009490:	6825      	ldr	r5, [r4, #0]
 8009492:	68a0      	ldr	r0, [r4, #8]
    reg.reg_access = (uint8_t)val;
 8009494:	2302      	movs	r3, #2
 8009496:	f363 1287 	bfi	r2, r3, #6, #2
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800949a:	2301      	movs	r3, #1
    reg.reg_access = (uint8_t)val;
 800949c:	f88d 2004 	strb.w	r2, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80094a0:	4619      	mov	r1, r3
 80094a2:	aa01      	add	r2, sp, #4
 80094a4:	47a8      	blx	r5
  lsm6dso_emb_func_en_a_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
  if (ret == 0) {
 80094a6:	4603      	mov	r3, r0
 80094a8:	b9a8      	cbnz	r0, 80094d6 <lsm6dso_tilt_sens_set+0x62>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80094aa:	2301      	movs	r3, #1
 80094ac:	466a      	mov	r2, sp
 80094ae:	e9d4 5001 	ldrd	r5, r0, [r4, #4]
 80094b2:	2104      	movs	r1, #4
 80094b4:	47a8      	blx	r5
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_EN_A, (uint8_t*)&reg, 1);
  }
  if (ret == 0) {
 80094b6:	4603      	mov	r3, r0
 80094b8:	b968      	cbnz	r0, 80094d6 <lsm6dso_tilt_sens_set+0x62>
    reg.tilt_en = val;
 80094ba:	f89d 3000 	ldrb.w	r3, [sp]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80094be:	6825      	ldr	r5, [r4, #0]
 80094c0:	68a0      	ldr	r0, [r4, #8]
    reg.tilt_en = val;
 80094c2:	f366 1304 	bfi	r3, r6, #4, #1
 80094c6:	f88d 3000 	strb.w	r3, [sp]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80094ca:	466a      	mov	r2, sp
 80094cc:	2301      	movs	r3, #1
 80094ce:	2104      	movs	r1, #4
 80094d0:	47a8      	blx	r5
    ret = lsm6dso_write_reg(ctx, LSM6DSO_EMB_FUNC_EN_A, (uint8_t*)&reg, 1);
  }
  if (ret == 0) {
 80094d2:	4603      	mov	r3, r0
 80094d4:	b110      	cbz	r0, 80094dc <lsm6dso_tilt_sens_set+0x68>
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
  }
  return ret;
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	b002      	add	sp, #8
 80094da:	bd70      	pop	{r4, r5, r6, pc}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80094dc:	2301      	movs	r3, #1
 80094de:	4619      	mov	r1, r3
 80094e0:	e9d4 5001 	ldrd	r5, r0, [r4, #4]
 80094e4:	aa01      	add	r2, sp, #4
 80094e6:	47a8      	blx	r5
  if (ret == 0) {
 80094e8:	4603      	mov	r3, r0
 80094ea:	2800      	cmp	r0, #0
 80094ec:	d1f3      	bne.n	80094d6 <lsm6dso_tilt_sens_set+0x62>
    reg.reg_access = (uint8_t)val;
 80094ee:	f89d 1004 	ldrb.w	r1, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80094f2:	6825      	ldr	r5, [r4, #0]
 80094f4:	68a0      	ldr	r0, [r4, #8]
    reg.reg_access = (uint8_t)val;
 80094f6:	f363 1187 	bfi	r1, r3, #6, #2
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80094fa:	2301      	movs	r3, #1
    reg.reg_access = (uint8_t)val;
 80094fc:	f88d 1004 	strb.w	r1, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8009500:	aa01      	add	r2, sp, #4
 8009502:	4619      	mov	r1, r3
 8009504:	47a8      	blx	r5
 8009506:	4603      	mov	r3, r0
}
 8009508:	4618      	mov	r0, r3
 800950a:	b002      	add	sp, #8
 800950c:	bd70      	pop	{r4, r5, r6, pc}
 800950e:	bf00      	nop

08009510 <lsm6dso_tilt_flag_data_ready_get>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of is_tilt in reg EMB_FUNC_STATUS
  *
  */
int32_t lsm6dso_tilt_flag_data_ready_get(lsm6dso_ctx_t *ctx, uint8_t *val)
{
 8009510:	b570      	push	{r4, r5, r6, lr}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8009512:	2301      	movs	r3, #1
{
 8009514:	b082      	sub	sp, #8
 8009516:	4604      	mov	r4, r0
 8009518:	460e      	mov	r6, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800951a:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 800951e:	4619      	mov	r1, r3
 8009520:	aa01      	add	r2, sp, #4
 8009522:	47a8      	blx	r5
  if (ret == 0) {
 8009524:	4603      	mov	r3, r0
 8009526:	b9b0      	cbnz	r0, 8009556 <lsm6dso_tilt_flag_data_ready_get+0x46>
    reg.reg_access = (uint8_t)val;
 8009528:	f89d 2004 	ldrb.w	r2, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800952c:	6825      	ldr	r5, [r4, #0]
 800952e:	68a0      	ldr	r0, [r4, #8]
    reg.reg_access = (uint8_t)val;
 8009530:	2302      	movs	r3, #2
 8009532:	f363 1287 	bfi	r2, r3, #6, #2
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8009536:	2301      	movs	r3, #1
    reg.reg_access = (uint8_t)val;
 8009538:	f88d 2004 	strb.w	r2, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800953c:	4619      	mov	r1, r3
 800953e:	aa01      	add	r2, sp, #4
 8009540:	47a8      	blx	r5
  lsm6dso_emb_func_status_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
  if (ret == 0) {
 8009542:	4603      	mov	r3, r0
 8009544:	b938      	cbnz	r0, 8009556 <lsm6dso_tilt_flag_data_ready_get+0x46>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8009546:	2301      	movs	r3, #1
 8009548:	e9d4 5001 	ldrd	r5, r0, [r4, #4]
 800954c:	466a      	mov	r2, sp
 800954e:	2112      	movs	r1, #18
 8009550:	47a8      	blx	r5
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_STATUS, (uint8_t*)&reg, 1);
  }
  if (ret == 0) {
 8009552:	4603      	mov	r3, r0
 8009554:	b110      	cbz	r0, 800955c <lsm6dso_tilt_flag_data_ready_get+0x4c>
    *val = reg.is_tilt;
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
  }

  return ret;
}
 8009556:	4618      	mov	r0, r3
 8009558:	b002      	add	sp, #8
 800955a:	bd70      	pop	{r4, r5, r6, pc}
    *val = reg.is_tilt;
 800955c:	f89d 3000 	ldrb.w	r3, [sp]
 8009560:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8009564:	7033      	strb	r3, [r6, #0]
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8009566:	2301      	movs	r3, #1
 8009568:	4619      	mov	r1, r3
 800956a:	e9d4 5001 	ldrd	r5, r0, [r4, #4]
 800956e:	aa01      	add	r2, sp, #4
 8009570:	47a8      	blx	r5
  if (ret == 0) {
 8009572:	4603      	mov	r3, r0
 8009574:	2800      	cmp	r0, #0
 8009576:	d1ee      	bne.n	8009556 <lsm6dso_tilt_flag_data_ready_get+0x46>
    reg.reg_access = (uint8_t)val;
 8009578:	f89d 1004 	ldrb.w	r1, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800957c:	6825      	ldr	r5, [r4, #0]
 800957e:	68a0      	ldr	r0, [r4, #8]
    reg.reg_access = (uint8_t)val;
 8009580:	f363 1187 	bfi	r1, r3, #6, #2
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8009584:	2301      	movs	r3, #1
    reg.reg_access = (uint8_t)val;
 8009586:	f88d 1004 	strb.w	r1, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800958a:	aa01      	add	r2, sp, #4
 800958c:	4619      	mov	r1, r3
 800958e:	47a8      	blx	r5
 8009590:	4603      	mov	r3, r0
}
 8009592:	4618      	mov	r0, r3
 8009594:	b002      	add	sp, #8
 8009596:	bd70      	pop	{r4, r5, r6, pc}

08009598 <IKS01A3_ENV_SENSOR_Init>:
 *         - ENV_TEMPERATURE and/or ENV_PRESSURE for instance 1
 *         - ENV_TEMPERATURE for instance 2
 * @retval BSP status
 */
int32_t IKS01A3_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8009598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800959c:	460e      	mov	r6, r1
 800959e:	b08d      	sub	sp, #52	; 0x34
  uint32_t function = ENV_TEMPERATURE;
  uint32_t i;
  uint32_t component_functions = 0;
  IKS01A3_ENV_SENSOR_Capabilities_t cap;

  switch (Instance)
 80095a0:	4605      	mov	r5, r0
 80095a2:	2800      	cmp	r0, #0
 80095a4:	f000 8098 	beq.w	80096d8 <IKS01A3_ENV_SENSOR_Init+0x140>
 80095a8:	2801      	cmp	r0, #1
 80095aa:	d146      	bne.n	800963a <IKS01A3_ENV_SENSOR_Init+0xa2>
  LPS22HH_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = LPS22HH_I2C_BUS; /* I2C */
  io_ctx.Address     = LPS22HH_I2C_ADD_H;
  io_ctx.Init        = IKS01A3_I2C_Init;
 80095ac:	4b9d      	ldr	r3, [pc, #628]	; (8009824 <IKS01A3_ENV_SENSOR_Init+0x28c>)
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
  io_ctx.GetTick     = IKS01A3_GetTick;

  if (LPS22HH_RegisterBusIO(&lps22hh_obj_0, &io_ctx) != LPS22HH_OK)
 80095ae:	4c9e      	ldr	r4, [pc, #632]	; (8009828 <IKS01A3_ENV_SENSOR_Init+0x290>)
  io_ctx.Init        = IKS01A3_I2C_Init;
 80095b0:	9305      	str	r3, [sp, #20]
  io_ctx.BusType     = LPS22HH_I2C_BUS; /* I2C */
 80095b2:	2200      	movs	r2, #0
  io_ctx.Address     = LPS22HH_I2C_ADD_H;
 80095b4:	23bb      	movs	r3, #187	; 0xbb
  if (LPS22HH_RegisterBusIO(&lps22hh_obj_0, &io_ctx) != LPS22HH_OK)
 80095b6:	f104 0954 	add.w	r9, r4, #84	; 0x54
 80095ba:	f10d 0b14 	add.w	fp, sp, #20
  io_ctx.BusType     = LPS22HH_I2C_BUS; /* I2C */
 80095be:	9207      	str	r2, [sp, #28]
  io_ctx.Address     = LPS22HH_I2C_ADD_H;
 80095c0:	f88d 3020 	strb.w	r3, [sp, #32]
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 80095c4:	4a99      	ldr	r2, [pc, #612]	; (800982c <IKS01A3_ENV_SENSOR_Init+0x294>)
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 80095c6:	4b9a      	ldr	r3, [pc, #616]	; (8009830 <IKS01A3_ENV_SENSOR_Init+0x298>)
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 80095c8:	9206      	str	r2, [sp, #24]
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 80095ca:	930a      	str	r3, [sp, #40]	; 0x28
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 80095cc:	4a99      	ldr	r2, [pc, #612]	; (8009834 <IKS01A3_ENV_SENSOR_Init+0x29c>)
  io_ctx.GetTick     = IKS01A3_GetTick;
 80095ce:	4b9a      	ldr	r3, [pc, #616]	; (8009838 <IKS01A3_ENV_SENSOR_Init+0x2a0>)
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 80095d0:	9209      	str	r2, [sp, #36]	; 0x24
  if (LPS22HH_RegisterBusIO(&lps22hh_obj_0, &io_ctx) != LPS22HH_OK)
 80095d2:	4648      	mov	r0, r9
 80095d4:	4659      	mov	r1, fp
  io_ctx.GetTick     = IKS01A3_GetTick;
 80095d6:	930b      	str	r3, [sp, #44]	; 0x2c
  if (LPS22HH_RegisterBusIO(&lps22hh_obj_0, &io_ctx) != LPS22HH_OK)
 80095d8:	f7fd fb20 	bl	8006c1c <LPS22HH_RegisterBusIO>
 80095dc:	bb40      	cbnz	r0, 8009630 <IKS01A3_ENV_SENSOR_Init+0x98>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (LPS22HH_ReadID(&lps22hh_obj_0, &id) != LPS22HH_OK)
 80095de:	f10d 0103 	add.w	r1, sp, #3
 80095e2:	4648      	mov	r0, r9
 80095e4:	f7fd f89a 	bl	800671c <LPS22HH_ReadID>
 80095e8:	bb10      	cbnz	r0, 8009630 <IKS01A3_ENV_SENSOR_Init+0x98>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (id != LPS22HH_ID)
 80095ea:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80095ee:	2bb3      	cmp	r3, #179	; 0xb3
 80095f0:	d11e      	bne.n	8009630 <IKS01A3_ENV_SENSOR_Init+0x98>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    (void)LPS22HH_GetCapabilities(&lps22hh_obj_0, &cap);
 80095f2:	a901      	add	r1, sp, #4
 80095f4:	4648      	mov	r0, r9
 80095f6:	f7fd f849 	bl	800668c <LPS22HH_GetCapabilities>

    EnvCtx[IKS01A3_LPS22HH_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 80095fa:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80095fe:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8009602:	f89d 2004 	ldrb.w	r2, [sp, #4]
                                            uint32_t)cap.Humidity << 2);

    EnvCompObj[IKS01A3_LPS22HH_0] = &lps22hh_obj_0;
 8009606:	4f8d      	ldr	r7, [pc, #564]	; (800983c <IKS01A3_ENV_SENSOR_Init+0x2a4>)
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_LPS22HH_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22HH_COMMON_Driver;
 8009608:	498d      	ldr	r1, [pc, #564]	; (8009840 <IKS01A3_ENV_SENSOR_Init+0x2a8>)
    EnvCompObj[IKS01A3_LPS22HH_0] = &lps22hh_obj_0;
 800960a:	f8c7 9004 	str.w	r9, [r7, #4]
                                            uint32_t)cap.Humidity << 2);
 800960e:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A3_LPS22HH_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8009610:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
 8009614:	4313      	orrs	r3, r2

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8009616:	f016 0801 	ands.w	r8, r6, #1
    EnvCtx[IKS01A3_LPS22HH_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 800961a:	6323      	str	r3, [r4, #48]	; 0x30
    EnvDrv[IKS01A3_LPS22HH_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22HH_COMMON_Driver;
 800961c:	63a1      	str	r1, [r4, #56]	; 0x38
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800961e:	d011      	beq.n	8009644 <IKS01A3_ENV_SENSOR_Init+0xac>
 8009620:	2a01      	cmp	r2, #1
 8009622:	d10f      	bne.n	8009644 <IKS01A3_ENV_SENSOR_Init+0xac>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_LPS22HH_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_TEMP_Driver;
 8009624:	4a87      	ldr	r2, [pc, #540]	; (8009844 <IKS01A3_ENV_SENSOR_Init+0x2ac>)

      if (EnvDrv[IKS01A3_LPS22HH_0]->Init(EnvCompObj[IKS01A3_LPS22HH_0]) != LPS22HH_OK)
 8009626:	680b      	ldr	r3, [r1, #0]
      EnvFuncDrv[IKS01A3_LPS22HH_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_TEMP_Driver;
 8009628:	64a2      	str	r2, [r4, #72]	; 0x48
      if (EnvDrv[IKS01A3_LPS22HH_0]->Init(EnvCompObj[IKS01A3_LPS22HH_0]) != LPS22HH_OK)
 800962a:	4648      	mov	r0, r9
 800962c:	4798      	blx	r3
 800962e:	b148      	cbz	r0, 8009644 <IKS01A3_ENV_SENSOR_Init+0xac>
        return BSP_ERROR_NO_INIT;
 8009630:	f04f 30ff 	mov.w	r0, #4294967295
}
 8009634:	b00d      	add	sp, #52	; 0x34
 8009636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      ret = BSP_ERROR_WRONG_PARAM;
 800963a:	f06f 0001 	mvn.w	r0, #1
}
 800963e:	b00d      	add	sp, #52	; 0x34
 8009640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else
      {
        ret = BSP_ERROR_NONE;
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 8009644:	f016 0a02 	ands.w	sl, r6, #2
 8009648:	d00b      	beq.n	8009662 <IKS01A3_ENV_SENSOR_Init+0xca>
 800964a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800964e:	2b01      	cmp	r3, #1
 8009650:	d107      	bne.n	8009662 <IKS01A3_ENV_SENSOR_Init+0xca>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_LPS22HH_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_PRESS_Driver;

      if (EnvDrv[IKS01A3_LPS22HH_0]->Init(EnvCompObj[IKS01A3_LPS22HH_0]) != LPS22HH_OK)
 8009652:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      EnvFuncDrv[IKS01A3_LPS22HH_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_PRESS_Driver;
 8009654:	4a7c      	ldr	r2, [pc, #496]	; (8009848 <IKS01A3_ENV_SENSOR_Init+0x2b0>)
      if (EnvDrv[IKS01A3_LPS22HH_0]->Init(EnvCompObj[IKS01A3_LPS22HH_0]) != LPS22HH_OK)
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	6878      	ldr	r0, [r7, #4]
      EnvFuncDrv[IKS01A3_LPS22HH_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_PRESS_Driver;
 800965a:	64e2      	str	r2, [r4, #76]	; 0x4c
      if (EnvDrv[IKS01A3_LPS22HH_0]->Init(EnvCompObj[IKS01A3_LPS22HH_0]) != LPS22HH_OK)
 800965c:	4798      	blx	r3
 800965e:	2800      	cmp	r0, #0
 8009660:	d1e6      	bne.n	8009630 <IKS01A3_ENV_SENSOR_Init+0x98>
      else
      {
        ret = BSP_ERROR_NONE;
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 8009662:	f016 0904 	ands.w	r9, r6, #4
 8009666:	d1e3      	bne.n	8009630 <IKS01A3_ENV_SENSOR_Init+0x98>
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8009668:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	68db      	ldr	r3, [r3, #12]
 800966e:	4659      	mov	r1, fp
 8009670:	4798      	blx	r3
 8009672:	2800      	cmp	r0, #0
 8009674:	f040 80d2 	bne.w	800981c <IKS01A3_ENV_SENSOR_Init+0x284>
      if (cap.Temperature == 1U)
 8009678:	f89d 6014 	ldrb.w	r6, [sp, #20]
      if (cap.Humidity == 1U)
 800967c:	f89d 3016 	ldrb.w	r3, [sp, #22]
      if (cap.Temperature == 1U)
 8009680:	f1a6 0601 	sub.w	r6, r6, #1
      if (cap.Humidity == 1U)
 8009684:	2b01      	cmp	r3, #1
      if (cap.Temperature == 1U)
 8009686:	fab6 f686 	clz	r6, r6
      if (cap.Pressure == 1U)
 800968a:	f89d 3015 	ldrb.w	r3, [sp, #21]
      if (cap.Temperature == 1U)
 800968e:	ea4f 1656 	mov.w	r6, r6, lsr #5
        component_functions |= ENV_HUMIDITY;
 8009692:	bf08      	it	eq
 8009694:	f046 0604 	orreq.w	r6, r6, #4
      if (cap.Pressure == 1U)
 8009698:	2b01      	cmp	r3, #1
 800969a:	f000 80a8 	beq.w	80097ee <IKS01A3_ENV_SENSOR_Init+0x256>
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800969e:	f1b8 0f00 	cmp.w	r8, #0
 80096a2:	f040 808b 	bne.w	80097bc <IKS01A3_ENV_SENSOR_Init+0x224>
 80096a6:	f1ba 0f00 	cmp.w	sl, #0
 80096aa:	d00d      	beq.n	80096c8 <IKS01A3_ENV_SENSOR_Init+0x130>
 80096ac:	07b3      	lsls	r3, r6, #30
 80096ae:	d50b      	bpl.n	80096c8 <IKS01A3_ENV_SENSOR_Init+0x130>
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 80096b0:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80096b4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80096b8:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
 80096bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	4798      	blx	r3
 80096c2:	2800      	cmp	r0, #0
 80096c4:	f040 8089 	bne.w	80097da <IKS01A3_ENV_SENSOR_Init+0x242>
    if (((Functions & function) == function) && ((component_functions & function) == function))
 80096c8:	f1b9 0f00 	cmp.w	r9, #0
 80096cc:	f040 8096 	bne.w	80097fc <IKS01A3_ENV_SENSOR_Init+0x264>
 80096d0:	2000      	movs	r0, #0
}
 80096d2:	b00d      	add	sp, #52	; 0x34
 80096d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  io_ctx.Address     = HTS221_I2C_ADDRESS;
 80096d8:	22bf      	movs	r2, #191	; 0xbf
  io_ctx.Init        = IKS01A3_I2C_Init;
 80096da:	4b52      	ldr	r3, [pc, #328]	; (8009824 <IKS01A3_ENV_SENSOR_Init+0x28c>)
  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 80096dc:	4c52      	ldr	r4, [pc, #328]	; (8009828 <IKS01A3_ENV_SENSOR_Init+0x290>)
  io_ctx.Address     = HTS221_I2C_ADDRESS;
 80096de:	f88d 2020 	strb.w	r2, [sp, #32]
  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 80096e2:	f10d 0b14 	add.w	fp, sp, #20
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 80096e6:	4a51      	ldr	r2, [pc, #324]	; (800982c <IKS01A3_ENV_SENSOR_Init+0x294>)
  io_ctx.Init        = IKS01A3_I2C_Init;
 80096e8:	9305      	str	r3, [sp, #20]
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 80096ea:	4b51      	ldr	r3, [pc, #324]	; (8009830 <IKS01A3_ENV_SENSOR_Init+0x298>)
  io_ctx.BusType     = HTS221_I2C_BUS; /* I2C */
 80096ec:	9007      	str	r0, [sp, #28]
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 80096ee:	9206      	str	r2, [sp, #24]
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 80096f0:	930a      	str	r3, [sp, #40]	; 0x28
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 80096f2:	4a50      	ldr	r2, [pc, #320]	; (8009834 <IKS01A3_ENV_SENSOR_Init+0x29c>)
  io_ctx.GetTick     = IKS01A3_GetTick;
 80096f4:	4b50      	ldr	r3, [pc, #320]	; (8009838 <IKS01A3_ENV_SENSOR_Init+0x2a0>)
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 80096f6:	9209      	str	r2, [sp, #36]	; 0x24
  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 80096f8:	4620      	mov	r0, r4
 80096fa:	4659      	mov	r1, fp
  io_ctx.GetTick     = IKS01A3_GetTick;
 80096fc:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 80096fe:	f7fb fb71 	bl	8004de4 <HTS221_RegisterBusIO>
 8009702:	2800      	cmp	r0, #0
 8009704:	d194      	bne.n	8009630 <IKS01A3_ENV_SENSOR_Init+0x98>
  else if (HTS221_ReadID(&hts221_obj_0, &id) != HTS221_OK)
 8009706:	f10d 0103 	add.w	r1, sp, #3
 800970a:	4620      	mov	r0, r4
 800970c:	f7fb f96e 	bl	80049ec <HTS221_ReadID>
 8009710:	2800      	cmp	r0, #0
 8009712:	d18d      	bne.n	8009630 <IKS01A3_ENV_SENSOR_Init+0x98>
  else if (id != HTS221_ID)
 8009714:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8009718:	2bbc      	cmp	r3, #188	; 0xbc
 800971a:	d189      	bne.n	8009630 <IKS01A3_ENV_SENSOR_Init+0x98>
    (void)HTS221_GetCapabilities(&hts221_obj_0, &cap);
 800971c:	a901      	add	r1, sp, #4
 800971e:	4620      	mov	r0, r4
 8009720:	f7fb f91c 	bl	800495c <HTS221_GetCapabilities>
    EnvCtx[IKS01A3_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8009724:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009728:	f89d 0005 	ldrb.w	r0, [sp, #5]
 800972c:	f89d 2004 	ldrb.w	r2, [sp, #4]
    EnvCompObj[IKS01A3_HTS221_0] = &hts221_obj_0;
 8009730:	4f42      	ldr	r7, [pc, #264]	; (800983c <IKS01A3_ENV_SENSOR_Init+0x2a4>)
    EnvDrv[IKS01A3_HTS221_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&HTS221_COMMON_Driver;
 8009732:	4946      	ldr	r1, [pc, #280]	; (800984c <IKS01A3_ENV_SENSOR_Init+0x2b4>)
    EnvCompObj[IKS01A3_HTS221_0] = &hts221_obj_0;
 8009734:	603c      	str	r4, [r7, #0]
                                           uint32_t)cap.Humidity << 2);
 8009736:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A3_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8009738:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
 800973c:	4313      	orrs	r3, r2
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800973e:	f016 0801 	ands.w	r8, r6, #1
    EnvCtx[IKS01A3_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8009742:	62e3      	str	r3, [r4, #44]	; 0x2c
    EnvDrv[IKS01A3_HTS221_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&HTS221_COMMON_Driver;
 8009744:	6361      	str	r1, [r4, #52]	; 0x34
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8009746:	d009      	beq.n	800975c <IKS01A3_ENV_SENSOR_Init+0x1c4>
 8009748:	2a01      	cmp	r2, #1
 800974a:	d107      	bne.n	800975c <IKS01A3_ENV_SENSOR_Init+0x1c4>
      EnvFuncDrv[IKS01A3_HTS221_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_TEMP_Driver;
 800974c:	4a40      	ldr	r2, [pc, #256]	; (8009850 <IKS01A3_ENV_SENSOR_Init+0x2b8>)
      if (EnvDrv[IKS01A3_HTS221_0]->Init(EnvCompObj[IKS01A3_HTS221_0]) != HTS221_OK)
 800974e:	680b      	ldr	r3, [r1, #0]
      EnvFuncDrv[IKS01A3_HTS221_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_TEMP_Driver;
 8009750:	63e2      	str	r2, [r4, #60]	; 0x3c
      if (EnvDrv[IKS01A3_HTS221_0]->Init(EnvCompObj[IKS01A3_HTS221_0]) != HTS221_OK)
 8009752:	4620      	mov	r0, r4
 8009754:	4798      	blx	r3
 8009756:	2800      	cmp	r0, #0
 8009758:	f47f af6a 	bne.w	8009630 <IKS01A3_ENV_SENSOR_Init+0x98>
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 800975c:	f016 0904 	ands.w	r9, r6, #4
 8009760:	d00c      	beq.n	800977c <IKS01A3_ENV_SENSOR_Init+0x1e4>
 8009762:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009766:	2b01      	cmp	r3, #1
 8009768:	d108      	bne.n	800977c <IKS01A3_ENV_SENSOR_Init+0x1e4>
      if (EnvDrv[IKS01A3_HTS221_0]->Init(EnvCompObj[IKS01A3_HTS221_0]) != HTS221_OK)
 800976a:	6b63      	ldr	r3, [r4, #52]	; 0x34
      EnvFuncDrv[IKS01A3_HTS221_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_HUM_Driver;
 800976c:	4a39      	ldr	r2, [pc, #228]	; (8009854 <IKS01A3_ENV_SENSOR_Init+0x2bc>)
      if (EnvDrv[IKS01A3_HTS221_0]->Init(EnvCompObj[IKS01A3_HTS221_0]) != HTS221_OK)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	6838      	ldr	r0, [r7, #0]
      EnvFuncDrv[IKS01A3_HTS221_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_HUM_Driver;
 8009772:	6462      	str	r2, [r4, #68]	; 0x44
      if (EnvDrv[IKS01A3_HTS221_0]->Init(EnvCompObj[IKS01A3_HTS221_0]) != HTS221_OK)
 8009774:	4798      	blx	r3
 8009776:	2800      	cmp	r0, #0
 8009778:	f47f af5a 	bne.w	8009630 <IKS01A3_ENV_SENSOR_Init+0x98>
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 800977c:	f016 0a02 	ands.w	sl, r6, #2
 8009780:	f47f af56 	bne.w	8009630 <IKS01A3_ENV_SENSOR_Init+0x98>
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8009784:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009786:	6838      	ldr	r0, [r7, #0]
 8009788:	68db      	ldr	r3, [r3, #12]
 800978a:	4659      	mov	r1, fp
 800978c:	4798      	blx	r3
 800978e:	2800      	cmp	r0, #0
 8009790:	d144      	bne.n	800981c <IKS01A3_ENV_SENSOR_Init+0x284>
      if (cap.Temperature == 1U)
 8009792:	f89d 6014 	ldrb.w	r6, [sp, #20]
      if (cap.Humidity == 1U)
 8009796:	f89d 3016 	ldrb.w	r3, [sp, #22]
      if (cap.Temperature == 1U)
 800979a:	f1a6 0601 	sub.w	r6, r6, #1
      if (cap.Humidity == 1U)
 800979e:	2b01      	cmp	r3, #1
      if (cap.Temperature == 1U)
 80097a0:	fab6 f686 	clz	r6, r6
      if (cap.Pressure == 1U)
 80097a4:	f89d 3015 	ldrb.w	r3, [sp, #21]
      if (cap.Temperature == 1U)
 80097a8:	ea4f 1656 	mov.w	r6, r6, lsr #5
        component_functions |= ENV_HUMIDITY;
 80097ac:	bf08      	it	eq
 80097ae:	f046 0604 	orreq.w	r6, r6, #4
      if (cap.Pressure == 1U)
 80097b2:	2b01      	cmp	r3, #1
 80097b4:	d014      	beq.n	80097e0 <IKS01A3_ENV_SENSOR_Init+0x248>
    if (((Functions & function) == function) && ((component_functions & function) == function))
 80097b6:	f1b8 0f00 	cmp.w	r8, #0
 80097ba:	d085      	beq.n	80096c8 <IKS01A3_ENV_SENSOR_Init+0x130>
 80097bc:	07f2      	lsls	r2, r6, #31
 80097be:	f57f af72 	bpl.w	80096a6 <IKS01A3_ENV_SENSOR_Init+0x10e>
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 80097c2:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80097c6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80097ca:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
 80097ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	4798      	blx	r3
 80097d4:	2800      	cmp	r0, #0
 80097d6:	f43f af66 	beq.w	80096a6 <IKS01A3_ENV_SENSOR_Init+0x10e>
        return BSP_ERROR_COMPONENT_FAILURE;
 80097da:	f06f 0004 	mvn.w	r0, #4
 80097de:	e72e      	b.n	800963e <IKS01A3_ENV_SENSOR_Init+0xa6>
        component_functions |= ENV_PRESSURE;
 80097e0:	f046 0602 	orr.w	r6, r6, #2
    if (((Functions & function) == function) && ((component_functions & function) == function))
 80097e4:	f1b8 0f00 	cmp.w	r8, #0
 80097e8:	f43f af6e 	beq.w	80096c8 <IKS01A3_ENV_SENSOR_Init+0x130>
 80097ec:	e7e6      	b.n	80097bc <IKS01A3_ENV_SENSOR_Init+0x224>
        component_functions |= ENV_PRESSURE;
 80097ee:	f046 0602 	orr.w	r6, r6, #2
    if (((Functions & function) == function) && ((component_functions & function) == function))
 80097f2:	f1b8 0f00 	cmp.w	r8, #0
 80097f6:	f43f af56 	beq.w	80096a6 <IKS01A3_ENV_SENSOR_Init+0x10e>
 80097fa:	e7df      	b.n	80097bc <IKS01A3_ENV_SENSOR_Init+0x224>
 80097fc:	0771      	lsls	r1, r6, #29
 80097fe:	f57f af67 	bpl.w	80096d0 <IKS01A3_ENV_SENSOR_Init+0x138>
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 8009802:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8009806:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800980a:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
 800980e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	4798      	blx	r3
 8009814:	2800      	cmp	r0, #0
 8009816:	f43f af5b 	beq.w	80096d0 <IKS01A3_ENV_SENSOR_Init+0x138>
 800981a:	e7de      	b.n	80097da <IKS01A3_ENV_SENSOR_Init+0x242>
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800981c:	f06f 0006 	mvn.w	r0, #6
 8009820:	e70d      	b.n	800963e <IKS01A3_ENV_SENSOR_Init+0xa6>
 8009822:	bf00      	nop
 8009824:	080018f9 	.word	0x080018f9
 8009828:	20001964 	.word	0x20001964
 800982c:	080017f1 	.word	0x080017f1
 8009830:	0800186d 	.word	0x0800186d
 8009834:	08001835 	.word	0x08001835
 8009838:	080018a5 	.word	0x080018a5
 800983c:	20007e34 	.word	0x20007e34
 8009840:	200000e4 	.word	0x200000e4
 8009844:	200000bc 	.word	0x200000bc
 8009848:	200000d0 	.word	0x200000d0
 800984c:	20000044 	.word	0x20000044
 8009850:	2000001c 	.word	0x2000001c
 8009854:	20000030 	.word	0x20000030

08009858 <IKS01A3_ENV_SENSOR_GetCapabilities>:
  if (Instance >= IKS01A3_ENV_INSTANCES_NBR)
 8009858:	2801      	cmp	r0, #1
 800985a:	d80e      	bhi.n	800987a <IKS01A3_ENV_SENSOR_GetCapabilities+0x22>
{
 800985c:	b508      	push	{r3, lr}
  else if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], Capabilities) != BSP_ERROR_NONE)
 800985e:	4b08      	ldr	r3, [pc, #32]	; (8009880 <IKS01A3_ENV_SENSOR_GetCapabilities+0x28>)
 8009860:	4a08      	ldr	r2, [pc, #32]	; (8009884 <IKS01A3_ENV_SENSOR_GetCapabilities+0x2c>)
 8009862:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8009866:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 800986a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800986c:	68db      	ldr	r3, [r3, #12]
 800986e:	4798      	blx	r3
 8009870:	2800      	cmp	r0, #0
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009872:	bf18      	it	ne
 8009874:	f06f 0006 	mvnne.w	r0, #6
}
 8009878:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800987a:	f06f 0001 	mvn.w	r0, #1
}
 800987e:	4770      	bx	lr
 8009880:	20001964 	.word	0x20001964
 8009884:	20007e34 	.word	0x20007e34

08009888 <IKS01A3_ENV_SENSOR_GetValue>:
  if (Instance >= IKS01A3_ENV_INSTANCES_NBR)
 8009888:	2801      	cmp	r0, #1
 800988a:	d81c      	bhi.n	80098c6 <IKS01A3_ENV_SENSOR_GetValue+0x3e>
{
 800988c:	b538      	push	{r3, r4, r5, lr}
    if ((EnvCtx[Instance].Functions & Function) == Function)
 800988e:	4d11      	ldr	r5, [pc, #68]	; (80098d4 <IKS01A3_ENV_SENSOR_GetValue+0x4c>)
 8009890:	eb05 0380 	add.w	r3, r5, r0, lsl #2
 8009894:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8009896:	400c      	ands	r4, r1
 8009898:	428c      	cmp	r4, r1
 800989a:	d117      	bne.n	80098cc <IKS01A3_ENV_SENSOR_GetValue+0x44>
 800989c:	4611      	mov	r1, r2
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetValue(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 800989e:	4a0e      	ldr	r2, [pc, #56]	; (80098d8 <IKS01A3_ENV_SENSOR_GetValue+0x50>)
 80098a0:	4603      	mov	r3, r0
 80098a2:	480e      	ldr	r0, [pc, #56]	; (80098dc <IKS01A3_ENV_SENSOR_GetValue+0x54>)
 80098a4:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 80098a8:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80098ac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80098b0:	4413      	add	r3, r2
 80098b2:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80098b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098b8:	691b      	ldr	r3, [r3, #16]
 80098ba:	4798      	blx	r3
 80098bc:	2800      	cmp	r0, #0
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80098be:	bf18      	it	ne
 80098c0:	f06f 0004 	mvnne.w	r0, #4
}
 80098c4:	bd38      	pop	{r3, r4, r5, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 80098c6:	f06f 0001 	mvn.w	r0, #1
}
 80098ca:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 80098cc:	f06f 0001 	mvn.w	r0, #1
}
 80098d0:	bd38      	pop	{r3, r4, r5, pc}
 80098d2:	bf00      	nop
 80098d4:	20001964 	.word	0x20001964
 80098d8:	08022930 	.word	0x08022930
 80098dc:	20007e34 	.word	0x20007e34

080098e0 <IKS01A3_MOTION_SENSOR_Init>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A3_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 80098e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t function = MOTION_GYRO;
  uint32_t i;
  uint32_t component_functions = 0;
  IKS01A3_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 80098e4:	2801      	cmp	r0, #1
{
 80098e6:	b090      	sub	sp, #64	; 0x40
 80098e8:	4606      	mov	r6, r0
 80098ea:	460d      	mov	r5, r1
  switch (Instance)
 80098ec:	f000 80d4 	beq.w	8009a98 <IKS01A3_MOTION_SENSOR_Init+0x1b8>
 80098f0:	f0c0 8084 	bcc.w	80099fc <IKS01A3_MOTION_SENSOR_Init+0x11c>
 80098f4:	2802      	cmp	r0, #2
 80098f6:	d17c      	bne.n	80099f2 <IKS01A3_MOTION_SENSOR_Init+0x112>
  int32_t                 ret = BSP_ERROR_NONE;

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
  io_ctx.Address     = LIS2MDL_I2C_ADD;
  io_ctx.Init        = IKS01A3_I2C_Init;
 80098f8:	4bac      	ldr	r3, [pc, #688]	; (8009bac <IKS01A3_MOTION_SENSOR_Init+0x2cc>)
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
  io_ctx.GetTick     = IKS01A3_GetTick;

  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 80098fa:	4cad      	ldr	r4, [pc, #692]	; (8009bb0 <IKS01A3_MOTION_SENSOR_Init+0x2d0>)
  io_ctx.Init        = IKS01A3_I2C_Init;
 80098fc:	9302      	str	r3, [sp, #8]
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
 80098fe:	2200      	movs	r2, #0
  io_ctx.Address     = LIS2MDL_I2C_ADD;
 8009900:	233d      	movs	r3, #61	; 0x3d
  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 8009902:	f104 09a0 	add.w	r9, r4, #160	; 0xa0
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
 8009906:	9204      	str	r2, [sp, #16]
  io_ctx.Address     = LIS2MDL_I2C_ADD;
 8009908:	f88d 3014 	strb.w	r3, [sp, #20]
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800990c:	4aa9      	ldr	r2, [pc, #676]	; (8009bb4 <IKS01A3_MOTION_SENSOR_Init+0x2d4>)
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800990e:	4baa      	ldr	r3, [pc, #680]	; (8009bb8 <IKS01A3_MOTION_SENSOR_Init+0x2d8>)
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8009910:	9203      	str	r2, [sp, #12]
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8009912:	9307      	str	r3, [sp, #28]
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8009914:	4aa9      	ldr	r2, [pc, #676]	; (8009bbc <IKS01A3_MOTION_SENSOR_Init+0x2dc>)
  io_ctx.GetTick     = IKS01A3_GetTick;
 8009916:	4baa      	ldr	r3, [pc, #680]	; (8009bc0 <IKS01A3_MOTION_SENSOR_Init+0x2e0>)
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8009918:	9206      	str	r2, [sp, #24]
  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 800991a:	4648      	mov	r0, r9
 800991c:	a902      	add	r1, sp, #8
  io_ctx.GetTick     = IKS01A3_GetTick;
 800991e:	9308      	str	r3, [sp, #32]
  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 8009920:	f7fc fdb6 	bl	8006490 <LIS2MDL_RegisterBusIO>
 8009924:	2800      	cmp	r0, #0
 8009926:	f040 80b2 	bne.w	8009a8e <IKS01A3_MOTION_SENSOR_Init+0x1ae>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (LIS2MDL_ReadID(&lis2mdl_obj_0, &id) != LIS2MDL_OK)
 800992a:	f10d 0107 	add.w	r1, sp, #7
 800992e:	4648      	mov	r0, r9
 8009930:	f7fc fcd8 	bl	80062e4 <LIS2MDL_ReadID>
 8009934:	2800      	cmp	r0, #0
 8009936:	f040 80aa 	bne.w	8009a8e <IKS01A3_MOTION_SENSOR_Init+0x1ae>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (id != LIS2MDL_ID)
 800993a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800993e:	2b40      	cmp	r3, #64	; 0x40
 8009940:	f040 80a5 	bne.w	8009a8e <IKS01A3_MOTION_SENSOR_Init+0x1ae>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    (void)LIS2MDL_GetCapabilities(&lis2mdl_obj_0, &cap);
 8009944:	f10d 0824 	add.w	r8, sp, #36	; 0x24
 8009948:	4641      	mov	r1, r8
 800994a:	4648      	mov	r0, r9
 800994c:	f7fc fc62 	bl	8006214 <LIS2MDL_GetCapabilities>
    MotionCtx[IKS01A3_LIS2MDL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8009950:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 8009954:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
 8009958:	f89d 1025 	ldrb.w	r1, [sp, #37]	; 0x25

    MotionCompObj[IKS01A3_LIS2MDL_0] = &lis2mdl_obj_0;
 800995c:	4f99      	ldr	r7, [pc, #612]	; (8009bc4 <IKS01A3_MOTION_SENSOR_Init+0x2e4>)
    MotionCtx[IKS01A3_LIS2MDL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800995e:	0093      	lsls	r3, r2, #2
 8009960:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
 8009964:	430b      	orrs	r3, r1
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2MDL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 8009966:	f015 0a04 	ands.w	sl, r5, #4
    MotionDrv[IKS01A3_LIS2MDL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;
 800996a:	4997      	ldr	r1, [pc, #604]	; (8009bc8 <IKS01A3_MOTION_SENSOR_Init+0x2e8>)
    MotionCtx[IKS01A3_LIS2MDL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800996c:	63a3      	str	r3, [r4, #56]	; 0x38
    MotionCompObj[IKS01A3_LIS2MDL_0] = &lis2mdl_obj_0;
 800996e:	f8c7 9008 	str.w	r9, [r7, #8]
    MotionDrv[IKS01A3_LIS2MDL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;
 8009972:	6461      	str	r1, [r4, #68]	; 0x44
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 8009974:	f040 810e 	bne.w	8009b94 <IKS01A3_MOTION_SENSOR_Init+0x2b4>
      else
      {
        ret = BSP_ERROR_NONE;
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 8009978:	07ab      	lsls	r3, r5, #30
 800997a:	f100 8088 	bmi.w	8009a8e <IKS01A3_MOTION_SENSOR_Init+0x1ae>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 800997e:	07e8      	lsls	r0, r5, #31
 8009980:	f100 8085 	bmi.w	8009a8e <IKS01A3_MOTION_SENSOR_Init+0x1ae>
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8009984:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009986:	68b8      	ldr	r0, [r7, #8]
 8009988:	68db      	ldr	r3, [r3, #12]
 800998a:	4641      	mov	r1, r8
 800998c:	4798      	blx	r3
 800998e:	2800      	cmp	r0, #0
 8009990:	f040 8165 	bne.w	8009c5e <IKS01A3_MOTION_SENSOR_Init+0x37e>
      if (cap.Acc == 1U)
 8009994:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
      if (cap.Gyro == 1U)
 8009998:	f89d c025 	ldrb.w	ip, [sp, #37]	; 0x25
      if (cap.Magneto == 1U)
 800999c:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
      if (cap.Acc == 1U)
 80099a0:	2b01      	cmp	r3, #1
 80099a2:	bf1d      	ittte	ne
 80099a4:	2505      	movne	r5, #5
 80099a6:	2301      	movne	r3, #1
 80099a8:	2004      	movne	r0, #4
 80099aa:	2507      	moveq	r5, #7
 80099ac:	bf09      	itett	eq
 80099ae:	2303      	moveq	r3, #3
 80099b0:	2100      	movne	r1, #0
 80099b2:	2006      	moveq	r0, #6
 80099b4:	2102      	moveq	r1, #2
      if (cap.Gyro == 1U)
 80099b6:	f1bc 0f01 	cmp.w	ip, #1
 80099ba:	bf1c      	itt	ne
 80099bc:	4605      	movne	r5, r0
 80099be:	460b      	movne	r3, r1
      if (cap.Magneto == 1U)
 80099c0:	2a01      	cmp	r2, #1
 80099c2:	bf18      	it	ne
 80099c4:	461d      	movne	r5, r3
    if (((Functions & function) == function) && ((component_functions & function) == function))
 80099c6:	f1ba 0f00 	cmp.w	sl, #0
 80099ca:	f000 80c9 	beq.w	8009b60 <IKS01A3_MOTION_SENSOR_Init+0x280>
 80099ce:	0769      	lsls	r1, r5, #29
 80099d0:	f140 80c6 	bpl.w	8009b60 <IKS01A3_MOTION_SENSOR_Init+0x280>
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 80099d4:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 80099d8:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80099dc:	f857 0026 	ldr.w	r0, [r7, r6, lsl #2]
 80099e0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	4798      	blx	r3
 80099e6:	2800      	cmp	r0, #0
 80099e8:	f000 80ba 	beq.w	8009b60 <IKS01A3_MOTION_SENSOR_Init+0x280>
        return BSP_ERROR_COMPONENT_FAILURE;
 80099ec:	f06f 0004 	mvn.w	r0, #4
 80099f0:	e001      	b.n	80099f6 <IKS01A3_MOTION_SENSOR_Init+0x116>
      ret = BSP_ERROR_WRONG_PARAM;
 80099f2:	f06f 0001 	mvn.w	r0, #1
}
 80099f6:	b010      	add	sp, #64	; 0x40
 80099f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  io_ctx.Init        = IKS01A3_I2C_Init;
 80099fc:	4b6b      	ldr	r3, [pc, #428]	; (8009bac <IKS01A3_MOTION_SENSOR_Init+0x2cc>)
  if (LSM6DSO_RegisterBusIO(&lsm6dso_obj_0, &io_ctx) != LSM6DSO_OK)
 80099fe:	4c6c      	ldr	r4, [pc, #432]	; (8009bb0 <IKS01A3_MOTION_SENSOR_Init+0x2d0>)
  io_ctx.Init        = IKS01A3_I2C_Init;
 8009a00:	9302      	str	r3, [sp, #8]
  io_ctx.BusType     = LSM6DSO_I2C_BUS; /* I2C */
 8009a02:	2200      	movs	r2, #0
  io_ctx.Address     = LSM6DSO_I2C_ADD_H;
 8009a04:	23d7      	movs	r3, #215	; 0xd7
  io_ctx.BusType     = LSM6DSO_I2C_BUS; /* I2C */
 8009a06:	9204      	str	r2, [sp, #16]
  io_ctx.Address     = LSM6DSO_I2C_ADD_H;
 8009a08:	f88d 3014 	strb.w	r3, [sp, #20]
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8009a0c:	4a69      	ldr	r2, [pc, #420]	; (8009bb4 <IKS01A3_MOTION_SENSOR_Init+0x2d4>)
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8009a0e:	4b6a      	ldr	r3, [pc, #424]	; (8009bb8 <IKS01A3_MOTION_SENSOR_Init+0x2d8>)
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8009a10:	9203      	str	r2, [sp, #12]
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8009a12:	9307      	str	r3, [sp, #28]
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8009a14:	4a69      	ldr	r2, [pc, #420]	; (8009bbc <IKS01A3_MOTION_SENSOR_Init+0x2dc>)
  io_ctx.GetTick     = IKS01A3_GetTick;
 8009a16:	4b6a      	ldr	r3, [pc, #424]	; (8009bc0 <IKS01A3_MOTION_SENSOR_Init+0x2e0>)
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8009a18:	9206      	str	r2, [sp, #24]
  if (LSM6DSO_RegisterBusIO(&lsm6dso_obj_0, &io_ctx) != LSM6DSO_OK)
 8009a1a:	4620      	mov	r0, r4
 8009a1c:	a902      	add	r1, sp, #8
  io_ctx.GetTick     = IKS01A3_GetTick;
 8009a1e:	9308      	str	r3, [sp, #32]
  if (LSM6DSO_RegisterBusIO(&lsm6dso_obj_0, &io_ctx) != LSM6DSO_OK)
 8009a20:	f7fd ff4a 	bl	80078b8 <LSM6DSO_RegisterBusIO>
 8009a24:	bb98      	cbnz	r0, 8009a8e <IKS01A3_MOTION_SENSOR_Init+0x1ae>
  else if (LSM6DSO_ReadID(&lsm6dso_obj_0, &id) != LSM6DSO_OK)
 8009a26:	f10d 0107 	add.w	r1, sp, #7
 8009a2a:	4620      	mov	r0, r4
 8009a2c:	f7fd fafa 	bl	8007024 <LSM6DSO_ReadID>
 8009a30:	bb68      	cbnz	r0, 8009a8e <IKS01A3_MOTION_SENSOR_Init+0x1ae>
  else if (id != LSM6DSO_ID)
 8009a32:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009a36:	2b6c      	cmp	r3, #108	; 0x6c
 8009a38:	d129      	bne.n	8009a8e <IKS01A3_MOTION_SENSOR_Init+0x1ae>
    (void)LSM6DSO_GetCapabilities(&lsm6dso_obj_0, &cap);
 8009a3a:	f10d 0824 	add.w	r8, sp, #36	; 0x24
 8009a3e:	4641      	mov	r1, r8
 8009a40:	4620      	mov	r0, r4
 8009a42:	f7fd fa61 	bl	8006f08 <LSM6DSO_GetCapabilities>
    MotionCtx[IKS01A3_LSM6DSO_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8009a46:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
 8009a4a:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
 8009a4e:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
    MotionCompObj[IKS01A3_LSM6DSO_0] = &lsm6dso_obj_0;
 8009a52:	4f5c      	ldr	r7, [pc, #368]	; (8009bc4 <IKS01A3_MOTION_SENSOR_Init+0x2e4>)
    MotionDrv[IKS01A3_LSM6DSO_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO_COMMON_Driver;
 8009a54:	495d      	ldr	r1, [pc, #372]	; (8009bcc <IKS01A3_MOTION_SENSOR_Init+0x2ec>)
    MotionCompObj[IKS01A3_LSM6DSO_0] = &lsm6dso_obj_0;
 8009a56:	603c      	str	r4, [r7, #0]
    MotionCtx[IKS01A3_LSM6DSO_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8009a58:	009b      	lsls	r3, r3, #2
 8009a5a:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
 8009a5e:	4313      	orrs	r3, r2
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8009a60:	f015 0901 	ands.w	r9, r5, #1
    MotionCtx[IKS01A3_LSM6DSO_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8009a64:	6323      	str	r3, [r4, #48]	; 0x30
    MotionDrv[IKS01A3_LSM6DSO_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO_COMMON_Driver;
 8009a66:	63e1      	str	r1, [r4, #60]	; 0x3c
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8009a68:	f040 8088 	bne.w	8009b7c <IKS01A3_MOTION_SENSOR_Init+0x29c>
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8009a6c:	f015 0a02 	ands.w	sl, r5, #2
 8009a70:	d00a      	beq.n	8009a88 <IKS01A3_MOTION_SENSOR_Init+0x1a8>
 8009a72:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8009a76:	2b01      	cmp	r3, #1
 8009a78:	d106      	bne.n	8009a88 <IKS01A3_MOTION_SENSOR_Init+0x1a8>
      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 8009a7a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8009a7c:	4a54      	ldr	r2, [pc, #336]	; (8009bd0 <IKS01A3_MOTION_SENSOR_Init+0x2f0>)
      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	6838      	ldr	r0, [r7, #0]
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8009a82:	64e2      	str	r2, [r4, #76]	; 0x4c
      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 8009a84:	4798      	blx	r3
 8009a86:	b910      	cbnz	r0, 8009a8e <IKS01A3_MOTION_SENSOR_Init+0x1ae>
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8009a88:	0768      	lsls	r0, r5, #29
 8009a8a:	f140 80ab 	bpl.w	8009be4 <IKS01A3_MOTION_SENSOR_Init+0x304>
        return BSP_ERROR_NO_INIT;
 8009a8e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8009a92:	b010      	add	sp, #64	; 0x40
 8009a94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  io_ctx.Init        = IKS01A3_I2C_Init;
 8009a98:	4b44      	ldr	r3, [pc, #272]	; (8009bac <IKS01A3_MOTION_SENSOR_Init+0x2cc>)
  if (LIS2DW12_RegisterBusIO(&lis2dw12_obj_0, &io_ctx) != LIS2DW12_OK)
 8009a9a:	4c45      	ldr	r4, [pc, #276]	; (8009bb0 <IKS01A3_MOTION_SENSOR_Init+0x2d0>)
  io_ctx.Init        = IKS01A3_I2C_Init;
 8009a9c:	9302      	str	r3, [sp, #8]
  io_ctx.BusType     = LIS2DW12_I2C_BUS; /* I2C */
 8009a9e:	2200      	movs	r2, #0
  io_ctx.Address     = LIS2DW12_I2C_ADD_H;
 8009aa0:	2333      	movs	r3, #51	; 0x33
  if (LIS2DW12_RegisterBusIO(&lis2dw12_obj_0, &io_ctx) != LIS2DW12_OK)
 8009aa2:	f104 096c 	add.w	r9, r4, #108	; 0x6c
  io_ctx.BusType     = LIS2DW12_I2C_BUS; /* I2C */
 8009aa6:	9204      	str	r2, [sp, #16]
  io_ctx.Address     = LIS2DW12_I2C_ADD_H;
 8009aa8:	f88d 3014 	strb.w	r3, [sp, #20]
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8009aac:	4a41      	ldr	r2, [pc, #260]	; (8009bb4 <IKS01A3_MOTION_SENSOR_Init+0x2d4>)
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8009aae:	4b42      	ldr	r3, [pc, #264]	; (8009bb8 <IKS01A3_MOTION_SENSOR_Init+0x2d8>)
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8009ab0:	9203      	str	r2, [sp, #12]
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8009ab2:	9307      	str	r3, [sp, #28]
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8009ab4:	4a41      	ldr	r2, [pc, #260]	; (8009bbc <IKS01A3_MOTION_SENSOR_Init+0x2dc>)
  io_ctx.GetTick     = IKS01A3_GetTick;
 8009ab6:	4b42      	ldr	r3, [pc, #264]	; (8009bc0 <IKS01A3_MOTION_SENSOR_Init+0x2e0>)
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8009ab8:	9206      	str	r2, [sp, #24]
  if (LIS2DW12_RegisterBusIO(&lis2dw12_obj_0, &io_ctx) != LIS2DW12_OK)
 8009aba:	4648      	mov	r0, r9
 8009abc:	a902      	add	r1, sp, #8
  io_ctx.GetTick     = IKS01A3_GetTick;
 8009abe:	9308      	str	r3, [sp, #32]
  if (LIS2DW12_RegisterBusIO(&lis2dw12_obj_0, &io_ctx) != LIS2DW12_OK)
 8009ac0:	f7fb ff26 	bl	8005910 <LIS2DW12_RegisterBusIO>
 8009ac4:	2800      	cmp	r0, #0
 8009ac6:	d1e2      	bne.n	8009a8e <IKS01A3_MOTION_SENSOR_Init+0x1ae>
  else if (LIS2DW12_ReadID(&lis2dw12_obj_0, &id) != LIS2DW12_OK)
 8009ac8:	f10d 0107 	add.w	r1, sp, #7
 8009acc:	4648      	mov	r0, r9
 8009ace:	f7fb fb27 	bl	8005120 <LIS2DW12_ReadID>
 8009ad2:	2800      	cmp	r0, #0
 8009ad4:	d1db      	bne.n	8009a8e <IKS01A3_MOTION_SENSOR_Init+0x1ae>
  else if (id != LIS2DW12_ID)
 8009ad6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009ada:	2b44      	cmp	r3, #68	; 0x44
 8009adc:	d1d7      	bne.n	8009a8e <IKS01A3_MOTION_SENSOR_Init+0x1ae>
    (void)LIS2DW12_GetCapabilities(&lis2dw12_obj_0, &cap);
 8009ade:	f10d 0824 	add.w	r8, sp, #36	; 0x24
 8009ae2:	4641      	mov	r1, r8
 8009ae4:	4648      	mov	r0, r9
 8009ae6:	f7fb fab1 	bl	800504c <LIS2DW12_GetCapabilities>
    MotionCtx[IKS01A3_LIS2DW12_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8009aea:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
 8009aee:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
 8009af2:	f89d 1025 	ldrb.w	r1, [sp, #37]	; 0x25
    MotionCompObj[IKS01A3_LIS2DW12_0] = &lis2dw12_obj_0;
 8009af6:	4f33      	ldr	r7, [pc, #204]	; (8009bc4 <IKS01A3_MOTION_SENSOR_Init+0x2e4>)
    MotionCtx[IKS01A3_LIS2DW12_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8009af8:	0053      	lsls	r3, r2, #1
 8009afa:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
 8009afe:	430b      	orrs	r3, r1
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8009b00:	f015 0a02 	ands.w	sl, r5, #2
    MotionDrv[IKS01A3_LIS2DW12_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2DW12_COMMON_Driver;
 8009b04:	4933      	ldr	r1, [pc, #204]	; (8009bd4 <IKS01A3_MOTION_SENSOR_Init+0x2f4>)
    MotionCtx[IKS01A3_LIS2DW12_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8009b06:	6363      	str	r3, [r4, #52]	; 0x34
    MotionCompObj[IKS01A3_LIS2DW12_0] = &lis2dw12_obj_0;
 8009b08:	f8c7 9004 	str.w	r9, [r7, #4]
    MotionDrv[IKS01A3_LIS2DW12_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2DW12_COMMON_Driver;
 8009b0c:	6421      	str	r1, [r4, #64]	; 0x40
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8009b0e:	d12b      	bne.n	8009b68 <IKS01A3_MOTION_SENSOR_Init+0x288>
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8009b10:	07e9      	lsls	r1, r5, #31
 8009b12:	d4bc      	bmi.n	8009a8e <IKS01A3_MOTION_SENSOR_Init+0x1ae>
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8009b14:	076a      	lsls	r2, r5, #29
 8009b16:	d4ba      	bmi.n	8009a8e <IKS01A3_MOTION_SENSOR_Init+0x1ae>
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8009b18:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	68db      	ldr	r3, [r3, #12]
 8009b1e:	4641      	mov	r1, r8
 8009b20:	4798      	blx	r3
 8009b22:	2800      	cmp	r0, #0
 8009b24:	f040 809b 	bne.w	8009c5e <IKS01A3_MOTION_SENSOR_Init+0x37e>
      if (cap.Acc == 1U)
 8009b28:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
      if (cap.Gyro == 1U)
 8009b2c:	f89d c025 	ldrb.w	ip, [sp, #37]	; 0x25
      if (cap.Magneto == 1U)
 8009b30:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
      if (cap.Acc == 1U)
 8009b34:	2b01      	cmp	r3, #1
 8009b36:	bf1b      	ittet	ne
 8009b38:	2301      	movne	r3, #1
 8009b3a:	2505      	movne	r5, #5
 8009b3c:	2303      	moveq	r3, #3
 8009b3e:	2104      	movne	r1, #4
 8009b40:	bf09      	itett	eq
 8009b42:	2507      	moveq	r5, #7
 8009b44:	2000      	movne	r0, #0
 8009b46:	2106      	moveq	r1, #6
 8009b48:	2002      	moveq	r0, #2
      if (cap.Gyro == 1U)
 8009b4a:	f1bc 0f01 	cmp.w	ip, #1
 8009b4e:	bf1c      	itt	ne
 8009b50:	4603      	movne	r3, r0
 8009b52:	460d      	movne	r5, r1
      if (cap.Magneto == 1U)
 8009b54:	2a01      	cmp	r2, #1
 8009b56:	bf18      	it	ne
 8009b58:	461d      	movne	r5, r3
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8009b5a:	f1ba 0f00 	cmp.w	sl, #0
 8009b5e:	d170      	bne.n	8009c42 <IKS01A3_MOTION_SENSOR_Init+0x362>
 8009b60:	2000      	movs	r0, #0
}
 8009b62:	b010      	add	sp, #64	; 0x40
 8009b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8009b68:	2a01      	cmp	r2, #1
 8009b6a:	d1d1      	bne.n	8009b10 <IKS01A3_MOTION_SENSOR_Init+0x230>
      MotionFuncDrv[IKS01A3_LIS2DW12_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8009b6c:	4a1a      	ldr	r2, [pc, #104]	; (8009bd8 <IKS01A3_MOTION_SENSOR_Init+0x2f8>)
      if (MotionDrv[IKS01A3_LIS2DW12_0]->Init(MotionCompObj[IKS01A3_LIS2DW12_0]) != LIS2DW12_OK)
 8009b6e:	680b      	ldr	r3, [r1, #0]
      MotionFuncDrv[IKS01A3_LIS2DW12_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8009b70:	65a2      	str	r2, [r4, #88]	; 0x58
      if (MotionDrv[IKS01A3_LIS2DW12_0]->Init(MotionCompObj[IKS01A3_LIS2DW12_0]) != LIS2DW12_OK)
 8009b72:	4648      	mov	r0, r9
 8009b74:	4798      	blx	r3
 8009b76:	2800      	cmp	r0, #0
 8009b78:	d189      	bne.n	8009a8e <IKS01A3_MOTION_SENSOR_Init+0x1ae>
 8009b7a:	e7c9      	b.n	8009b10 <IKS01A3_MOTION_SENSOR_Init+0x230>
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8009b7c:	2a01      	cmp	r2, #1
 8009b7e:	f47f af75 	bne.w	8009a6c <IKS01A3_MOTION_SENSOR_Init+0x18c>
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSO_GYRO_Driver;
 8009b82:	4a16      	ldr	r2, [pc, #88]	; (8009bdc <IKS01A3_MOTION_SENSOR_Init+0x2fc>)
      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 8009b84:	680b      	ldr	r3, [r1, #0]
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSO_GYRO_Driver;
 8009b86:	64a2      	str	r2, [r4, #72]	; 0x48
      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 8009b88:	4620      	mov	r0, r4
 8009b8a:	4798      	blx	r3
 8009b8c:	2800      	cmp	r0, #0
 8009b8e:	f47f af7e 	bne.w	8009a8e <IKS01A3_MOTION_SENSOR_Init+0x1ae>
 8009b92:	e76b      	b.n	8009a6c <IKS01A3_MOTION_SENSOR_Init+0x18c>
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 8009b94:	2a01      	cmp	r2, #1
 8009b96:	f47f aeef 	bne.w	8009978 <IKS01A3_MOTION_SENSOR_Init+0x98>
      MotionFuncDrv[IKS01A3_LIS2MDL_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8009b9a:	4a11      	ldr	r2, [pc, #68]	; (8009be0 <IKS01A3_MOTION_SENSOR_Init+0x300>)
      if (MotionDrv[IKS01A3_LIS2MDL_0]->Init(MotionCompObj[IKS01A3_LIS2MDL_0]) != LIS2MDL_OK)
 8009b9c:	680b      	ldr	r3, [r1, #0]
      MotionFuncDrv[IKS01A3_LIS2MDL_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8009b9e:	66a2      	str	r2, [r4, #104]	; 0x68
      if (MotionDrv[IKS01A3_LIS2MDL_0]->Init(MotionCompObj[IKS01A3_LIS2MDL_0]) != LIS2MDL_OK)
 8009ba0:	4648      	mov	r0, r9
 8009ba2:	4798      	blx	r3
 8009ba4:	2800      	cmp	r0, #0
 8009ba6:	f47f af72 	bne.w	8009a8e <IKS01A3_MOTION_SENSOR_Init+0x1ae>
 8009baa:	e6e5      	b.n	8009978 <IKS01A3_MOTION_SENSOR_Init+0x98>
 8009bac:	080018f9 	.word	0x080018f9
 8009bb0:	200019e4 	.word	0x200019e4
 8009bb4:	080017f1 	.word	0x080017f1
 8009bb8:	0800186d 	.word	0x0800186d
 8009bbc:	08001835 	.word	0x08001835
 8009bc0:	080018a5 	.word	0x080018a5
 8009bc4:	20007e3c 	.word	0x20007e3c
 8009bc8:	200000ac 	.word	0x200000ac
 8009bcc:	2000013c 	.word	0x2000013c
 8009bd0:	20000118 	.word	0x20000118
 8009bd4:	20000078 	.word	0x20000078
 8009bd8:	20000054 	.word	0x20000054
 8009bdc:	200000f4 	.word	0x200000f4
 8009be0:	20000088 	.word	0x20000088
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8009be4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009be6:	6838      	ldr	r0, [r7, #0]
 8009be8:	68db      	ldr	r3, [r3, #12]
 8009bea:	4641      	mov	r1, r8
 8009bec:	4798      	blx	r3
 8009bee:	2800      	cmp	r0, #0
 8009bf0:	d135      	bne.n	8009c5e <IKS01A3_MOTION_SENSOR_Init+0x37e>
      if (cap.Acc == 1U)
 8009bf2:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
      if (cap.Gyro == 1U)
 8009bf6:	f89d c025 	ldrb.w	ip, [sp, #37]	; 0x25
      if (cap.Magneto == 1U)
 8009bfa:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
  uint32_t component_functions = 0;
 8009bfe:	2b01      	cmp	r3, #1
 8009c00:	bf1f      	itttt	ne
 8009c02:	2505      	movne	r5, #5
 8009c04:	2301      	movne	r3, #1
 8009c06:	4630      	movne	r0, r6
 8009c08:	2104      	movne	r1, #4
 8009c0a:	bf01      	itttt	eq
 8009c0c:	2507      	moveq	r5, #7
 8009c0e:	2303      	moveq	r3, #3
 8009c10:	2002      	moveq	r0, #2
 8009c12:	2106      	moveq	r1, #6
      if (cap.Gyro == 1U)
 8009c14:	f1bc 0f01 	cmp.w	ip, #1
 8009c18:	bf1c      	itt	ne
 8009c1a:	4603      	movne	r3, r0
 8009c1c:	460d      	movne	r5, r1
      if (cap.Magneto == 1U)
 8009c1e:	2a01      	cmp	r2, #1
 8009c20:	bf18      	it	ne
 8009c22:	461d      	movne	r5, r3
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8009c24:	f1b9 0f00 	cmp.w	r9, #0
 8009c28:	d097      	beq.n	8009b5a <IKS01A3_MOTION_SENSOR_Init+0x27a>
 8009c2a:	07ea      	lsls	r2, r5, #31
 8009c2c:	d595      	bpl.n	8009b5a <IKS01A3_MOTION_SENSOR_Init+0x27a>
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8009c2e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8009c30:	6838      	ldr	r0, [r7, #0]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	4798      	blx	r3
 8009c36:	2800      	cmp	r0, #0
 8009c38:	f47f aed8 	bne.w	80099ec <IKS01A3_MOTION_SENSOR_Init+0x10c>
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8009c3c:	f1ba 0f00 	cmp.w	sl, #0
 8009c40:	d08e      	beq.n	8009b60 <IKS01A3_MOTION_SENSOR_Init+0x280>
 8009c42:	07ab      	lsls	r3, r5, #30
 8009c44:	d58c      	bpl.n	8009b60 <IKS01A3_MOTION_SENSOR_Init+0x280>
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8009c46:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8009c4a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8009c4e:	f857 0026 	ldr.w	r0, [r7, r6, lsl #2]
 8009c52:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	4798      	blx	r3
 8009c58:	2800      	cmp	r0, #0
 8009c5a:	d081      	beq.n	8009b60 <IKS01A3_MOTION_SENSOR_Init+0x280>
 8009c5c:	e6c6      	b.n	80099ec <IKS01A3_MOTION_SENSOR_Init+0x10c>
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8009c5e:	f06f 0006 	mvn.w	r0, #6
 8009c62:	e6c8      	b.n	80099f6 <IKS01A3_MOTION_SENSOR_Init+0x116>

08009c64 <IKS01A3_MOTION_SENSOR_GetCapabilities>:
  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8009c64:	2802      	cmp	r0, #2
 8009c66:	d80e      	bhi.n	8009c86 <IKS01A3_MOTION_SENSOR_GetCapabilities+0x22>
{
 8009c68:	b508      	push	{r3, lr}
  else if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], Capabilities) != BSP_ERROR_NONE)
 8009c6a:	4b08      	ldr	r3, [pc, #32]	; (8009c8c <IKS01A3_MOTION_SENSOR_GetCapabilities+0x28>)
 8009c6c:	4a08      	ldr	r2, [pc, #32]	; (8009c90 <IKS01A3_MOTION_SENSOR_GetCapabilities+0x2c>)
 8009c6e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8009c72:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8009c76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c78:	68db      	ldr	r3, [r3, #12]
 8009c7a:	4798      	blx	r3
 8009c7c:	2800      	cmp	r0, #0
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009c7e:	bf18      	it	ne
 8009c80:	f06f 0006 	mvnne.w	r0, #6
}
 8009c84:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8009c86:	f06f 0001 	mvn.w	r0, #1
}
 8009c8a:	4770      	bx	lr
 8009c8c:	200019e4 	.word	0x200019e4
 8009c90:	20007e3c 	.word	0x20007e3c

08009c94 <IKS01A3_MOTION_SENSOR_GetAxes>:
  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8009c94:	2802      	cmp	r0, #2
 8009c96:	d81c      	bhi.n	8009cd2 <IKS01A3_MOTION_SENSOR_GetAxes+0x3e>
{
 8009c98:	b538      	push	{r3, r4, r5, lr}
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8009c9a:	4d11      	ldr	r5, [pc, #68]	; (8009ce0 <IKS01A3_MOTION_SENSOR_GetAxes+0x4c>)
 8009c9c:	eb05 0380 	add.w	r3, r5, r0, lsl #2
 8009ca0:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8009ca2:	400c      	ands	r4, r1
 8009ca4:	428c      	cmp	r4, r1
 8009ca6:	d117      	bne.n	8009cd8 <IKS01A3_MOTION_SENSOR_GetAxes+0x44>
 8009ca8:	4611      	mov	r1, r2
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 8009caa:	4a0e      	ldr	r2, [pc, #56]	; (8009ce4 <IKS01A3_MOTION_SENSOR_GetAxes+0x50>)
 8009cac:	4603      	mov	r3, r0
 8009cae:	480e      	ldr	r0, [pc, #56]	; (8009ce8 <IKS01A3_MOTION_SENSOR_GetAxes+0x54>)
 8009cb0:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8009cb4:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8009cb8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8009cbc:	4413      	add	r3, r2
 8009cbe:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8009cc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009cc4:	69db      	ldr	r3, [r3, #28]
 8009cc6:	4798      	blx	r3
 8009cc8:	2800      	cmp	r0, #0
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009cca:	bf18      	it	ne
 8009ccc:	f06f 0004 	mvnne.w	r0, #4
}
 8009cd0:	bd38      	pop	{r3, r4, r5, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8009cd2:	f06f 0001 	mvn.w	r0, #1
}
 8009cd6:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 8009cd8:	f06f 0001 	mvn.w	r0, #1
}
 8009cdc:	bd38      	pop	{r3, r4, r5, pc}
 8009cde:	bf00      	nop
 8009ce0:	200019e4 	.word	0x200019e4
 8009ce4:	08022944 	.word	0x08022944
 8009ce8:	20007e3c 	.word	0x20007e3c

08009cec <IKS01A3_MOTION_SENSOR_GetOutputDataRate>:
  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8009cec:	2802      	cmp	r0, #2
 8009cee:	d81c      	bhi.n	8009d2a <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x3e>
{
 8009cf0:	b538      	push	{r3, r4, r5, lr}
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8009cf2:	4d11      	ldr	r5, [pc, #68]	; (8009d38 <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x4c>)
 8009cf4:	eb05 0380 	add.w	r3, r5, r0, lsl #2
 8009cf8:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8009cfa:	400c      	ands	r4, r1
 8009cfc:	428c      	cmp	r4, r1
 8009cfe:	d117      	bne.n	8009d30 <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x44>
 8009d00:	4611      	mov	r1, r2
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 8009d02:	4a0e      	ldr	r2, [pc, #56]	; (8009d3c <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x50>)
 8009d04:	4603      	mov	r3, r0
 8009d06:	480e      	ldr	r0, [pc, #56]	; (8009d40 <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x54>)
 8009d08:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8009d0c:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8009d10:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8009d14:	4413      	add	r3, r2
 8009d16:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8009d1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d1c:	68db      	ldr	r3, [r3, #12]
 8009d1e:	4798      	blx	r3
 8009d20:	2800      	cmp	r0, #0
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009d22:	bf18      	it	ne
 8009d24:	f06f 0004 	mvnne.w	r0, #4
}
 8009d28:	bd38      	pop	{r3, r4, r5, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8009d2a:	f06f 0001 	mvn.w	r0, #1
}
 8009d2e:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 8009d30:	f06f 0001 	mvn.w	r0, #1
}
 8009d34:	bd38      	pop	{r3, r4, r5, pc}
 8009d36:	bf00      	nop
 8009d38:	200019e4 	.word	0x200019e4
 8009d3c:	08022944 	.word	0x08022944
 8009d40:	20007e3c 	.word	0x20007e3c

08009d44 <IKS01A3_MOTION_SENSOR_SetOutputDataRate>:
  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8009d44:	2802      	cmp	r0, #2
 8009d46:	d81c      	bhi.n	8009d82 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x3e>
{
 8009d48:	b538      	push	{r3, r4, r5, lr}
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8009d4a:	4d11      	ldr	r5, [pc, #68]	; (8009d90 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x4c>)
 8009d4c:	eb05 0380 	add.w	r3, r5, r0, lsl #2
 8009d50:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8009d52:	400c      	ands	r4, r1
 8009d54:	428c      	cmp	r4, r1
 8009d56:	d117      	bne.n	8009d88 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x44>
 8009d58:	4611      	mov	r1, r2
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 8009d5a:	4a0e      	ldr	r2, [pc, #56]	; (8009d94 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x50>)
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	480e      	ldr	r0, [pc, #56]	; (8009d98 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x54>)
 8009d60:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8009d64:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8009d68:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8009d6c:	4413      	add	r3, r2
 8009d6e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8009d72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d74:	691b      	ldr	r3, [r3, #16]
 8009d76:	4798      	blx	r3
 8009d78:	2800      	cmp	r0, #0
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009d7a:	bf18      	it	ne
 8009d7c:	f06f 0004 	mvnne.w	r0, #4
}
 8009d80:	bd38      	pop	{r3, r4, r5, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8009d82:	f06f 0001 	mvn.w	r0, #1
}
 8009d86:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 8009d88:	f06f 0001 	mvn.w	r0, #1
}
 8009d8c:	bd38      	pop	{r3, r4, r5, pc}
 8009d8e:	bf00      	nop
 8009d90:	200019e4 	.word	0x200019e4
 8009d94:	08022944 	.word	0x08022944
 8009d98:	20007e3c 	.word	0x20007e3c

08009d9c <IKS01A3_MOTION_SENSOR_SetFullScale>:
  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8009d9c:	2802      	cmp	r0, #2
 8009d9e:	d81c      	bhi.n	8009dda <IKS01A3_MOTION_SENSOR_SetFullScale+0x3e>
{
 8009da0:	b538      	push	{r3, r4, r5, lr}
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8009da2:	4d11      	ldr	r5, [pc, #68]	; (8009de8 <IKS01A3_MOTION_SENSOR_SetFullScale+0x4c>)
 8009da4:	eb05 0380 	add.w	r3, r5, r0, lsl #2
 8009da8:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8009daa:	400c      	ands	r4, r1
 8009dac:	428c      	cmp	r4, r1
 8009dae:	d117      	bne.n	8009de0 <IKS01A3_MOTION_SENSOR_SetFullScale+0x44>
 8009db0:	4611      	mov	r1, r2
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetFullScale(MotionCompObj[Instance],
 8009db2:	4a0e      	ldr	r2, [pc, #56]	; (8009dec <IKS01A3_MOTION_SENSOR_SetFullScale+0x50>)
 8009db4:	4603      	mov	r3, r0
 8009db6:	480e      	ldr	r0, [pc, #56]	; (8009df0 <IKS01A3_MOTION_SENSOR_SetFullScale+0x54>)
 8009db8:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8009dbc:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8009dc0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8009dc4:	4413      	add	r3, r2
 8009dc6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8009dca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009dcc:	699b      	ldr	r3, [r3, #24]
 8009dce:	4798      	blx	r3
 8009dd0:	2800      	cmp	r0, #0
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009dd2:	bf18      	it	ne
 8009dd4:	f06f 0004 	mvnne.w	r0, #4
}
 8009dd8:	bd38      	pop	{r3, r4, r5, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8009dda:	f06f 0001 	mvn.w	r0, #1
}
 8009dde:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 8009de0:	f06f 0001 	mvn.w	r0, #1
}
 8009de4:	bd38      	pop	{r3, r4, r5, pc}
 8009de6:	bf00      	nop
 8009de8:	200019e4 	.word	0x200019e4
 8009dec:	08022944 	.word	0x08022944
 8009df0:	20007e3c 	.word	0x20007e3c

08009df4 <IKS01A3_MOTION_SENSOR_Get_Event_Status>:
 */
int32_t IKS01A3_MOTION_SENSOR_Get_Event_Status(uint32_t Instance, IKS01A3_MOTION_SENSOR_Event_Status_t *Status)
{
  int32_t ret;

  switch (Instance)
 8009df4:	2801      	cmp	r0, #1
{
 8009df6:	b508      	push	{r3, lr}
  switch (Instance)
 8009df8:	d007      	beq.n	8009e0a <IKS01A3_MOTION_SENSOR_Get_Event_Status+0x16>
 8009dfa:	d30d      	bcc.n	8009e18 <IKS01A3_MOTION_SENSOR_Get_Event_Status+0x24>
      ret = BSP_ERROR_COMPONENT_FAILURE;
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8009dfc:	2802      	cmp	r0, #2
 8009dfe:	bf0c      	ite	eq
 8009e00:	f06f 0004 	mvneq.w	r0, #4
 8009e04:	f06f 0001 	mvnne.w	r0, #1
      break;
  }

  return ret;
}
 8009e08:	bd08      	pop	{r3, pc}
      if (LIS2DW12_ACC_Get_Event_Status(MotionCompObj[Instance], (LIS2DW12_Event_Status_t *)(void *)Status) != BSP_ERROR_NONE)
 8009e0a:	4b08      	ldr	r3, [pc, #32]	; (8009e2c <IKS01A3_MOTION_SENSOR_Get_Event_Status+0x38>)
 8009e0c:	6858      	ldr	r0, [r3, #4]
 8009e0e:	f7fb ff65 	bl	8005cdc <LIS2DW12_ACC_Get_Event_Status>
 8009e12:	b938      	cbnz	r0, 8009e24 <IKS01A3_MOTION_SENSOR_Get_Event_Status+0x30>
        ret = BSP_ERROR_NONE;
 8009e14:	2000      	movs	r0, #0
}
 8009e16:	bd08      	pop	{r3, pc}
      if (LSM6DSO_ACC_Get_Event_Status(MotionCompObj[Instance], (LSM6DSO_Event_Status_t *)(void *)Status) != BSP_ERROR_NONE)
 8009e18:	4b04      	ldr	r3, [pc, #16]	; (8009e2c <IKS01A3_MOTION_SENSOR_Get_Event_Status+0x38>)
 8009e1a:	6818      	ldr	r0, [r3, #0]
 8009e1c:	f7fe fa26 	bl	800826c <LSM6DSO_ACC_Get_Event_Status>
 8009e20:	2800      	cmp	r0, #0
 8009e22:	d0f7      	beq.n	8009e14 <IKS01A3_MOTION_SENSOR_Get_Event_Status+0x20>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009e24:	f06f 0004 	mvn.w	r0, #4
}
 8009e28:	bd08      	pop	{r3, pc}
 8009e2a:	bf00      	nop
 8009e2c:	20007e3c 	.word	0x20007e3c

08009e30 <IKS01A3_MOTION_SENSOR_Enable_Free_Fall_Detection>:
 */
int32_t IKS01A3_MOTION_SENSOR_Enable_Free_Fall_Detection(uint32_t Instance, IKS01A3_MOTION_SENSOR_IntPin_t IntPin)
{
  int32_t ret;

  switch (Instance)
 8009e30:	b130      	cbz	r0, 8009e40 <IKS01A3_MOTION_SENSOR_Enable_Free_Fall_Detection+0x10>
 8009e32:	2802      	cmp	r0, #2
      break;
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2DW12_0 == 1)
    case IKS01A3_LIS2DW12_0:
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009e34:	bf8c      	ite	hi
 8009e36:	f06f 0001 	mvnhi.w	r0, #1
 8009e3a:	f06f 0004 	mvnls.w	r0, #4
      ret = BSP_ERROR_WRONG_PARAM;
      break;
  }

  return ret;
}
 8009e3e:	4770      	bx	lr
{
 8009e40:	b508      	push	{r3, lr}
      if (LSM6DSO_ACC_Enable_Free_Fall_Detection(MotionCompObj[Instance], (LSM6DSO_SensorIntPin_t)IntPin) != BSP_ERROR_NONE)
 8009e42:	4b04      	ldr	r3, [pc, #16]	; (8009e54 <IKS01A3_MOTION_SENSOR_Enable_Free_Fall_Detection+0x24>)
 8009e44:	6818      	ldr	r0, [r3, #0]
 8009e46:	f7fd fd75 	bl	8007934 <LSM6DSO_ACC_Enable_Free_Fall_Detection>
 8009e4a:	2800      	cmp	r0, #0
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009e4c:	bf18      	it	ne
 8009e4e:	f06f 0004 	mvnne.w	r0, #4
}
 8009e52:	bd08      	pop	{r3, pc}
 8009e54:	20007e3c 	.word	0x20007e3c

08009e58 <IKS01A3_MOTION_SENSOR_Disable_Free_Fall_Detection>:
 */
int32_t IKS01A3_MOTION_SENSOR_Disable_Free_Fall_Detection(uint32_t Instance)
{
  int32_t ret;

  switch (Instance)
 8009e58:	b130      	cbz	r0, 8009e68 <IKS01A3_MOTION_SENSOR_Disable_Free_Fall_Detection+0x10>
 8009e5a:	2802      	cmp	r0, #2
      break;
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2DW12_0 == 1)
    case IKS01A3_LIS2DW12_0:
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009e5c:	bf8c      	ite	hi
 8009e5e:	f06f 0001 	mvnhi.w	r0, #1
 8009e62:	f06f 0004 	mvnls.w	r0, #4
      ret = BSP_ERROR_WRONG_PARAM;
      break;
  }

  return ret;
}
 8009e66:	4770      	bx	lr
{
 8009e68:	b508      	push	{r3, lr}
      if (LSM6DSO_ACC_Disable_Free_Fall_Detection(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8009e6a:	4b04      	ldr	r3, [pc, #16]	; (8009e7c <IKS01A3_MOTION_SENSOR_Disable_Free_Fall_Detection+0x24>)
 8009e6c:	6818      	ldr	r0, [r3, #0]
 8009e6e:	f7fd fdbf 	bl	80079f0 <LSM6DSO_ACC_Disable_Free_Fall_Detection>
 8009e72:	2800      	cmp	r0, #0
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009e74:	bf18      	it	ne
 8009e76:	f06f 0004 	mvnne.w	r0, #4
}
 8009e7a:	bd08      	pop	{r3, pc}
 8009e7c:	20007e3c 	.word	0x20007e3c

08009e80 <IKS01A3_MOTION_SENSOR_Set_Free_Fall_Threshold>:
 */
int32_t IKS01A3_MOTION_SENSOR_Set_Free_Fall_Threshold(uint32_t Instance, uint8_t Threshold)
{
  int32_t ret;

  switch (Instance)
 8009e80:	b130      	cbz	r0, 8009e90 <IKS01A3_MOTION_SENSOR_Set_Free_Fall_Threshold+0x10>
 8009e82:	2802      	cmp	r0, #2
      break;
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2DW12_0 == 1)
    case IKS01A3_LIS2DW12_0:
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009e84:	bf8c      	ite	hi
 8009e86:	f06f 0001 	mvnhi.w	r0, #1
 8009e8a:	f06f 0004 	mvnls.w	r0, #4
      ret = BSP_ERROR_WRONG_PARAM;
      break;
  }

  return ret;
}
 8009e8e:	4770      	bx	lr
{
 8009e90:	b508      	push	{r3, lr}
      if (LSM6DSO_ACC_Set_Free_Fall_Threshold(MotionCompObj[Instance], Threshold) != BSP_ERROR_NONE)
 8009e92:	4b04      	ldr	r3, [pc, #16]	; (8009ea4 <IKS01A3_MOTION_SENSOR_Set_Free_Fall_Threshold+0x24>)
 8009e94:	6818      	ldr	r0, [r3, #0]
 8009e96:	f7fd fde3 	bl	8007a60 <LSM6DSO_ACC_Set_Free_Fall_Threshold>
 8009e9a:	2800      	cmp	r0, #0
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009e9c:	bf18      	it	ne
 8009e9e:	f06f 0004 	mvnne.w	r0, #4
}
 8009ea2:	bd08      	pop	{r3, pc}
 8009ea4:	20007e3c 	.word	0x20007e3c

08009ea8 <IKS01A3_MOTION_SENSOR_Enable_Pedometer>:
 */
int32_t IKS01A3_MOTION_SENSOR_Enable_Pedometer(uint32_t Instance)
{
  int32_t ret;

  switch (Instance)
 8009ea8:	b130      	cbz	r0, 8009eb8 <IKS01A3_MOTION_SENSOR_Enable_Pedometer+0x10>
 8009eaa:	2802      	cmp	r0, #2
      break;
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2DW12_0 == 1)
    case IKS01A3_LIS2DW12_0:
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009eac:	bf8c      	ite	hi
 8009eae:	f06f 0001 	mvnhi.w	r0, #1
 8009eb2:	f06f 0004 	mvnls.w	r0, #4
      ret = BSP_ERROR_WRONG_PARAM;
      break;
  }

  return ret;
}
 8009eb6:	4770      	bx	lr
{
 8009eb8:	b508      	push	{r3, lr}
      if (LSM6DSO_ACC_Enable_Pedometer(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8009eba:	4b04      	ldr	r3, [pc, #16]	; (8009ecc <IKS01A3_MOTION_SENSOR_Enable_Pedometer+0x24>)
 8009ebc:	6818      	ldr	r0, [r3, #0]
 8009ebe:	f7fd fdd9 	bl	8007a74 <LSM6DSO_ACC_Enable_Pedometer>
 8009ec2:	2800      	cmp	r0, #0
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009ec4:	bf18      	it	ne
 8009ec6:	f06f 0004 	mvnne.w	r0, #4
}
 8009eca:	bd08      	pop	{r3, pc}
 8009ecc:	20007e3c 	.word	0x20007e3c

08009ed0 <IKS01A3_MOTION_SENSOR_Disable_Pedometer>:
 */
int32_t IKS01A3_MOTION_SENSOR_Disable_Pedometer(uint32_t Instance)
{
  int32_t ret;

  switch (Instance)
 8009ed0:	b130      	cbz	r0, 8009ee0 <IKS01A3_MOTION_SENSOR_Disable_Pedometer+0x10>
 8009ed2:	2802      	cmp	r0, #2
      break;
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2DW12_0 == 1)
    case IKS01A3_LIS2DW12_0:
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009ed4:	bf8c      	ite	hi
 8009ed6:	f06f 0001 	mvnhi.w	r0, #1
 8009eda:	f06f 0004 	mvnls.w	r0, #4
      ret = BSP_ERROR_WRONG_PARAM;
      break;
  }

  return ret;
}
 8009ede:	4770      	bx	lr
{
 8009ee0:	b508      	push	{r3, lr}
      if (LSM6DSO_ACC_Disable_Pedometer(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8009ee2:	4b04      	ldr	r3, [pc, #16]	; (8009ef4 <IKS01A3_MOTION_SENSOR_Disable_Pedometer+0x24>)
 8009ee4:	6818      	ldr	r0, [r3, #0]
 8009ee6:	f7fd fdf9 	bl	8007adc <LSM6DSO_ACC_Disable_Pedometer>
 8009eea:	2800      	cmp	r0, #0
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009eec:	bf18      	it	ne
 8009eee:	f06f 0004 	mvnne.w	r0, #4
}
 8009ef2:	bd08      	pop	{r3, pc}
 8009ef4:	20007e3c 	.word	0x20007e3c

08009ef8 <IKS01A3_MOTION_SENSOR_Reset_Step_Counter>:
 */
int32_t IKS01A3_MOTION_SENSOR_Reset_Step_Counter(uint32_t Instance)
{
  int32_t ret;

  switch (Instance)
 8009ef8:	b130      	cbz	r0, 8009f08 <IKS01A3_MOTION_SENSOR_Reset_Step_Counter+0x10>
 8009efa:	2802      	cmp	r0, #2
      break;
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2DW12_0 == 1)
    case IKS01A3_LIS2DW12_0:
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009efc:	bf8c      	ite	hi
 8009efe:	f06f 0001 	mvnhi.w	r0, #1
 8009f02:	f06f 0004 	mvnls.w	r0, #4
      ret = BSP_ERROR_WRONG_PARAM;
      break;
  }

  return ret;
}
 8009f06:	4770      	bx	lr
{
 8009f08:	b508      	push	{r3, lr}
      if (LSM6DSO_ACC_Step_Counter_Reset(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8009f0a:	4b04      	ldr	r3, [pc, #16]	; (8009f1c <IKS01A3_MOTION_SENSOR_Reset_Step_Counter+0x24>)
 8009f0c:	6818      	ldr	r0, [r3, #0]
 8009f0e:	f7fd fe11 	bl	8007b34 <LSM6DSO_ACC_Step_Counter_Reset>
 8009f12:	2800      	cmp	r0, #0
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009f14:	bf18      	it	ne
 8009f16:	f06f 0004 	mvnne.w	r0, #4
}
 8009f1a:	bd08      	pop	{r3, pc}
 8009f1c:	20007e3c 	.word	0x20007e3c

08009f20 <IKS01A3_MOTION_SENSOR_Get_Step_Count>:
 */
int32_t IKS01A3_MOTION_SENSOR_Get_Step_Count(uint32_t Instance, uint16_t *StepCount)
{
  int32_t ret;

  switch (Instance)
 8009f20:	b130      	cbz	r0, 8009f30 <IKS01A3_MOTION_SENSOR_Get_Step_Count+0x10>
 8009f22:	2802      	cmp	r0, #2
      break;
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2DW12_0 == 1)
    case IKS01A3_LIS2DW12_0:
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009f24:	bf8c      	ite	hi
 8009f26:	f06f 0001 	mvnhi.w	r0, #1
 8009f2a:	f06f 0004 	mvnls.w	r0, #4
      ret = BSP_ERROR_WRONG_PARAM;
      break;
  }

  return ret;
}
 8009f2e:	4770      	bx	lr
{
 8009f30:	b508      	push	{r3, lr}
      if (LSM6DSO_ACC_Get_Step_Count(MotionCompObj[Instance], StepCount) != BSP_ERROR_NONE)
 8009f32:	4b04      	ldr	r3, [pc, #16]	; (8009f44 <IKS01A3_MOTION_SENSOR_Get_Step_Count+0x24>)
 8009f34:	6818      	ldr	r0, [r3, #0]
 8009f36:	f7fd fdf3 	bl	8007b20 <LSM6DSO_ACC_Get_Step_Count>
 8009f3a:	2800      	cmp	r0, #0
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009f3c:	bf18      	it	ne
 8009f3e:	f06f 0004 	mvnne.w	r0, #4
}
 8009f42:	bd08      	pop	{r3, pc}
 8009f44:	20007e3c 	.word	0x20007e3c

08009f48 <IKS01A3_MOTION_SENSOR_Enable_Tilt_Detection>:
 */
int32_t IKS01A3_MOTION_SENSOR_Enable_Tilt_Detection(uint32_t Instance, IKS01A3_MOTION_SENSOR_IntPin_t IntPin)
{
  int32_t ret;

  switch (Instance)
 8009f48:	b130      	cbz	r0, 8009f58 <IKS01A3_MOTION_SENSOR_Enable_Tilt_Detection+0x10>
 8009f4a:	2802      	cmp	r0, #2
      break;
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2DW12_0 == 1)
    case IKS01A3_LIS2DW12_0:
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009f4c:	bf8c      	ite	hi
 8009f4e:	f06f 0001 	mvnhi.w	r0, #1
 8009f52:	f06f 0004 	mvnls.w	r0, #4
      ret = BSP_ERROR_WRONG_PARAM;
      break;
  }

  return ret;
}
 8009f56:	4770      	bx	lr
{
 8009f58:	b508      	push	{r3, lr}
      if (LSM6DSO_ACC_Enable_Tilt_Detection(MotionCompObj[Instance], (LSM6DSO_SensorIntPin_t)IntPin) != BSP_ERROR_NONE)
 8009f5a:	4b04      	ldr	r3, [pc, #16]	; (8009f6c <IKS01A3_MOTION_SENSOR_Enable_Tilt_Detection+0x24>)
 8009f5c:	6818      	ldr	r0, [r3, #0]
 8009f5e:	f7fd fdf3 	bl	8007b48 <LSM6DSO_ACC_Enable_Tilt_Detection>
 8009f62:	2800      	cmp	r0, #0
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009f64:	bf18      	it	ne
 8009f66:	f06f 0004 	mvnne.w	r0, #4
}
 8009f6a:	bd08      	pop	{r3, pc}
 8009f6c:	20007e3c 	.word	0x20007e3c

08009f70 <IKS01A3_MOTION_SENSOR_Disable_Tilt_Detection>:
 */
int32_t IKS01A3_MOTION_SENSOR_Disable_Tilt_Detection(uint32_t Instance)
{
  int32_t ret;

  switch (Instance)
 8009f70:	b130      	cbz	r0, 8009f80 <IKS01A3_MOTION_SENSOR_Disable_Tilt_Detection+0x10>
 8009f72:	2802      	cmp	r0, #2
      break;
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2DW12_0 == 1)
    case IKS01A3_LIS2DW12_0:
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009f74:	bf8c      	ite	hi
 8009f76:	f06f 0001 	mvnhi.w	r0, #1
 8009f7a:	f06f 0004 	mvnls.w	r0, #4
      ret = BSP_ERROR_WRONG_PARAM;
      break;
  }

  return ret;
}
 8009f7e:	4770      	bx	lr
{
 8009f80:	b508      	push	{r3, lr}
      if (LSM6DSO_ACC_Disable_Tilt_Detection(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8009f82:	4b04      	ldr	r3, [pc, #16]	; (8009f94 <IKS01A3_MOTION_SENSOR_Disable_Tilt_Detection+0x24>)
 8009f84:	6818      	ldr	r0, [r3, #0]
 8009f86:	f7fd fe2d 	bl	8007be4 <LSM6DSO_ACC_Disable_Tilt_Detection>
 8009f8a:	2800      	cmp	r0, #0
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009f8c:	bf18      	it	ne
 8009f8e:	f06f 0004 	mvnne.w	r0, #4
}
 8009f92:	bd08      	pop	{r3, pc}
 8009f94:	20007e3c 	.word	0x20007e3c

08009f98 <IKS01A3_MOTION_SENSOR_Enable_Wake_Up_Detection>:
 */
int32_t IKS01A3_MOTION_SENSOR_Enable_Wake_Up_Detection(uint32_t Instance, IKS01A3_MOTION_SENSOR_IntPin_t IntPin)
{
  int32_t ret;

  switch (Instance)
 8009f98:	2801      	cmp	r0, #1
{
 8009f9a:	b508      	push	{r3, lr}
  switch (Instance)
 8009f9c:	d007      	beq.n	8009fae <IKS01A3_MOTION_SENSOR_Enable_Wake_Up_Detection+0x16>
 8009f9e:	d30d      	bcc.n	8009fbc <IKS01A3_MOTION_SENSOR_Enable_Wake_Up_Detection+0x24>
      ret = BSP_ERROR_COMPONENT_FAILURE;
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8009fa0:	2802      	cmp	r0, #2
 8009fa2:	bf0c      	ite	eq
 8009fa4:	f06f 0004 	mvneq.w	r0, #4
 8009fa8:	f06f 0001 	mvnne.w	r0, #1
      break;
  }

  return ret;
}
 8009fac:	bd08      	pop	{r3, pc}
      if (LIS2DW12_ACC_Enable_Wake_Up_Detection(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8009fae:	4b08      	ldr	r3, [pc, #32]	; (8009fd0 <IKS01A3_MOTION_SENSOR_Enable_Wake_Up_Detection+0x38>)
 8009fb0:	6858      	ldr	r0, [r3, #4]
 8009fb2:	f7fb fceb 	bl	800598c <LIS2DW12_ACC_Enable_Wake_Up_Detection>
 8009fb6:	b938      	cbnz	r0, 8009fc8 <IKS01A3_MOTION_SENSOR_Enable_Wake_Up_Detection+0x30>
        ret = BSP_ERROR_NONE;
 8009fb8:	2000      	movs	r0, #0
}
 8009fba:	bd08      	pop	{r3, pc}
      if (LSM6DSO_ACC_Enable_Wake_Up_Detection(MotionCompObj[Instance], (LSM6DSO_SensorIntPin_t)IntPin) != BSP_ERROR_NONE)
 8009fbc:	4b04      	ldr	r3, [pc, #16]	; (8009fd0 <IKS01A3_MOTION_SENSOR_Enable_Wake_Up_Detection+0x38>)
 8009fbe:	6818      	ldr	r0, [r3, #0]
 8009fc0:	f7fd fe42 	bl	8007c48 <LSM6DSO_ACC_Enable_Wake_Up_Detection>
 8009fc4:	2800      	cmp	r0, #0
 8009fc6:	d0f7      	beq.n	8009fb8 <IKS01A3_MOTION_SENSOR_Enable_Wake_Up_Detection+0x20>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009fc8:	f06f 0004 	mvn.w	r0, #4
}
 8009fcc:	bd08      	pop	{r3, pc}
 8009fce:	bf00      	nop
 8009fd0:	20007e3c 	.word	0x20007e3c

08009fd4 <IKS01A3_MOTION_SENSOR_Disable_Wake_Up_Detection>:
 */
int32_t IKS01A3_MOTION_SENSOR_Disable_Wake_Up_Detection(uint32_t Instance)
{
  int32_t ret;

  switch (Instance)
 8009fd4:	2801      	cmp	r0, #1
{
 8009fd6:	b508      	push	{r3, lr}
  switch (Instance)
 8009fd8:	d007      	beq.n	8009fea <IKS01A3_MOTION_SENSOR_Disable_Wake_Up_Detection+0x16>
 8009fda:	d30d      	bcc.n	8009ff8 <IKS01A3_MOTION_SENSOR_Disable_Wake_Up_Detection+0x24>
      ret = BSP_ERROR_COMPONENT_FAILURE;
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8009fdc:	2802      	cmp	r0, #2
 8009fde:	bf0c      	ite	eq
 8009fe0:	f06f 0004 	mvneq.w	r0, #4
 8009fe4:	f06f 0001 	mvnne.w	r0, #1
      break;
  }

  return ret;
}
 8009fe8:	bd08      	pop	{r3, pc}
      if (LIS2DW12_ACC_Disable_Wake_Up_Detection(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8009fea:	4b08      	ldr	r3, [pc, #32]	; (800a00c <IKS01A3_MOTION_SENSOR_Disable_Wake_Up_Detection+0x38>)
 8009fec:	6858      	ldr	r0, [r3, #4]
 8009fee:	f7fb fd19 	bl	8005a24 <LIS2DW12_ACC_Disable_Wake_Up_Detection>
 8009ff2:	b938      	cbnz	r0, 800a004 <IKS01A3_MOTION_SENSOR_Disable_Wake_Up_Detection+0x30>
        ret = BSP_ERROR_NONE;
 8009ff4:	2000      	movs	r0, #0
}
 8009ff6:	bd08      	pop	{r3, pc}
      if (LSM6DSO_ACC_Disable_Wake_Up_Detection(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8009ff8:	4b04      	ldr	r3, [pc, #16]	; (800a00c <IKS01A3_MOTION_SENSOR_Disable_Wake_Up_Detection+0x38>)
 8009ffa:	6818      	ldr	r0, [r3, #0]
 8009ffc:	f7fd fe78 	bl	8007cf0 <LSM6DSO_ACC_Disable_Wake_Up_Detection>
 800a000:	2800      	cmp	r0, #0
 800a002:	d0f7      	beq.n	8009ff4 <IKS01A3_MOTION_SENSOR_Disable_Wake_Up_Detection+0x20>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a004:	f06f 0004 	mvn.w	r0, #4
}
 800a008:	bd08      	pop	{r3, pc}
 800a00a:	bf00      	nop
 800a00c:	20007e3c 	.word	0x20007e3c

0800a010 <IKS01A3_MOTION_SENSOR_Enable_Single_Tap_Detection>:
 */
int32_t IKS01A3_MOTION_SENSOR_Enable_Single_Tap_Detection(uint32_t Instance, IKS01A3_MOTION_SENSOR_IntPin_t IntPin)
{
  int32_t ret;

  switch (Instance)
 800a010:	b130      	cbz	r0, 800a020 <IKS01A3_MOTION_SENSOR_Enable_Single_Tap_Detection+0x10>
 800a012:	2802      	cmp	r0, #2
      break;
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2DW12_0 == 1)
    case IKS01A3_LIS2DW12_0:
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800a014:	bf8c      	ite	hi
 800a016:	f06f 0001 	mvnhi.w	r0, #1
 800a01a:	f06f 0004 	mvnls.w	r0, #4
      ret = BSP_ERROR_WRONG_PARAM;
      break;
  }

  return ret;
}
 800a01e:	4770      	bx	lr
{
 800a020:	b508      	push	{r3, lr}
      if (LSM6DSO_ACC_Enable_Single_Tap_Detection(MotionCompObj[Instance], (LSM6DSO_SensorIntPin_t)IntPin) != BSP_ERROR_NONE)
 800a022:	4b04      	ldr	r3, [pc, #16]	; (800a034 <IKS01A3_MOTION_SENSOR_Enable_Single_Tap_Detection+0x24>)
 800a024:	6818      	ldr	r0, [r3, #0]
 800a026:	f7fd fe9b 	bl	8007d60 <LSM6DSO_ACC_Enable_Single_Tap_Detection>
 800a02a:	2800      	cmp	r0, #0
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a02c:	bf18      	it	ne
 800a02e:	f06f 0004 	mvnne.w	r0, #4
}
 800a032:	bd08      	pop	{r3, pc}
 800a034:	20007e3c 	.word	0x20007e3c

0800a038 <IKS01A3_MOTION_SENSOR_Disable_Single_Tap_Detection>:
 */
int32_t IKS01A3_MOTION_SENSOR_Disable_Single_Tap_Detection(uint32_t Instance)
{
  int32_t ret;

  switch (Instance)
 800a038:	b130      	cbz	r0, 800a048 <IKS01A3_MOTION_SENSOR_Disable_Single_Tap_Detection+0x10>
 800a03a:	2802      	cmp	r0, #2
      break;
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2DW12_0 == 1)
    case IKS01A3_LIS2DW12_0:
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800a03c:	bf8c      	ite	hi
 800a03e:	f06f 0001 	mvnhi.w	r0, #1
 800a042:	f06f 0004 	mvnls.w	r0, #4
      ret = BSP_ERROR_WRONG_PARAM;
      break;
  }

  return ret;
}
 800a046:	4770      	bx	lr
{
 800a048:	b508      	push	{r3, lr}
      if (LSM6DSO_ACC_Disable_Single_Tap_Detection(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800a04a:	4b04      	ldr	r3, [pc, #16]	; (800a05c <IKS01A3_MOTION_SENSOR_Disable_Single_Tap_Detection+0x24>)
 800a04c:	6818      	ldr	r0, [r3, #0]
 800a04e:	f7fd fef3 	bl	8007e38 <LSM6DSO_ACC_Disable_Single_Tap_Detection>
 800a052:	2800      	cmp	r0, #0
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a054:	bf18      	it	ne
 800a056:	f06f 0004 	mvnne.w	r0, #4
}
 800a05a:	bd08      	pop	{r3, pc}
 800a05c:	20007e3c 	.word	0x20007e3c

0800a060 <IKS01A3_MOTION_SENSOR_Enable_Double_Tap_Detection>:
 */
int32_t IKS01A3_MOTION_SENSOR_Enable_Double_Tap_Detection(uint32_t Instance, IKS01A3_MOTION_SENSOR_IntPin_t IntPin)
{
  int32_t ret;

  switch (Instance)
 800a060:	b130      	cbz	r0, 800a070 <IKS01A3_MOTION_SENSOR_Enable_Double_Tap_Detection+0x10>
 800a062:	2802      	cmp	r0, #2
      break;
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2DW12_0 == 1)
    case IKS01A3_LIS2DW12_0:
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800a064:	bf8c      	ite	hi
 800a066:	f06f 0001 	mvnhi.w	r0, #1
 800a06a:	f06f 0004 	mvnls.w	r0, #4
      ret = BSP_ERROR_WRONG_PARAM;
      break;
  }

  return ret;
}
 800a06e:	4770      	bx	lr
{
 800a070:	b508      	push	{r3, lr}
      if (LSM6DSO_ACC_Enable_Double_Tap_Detection(MotionCompObj[Instance], (LSM6DSO_SensorIntPin_t)IntPin) != BSP_ERROR_NONE)
 800a072:	4b04      	ldr	r3, [pc, #16]	; (800a084 <IKS01A3_MOTION_SENSOR_Enable_Double_Tap_Detection+0x24>)
 800a074:	6818      	ldr	r0, [r3, #0]
 800a076:	f7fd ff2b 	bl	8007ed0 <LSM6DSO_ACC_Enable_Double_Tap_Detection>
 800a07a:	2800      	cmp	r0, #0
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a07c:	bf18      	it	ne
 800a07e:	f06f 0004 	mvnne.w	r0, #4
}
 800a082:	bd08      	pop	{r3, pc}
 800a084:	20007e3c 	.word	0x20007e3c

0800a088 <IKS01A3_MOTION_SENSOR_Disable_Double_Tap_Detection>:
 */
int32_t IKS01A3_MOTION_SENSOR_Disable_Double_Tap_Detection(uint32_t Instance)
{
  int32_t ret;

  switch (Instance)
 800a088:	b130      	cbz	r0, 800a098 <IKS01A3_MOTION_SENSOR_Disable_Double_Tap_Detection+0x10>
 800a08a:	2802      	cmp	r0, #2
      break;
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2DW12_0 == 1)
    case IKS01A3_LIS2DW12_0:
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800a08c:	bf8c      	ite	hi
 800a08e:	f06f 0001 	mvnhi.w	r0, #1
 800a092:	f06f 0004 	mvnls.w	r0, #4
      ret = BSP_ERROR_WRONG_PARAM;
      break;
  }

  return ret;
}
 800a096:	4770      	bx	lr
{
 800a098:	b508      	push	{r3, lr}
      if (LSM6DSO_ACC_Disable_Double_Tap_Detection(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800a09a:	4b04      	ldr	r3, [pc, #16]	; (800a0ac <IKS01A3_MOTION_SENSOR_Disable_Double_Tap_Detection+0x24>)
 800a09c:	6818      	ldr	r0, [r3, #0]
 800a09e:	f7fd ff8b 	bl	8007fb8 <LSM6DSO_ACC_Disable_Double_Tap_Detection>
 800a0a2:	2800      	cmp	r0, #0
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a0a4:	bf18      	it	ne
 800a0a6:	f06f 0004 	mvnne.w	r0, #4
}
 800a0aa:	bd08      	pop	{r3, pc}
 800a0ac:	20007e3c 	.word	0x20007e3c

0800a0b0 <IKS01A3_MOTION_SENSOR_Set_Tap_Threshold>:
 */
int32_t IKS01A3_MOTION_SENSOR_Set_Tap_Threshold(uint32_t Instance, uint8_t Threshold)
{
  int32_t ret;

  switch (Instance)
 800a0b0:	b130      	cbz	r0, 800a0c0 <IKS01A3_MOTION_SENSOR_Set_Tap_Threshold+0x10>
 800a0b2:	2802      	cmp	r0, #2
      break;
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2DW12_0 == 1)
    case IKS01A3_LIS2DW12_0:
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800a0b4:	bf8c      	ite	hi
 800a0b6:	f06f 0001 	mvnhi.w	r0, #1
 800a0ba:	f06f 0004 	mvnls.w	r0, #4
      ret = BSP_ERROR_WRONG_PARAM;
      break;
  }

  return ret;
}
 800a0be:	4770      	bx	lr
{
 800a0c0:	b508      	push	{r3, lr}
      if (LSM6DSO_ACC_Set_Tap_Threshold(MotionCompObj[Instance], Threshold) != BSP_ERROR_NONE)
 800a0c2:	4b04      	ldr	r3, [pc, #16]	; (800a0d4 <IKS01A3_MOTION_SENSOR_Set_Tap_Threshold+0x24>)
 800a0c4:	6818      	ldr	r0, [r3, #0]
 800a0c6:	f7fd ffcf 	bl	8008068 <LSM6DSO_ACC_Set_Tap_Threshold>
 800a0ca:	2800      	cmp	r0, #0
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a0cc:	bf18      	it	ne
 800a0ce:	f06f 0004 	mvnne.w	r0, #4
}
 800a0d2:	bd08      	pop	{r3, pc}
 800a0d4:	20007e3c 	.word	0x20007e3c

0800a0d8 <IKS01A3_MOTION_SENSOR_Enable_6D_Orientation>:
 */
int32_t IKS01A3_MOTION_SENSOR_Enable_6D_Orientation(uint32_t Instance, IKS01A3_MOTION_SENSOR_IntPin_t IntPin)
{
  int32_t ret;

  switch (Instance)
 800a0d8:	2801      	cmp	r0, #1
{
 800a0da:	b508      	push	{r3, lr}
  switch (Instance)
 800a0dc:	d007      	beq.n	800a0ee <IKS01A3_MOTION_SENSOR_Enable_6D_Orientation+0x16>
 800a0de:	d30d      	bcc.n	800a0fc <IKS01A3_MOTION_SENSOR_Enable_6D_Orientation+0x24>
      ret = BSP_ERROR_COMPONENT_FAILURE;
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800a0e0:	2802      	cmp	r0, #2
 800a0e2:	bf0c      	ite	eq
 800a0e4:	f06f 0004 	mvneq.w	r0, #4
 800a0e8:	f06f 0001 	mvnne.w	r0, #1
      break;
  }

  return ret;
}
 800a0ec:	bd08      	pop	{r3, pc}
      if (LIS2DW12_ACC_Enable_6D_Orientation(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800a0ee:	4b08      	ldr	r3, [pc, #32]	; (800a110 <IKS01A3_MOTION_SENSOR_Enable_6D_Orientation+0x38>)
 800a0f0:	6858      	ldr	r0, [r3, #4]
 800a0f2:	f7fb fce9 	bl	8005ac8 <LIS2DW12_ACC_Enable_6D_Orientation>
 800a0f6:	b938      	cbnz	r0, 800a108 <IKS01A3_MOTION_SENSOR_Enable_6D_Orientation+0x30>
        ret = BSP_ERROR_NONE;
 800a0f8:	2000      	movs	r0, #0
}
 800a0fa:	bd08      	pop	{r3, pc}
      if (LSM6DSO_ACC_Enable_6D_Orientation(MotionCompObj[Instance], (LSM6DSO_SensorIntPin_t)IntPin) != BSP_ERROR_NONE)
 800a0fc:	4b04      	ldr	r3, [pc, #16]	; (800a110 <IKS01A3_MOTION_SENSOR_Enable_6D_Orientation+0x38>)
 800a0fe:	6818      	ldr	r0, [r3, #0]
 800a100:	f7fd ffbc 	bl	800807c <LSM6DSO_ACC_Enable_6D_Orientation>
 800a104:	2800      	cmp	r0, #0
 800a106:	d0f7      	beq.n	800a0f8 <IKS01A3_MOTION_SENSOR_Enable_6D_Orientation+0x20>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a108:	f06f 0004 	mvn.w	r0, #4
}
 800a10c:	bd08      	pop	{r3, pc}
 800a10e:	bf00      	nop
 800a110:	20007e3c 	.word	0x20007e3c

0800a114 <IKS01A3_MOTION_SENSOR_Disable_6D_Orientation>:
 */
int32_t IKS01A3_MOTION_SENSOR_Disable_6D_Orientation(uint32_t Instance)
{
  int32_t ret;

  switch (Instance)
 800a114:	2801      	cmp	r0, #1
{
 800a116:	b508      	push	{r3, lr}
  switch (Instance)
 800a118:	d007      	beq.n	800a12a <IKS01A3_MOTION_SENSOR_Disable_6D_Orientation+0x16>
 800a11a:	d30d      	bcc.n	800a138 <IKS01A3_MOTION_SENSOR_Disable_6D_Orientation+0x24>
      ret = BSP_ERROR_COMPONENT_FAILURE;
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800a11c:	2802      	cmp	r0, #2
 800a11e:	bf0c      	ite	eq
 800a120:	f06f 0004 	mvneq.w	r0, #4
 800a124:	f06f 0001 	mvnne.w	r0, #1
      break;
  }

  return ret;
}
 800a128:	bd08      	pop	{r3, pc}
      if (LIS2DW12_ACC_Disable_6D_Orientation(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800a12a:	4b08      	ldr	r3, [pc, #32]	; (800a14c <IKS01A3_MOTION_SENSOR_Disable_6D_Orientation+0x38>)
 800a12c:	6858      	ldr	r0, [r3, #4]
 800a12e:	f7fb fd11 	bl	8005b54 <LIS2DW12_ACC_Disable_6D_Orientation>
 800a132:	b938      	cbnz	r0, 800a144 <IKS01A3_MOTION_SENSOR_Disable_6D_Orientation+0x30>
        ret = BSP_ERROR_NONE;
 800a134:	2000      	movs	r0, #0
}
 800a136:	bd08      	pop	{r3, pc}
      if (LSM6DSO_ACC_Disable_6D_Orientation(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800a138:	4b04      	ldr	r3, [pc, #16]	; (800a14c <IKS01A3_MOTION_SENSOR_Disable_6D_Orientation+0x38>)
 800a13a:	6818      	ldr	r0, [r3, #0]
 800a13c:	f7fd ffec 	bl	8008118 <LSM6DSO_ACC_Disable_6D_Orientation>
 800a140:	2800      	cmp	r0, #0
 800a142:	d0f7      	beq.n	800a134 <IKS01A3_MOTION_SENSOR_Disable_6D_Orientation+0x20>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a144:	f06f 0004 	mvn.w	r0, #4
}
 800a148:	bd08      	pop	{r3, pc}
 800a14a:	bf00      	nop
 800a14c:	20007e3c 	.word	0x20007e3c

0800a150 <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_XL>:
 */
int32_t IKS01A3_MOTION_SENSOR_Get_6D_Orientation_XL(uint32_t Instance, uint8_t *xl)
{
  int32_t ret;

  switch (Instance)
 800a150:	2801      	cmp	r0, #1
{
 800a152:	b508      	push	{r3, lr}
  switch (Instance)
 800a154:	d007      	beq.n	800a166 <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_XL+0x16>
 800a156:	d30d      	bcc.n	800a174 <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_XL+0x24>
      ret = BSP_ERROR_COMPONENT_FAILURE;
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800a158:	2802      	cmp	r0, #2
 800a15a:	bf0c      	ite	eq
 800a15c:	f06f 0004 	mvneq.w	r0, #4
 800a160:	f06f 0001 	mvnne.w	r0, #1
      break;
  }

  return ret;
}
 800a164:	bd08      	pop	{r3, pc}
      if (LIS2DW12_ACC_Get_6D_Orientation_XL(MotionCompObj[Instance], xl) != BSP_ERROR_NONE)
 800a166:	4b08      	ldr	r3, [pc, #32]	; (800a188 <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_XL+0x38>)
 800a168:	6858      	ldr	r0, [r3, #4]
 800a16a:	f7fb fd3f 	bl	8005bec <LIS2DW12_ACC_Get_6D_Orientation_XL>
 800a16e:	b938      	cbnz	r0, 800a180 <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_XL+0x30>
        ret = BSP_ERROR_NONE;
 800a170:	2000      	movs	r0, #0
}
 800a172:	bd08      	pop	{r3, pc}
      if (LSM6DSO_ACC_Get_6D_Orientation_XL(MotionCompObj[Instance], xl) != BSP_ERROR_NONE)
 800a174:	4b04      	ldr	r3, [pc, #16]	; (800a188 <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_XL+0x38>)
 800a176:	6818      	ldr	r0, [r3, #0]
 800a178:	f7fe f800 	bl	800817c <LSM6DSO_ACC_Get_6D_Orientation_XL>
 800a17c:	2800      	cmp	r0, #0
 800a17e:	d0f7      	beq.n	800a170 <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_XL+0x20>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a180:	f06f 0004 	mvn.w	r0, #4
}
 800a184:	bd08      	pop	{r3, pc}
 800a186:	bf00      	nop
 800a188:	20007e3c 	.word	0x20007e3c

0800a18c <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_XH>:
 */
int32_t IKS01A3_MOTION_SENSOR_Get_6D_Orientation_XH(uint32_t Instance, uint8_t *xh)
{
  int32_t ret;

  switch (Instance)
 800a18c:	2801      	cmp	r0, #1
{
 800a18e:	b508      	push	{r3, lr}
  switch (Instance)
 800a190:	d007      	beq.n	800a1a2 <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_XH+0x16>
 800a192:	d30d      	bcc.n	800a1b0 <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_XH+0x24>
      ret = BSP_ERROR_COMPONENT_FAILURE;
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800a194:	2802      	cmp	r0, #2
 800a196:	bf0c      	ite	eq
 800a198:	f06f 0004 	mvneq.w	r0, #4
 800a19c:	f06f 0001 	mvnne.w	r0, #1
      break;
  }

  return ret;
}
 800a1a0:	bd08      	pop	{r3, pc}
      if (LIS2DW12_ACC_Get_6D_Orientation_XH(MotionCompObj[Instance], xh) != BSP_ERROR_NONE)
 800a1a2:	4b08      	ldr	r3, [pc, #32]	; (800a1c4 <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_XH+0x38>)
 800a1a4:	6858      	ldr	r0, [r3, #4]
 800a1a6:	f7fb fd35 	bl	8005c14 <LIS2DW12_ACC_Get_6D_Orientation_XH>
 800a1aa:	b938      	cbnz	r0, 800a1bc <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_XH+0x30>
        ret = BSP_ERROR_NONE;
 800a1ac:	2000      	movs	r0, #0
}
 800a1ae:	bd08      	pop	{r3, pc}
      if (LSM6DSO_ACC_Get_6D_Orientation_XH(MotionCompObj[Instance], xh) != BSP_ERROR_NONE)
 800a1b0:	4b04      	ldr	r3, [pc, #16]	; (800a1c4 <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_XH+0x38>)
 800a1b2:	6818      	ldr	r0, [r3, #0]
 800a1b4:	f7fd fff6 	bl	80081a4 <LSM6DSO_ACC_Get_6D_Orientation_XH>
 800a1b8:	2800      	cmp	r0, #0
 800a1ba:	d0f7      	beq.n	800a1ac <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_XH+0x20>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a1bc:	f06f 0004 	mvn.w	r0, #4
}
 800a1c0:	bd08      	pop	{r3, pc}
 800a1c2:	bf00      	nop
 800a1c4:	20007e3c 	.word	0x20007e3c

0800a1c8 <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_YL>:
 */
int32_t IKS01A3_MOTION_SENSOR_Get_6D_Orientation_YL(uint32_t Instance, uint8_t *yl)
{
  int32_t ret;

  switch (Instance)
 800a1c8:	2801      	cmp	r0, #1
{
 800a1ca:	b508      	push	{r3, lr}
  switch (Instance)
 800a1cc:	d007      	beq.n	800a1de <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_YL+0x16>
 800a1ce:	d30d      	bcc.n	800a1ec <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_YL+0x24>
      ret = BSP_ERROR_COMPONENT_FAILURE;
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800a1d0:	2802      	cmp	r0, #2
 800a1d2:	bf0c      	ite	eq
 800a1d4:	f06f 0004 	mvneq.w	r0, #4
 800a1d8:	f06f 0001 	mvnne.w	r0, #1
      break;
  }

  return ret;
}
 800a1dc:	bd08      	pop	{r3, pc}
      if (LIS2DW12_ACC_Get_6D_Orientation_YL(MotionCompObj[Instance], yl) != BSP_ERROR_NONE)
 800a1de:	4b08      	ldr	r3, [pc, #32]	; (800a200 <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_YL+0x38>)
 800a1e0:	6858      	ldr	r0, [r3, #4]
 800a1e2:	f7fb fd2b 	bl	8005c3c <LIS2DW12_ACC_Get_6D_Orientation_YL>
 800a1e6:	b938      	cbnz	r0, 800a1f8 <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_YL+0x30>
        ret = BSP_ERROR_NONE;
 800a1e8:	2000      	movs	r0, #0
}
 800a1ea:	bd08      	pop	{r3, pc}
      if (LSM6DSO_ACC_Get_6D_Orientation_YL(MotionCompObj[Instance], yl) != BSP_ERROR_NONE)
 800a1ec:	4b04      	ldr	r3, [pc, #16]	; (800a200 <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_YL+0x38>)
 800a1ee:	6818      	ldr	r0, [r3, #0]
 800a1f0:	f7fd ffec 	bl	80081cc <LSM6DSO_ACC_Get_6D_Orientation_YL>
 800a1f4:	2800      	cmp	r0, #0
 800a1f6:	d0f7      	beq.n	800a1e8 <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_YL+0x20>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a1f8:	f06f 0004 	mvn.w	r0, #4
}
 800a1fc:	bd08      	pop	{r3, pc}
 800a1fe:	bf00      	nop
 800a200:	20007e3c 	.word	0x20007e3c

0800a204 <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_YH>:
 */
int32_t IKS01A3_MOTION_SENSOR_Get_6D_Orientation_YH(uint32_t Instance, uint8_t *yh)
{
  int32_t ret;

  switch (Instance)
 800a204:	2801      	cmp	r0, #1
{
 800a206:	b508      	push	{r3, lr}
  switch (Instance)
 800a208:	d007      	beq.n	800a21a <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_YH+0x16>
 800a20a:	d30d      	bcc.n	800a228 <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_YH+0x24>
      ret = BSP_ERROR_COMPONENT_FAILURE;
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800a20c:	2802      	cmp	r0, #2
 800a20e:	bf0c      	ite	eq
 800a210:	f06f 0004 	mvneq.w	r0, #4
 800a214:	f06f 0001 	mvnne.w	r0, #1
      break;
  }

  return ret;
}
 800a218:	bd08      	pop	{r3, pc}
      if (LIS2DW12_ACC_Get_6D_Orientation_YH(MotionCompObj[Instance], yh) != BSP_ERROR_NONE)
 800a21a:	4b08      	ldr	r3, [pc, #32]	; (800a23c <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_YH+0x38>)
 800a21c:	6858      	ldr	r0, [r3, #4]
 800a21e:	f7fb fd21 	bl	8005c64 <LIS2DW12_ACC_Get_6D_Orientation_YH>
 800a222:	b938      	cbnz	r0, 800a234 <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_YH+0x30>
        ret = BSP_ERROR_NONE;
 800a224:	2000      	movs	r0, #0
}
 800a226:	bd08      	pop	{r3, pc}
      if (LSM6DSO_ACC_Get_6D_Orientation_YH(MotionCompObj[Instance], yh) != BSP_ERROR_NONE)
 800a228:	4b04      	ldr	r3, [pc, #16]	; (800a23c <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_YH+0x38>)
 800a22a:	6818      	ldr	r0, [r3, #0]
 800a22c:	f7fd ffe2 	bl	80081f4 <LSM6DSO_ACC_Get_6D_Orientation_YH>
 800a230:	2800      	cmp	r0, #0
 800a232:	d0f7      	beq.n	800a224 <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_YH+0x20>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a234:	f06f 0004 	mvn.w	r0, #4
}
 800a238:	bd08      	pop	{r3, pc}
 800a23a:	bf00      	nop
 800a23c:	20007e3c 	.word	0x20007e3c

0800a240 <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_ZL>:
 */
int32_t IKS01A3_MOTION_SENSOR_Get_6D_Orientation_ZL(uint32_t Instance, uint8_t *zl)
{
  int32_t ret;

  switch (Instance)
 800a240:	2801      	cmp	r0, #1
{
 800a242:	b508      	push	{r3, lr}
  switch (Instance)
 800a244:	d007      	beq.n	800a256 <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_ZL+0x16>
 800a246:	d30d      	bcc.n	800a264 <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_ZL+0x24>
      ret = BSP_ERROR_COMPONENT_FAILURE;
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800a248:	2802      	cmp	r0, #2
 800a24a:	bf0c      	ite	eq
 800a24c:	f06f 0004 	mvneq.w	r0, #4
 800a250:	f06f 0001 	mvnne.w	r0, #1
      break;
  }

  return ret;
}
 800a254:	bd08      	pop	{r3, pc}
      if (LIS2DW12_ACC_Get_6D_Orientation_ZL(MotionCompObj[Instance], zl) != BSP_ERROR_NONE)
 800a256:	4b08      	ldr	r3, [pc, #32]	; (800a278 <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_ZL+0x38>)
 800a258:	6858      	ldr	r0, [r3, #4]
 800a25a:	f7fb fd17 	bl	8005c8c <LIS2DW12_ACC_Get_6D_Orientation_ZL>
 800a25e:	b938      	cbnz	r0, 800a270 <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_ZL+0x30>
        ret = BSP_ERROR_NONE;
 800a260:	2000      	movs	r0, #0
}
 800a262:	bd08      	pop	{r3, pc}
      if (LSM6DSO_ACC_Get_6D_Orientation_ZL(MotionCompObj[Instance], zl) != BSP_ERROR_NONE)
 800a264:	4b04      	ldr	r3, [pc, #16]	; (800a278 <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_ZL+0x38>)
 800a266:	6818      	ldr	r0, [r3, #0]
 800a268:	f7fd ffd8 	bl	800821c <LSM6DSO_ACC_Get_6D_Orientation_ZL>
 800a26c:	2800      	cmp	r0, #0
 800a26e:	d0f7      	beq.n	800a260 <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_ZL+0x20>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a270:	f06f 0004 	mvn.w	r0, #4
}
 800a274:	bd08      	pop	{r3, pc}
 800a276:	bf00      	nop
 800a278:	20007e3c 	.word	0x20007e3c

0800a27c <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_ZH>:
 */
int32_t IKS01A3_MOTION_SENSOR_Get_6D_Orientation_ZH(uint32_t Instance, uint8_t *zh)
{
  int32_t ret;

  switch (Instance)
 800a27c:	2801      	cmp	r0, #1
{
 800a27e:	b508      	push	{r3, lr}
  switch (Instance)
 800a280:	d007      	beq.n	800a292 <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_ZH+0x16>
 800a282:	d30d      	bcc.n	800a2a0 <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_ZH+0x24>
      ret = BSP_ERROR_COMPONENT_FAILURE;
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800a284:	2802      	cmp	r0, #2
 800a286:	bf0c      	ite	eq
 800a288:	f06f 0004 	mvneq.w	r0, #4
 800a28c:	f06f 0001 	mvnne.w	r0, #1
      break;
  }

  return ret;
}
 800a290:	bd08      	pop	{r3, pc}
      if (LIS2DW12_ACC_Get_6D_Orientation_ZH(MotionCompObj[Instance], zh) != BSP_ERROR_NONE)
 800a292:	4b08      	ldr	r3, [pc, #32]	; (800a2b4 <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_ZH+0x38>)
 800a294:	6858      	ldr	r0, [r3, #4]
 800a296:	f7fb fd0d 	bl	8005cb4 <LIS2DW12_ACC_Get_6D_Orientation_ZH>
 800a29a:	b938      	cbnz	r0, 800a2ac <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_ZH+0x30>
        ret = BSP_ERROR_NONE;
 800a29c:	2000      	movs	r0, #0
}
 800a29e:	bd08      	pop	{r3, pc}
      if (LSM6DSO_ACC_Get_6D_Orientation_ZH(MotionCompObj[Instance], zh) != BSP_ERROR_NONE)
 800a2a0:	4b04      	ldr	r3, [pc, #16]	; (800a2b4 <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_ZH+0x38>)
 800a2a2:	6818      	ldr	r0, [r3, #0]
 800a2a4:	f7fd ffce 	bl	8008244 <LSM6DSO_ACC_Get_6D_Orientation_ZH>
 800a2a8:	2800      	cmp	r0, #0
 800a2aa:	d0f7      	beq.n	800a29c <IKS01A3_MOTION_SENSOR_Get_6D_Orientation_ZH+0x20>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a2ac:	f06f 0004 	mvn.w	r0, #4
}
 800a2b0:	bd08      	pop	{r3, pc}
 800a2b2:	bf00      	nop
 800a2b4:	20007e3c 	.word	0x20007e3c

0800a2b8 <SystemInit>:
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 800a2b8:	4916      	ldr	r1, [pc, #88]	; (800a314 <SystemInit+0x5c>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800a2ba:	4a17      	ldr	r2, [pc, #92]	; (800a318 <SystemInit+0x60>)
{
 800a2bc:	b430      	push	{r4, r5}
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 800a2be:	2400      	movs	r4, #0
 800a2c0:	608c      	str	r4, [r1, #8]
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 800a2c2:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800a2c6:	4d15      	ldr	r5, [pc, #84]	; (800a31c <SystemInit+0x64>)
  RCC->CR |= RCC_CR_MSION;
 800a2c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 800a2cc:	f440 0070 	orr.w	r0, r0, #15728640	; 0xf00000
 800a2d0:	f8c1 0088 	str.w	r0, [r1, #136]	; 0x88
  RCC->CR |= RCC_CR_MSION;
 800a2d4:	6819      	ldr	r1, [r3, #0]
  RCC->CFGR = 0x00070000U;
 800a2d6:	f44f 20e0 	mov.w	r0, #458752	; 0x70000
  RCC->CR |= RCC_CR_MSION;
 800a2da:	f041 0101 	orr.w	r1, r1, #1
 800a2de:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00070000U;
 800a2e0:	6098      	str	r0, [r3, #8]
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800a2e2:	6819      	ldr	r1, [r3, #0]
 800a2e4:	400a      	ands	r2, r1
 800a2e6:	601a      	str	r2, [r3, #0]
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800a2e8:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800a2ec:	f022 0205 	bic.w	r2, r2, #5
 800a2f0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800a2f4:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800a2f8:	f022 0201 	bic.w	r2, r2, #1
 800a2fc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  RCC->PLLCFGR = 0x22041000U;
 800a300:	60dd      	str	r5, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800a302:	611d      	str	r5, [r3, #16]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800a304:	681a      	ldr	r2, [r3, #0]
 800a306:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a30a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800a30c:	619c      	str	r4, [r3, #24]
}
 800a30e:	bc30      	pop	{r4, r5}
 800a310:	4770      	bx	lr
 800a312:	bf00      	nop
 800a314:	e000ed00 	.word	0xe000ed00
 800a318:	faf6fefb 	.word	0xfaf6fefb
 800a31c:	22041000 	.word	0x22041000

0800a320 <SystemCoreClockUpdate>:
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 800a320:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 800a324:	4921      	ldr	r1, [pc, #132]	; (800a3ac <SystemCoreClockUpdate+0x8c>)
 800a326:	6803      	ldr	r3, [r0, #0]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a328:	6882      	ldr	r2, [r0, #8]
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 800a32a:	f3c3 1303 	ubfx	r3, r3, #4, #4
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a32e:	f002 020c 	and.w	r2, r2, #12
 800a332:	2a08      	cmp	r2, #8
{
 800a334:	b410      	push	{r4}
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 800a336:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a33a:	d014      	beq.n	800a366 <SystemCoreClockUpdate+0x46>
 800a33c:	2a0c      	cmp	r2, #12
 800a33e:	d014      	beq.n	800a36a <SystemCoreClockUpdate+0x4a>
 800a340:	481b      	ldr	r0, [pc, #108]	; (800a3b0 <SystemCoreClockUpdate+0x90>)
 800a342:	2a04      	cmp	r2, #4
 800a344:	bf08      	it	eq
 800a346:	4603      	moveq	r3, r0
      break;
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800a348:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 800a34c:	4819      	ldr	r0, [pc, #100]	; (800a3b4 <SystemCoreClockUpdate+0x94>)
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800a34e:	6892      	ldr	r2, [r2, #8]

}
 800a350:	f85d 4b04 	ldr.w	r4, [sp], #4
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800a354:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800a358:	eb01 0182 	add.w	r1, r1, r2, lsl #2
  SystemCoreClock = SystemCoreClock / tmp;
 800a35c:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800a35e:	fbb3 f3f2 	udiv	r3, r3, r2
 800a362:	6003      	str	r3, [r0, #0]
}
 800a364:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a366:	4b14      	ldr	r3, [pc, #80]	; (800a3b8 <SystemCoreClockUpdate+0x98>)
 800a368:	e7ee      	b.n	800a348 <SystemCoreClockUpdate+0x28>
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800a36a:	68c4      	ldr	r4, [r0, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 800a36c:	68c2      	ldr	r2, [r0, #12]
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800a36e:	f004 0003 	and.w	r0, r4, #3
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 800a372:	f3c2 1202 	ubfx	r2, r2, #4, #3
      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 800a376:	2802      	cmp	r0, #2
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 800a378:	f102 0201 	add.w	r2, r2, #1
      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 800a37c:	d011      	beq.n	800a3a2 <SystemCoreClockUpdate+0x82>
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 800a37e:	2803      	cmp	r0, #3
        pllvco = (HSE_VALUE / pllm);
 800a380:	bf08      	it	eq
 800a382:	4b0d      	ldreq	r3, [pc, #52]	; (800a3b8 <SystemCoreClockUpdate+0x98>)
        pllvco = (msirange / pllm);
 800a384:	fbb3 f3f2 	udiv	r3, r3, r2
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a388:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a38c:	68d0      	ldr	r0, [r2, #12]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 800a38e:	68d2      	ldr	r2, [r2, #12]
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a390:	f3c0 2006 	ubfx	r0, r0, #8, #7
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 800a394:	0f52      	lsrs	r2, r2, #29
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a396:	fb03 f300 	mul.w	r3, r3, r0
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 800a39a:	3201      	adds	r2, #1
      SystemCoreClock = pllvco/pllr;
 800a39c:	fbb3 f3f2 	udiv	r3, r3, r2
      break;
 800a3a0:	e7d2      	b.n	800a348 <SystemCoreClockUpdate+0x28>
        pllvco = (HSI_VALUE / pllm);
 800a3a2:	4b03      	ldr	r3, [pc, #12]	; (800a3b0 <SystemCoreClockUpdate+0x90>)
 800a3a4:	fbb3 f3f2 	udiv	r3, r3, r2
 800a3a8:	e7ee      	b.n	800a388 <SystemCoreClockUpdate+0x68>
 800a3aa:	bf00      	nop
 800a3ac:	08022958 	.word	0x08022958
 800a3b0:	00f42400 	.word	0x00f42400
 800a3b4:	2000014c 	.word	0x2000014c
 800a3b8:	01e84800 	.word	0x01e84800

0800a3bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a3bc:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 800a3be:	4d0f      	ldr	r5, [pc, #60]	; (800a3fc <HAL_InitTick+0x40>)
 800a3c0:	682b      	ldr	r3, [r5, #0]
 800a3c2:	b90b      	cbnz	r3, 800a3c8 <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 800a3c4:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 800a3c6:	bd70      	pop	{r4, r5, r6, pc}
 800a3c8:	4606      	mov	r6, r0
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U /uwTickFreq)) == 0U)
 800a3ca:	f001 fc01 	bl	800bbd0 <HAL_RCC_GetHCLKFreq>
 800a3ce:	682a      	ldr	r2, [r5, #0]
 800a3d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a3d4:	fbb3 f3f2 	udiv	r3, r3, r2
 800a3d8:	fbb0 f0f3 	udiv	r0, r0, r3
 800a3dc:	f000 f8c8 	bl	800a570 <HAL_SYSTICK_Config>
 800a3e0:	4604      	mov	r4, r0
 800a3e2:	2800      	cmp	r0, #0
 800a3e4:	d1ee      	bne.n	800a3c4 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a3e6:	2e0f      	cmp	r6, #15
 800a3e8:	d8ec      	bhi.n	800a3c4 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800a3ea:	4602      	mov	r2, r0
 800a3ec:	4631      	mov	r1, r6
 800a3ee:	f04f 30ff 	mov.w	r0, #4294967295
 800a3f2:	f000 f865 	bl	800a4c0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800a3f6:	606e      	str	r6, [r5, #4]
 800a3f8:	4620      	mov	r0, r4
}
 800a3fa:	bd70      	pop	{r4, r5, r6, pc}
 800a3fc:	20000150 	.word	0x20000150

0800a400 <HAL_Init>:
{
 800a400:	b500      	push	{lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800a402:	4a0c      	ldr	r2, [pc, #48]	; (800a434 <HAL_Init+0x34>)
 800a404:	6813      	ldr	r3, [r2, #0]
 800a406:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 800a40a:	b083      	sub	sp, #12
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a40c:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800a40e:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a410:	f000 f844 	bl	800a49c <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800a414:	2000      	movs	r0, #0
 800a416:	f7ff ffd1 	bl	800a3bc <HAL_InitTick>
 800a41a:	b118      	cbz	r0, 800a424 <HAL_Init+0x24>
    status = HAL_ERROR;
 800a41c:	2001      	movs	r0, #1
}
 800a41e:	b003      	add	sp, #12
 800a420:	f85d fb04 	ldr.w	pc, [sp], #4
 800a424:	9001      	str	r0, [sp, #4]
    HAL_MspInit();
 800a426:	f7f7 f961 	bl	80016ec <HAL_MspInit>
 800a42a:	9801      	ldr	r0, [sp, #4]
}
 800a42c:	b003      	add	sp, #12
 800a42e:	f85d fb04 	ldr.w	pc, [sp], #4
 800a432:	bf00      	nop
 800a434:	58004000 	.word	0x58004000

0800a438 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800a438:	4a03      	ldr	r2, [pc, #12]	; (800a448 <HAL_IncTick+0x10>)
 800a43a:	4904      	ldr	r1, [pc, #16]	; (800a44c <HAL_IncTick+0x14>)
 800a43c:	6813      	ldr	r3, [r2, #0]
 800a43e:	6809      	ldr	r1, [r1, #0]
 800a440:	440b      	add	r3, r1
 800a442:	6013      	str	r3, [r2, #0]
}
 800a444:	4770      	bx	lr
 800a446:	bf00      	nop
 800a448:	20007e48 	.word	0x20007e48
 800a44c:	20000150 	.word	0x20000150

0800a450 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800a450:	4b01      	ldr	r3, [pc, #4]	; (800a458 <HAL_GetTick+0x8>)
 800a452:	6818      	ldr	r0, [r3, #0]
}
 800a454:	4770      	bx	lr
 800a456:	bf00      	nop
 800a458:	20007e48 	.word	0x20007e48

0800a45c <HAL_GetTickPrio>:
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
  return uwTickPrio;
 800a45c:	4b01      	ldr	r3, [pc, #4]	; (800a464 <HAL_GetTickPrio+0x8>)
}
 800a45e:	6858      	ldr	r0, [r3, #4]
 800a460:	4770      	bx	lr
 800a462:	bf00      	nop
 800a464:	20000150 	.word	0x20000150

0800a468 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 800a468:	b538      	push	{r3, r4, r5, lr}
 800a46a:	4604      	mov	r4, r0
    uint32_t tickstart = HAL_GetTick();
 800a46c:	f7ff fff0 	bl	800a450 <HAL_GetTick>
    uint32_t wait = Delay;
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 800a470:	1c63      	adds	r3, r4, #1
    uint32_t tickstart = HAL_GetTick();
 800a472:	4605      	mov	r5, r0
    if (wait < HAL_MAX_DELAY)
 800a474:	d002      	beq.n	800a47c <HAL_Delay+0x14>
    {
      wait += (uint32_t)(uwTickFreq);
 800a476:	4b04      	ldr	r3, [pc, #16]	; (800a488 <HAL_Delay+0x20>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	441c      	add	r4, r3
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 800a47c:	f7ff ffe8 	bl	800a450 <HAL_GetTick>
 800a480:	1b40      	subs	r0, r0, r5
 800a482:	42a0      	cmp	r0, r4
 800a484:	d3fa      	bcc.n	800a47c <HAL_Delay+0x14>
    {
    }
  }
 800a486:	bd38      	pop	{r3, r4, r5, pc}
 800a488:	20000150 	.word	0x20000150

0800a48c <HAL_DBGMCU_EnableDBGSleepMode>:
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 800a48c:	4a02      	ldr	r2, [pc, #8]	; (800a498 <HAL_DBGMCU_EnableDBGSleepMode+0xc>)
 800a48e:	6853      	ldr	r3, [r2, #4]
 800a490:	f043 0301 	orr.w	r3, r3, #1
 800a494:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
  LL_DBGMCU_EnableDBGSleepMode();
}
 800a496:	4770      	bx	lr
 800a498:	e0042000 	.word	0xe0042000

0800a49c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a49c:	4a07      	ldr	r2, [pc, #28]	; (800a4bc <HAL_NVIC_SetPriorityGrouping+0x20>)
 800a49e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a4a0:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 800a4a4:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a4a6:	0200      	lsls	r0, r0, #8
 800a4a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a4ac:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 800a4b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800a4b4:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800a4b6:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800a4b8:	4770      	bx	lr
 800a4ba:	bf00      	nop
 800a4bc:	e000ed00 	.word	0xe000ed00

0800a4c0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a4c0:	4b18      	ldr	r3, [pc, #96]	; (800a524 <HAL_NVIC_SetPriority+0x64>)
 800a4c2:	68db      	ldr	r3, [r3, #12]
 800a4c4:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a4c8:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a4ca:	f1c3 0507 	rsb	r5, r3, #7
 800a4ce:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a4d0:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a4d4:	bf28      	it	cs
 800a4d6:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a4d8:	2c06      	cmp	r4, #6
 800a4da:	d919      	bls.n	800a510 <HAL_NVIC_SetPriority+0x50>
 800a4dc:	3b03      	subs	r3, #3
 800a4de:	f04f 34ff 	mov.w	r4, #4294967295
 800a4e2:	409c      	lsls	r4, r3
 800a4e4:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a4e8:	f04f 32ff 	mov.w	r2, #4294967295
 800a4ec:	40aa      	lsls	r2, r5
 800a4ee:	ea21 0102 	bic.w	r1, r1, r2
 800a4f2:	fa01 f203 	lsl.w	r2, r1, r3
 800a4f6:	4322      	orrs	r2, r4
 800a4f8:	0112      	lsls	r2, r2, #4
  if ((int32_t)(IRQn) >= 0)
 800a4fa:	2800      	cmp	r0, #0
 800a4fc:	b2d2      	uxtb	r2, r2
 800a4fe:	db0a      	blt.n	800a516 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a500:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800a504:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800a508:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800a50c:	bc30      	pop	{r4, r5}
 800a50e:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a510:	2400      	movs	r4, #0
 800a512:	4623      	mov	r3, r4
 800a514:	e7e8      	b.n	800a4e8 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a516:	4b04      	ldr	r3, [pc, #16]	; (800a528 <HAL_NVIC_SetPriority+0x68>)
 800a518:	f000 000f 	and.w	r0, r0, #15
 800a51c:	4403      	add	r3, r0
 800a51e:	761a      	strb	r2, [r3, #24]
 800a520:	bc30      	pop	{r4, r5}
 800a522:	4770      	bx	lr
 800a524:	e000ed00 	.word	0xe000ed00
 800a528:	e000ecfc 	.word	0xe000ecfc

0800a52c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800a52c:	2800      	cmp	r0, #0
 800a52e:	db07      	blt.n	800a540 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a530:	f000 011f 	and.w	r1, r0, #31
 800a534:	2301      	movs	r3, #1
 800a536:	0940      	lsrs	r0, r0, #5
 800a538:	4a02      	ldr	r2, [pc, #8]	; (800a544 <HAL_NVIC_EnableIRQ+0x18>)
 800a53a:	408b      	lsls	r3, r1
 800a53c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800a540:	4770      	bx	lr
 800a542:	bf00      	nop
 800a544:	e000e100 	.word	0xe000e100

0800a548 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800a548:	2800      	cmp	r0, #0
 800a54a:	db0d      	blt.n	800a568 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a54c:	0943      	lsrs	r3, r0, #5
 800a54e:	3320      	adds	r3, #32
 800a550:	2201      	movs	r2, #1
 800a552:	4906      	ldr	r1, [pc, #24]	; (800a56c <HAL_NVIC_DisableIRQ+0x24>)
 800a554:	f000 001f 	and.w	r0, r0, #31
 800a558:	fa02 f000 	lsl.w	r0, r2, r0
 800a55c:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800a560:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800a564:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800a568:	4770      	bx	lr
 800a56a:	bf00      	nop
 800a56c:	e000e100 	.word	0xe000e100

0800a570 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a570:	3801      	subs	r0, #1
 800a572:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800a576:	d20e      	bcs.n	800a596 <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a578:	4b08      	ldr	r3, [pc, #32]	; (800a59c <HAL_SYSTICK_Config+0x2c>)
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a57a:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a57c:	4c08      	ldr	r4, [pc, #32]	; (800a5a0 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a57e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a580:	20f0      	movs	r0, #240	; 0xf0
 800a582:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a586:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a588:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a58a:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a58c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a58e:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 800a590:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a594:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800a596:	2001      	movs	r0, #1
 800a598:	4770      	bx	lr
 800a59a:	bf00      	nop
 800a59c:	e000e010 	.word	0xe000e010
 800a5a0:	e000ed00 	.word	0xe000ed00

0800a5a4 <HAL_NVIC_SetPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800a5a4:	2800      	cmp	r0, #0
 800a5a6:	db09      	blt.n	800a5bc <HAL_NVIC_SetPendingIRQ+0x18>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a5a8:	0943      	lsrs	r3, r0, #5
 800a5aa:	3340      	adds	r3, #64	; 0x40
 800a5ac:	f000 001f 	and.w	r0, r0, #31
 800a5b0:	2201      	movs	r2, #1
 800a5b2:	4903      	ldr	r1, [pc, #12]	; (800a5c0 <HAL_NVIC_SetPendingIRQ+0x1c>)
 800a5b4:	fa02 f000 	lsl.w	r0, r2, r0
 800a5b8:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
}
 800a5bc:	4770      	bx	lr
 800a5be:	bf00      	nop
 800a5c0:	e000e100 	.word	0xe000e100

0800a5c4 <HAL_NVIC_ClearPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800a5c4:	2800      	cmp	r0, #0
 800a5c6:	db09      	blt.n	800a5dc <HAL_NVIC_ClearPendingIRQ+0x18>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a5c8:	0943      	lsrs	r3, r0, #5
 800a5ca:	3360      	adds	r3, #96	; 0x60
 800a5cc:	f000 001f 	and.w	r0, r0, #31
 800a5d0:	2201      	movs	r2, #1
 800a5d2:	4903      	ldr	r1, [pc, #12]	; (800a5e0 <HAL_NVIC_ClearPendingIRQ+0x1c>)
 800a5d4:	fa02 f000 	lsl.w	r0, r2, r0
 800a5d8:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
}
 800a5dc:	4770      	bx	lr
 800a5de:	bf00      	nop
 800a5e0:	e000e100 	.word	0xe000e100

0800a5e4 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800a5e4:	2800      	cmp	r0, #0
 800a5e6:	d03c      	beq.n	800a662 <HAL_CRC_Init+0x7e>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800a5e8:	7f43      	ldrb	r3, [r0, #29]
{
 800a5ea:	b510      	push	{r4, lr}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 800a5ec:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a5f0:	4604      	mov	r4, r0
 800a5f2:	b1fb      	cbz	r3, 800a634 <HAL_CRC_Init+0x50>
  hcrc->State = HAL_CRC_STATE_BUSY;

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800a5f4:	7923      	ldrb	r3, [r4, #4]
  hcrc->State = HAL_CRC_STATE_BUSY;
 800a5f6:	2202      	movs	r2, #2
 800a5f8:	7762      	strb	r2, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800a5fa:	bb1b      	cbnz	r3, 800a644 <HAL_CRC_Init+0x60>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800a5fc:	6823      	ldr	r3, [r4, #0]
 800a5fe:	4a1a      	ldr	r2, [pc, #104]	; (800a668 <HAL_CRC_Init+0x84>)
 800a600:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800a602:	689a      	ldr	r2, [r3, #8]
 800a604:	f022 0218 	bic.w	r2, r2, #24
 800a608:	609a      	str	r2, [r3, #8]
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800a60a:	7962      	ldrb	r2, [r4, #5]
 800a60c:	bb22      	cbnz	r2, 800a658 <HAL_CRC_Init+0x74>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800a60e:	f04f 32ff 	mov.w	r2, #4294967295
 800a612:	611a      	str	r2, [r3, #16]
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800a614:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800a618:	6899      	ldr	r1, [r3, #8]
 800a61a:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 800a61e:	4311      	orrs	r1, r2
 800a620:	6099      	str	r1, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800a622:	689a      	ldr	r2, [r3, #8]
 800a624:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a628:	4302      	orrs	r2, r0
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800a62a:	2101      	movs	r1, #1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800a62c:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800a62e:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY;
 800a630:	7761      	strb	r1, [r4, #29]
}
 800a632:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 800a634:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 800a636:	f7f7 f87d 	bl	8001734 <HAL_CRC_MspInit>
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800a63a:	7923      	ldrb	r3, [r4, #4]
  hcrc->State = HAL_CRC_STATE_BUSY;
 800a63c:	2202      	movs	r2, #2
 800a63e:	7762      	strb	r2, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800a640:	2b00      	cmp	r3, #0
 800a642:	d0db      	beq.n	800a5fc <HAL_CRC_Init+0x18>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800a644:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800a648:	4620      	mov	r0, r4
 800a64a:	f000 f80f 	bl	800a66c <HAL_CRCEx_Polynomial_Set>
 800a64e:	b930      	cbnz	r0, 800a65e <HAL_CRC_Init+0x7a>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800a650:	7962      	ldrb	r2, [r4, #5]
 800a652:	6823      	ldr	r3, [r4, #0]
 800a654:	2a00      	cmp	r2, #0
 800a656:	d0da      	beq.n	800a60e <HAL_CRC_Init+0x2a>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800a658:	6922      	ldr	r2, [r4, #16]
 800a65a:	611a      	str	r2, [r3, #16]
 800a65c:	e7da      	b.n	800a614 <HAL_CRC_Init+0x30>
    return HAL_ERROR;
 800a65e:	2001      	movs	r0, #1
}
 800a660:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800a662:	2001      	movs	r0, #1
}
 800a664:	4770      	bx	lr
 800a666:	bf00      	nop
 800a668:	04c11db7 	.word	0x04c11db7

0800a66c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800a66c:	b410      	push	{r4}
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800a66e:	231e      	movs	r3, #30
 800a670:	e002      	b.n	800a678 <HAL_CRCEx_Polynomial_Set+0xc>
 800a672:	f113 33ff 	adds.w	r3, r3, #4294967295
 800a676:	d321      	bcc.n	800a6bc <HAL_CRCEx_Polynomial_Set+0x50>
 800a678:	fa21 f403 	lsr.w	r4, r1, r3
 800a67c:	07e4      	lsls	r4, r4, #31
 800a67e:	d5f8      	bpl.n	800a672 <HAL_CRCEx_Polynomial_Set+0x6>
  {
  }

  switch (PolyLength)
 800a680:	2a18      	cmp	r2, #24
 800a682:	d81d      	bhi.n	800a6c0 <HAL_CRCEx_Polynomial_Set+0x54>
 800a684:	e8df f002 	tbb	[pc, r2]
 800a688:	1c1c1c0f 	.word	0x1c1c1c0f
 800a68c:	1c1c1c1c 	.word	0x1c1c1c1c
 800a690:	1c1c1c23 	.word	0x1c1c1c23
 800a694:	1c1c1c1c 	.word	0x1c1c1c1c
 800a698:	1c1c1c0d 	.word	0x1c1c1c0d
 800a69c:	1c1c1c1c 	.word	0x1c1c1c1c
 800a6a0:	20          	.byte	0x20
 800a6a1:	00          	.byte	0x00
      {
        status =   HAL_ERROR;
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800a6a2:	2b07      	cmp	r3, #7
 800a6a4:	d80c      	bhi.n	800a6c0 <HAL_CRCEx_Polynomial_Set+0x54>
      break;
  }
  if (status == HAL_OK)
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800a6a6:	6800      	ldr	r0, [r0, #0]
    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
}
 800a6a8:	f85d 4b04 	ldr.w	r4, [sp], #4
    WRITE_REG(hcrc->Instance->POL, Pol);
 800a6ac:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800a6ae:	6883      	ldr	r3, [r0, #8]
 800a6b0:	f023 0318 	bic.w	r3, r3, #24
 800a6b4:	431a      	orrs	r2, r3
 800a6b6:	6082      	str	r2, [r0, #8]
 800a6b8:	2000      	movs	r0, #0
}
 800a6ba:	4770      	bx	lr
  switch (PolyLength)
 800a6bc:	2a00      	cmp	r2, #0
 800a6be:	d0f2      	beq.n	800a6a6 <HAL_CRCEx_Polynomial_Set+0x3a>
      status =  HAL_ERROR;
 800a6c0:	2001      	movs	r0, #1
}
 800a6c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a6c6:	4770      	bx	lr
      if (msb >= HAL_CRC_LENGTH_7B)
 800a6c8:	2b06      	cmp	r3, #6
 800a6ca:	d9ec      	bls.n	800a6a6 <HAL_CRCEx_Polynomial_Set+0x3a>
 800a6cc:	e7f8      	b.n	800a6c0 <HAL_CRCEx_Polynomial_Set+0x54>
      if (msb >= HAL_CRC_LENGTH_16B)
 800a6ce:	2b0f      	cmp	r3, #15
 800a6d0:	d9e9      	bls.n	800a6a6 <HAL_CRCEx_Polynomial_Set+0x3a>
 800a6d2:	e7f5      	b.n	800a6c0 <HAL_CRCEx_Polynomial_Set+0x54>

0800a6d4 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800a6d4:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800a6d8:	2b02      	cmp	r3, #2
 800a6da:	d003      	beq.n	800a6e4 <HAL_DMA_Abort_IT+0x10>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a6dc:	2304      	movs	r3, #4
 800a6de:	63c3      	str	r3, [r0, #60]	; 0x3c

    status = HAL_ERROR;
 800a6e0:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 800a6e2:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a6e4:	6803      	ldr	r3, [r0, #0]
 800a6e6:	6819      	ldr	r1, [r3, #0]
 800a6e8:	f021 010e 	bic.w	r1, r1, #14
{
 800a6ec:	b570      	push	{r4, r5, r6, lr}
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800a6ee:	6c85      	ldr	r5, [r0, #72]	; 0x48
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a6f0:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800a6f2:	e9d0 4210 	ldrd	r4, r2, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a6f6:	6019      	str	r1, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 800a6f8:	6819      	ldr	r1, [r3, #0]
 800a6fa:	f021 0101 	bic.w	r1, r1, #1
 800a6fe:	6019      	str	r1, [r3, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800a700:	682b      	ldr	r3, [r5, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 800a702:	6d41      	ldr	r1, [r0, #84]	; 0x54
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800a704:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a708:	602b      	str	r3, [r5, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800a70a:	f002 021c 	and.w	r2, r2, #28
 800a70e:	2301      	movs	r3, #1
 800a710:	4093      	lsls	r3, r2
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a712:	6d02      	ldr	r2, [r0, #80]	; 0x50
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800a714:	6063      	str	r3, [r4, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a716:	6072      	str	r2, [r6, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 800a718:	b131      	cbz	r1, 800a728 <HAL_DMA_Abort_IT+0x54>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800a71a:	680b      	ldr	r3, [r1, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a71c:	e9d0 2416 	ldrd	r2, r4, [r0, #88]	; 0x58
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800a720:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a724:	600b      	str	r3, [r1, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a726:	6054      	str	r4, [r2, #4]
    if (hdma->XferAbortCallback != NULL)
 800a728:	6b83      	ldr	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 800a72a:	2201      	movs	r2, #1
    __HAL_UNLOCK(hdma);
 800a72c:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 800a72e:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 800a732:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 800a736:	b113      	cbz	r3, 800a73e <HAL_DMA_Abort_IT+0x6a>
      hdma->XferAbortCallback(hdma);
 800a738:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800a73a:	4620      	mov	r0, r4
}
 800a73c:	bd70      	pop	{r4, r5, r6, pc}
  HAL_StatusTypeDef status = HAL_OK;
 800a73e:	4618      	mov	r0, r3
}
 800a740:	bd70      	pop	{r4, r5, r6, pc}
 800a742:	bf00      	nop

0800a744 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a744:	b470      	push	{r4, r5, r6}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
  uint32_t source_it = hdma->Instance->CCR;

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800a746:	e9d0 6310 	ldrd	r6, r3, [r0, #64]	; 0x40
 800a74a:	2204      	movs	r2, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800a74c:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800a74e:	6805      	ldr	r5, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800a750:	f003 031c 	and.w	r3, r3, #28
 800a754:	409a      	lsls	r2, r3
 800a756:	420a      	tst	r2, r1
  uint32_t source_it = hdma->Instance->CCR;
 800a758:	682c      	ldr	r4, [r5, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800a75a:	d00a      	beq.n	800a772 <HAL_DMA_IRQHandler+0x2e>
 800a75c:	f014 0f04 	tst.w	r4, #4
 800a760:	d007      	beq.n	800a772 <HAL_DMA_IRQHandler+0x2e>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a762:	682b      	ldr	r3, [r5, #0]
 800a764:	069b      	lsls	r3, r3, #26
 800a766:	d537      	bpl.n	800a7d8 <HAL_DMA_IRQHandler+0x94>
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800a768:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 800a76a:	6072      	str	r2, [r6, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 800a76c:	b1cb      	cbz	r3, 800a7a2 <HAL_DMA_IRQHandler+0x5e>
  else
  {
    /* Nothing To Do */
  }
  return;
}
 800a76e:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 800a770:	4718      	bx	r3
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800a772:	2202      	movs	r2, #2
 800a774:	409a      	lsls	r2, r3
 800a776:	420a      	tst	r2, r1
 800a778:	d015      	beq.n	800a7a6 <HAL_DMA_IRQHandler+0x62>
 800a77a:	f014 0f02 	tst.w	r4, #2
 800a77e:	d012      	beq.n	800a7a6 <HAL_DMA_IRQHandler+0x62>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a780:	682b      	ldr	r3, [r5, #0]
 800a782:	0699      	lsls	r1, r3, #26
 800a784:	d406      	bmi.n	800a794 <HAL_DMA_IRQHandler+0x50>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800a786:	682b      	ldr	r3, [r5, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800a788:	2101      	movs	r1, #1
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800a78a:	f023 030a 	bic.w	r3, r3, #10
 800a78e:	602b      	str	r3, [r5, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800a790:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
    if (hdma->XferCpltCallback != NULL)
 800a794:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800a796:	6072      	str	r2, [r6, #4]
    __HAL_UNLOCK(hdma);
 800a798:	2200      	movs	r2, #0
 800a79a:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    if (hdma->XferCpltCallback != NULL)
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d1e5      	bne.n	800a76e <HAL_DMA_IRQHandler+0x2a>
}
 800a7a2:	bc70      	pop	{r4, r5, r6}
 800a7a4:	4770      	bx	lr
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 800a7a6:	2208      	movs	r2, #8
 800a7a8:	409a      	lsls	r2, r3
 800a7aa:	420a      	tst	r2, r1
 800a7ac:	d0f9      	beq.n	800a7a2 <HAL_DMA_IRQHandler+0x5e>
 800a7ae:	0722      	lsls	r2, r4, #28
 800a7b0:	d5f7      	bpl.n	800a7a2 <HAL_DMA_IRQHandler+0x5e>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a7b2:	682a      	ldr	r2, [r5, #0]
    if (hdma->XferErrorCallback != NULL)
 800a7b4:	6b41      	ldr	r1, [r0, #52]	; 0x34
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a7b6:	f022 020e 	bic.w	r2, r2, #14
 800a7ba:	602a      	str	r2, [r5, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800a7bc:	2201      	movs	r2, #1
 800a7be:	fa02 f303 	lsl.w	r3, r2, r3
    __HAL_UNLOCK(hdma);
 800a7c2:	2400      	movs	r4, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800a7c4:	6073      	str	r3, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800a7c6:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 800a7c8:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    hdma->State = HAL_DMA_STATE_READY;
 800a7cc:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    if (hdma->XferErrorCallback != NULL)
 800a7d0:	2900      	cmp	r1, #0
 800a7d2:	d0e6      	beq.n	800a7a2 <HAL_DMA_IRQHandler+0x5e>
}
 800a7d4:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 800a7d6:	4708      	bx	r1
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a7d8:	682b      	ldr	r3, [r5, #0]
 800a7da:	f023 0304 	bic.w	r3, r3, #4
 800a7de:	602b      	str	r3, [r5, #0]
 800a7e0:	e7c2      	b.n	800a768 <HAL_DMA_IRQHandler+0x24>
 800a7e2:	bf00      	nop

0800a7e4 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a7e4:	f8d1 c000 	ldr.w	ip, [r1]
 800a7e8:	f1bc 0f00 	cmp.w	ip, #0
 800a7ec:	f000 80b7 	beq.w	800a95e <HAL_GPIO_Init+0x17a>
{
 800a7f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800a7f4:	f8df e184 	ldr.w	lr, [pc, #388]	; 800a97c <HAL_GPIO_Init+0x198>
 800a7f8:	4688      	mov	r8, r1
  uint32_t position = 0x00u;
 800a7fa:	2500      	movs	r5, #0
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800a7fc:	f04f 0901 	mov.w	r9, #1
 800a800:	fa09 f205 	lsl.w	r2, r9, r5
    if (iocurrent != 0x00u)
 800a804:	ea12 060c 	ands.w	r6, r2, ip
 800a808:	d066      	beq.n	800a8d8 <HAL_GPIO_Init+0xf4>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a80a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a80e:	f021 0a10 	bic.w	sl, r1, #16
 800a812:	f1ba 0f02 	cmp.w	sl, #2
 800a816:	d065      	beq.n	800a8e4 <HAL_GPIO_Init+0x100>
 800a818:	006f      	lsls	r7, r5, #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800a81a:	2303      	movs	r3, #3
      temp = GPIOx->MODER;
 800a81c:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800a820:	40bb      	lsls	r3, r7
 800a822:	43db      	mvns	r3, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800a824:	f001 0403 	and.w	r4, r1, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800a828:	ea03 0b0b 	and.w	fp, r3, fp
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800a82c:	40bc      	lsls	r4, r7
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a82e:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800a832:	ea44 040b 	orr.w	r4, r4, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a836:	f1ba 0f01 	cmp.w	sl, #1
      GPIOx->MODER = temp;
 800a83a:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a83c:	d973      	bls.n	800a926 <HAL_GPIO_Init+0x142>
      temp = GPIOx->PUPDR;
 800a83e:	68c4      	ldr	r4, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800a840:	f8d8 2008 	ldr.w	r2, [r8, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800a844:	4023      	ands	r3, r4
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800a846:	40ba      	lsls	r2, r7
 800a848:	431a      	orrs	r2, r3
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800a84a:	00cf      	lsls	r7, r1, #3
      GPIOx->PUPDR = temp;
 800a84c:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800a84e:	d543      	bpl.n	800a8d8 <HAL_GPIO_Init+0xf4>
 800a850:	f025 0203 	bic.w	r2, r5, #3
 800a854:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800a858:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800a85c:	f005 0303 	and.w	r3, r5, #3
        temp = SYSCFG->EXTICR[position >> 2u];
 800a860:	6894      	ldr	r4, [r2, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800a862:	009b      	lsls	r3, r3, #2
 800a864:	270f      	movs	r7, #15
 800a866:	409f      	lsls	r7, r3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800a868:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800a86c:	ea24 0407 	bic.w	r4, r4, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800a870:	d010      	beq.n	800a894 <HAL_GPIO_Init+0xb0>
 800a872:	4f3e      	ldr	r7, [pc, #248]	; (800a96c <HAL_GPIO_Init+0x188>)
 800a874:	42b8      	cmp	r0, r7
 800a876:	d06e      	beq.n	800a956 <HAL_GPIO_Init+0x172>
 800a878:	4f3d      	ldr	r7, [pc, #244]	; (800a970 <HAL_GPIO_Init+0x18c>)
 800a87a:	42b8      	cmp	r0, r7
 800a87c:	d066      	beq.n	800a94c <HAL_GPIO_Init+0x168>
 800a87e:	4f3d      	ldr	r7, [pc, #244]	; (800a974 <HAL_GPIO_Init+0x190>)
 800a880:	42b8      	cmp	r0, r7
 800a882:	d06d      	beq.n	800a960 <HAL_GPIO_Init+0x17c>
 800a884:	4f3c      	ldr	r7, [pc, #240]	; (800a978 <HAL_GPIO_Init+0x194>)
 800a886:	42b8      	cmp	r0, r7
 800a888:	bf0c      	ite	eq
 800a88a:	2704      	moveq	r7, #4
 800a88c:	2707      	movne	r7, #7
 800a88e:	fa07 f303 	lsl.w	r3, r7, r3
 800a892:	431c      	orrs	r4, r3
        SYSCFG->EXTICR[position >> 2u] = temp;
 800a894:	6094      	str	r4, [r2, #8]
        temp = EXTI->IMR1;
 800a896:	f8de 3080 	ldr.w	r3, [lr, #128]	; 0x80
        temp &= ~(iocurrent);
 800a89a:	43f2      	mvns	r2, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800a89c:	03cc      	lsls	r4, r1, #15
        temp &= ~(iocurrent);
 800a89e:	bf54      	ite	pl
 800a8a0:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 800a8a2:	4333      	orrmi	r3, r6
        }
        EXTI->IMR1 = temp;
 800a8a4:	f8ce 3080 	str.w	r3, [lr, #128]	; 0x80

        temp = EXTI->EMR1;
 800a8a8:	f8de 3084 	ldr.w	r3, [lr, #132]	; 0x84
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800a8ac:	038f      	lsls	r7, r1, #14
        temp &= ~(iocurrent);
 800a8ae:	bf54      	ite	pl
 800a8b0:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 800a8b2:	4333      	orrmi	r3, r6
        }
        EXTI->EMR1 = temp;
 800a8b4:	f8ce 3084 	str.w	r3, [lr, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a8b8:	f8de 3000 	ldr.w	r3, [lr]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800a8bc:	02cc      	lsls	r4, r1, #11
        temp &= ~(iocurrent);
 800a8be:	bf54      	ite	pl
 800a8c0:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 800a8c2:	4333      	orrmi	r3, r6
        }
        EXTI->RTSR1 = temp;
 800a8c4:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->FTSR1;
 800a8c8:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800a8cc:	0289      	lsls	r1, r1, #10
        temp &= ~(iocurrent);
 800a8ce:	bf54      	ite	pl
 800a8d0:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 800a8d2:	4333      	orrmi	r3, r6
        }
        EXTI->FTSR1 = temp;
 800a8d4:	f8ce 3004 	str.w	r3, [lr, #4]
      }
    }
    
    position++;
 800a8d8:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a8da:	fa3c f305 	lsrs.w	r3, ip, r5
 800a8de:	d18f      	bne.n	800a800 <HAL_GPIO_Init+0x1c>
  }
}
 800a8e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->AFR[position >> 3u];
 800a8e4:	08ef      	lsrs	r7, r5, #3
 800a8e6:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800a8ea:	f005 0407 	and.w	r4, r5, #7
        temp = GPIOx->AFR[position >> 3u];
 800a8ee:	6a3b      	ldr	r3, [r7, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800a8f0:	00a4      	lsls	r4, r4, #2
 800a8f2:	f04f 0a0f 	mov.w	sl, #15
 800a8f6:	fa0a fb04 	lsl.w	fp, sl, r4
 800a8fa:	ea23 0a0b 	bic.w	sl, r3, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800a8fe:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800a902:	40a3      	lsls	r3, r4
 800a904:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->AFR[position >> 3u] = temp;
 800a908:	623b      	str	r3, [r7, #32]
 800a90a:	006f      	lsls	r7, r5, #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800a90c:	2303      	movs	r3, #3
      temp = GPIOx->MODER;
 800a90e:	f8d0 a000 	ldr.w	sl, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800a912:	40bb      	lsls	r3, r7
 800a914:	43db      	mvns	r3, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800a916:	f001 0403 	and.w	r4, r1, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800a91a:	ea03 0a0a 	and.w	sl, r3, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800a91e:	40bc      	lsls	r4, r7
 800a920:	ea44 040a 	orr.w	r4, r4, sl
      GPIOx->MODER = temp;
 800a924:	6004      	str	r4, [r0, #0]
        temp = GPIOx->OSPEEDR;
 800a926:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800a928:	ea04 0a03 	and.w	sl, r4, r3
        temp |= (GPIO_Init->Speed << (position * 2u));
 800a92c:	f8d8 400c 	ldr.w	r4, [r8, #12]
 800a930:	40bc      	lsls	r4, r7
 800a932:	ea44 040a 	orr.w	r4, r4, sl
        GPIOx->OSPEEDR = temp;
 800a936:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 800a938:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800a93c:	f3c1 1400 	ubfx	r4, r1, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a940:	ea2a 0202 	bic.w	r2, sl, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800a944:	40ac      	lsls	r4, r5
 800a946:	4314      	orrs	r4, r2
        GPIOx->OTYPER = temp;
 800a948:	6044      	str	r4, [r0, #4]
 800a94a:	e778      	b.n	800a83e <HAL_GPIO_Init+0x5a>
 800a94c:	2702      	movs	r7, #2
 800a94e:	fa07 f303 	lsl.w	r3, r7, r3
 800a952:	431c      	orrs	r4, r3
 800a954:	e79e      	b.n	800a894 <HAL_GPIO_Init+0xb0>
 800a956:	fa09 f303 	lsl.w	r3, r9, r3
 800a95a:	431c      	orrs	r4, r3
 800a95c:	e79a      	b.n	800a894 <HAL_GPIO_Init+0xb0>
 800a95e:	4770      	bx	lr
 800a960:	2703      	movs	r7, #3
 800a962:	fa07 f303 	lsl.w	r3, r7, r3
 800a966:	431c      	orrs	r4, r3
 800a968:	e794      	b.n	800a894 <HAL_GPIO_Init+0xb0>
 800a96a:	bf00      	nop
 800a96c:	48000400 	.word	0x48000400
 800a970:	48000800 	.word	0x48000800
 800a974:	48000c00 	.word	0x48000c00
 800a978:	48001000 	.word	0x48001000
 800a97c:	58000800 	.word	0x58000800

0800a980 <HAL_GPIO_DeInit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800a980:	2900      	cmp	r1, #0
 800a982:	f000 8086 	beq.w	800aa92 <HAL_GPIO_DeInit+0x112>
{
 800a986:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
 800a98a:	2300      	movs	r3, #0
{
 800a98c:	b083      	sub	sp, #12
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;

        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800a98e:	f8df 8114 	ldr.w	r8, [pc, #276]	; 800aaa4 <HAL_GPIO_DeInit+0x124>
    iocurrent = (GPIO_Pin) & (1uL << position);
 800a992:	f04f 0901 	mov.w	r9, #1
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 800a996:	f04f 0a0f 	mov.w	sl, #15
        EXTI->FTSR1 &= ~(iocurrent);
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800a99a:	f04f 0b03 	mov.w	fp, #3
 800a99e:	e04e      	b.n	800aa3e <HAL_GPIO_DeInit+0xbe>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800a9a0:	4f3c      	ldr	r7, [pc, #240]	; (800aa94 <HAL_GPIO_DeInit+0x114>)
 800a9a2:	42b8      	cmp	r0, r7
 800a9a4:	d067      	beq.n	800aa76 <HAL_GPIO_DeInit+0xf6>
 800a9a6:	4f3c      	ldr	r7, [pc, #240]	; (800aa98 <HAL_GPIO_DeInit+0x118>)
 800a9a8:	42b8      	cmp	r0, r7
 800a9aa:	d068      	beq.n	800aa7e <HAL_GPIO_DeInit+0xfe>
 800a9ac:	4f3b      	ldr	r7, [pc, #236]	; (800aa9c <HAL_GPIO_DeInit+0x11c>)
 800a9ae:	42b8      	cmp	r0, r7
 800a9b0:	d06b      	beq.n	800aa8a <HAL_GPIO_DeInit+0x10a>
 800a9b2:	4f3b      	ldr	r7, [pc, #236]	; (800aaa0 <HAL_GPIO_DeInit+0x120>)
 800a9b4:	42b8      	cmp	r0, r7
 800a9b6:	bf14      	ite	ne
 800a9b8:	f04f 0e07 	movne.w	lr, #7
 800a9bc:	f04f 0e04 	moveq.w	lr, #4
 800a9c0:	9f01      	ldr	r7, [sp, #4]
 800a9c2:	fa0e f202 	lsl.w	r2, lr, r2
 800a9c6:	4297      	cmp	r7, r2
 800a9c8:	d118      	bne.n	800a9fc <HAL_GPIO_DeInit+0x7c>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800a9ca:	68a2      	ldr	r2, [r4, #8]
 800a9cc:	ea22 020c 	bic.w	r2, r2, ip
 800a9d0:	60a2      	str	r2, [r4, #8]
        EXTI->IMR1 &= ~(iocurrent);
 800a9d2:	f8d8 2080 	ldr.w	r2, [r8, #128]	; 0x80
 800a9d6:	43f6      	mvns	r6, r6
 800a9d8:	4032      	ands	r2, r6
 800a9da:	f8c8 2080 	str.w	r2, [r8, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 800a9de:	f8d8 2084 	ldr.w	r2, [r8, #132]	; 0x84
 800a9e2:	4032      	ands	r2, r6
 800a9e4:	f8c8 2084 	str.w	r2, [r8, #132]	; 0x84
        EXTI->RTSR1 &= ~(iocurrent);
 800a9e8:	f8d8 2000 	ldr.w	r2, [r8]
 800a9ec:	4032      	ands	r2, r6
 800a9ee:	f8c8 2000 	str.w	r2, [r8]
        EXTI->FTSR1 &= ~(iocurrent);
 800a9f2:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800a9f6:	4016      	ands	r6, r2
 800a9f8:	f8c8 6004 	str.w	r6, [r8, #4]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800a9fc:	6804      	ldr	r4, [r0, #0]
 800a9fe:	005a      	lsls	r2, r3, #1
 800aa00:	fa0b f202 	lsl.w	r2, fp, r2

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800aa04:	08de      	lsrs	r6, r3, #3
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800aa06:	4314      	orrs	r4, r2
 800aa08:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 800aa0c:	6004      	str	r4, [r0, #0]
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800aa0e:	f003 0407 	and.w	r4, r3, #7
 800aa12:	6a37      	ldr	r7, [r6, #32]
 800aa14:	00a4      	lsls	r4, r4, #2
 800aa16:	fa0a f404 	lsl.w	r4, sl, r4
 800aa1a:	ea27 0404 	bic.w	r4, r7, r4
 800aa1e:	6234      	str	r4, [r6, #32]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800aa20:	6884      	ldr	r4, [r0, #8]
 800aa22:	43d2      	mvns	r2, r2
 800aa24:	4014      	ands	r4, r2
 800aa26:	6084      	str	r4, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800aa28:	6844      	ldr	r4, [r0, #4]
 800aa2a:	ea24 0505 	bic.w	r5, r4, r5
 800aa2e:	6045      	str	r5, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800aa30:	68c4      	ldr	r4, [r0, #12]
 800aa32:	4022      	ands	r2, r4
 800aa34:	60c2      	str	r2, [r0, #12]
    }
    
    position++;
 800aa36:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 800aa38:	fa31 f203 	lsrs.w	r2, r1, r3
 800aa3c:	d018      	beq.n	800aa70 <HAL_GPIO_DeInit+0xf0>
    iocurrent = (GPIO_Pin) & (1uL << position);
 800aa3e:	fa09 f503 	lsl.w	r5, r9, r3
    if (iocurrent != 0x00u)
 800aa42:	ea15 0601 	ands.w	r6, r5, r1
 800aa46:	d0f6      	beq.n	800aa36 <HAL_GPIO_DeInit+0xb6>
 800aa48:	f023 0403 	bic.w	r4, r3, #3
 800aa4c:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 800aa50:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 800aa54:	f003 0203 	and.w	r2, r3, #3
      tmp = SYSCFG->EXTICR[position >> 2u];
 800aa58:	68a7      	ldr	r7, [r4, #8]
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 800aa5a:	0092      	lsls	r2, r2, #2
 800aa5c:	fa0a fc02 	lsl.w	ip, sl, r2
 800aa60:	ea0c 0707 	and.w	r7, ip, r7
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800aa64:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 800aa68:	9701      	str	r7, [sp, #4]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800aa6a:	d199      	bne.n	800a9a0 <HAL_GPIO_DeInit+0x20>
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	e7aa      	b.n	800a9c6 <HAL_GPIO_DeInit+0x46>
  }
}
 800aa70:	b003      	add	sp, #12
 800aa72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa76:	fa09 f202 	lsl.w	r2, r9, r2
 800aa7a:	9f01      	ldr	r7, [sp, #4]
 800aa7c:	e7a3      	b.n	800a9c6 <HAL_GPIO_DeInit+0x46>
 800aa7e:	f04f 0e02 	mov.w	lr, #2
 800aa82:	fa0e f202 	lsl.w	r2, lr, r2
 800aa86:	9f01      	ldr	r7, [sp, #4]
 800aa88:	e79d      	b.n	800a9c6 <HAL_GPIO_DeInit+0x46>
 800aa8a:	fa0b f202 	lsl.w	r2, fp, r2
 800aa8e:	9f01      	ldr	r7, [sp, #4]
 800aa90:	e799      	b.n	800a9c6 <HAL_GPIO_DeInit+0x46>
 800aa92:	4770      	bx	lr
 800aa94:	48000400 	.word	0x48000400
 800aa98:	48000800 	.word	0x48000800
 800aa9c:	48000c00 	.word	0x48000c00
 800aaa0:	48001000 	.word	0x48001000
 800aaa4:	58000800 	.word	0x58000800

0800aaa8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800aaa8:	b90a      	cbnz	r2, 800aaae <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800aaaa:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 800aaac:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800aaae:	6181      	str	r1, [r0, #24]
 800aab0:	4770      	bx	lr
 800aab2:	bf00      	nop

0800aab4 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800aab4:	4a04      	ldr	r2, [pc, #16]	; (800aac8 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800aab6:	68d1      	ldr	r1, [r2, #12]
 800aab8:	4201      	tst	r1, r0
 800aaba:	d100      	bne.n	800aabe <HAL_GPIO_EXTI_IRQHandler+0xa>
 800aabc:	4770      	bx	lr
{
 800aabe:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800aac0:	60d0      	str	r0, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800aac2:	f7f6 f8f5 	bl	8000cb0 <HAL_GPIO_EXTI_Callback>
  }
}
 800aac6:	bd08      	pop	{r3, pc}
 800aac8:	58000800 	.word	0x58000800

0800aacc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800aacc:	b570      	push	{r4, r5, r6, lr}
 800aace:	4604      	mov	r4, r0
 800aad0:	460d      	mov	r5, r1
 800aad2:	4616      	mov	r6, r2
 800aad4:	1c6a      	adds	r2, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800aad6:	6823      	ldr	r3, [r4, #0]
 800aad8:	d12c      	bne.n	800ab34 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
 800aada:	699a      	ldr	r2, [r3, #24]
 800aadc:	0790      	lsls	r0, r2, #30
 800aade:	d427      	bmi.n	800ab30 <I2C_WaitOnTXISFlagUntilTimeout+0x64>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800aae0:	699a      	ldr	r2, [r3, #24]
 800aae2:	06d1      	lsls	r1, r2, #27
 800aae4:	d5f9      	bpl.n	800aada <I2C_WaitOnTXISFlagUntilTimeout+0xe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800aae6:	699a      	ldr	r2, [r3, #24]
 800aae8:	0691      	lsls	r1, r2, #26
 800aaea:	d5fc      	bpl.n	800aae6 <I2C_WaitOnTXISFlagUntilTimeout+0x1a>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aaec:	2110      	movs	r1, #16

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800aaee:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aaf0:	61d9      	str	r1, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800aaf2:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800aaf4:	699a      	ldr	r2, [r3, #24]
 800aaf6:	0790      	lsls	r0, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 800aaf8:	bf44      	itt	mi
 800aafa:	2200      	movmi	r2, #0
 800aafc:	629a      	strmi	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800aafe:	699a      	ldr	r2, [r3, #24]
 800ab00:	07d1      	lsls	r1, r2, #31
 800ab02:	d403      	bmi.n	800ab0c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800ab04:	699a      	ldr	r2, [r3, #24]
 800ab06:	f042 0201 	orr.w	r2, r2, #1
 800ab0a:	619a      	str	r2, [r3, #24]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ab0c:	685a      	ldr	r2, [r3, #4]
 800ab0e:	4918      	ldr	r1, [pc, #96]	; (800ab70 <I2C_WaitOnTXISFlagUntilTimeout+0xa4>)
 800ab10:	400a      	ands	r2, r1
 800ab12:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ab14:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800ab16:	2120      	movs	r1, #32
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ab18:	f043 0304 	orr.w	r3, r3, #4
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ab1c:	2200      	movs	r2, #0
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ab1e:	6463      	str	r3, [r4, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ab20:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 800ab24:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
      return HAL_ERROR;
 800ab28:	2001      	movs	r0, #1
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ab2a:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 800ab2e:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 800ab30:	2000      	movs	r0, #0
}
 800ab32:	bd70      	pop	{r4, r5, r6, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800ab34:	699a      	ldr	r2, [r3, #24]
 800ab36:	0792      	lsls	r2, r2, #30
 800ab38:	d4fa      	bmi.n	800ab30 <I2C_WaitOnTXISFlagUntilTimeout+0x64>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ab3a:	699a      	ldr	r2, [r3, #24]
 800ab3c:	06d0      	lsls	r0, r2, #27
 800ab3e:	d412      	bmi.n	800ab66 <I2C_WaitOnTXISFlagUntilTimeout+0x9a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab40:	f7ff fc86 	bl	800a450 <HAL_GetTick>
 800ab44:	1b80      	subs	r0, r0, r6
 800ab46:	42a8      	cmp	r0, r5
 800ab48:	d801      	bhi.n	800ab4e <I2C_WaitOnTXISFlagUntilTimeout+0x82>
 800ab4a:	2d00      	cmp	r5, #0
 800ab4c:	d1c2      	bne.n	800aad4 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ab4e:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ab50:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ab52:	430b      	orrs	r3, r1
 800ab54:	e7e2      	b.n	800ab1c <I2C_WaitOnTXISFlagUntilTimeout+0x50>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab56:	f7ff fc7b 	bl	800a450 <HAL_GetTick>
 800ab5a:	1b80      	subs	r0, r0, r6
 800ab5c:	4285      	cmp	r5, r0
 800ab5e:	d3f6      	bcc.n	800ab4e <I2C_WaitOnTXISFlagUntilTimeout+0x82>
 800ab60:	2d00      	cmp	r5, #0
 800ab62:	d0f4      	beq.n	800ab4e <I2C_WaitOnTXISFlagUntilTimeout+0x82>
 800ab64:	6823      	ldr	r3, [r4, #0]
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ab66:	699a      	ldr	r2, [r3, #24]
 800ab68:	0692      	lsls	r2, r2, #26
 800ab6a:	d5f4      	bpl.n	800ab56 <I2C_WaitOnTXISFlagUntilTimeout+0x8a>
 800ab6c:	e7be      	b.n	800aaec <I2C_WaitOnTXISFlagUntilTimeout+0x20>
 800ab6e:	bf00      	nop
 800ab70:	fe00e800 	.word	0xfe00e800

0800ab74 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800ab74:	b570      	push	{r4, r5, r6, lr}
 800ab76:	4604      	mov	r4, r0
 800ab78:	4616      	mov	r6, r2
 800ab7a:	460d      	mov	r5, r1
 800ab7c:	b929      	cbnz	r1, 800ab8a <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
 800ab7e:	e03d      	b.n	800abfc <I2C_WaitOnSTOPFlagUntilTimeout+0x88>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab80:	f7ff fc66 	bl	800a450 <HAL_GetTick>
 800ab84:	1b80      	subs	r0, r0, r6
 800ab86:	4285      	cmp	r5, r0
 800ab88:	d341      	bcc.n	800ac0e <I2C_WaitOnSTOPFlagUntilTimeout+0x9a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ab8a:	6823      	ldr	r3, [r4, #0]
 800ab8c:	699a      	ldr	r2, [r3, #24]
 800ab8e:	0690      	lsls	r0, r2, #26
 800ab90:	d441      	bmi.n	800ac16 <I2C_WaitOnSTOPFlagUntilTimeout+0xa2>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ab92:	699a      	ldr	r2, [r3, #24]
 800ab94:	06d1      	lsls	r1, r2, #27
 800ab96:	d5f3      	bpl.n	800ab80 <I2C_WaitOnSTOPFlagUntilTimeout+0xc>
 800ab98:	1c68      	adds	r0, r5, #1
 800ab9a:	d124      	bne.n	800abe6 <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ab9c:	699a      	ldr	r2, [r3, #24]
 800ab9e:	0691      	lsls	r1, r2, #26
 800aba0:	d5fc      	bpl.n	800ab9c <I2C_WaitOnSTOPFlagUntilTimeout+0x28>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aba2:	2110      	movs	r1, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800aba4:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aba6:	61d9      	str	r1, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800aba8:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800abaa:	699a      	ldr	r2, [r3, #24]
 800abac:	0790      	lsls	r0, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 800abae:	bf44      	itt	mi
 800abb0:	2200      	movmi	r2, #0
 800abb2:	629a      	strmi	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800abb4:	699a      	ldr	r2, [r3, #24]
 800abb6:	07d1      	lsls	r1, r2, #31
 800abb8:	d403      	bmi.n	800abc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800abba:	699a      	ldr	r2, [r3, #24]
 800abbc:	f042 0201 	orr.w	r2, r2, #1
 800abc0:	619a      	str	r2, [r3, #24]
    I2C_RESET_CR2(hi2c);
 800abc2:	685a      	ldr	r2, [r3, #4]
 800abc4:	4915      	ldr	r1, [pc, #84]	; (800ac1c <I2C_WaitOnSTOPFlagUntilTimeout+0xa8>)
 800abc6:	400a      	ands	r2, r1
 800abc8:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800abca:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800abcc:	2120      	movs	r1, #32
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800abce:	f043 0304 	orr.w	r3, r3, #4
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800abd2:	2200      	movs	r2, #0
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800abd4:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 800abd6:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 800abda:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
      return HAL_ERROR;
 800abde:	2001      	movs	r0, #1
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800abe0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 800abe4:	bd70      	pop	{r4, r5, r6, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800abe6:	699a      	ldr	r2, [r3, #24]
 800abe8:	0692      	lsls	r2, r2, #26
 800abea:	d4da      	bmi.n	800aba2 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800abec:	f7ff fc30 	bl	800a450 <HAL_GetTick>
 800abf0:	1b80      	subs	r0, r0, r6
 800abf2:	4285      	cmp	r5, r0
 800abf4:	d30b      	bcc.n	800ac0e <I2C_WaitOnSTOPFlagUntilTimeout+0x9a>
 800abf6:	b155      	cbz	r5, 800ac0e <I2C_WaitOnSTOPFlagUntilTimeout+0x9a>
 800abf8:	6823      	ldr	r3, [r4, #0]
 800abfa:	e7cd      	b.n	800ab98 <I2C_WaitOnSTOPFlagUntilTimeout+0x24>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800abfc:	6803      	ldr	r3, [r0, #0]
 800abfe:	699a      	ldr	r2, [r3, #24]
 800ac00:	0692      	lsls	r2, r2, #26
 800ac02:	d408      	bmi.n	800ac16 <I2C_WaitOnSTOPFlagUntilTimeout+0xa2>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ac04:	699a      	ldr	r2, [r3, #24]
 800ac06:	06d2      	lsls	r2, r2, #27
 800ac08:	d4c6      	bmi.n	800ab98 <I2C_WaitOnSTOPFlagUntilTimeout+0x24>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac0a:	f7ff fc21 	bl	800a450 <HAL_GetTick>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ac0e:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ac10:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ac12:	430b      	orrs	r3, r1
 800ac14:	e7dd      	b.n	800abd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x5e>
  return HAL_OK;
 800ac16:	2000      	movs	r0, #0
}
 800ac18:	bd70      	pop	{r4, r5, r6, pc}
 800ac1a:	bf00      	nop
 800ac1c:	fe00e800 	.word	0xfe00e800

0800ac20 <HAL_I2C_MspInit>:
}
 800ac20:	4770      	bx	lr
 800ac22:	bf00      	nop

0800ac24 <HAL_I2C_Init>:
  if (hi2c == NULL)
 800ac24:	2800      	cmp	r0, #0
 800ac26:	d04e      	beq.n	800acc6 <HAL_I2C_Init+0xa2>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800ac28:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800ac2c:	b570      	push	{r4, r5, r6, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800ac2e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800ac32:	4604      	mov	r4, r0
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d041      	beq.n	800acbc <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800ac38:	2224      	movs	r2, #36	; 0x24
 800ac3a:	1d21      	adds	r1, r4, #4
 800ac3c:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800ac40:	6823      	ldr	r3, [r4, #0]
 800ac42:	c926      	ldmia	r1, {r1, r2, r5}
 800ac44:	6818      	ldr	r0, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800ac46:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
  __HAL_I2C_DISABLE(hi2c);
 800ac4a:	f020 0001 	bic.w	r0, r0, #1
 800ac4e:	6018      	str	r0, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800ac50:	6119      	str	r1, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800ac52:	6899      	ldr	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800ac54:	2d01      	cmp	r5, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800ac56:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 800ac5a:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800ac5c:	d02a      	beq.n	800acb4 <HAL_I2C_Init+0x90>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800ac5e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800ac62:	2d02      	cmp	r5, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800ac64:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800ac66:	bf04      	itt	eq
 800ac68:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 800ac6c:	605a      	streq	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800ac6e:	6859      	ldr	r1, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800ac70:	69a5      	ldr	r5, [r4, #24]
 800ac72:	e9d4 2604 	ldrd	r2, r6, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800ac76:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 800ac7a:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800ac7e:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800ac80:	4332      	orrs	r2, r6
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800ac82:	68d8      	ldr	r0, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800ac84:	69e1      	ldr	r1, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800ac86:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800ac8a:	6a25      	ldr	r5, [r4, #32]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800ac8c:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800ac90:	4329      	orrs	r1, r5
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800ac92:	60d8      	str	r0, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800ac94:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800ac96:	6019      	str	r1, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800ac98:	6819      	ldr	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ac9a:	2200      	movs	r2, #0
  __HAL_I2C_ENABLE(hi2c);
 800ac9c:	f041 0101 	orr.w	r1, r1, #1
  hi2c->State = HAL_I2C_STATE_READY;
 800aca0:	2520      	movs	r5, #32
  __HAL_I2C_ENABLE(hi2c);
 800aca2:	6019      	str	r1, [r3, #0]
  return HAL_OK;
 800aca4:	4610      	mov	r0, r2
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800aca6:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800aca8:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800acac:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800acae:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 800acb2:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800acb4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800acb8:	609a      	str	r2, [r3, #8]
 800acba:	e7d8      	b.n	800ac6e <HAL_I2C_Init+0x4a>
    hi2c->Lock = HAL_UNLOCKED;
 800acbc:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 800acc0:	f7ff ffae 	bl	800ac20 <HAL_I2C_MspInit>
 800acc4:	e7b8      	b.n	800ac38 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 800acc6:	2001      	movs	r0, #1
}
 800acc8:	4770      	bx	lr
 800acca:	bf00      	nop

0800accc <HAL_I2C_MspDeInit>:
 800accc:	4770      	bx	lr
 800acce:	bf00      	nop

0800acd0 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 800acd0:	b1b0      	cbz	r0, 800ad00 <HAL_I2C_DeInit+0x30>
  __HAL_I2C_DISABLE(hi2c);
 800acd2:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800acd4:	2324      	movs	r3, #36	; 0x24
{
 800acd6:	b510      	push	{r4, lr}
  hi2c->State = HAL_I2C_STATE_BUSY;
 800acd8:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800acdc:	6813      	ldr	r3, [r2, #0]
 800acde:	f023 0301 	bic.w	r3, r3, #1
 800ace2:	4604      	mov	r4, r0
 800ace4:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 800ace6:	f7ff fff1 	bl	800accc <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800acea:	2300      	movs	r3, #0
 800acec:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
 800acee:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 800acf2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  return HAL_OK;
 800acf6:	4618      	mov	r0, r3
  hi2c->PreviousState = I2C_STATE_NONE;
 800acf8:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800acfa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
 800acfe:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800ad00:	2001      	movs	r0, #1
}
 800ad02:	4770      	bx	lr

0800ad04 <HAL_I2C_Mem_Write>:
{
 800ad04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 800ad08:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
{
 800ad0c:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
  if (hi2c->State == HAL_I2C_STATE_READY)
 800ad10:	2c20      	cmp	r4, #32
 800ad12:	f040 809e 	bne.w	800ae52 <HAL_I2C_Mem_Write+0x14e>
    if ((pData == NULL) || (Size == 0U))
 800ad16:	9c08      	ldr	r4, [sp, #32]
 800ad18:	2c00      	cmp	r4, #0
 800ad1a:	f000 809d 	beq.w	800ae58 <HAL_I2C_Mem_Write+0x154>
 800ad1e:	2e00      	cmp	r6, #0
 800ad20:	f000 809a 	beq.w	800ae58 <HAL_I2C_Mem_Write+0x154>
    __HAL_LOCK(hi2c);
 800ad24:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 800ad28:	2c01      	cmp	r4, #1
 800ad2a:	f000 8092 	beq.w	800ae52 <HAL_I2C_Mem_Write+0x14e>
 800ad2e:	461f      	mov	r7, r3
 800ad30:	2301      	movs	r3, #1
 800ad32:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800ad36:	4690      	mov	r8, r2
 800ad38:	460d      	mov	r5, r1
 800ad3a:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 800ad3c:	f7ff fb88 	bl	800a450 <HAL_GetTick>
 800ad40:	4681      	mov	r9, r0
 800ad42:	e006      	b.n	800ad52 <HAL_I2C_Mem_Write+0x4e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ad44:	f7ff fb84 	bl	800a450 <HAL_GetTick>
 800ad48:	eba0 0009 	sub.w	r0, r0, r9
 800ad4c:	2819      	cmp	r0, #25
 800ad4e:	f200 8089 	bhi.w	800ae64 <HAL_I2C_Mem_Write+0x160>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ad52:	6823      	ldr	r3, [r4, #0]
 800ad54:	6998      	ldr	r0, [r3, #24]
 800ad56:	f410 4000 	ands.w	r0, r0, #32768	; 0x8000
 800ad5a:	d1f3      	bne.n	800ad44 <HAL_I2C_Mem_Write+0x40>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800ad5c:	2121      	movs	r1, #33	; 0x21
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800ad5e:	2240      	movs	r2, #64	; 0x40
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800ad60:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800ad64:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ad68:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 800ad6a:	8566      	strh	r6, [r4, #42]	; 0x2a
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800ad6c:	685a      	ldr	r2, [r3, #4]
 800ad6e:	4e72      	ldr	r6, [pc, #456]	; (800af38 <HAL_I2C_Mem_Write+0x234>)
 800ad70:	f8df c1d0 	ldr.w	ip, [pc, #464]	; 800af44 <HAL_I2C_Mem_Write+0x240>
    hi2c->pBuffPtr  = pData;
 800ad74:	9908      	ldr	r1, [sp, #32]
 800ad76:	6261      	str	r1, [r4, #36]	; 0x24
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800ad78:	4032      	ands	r2, r6
 800ad7a:	b2fe      	uxtb	r6, r7
 800ad7c:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800ad80:	ea4c 4106 	orr.w	r1, ip, r6, lsl #16
 800ad84:	4329      	orrs	r1, r5
 800ad86:	4311      	orrs	r1, r2
    hi2c->XferISR   = NULL;
 800ad88:	6360      	str	r0, [r4, #52]	; 0x34
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ad8a:	464a      	mov	r2, r9
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800ad8c:	6059      	str	r1, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ad8e:	4620      	mov	r0, r4
 800ad90:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ad92:	f7ff fe9b 	bl	800aacc <I2C_WaitOnTXISFlagUntilTimeout>
 800ad96:	2800      	cmp	r0, #0
 800ad98:	d17a      	bne.n	800ae90 <HAL_I2C_Mem_Write+0x18c>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ad9a:	2f01      	cmp	r7, #1
 800ad9c:	6822      	ldr	r2, [r4, #0]
 800ad9e:	d00a      	beq.n	800adb6 <HAL_I2C_Mem_Write+0xb2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800ada0:	ea4f 2318 	mov.w	r3, r8, lsr #8
 800ada4:	6293      	str	r3, [r2, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ada6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ada8:	464a      	mov	r2, r9
 800adaa:	4620      	mov	r0, r4
 800adac:	f7ff fe8e 	bl	800aacc <I2C_WaitOnTXISFlagUntilTimeout>
 800adb0:	2800      	cmp	r0, #0
 800adb2:	d16d      	bne.n	800ae90 <HAL_I2C_Mem_Write+0x18c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800adb4:	6822      	ldr	r2, [r4, #0]
 800adb6:	fa5f f388 	uxtb.w	r3, r8
 800adba:	6293      	str	r3, [r2, #40]	; 0x28
 800adbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800adbe:	3301      	adds	r3, #1
 800adc0:	d179      	bne.n	800aeb6 <HAL_I2C_Mem_Write+0x1b2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800adc2:	6993      	ldr	r3, [r2, #24]
 800adc4:	061e      	lsls	r6, r3, #24
 800adc6:	d5fc      	bpl.n	800adc2 <HAL_I2C_Mem_Write+0xbe>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800adc8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800adca:	2bff      	cmp	r3, #255	; 0xff
 800adcc:	f240 8091 	bls.w	800aef2 <HAL_I2C_Mem_Write+0x1ee>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800add0:	6853      	ldr	r3, [r2, #4]
 800add2:	485a      	ldr	r0, [pc, #360]	; (800af3c <HAL_I2C_Mem_Write+0x238>)
 800add4:	f045 71ff 	orr.w	r1, r5, #33423360	; 0x1fe0000
 800add8:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800addc:	4003      	ands	r3, r0
 800adde:	430b      	orrs	r3, r1
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ade0:	21ff      	movs	r1, #255	; 0xff
 800ade2:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800ade4:	6053      	str	r3, [r2, #4]
 800ade6:	f045 76ff 	orr.w	r6, r5, #33423360	; 0x1fe0000
 800adea:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
 800adee:	4f53      	ldr	r7, [pc, #332]	; (800af3c <HAL_I2C_Mem_Write+0x238>)
 800adf0:	e004      	b.n	800adfc <HAL_I2C_Mem_Write+0xf8>
    while (hi2c->XferCount > 0U);
 800adf2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800adf4:	b29b      	uxth	r3, r3
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	f000 8089 	beq.w	800af0e <HAL_I2C_Mem_Write+0x20a>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800adfc:	464a      	mov	r2, r9
 800adfe:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ae00:	4620      	mov	r0, r4
 800ae02:	f7ff fe63 	bl	800aacc <I2C_WaitOnTXISFlagUntilTimeout>
 800ae06:	2800      	cmp	r0, #0
 800ae08:	d171      	bne.n	800aeee <HAL_I2C_Mem_Write+0x1ea>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800ae0a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ae0c:	6822      	ldr	r2, [r4, #0]
 800ae0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae12:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
 800ae14:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 800ae16:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800ae18:	3b01      	subs	r3, #1
 800ae1a:	b29b      	uxth	r3, r3
 800ae1c:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800ae1e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ae20:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800ae22:	3b01      	subs	r3, #1
 800ae24:	b29b      	uxth	r3, r3
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ae26:	b289      	uxth	r1, r1
      hi2c->XferSize--;
 800ae28:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ae2a:	2900      	cmp	r1, #0
 800ae2c:	d0e1      	beq.n	800adf2 <HAL_I2C_Mem_Write+0xee>
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d1df      	bne.n	800adf2 <HAL_I2C_Mem_Write+0xee>
 800ae32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae34:	3301      	adds	r3, #1
 800ae36:	d130      	bne.n	800ae9a <HAL_I2C_Mem_Write+0x196>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ae38:	6993      	ldr	r3, [r2, #24]
 800ae3a:	0619      	lsls	r1, r3, #24
 800ae3c:	d5fc      	bpl.n	800ae38 <HAL_I2C_Mem_Write+0x134>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ae3e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800ae40:	2bff      	cmp	r3, #255	; 0xff
 800ae42:	d946      	bls.n	800aed2 <HAL_I2C_Mem_Write+0x1ce>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800ae44:	6853      	ldr	r3, [r2, #4]
 800ae46:	403b      	ands	r3, r7
 800ae48:	4333      	orrs	r3, r6
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800ae4a:	21ff      	movs	r1, #255	; 0xff
 800ae4c:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800ae4e:	6053      	str	r3, [r2, #4]
 800ae50:	e7cf      	b.n	800adf2 <HAL_I2C_Mem_Write+0xee>
    return HAL_BUSY;
 800ae52:	2002      	movs	r0, #2
}
 800ae54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800ae58:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ae5c:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 800ae5e:	2001      	movs	r0, #1
}
 800ae60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ae64:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ae66:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ae68:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ae6a:	430b      	orrs	r3, r1
 800ae6c:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800ae6e:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 800ae72:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
          return HAL_ERROR;
 800ae76:	2001      	movs	r0, #1
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ae78:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800ae7c:	e7ea      	b.n	800ae54 <HAL_I2C_Mem_Write+0x150>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ae7e:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ae80:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ae82:	430b      	orrs	r3, r1
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ae84:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ae86:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ae88:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ae8c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800ae90:	2300      	movs	r3, #0
 800ae92:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800ae96:	2001      	movs	r0, #1
 800ae98:	e7dc      	b.n	800ae54 <HAL_I2C_Mem_Write+0x150>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ae9a:	6993      	ldr	r3, [r2, #24]
 800ae9c:	061b      	lsls	r3, r3, #24
 800ae9e:	d4ce      	bmi.n	800ae3e <HAL_I2C_Mem_Write+0x13a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aea0:	f7ff fad6 	bl	800a450 <HAL_GetTick>
 800aea4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aea6:	eba0 0009 	sub.w	r0, r0, r9
 800aeaa:	4283      	cmp	r3, r0
 800aeac:	d3da      	bcc.n	800ae64 <HAL_I2C_Mem_Write+0x160>
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d0d8      	beq.n	800ae64 <HAL_I2C_Mem_Write+0x160>
 800aeb2:	6822      	ldr	r2, [r4, #0]
 800aeb4:	e7be      	b.n	800ae34 <HAL_I2C_Mem_Write+0x130>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800aeb6:	6993      	ldr	r3, [r2, #24]
 800aeb8:	0618      	lsls	r0, r3, #24
 800aeba:	d485      	bmi.n	800adc8 <HAL_I2C_Mem_Write+0xc4>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aebc:	f7ff fac8 	bl	800a450 <HAL_GetTick>
 800aec0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aec2:	eba0 0009 	sub.w	r0, r0, r9
 800aec6:	4283      	cmp	r3, r0
 800aec8:	d3d9      	bcc.n	800ae7e <HAL_I2C_Mem_Write+0x17a>
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d0d7      	beq.n	800ae7e <HAL_I2C_Mem_Write+0x17a>
 800aece:	6822      	ldr	r2, [r4, #0]
 800aed0:	e775      	b.n	800adbe <HAL_I2C_Mem_Write+0xba>
          hi2c->XferSize = hi2c->XferCount;
 800aed2:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800aed4:	6850      	ldr	r0, [r2, #4]
          hi2c->XferSize = hi2c->XferCount;
 800aed6:	b289      	uxth	r1, r1
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800aed8:	fa5f fc81 	uxtb.w	ip, r1
 800aedc:	f045 7300 	orr.w	r3, r5, #33554432	; 0x2000000
 800aee0:	4038      	ands	r0, r7
 800aee2:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 800aee6:	4303      	orrs	r3, r0
          hi2c->XferSize = hi2c->XferCount;
 800aee8:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800aeea:	6053      	str	r3, [r2, #4]
 800aeec:	e781      	b.n	800adf2 <HAL_I2C_Mem_Write+0xee>
        return HAL_ERROR;
 800aeee:	2001      	movs	r0, #1
 800aef0:	e7b0      	b.n	800ae54 <HAL_I2C_Mem_Write+0x150>
      hi2c->XferSize = hi2c->XferCount;
 800aef2:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800aef4:	4811      	ldr	r0, [pc, #68]	; (800af3c <HAL_I2C_Mem_Write+0x238>)
 800aef6:	6853      	ldr	r3, [r2, #4]
      hi2c->XferSize = hi2c->XferCount;
 800aef8:	b289      	uxth	r1, r1
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800aefa:	4018      	ands	r0, r3
 800aefc:	b2ce      	uxtb	r6, r1
 800aefe:	f045 7300 	orr.w	r3, r5, #33554432	; 0x2000000
 800af02:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800af06:	4303      	orrs	r3, r0
      hi2c->XferSize = hi2c->XferCount;
 800af08:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800af0a:	6053      	str	r3, [r2, #4]
 800af0c:	e76b      	b.n	800ade6 <HAL_I2C_Mem_Write+0xe2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800af0e:	464a      	mov	r2, r9
 800af10:	990a      	ldr	r1, [sp, #40]	; 0x28
 800af12:	4620      	mov	r0, r4
 800af14:	f7ff fe2e 	bl	800ab74 <I2C_WaitOnSTOPFlagUntilTimeout>
 800af18:	2800      	cmp	r0, #0
 800af1a:	d1e8      	bne.n	800aeee <HAL_I2C_Mem_Write+0x1ea>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800af1c:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 800af1e:	4d08      	ldr	r5, [pc, #32]	; (800af40 <HAL_I2C_Mem_Write+0x23c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800af20:	2120      	movs	r1, #32
 800af22:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800af24:	685a      	ldr	r2, [r3, #4]
 800af26:	402a      	ands	r2, r5
 800af28:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800af2a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800af2e:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800af32:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800af36:	e78d      	b.n	800ae54 <HAL_I2C_Mem_Write+0x150>
 800af38:	fc009800 	.word	0xfc009800
 800af3c:	fc009c00 	.word	0xfc009c00
 800af40:	fe00e800 	.word	0xfe00e800
 800af44:	81002000 	.word	0x81002000

0800af48 <HAL_I2C_Mem_Read>:
{
 800af48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 800af4c:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
{
 800af50:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
 800af54:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 800af56:	2c20      	cmp	r4, #32
 800af58:	f040 808c 	bne.w	800b074 <HAL_I2C_Mem_Read+0x12c>
    if ((pData == NULL) || (Size == 0U))
 800af5c:	9c08      	ldr	r4, [sp, #32]
 800af5e:	2c00      	cmp	r4, #0
 800af60:	f000 808b 	beq.w	800b07a <HAL_I2C_Mem_Read+0x132>
 800af64:	f1ba 0f00 	cmp.w	sl, #0
 800af68:	f000 8087 	beq.w	800b07a <HAL_I2C_Mem_Read+0x132>
    __HAL_LOCK(hi2c);
 800af6c:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 800af70:	2c01      	cmp	r4, #1
 800af72:	d07f      	beq.n	800b074 <HAL_I2C_Mem_Read+0x12c>
 800af74:	4698      	mov	r8, r3
 800af76:	2301      	movs	r3, #1
 800af78:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800af7c:	4691      	mov	r9, r2
 800af7e:	460f      	mov	r7, r1
 800af80:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 800af82:	f7ff fa65 	bl	800a450 <HAL_GetTick>
 800af86:	4606      	mov	r6, r0
 800af88:	e005      	b.n	800af96 <HAL_I2C_Mem_Read+0x4e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800af8a:	f7ff fa61 	bl	800a450 <HAL_GetTick>
 800af8e:	1b80      	subs	r0, r0, r6
 800af90:	2819      	cmp	r0, #25
 800af92:	f200 8081 	bhi.w	800b098 <HAL_I2C_Mem_Read+0x150>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800af96:	6823      	ldr	r3, [r4, #0]
 800af98:	6998      	ldr	r0, [r3, #24]
 800af9a:	f410 4000 	ands.w	r0, r0, #32768	; 0x8000
 800af9e:	d1f4      	bne.n	800af8a <HAL_I2C_Mem_Read+0x42>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800afa0:	2122      	movs	r1, #34	; 0x22
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800afa2:	2240      	movs	r2, #64	; 0x40
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800afa4:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800afa8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800afac:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 800afae:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800afb2:	685a      	ldr	r2, [r3, #4]
 800afb4:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 800b190 <HAL_I2C_Mem_Read+0x248>
 800afb8:	f8df e1e0 	ldr.w	lr, [pc, #480]	; 800b19c <HAL_I2C_Mem_Read+0x254>
    hi2c->pBuffPtr  = pData;
 800afbc:	9908      	ldr	r1, [sp, #32]
 800afbe:	6261      	str	r1, [r4, #36]	; 0x24
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800afc0:	ea02 020c 	and.w	r2, r2, ip
 800afc4:	fa5f fc88 	uxtb.w	ip, r8
 800afc8:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800afcc:	ea4e 410c 	orr.w	r1, lr, ip, lsl #16
 800afd0:	4339      	orrs	r1, r7
 800afd2:	4311      	orrs	r1, r2
    hi2c->XferISR   = NULL;
 800afd4:	6360      	str	r0, [r4, #52]	; 0x34
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800afd6:	4632      	mov	r2, r6
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800afd8:	6059      	str	r1, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800afda:	4620      	mov	r0, r4
 800afdc:	4629      	mov	r1, r5
 800afde:	f7ff fd75 	bl	800aacc <I2C_WaitOnTXISFlagUntilTimeout>
 800afe2:	2800      	cmp	r0, #0
 800afe4:	d16e      	bne.n	800b0c4 <HAL_I2C_Mem_Read+0x17c>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800afe6:	f1b8 0f01 	cmp.w	r8, #1
 800afea:	6821      	ldr	r1, [r4, #0]
 800afec:	d00a      	beq.n	800b004 <HAL_I2C_Mem_Read+0xbc>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800afee:	ea4f 2319 	mov.w	r3, r9, lsr #8
 800aff2:	628b      	str	r3, [r1, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800aff4:	4632      	mov	r2, r6
 800aff6:	4629      	mov	r1, r5
 800aff8:	4620      	mov	r0, r4
 800affa:	f7ff fd67 	bl	800aacc <I2C_WaitOnTXISFlagUntilTimeout>
 800affe:	2800      	cmp	r0, #0
 800b000:	d160      	bne.n	800b0c4 <HAL_I2C_Mem_Read+0x17c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b002:	6821      	ldr	r1, [r4, #0]
 800b004:	fa5f f389 	uxtb.w	r3, r9
 800b008:	628b      	str	r3, [r1, #40]	; 0x28
 800b00a:	1c68      	adds	r0, r5, #1
 800b00c:	d17c      	bne.n	800b108 <HAL_I2C_Mem_Read+0x1c0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b00e:	698b      	ldr	r3, [r1, #24]
 800b010:	065a      	lsls	r2, r3, #25
 800b012:	d5fc      	bpl.n	800b00e <HAL_I2C_Mem_Read+0xc6>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b014:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b016:	2bff      	cmp	r3, #255	; 0xff
 800b018:	f240 8091 	bls.w	800b13e <HAL_I2C_Mem_Read+0x1f6>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800b01c:	684b      	ldr	r3, [r1, #4]
 800b01e:	485c      	ldr	r0, [pc, #368]	; (800b190 <HAL_I2C_Mem_Read+0x248>)
 800b020:	4a5c      	ldr	r2, [pc, #368]	; (800b194 <HAL_I2C_Mem_Read+0x24c>)
 800b022:	4003      	ands	r3, r0
 800b024:	433a      	orrs	r2, r7
 800b026:	4313      	orrs	r3, r2
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b028:	22ff      	movs	r2, #255	; 0xff
 800b02a:	8522      	strh	r2, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800b02c:	604b      	str	r3, [r1, #4]
 800b02e:	f047 78ff 	orr.w	r8, r7, #33423360	; 0x1fe0000
 800b032:	f8df 916c 	ldr.w	r9, [pc, #364]	; 800b1a0 <HAL_I2C_Mem_Read+0x258>
 800b036:	f448 3880 	orr.w	r8, r8, #65536	; 0x10000
 800b03a:	1c68      	adds	r0, r5, #1
 800b03c:	d159      	bne.n	800b0f2 <HAL_I2C_Mem_Read+0x1aa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b03e:	698b      	ldr	r3, [r1, #24]
 800b040:	075a      	lsls	r2, r3, #29
 800b042:	d5fc      	bpl.n	800b03e <HAL_I2C_Mem_Read+0xf6>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b044:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b046:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 800b048:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 800b04a:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800b04c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 800b04e:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800b050:	3901      	subs	r1, #1
 800b052:	b289      	uxth	r1, r1
 800b054:	8561      	strh	r1, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b056:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800b058:	3b01      	subs	r3, #1
 800b05a:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 800b05c:	3201      	adds	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b05e:	b289      	uxth	r1, r1
      hi2c->XferSize--;
 800b060:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 800b062:	6262      	str	r2, [r4, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b064:	b101      	cbz	r1, 800b068 <HAL_I2C_Mem_Read+0x120>
 800b066:	b393      	cbz	r3, 800b0ce <HAL_I2C_Mem_Read+0x186>
    while (hi2c->XferCount > 0U);
 800b068:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b06a:	b29b      	uxth	r3, r3
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d079      	beq.n	800b164 <HAL_I2C_Mem_Read+0x21c>
 800b070:	6821      	ldr	r1, [r4, #0]
 800b072:	e7e2      	b.n	800b03a <HAL_I2C_Mem_Read+0xf2>
    return HAL_BUSY;
 800b074:	2002      	movs	r0, #2
}
 800b076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800b07a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b07e:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 800b080:	2001      	movs	r0, #1
}
 800b082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b086:	6993      	ldr	r3, [r2, #24]
 800b088:	061b      	lsls	r3, r3, #24
 800b08a:	d426      	bmi.n	800b0da <HAL_I2C_Mem_Read+0x192>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b08c:	f7ff f9e0 	bl	800a450 <HAL_GetTick>
 800b090:	1b80      	subs	r0, r0, r6
 800b092:	4285      	cmp	r5, r0
 800b094:	d300      	bcc.n	800b098 <HAL_I2C_Mem_Read+0x150>
 800b096:	b9d5      	cbnz	r5, 800b0ce <HAL_I2C_Mem_Read+0x186>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b098:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b09a:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b09c:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b09e:	430b      	orrs	r3, r1
 800b0a0:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800b0a2:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 800b0a6:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
          return HAL_ERROR;
 800b0aa:	2001      	movs	r0, #1
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b0ac:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800b0b0:	e7e1      	b.n	800b076 <HAL_I2C_Mem_Read+0x12e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b0b2:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b0b4:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b0b6:	430b      	orrs	r3, r1
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b0b8:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b0ba:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b0bc:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b0c0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800b0ca:	2001      	movs	r0, #1
 800b0cc:	e7d3      	b.n	800b076 <HAL_I2C_Mem_Read+0x12e>
 800b0ce:	1c68      	adds	r0, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b0d0:	6822      	ldr	r2, [r4, #0]
 800b0d2:	d1d8      	bne.n	800b086 <HAL_I2C_Mem_Read+0x13e>
 800b0d4:	6993      	ldr	r3, [r2, #24]
 800b0d6:	0619      	lsls	r1, r3, #24
 800b0d8:	d5fc      	bpl.n	800b0d4 <HAL_I2C_Mem_Read+0x18c>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b0da:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b0dc:	2bff      	cmp	r3, #255	; 0xff
 800b0de:	d91f      	bls.n	800b120 <HAL_I2C_Mem_Read+0x1d8>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800b0e0:	6853      	ldr	r3, [r2, #4]
 800b0e2:	ea03 0309 	and.w	r3, r3, r9
 800b0e6:	ea43 0308 	orr.w	r3, r3, r8
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b0ea:	21ff      	movs	r1, #255	; 0xff
 800b0ec:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800b0ee:	6053      	str	r3, [r2, #4]
 800b0f0:	e7ba      	b.n	800b068 <HAL_I2C_Mem_Read+0x120>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b0f2:	698b      	ldr	r3, [r1, #24]
 800b0f4:	075b      	lsls	r3, r3, #29
 800b0f6:	d4a5      	bmi.n	800b044 <HAL_I2C_Mem_Read+0xfc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b0f8:	f7ff f9aa 	bl	800a450 <HAL_GetTick>
 800b0fc:	1b80      	subs	r0, r0, r6
 800b0fe:	4285      	cmp	r5, r0
 800b100:	d3ca      	bcc.n	800b098 <HAL_I2C_Mem_Read+0x150>
 800b102:	2d00      	cmp	r5, #0
 800b104:	d1b4      	bne.n	800b070 <HAL_I2C_Mem_Read+0x128>
 800b106:	e7c7      	b.n	800b098 <HAL_I2C_Mem_Read+0x150>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b108:	698b      	ldr	r3, [r1, #24]
 800b10a:	065b      	lsls	r3, r3, #25
 800b10c:	d482      	bmi.n	800b014 <HAL_I2C_Mem_Read+0xcc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b10e:	f7ff f99f 	bl	800a450 <HAL_GetTick>
 800b112:	1b80      	subs	r0, r0, r6
 800b114:	4285      	cmp	r5, r0
 800b116:	d3cc      	bcc.n	800b0b2 <HAL_I2C_Mem_Read+0x16a>
 800b118:	2d00      	cmp	r5, #0
 800b11a:	d0ca      	beq.n	800b0b2 <HAL_I2C_Mem_Read+0x16a>
 800b11c:	6821      	ldr	r1, [r4, #0]
 800b11e:	e774      	b.n	800b00a <HAL_I2C_Mem_Read+0xc2>
          hi2c->XferSize = hi2c->XferCount;
 800b120:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800b122:	6850      	ldr	r0, [r2, #4]
          hi2c->XferSize = hi2c->XferCount;
 800b124:	b289      	uxth	r1, r1
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800b126:	fa5f fc81 	uxtb.w	ip, r1
 800b12a:	f047 7300 	orr.w	r3, r7, #33554432	; 0x2000000
 800b12e:	ea00 0009 	and.w	r0, r0, r9
 800b132:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 800b136:	4303      	orrs	r3, r0
          hi2c->XferSize = hi2c->XferCount;
 800b138:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800b13a:	6053      	str	r3, [r2, #4]
 800b13c:	e794      	b.n	800b068 <HAL_I2C_Mem_Read+0x120>
      hi2c->XferSize = hi2c->XferCount;
 800b13e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800b140:	f8df c04c 	ldr.w	ip, [pc, #76]	; 800b190 <HAL_I2C_Mem_Read+0x248>
 800b144:	6848      	ldr	r0, [r1, #4]
      hi2c->XferSize = hi2c->XferCount;
 800b146:	b292      	uxth	r2, r2
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800b148:	f047 4302 	orr.w	r3, r7, #2181038080	; 0x82000000
 800b14c:	ea00 000c 	and.w	r0, r0, ip
 800b150:	f443 5310 	orr.w	r3, r3, #9216	; 0x2400
 800b154:	fa5f fc82 	uxtb.w	ip, r2
 800b158:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 800b15c:	4303      	orrs	r3, r0
      hi2c->XferSize = hi2c->XferCount;
 800b15e:	8522      	strh	r2, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800b160:	604b      	str	r3, [r1, #4]
 800b162:	e764      	b.n	800b02e <HAL_I2C_Mem_Read+0xe6>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b164:	4632      	mov	r2, r6
 800b166:	4629      	mov	r1, r5
 800b168:	4620      	mov	r0, r4
 800b16a:	f7ff fd03 	bl	800ab74 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b16e:	b968      	cbnz	r0, 800b18c <HAL_I2C_Mem_Read+0x244>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b170:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 800b172:	4d09      	ldr	r5, [pc, #36]	; (800b198 <HAL_I2C_Mem_Read+0x250>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b174:	2120      	movs	r1, #32
 800b176:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800b178:	685a      	ldr	r2, [r3, #4]
 800b17a:	402a      	ands	r2, r5
 800b17c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800b17e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800b182:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b186:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800b18a:	e774      	b.n	800b076 <HAL_I2C_Mem_Read+0x12e>
      return HAL_ERROR;
 800b18c:	2001      	movs	r0, #1
 800b18e:	e772      	b.n	800b076 <HAL_I2C_Mem_Read+0x12e>
 800b190:	fc009800 	.word	0xfc009800
 800b194:	81ff2400 	.word	0x81ff2400
 800b198:	fe00e800 	.word	0xfe00e800
 800b19c:	80002000 	.word	0x80002000
 800b1a0:	fc009c00 	.word	0xfc009c00

0800b1a4 <HAL_I2C_GetState>:
  return hi2c->State;
 800b1a4:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 800b1a8:	4770      	bx	lr
 800b1aa:	bf00      	nop

0800b1ac <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 800b1ac:	6c40      	ldr	r0, [r0, #68]	; 0x44
}
 800b1ae:	4770      	bx	lr

0800b1b0 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b1b0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800b1b4:	b2db      	uxtb	r3, r3
 800b1b6:	2b20      	cmp	r3, #32
 800b1b8:	d120      	bne.n	800b1fc <HAL_I2CEx_ConfigAnalogFilter+0x4c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b1ba:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 800b1be:	2a01      	cmp	r2, #1
 800b1c0:	d01c      	beq.n	800b1fc <HAL_I2CEx_ConfigAnalogFilter+0x4c>
{
 800b1c2:	b410      	push	{r4}

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b1c4:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800b1c6:	2424      	movs	r4, #36	; 0x24
 800b1c8:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 800b1cc:	6814      	ldr	r4, [r2, #0]
 800b1ce:	f024 0401 	bic.w	r4, r4, #1
 800b1d2:	6014      	str	r4, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b1d4:	6814      	ldr	r4, [r2, #0]
 800b1d6:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 800b1da:	6014      	str	r4, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800b1dc:	6814      	ldr	r4, [r2, #0]
 800b1de:	4321      	orrs	r1, r4
 800b1e0:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b1e2:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b1e4:	2400      	movs	r4, #0
    __HAL_I2C_ENABLE(hi2c);
 800b1e6:	f041 0101 	orr.w	r1, r1, #1
 800b1ea:	6011      	str	r1, [r2, #0]
    __HAL_UNLOCK(hi2c);
 800b1ec:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 800b1f0:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  }
  else
  {
    return HAL_BUSY;
  }
}
 800b1f4:	4620      	mov	r0, r4
 800b1f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b1fa:	4770      	bx	lr
    return HAL_BUSY;
 800b1fc:	2202      	movs	r2, #2
}
 800b1fe:	4610      	mov	r0, r2
 800b200:	4770      	bx	lr
 800b202:	bf00      	nop

0800b204 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b204:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800b208:	b2db      	uxtb	r3, r3
 800b20a:	2b20      	cmp	r3, #32
 800b20c:	d11f      	bne.n	800b24e <HAL_I2CEx_ConfigDigitalFilter+0x4a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b20e:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 800b212:	2a01      	cmp	r2, #1
 800b214:	d01b      	beq.n	800b24e <HAL_I2CEx_ConfigDigitalFilter+0x4a>
{
 800b216:	b410      	push	{r4}

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b218:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800b21a:	2424      	movs	r4, #36	; 0x24
 800b21c:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 800b220:	6814      	ldr	r4, [r2, #0]
 800b222:	f024 0401 	bic.w	r4, r4, #1
 800b226:	6014      	str	r4, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800b228:	6814      	ldr	r4, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800b22a:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800b22e:	ea44 2101 	orr.w	r1, r4, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800b232:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b234:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b236:	2400      	movs	r4, #0
    __HAL_I2C_ENABLE(hi2c);
 800b238:	f041 0101 	orr.w	r1, r1, #1
 800b23c:	6011      	str	r1, [r2, #0]
    __HAL_UNLOCK(hi2c);
 800b23e:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 800b242:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  }
  else
  {
    return HAL_BUSY;
  }
}
 800b246:	4620      	mov	r0, r4
 800b248:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b24c:	4770      	bx	lr
    return HAL_BUSY;
 800b24e:	2202      	movs	r2, #2
}
 800b250:	4610      	mov	r0, r2
 800b252:	4770      	bx	lr

0800b254 <HAL_PWR_EnableBkUpAccess>:
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b254:	4a02      	ldr	r2, [pc, #8]	; (800b260 <HAL_PWR_EnableBkUpAccess+0xc>)
 800b256:	6813      	ldr	r3, [r2, #0]
 800b258:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b25c:	6013      	str	r3, [r2, #0]
}
 800b25e:	4770      	bx	lr
 800b260:	58000400 	.word	0x58000400

0800b264 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return  (PWR->CR1 & PWR_CR1_VOS);
 800b264:	4b02      	ldr	r3, [pc, #8]	; (800b270 <HAL_PWREx_GetVoltageRange+0xc>)
 800b266:	6818      	ldr	r0, [r3, #0]
}
 800b268:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 800b26c:	4770      	bx	lr
 800b26e:	bf00      	nop
 800b270:	58000400 	.word	0x58000400

0800b274 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800b274:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800b276:	28b0      	cmp	r0, #176	; 0xb0
{
 800b278:	b089      	sub	sp, #36	; 0x24
  if (MSI_Range > RCC_MSIRANGE_11)
 800b27a:	d846      	bhi.n	800b30a <RCC_SetFlashLatencyFromMSIRange+0x96>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800b27c:	0900      	lsrs	r0, r0, #4
 800b27e:	4b31      	ldr	r3, [pc, #196]	; (800b344 <RCC_SetFlashLatencyFromMSIRange+0xd0>)
 800b280:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800b284:	4930      	ldr	r1, [pc, #192]	; (800b348 <RCC_SetFlashLatencyFromMSIRange+0xd4>)

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800b286:	4a31      	ldr	r2, [pc, #196]	; (800b34c <RCC_SetFlashLatencyFromMSIRange+0xd8>)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800b288:	4c31      	ldr	r4, [pc, #196]	; (800b350 <RCC_SetFlashLatencyFromMSIRange+0xdc>)
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800b28a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b28e:	466e      	mov	r6, sp
 800b290:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800b294:	f003 030f 	and.w	r3, r3, #15
 800b298:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b29c:	fbb5 f5f3 	udiv	r5, r5, r3
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800b2a0:	fba2 3505 	umull	r3, r5, r2, r5
 800b2a4:	f7ff ffde 	bl	800b264 <HAL_PWREx_GetVoltageRange>
 800b2a8:	4607      	mov	r7, r0
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800b2aa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800b2ae:	3410      	adds	r4, #16
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800b2b0:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800b2b4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b2b8:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800b2bc:	ac08      	add	r4, sp, #32
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800b2be:	ea4f 4595 	mov.w	r5, r5, lsr #18
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800b2c2:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b2c6:	d023      	beq.n	800b310 <RCC_SetFlashLatencyFromMSIRange+0x9c>
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800b2c8:	2d06      	cmp	r5, #6
 800b2ca:	d935      	bls.n	800b338 <RCC_SetFlashLatencyFromMSIRange+0xc4>
 800b2cc:	2d0c      	cmp	r5, #12
 800b2ce:	d935      	bls.n	800b33c <RCC_SetFlashLatencyFromMSIRange+0xc8>
 800b2d0:	2d10      	cmp	r5, #16
 800b2d2:	d935      	bls.n	800b340 <RCC_SetFlashLatencyFromMSIRange+0xcc>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800b2d4:	2500      	movs	r5, #0
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 800b2d6:	4c1f      	ldr	r4, [pc, #124]	; (800b354 <RCC_SetFlashLatencyFromMSIRange+0xe0>)
 800b2d8:	6823      	ldr	r3, [r4, #0]
 800b2da:	f023 0307 	bic.w	r3, r3, #7
 800b2de:	432b      	orrs	r3, r5
 800b2e0:	6023      	str	r3, [r4, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b2e2:	f7ff f8b5 	bl	800a450 <HAL_GetTick>
 800b2e6:	4606      	mov	r6, r0
 800b2e8:	e004      	b.n	800b2f4 <RCC_SetFlashLatencyFromMSIRange+0x80>

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800b2ea:	f7ff f8b1 	bl	800a450 <HAL_GetTick>
 800b2ee:	1b80      	subs	r0, r0, r6
 800b2f0:	2802      	cmp	r0, #2
 800b2f2:	d807      	bhi.n	800b304 <RCC_SetFlashLatencyFromMSIRange+0x90>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800b2f4:	6823      	ldr	r3, [r4, #0]
 800b2f6:	f003 0307 	and.w	r3, r3, #7
 800b2fa:	429d      	cmp	r5, r3
 800b2fc:	d1f5      	bne.n	800b2ea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 800b2fe:	2000      	movs	r0, #0
}
 800b300:	b009      	add	sp, #36	; 0x24
 800b302:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_TIMEOUT;
 800b304:	2003      	movs	r0, #3
}
 800b306:	b009      	add	sp, #36	; 0x24
 800b308:	bdf0      	pop	{r4, r5, r6, r7, pc}
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800b30a:	4b0e      	ldr	r3, [pc, #56]	; (800b344 <RCC_SetFlashLatencyFromMSIRange+0xd0>)
 800b30c:	6add      	ldr	r5, [r3, #44]	; 0x2c
 800b30e:	e7b9      	b.n	800b284 <RCC_SetFlashLatencyFromMSIRange+0x10>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800b310:	9b00      	ldr	r3, [sp, #0]
 800b312:	429d      	cmp	r5, r3
 800b314:	d910      	bls.n	800b338 <RCC_SetFlashLatencyFromMSIRange+0xc4>
 800b316:	9b01      	ldr	r3, [sp, #4]
 800b318:	429d      	cmp	r5, r3
 800b31a:	d90f      	bls.n	800b33c <RCC_SetFlashLatencyFromMSIRange+0xc8>
 800b31c:	9b02      	ldr	r3, [sp, #8]
 800b31e:	429d      	cmp	r5, r3
 800b320:	d90e      	bls.n	800b340 <RCC_SetFlashLatencyFromMSIRange+0xcc>
 800b322:	9b03      	ldr	r3, [sp, #12]
 800b324:	429d      	cmp	r5, r3
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800b326:	bf98      	it	ls
 800b328:	2303      	movls	r3, #3
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800b32a:	d8d3      	bhi.n	800b2d4 <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_RANGE[index];
 800b32c:	aa08      	add	r2, sp, #32
 800b32e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b332:	f853 5c10 	ldr.w	r5, [r3, #-16]
 800b336:	e7ce      	b.n	800b2d6 <RCC_SetFlashLatencyFromMSIRange+0x62>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800b338:	2300      	movs	r3, #0
 800b33a:	e7f7      	b.n	800b32c <RCC_SetFlashLatencyFromMSIRange+0xb8>
 800b33c:	2301      	movs	r3, #1
 800b33e:	e7f5      	b.n	800b32c <RCC_SetFlashLatencyFromMSIRange+0xb8>
 800b340:	2302      	movs	r3, #2
 800b342:	e7f3      	b.n	800b32c <RCC_SetFlashLatencyFromMSIRange+0xb8>
 800b344:	08022958 	.word	0x08022958
 800b348:	08022998 	.word	0x08022998
 800b34c:	431bde83 	.word	0x431bde83
 800b350:	08022a58 	.word	0x08022a58
 800b354:	58004000 	.word	0x58004000

0800b358 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 800b358:	2800      	cmp	r0, #0
 800b35a:	f000 81be 	beq.w	800b6da <HAL_RCC_OscConfig+0x382>
{
 800b35e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800b360:	6803      	ldr	r3, [r0, #0]
 800b362:	069a      	lsls	r2, r3, #26
 800b364:	4604      	mov	r4, r0
 800b366:	f100 8120 	bmi.w	800b5aa <HAL_RCC_OscConfig+0x252>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b36a:	07d9      	lsls	r1, r3, #31
 800b36c:	d52f      	bpl.n	800b3ce <HAL_RCC_OscConfig+0x76>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800b36e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b372:	688a      	ldr	r2, [r1, #8]
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800b374:	68c9      	ldr	r1, [r1, #12]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800b376:	f002 020c 	and.w	r2, r2, #12
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800b37a:	2a08      	cmp	r2, #8
 800b37c:	f000 817b 	beq.w	800b676 <HAL_RCC_OscConfig+0x31e>
 800b380:	2a0c      	cmp	r2, #12
 800b382:	f000 8173 	beq.w	800b66c <HAL_RCC_OscConfig+0x314>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b386:	6863      	ldr	r3, [r4, #4]
 800b388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b38c:	f000 81a7 	beq.w	800b6de <HAL_RCC_OscConfig+0x386>
 800b390:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b394:	f000 82c7 	beq.w	800b926 <HAL_RCC_OscConfig+0x5ce>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800b398:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 800b39c:	682a      	ldr	r2, [r5, #0]
 800b39e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800b3a2:	602a      	str	r2, [r5, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 800b3a4:	682a      	ldr	r2, [r5, #0]
 800b3a6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b3aa:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	f040 819c 	bne.w	800b6ea <HAL_RCC_OscConfig+0x392>
        tickstart = HAL_GetTick();
 800b3b2:	f7ff f84d 	bl	800a450 <HAL_GetTick>
 800b3b6:	4606      	mov	r6, r0
        while (LL_RCC_HSE_IsReady() != 0U)
 800b3b8:	e005      	b.n	800b3c6 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b3ba:	f7ff f849 	bl	800a450 <HAL_GetTick>
 800b3be:	1b80      	subs	r0, r0, r6
 800b3c0:	2864      	cmp	r0, #100	; 0x64
 800b3c2:	f200 8188 	bhi.w	800b6d6 <HAL_RCC_OscConfig+0x37e>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800b3c6:	682b      	ldr	r3, [r5, #0]
 800b3c8:	0398      	lsls	r0, r3, #14
 800b3ca:	d4f6      	bmi.n	800b3ba <HAL_RCC_OscConfig+0x62>
 800b3cc:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b3ce:	0799      	lsls	r1, r3, #30
 800b3d0:	d52b      	bpl.n	800b42a <HAL_RCC_OscConfig+0xd2>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800b3d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b3d6:	688a      	ldr	r2, [r1, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800b3d8:	68c9      	ldr	r1, [r1, #12]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800b3da:	f002 020c 	and.w	r2, r2, #12
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800b3de:	2a04      	cmp	r2, #4
 800b3e0:	f000 8159 	beq.w	800b696 <HAL_RCC_OscConfig+0x33e>
 800b3e4:	2a0c      	cmp	r2, #12
 800b3e6:	f000 8151 	beq.w	800b68c <HAL_RCC_OscConfig+0x334>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b3ea:	68e3      	ldr	r3, [r4, #12]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	f000 81b1 	beq.w	800b754 <HAL_RCC_OscConfig+0x3fc>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800b3f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800b3f6:	461d      	mov	r5, r3
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800b3f8:	681a      	ldr	r2, [r3, #0]
 800b3fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b3fe:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800b400:	f7ff f826 	bl	800a450 <HAL_GetTick>
 800b404:	4606      	mov	r6, r0
        while (LL_RCC_HSI_IsReady() == 0U)
 800b406:	e005      	b.n	800b414 <HAL_RCC_OscConfig+0xbc>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b408:	f7ff f822 	bl	800a450 <HAL_GetTick>
 800b40c:	1b80      	subs	r0, r0, r6
 800b40e:	2802      	cmp	r0, #2
 800b410:	f200 8161 	bhi.w	800b6d6 <HAL_RCC_OscConfig+0x37e>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800b414:	682b      	ldr	r3, [r5, #0]
 800b416:	055b      	lsls	r3, r3, #21
 800b418:	d5f6      	bpl.n	800b408 <HAL_RCC_OscConfig+0xb0>
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800b41a:	686b      	ldr	r3, [r5, #4]
 800b41c:	6922      	ldr	r2, [r4, #16]
 800b41e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800b422:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800b426:	606b      	str	r3, [r5, #4]
 800b428:	6823      	ldr	r3, [r4, #0]
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800b42a:	f013 0f18 	tst.w	r3, #24
 800b42e:	d044      	beq.n	800b4ba <HAL_RCC_OscConfig+0x162>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b430:	6962      	ldr	r2, [r4, #20]
 800b432:	2a00      	cmp	r2, #0
 800b434:	f000 81a3 	beq.w	800b77e <HAL_RCC_OscConfig+0x426>
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800b438:	06d8      	lsls	r0, r3, #27
 800b43a:	f140 8249 	bpl.w	800b8d0 <HAL_RCC_OscConfig+0x578>
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800b43e:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 800b442:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800b446:	0799      	lsls	r1, r3, #30
 800b448:	f140 81c9 	bpl.w	800b7de <HAL_RCC_OscConfig+0x486>
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800b44c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800b450:	461d      	mov	r5, r3
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800b452:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800b456:	f042 0204 	orr.w	r2, r2, #4
 800b45a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        tickstart = HAL_GetTick();
 800b45e:	f7fe fff7 	bl	800a450 <HAL_GetTick>
 800b462:	4606      	mov	r6, r0
        while (LL_RCC_LSI2_IsReady() == 0U)
 800b464:	e005      	b.n	800b472 <HAL_RCC_OscConfig+0x11a>
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800b466:	f7fe fff3 	bl	800a450 <HAL_GetTick>
 800b46a:	1b80      	subs	r0, r0, r6
 800b46c:	2803      	cmp	r0, #3
 800b46e:	f200 8132 	bhi.w	800b6d6 <HAL_RCC_OscConfig+0x37e>
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800b472:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800b476:	071b      	lsls	r3, r3, #28
 800b478:	d5f5      	bpl.n	800b466 <HAL_RCC_OscConfig+0x10e>
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800b47a:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800b47e:	69a2      	ldr	r2, [r4, #24]
 800b480:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800b484:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800b488:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800b48c:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800b490:	f023 0301 	bic.w	r3, r3, #1
 800b494:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
        tickstart = HAL_GetTick();
 800b498:	f7fe ffda 	bl	800a450 <HAL_GetTick>
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800b49c:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 800b4a0:	4606      	mov	r6, r0
        while (LL_RCC_LSI1_IsReady() != 0U)
 800b4a2:	e005      	b.n	800b4b0 <HAL_RCC_OscConfig+0x158>
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800b4a4:	f7fe ffd4 	bl	800a450 <HAL_GetTick>
 800b4a8:	1b80      	subs	r0, r0, r6
 800b4aa:	2802      	cmp	r0, #2
 800b4ac:	f200 8113 	bhi.w	800b6d6 <HAL_RCC_OscConfig+0x37e>
 800b4b0:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800b4b4:	079f      	lsls	r7, r3, #30
 800b4b6:	d4f5      	bmi.n	800b4a4 <HAL_RCC_OscConfig+0x14c>
 800b4b8:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b4ba:	075f      	lsls	r7, r3, #29
 800b4bc:	d52d      	bpl.n	800b51a <HAL_RCC_OscConfig+0x1c2>
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b4be:	4db6      	ldr	r5, [pc, #728]	; (800b798 <HAL_RCC_OscConfig+0x440>)
 800b4c0:	682b      	ldr	r3, [r5, #0]
 800b4c2:	05de      	lsls	r6, r3, #23
 800b4c4:	f140 80f9 	bpl.w	800b6ba <HAL_RCC_OscConfig+0x362>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b4c8:	68a3      	ldr	r3, [r4, #8]
 800b4ca:	2b01      	cmp	r3, #1
 800b4cc:	f000 8236 	beq.w	800b93c <HAL_RCC_OscConfig+0x5e4>
 800b4d0:	2b05      	cmp	r3, #5
 800b4d2:	f000 81dc 	beq.w	800b88e <HAL_RCC_OscConfig+0x536>
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800b4d6:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 800b4da:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 800b4de:	f022 0201 	bic.w	r2, r2, #1
 800b4e2:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800b4e6:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 800b4ea:	f022 0204 	bic.w	r2, r2, #4
 800b4ee:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	f040 81d9 	bne.w	800b8aa <HAL_RCC_OscConfig+0x552>
      tickstart = HAL_GetTick();
 800b4f8:	f7fe ffaa 	bl	800a450 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b4fc:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800b500:	4607      	mov	r7, r0
      while (LL_RCC_LSE_IsReady() != 0U)
 800b502:	e005      	b.n	800b510 <HAL_RCC_OscConfig+0x1b8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b504:	f7fe ffa4 	bl	800a450 <HAL_GetTick>
 800b508:	1bc0      	subs	r0, r0, r7
 800b50a:	42b0      	cmp	r0, r6
 800b50c:	f200 80e3 	bhi.w	800b6d6 <HAL_RCC_OscConfig+0x37e>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800b510:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 800b514:	079a      	lsls	r2, r3, #30
 800b516:	d4f5      	bmi.n	800b504 <HAL_RCC_OscConfig+0x1ac>
 800b518:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b51a:	065b      	lsls	r3, r3, #25
 800b51c:	d51a      	bpl.n	800b554 <HAL_RCC_OscConfig+0x1fc>
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800b51e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b520:	2b00      	cmp	r3, #0
 800b522:	f000 8172 	beq.w	800b80a <HAL_RCC_OscConfig+0x4b2>
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800b526:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800b52a:	461d      	mov	r5, r3
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800b52c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800b530:	f042 0201 	orr.w	r2, r2, #1
 800b534:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
      tickstart = HAL_GetTick();
 800b538:	f7fe ff8a 	bl	800a450 <HAL_GetTick>
 800b53c:	4606      	mov	r6, r0
      while (LL_RCC_HSI48_IsReady() == 0U)
 800b53e:	e005      	b.n	800b54c <HAL_RCC_OscConfig+0x1f4>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b540:	f7fe ff86 	bl	800a450 <HAL_GetTick>
 800b544:	1b80      	subs	r0, r0, r6
 800b546:	2802      	cmp	r0, #2
 800b548:	f200 80c5 	bhi.w	800b6d6 <HAL_RCC_OscConfig+0x37e>
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800b54c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800b550:	079f      	lsls	r7, r3, #30
 800b552:	d5f5      	bpl.n	800b540 <HAL_RCC_OscConfig+0x1e8>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800b554:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800b556:	b330      	cbz	r0, 800b5a6 <HAL_RCC_OscConfig+0x24e>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800b558:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b55c:	689a      	ldr	r2, [r3, #8]
 800b55e:	f002 020c 	and.w	r2, r2, #12
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b562:	2a0c      	cmp	r2, #12
 800b564:	f000 816a 	beq.w	800b83c <HAL_RCC_OscConfig+0x4e4>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800b568:	681a      	ldr	r2, [r3, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800b56a:	2802      	cmp	r0, #2
 800b56c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800b570:	601a      	str	r2, [r3, #0]
 800b572:	f000 81ec 	beq.w	800b94e <HAL_RCC_OscConfig+0x5f6>
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800b576:	68da      	ldr	r2, [r3, #12]
 800b578:	f022 0203 	bic.w	r2, r2, #3
 800b57c:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 800b57e:	68da      	ldr	r2, [r3, #12]
 800b580:	f022 5288 	bic.w	r2, r2, #285212672	; 0x11000000
 800b584:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800b588:	60da      	str	r2, [r3, #12]
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800b58a:	461c      	mov	r4, r3
        tickstart = HAL_GetTick();
 800b58c:	f7fe ff60 	bl	800a450 <HAL_GetTick>
 800b590:	4605      	mov	r5, r0
        while (LL_RCC_PLL_IsReady() != 0U)
 800b592:	e005      	b.n	800b5a0 <HAL_RCC_OscConfig+0x248>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b594:	f7fe ff5c 	bl	800a450 <HAL_GetTick>
 800b598:	1b40      	subs	r0, r0, r5
 800b59a:	2802      	cmp	r0, #2
 800b59c:	f200 809b 	bhi.w	800b6d6 <HAL_RCC_OscConfig+0x37e>
 800b5a0:	6823      	ldr	r3, [r4, #0]
 800b5a2:	019b      	lsls	r3, r3, #6
 800b5a4:	d4f6      	bmi.n	800b594 <HAL_RCC_OscConfig+0x23c>
  return HAL_OK;
 800b5a6:	2000      	movs	r0, #0
}
 800b5a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800b5aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b5ae:	6893      	ldr	r3, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800b5b0:	68d2      	ldr	r2, [r2, #12]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800b5b2:	f013 030c 	ands.w	r3, r3, #12
 800b5b6:	d02b      	beq.n	800b610 <HAL_RCC_OscConfig+0x2b8>
 800b5b8:	2b0c      	cmp	r3, #12
 800b5ba:	d025      	beq.n	800b608 <HAL_RCC_OscConfig+0x2b0>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800b5bc:	69e3      	ldr	r3, [r4, #28]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	f000 80a2 	beq.w	800b708 <HAL_RCC_OscConfig+0x3b0>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800b5c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800b5c8:	461d      	mov	r5, r3
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800b5ca:	681a      	ldr	r2, [r3, #0]
 800b5cc:	f042 0201 	orr.w	r2, r2, #1
 800b5d0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800b5d2:	f7fe ff3d 	bl	800a450 <HAL_GetTick>
 800b5d6:	4606      	mov	r6, r0
        while (LL_RCC_MSI_IsReady() == 0U)
 800b5d8:	e004      	b.n	800b5e4 <HAL_RCC_OscConfig+0x28c>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800b5da:	f7fe ff39 	bl	800a450 <HAL_GetTick>
 800b5de:	1b80      	subs	r0, r0, r6
 800b5e0:	2802      	cmp	r0, #2
 800b5e2:	d878      	bhi.n	800b6d6 <HAL_RCC_OscConfig+0x37e>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800b5e4:	682b      	ldr	r3, [r5, #0]
 800b5e6:	079f      	lsls	r7, r3, #30
 800b5e8:	d5f7      	bpl.n	800b5da <HAL_RCC_OscConfig+0x282>
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800b5ea:	682b      	ldr	r3, [r5, #0]
 800b5ec:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800b5ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b5f2:	4313      	orrs	r3, r2
 800b5f4:	602b      	str	r3, [r5, #0]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800b5f6:	686b      	ldr	r3, [r5, #4]
 800b5f8:	6a22      	ldr	r2, [r4, #32]
 800b5fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b5fe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800b602:	606b      	str	r3, [r5, #4]
 800b604:	6823      	ldr	r3, [r4, #0]
 800b606:	e6b0      	b.n	800b36a <HAL_RCC_OscConfig+0x12>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800b608:	f002 0203 	and.w	r2, r2, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800b60c:	2a01      	cmp	r2, #1
 800b60e:	d1d5      	bne.n	800b5bc <HAL_RCC_OscConfig+0x264>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800b610:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	079b      	lsls	r3, r3, #30
 800b618:	d424      	bmi.n	800b664 <HAL_RCC_OscConfig+0x30c>
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800b61a:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800b61e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b620:	682b      	ldr	r3, [r5, #0]
 800b622:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b626:	2bb0      	cmp	r3, #176	; 0xb0
 800b628:	bf28      	it	cs
 800b62a:	23b0      	movcs	r3, #176	; 0xb0
 800b62c:	4298      	cmp	r0, r3
 800b62e:	d97f      	bls.n	800b730 <HAL_RCC_OscConfig+0x3d8>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800b630:	f7ff fe20 	bl	800b274 <RCC_SetFlashLatencyFromMSIRange>
 800b634:	b9a0      	cbnz	r0, 800b660 <HAL_RCC_OscConfig+0x308>
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800b636:	682b      	ldr	r3, [r5, #0]
 800b638:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800b63a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b63e:	4313      	orrs	r3, r2
 800b640:	602b      	str	r3, [r5, #0]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800b642:	686b      	ldr	r3, [r5, #4]
 800b644:	6a22      	ldr	r2, [r4, #32]
 800b646:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b64a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800b64e:	606b      	str	r3, [r5, #4]
        SystemCoreClockUpdate();
 800b650:	f7fe fe66 	bl	800a320 <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800b654:	4b51      	ldr	r3, [pc, #324]	; (800b79c <HAL_RCC_OscConfig+0x444>)
 800b656:	6818      	ldr	r0, [r3, #0]
 800b658:	f7fe feb0 	bl	800a3bc <HAL_InitTick>
 800b65c:	2800      	cmp	r0, #0
 800b65e:	d0d1      	beq.n	800b604 <HAL_RCC_OscConfig+0x2ac>
        return HAL_ERROR;
 800b660:	2001      	movs	r0, #1
}
 800b662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800b664:	69e3      	ldr	r3, [r4, #28]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d1d7      	bne.n	800b61a <HAL_RCC_OscConfig+0x2c2>
 800b66a:	e7f9      	b.n	800b660 <HAL_RCC_OscConfig+0x308>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800b66c:	f001 0103 	and.w	r1, r1, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800b670:	2903      	cmp	r1, #3
 800b672:	f47f ae88 	bne.w	800b386 <HAL_RCC_OscConfig+0x2e>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800b676:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b67a:	6812      	ldr	r2, [r2, #0]
 800b67c:	0392      	lsls	r2, r2, #14
 800b67e:	f57f aea6 	bpl.w	800b3ce <HAL_RCC_OscConfig+0x76>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b682:	6862      	ldr	r2, [r4, #4]
 800b684:	2a00      	cmp	r2, #0
 800b686:	f47f aea2 	bne.w	800b3ce <HAL_RCC_OscConfig+0x76>
 800b68a:	e7e9      	b.n	800b660 <HAL_RCC_OscConfig+0x308>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800b68c:	f001 0103 	and.w	r1, r1, #3
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800b690:	2902      	cmp	r1, #2
 800b692:	f47f aeaa 	bne.w	800b3ea <HAL_RCC_OscConfig+0x92>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800b696:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b69a:	6812      	ldr	r2, [r2, #0]
 800b69c:	0552      	lsls	r2, r2, #21
 800b69e:	d502      	bpl.n	800b6a6 <HAL_RCC_OscConfig+0x34e>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b6a0:	68e2      	ldr	r2, [r4, #12]
 800b6a2:	2a00      	cmp	r2, #0
 800b6a4:	d0dc      	beq.n	800b660 <HAL_RCC_OscConfig+0x308>
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800b6a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b6aa:	6920      	ldr	r0, [r4, #16]
 800b6ac:	684a      	ldr	r2, [r1, #4]
 800b6ae:	f022 42fe 	bic.w	r2, r2, #2130706432	; 0x7f000000
 800b6b2:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 800b6b6:	604a      	str	r2, [r1, #4]
 800b6b8:	e6b7      	b.n	800b42a <HAL_RCC_OscConfig+0xd2>
      HAL_PWR_EnableBkUpAccess();
 800b6ba:	f7ff fdcb 	bl	800b254 <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 800b6be:	f7fe fec7 	bl	800a450 <HAL_GetTick>
 800b6c2:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b6c4:	682b      	ldr	r3, [r5, #0]
 800b6c6:	05d8      	lsls	r0, r3, #23
 800b6c8:	f53f aefe 	bmi.w	800b4c8 <HAL_RCC_OscConfig+0x170>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b6cc:	f7fe fec0 	bl	800a450 <HAL_GetTick>
 800b6d0:	1b80      	subs	r0, r0, r6
 800b6d2:	2802      	cmp	r0, #2
 800b6d4:	d9f6      	bls.n	800b6c4 <HAL_RCC_OscConfig+0x36c>
            return HAL_TIMEOUT;
 800b6d6:	2003      	movs	r0, #3
}
 800b6d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800b6da:	2001      	movs	r0, #1
}
 800b6dc:	4770      	bx	lr
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800b6de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b6e2:	6813      	ldr	r3, [r2, #0]
 800b6e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b6e8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800b6ea:	f7fe feb1 	bl	800a450 <HAL_GetTick>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800b6ee:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 800b6f2:	4606      	mov	r6, r0
        while (LL_RCC_HSE_IsReady() == 0U)
 800b6f4:	e004      	b.n	800b700 <HAL_RCC_OscConfig+0x3a8>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b6f6:	f7fe feab 	bl	800a450 <HAL_GetTick>
 800b6fa:	1b80      	subs	r0, r0, r6
 800b6fc:	2864      	cmp	r0, #100	; 0x64
 800b6fe:	d8ea      	bhi.n	800b6d6 <HAL_RCC_OscConfig+0x37e>
 800b700:	682b      	ldr	r3, [r5, #0]
 800b702:	039f      	lsls	r7, r3, #14
 800b704:	d5f7      	bpl.n	800b6f6 <HAL_RCC_OscConfig+0x39e>
 800b706:	e661      	b.n	800b3cc <HAL_RCC_OscConfig+0x74>
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800b708:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800b70c:	461d      	mov	r5, r3
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800b70e:	681a      	ldr	r2, [r3, #0]
 800b710:	f022 0201 	bic.w	r2, r2, #1
 800b714:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800b716:	f7fe fe9b 	bl	800a450 <HAL_GetTick>
 800b71a:	4606      	mov	r6, r0
        while (LL_RCC_MSI_IsReady() != 0U)
 800b71c:	e004      	b.n	800b728 <HAL_RCC_OscConfig+0x3d0>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800b71e:	f7fe fe97 	bl	800a450 <HAL_GetTick>
 800b722:	1b80      	subs	r0, r0, r6
 800b724:	2802      	cmp	r0, #2
 800b726:	d8d6      	bhi.n	800b6d6 <HAL_RCC_OscConfig+0x37e>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800b728:	682b      	ldr	r3, [r5, #0]
 800b72a:	0798      	lsls	r0, r3, #30
 800b72c:	d4f7      	bmi.n	800b71e <HAL_RCC_OscConfig+0x3c6>
 800b72e:	e769      	b.n	800b604 <HAL_RCC_OscConfig+0x2ac>
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800b730:	682b      	ldr	r3, [r5, #0]
 800b732:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b736:	4303      	orrs	r3, r0
 800b738:	602b      	str	r3, [r5, #0]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800b73a:	686b      	ldr	r3, [r5, #4]
 800b73c:	6a22      	ldr	r2, [r4, #32]
 800b73e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b742:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800b746:	606b      	str	r3, [r5, #4]
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800b748:	f7ff fd94 	bl	800b274 <RCC_SetFlashLatencyFromMSIRange>
 800b74c:	2800      	cmp	r0, #0
 800b74e:	f43f af7f 	beq.w	800b650 <HAL_RCC_OscConfig+0x2f8>
 800b752:	e785      	b.n	800b660 <HAL_RCC_OscConfig+0x308>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800b754:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800b758:	461d      	mov	r5, r3
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800b75a:	681a      	ldr	r2, [r3, #0]
 800b75c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b760:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800b762:	f7fe fe75 	bl	800a450 <HAL_GetTick>
 800b766:	4606      	mov	r6, r0
        while (LL_RCC_HSI_IsReady() != 0U)
 800b768:	e004      	b.n	800b774 <HAL_RCC_OscConfig+0x41c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b76a:	f7fe fe71 	bl	800a450 <HAL_GetTick>
 800b76e:	1b80      	subs	r0, r0, r6
 800b770:	2802      	cmp	r0, #2
 800b772:	d8b0      	bhi.n	800b6d6 <HAL_RCC_OscConfig+0x37e>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800b774:	682b      	ldr	r3, [r5, #0]
 800b776:	055f      	lsls	r7, r3, #21
 800b778:	d4f7      	bmi.n	800b76a <HAL_RCC_OscConfig+0x412>
 800b77a:	6823      	ldr	r3, [r4, #0]
 800b77c:	e655      	b.n	800b42a <HAL_RCC_OscConfig+0xd2>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800b77e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800b782:	461d      	mov	r5, r3
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800b784:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800b788:	f022 0204 	bic.w	r2, r2, #4
 800b78c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      tickstart = HAL_GetTick();
 800b790:	f7fe fe5e 	bl	800a450 <HAL_GetTick>
 800b794:	4606      	mov	r6, r0
      while (LL_RCC_LSI2_IsReady() != 0U)
 800b796:	e008      	b.n	800b7aa <HAL_RCC_OscConfig+0x452>
 800b798:	58000400 	.word	0x58000400
 800b79c:	20000154 	.word	0x20000154
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800b7a0:	f7fe fe56 	bl	800a450 <HAL_GetTick>
 800b7a4:	1b80      	subs	r0, r0, r6
 800b7a6:	2803      	cmp	r0, #3
 800b7a8:	d895      	bhi.n	800b6d6 <HAL_RCC_OscConfig+0x37e>
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800b7aa:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800b7ae:	071a      	lsls	r2, r3, #28
 800b7b0:	d4f6      	bmi.n	800b7a0 <HAL_RCC_OscConfig+0x448>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800b7b2:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800b7b6:	f023 0301 	bic.w	r3, r3, #1
 800b7ba:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 800b7be:	f7fe fe47 	bl	800a450 <HAL_GetTick>
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800b7c2:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 800b7c6:	4606      	mov	r6, r0
      while (LL_RCC_LSI1_IsReady() != 0U)
 800b7c8:	e004      	b.n	800b7d4 <HAL_RCC_OscConfig+0x47c>
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800b7ca:	f7fe fe41 	bl	800a450 <HAL_GetTick>
 800b7ce:	1b80      	subs	r0, r0, r6
 800b7d0:	2802      	cmp	r0, #2
 800b7d2:	d880      	bhi.n	800b6d6 <HAL_RCC_OscConfig+0x37e>
 800b7d4:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800b7d8:	079b      	lsls	r3, r3, #30
 800b7da:	d4f6      	bmi.n	800b7ca <HAL_RCC_OscConfig+0x472>
 800b7dc:	e66c      	b.n	800b4b8 <HAL_RCC_OscConfig+0x160>
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800b7de:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800b7e2:	f043 0301 	orr.w	r3, r3, #1
 800b7e6:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
          tickstart = HAL_GetTick();
 800b7ea:	f7fe fe31 	bl	800a450 <HAL_GetTick>
 800b7ee:	4606      	mov	r6, r0
          while (LL_RCC_LSI1_IsReady() == 0U)
 800b7f0:	e005      	b.n	800b7fe <HAL_RCC_OscConfig+0x4a6>
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800b7f2:	f7fe fe2d 	bl	800a450 <HAL_GetTick>
 800b7f6:	1b80      	subs	r0, r0, r6
 800b7f8:	2802      	cmp	r0, #2
 800b7fa:	f63f af6c 	bhi.w	800b6d6 <HAL_RCC_OscConfig+0x37e>
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800b7fe:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800b802:	079a      	lsls	r2, r3, #30
 800b804:	f53f ae22 	bmi.w	800b44c <HAL_RCC_OscConfig+0xf4>
 800b808:	e7f3      	b.n	800b7f2 <HAL_RCC_OscConfig+0x49a>
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800b80a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800b80e:	461d      	mov	r5, r3
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800b810:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800b814:	f022 0201 	bic.w	r2, r2, #1
 800b818:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
      tickstart = HAL_GetTick();
 800b81c:	f7fe fe18 	bl	800a450 <HAL_GetTick>
 800b820:	4606      	mov	r6, r0
      while (LL_RCC_HSI48_IsReady() != 0U)
 800b822:	e005      	b.n	800b830 <HAL_RCC_OscConfig+0x4d8>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b824:	f7fe fe14 	bl	800a450 <HAL_GetTick>
 800b828:	1b80      	subs	r0, r0, r6
 800b82a:	2802      	cmp	r0, #2
 800b82c:	f63f af53 	bhi.w	800b6d6 <HAL_RCC_OscConfig+0x37e>
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800b830:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800b834:	0798      	lsls	r0, r3, #30
 800b836:	f57f ae8d 	bpl.w	800b554 <HAL_RCC_OscConfig+0x1fc>
 800b83a:	e7f3      	b.n	800b824 <HAL_RCC_OscConfig+0x4cc>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b83c:	2801      	cmp	r0, #1
 800b83e:	f43f aeb3 	beq.w	800b5a8 <HAL_RCC_OscConfig+0x250>
        uint32_t pllcfgr = RCC->PLLCFGR;
 800b842:	68db      	ldr	r3, [r3, #12]
        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b844:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800b846:	f003 0103 	and.w	r1, r3, #3
 800b84a:	4291      	cmp	r1, r2
 800b84c:	f47f af08 	bne.w	800b660 <HAL_RCC_OscConfig+0x308>
 800b850:	6b62      	ldr	r2, [r4, #52]	; 0x34
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b852:	f003 0170 	and.w	r1, r3, #112	; 0x70
        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b856:	4291      	cmp	r1, r2
 800b858:	f47f af02 	bne.w	800b660 <HAL_RCC_OscConfig+0x308>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b85c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800b85e:	f3c3 2106 	ubfx	r1, r3, #8, #7
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b862:	4291      	cmp	r1, r2
 800b864:	f47f aefc 	bne.w	800b660 <HAL_RCC_OscConfig+0x308>
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800b868:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800b86a:	f403 1178 	and.w	r1, r3, #4063232	; 0x3e0000
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800b86e:	4291      	cmp	r1, r2
 800b870:	f47f aef6 	bne.w	800b660 <HAL_RCC_OscConfig+0x308>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800b874:	6c22      	ldr	r2, [r4, #64]	; 0x40
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800b876:	f003 6160 	and.w	r1, r3, #234881024	; 0xe000000
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800b87a:	4291      	cmp	r1, r2
 800b87c:	f47f aef0 	bne.w	800b660 <HAL_RCC_OscConfig+0x308>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800b880:	6c60      	ldr	r0, [r4, #68]	; 0x44
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800b882:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
    return HAL_ERROR;
 800b886:	1a18      	subs	r0, r3, r0
 800b888:	bf18      	it	ne
 800b88a:	2001      	movne	r0, #1
 800b88c:	e68c      	b.n	800b5a8 <HAL_RCC_OscConfig+0x250>
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800b88e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b892:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800b896:	f042 0204 	orr.w	r2, r2, #4
 800b89a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800b89e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800b8a2:	f042 0201 	orr.w	r2, r2, #1
 800b8a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      tickstart = HAL_GetTick();
 800b8aa:	f7fe fdd1 	bl	800a450 <HAL_GetTick>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800b8ae:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 800b8b2:	4607      	mov	r7, r0
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b8b4:	f241 3688 	movw	r6, #5000	; 0x1388
      while (LL_RCC_LSE_IsReady() == 0U)
 800b8b8:	e005      	b.n	800b8c6 <HAL_RCC_OscConfig+0x56e>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b8ba:	f7fe fdc9 	bl	800a450 <HAL_GetTick>
 800b8be:	1bc0      	subs	r0, r0, r7
 800b8c0:	42b0      	cmp	r0, r6
 800b8c2:	f63f af08 	bhi.w	800b6d6 <HAL_RCC_OscConfig+0x37e>
 800b8c6:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 800b8ca:	0799      	lsls	r1, r3, #30
 800b8cc:	d5f5      	bpl.n	800b8ba <HAL_RCC_OscConfig+0x562>
 800b8ce:	e623      	b.n	800b518 <HAL_RCC_OscConfig+0x1c0>
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800b8d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800b8d4:	461e      	mov	r6, r3
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800b8d6:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800b8da:	f042 0201 	orr.w	r2, r2, #1
 800b8de:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        tickstart = HAL_GetTick();
 800b8e2:	f7fe fdb5 	bl	800a450 <HAL_GetTick>
 800b8e6:	4605      	mov	r5, r0
        while (LL_RCC_LSI1_IsReady() == 0U)
 800b8e8:	e005      	b.n	800b8f6 <HAL_RCC_OscConfig+0x59e>
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800b8ea:	f7fe fdb1 	bl	800a450 <HAL_GetTick>
 800b8ee:	1b40      	subs	r0, r0, r5
 800b8f0:	2802      	cmp	r0, #2
 800b8f2:	f63f aef0 	bhi.w	800b6d6 <HAL_RCC_OscConfig+0x37e>
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800b8f6:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 800b8fa:	0798      	lsls	r0, r3, #30
 800b8fc:	d5f5      	bpl.n	800b8ea <HAL_RCC_OscConfig+0x592>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800b8fe:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 800b902:	f023 0304 	bic.w	r3, r3, #4
 800b906:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800b90a:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 800b90e:	e005      	b.n	800b91c <HAL_RCC_OscConfig+0x5c4>
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800b910:	f7fe fd9e 	bl	800a450 <HAL_GetTick>
 800b914:	1b40      	subs	r0, r0, r5
 800b916:	2803      	cmp	r0, #3
 800b918:	f63f aedd 	bhi.w	800b6d6 <HAL_RCC_OscConfig+0x37e>
 800b91c:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 800b920:	0719      	lsls	r1, r3, #28
 800b922:	d4f5      	bmi.n	800b910 <HAL_RCC_OscConfig+0x5b8>
 800b924:	e5c8      	b.n	800b4b8 <HAL_RCC_OscConfig+0x160>
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 800b926:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b92a:	681a      	ldr	r2, [r3, #0]
 800b92c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800b930:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800b932:	681a      	ldr	r2, [r3, #0]
 800b934:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800b938:	601a      	str	r2, [r3, #0]
 800b93a:	e6d6      	b.n	800b6ea <HAL_RCC_OscConfig+0x392>
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800b93c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b940:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800b944:	f043 0301 	orr.w	r3, r3, #1
 800b948:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b94c:	e7ad      	b.n	800b8aa <HAL_RCC_OscConfig+0x552>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800b94e:	461d      	mov	r5, r3
        tickstart = HAL_GetTick();
 800b950:	f7fe fd7e 	bl	800a450 <HAL_GetTick>
 800b954:	4606      	mov	r6, r0
        while (LL_RCC_PLL_IsReady() != 0U)
 800b956:	e005      	b.n	800b964 <HAL_RCC_OscConfig+0x60c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b958:	f7fe fd7a 	bl	800a450 <HAL_GetTick>
 800b95c:	1b80      	subs	r0, r0, r6
 800b95e:	2802      	cmp	r0, #2
 800b960:	f63f aeb9 	bhi.w	800b6d6 <HAL_RCC_OscConfig+0x37e>
 800b964:	682b      	ldr	r3, [r5, #0]
 800b966:	0199      	lsls	r1, r3, #6
 800b968:	d4f6      	bmi.n	800b958 <HAL_RCC_OscConfig+0x600>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b96a:	e9d4 310c 	ldrd	r3, r1, [r4, #48]	; 0x30
 800b96e:	68e8      	ldr	r0, [r5, #12]
 800b970:	4a13      	ldr	r2, [pc, #76]	; (800b9c0 <HAL_RCC_OscConfig+0x668>)
 800b972:	430b      	orrs	r3, r1
 800b974:	4002      	ands	r2, r0
 800b976:	e9d4 100f 	ldrd	r1, r0, [r4, #60]	; 0x3c
 800b97a:	4313      	orrs	r3, r2
 800b97c:	430b      	orrs	r3, r1
 800b97e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800b980:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800b982:	4303      	orrs	r3, r0
 800b984:	430b      	orrs	r3, r1
 800b986:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800b98a:	60eb      	str	r3, [r5, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800b98c:	682b      	ldr	r3, [r5, #0]
 800b98e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b992:	602b      	str	r3, [r5, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b994:	68eb      	ldr	r3, [r5, #12]
 800b996:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b99a:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 800b99c:	f7fe fd58 	bl	800a450 <HAL_GetTick>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800b9a0:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 800b9a4:	4605      	mov	r5, r0
        while (LL_RCC_PLL_IsReady() == 0U)
 800b9a6:	e005      	b.n	800b9b4 <HAL_RCC_OscConfig+0x65c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b9a8:	f7fe fd52 	bl	800a450 <HAL_GetTick>
 800b9ac:	1b40      	subs	r0, r0, r5
 800b9ae:	2802      	cmp	r0, #2
 800b9b0:	f63f ae91 	bhi.w	800b6d6 <HAL_RCC_OscConfig+0x37e>
 800b9b4:	6823      	ldr	r3, [r4, #0]
 800b9b6:	019a      	lsls	r2, r3, #6
 800b9b8:	f53f adf5 	bmi.w	800b5a6 <HAL_RCC_OscConfig+0x24e>
 800b9bc:	e7f4      	b.n	800b9a8 <HAL_RCC_OscConfig+0x650>
 800b9be:	bf00      	nop
 800b9c0:	11c1808c 	.word	0x11c1808c

0800b9c4 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800b9c4:	2800      	cmp	r0, #0
 800b9c6:	f000 80f3 	beq.w	800bbb0 <HAL_RCC_ClockConfig+0x1ec>
{
 800b9ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b9ce:	4e7f      	ldr	r6, [pc, #508]	; (800bbcc <HAL_RCC_ClockConfig+0x208>)
 800b9d0:	6832      	ldr	r2, [r6, #0]
 800b9d2:	f002 0207 	and.w	r2, r2, #7
 800b9d6:	428a      	cmp	r2, r1
 800b9d8:	4605      	mov	r5, r0
 800b9da:	460c      	mov	r4, r1
 800b9dc:	d330      	bcc.n	800ba40 <HAL_RCC_ClockConfig+0x7c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b9de:	682b      	ldr	r3, [r5, #0]
 800b9e0:	079a      	lsls	r2, r3, #30
 800b9e2:	d441      	bmi.n	800ba68 <HAL_RCC_ClockConfig+0xa4>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800b9e4:	0698      	lsls	r0, r3, #26
 800b9e6:	d45a      	bmi.n	800ba9e <HAL_RCC_ClockConfig+0xda>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800b9e8:	065a      	lsls	r2, r3, #25
 800b9ea:	f100 8099 	bmi.w	800bb20 <HAL_RCC_ClockConfig+0x15c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b9ee:	0758      	lsls	r0, r3, #29
 800b9f0:	f100 80b0 	bmi.w	800bb54 <HAL_RCC_ClockConfig+0x190>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b9f4:	071a      	lsls	r2, r3, #28
 800b9f6:	f100 80c3 	bmi.w	800bb80 <HAL_RCC_ClockConfig+0x1bc>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b9fa:	07df      	lsls	r7, r3, #31
 800b9fc:	d468      	bmi.n	800bad0 <HAL_RCC_ClockConfig+0x10c>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b9fe:	4d73      	ldr	r5, [pc, #460]	; (800bbcc <HAL_RCC_ClockConfig+0x208>)
 800ba00:	682b      	ldr	r3, [r5, #0]
 800ba02:	f003 0307 	and.w	r3, r3, #7
 800ba06:	42a3      	cmp	r3, r4
 800ba08:	d912      	bls.n	800ba30 <HAL_RCC_ClockConfig+0x6c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ba0a:	682b      	ldr	r3, [r5, #0]
 800ba0c:	f023 0307 	bic.w	r3, r3, #7
 800ba10:	4323      	orrs	r3, r4
 800ba12:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800ba14:	f7fe fd1c 	bl	800a450 <HAL_GetTick>
 800ba18:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ba1a:	e004      	b.n	800ba26 <HAL_RCC_ClockConfig+0x62>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800ba1c:	f7fe fd18 	bl	800a450 <HAL_GetTick>
 800ba20:	1b80      	subs	r0, r0, r6
 800ba22:	2802      	cmp	r0, #2
 800ba24:	d838      	bhi.n	800ba98 <HAL_RCC_ClockConfig+0xd4>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ba26:	682b      	ldr	r3, [r5, #0]
 800ba28:	f003 0307 	and.w	r3, r3, #7
 800ba2c:	42a3      	cmp	r3, r4
 800ba2e:	d1f5      	bne.n	800ba1c <HAL_RCC_ClockConfig+0x58>
  SystemCoreClockUpdate();
 800ba30:	f7fe fc76 	bl	800a320 <SystemCoreClockUpdate>
  return HAL_InitTick(HAL_GetTickPrio());
 800ba34:	f7fe fd12 	bl	800a45c <HAL_GetTickPrio>
}
 800ba38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return HAL_InitTick(HAL_GetTickPrio());
 800ba3c:	f7fe bcbe 	b.w	800a3bc <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ba40:	6832      	ldr	r2, [r6, #0]
 800ba42:	f022 0207 	bic.w	r2, r2, #7
 800ba46:	430a      	orrs	r2, r1
 800ba48:	6032      	str	r2, [r6, #0]
    tickstart = HAL_GetTick();
 800ba4a:	f7fe fd01 	bl	800a450 <HAL_GetTick>
 800ba4e:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ba50:	e004      	b.n	800ba5c <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800ba52:	f7fe fcfd 	bl	800a450 <HAL_GetTick>
 800ba56:	1bc0      	subs	r0, r0, r7
 800ba58:	2802      	cmp	r0, #2
 800ba5a:	d81d      	bhi.n	800ba98 <HAL_RCC_ClockConfig+0xd4>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ba5c:	6833      	ldr	r3, [r6, #0]
 800ba5e:	f003 0307 	and.w	r3, r3, #7
 800ba62:	42a3      	cmp	r3, r4
 800ba64:	d1f5      	bne.n	800ba52 <HAL_RCC_ClockConfig+0x8e>
 800ba66:	e7ba      	b.n	800b9de <HAL_RCC_ClockConfig+0x1a>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800ba68:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 800ba6c:	68aa      	ldr	r2, [r5, #8]
 800ba6e:	68b3      	ldr	r3, [r6, #8]
 800ba70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ba74:	4313      	orrs	r3, r2
 800ba76:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800ba78:	f7fe fcea 	bl	800a450 <HAL_GetTick>
 800ba7c:	4607      	mov	r7, r0
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800ba7e:	e004      	b.n	800ba8a <HAL_RCC_ClockConfig+0xc6>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800ba80:	f7fe fce6 	bl	800a450 <HAL_GetTick>
 800ba84:	1bc0      	subs	r0, r0, r7
 800ba86:	2802      	cmp	r0, #2
 800ba88:	d806      	bhi.n	800ba98 <HAL_RCC_ClockConfig+0xd4>
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800ba8a:	68b3      	ldr	r3, [r6, #8]
 800ba8c:	03db      	lsls	r3, r3, #15
 800ba8e:	d5f7      	bpl.n	800ba80 <HAL_RCC_ClockConfig+0xbc>
 800ba90:	682b      	ldr	r3, [r5, #0]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800ba92:	0698      	lsls	r0, r3, #26
 800ba94:	d5a8      	bpl.n	800b9e8 <HAL_RCC_ClockConfig+0x24>
 800ba96:	e002      	b.n	800ba9e <HAL_RCC_ClockConfig+0xda>
        return HAL_TIMEOUT;
 800ba98:	2003      	movs	r0, #3
}
 800ba9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800ba9e:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 800baa2:	696a      	ldr	r2, [r5, #20]
 800baa4:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 800baa8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800baac:	4313      	orrs	r3, r2
 800baae:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
    tickstart = HAL_GetTick();
 800bab2:	f7fe fccd 	bl	800a450 <HAL_GetTick>
 800bab6:	4607      	mov	r7, r0
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800bab8:	e004      	b.n	800bac4 <HAL_RCC_ClockConfig+0x100>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800baba:	f7fe fcc9 	bl	800a450 <HAL_GetTick>
 800babe:	1bc0      	subs	r0, r0, r7
 800bac0:	2802      	cmp	r0, #2
 800bac2:	d8e9      	bhi.n	800ba98 <HAL_RCC_ClockConfig+0xd4>
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800bac4:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 800bac8:	0399      	lsls	r1, r3, #14
 800baca:	d5f6      	bpl.n	800baba <HAL_RCC_ClockConfig+0xf6>
 800bacc:	682b      	ldr	r3, [r5, #0]
 800bace:	e78b      	b.n	800b9e8 <HAL_RCC_ClockConfig+0x24>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bad0:	686b      	ldr	r3, [r5, #4]
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800bad2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800bad6:	2b02      	cmp	r3, #2
 800bad8:	6812      	ldr	r2, [r2, #0]
 800bada:	d070      	beq.n	800bbbe <HAL_RCC_ClockConfig+0x1fa>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800badc:	2b03      	cmp	r3, #3
 800bade:	d071      	beq.n	800bbc4 <HAL_RCC_ClockConfig+0x200>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d067      	beq.n	800bbb4 <HAL_RCC_ClockConfig+0x1f0>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800bae4:	0552      	lsls	r2, r2, #21
 800bae6:	d567      	bpl.n	800bbb8 <HAL_RCC_ClockConfig+0x1f4>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800bae8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800baec:	460e      	mov	r6, r1
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800baee:	688a      	ldr	r2, [r1, #8]
 800baf0:	f022 0203 	bic.w	r2, r2, #3
 800baf4:	4313      	orrs	r3, r2
 800baf6:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800baf8:	f7fe fcaa 	bl	800a450 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bafc:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800bb00:	4680      	mov	r8, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bb02:	e005      	b.n	800bb10 <HAL_RCC_ClockConfig+0x14c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bb04:	f7fe fca4 	bl	800a450 <HAL_GetTick>
 800bb08:	eba0 0008 	sub.w	r0, r0, r8
 800bb0c:	42b8      	cmp	r0, r7
 800bb0e:	d8c3      	bhi.n	800ba98 <HAL_RCC_ClockConfig+0xd4>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800bb10:	68b3      	ldr	r3, [r6, #8]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bb12:	686a      	ldr	r2, [r5, #4]
 800bb14:	f003 030c 	and.w	r3, r3, #12
 800bb18:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800bb1c:	d1f2      	bne.n	800bb04 <HAL_RCC_ClockConfig+0x140>
 800bb1e:	e76e      	b.n	800b9fe <HAL_RCC_ClockConfig+0x3a>
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800bb20:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 800bb24:	69aa      	ldr	r2, [r5, #24]
 800bb26:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 800bb2a:	f023 030f 	bic.w	r3, r3, #15
 800bb2e:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
 800bb32:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
    tickstart = HAL_GetTick();
 800bb36:	f7fe fc8b 	bl	800a450 <HAL_GetTick>
 800bb3a:	4607      	mov	r7, r0
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800bb3c:	e004      	b.n	800bb48 <HAL_RCC_ClockConfig+0x184>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800bb3e:	f7fe fc87 	bl	800a450 <HAL_GetTick>
 800bb42:	1bc0      	subs	r0, r0, r7
 800bb44:	2802      	cmp	r0, #2
 800bb46:	d8a7      	bhi.n	800ba98 <HAL_RCC_ClockConfig+0xd4>
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800bb48:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
 800bb4c:	03db      	lsls	r3, r3, #15
 800bb4e:	d5f6      	bpl.n	800bb3e <HAL_RCC_ClockConfig+0x17a>
 800bb50:	682b      	ldr	r3, [r5, #0]
 800bb52:	e74c      	b.n	800b9ee <HAL_RCC_ClockConfig+0x2a>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800bb54:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 800bb58:	68ea      	ldr	r2, [r5, #12]
 800bb5a:	68b3      	ldr	r3, [r6, #8]
 800bb5c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800bb60:	4313      	orrs	r3, r2
 800bb62:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800bb64:	f7fe fc74 	bl	800a450 <HAL_GetTick>
 800bb68:	4607      	mov	r7, r0
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800bb6a:	e004      	b.n	800bb76 <HAL_RCC_ClockConfig+0x1b2>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800bb6c:	f7fe fc70 	bl	800a450 <HAL_GetTick>
 800bb70:	1bc0      	subs	r0, r0, r7
 800bb72:	2802      	cmp	r0, #2
 800bb74:	d890      	bhi.n	800ba98 <HAL_RCC_ClockConfig+0xd4>
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800bb76:	68b3      	ldr	r3, [r6, #8]
 800bb78:	0399      	lsls	r1, r3, #14
 800bb7a:	d5f7      	bpl.n	800bb6c <HAL_RCC_ClockConfig+0x1a8>
 800bb7c:	682b      	ldr	r3, [r5, #0]
 800bb7e:	e739      	b.n	800b9f4 <HAL_RCC_ClockConfig+0x30>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800bb80:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800bb84:	692a      	ldr	r2, [r5, #16]
 800bb86:	68b3      	ldr	r3, [r6, #8]
 800bb88:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800bb8c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800bb90:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800bb92:	f7fe fc5d 	bl	800a450 <HAL_GetTick>
 800bb96:	4607      	mov	r7, r0
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800bb98:	e005      	b.n	800bba6 <HAL_RCC_ClockConfig+0x1e2>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800bb9a:	f7fe fc59 	bl	800a450 <HAL_GetTick>
 800bb9e:	1bc0      	subs	r0, r0, r7
 800bba0:	2802      	cmp	r0, #2
 800bba2:	f63f af79 	bhi.w	800ba98 <HAL_RCC_ClockConfig+0xd4>
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800bba6:	68b3      	ldr	r3, [r6, #8]
 800bba8:	035b      	lsls	r3, r3, #13
 800bbaa:	d5f6      	bpl.n	800bb9a <HAL_RCC_ClockConfig+0x1d6>
 800bbac:	682b      	ldr	r3, [r5, #0]
 800bbae:	e724      	b.n	800b9fa <HAL_RCC_ClockConfig+0x36>
    return HAL_ERROR;
 800bbb0:	2001      	movs	r0, #1
}
 800bbb2:	4770      	bx	lr
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800bbb4:	0791      	lsls	r1, r2, #30
 800bbb6:	d497      	bmi.n	800bae8 <HAL_RCC_ClockConfig+0x124>
    return HAL_ERROR;
 800bbb8:	2001      	movs	r0, #1
}
 800bbba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800bbbe:	0396      	lsls	r6, r2, #14
 800bbc0:	d492      	bmi.n	800bae8 <HAL_RCC_ClockConfig+0x124>
 800bbc2:	e7f9      	b.n	800bbb8 <HAL_RCC_ClockConfig+0x1f4>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800bbc4:	0190      	lsls	r0, r2, #6
 800bbc6:	d48f      	bmi.n	800bae8 <HAL_RCC_ClockConfig+0x124>
 800bbc8:	e7f6      	b.n	800bbb8 <HAL_RCC_ClockConfig+0x1f4>
 800bbca:	bf00      	nop
 800bbcc:	58004000 	.word	0x58004000

0800bbd0 <HAL_RCC_GetHCLKFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800bbd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800bbd4:	6893      	ldr	r3, [r2, #8]
  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800bbd6:	f013 030c 	ands.w	r3, r3, #12
 800bbda:	d114      	bne.n	800bc06 <HAL_RCC_GetHCLKFreq+0x36>
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800bbdc:	6813      	ldr	r3, [r2, #0]
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800bbde:	4a28      	ldr	r2, [pc, #160]	; (800bc80 <HAL_RCC_GetHCLKFreq+0xb0>)
 800bbe0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bbe4:	2bb0      	cmp	r3, #176	; 0xb0
 800bbe6:	bf28      	it	cs
 800bbe8:	23b0      	movcs	r3, #176	; 0xb0
 800bbea:	091b      	lsrs	r3, r3, #4
 800bbec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800bbf0:	4924      	ldr	r1, [pc, #144]	; (800bc84 <HAL_RCC_GetHCLKFreq+0xb4>)
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800bbf2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800bbf6:	6892      	ldr	r2, [r2, #8]
 800bbf8:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800bbfc:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
}
 800bc00:	fbb3 f0f0 	udiv	r0, r3, r0
 800bc04:	4770      	bx	lr
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800bc06:	2b04      	cmp	r3, #4
 800bc08:	d022      	beq.n	800bc50 <HAL_RCC_GetHCLKFreq+0x80>
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800bc0a:	2b08      	cmp	r3, #8
 800bc0c:	d024      	beq.n	800bc58 <HAL_RCC_GetHCLKFreq+0x88>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800bc0e:	68d3      	ldr	r3, [r2, #12]
 800bc10:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 800bc14:	2b02      	cmp	r3, #2
 800bc16:	d01d      	beq.n	800bc54 <HAL_RCC_GetHCLKFreq+0x84>
 800bc18:	2b03      	cmp	r3, #3
 800bc1a:	d125      	bne.n	800bc68 <HAL_RCC_GetHCLKFreq+0x98>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800bc1c:	6811      	ldr	r1, [r2, #0]
          pllinputfreq = HSE_VALUE / 2U;
 800bc1e:	4a1a      	ldr	r2, [pc, #104]	; (800bc88 <HAL_RCC_GetHCLKFreq+0xb8>)
 800bc20:	4b1a      	ldr	r3, [pc, #104]	; (800bc8c <HAL_RCC_GetHCLKFreq+0xbc>)
 800bc22:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800bc26:	bf18      	it	ne
 800bc28:	4613      	movne	r3, r2
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800bc2a:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 800bc2e:	68c1      	ldr	r1, [r0, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800bc30:	68c2      	ldr	r2, [r0, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800bc32:	68c0      	ldr	r0, [r0, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800bc34:	f3c1 2106 	ubfx	r1, r1, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 800bc38:	f3c2 1202 	ubfx	r2, r2, #4, #3
 800bc3c:	0f40      	lsrs	r0, r0, #29
 800bc3e:	fb03 f301 	mul.w	r3, r3, r1
 800bc42:	3201      	adds	r2, #1
 800bc44:	3001      	adds	r0, #1
 800bc46:	fbb3 f3f2 	udiv	r3, r3, r2
 800bc4a:	fbb3 f3f0 	udiv	r3, r3, r0
 800bc4e:	e7cf      	b.n	800bbf0 <HAL_RCC_GetHCLKFreq+0x20>
    sysclockfreq = HSI_VALUE;
 800bc50:	4b0d      	ldr	r3, [pc, #52]	; (800bc88 <HAL_RCC_GetHCLKFreq+0xb8>)
 800bc52:	e7cd      	b.n	800bbf0 <HAL_RCC_GetHCLKFreq+0x20>
        pllinputfreq = HSI_VALUE;
 800bc54:	4b0c      	ldr	r3, [pc, #48]	; (800bc88 <HAL_RCC_GetHCLKFreq+0xb8>)
 800bc56:	e7e8      	b.n	800bc2a <HAL_RCC_GetHCLKFreq+0x5a>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800bc58:	6812      	ldr	r2, [r2, #0]
      sysclockfreq = HSE_VALUE;
 800bc5a:	480c      	ldr	r0, [pc, #48]	; (800bc8c <HAL_RCC_GetHCLKFreq+0xbc>)
 800bc5c:	4b0a      	ldr	r3, [pc, #40]	; (800bc88 <HAL_RCC_GetHCLKFreq+0xb8>)
 800bc5e:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 800bc62:	bf08      	it	eq
 800bc64:	4603      	moveq	r3, r0
 800bc66:	e7c3      	b.n	800bbf0 <HAL_RCC_GetHCLKFreq+0x20>
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800bc68:	6813      	ldr	r3, [r2, #0]
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800bc6a:	4a05      	ldr	r2, [pc, #20]	; (800bc80 <HAL_RCC_GetHCLKFreq+0xb0>)
 800bc6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bc70:	2bb0      	cmp	r3, #176	; 0xb0
 800bc72:	bf28      	it	cs
 800bc74:	23b0      	movcs	r3, #176	; 0xb0
 800bc76:	091b      	lsrs	r3, r3, #4
 800bc78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc7c:	e7d5      	b.n	800bc2a <HAL_RCC_GetHCLKFreq+0x5a>
 800bc7e:	bf00      	nop
 800bc80:	08022958 	.word	0x08022958
 800bc84:	08022998 	.word	0x08022998
 800bc88:	00f42400 	.word	0x00f42400
 800bc8c:	01e84800 	.word	0x01e84800

0800bc90 <HAL_RCCEx_PeriphCLKConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800bc90:	6803      	ldr	r3, [r0, #0]
{
 800bc92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800bc96:	f013 0540 	ands.w	r5, r3, #64	; 0x40
{
 800bc9a:	4604      	mov	r4, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800bc9c:	d04b      	beq.n	800bd36 <HAL_RCCEx_PeriphCLKConfig+0xa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800bc9e:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800bca0:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 800bca4:	f000 8139 	beq.w	800bf1a <HAL_RCCEx_PeriphCLKConfig+0x28a>
 800bca8:	d83c      	bhi.n	800bd24 <HAL_RCCEx_PeriphCLKConfig+0x94>
 800bcaa:	2900      	cmp	r1, #0
 800bcac:	d142      	bne.n	800bd34 <HAL_RCCEx_PeriphCLKConfig+0xa4>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800bcae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800bcb2:	461d      	mov	r5, r3
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800bcb4:	681a      	ldr	r2, [r3, #0]
 800bcb6:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800bcba:	601a      	str	r2, [r3, #0]

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800bcbc:	f7fe fbc8 	bl	800a450 <HAL_GetTick>
 800bcc0:	4606      	mov	r6, r0
 800bcc2:	e005      	b.n	800bcd0 <HAL_RCCEx_PeriphCLKConfig+0x40>

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800bcc4:	f7fe fbc4 	bl	800a450 <HAL_GetTick>
 800bcc8:	1b80      	subs	r0, r0, r6
 800bcca:	2802      	cmp	r0, #2
 800bccc:	f200 81ba 	bhi.w	800c044 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800bcd0:	682b      	ldr	r3, [r5, #0]
 800bcd2:	011f      	lsls	r7, r3, #4
 800bcd4:	d4f6      	bmi.n	800bcc4 <HAL_RCCEx_PeriphCLKConfig+0x34>
  }

  if (status == HAL_OK)
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800bcd6:	692b      	ldr	r3, [r5, #16]
 800bcd8:	6862      	ldr	r2, [r4, #4]
 800bcda:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800bcde:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800bce2:	612b      	str	r3, [r5, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800bce4:	692b      	ldr	r3, [r5, #16]
 800bce6:	68a2      	ldr	r2, [r4, #8]
 800bce8:	f423 1378 	bic.w	r3, r3, #4063232	; 0x3e0000
 800bcec:	4313      	orrs	r3, r2
 800bcee:	612b      	str	r3, [r5, #16]
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800bcf0:	682b      	ldr	r3, [r5, #0]
 800bcf2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bcf6:	602b      	str	r3, [r5, #0]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bcf8:	f7fe fbaa 	bl	800a450 <HAL_GetTick>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800bcfc:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 800bd00:	4606      	mov	r6, r0
 800bd02:	e005      	b.n	800bd10 <HAL_RCCEx_PeriphCLKConfig+0x80>

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800bd04:	f7fe fba4 	bl	800a450 <HAL_GetTick>
 800bd08:	1b80      	subs	r0, r0, r6
 800bd0a:	2802      	cmp	r0, #2
 800bd0c:	f200 819a 	bhi.w	800c044 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
 800bd10:	682b      	ldr	r3, [r5, #0]
 800bd12:	0118      	lsls	r0, r3, #4
 800bd14:	d5f6      	bpl.n	800bd04 <HAL_RCCEx_PeriphCLKConfig+0x74>
    }

    if (status == HAL_OK)
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800bd16:	692b      	ldr	r3, [r5, #16]
 800bd18:	6962      	ldr	r2, [r4, #20]
 800bd1a:	4313      	orrs	r3, r2
 800bd1c:	612b      	str	r3, [r5, #16]
 800bd1e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800bd20:	6823      	ldr	r3, [r4, #0]
 800bd22:	e100      	b.n	800bf26 <HAL_RCCEx_PeriphCLKConfig+0x296>
    switch (PeriphClkInit->Sai1ClockSelection)
 800bd24:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800bd28:	f000 80fd 	beq.w	800bf26 <HAL_RCCEx_PeriphCLKConfig+0x296>
 800bd2c:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 800bd30:	f000 80f9 	beq.w	800bf26 <HAL_RCCEx_PeriphCLKConfig+0x296>
        ret = HAL_ERROR;
 800bd34:	2501      	movs	r5, #1
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bd36:	0519      	lsls	r1, r3, #20
 800bd38:	d509      	bpl.n	800bd4e <HAL_RCCEx_PeriphCLKConfig+0xbe>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800bd3a:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800bd3e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800bd40:	f8d6 7090 	ldr.w	r7, [r6, #144]	; 0x90
 800bd44:	f407 7740 	and.w	r7, r7, #768	; 0x300
 800bd48:	42ba      	cmp	r2, r7
 800bd4a:	f040 80b5 	bne.w	800beb8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800bd4e:	07d8      	lsls	r0, r3, #31
 800bd50:	d509      	bpl.n	800bd66 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800bd52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800bd56:	69a0      	ldr	r0, [r4, #24]
 800bd58:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800bd5c:	f022 0203 	bic.w	r2, r2, #3
 800bd60:	4302      	orrs	r2, r0
 800bd62:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bd66:	0799      	lsls	r1, r3, #30
 800bd68:	d509      	bpl.n	800bd7e <HAL_RCCEx_PeriphCLKConfig+0xee>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800bd6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800bd6e:	69e0      	ldr	r0, [r4, #28]
 800bd70:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800bd74:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800bd78:	4302      	orrs	r2, r0
 800bd7a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800bd7e:	06da      	lsls	r2, r3, #27
 800bd80:	d50c      	bpl.n	800bd9c <HAL_RCCEx_PeriphCLKConfig+0x10c>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bd82:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800bd84:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 800bd88:	0c31      	lsrs	r1, r6, #16
 800bd8a:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800bd8e:	0409      	lsls	r1, r1, #16
 800bd90:	ea22 0201 	bic.w	r2, r2, r1
 800bd94:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 800bd98:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800bd9c:	069f      	lsls	r7, r3, #26
 800bd9e:	d50c      	bpl.n	800bdba <HAL_RCCEx_PeriphCLKConfig+0x12a>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800bda0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bda2:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 800bda6:	0c31      	lsrs	r1, r6, #16
 800bda8:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800bdac:	0409      	lsls	r1, r1, #16
 800bdae:	ea22 0201 	bic.w	r2, r2, r1
 800bdb2:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 800bdb6:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800bdba:	075e      	lsls	r6, r3, #29
 800bdbc:	d50f      	bpl.n	800bdde <HAL_RCCEx_PeriphCLKConfig+0x14e>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800bdbe:	6a22      	ldr	r2, [r4, #32]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800bdc0:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 800bdc4:	0910      	lsrs	r0, r2, #4
 800bdc6:	f8d6 1088 	ldr.w	r1, [r6, #136]	; 0x88
 800bdca:	f400 207f 	and.w	r0, r0, #1044480	; 0xff000
 800bdce:	0112      	lsls	r2, r2, #4
 800bdd0:	f402 227f 	and.w	r2, r2, #1044480	; 0xff000
 800bdd4:	ea21 0100 	bic.w	r1, r1, r0
 800bdd8:	430a      	orrs	r2, r1
 800bdda:	f8c6 2088 	str.w	r2, [r6, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800bdde:	0718      	lsls	r0, r3, #28
 800bde0:	d50f      	bpl.n	800be02 <HAL_RCCEx_PeriphCLKConfig+0x172>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800bde2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800bde4:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 800bde8:	0910      	lsrs	r0, r2, #4
 800bdea:	f8d6 1088 	ldr.w	r1, [r6, #136]	; 0x88
 800bdee:	f400 207f 	and.w	r0, r0, #1044480	; 0xff000
 800bdf2:	0112      	lsls	r2, r2, #4
 800bdf4:	f402 227f 	and.w	r2, r2, #1044480	; 0xff000
 800bdf8:	ea21 0100 	bic.w	r1, r1, r0
 800bdfc:	430a      	orrs	r2, r1
 800bdfe:	f8c6 2088 	str.w	r2, [r6, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800be02:	05d9      	lsls	r1, r3, #23
 800be04:	d510      	bpl.n	800be28 <HAL_RCCEx_PeriphCLKConfig+0x198>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800be06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800be0a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800be0c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800be10:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800be14:	4302      	orrs	r2, r0
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800be16:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
 800be1a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
 800be1e:	d06a      	beq.n	800bef6 <HAL_RCCEx_PeriphCLKConfig+0x266>
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800be20:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 800be24:	f000 80a2 	beq.w	800bf6c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800be28:	059f      	lsls	r7, r3, #22
 800be2a:	d513      	bpl.n	800be54 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800be2c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800be2e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800be32:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 800be36:	d003      	beq.n	800be40 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
 800be38:	f031 4280 	bics.w	r2, r1, #1073741824	; 0x40000000
 800be3c:	f040 8086 	bne.w	800bf4c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800be40:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800be44:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 800be48:	430a      	orrs	r2, r1
 800be4a:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800be4e:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
 800be52:	d05a      	beq.n	800bf0a <HAL_RCCEx_PeriphCLKConfig+0x27a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800be54:	055e      	lsls	r6, r3, #21
 800be56:	d510      	bpl.n	800be7a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800be58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800be5c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800be5e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800be62:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800be66:	4302      	orrs	r2, r0
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800be68:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
 800be6c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
 800be70:	d046      	beq.n	800bf00 <HAL_RCCEx_PeriphCLKConfig+0x270>
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800be72:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 800be76:	f000 80af 	beq.w	800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x348>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800be7a:	04da      	lsls	r2, r3, #19
 800be7c:	d509      	bpl.n	800be92 <HAL_RCCEx_PeriphCLKConfig+0x202>
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800be7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800be82:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800be84:	f8d1 2094 	ldr.w	r2, [r1, #148]	; 0x94
 800be88:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800be8c:	4302      	orrs	r2, r0
 800be8e:	f8c1 2094 	str.w	r2, [r1, #148]	; 0x94
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800be92:	049b      	lsls	r3, r3, #18
 800be94:	d50d      	bpl.n	800beb2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800be96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800be9a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800be9c:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800be9e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800bea2:	430b      	orrs	r3, r1
 800bea4:	6253      	str	r3, [r2, #36]	; 0x24
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800bea6:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800bea8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800beaa:	f023 0303 	bic.w	r3, r3, #3
 800beae:	430b      	orrs	r3, r1
 800beb0:	6253      	str	r3, [r2, #36]	; 0x24
}
 800beb2:	4628      	mov	r0, r5
 800beb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      HAL_PWR_EnableBkUpAccess();
 800beb8:	f7ff f9cc 	bl	800b254 <HAL_PWR_EnableBkUpAccess>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800bebc:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800bec0:	2f00      	cmp	r7, #0
 800bec2:	d03b      	beq.n	800bf3c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800bec4:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 800bec8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800becc:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800bed0:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 800bed4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800bed8:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800bedc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800bede:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bee2:	4313      	orrs	r3, r2
        LL_RCC_WriteReg(BDCR, bdcr);
 800bee4:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800bee8:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 800beec:	07da      	lsls	r2, r3, #31
 800beee:	f100 80b2 	bmi.w	800c056 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
 800bef2:	6823      	ldr	r3, [r4, #0]
 800bef4:	e72b      	b.n	800bd4e <HAL_RCCEx_PeriphCLKConfig+0xbe>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800bef6:	68ca      	ldr	r2, [r1, #12]
 800bef8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800befc:	60ca      	str	r2, [r1, #12]
 800befe:	e793      	b.n	800be28 <HAL_RCCEx_PeriphCLKConfig+0x198>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800bf00:	68ca      	ldr	r2, [r1, #12]
 800bf02:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800bf06:	60ca      	str	r2, [r1, #12]
 800bf08:	e7b7      	b.n	800be7a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800bf0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800bf0e:	68d3      	ldr	r3, [r2, #12]
 800bf10:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bf14:	60d3      	str	r3, [r2, #12]
 800bf16:	6823      	ldr	r3, [r4, #0]
 800bf18:	e79c      	b.n	800be54 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800bf1a:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 800bf1e:	68c2      	ldr	r2, [r0, #12]
 800bf20:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800bf24:	60c2      	str	r2, [r0, #12]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800bf26:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 800bf2a:	2500      	movs	r5, #0
 800bf2c:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800bf30:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800bf34:	430a      	orrs	r2, r1
 800bf36:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
 800bf3a:	e6fc      	b.n	800bd36 <HAL_RCCEx_PeriphCLKConfig+0xa6>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800bf3c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800bf3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bf42:	4313      	orrs	r3, r2
 800bf44:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
 800bf48:	6823      	ldr	r3, [r4, #0]
 800bf4a:	e700      	b.n	800bd4e <HAL_RCCEx_PeriphCLKConfig+0xbe>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800bf4c:	f8d0 6088 	ldr.w	r6, [r0, #136]	; 0x88
 800bf50:	f026 4640 	bic.w	r6, r6, #3221225472	; 0xc0000000
 800bf54:	f8c0 6088 	str.w	r6, [r0, #136]	; 0x88
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800bf58:	f8d0 6088 	ldr.w	r6, [r0, #136]	; 0x88
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bf5c:	f021 5280 	bic.w	r2, r1, #268435456	; 0x10000000
 800bf60:	f026 6640 	bic.w	r6, r6, #201326592	; 0xc000000
 800bf64:	4332      	orrs	r2, r6
 800bf66:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
 800bf6a:	e770      	b.n	800be4e <HAL_RCCEx_PeriphCLKConfig+0x1be>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800bf6c:	680b      	ldr	r3, [r1, #0]
 800bf6e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bf72:	600b      	str	r3, [r1, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800bf74:	460e      	mov	r6, r1

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800bf76:	f7fe fa6b 	bl	800a450 <HAL_GetTick>
 800bf7a:	4607      	mov	r7, r0
 800bf7c:	e004      	b.n	800bf88 <HAL_RCCEx_PeriphCLKConfig+0x2f8>

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800bf7e:	f7fe fa67 	bl	800a450 <HAL_GetTick>
 800bf82:	1bc0      	subs	r0, r0, r7
 800bf84:	2802      	cmp	r0, #2
 800bf86:	d863      	bhi.n	800c050 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800bf88:	6833      	ldr	r3, [r6, #0]
 800bf8a:	011a      	lsls	r2, r3, #4
 800bf8c:	d4f7      	bmi.n	800bf7e <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  }

  if (status == HAL_OK)
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800bf8e:	6933      	ldr	r3, [r6, #16]
 800bf90:	6862      	ldr	r2, [r4, #4]
 800bf92:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800bf96:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800bf9a:	6133      	str	r3, [r6, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800bf9c:	6933      	ldr	r3, [r6, #16]
 800bf9e:	68e2      	ldr	r2, [r4, #12]
 800bfa0:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 800bfa4:	4313      	orrs	r3, r2
 800bfa6:	6133      	str	r3, [r6, #16]
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800bfa8:	6833      	ldr	r3, [r6, #0]
 800bfaa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bfae:	6033      	str	r3, [r6, #0]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bfb0:	f7fe fa4e 	bl	800a450 <HAL_GetTick>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800bfb4:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 800bfb8:	4607      	mov	r7, r0
 800bfba:	e004      	b.n	800bfc6 <HAL_RCCEx_PeriphCLKConfig+0x336>

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800bfbc:	f7fe fa48 	bl	800a450 <HAL_GetTick>
 800bfc0:	1bc0      	subs	r0, r0, r7
 800bfc2:	2802      	cmp	r0, #2
 800bfc4:	d844      	bhi.n	800c050 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800bfc6:	6833      	ldr	r3, [r6, #0]
 800bfc8:	011b      	lsls	r3, r3, #4
 800bfca:	d5f7      	bpl.n	800bfbc <HAL_RCCEx_PeriphCLKConfig+0x32c>
    }

    if (status == HAL_OK)
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800bfcc:	6933      	ldr	r3, [r6, #16]
 800bfce:	6962      	ldr	r2, [r4, #20]
 800bfd0:	4313      	orrs	r3, r2
 800bfd2:	6133      	str	r3, [r6, #16]
 800bfd4:	6823      	ldr	r3, [r4, #0]
 800bfd6:	e727      	b.n	800be28 <HAL_RCCEx_PeriphCLKConfig+0x198>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800bfd8:	680b      	ldr	r3, [r1, #0]
 800bfda:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bfde:	600b      	str	r3, [r1, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800bfe0:	460e      	mov	r6, r1

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800bfe2:	f7fe fa35 	bl	800a450 <HAL_GetTick>
 800bfe6:	4607      	mov	r7, r0
 800bfe8:	e004      	b.n	800bff4 <HAL_RCCEx_PeriphCLKConfig+0x364>

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800bfea:	f7fe fa31 	bl	800a450 <HAL_GetTick>
 800bfee:	1bc0      	subs	r0, r0, r7
 800bff0:	2802      	cmp	r0, #2
 800bff2:	d82a      	bhi.n	800c04a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800bff4:	6833      	ldr	r3, [r6, #0]
 800bff6:	0118      	lsls	r0, r3, #4
 800bff8:	d4f7      	bmi.n	800bfea <HAL_RCCEx_PeriphCLKConfig+0x35a>
  }

  if (status == HAL_OK)
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800bffa:	6933      	ldr	r3, [r6, #16]
 800bffc:	6862      	ldr	r2, [r4, #4]
 800bffe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800c002:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800c006:	6133      	str	r3, [r6, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800c008:	6933      	ldr	r3, [r6, #16]
 800c00a:	6922      	ldr	r2, [r4, #16]
 800c00c:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800c010:	4313      	orrs	r3, r2
 800c012:	6133      	str	r3, [r6, #16]
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800c014:	6833      	ldr	r3, [r6, #0]
 800c016:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c01a:	6033      	str	r3, [r6, #0]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c01c:	f7fe fa18 	bl	800a450 <HAL_GetTick>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800c020:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 800c024:	4607      	mov	r7, r0
 800c026:	e004      	b.n	800c032 <HAL_RCCEx_PeriphCLKConfig+0x3a2>

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c028:	f7fe fa12 	bl	800a450 <HAL_GetTick>
 800c02c:	1bc0      	subs	r0, r0, r7
 800c02e:	2802      	cmp	r0, #2
 800c030:	d80b      	bhi.n	800c04a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800c032:	6833      	ldr	r3, [r6, #0]
 800c034:	0119      	lsls	r1, r3, #4
 800c036:	d5f7      	bpl.n	800c028 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }

    if (status == HAL_OK)
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800c038:	6933      	ldr	r3, [r6, #16]
 800c03a:	6962      	ldr	r2, [r4, #20]
 800c03c:	4313      	orrs	r3, r2
 800c03e:	6133      	str	r3, [r6, #16]
 800c040:	6823      	ldr	r3, [r4, #0]
 800c042:	e71a      	b.n	800be7a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800c044:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c046:	2503      	movs	r5, #3
 800c048:	e675      	b.n	800bd36 <HAL_RCCEx_PeriphCLKConfig+0xa6>
 800c04a:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c04c:	2503      	movs	r5, #3
 800c04e:	e714      	b.n	800be7a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800c050:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c052:	2503      	movs	r5, #3
 800c054:	e6e8      	b.n	800be28 <HAL_RCCEx_PeriphCLKConfig+0x198>
          tickstart = HAL_GetTick();
 800c056:	f7fe f9fb 	bl	800a450 <HAL_GetTick>
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c05a:	f241 3788 	movw	r7, #5000	; 0x1388
          tickstart = HAL_GetTick();
 800c05e:	4680      	mov	r8, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800c060:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 800c064:	079b      	lsls	r3, r3, #30
 800c066:	f53f af44 	bmi.w	800bef2 <HAL_RCCEx_PeriphCLKConfig+0x262>
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c06a:	f7fe f9f1 	bl	800a450 <HAL_GetTick>
 800c06e:	eba0 0008 	sub.w	r0, r0, r8
 800c072:	42b8      	cmp	r0, r7
 800c074:	d9f4      	bls.n	800c060 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800c076:	6823      	ldr	r3, [r4, #0]
              ret = HAL_TIMEOUT;
 800c078:	2503      	movs	r5, #3
 800c07a:	e668      	b.n	800bd4e <HAL_RCCEx_PeriphCLKConfig+0xbe>

0800c07c <HAL_RTC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800c07c:	2800      	cmp	r0, #0
 800c07e:	d05e      	beq.n	800c13e <HAL_RTC_Init+0xc2>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800c080:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{
 800c084:	b570      	push	{r4, r5, r6, lr}
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800c086:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c08a:	4604      	mov	r4, r0
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d049      	beq.n	800c124 <HAL_RTC_Init+0xa8>

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c090:	6823      	ldr	r3, [r4, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800c092:	2002      	movs	r0, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c094:	2253      	movs	r2, #83	; 0x53
 800c096:	21ca      	movs	r1, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 800c098:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c09c:	6259      	str	r1, [r3, #36]	; 0x24
 800c09e:	625a      	str	r2, [r3, #36]	; 0x24
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800c0a0:	68da      	ldr	r2, [r3, #12]
 800c0a2:	0650      	lsls	r0, r2, #25
 800c0a4:	d52c      	bpl.n	800c100 <HAL_RTC_Init+0x84>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800c0a6:	6899      	ldr	r1, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800c0a8:	6925      	ldr	r5, [r4, #16]
 800c0aa:	6862      	ldr	r2, [r4, #4]
 800c0ac:	69a0      	ldr	r0, [r4, #24]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800c0ae:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800c0b2:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800c0b6:	6099      	str	r1, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800c0b8:	6899      	ldr	r1, [r3, #8]
 800c0ba:	432a      	orrs	r2, r5
 800c0bc:	4302      	orrs	r2, r0
 800c0be:	430a      	orrs	r2, r1
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800c0c0:	68e1      	ldr	r1, [r4, #12]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800c0c2:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800c0c4:	6119      	str	r1, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800c0c6:	6919      	ldr	r1, [r3, #16]
 800c0c8:	68a5      	ldr	r5, [r4, #8]
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800c0ca:	69e2      	ldr	r2, [r4, #28]
 800c0cc:	6960      	ldr	r0, [r4, #20]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800c0ce:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800c0d2:	6119      	str	r1, [r3, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800c0d4:	68d9      	ldr	r1, [r3, #12]
 800c0d6:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800c0da:	60d9      	str	r1, [r3, #12]
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800c0dc:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800c0de:	f021 0103 	bic.w	r1, r1, #3
 800c0e2:	64d9      	str	r1, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800c0e4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800c0e6:	4302      	orrs	r2, r0
 800c0e8:	430a      	orrs	r2, r1
 800c0ea:	64da      	str	r2, [r3, #76]	; 0x4c
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800c0ec:	689a      	ldr	r2, [r3, #8]
 800c0ee:	0692      	lsls	r2, r2, #26
 800c0f0:	d527      	bpl.n	800c142 <HAL_RTC_Init+0xc6>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c0f2:	21ff      	movs	r1, #255	; 0xff
    hrtc->State = HAL_RTC_STATE_READY;
 800c0f4:	2201      	movs	r2, #1
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c0f6:	6259      	str	r1, [r3, #36]	; 0x24
    return HAL_OK;
 800c0f8:	2000      	movs	r0, #0
    hrtc->State = HAL_RTC_STATE_READY;
 800c0fa:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
}
 800c0fe:	bd70      	pop	{r4, r5, r6, pc}
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800c100:	f04f 32ff 	mov.w	r2, #4294967295
 800c104:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800c106:	f7fe f9a3 	bl	800a450 <HAL_GetTick>
 800c10a:	4605      	mov	r5, r0
 800c10c:	e005      	b.n	800c11a <HAL_RTC_Init+0x9e>
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800c10e:	f7fe f99f 	bl	800a450 <HAL_GetTick>
 800c112:	1b40      	subs	r0, r0, r5
 800c114:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800c118:	d809      	bhi.n	800c12e <HAL_RTC_Init+0xb2>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800c11a:	6823      	ldr	r3, [r4, #0]
 800c11c:	68da      	ldr	r2, [r3, #12]
 800c11e:	0651      	lsls	r1, r2, #25
 800c120:	d5f5      	bpl.n	800c10e <HAL_RTC_Init+0x92>
 800c122:	e7c0      	b.n	800c0a6 <HAL_RTC_Init+0x2a>
    hrtc->Lock = HAL_UNLOCKED;
 800c124:	f880 2020 	strb.w	r2, [r0, #32]
    HAL_RTC_MspInit(hrtc);
 800c128:	f7f5 fb1a 	bl	8001760 <HAL_RTC_MspInit>
 800c12c:	e7b0      	b.n	800c090 <HAL_RTC_Init+0x14>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c12e:	6822      	ldr	r2, [r4, #0]
 800c130:	21ff      	movs	r1, #255	; 0xff
    hrtc->State = HAL_RTC_STATE_ERROR;
 800c132:	2304      	movs	r3, #4
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c134:	6251      	str	r1, [r2, #36]	; 0x24
    return HAL_ERROR;
 800c136:	2001      	movs	r0, #1
    hrtc->State = HAL_RTC_STATE_ERROR;
 800c138:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 800c13c:	bd70      	pop	{r4, r5, r6, pc}
     return HAL_ERROR;
 800c13e:	2001      	movs	r0, #1
}
 800c140:	4770      	bx	lr
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800c142:	68da      	ldr	r2, [r3, #12]
 800c144:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800c148:	60da      	str	r2, [r3, #12]
  tickstart = HAL_GetTick();
 800c14a:	f7fe f981 	bl	800a450 <HAL_GetTick>
 800c14e:	4606      	mov	r6, r0
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c150:	6823      	ldr	r3, [r4, #0]
 800c152:	68dd      	ldr	r5, [r3, #12]
 800c154:	f015 0520 	ands.w	r5, r5, #32
 800c158:	d1cb      	bne.n	800c0f2 <HAL_RTC_Init+0x76>
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800c15a:	f7fe f979 	bl	800a450 <HAL_GetTick>
 800c15e:	1b80      	subs	r0, r0, r6
 800c160:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800c164:	d9f4      	bls.n	800c150 <HAL_RTC_Init+0xd4>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c166:	6822      	ldr	r2, [r4, #0]
 800c168:	21ff      	movs	r1, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_ERROR;
 800c16a:	2304      	movs	r3, #4
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c16c:	6251      	str	r1, [r2, #36]	; 0x24
        return HAL_ERROR;
 800c16e:	2001      	movs	r0, #1
        __HAL_UNLOCK(hrtc);
 800c170:	f884 5020 	strb.w	r5, [r4, #32]
        hrtc->State = HAL_RTC_STATE_ERROR;
 800c174:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 800c178:	bd70      	pop	{r4, r5, r6, pc}
 800c17a:	bf00      	nop

0800c17c <HAL_UART_ErrorCallback>:
 800c17c:	4770      	bx	lr
 800c17e:	bf00      	nop

0800c180 <HAL_UART_IRQHandler>:
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c180:	6802      	ldr	r2, [r0, #0]
 800c182:	69d3      	ldr	r3, [r2, #28]
{
 800c184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c188:	f640 050f 	movw	r5, #2063	; 0x80f
  if (errorflags == 0U)
 800c18c:	422b      	tst	r3, r5
{
 800c18e:	4604      	mov	r4, r0
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c190:	6810      	ldr	r0, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c192:	6891      	ldr	r1, [r2, #8]
  if (errorflags == 0U)
 800c194:	d071      	beq.n	800c27a <HAL_UART_IRQHandler+0xfa>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c196:	4d74      	ldr	r5, [pc, #464]	; (800c368 <HAL_UART_IRQHandler+0x1e8>)
 800c198:	400d      	ands	r5, r1
 800c19a:	f000 8090 	beq.w	800c2be <HAL_UART_IRQHandler+0x13e>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c19e:	07df      	lsls	r7, r3, #31
 800c1a0:	d509      	bpl.n	800c1b6 <HAL_UART_IRQHandler+0x36>
 800c1a2:	05c6      	lsls	r6, r0, #23
 800c1a4:	d507      	bpl.n	800c1b6 <HAL_UART_IRQHandler+0x36>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c1a6:	2601      	movs	r6, #1
 800c1a8:	6216      	str	r6, [r2, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c1aa:	f8d4 6088 	ldr.w	r6, [r4, #136]	; 0x88
 800c1ae:	f046 0601 	orr.w	r6, r6, #1
 800c1b2:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c1b6:	079f      	lsls	r7, r3, #30
 800c1b8:	f003 0604 	and.w	r6, r3, #4
 800c1bc:	f140 8094 	bpl.w	800c2e8 <HAL_UART_IRQHandler+0x168>
 800c1c0:	07cf      	lsls	r7, r1, #31
 800c1c2:	d50a      	bpl.n	800c1da <HAL_UART_IRQHandler+0x5a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c1c4:	2702      	movs	r7, #2
 800c1c6:	6217      	str	r7, [r2, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c1c8:	f8d4 7088 	ldr.w	r7, [r4, #136]	; 0x88
 800c1cc:	f047 0704 	orr.w	r7, r7, #4
 800c1d0:	f8c4 7088 	str.w	r7, [r4, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c1d4:	2e00      	cmp	r6, #0
 800c1d6:	f040 808d 	bne.w	800c2f4 <HAL_UART_IRQHandler+0x174>

      huart->ErrorCode |= HAL_UART_ERROR_NE;
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c1da:	071f      	lsls	r7, r3, #28
 800c1dc:	d505      	bpl.n	800c1ea <HAL_UART_IRQHandler+0x6a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c1de:	0686      	lsls	r6, r0, #26
 800c1e0:	f100 8098 	bmi.w	800c314 <HAL_UART_IRQHandler+0x194>
 800c1e4:	2d00      	cmp	r5, #0
 800c1e6:	f040 8095 	bne.w	800c314 <HAL_UART_IRQHandler+0x194>

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c1ea:	051f      	lsls	r7, r3, #20
 800c1ec:	d50a      	bpl.n	800c204 <HAL_UART_IRQHandler+0x84>
 800c1ee:	0146      	lsls	r6, r0, #5
 800c1f0:	d508      	bpl.n	800c204 <HAL_UART_IRQHandler+0x84>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c1f2:	f44f 6500 	mov.w	r5, #2048	; 0x800
 800c1f6:	6215      	str	r5, [r2, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c1f8:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 800c1fc:	f045 0520 	orr.w	r5, r5, #32
 800c200:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c204:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 800c208:	2d00      	cmp	r5, #0
 800c20a:	d06b      	beq.n	800c2e4 <HAL_UART_IRQHandler+0x164>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c20c:	069d      	lsls	r5, r3, #26
 800c20e:	d507      	bpl.n	800c220 <HAL_UART_IRQHandler+0xa0>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c210:	0680      	lsls	r0, r0, #26
 800c212:	f140 808c 	bpl.w	800c32e <HAL_UART_IRQHandler+0x1ae>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
      {
        if (huart->RxISR != NULL)
 800c216:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800c218:	b113      	cbz	r3, 800c220 <HAL_UART_IRQHandler+0xa0>
        {
          huart->RxISR(huart);
 800c21a:	4620      	mov	r0, r4
 800c21c:	4798      	blx	r3
 800c21e:	6822      	ldr	r2, [r4, #0]
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c220:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c224:	6891      	ldr	r1, [r2, #8]
 800c226:	064f      	lsls	r7, r1, #25
 800c228:	d403      	bmi.n	800c232 <HAL_UART_IRQHandler+0xb2>
 800c22a:	f015 0528 	ands.w	r5, r5, #40	; 0x28
 800c22e:	f000 8094 	beq.w	800c35a <HAL_UART_IRQHandler+0x1da>
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c232:	6813      	ldr	r3, [r2, #0]
 800c234:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c238:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c23a:	6893      	ldr	r3, [r2, #8]
 800c23c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c240:	f023 0301 	bic.w	r3, r3, #1

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c244:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c246:	6093      	str	r3, [r2, #8]
  huart->RxState = HAL_UART_STATE_READY;
 800c248:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c24c:	6893      	ldr	r3, [r2, #8]

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c24e:	2100      	movs	r1, #0
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c250:	065e      	lsls	r6, r3, #25
  huart->RxISR = NULL;
 800c252:	66e1      	str	r1, [r4, #108]	; 0x6c
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c254:	d567      	bpl.n	800c326 <HAL_UART_IRQHandler+0x1a6>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c256:	6893      	ldr	r3, [r2, #8]
          if (huart->hdmarx != NULL)
 800c258:	6fa0      	ldr	r0, [r4, #120]	; 0x78
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c25a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c25e:	6093      	str	r3, [r2, #8]
          if (huart->hdmarx != NULL)
 800c260:	2800      	cmp	r0, #0
 800c262:	d060      	beq.n	800c326 <HAL_UART_IRQHandler+0x1a6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c264:	4b41      	ldr	r3, [pc, #260]	; (800c36c <HAL_UART_IRQHandler+0x1ec>)
 800c266:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c268:	f7fe fa34 	bl	800a6d4 <HAL_DMA_Abort_IT>
 800c26c:	2800      	cmp	r0, #0
 800c26e:	d039      	beq.n	800c2e4 <HAL_UART_IRQHandler+0x164>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c270:	6fa0      	ldr	r0, [r4, #120]	; 0x78
}
 800c272:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c276:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800c278:	4718      	bx	r3
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c27a:	069f      	lsls	r7, r3, #26
 800c27c:	d509      	bpl.n	800c292 <HAL_UART_IRQHandler+0x112>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c27e:	0686      	lsls	r6, r0, #26
 800c280:	d505      	bpl.n	800c28e <HAL_UART_IRQHandler+0x10e>
      if (huart->RxISR != NULL)
 800c282:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800c284:	b373      	cbz	r3, 800c2e4 <HAL_UART_IRQHandler+0x164>
      huart->TxISR(huart);
 800c286:	4620      	mov	r0, r4
}
 800c288:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      huart->TxISR(huart);
 800c28c:	4718      	bx	r3
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c28e:	00cd      	lsls	r5, r1, #3
 800c290:	d4f7      	bmi.n	800c282 <HAL_UART_IRQHandler+0x102>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c292:	02dd      	lsls	r5, r3, #11
 800c294:	d409      	bmi.n	800c2aa <HAL_UART_IRQHandler+0x12a>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c296:	061e      	lsls	r6, r3, #24
 800c298:	d51a      	bpl.n	800c2d0 <HAL_UART_IRQHandler+0x150>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c29a:	0605      	lsls	r5, r0, #24
 800c29c:	d516      	bpl.n	800c2cc <HAL_UART_IRQHandler+0x14c>
    if (huart->TxISR != NULL)
 800c29e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c2a0:	b303      	cbz	r3, 800c2e4 <HAL_UART_IRQHandler+0x164>
      huart->TxISR(huart);
 800c2a2:	4620      	mov	r0, r4
}
 800c2a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      huart->TxISR(huart);
 800c2a8:	4718      	bx	r3
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c2aa:	024f      	lsls	r7, r1, #9
 800c2ac:	d5f3      	bpl.n	800c296 <HAL_UART_IRQHandler+0x116>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c2ae:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 800c2b2:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c2b4:	6213      	str	r3, [r2, #32]
}
 800c2b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_WakeupCallback(huart);
 800c2ba:	f000 b867 	b.w	800c38c <HAL_UARTEx_WakeupCallback>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c2be:	4e2c      	ldr	r6, [pc, #176]	; (800c370 <HAL_UART_IRQHandler+0x1f0>)
 800c2c0:	4230      	tst	r0, r6
 800c2c2:	d0e6      	beq.n	800c292 <HAL_UART_IRQHandler+0x112>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c2c4:	07df      	lsls	r7, r3, #31
 800c2c6:	f57f af76 	bpl.w	800c1b6 <HAL_UART_IRQHandler+0x36>
 800c2ca:	e76a      	b.n	800c1a2 <HAL_UART_IRQHandler+0x22>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c2cc:	020f      	lsls	r7, r1, #8
 800c2ce:	d4e6      	bmi.n	800c29e <HAL_UART_IRQHandler+0x11e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c2d0:	065e      	lsls	r6, r3, #25
 800c2d2:	d501      	bpl.n	800c2d8 <HAL_UART_IRQHandler+0x158>
 800c2d4:	0645      	lsls	r5, r0, #25
 800c2d6:	d42e      	bmi.n	800c336 <HAL_UART_IRQHandler+0x1b6>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c2d8:	0219      	lsls	r1, r3, #8
 800c2da:	d414      	bmi.n	800c306 <HAL_UART_IRQHandler+0x186>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c2dc:	01db      	lsls	r3, r3, #7
 800c2de:	d501      	bpl.n	800c2e4 <HAL_UART_IRQHandler+0x164>
 800c2e0:	2800      	cmp	r0, #0
 800c2e2:	db35      	blt.n	800c350 <HAL_UART_IRQHandler+0x1d0>
}
 800c2e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c2e8:	2e00      	cmp	r6, #0
 800c2ea:	f43f af76 	beq.w	800c1da <HAL_UART_IRQHandler+0x5a>
 800c2ee:	07ce      	lsls	r6, r1, #31
 800c2f0:	f57f af73 	bpl.w	800c1da <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c2f4:	2604      	movs	r6, #4
 800c2f6:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c2f8:	f8d4 6088 	ldr.w	r6, [r4, #136]	; 0x88
 800c2fc:	f046 0602 	orr.w	r6, r6, #2
 800c300:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
 800c304:	e769      	b.n	800c1da <HAL_UART_IRQHandler+0x5a>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c306:	0042      	lsls	r2, r0, #1
 800c308:	d5e8      	bpl.n	800c2dc <HAL_UART_IRQHandler+0x15c>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c30a:	4620      	mov	r0, r4
}
 800c30c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c310:	f000 b840 	b.w	800c394 <HAL_UARTEx_TxFifoEmptyCallback>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c314:	2508      	movs	r5, #8
 800c316:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c318:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 800c31c:	f045 0508 	orr.w	r5, r5, #8
 800c320:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
 800c324:	e761      	b.n	800c1ea <HAL_UART_IRQHandler+0x6a>
            HAL_UART_ErrorCallback(huart);
 800c326:	4620      	mov	r0, r4
 800c328:	f7ff ff28 	bl	800c17c <HAL_UART_ErrorCallback>
 800c32c:	e7da      	b.n	800c2e4 <HAL_UART_IRQHandler+0x164>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c32e:	00cb      	lsls	r3, r1, #3
 800c330:	f57f af76 	bpl.w	800c220 <HAL_UART_IRQHandler+0xa0>
 800c334:	e76f      	b.n	800c216 <HAL_UART_IRQHandler+0x96>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c336:	6813      	ldr	r3, [r2, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c338:	2520      	movs	r5, #32
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c33a:	f023 0340 	bic.w	r3, r3, #64	; 0x40

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c33e:	2100      	movs	r1, #0
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c340:	6013      	str	r3, [r2, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c342:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 800c344:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  huart->TxISR = NULL;
 800c348:	6721      	str	r1, [r4, #112]	; 0x70
  HAL_UART_TxCpltCallback(huart);
 800c34a:	f7f5 f89f 	bl	800148c <HAL_UART_TxCpltCallback>
 800c34e:	e7c9      	b.n	800c2e4 <HAL_UART_IRQHandler+0x164>
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c350:	4620      	mov	r0, r4
}
 800c352:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c356:	f000 b81b 	b.w	800c390 <HAL_UARTEx_RxFifoFullCallback>
        HAL_UART_ErrorCallback(huart);
 800c35a:	4620      	mov	r0, r4
 800c35c:	f7ff ff0e 	bl	800c17c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c360:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
 800c364:	e7be      	b.n	800c2e4 <HAL_UART_IRQHandler+0x164>
 800c366:	bf00      	nop
 800c368:	10000001 	.word	0x10000001
 800c36c:	0800c375 	.word	0x0800c375
 800c370:	04000120 	.word	0x04000120

0800c374 <UART_DMAAbortOnError>:
{
 800c374:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c376:	6a83      	ldr	r3, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 800c378:	2200      	movs	r2, #0
 800c37a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  HAL_UART_ErrorCallback(huart);
 800c37e:	4618      	mov	r0, r3
  huart->TxXferCount = 0U;
 800c380:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 800c384:	f7ff fefa 	bl	800c17c <HAL_UART_ErrorCallback>
}
 800c388:	bd08      	pop	{r3, pc}
 800c38a:	bf00      	nop

0800c38c <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c38c:	4770      	bx	lr
 800c38e:	bf00      	nop

0800c390 <HAL_UARTEx_RxFifoFullCallback>:
 800c390:	4770      	bx	lr
 800c392:	bf00      	nop

0800c394 <HAL_UARTEx_TxFifoEmptyCallback>:
 800c394:	4770      	bx	lr
 800c396:	bf00      	nop

0800c398 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable(void)
{
 800c398:	b510      	push	{r4, lr}
  struct hci_request rq;
  tBleStatus status = 0;
 800c39a:	2400      	movs	r4, #0
{
 800c39c:	b088      	sub	sp, #32
  Osal_MemSet(&rq, 0, sizeof(rq));
 800c39e:	4621      	mov	r1, r4
 800c3a0:	a802      	add	r0, sp, #8
 800c3a2:	2218      	movs	r2, #24
  tBleStatus status = 0;
 800c3a4:	f88d 4007 	strb.w	r4, [sp, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 800c3a8:	f000 ffe6 	bl	800d378 <Osal_MemSet>
  rq.ogf = 0x3f;
 800c3ac:	4b08      	ldr	r3, [pc, #32]	; (800c3d0 <aci_gap_set_non_discoverable+0x38>)
 800c3ae:	9302      	str	r3, [sp, #8]
  rq.ocf = 0x081;
  rq.rparam = &status;
 800c3b0:	f10d 0207 	add.w	r2, sp, #7
  rq.rlen = 1;
 800c3b4:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 800c3b6:	4621      	mov	r1, r4
 800c3b8:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 800c3ba:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 800c3be:	f000 fbc3 	bl	800cb48 <hci_send_req>
 800c3c2:	42a0      	cmp	r0, r4
    return BLE_STATUS_TIMEOUT;
  if (status) 
 800c3c4:	bfac      	ite	ge
 800c3c6:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 800c3ca:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800c3cc:	b008      	add	sp, #32
 800c3ce:	bd10      	pop	{r4, pc}
 800c3d0:	0081003f 	.word	0x0081003f

0800c3d4 <aci_gap_set_discoverable>:
                                    uint8_t Local_Name[],
                                    uint8_t Service_Uuid_length,
                                    uint8_t Service_Uuid_List[],
                                    uint16_t Slave_Conn_Interval_Min,
                                    uint16_t Slave_Conn_Interval_Max)
{
 800c3d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3d8:	b0cd      	sub	sp, #308	; 0x134
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
  tBleStatus status = 0;
 800c3da:	2700      	movs	r7, #0
{
 800c3dc:	f89d 515c 	ldrb.w	r5, [sp, #348]	; 0x15c
 800c3e0:	f89d 8164 	ldrb.w	r8, [sp, #356]	; 0x164
 800c3e4:	f8bd 416c 	ldrh.w	r4, [sp, #364]	; 0x16c
 800c3e8:	f8bd 6170 	ldrh.w	r6, [sp, #368]	; 0x170
 800c3ec:	9401      	str	r4, [sp, #4]
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800c3ee:	f105 0a08 	add.w	sl, r5, #8
 800c3f2:	ac0c      	add	r4, sp, #48	; 0x30
{
 800c3f4:	9602      	str	r6, [sp, #8]
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800c3f6:	f108 0609 	add.w	r6, r8, #9
{
 800c3fa:	f89d c158 	ldrb.w	ip, [sp, #344]	; 0x158
  int index_input = 0;
  cp0->Advertising_Type = htob(Advertising_Type, 1);
 800c3fe:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800c402:	442e      	add	r6, r5
  index_input += 1;
  cp0->Advertising_Interval_Min = htob(Advertising_Interval_Min, 2);
 800c404:	f8ad 1031 	strh.w	r1, [sp, #49]	; 0x31
  index_input += 2;
  cp0->Advertising_Interval_Max = htob(Advertising_Interval_Max, 2);
 800c408:	f8ad 2033 	strh.w	r2, [sp, #51]	; 0x33
  index_input += 1;
  cp0->Local_Name_Length = htob(Local_Name_Length, 1);
  index_input += 1;
  /* var_len_data input */
  {
    Osal_MemCpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length);
 800c40c:	9958      	ldr	r1, [sp, #352]	; 0x160
  cp0->Advertising_Filter_Policy = htob(Advertising_Filter_Policy, 1);
 800c40e:	f88d c036 	strb.w	ip, [sp, #54]	; 0x36
    Osal_MemCpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length);
 800c412:	462a      	mov	r2, r5
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800c414:	eb04 0b0a 	add.w	fp, r4, sl
    Osal_MemCpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length);
 800c418:	a80e      	add	r0, sp, #56	; 0x38
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 800c41a:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
  cp0->Local_Name_Length = htob(Local_Name_Length, 1);
 800c41e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  tBleStatus status = 0;
 800c422:	f88d 7017 	strb.w	r7, [sp, #23]
    Osal_MemCpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length);
 800c426:	f000 ffa5 	bl	800d374 <Osal_MemCpy>
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800c42a:	19a3      	adds	r3, r4, r6
    index_input += Local_Name_Length;
    {
      cp1->Service_Uuid_length = htob(Service_Uuid_length, 1);
    }
    index_input += 1;
    Osal_MemCpy((void *) &cp1->Service_Uuid_List, (const void *) Service_Uuid_List, Service_Uuid_length);
 800c42c:	4642      	mov	r2, r8
 800c42e:	995a      	ldr	r1, [sp, #360]	; 0x168
      cp1->Service_Uuid_length = htob(Service_Uuid_length, 1);
 800c430:	f804 800a 	strb.w	r8, [r4, sl]
    Osal_MemCpy((void *) &cp1->Service_Uuid_List, (const void *) Service_Uuid_List, Service_Uuid_length);
 800c434:	f10b 0001 	add.w	r0, fp, #1
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800c438:	9303      	str	r3, [sp, #12]
    Osal_MemCpy((void *) &cp1->Service_Uuid_List, (const void *) Service_Uuid_List, Service_Uuid_length);
 800c43a:	f000 ff9b 	bl	800d374 <Osal_MemCpy>
    index_input += Service_Uuid_length;
    {
      cp2->Slave_Conn_Interval_Min = htob(Slave_Conn_Interval_Min, 2);
 800c43e:	9b01      	ldr	r3, [sp, #4]
 800c440:	53a3      	strh	r3, [r4, r6]
    }
    index_input += 2;
    {
      cp2->Slave_Conn_Interval_Max = htob(Slave_Conn_Interval_Max, 2);
 800c442:	e9dd 6302 	ldrd	r6, r3, [sp, #8]
    index_input += 1;
 800c446:	3509      	adds	r5, #9
    }
    index_input += 2;
  }
  Osal_MemSet(&rq, 0, sizeof(rq));
 800c448:	4639      	mov	r1, r7
      cp2->Slave_Conn_Interval_Max = htob(Slave_Conn_Interval_Max, 2);
 800c44a:	805e      	strh	r6, [r3, #2]
    index_input += Service_Uuid_length;
 800c44c:	4445      	add	r5, r8
  Osal_MemSet(&rq, 0, sizeof(rq));
 800c44e:	a806      	add	r0, sp, #24
 800c450:	2218      	movs	r2, #24
 800c452:	f000 ff91 	bl	800d378 <Osal_MemSet>
  tBleStatus status = 0;
 800c456:	f10d 0917 	add.w	r9, sp, #23
  rq.ogf = 0x3f;
 800c45a:	4a0a      	ldr	r2, [pc, #40]	; (800c484 <aci_gap_set_discoverable+0xb0>)
  rq.ocf = 0x083;
  rq.cparam = cmd_buffer;
 800c45c:	9408      	str	r4, [sp, #32]
  rq.clen = index_input;
  rq.rparam = &status;
  rq.rlen = 1;
 800c45e:	2301      	movs	r3, #1
    index_input += 2;
 800c460:	3504      	adds	r5, #4
  if (hci_send_req(&rq, FALSE) < 0)
 800c462:	4639      	mov	r1, r7
 800c464:	a806      	add	r0, sp, #24
  rq.rparam = &status;
 800c466:	e9cd 5909 	strd	r5, r9, [sp, #36]	; 0x24
  rq.ogf = 0x3f;
 800c46a:	9206      	str	r2, [sp, #24]
  rq.rlen = 1;
 800c46c:	930b      	str	r3, [sp, #44]	; 0x2c
  if (hci_send_req(&rq, FALSE) < 0)
 800c46e:	f000 fb6b 	bl	800cb48 <hci_send_req>
 800c472:	42b8      	cmp	r0, r7
    return BLE_STATUS_TIMEOUT;
  if (status) 
 800c474:	bfac      	ite	ge
 800c476:	f899 0000 	ldrbge.w	r0, [r9]
    return BLE_STATUS_TIMEOUT;
 800c47a:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800c47c:	b04d      	add	sp, #308	; 0x134
 800c47e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c482:	bf00      	nop
 800c484:	0083003f 	.word	0x0083003f

0800c488 <aci_gap_set_io_capability>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_set_io_capability(uint8_t IO_Capability)
{
 800c488:	b570      	push	{r4, r5, r6, lr}
 800c48a:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 800c48c:	2400      	movs	r4, #0
  int index_input = 0;
  cp0->IO_Capability = htob(IO_Capability, 1);
 800c48e:	f88d 0020 	strb.w	r0, [sp, #32]
  index_input += 1;
  Osal_MemSet(&rq, 0, sizeof(rq));
 800c492:	4621      	mov	r1, r4
 800c494:	a802      	add	r0, sp, #8
 800c496:	2218      	movs	r2, #24
  tBleStatus status = 0;
 800c498:	f10d 0507 	add.w	r5, sp, #7
  cp0->IO_Capability = htob(IO_Capability, 1);
 800c49c:	ae08      	add	r6, sp, #32
  tBleStatus status = 0;
 800c49e:	f88d 4007 	strb.w	r4, [sp, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 800c4a2:	f000 ff69 	bl	800d378 <Osal_MemSet>
  rq.ogf = 0x3f;
  rq.ocf = 0x085;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
 800c4a6:	2301      	movs	r3, #1
  rq.ogf = 0x3f;
 800c4a8:	4a07      	ldr	r2, [pc, #28]	; (800c4c8 <aci_gap_set_io_capability+0x40>)
  rq.cparam = cmd_buffer;
 800c4aa:	9604      	str	r6, [sp, #16]
  rq.rparam = &status;
  rq.rlen = 1;
  if (hci_send_req(&rq, FALSE) < 0)
 800c4ac:	4621      	mov	r1, r4
 800c4ae:	a802      	add	r0, sp, #8
  rq.rparam = &status;
 800c4b0:	9506      	str	r5, [sp, #24]
  rq.ogf = 0x3f;
 800c4b2:	9202      	str	r2, [sp, #8]
  rq.clen = index_input;
 800c4b4:	9305      	str	r3, [sp, #20]
  rq.rlen = 1;
 800c4b6:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800c4b8:	f000 fb46 	bl	800cb48 <hci_send_req>
 800c4bc:	42a0      	cmp	r0, r4
    return BLE_STATUS_TIMEOUT;
  if (status) 
 800c4be:	bfac      	ite	ge
 800c4c0:	7828      	ldrbge	r0, [r5, #0]
    return BLE_STATUS_TIMEOUT;
 800c4c2:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800c4c4:	b048      	add	sp, #288	; 0x120
 800c4c6:	bd70      	pop	{r4, r5, r6, pc}
 800c4c8:	0085003f 	.word	0x0085003f

0800c4cc <aci_gap_set_authentication_requirement>:
                                                  uint8_t Min_Encryption_Key_Size,
                                                  uint8_t Max_Encryption_Key_Size,
                                                  uint8_t Use_Fixed_Pin,
                                                  uint32_t Fixed_Pin,
                                                  uint8_t Identity_Address_Type)
{
 800c4cc:	b5f0      	push	{r4, r5, r6, r7, lr}
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 800c4ce:	2600      	movs	r6, #0
  int index_input = 0;
  cp0->Bonding_Mode = htob(Bonding_Mode, 1);
 800c4d0:	4635      	mov	r5, r6
 800c4d2:	f360 0507 	bfi	r5, r0, #0, #8
{
 800c4d6:	b0c9      	sub	sp, #292	; 0x124
  cp0->Bonding_Mode = htob(Bonding_Mode, 1);
 800c4d8:	f361 250f 	bfi	r5, r1, #8, #8
 800c4dc:	f362 4517 	bfi	r5, r2, #16, #8
{
 800c4e0:	f89d 113c 	ldrb.w	r1, [sp, #316]	; 0x13c
 800c4e4:	f89d 0140 	ldrb.w	r0, [sp, #320]	; 0x140
 800c4e8:	9a51      	ldr	r2, [sp, #324]	; 0x144
  index_input += 1;
  cp0->KeyPress_Notification_Support = htob(KeyPress_Notification_Support, 1);
  index_input += 1;
  cp0->Min_Encryption_Key_Size = htob(Min_Encryption_Key_Size, 1);
  index_input += 1;
  cp0->Max_Encryption_Key_Size = htob(Max_Encryption_Key_Size, 1);
 800c4ea:	f88d 1025 	strb.w	r1, [sp, #37]	; 0x25
  cp0->Bonding_Mode = htob(Bonding_Mode, 1);
 800c4ee:	f363 651f 	bfi	r5, r3, #24, #8
{
 800c4f2:	f89d 3138 	ldrb.w	r3, [sp, #312]	; 0x138
  cp0->Min_Encryption_Key_Size = htob(Min_Encryption_Key_Size, 1);
 800c4f6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  index_input += 1;
  cp0->Fixed_Pin = htob(Fixed_Pin, 4);
  index_input += 4;
  cp0->Identity_Address_Type = htob(Identity_Address_Type, 1);
  index_input += 1;
  Osal_MemSet(&rq, 0, sizeof(rq));
 800c4fa:	4631      	mov	r1, r6
{
 800c4fc:	f89d 3148 	ldrb.w	r3, [sp, #328]	; 0x148
  cp0->Use_Fixed_Pin = htob(Use_Fixed_Pin, 1);
 800c500:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
  cp0->Fixed_Pin = htob(Fixed_Pin, 4);
 800c504:	f8cd 2027 	str.w	r2, [sp, #39]	; 0x27
  Osal_MemSet(&rq, 0, sizeof(rq));
 800c508:	a802      	add	r0, sp, #8
 800c50a:	2218      	movs	r2, #24
  tBleStatus status = 0;
 800c50c:	f10d 0707 	add.w	r7, sp, #7
  cp0->Bonding_Mode = htob(Bonding_Mode, 1);
 800c510:	9508      	str	r5, [sp, #32]
  cp0->Identity_Address_Type = htob(Identity_Address_Type, 1);
 800c512:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
  cp0->Bonding_Mode = htob(Bonding_Mode, 1);
 800c516:	ac08      	add	r4, sp, #32
  tBleStatus status = 0;
 800c518:	f88d 6007 	strb.w	r6, [sp, #7]
  rq.ogf = 0x3f;
 800c51c:	4d09      	ldr	r5, [pc, #36]	; (800c544 <aci_gap_set_authentication_requirement+0x78>)
  Osal_MemSet(&rq, 0, sizeof(rq));
 800c51e:	f000 ff2b 	bl	800d378 <Osal_MemSet>
  rq.ocf = 0x086;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
 800c522:	220c      	movs	r2, #12
  rq.rparam = &status;
  rq.rlen = 1;
 800c524:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 800c526:	4631      	mov	r1, r6
 800c528:	a802      	add	r0, sp, #8
  rq.cparam = cmd_buffer;
 800c52a:	9404      	str	r4, [sp, #16]
  rq.rparam = &status;
 800c52c:	9706      	str	r7, [sp, #24]
  rq.ogf = 0x3f;
 800c52e:	9502      	str	r5, [sp, #8]
  rq.clen = index_input;
 800c530:	9205      	str	r2, [sp, #20]
  rq.rlen = 1;
 800c532:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800c534:	f000 fb08 	bl	800cb48 <hci_send_req>
 800c538:	42b0      	cmp	r0, r6
    return BLE_STATUS_TIMEOUT;
  if (status) 
 800c53a:	bfac      	ite	ge
 800c53c:	7838      	ldrbge	r0, [r7, #0]
    return BLE_STATUS_TIMEOUT;
 800c53e:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800c540:	b049      	add	sp, #292	; 0x124
 800c542:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c544:	0086003f 	.word	0x0086003f

0800c548 <aci_gap_init>:
                        uint8_t privacy_enabled,
                        uint8_t device_name_char_len,
                        uint16_t *Service_Handle,
                        uint16_t *Dev_Name_Char_Handle,
                        uint16_t *Appearance_Char_Handle)
{
 800c548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c54c:	b0c8      	sub	sp, #288	; 0x120
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
  aci_gap_init_rp0 resp;
  Osal_MemSet(&resp, 0, sizeof(resp));
  int index_input = 0;
  cp0->Role = htob(Role, 1);
 800c54e:	ac08      	add	r4, sp, #32
{
 800c550:	4615      	mov	r5, r2
 800c552:	4680      	mov	r8, r0
 800c554:	460e      	mov	r6, r1
  Osal_MemSet(&resp, 0, sizeof(resp));
 800c556:	2207      	movs	r2, #7
 800c558:	2100      	movs	r1, #0
 800c55a:	4668      	mov	r0, sp
{
 800c55c:	461f      	mov	r7, r3
  Osal_MemSet(&resp, 0, sizeof(resp));
 800c55e:	f000 ff0b 	bl	800d378 <Osal_MemSet>
  index_input += 1;
  cp0->privacy_enabled = htob(privacy_enabled, 1);
  index_input += 1;
  cp0->device_name_char_len = htob(device_name_char_len, 1);
  index_input += 1;
  Osal_MemSet(&rq, 0, sizeof(rq));
 800c562:	2218      	movs	r2, #24
 800c564:	2100      	movs	r1, #0
  cp0->device_name_char_len = htob(device_name_char_len, 1);
 800c566:	70a5      	strb	r5, [r4, #2]
  Osal_MemSet(&rq, 0, sizeof(rq));
 800c568:	a802      	add	r0, sp, #8
  cp0->Role = htob(Role, 1);
 800c56a:	f884 8000 	strb.w	r8, [r4]
  cp0->privacy_enabled = htob(privacy_enabled, 1);
 800c56e:	7066      	strb	r6, [r4, #1]
  Osal_MemSet(&rq, 0, sizeof(rq));
 800c570:	f000 ff02 	bl	800d378 <Osal_MemSet>
  rq.ogf = 0x3f;
 800c574:	4d14      	ldr	r5, [pc, #80]	; (800c5c8 <aci_gap_init+0x80>)
  rq.ocf = 0x08a;
  rq.cparam = cmd_buffer;
 800c576:	9404      	str	r4, [sp, #16]
  rq.clen = index_input;
 800c578:	2203      	movs	r2, #3
  rq.rparam = &resp;
  rq.rlen = sizeof(resp);
 800c57a:	2307      	movs	r3, #7
  if (hci_send_req(&rq, FALSE) < 0)
 800c57c:	a802      	add	r0, sp, #8
 800c57e:	2100      	movs	r1, #0
  rq.rparam = &resp;
 800c580:	f8cd d018 	str.w	sp, [sp, #24]
  rq.ogf = 0x3f;
 800c584:	9502      	str	r5, [sp, #8]
  rq.clen = index_input;
 800c586:	9205      	str	r2, [sp, #20]
  rq.rlen = sizeof(resp);
 800c588:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800c58a:	f000 fadd 	bl	800cb48 <hci_send_req>
 800c58e:	2800      	cmp	r0, #0
 800c590:	db16      	blt.n	800c5c0 <aci_gap_init+0x78>
    return BLE_STATUS_TIMEOUT;
  if (resp.Status) 
 800c592:	f89d 0000 	ldrb.w	r0, [sp]
 800c596:	b980      	cbnz	r0, 800c5ba <aci_gap_init+0x72>
  {
    return resp.Status;
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 800c598:	9900      	ldr	r1, [sp, #0]
  *Dev_Name_Char_Handle = btoh(resp.Dev_Name_Char_Handle, 2);
 800c59a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800c59e:	f89d 4004 	ldrb.w	r4, [sp, #4]
  *Appearance_Char_Handle = btoh(resp.Appearance_Char_Handle, 2);
 800c5a2:	9b01      	ldr	r3, [sp, #4]
  *Service_Handle = btoh(resp.Service_Handle, 2);
 800c5a4:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800c5a8:	8039      	strh	r1, [r7, #0]
  *Dev_Name_Char_Handle = btoh(resp.Dev_Name_Char_Handle, 2);
 800c5aa:	994e      	ldr	r1, [sp, #312]	; 0x138
 800c5ac:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 800c5b0:	800a      	strh	r2, [r1, #0]
  *Appearance_Char_Handle = btoh(resp.Appearance_Char_Handle, 2);
 800c5b2:	9a4f      	ldr	r2, [sp, #316]	; 0x13c
 800c5b4:	f3c3 230f 	ubfx	r3, r3, #8, #16
 800c5b8:	8013      	strh	r3, [r2, #0]
  return BLE_STATUS_SUCCESS;
}
 800c5ba:	b048      	add	sp, #288	; 0x120
 800c5bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return BLE_STATUS_TIMEOUT;
 800c5c0:	20ff      	movs	r0, #255	; 0xff
}
 800c5c2:	b048      	add	sp, #288	; 0x120
 800c5c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5c8:	008a003f 	.word	0x008a003f

0800c5cc <aci_gap_update_adv_data>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_update_adv_data(uint8_t AdvDataLen,
                                   uint8_t AdvData[])
{
 800c5cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c5ce:	b0c9      	sub	sp, #292	; 0x124
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 800c5d0:	2500      	movs	r5, #0
{
 800c5d2:	4604      	mov	r4, r0
  int index_input = 0;
  cp0->AdvDataLen = htob(AdvDataLen, 1);
  index_input += 1;
  Osal_MemCpy((void *) &cp0->AdvData, (const void *) AdvData, AdvDataLen);
 800c5d4:	4602      	mov	r2, r0
 800c5d6:	f10d 0021 	add.w	r0, sp, #33	; 0x21
  cp0->AdvDataLen = htob(AdvDataLen, 1);
 800c5da:	f88d 4020 	strb.w	r4, [sp, #32]
  tBleStatus status = 0;
 800c5de:	f88d 5007 	strb.w	r5, [sp, #7]
  Osal_MemCpy((void *) &cp0->AdvData, (const void *) AdvData, AdvDataLen);
 800c5e2:	f000 fec7 	bl	800d374 <Osal_MemCpy>
  index_input += AdvDataLen;
  Osal_MemSet(&rq, 0, sizeof(rq));
 800c5e6:	4629      	mov	r1, r5
 800c5e8:	a802      	add	r0, sp, #8
 800c5ea:	2218      	movs	r2, #24
 800c5ec:	f000 fec4 	bl	800d378 <Osal_MemSet>
  tBleStatus status = 0;
 800c5f0:	f10d 0607 	add.w	r6, sp, #7
  rq.ogf = 0x3f;
 800c5f4:	4a09      	ldr	r2, [pc, #36]	; (800c61c <aci_gap_update_adv_data+0x50>)
 800c5f6:	9202      	str	r2, [sp, #8]
  rq.ocf = 0x08e;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
  rq.rparam = &status;
  rq.rlen = 1;
 800c5f8:	2301      	movs	r3, #1
  cp0->AdvDataLen = htob(AdvDataLen, 1);
 800c5fa:	af08      	add	r7, sp, #32
  index_input += AdvDataLen;
 800c5fc:	3401      	adds	r4, #1
  if (hci_send_req(&rq, FALSE) < 0)
 800c5fe:	4629      	mov	r1, r5
 800c600:	a802      	add	r0, sp, #8
  rq.cparam = cmd_buffer;
 800c602:	9704      	str	r7, [sp, #16]
  rq.rparam = &status;
 800c604:	e9cd 4605 	strd	r4, r6, [sp, #20]
  rq.rlen = 1;
 800c608:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800c60a:	f000 fa9d 	bl	800cb48 <hci_send_req>
 800c60e:	42a8      	cmp	r0, r5
    return BLE_STATUS_TIMEOUT;
  if (status) 
 800c610:	bfac      	ite	ge
 800c612:	7830      	ldrbge	r0, [r6, #0]
    return BLE_STATUS_TIMEOUT;
 800c614:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800c616:	b049      	add	sp, #292	; 0x124
 800c618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c61a:	bf00      	nop
 800c61c:	008e003f 	.word	0x008e003f

0800c620 <aci_gap_configure_whitelist>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_configure_whitelist(void)
{
 800c620:	b510      	push	{r4, lr}
  struct hci_request rq;
  tBleStatus status = 0;
 800c622:	2400      	movs	r4, #0
{
 800c624:	b088      	sub	sp, #32
  Osal_MemSet(&rq, 0, sizeof(rq));
 800c626:	4621      	mov	r1, r4
 800c628:	a802      	add	r0, sp, #8
 800c62a:	2218      	movs	r2, #24
  tBleStatus status = 0;
 800c62c:	f88d 4007 	strb.w	r4, [sp, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 800c630:	f000 fea2 	bl	800d378 <Osal_MemSet>
  rq.ogf = 0x3f;
 800c634:	4b08      	ldr	r3, [pc, #32]	; (800c658 <aci_gap_configure_whitelist+0x38>)
 800c636:	9302      	str	r3, [sp, #8]
  rq.ocf = 0x092;
  rq.rparam = &status;
 800c638:	f10d 0207 	add.w	r2, sp, #7
  rq.rlen = 1;
 800c63c:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 800c63e:	4621      	mov	r1, r4
 800c640:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 800c642:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 800c646:	f000 fa7f 	bl	800cb48 <hci_send_req>
 800c64a:	42a0      	cmp	r0, r4
    return BLE_STATUS_TIMEOUT;
  if (status) 
 800c64c:	bfac      	ite	ge
 800c64e:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 800c652:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800c654:	b008      	add	sp, #32
 800c656:	bd10      	pop	{r4, pc}
 800c658:	0092003f 	.word	0x0092003f

0800c65c <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init(void)
{
 800c65c:	b510      	push	{r4, lr}
  struct hci_request rq;
  tBleStatus status = 0;
 800c65e:	2400      	movs	r4, #0
{
 800c660:	b088      	sub	sp, #32
  Osal_MemSet(&rq, 0, sizeof(rq));
 800c662:	4621      	mov	r1, r4
 800c664:	a802      	add	r0, sp, #8
 800c666:	2218      	movs	r2, #24
  tBleStatus status = 0;
 800c668:	f88d 4007 	strb.w	r4, [sp, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 800c66c:	f000 fe84 	bl	800d378 <Osal_MemSet>
  rq.ogf = 0x3f;
 800c670:	4b08      	ldr	r3, [pc, #32]	; (800c694 <aci_gatt_init+0x38>)
 800c672:	9302      	str	r3, [sp, #8]
  rq.ocf = 0x101;
  rq.rparam = &status;
 800c674:	f10d 0207 	add.w	r2, sp, #7
  rq.rlen = 1;
 800c678:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 800c67a:	4621      	mov	r1, r4
 800c67c:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 800c67e:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 800c682:	f000 fa61 	bl	800cb48 <hci_send_req>
 800c686:	42a0      	cmp	r0, r4
    return BLE_STATUS_TIMEOUT;
  if (status) 
 800c688:	bfac      	ite	ge
 800c68a:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 800c68e:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800c690:	b008      	add	sp, #32
 800c692:	bd10      	pop	{r4, pc}
 800c694:	0101003f 	.word	0x0101003f

0800c698 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service(uint8_t Service_UUID_Type,
                                Service_UUID_t *Service_UUID,
                                uint8_t Service_Type,
                                uint8_t Max_Attribute_Records,
                                uint16_t *Service_Handle)
{
 800c698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800c69c:	2801      	cmp	r0, #1
{
 800c69e:	b0c8      	sub	sp, #288	; 0x120
 800c6a0:	4604      	mov	r4, r0
 800c6a2:	460f      	mov	r7, r1
 800c6a4:	4690      	mov	r8, r2
 800c6a6:	4699      	mov	r9, r3
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800c6a8:	d03d      	beq.n	800c726 <aci_gatt_add_service+0x8e>
 800c6aa:	2802      	cmp	r0, #2
 800c6ac:	d008      	beq.n	800c6c0 <aci_gatt_add_service+0x28>
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet(&resp, 0, sizeof(resp));
 800c6ae:	2203      	movs	r2, #3
 800c6b0:	2100      	movs	r1, #0
 800c6b2:	a801      	add	r0, sp, #4
 800c6b4:	f000 fe60 	bl	800d378 <Osal_MemSet>
  {
    uint8_t size;
    switch (Service_UUID_Type) {
      case 1: size = 2; break;
      case 2: size = 16; break;
      default: return BLE_STATUS_ERROR;
 800c6b8:	2047      	movs	r0, #71	; 0x47
  {
    return resp.Status;
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
  return BLE_STATUS_SUCCESS;
}
 800c6ba:	b048      	add	sp, #288	; 0x120
 800c6bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  Osal_MemSet(&resp, 0, sizeof(resp));
 800c6c0:	ad01      	add	r5, sp, #4
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 800c6c2:	ae08      	add	r6, sp, #32
  Osal_MemSet(&resp, 0, sizeof(resp));
 800c6c4:	2203      	movs	r2, #3
 800c6c6:	4628      	mov	r0, r5
 800c6c8:	2100      	movs	r1, #0
 800c6ca:	f000 fe55 	bl	800d378 <Osal_MemSet>
      case 2: size = 16; break;
 800c6ce:	f04f 0a13 	mov.w	sl, #19
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 800c6d2:	7034      	strb	r4, [r6, #0]
      case 2: size = 16; break;
 800c6d4:	2210      	movs	r2, #16
 800c6d6:	f10d 0431 	add.w	r4, sp, #49	; 0x31
    Osal_MemCpy((void *) &cp0->Service_UUID, (const void *) Service_UUID, size);
 800c6da:	4639      	mov	r1, r7
 800c6dc:	f10d 0021 	add.w	r0, sp, #33	; 0x21
 800c6e0:	f000 fe48 	bl	800d374 <Osal_MemCpy>
  Osal_MemSet(&rq, 0, sizeof(rq));
 800c6e4:	2218      	movs	r2, #24
 800c6e6:	2100      	movs	r1, #0
 800c6e8:	a802      	add	r0, sp, #8
      cp1->Service_Type = htob(Service_Type, 1);
 800c6ea:	f884 8000 	strb.w	r8, [r4]
      cp1->Max_Attribute_Records = htob(Max_Attribute_Records, 1);
 800c6ee:	f884 9001 	strb.w	r9, [r4, #1]
  Osal_MemSet(&rq, 0, sizeof(rq));
 800c6f2:	f000 fe41 	bl	800d378 <Osal_MemSet>
  rq.ogf = 0x3f;
 800c6f6:	4a15      	ldr	r2, [pc, #84]	; (800c74c <aci_gatt_add_service+0xb4>)
  rq.cparam = cmd_buffer;
 800c6f8:	9604      	str	r6, [sp, #16]
  rq.rlen = sizeof(resp);
 800c6fa:	2303      	movs	r3, #3
  if (hci_send_req(&rq, FALSE) < 0)
 800c6fc:	a802      	add	r0, sp, #8
 800c6fe:	2100      	movs	r1, #0
  rq.rparam = &resp;
 800c700:	e9cd a505 	strd	sl, r5, [sp, #20]
  rq.ogf = 0x3f;
 800c704:	9202      	str	r2, [sp, #8]
  rq.rlen = sizeof(resp);
 800c706:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800c708:	f000 fa1e 	bl	800cb48 <hci_send_req>
 800c70c:	2800      	cmp	r0, #0
 800c70e:	db18      	blt.n	800c742 <aci_gatt_add_service+0xaa>
  if (resp.Status) 
 800c710:	7828      	ldrb	r0, [r5, #0]
 800c712:	2800      	cmp	r0, #0
 800c714:	d1d1      	bne.n	800c6ba <aci_gatt_add_service+0x22>
  *Service_Handle = btoh(resp.Service_Handle, 2);
 800c716:	682b      	ldr	r3, [r5, #0]
 800c718:	9a50      	ldr	r2, [sp, #320]	; 0x140
 800c71a:	f3c3 230f 	ubfx	r3, r3, #8, #16
 800c71e:	8013      	strh	r3, [r2, #0]
}
 800c720:	b048      	add	sp, #288	; 0x120
 800c722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  Osal_MemSet(&resp, 0, sizeof(resp));
 800c726:	ad01      	add	r5, sp, #4
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 800c728:	ae08      	add	r6, sp, #32
  Osal_MemSet(&resp, 0, sizeof(resp));
 800c72a:	2203      	movs	r2, #3
 800c72c:	4628      	mov	r0, r5
 800c72e:	2100      	movs	r1, #0
 800c730:	f000 fe22 	bl	800d378 <Osal_MemSet>
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 800c734:	f04f 0a05 	mov.w	sl, #5
 800c738:	7034      	strb	r4, [r6, #0]
 800c73a:	2202      	movs	r2, #2
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800c73c:	f10d 0423 	add.w	r4, sp, #35	; 0x23
 800c740:	e7cb      	b.n	800c6da <aci_gatt_add_service+0x42>
    return BLE_STATUS_TIMEOUT;
 800c742:	20ff      	movs	r0, #255	; 0xff
}
 800c744:	b048      	add	sp, #288	; 0x120
 800c746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c74a:	bf00      	nop
 800c74c:	0102003f 	.word	0x0102003f

0800c750 <aci_gatt_add_char>:
                             uint8_t Security_Permissions,
                             uint8_t GATT_Evt_Mask,
                             uint8_t Enc_Key_Size,
                             uint8_t Is_Variable,
                             uint16_t *Char_Handle)
{
 800c750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c754:	b0cd      	sub	sp, #308	; 0x134
 800c756:	4690      	mov	r8, r2
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800c758:	2901      	cmp	r1, #1
{
 800c75a:	f89d 215c 	ldrb.w	r2, [sp, #348]	; 0x15c
 800c75e:	9300      	str	r3, [sp, #0]
 800c760:	460c      	mov	r4, r1
 800c762:	4607      	mov	r7, r0
 800c764:	f89d 3158 	ldrb.w	r3, [sp, #344]	; 0x158
 800c768:	9201      	str	r2, [sp, #4]
 800c76a:	f89d 9160 	ldrb.w	r9, [sp, #352]	; 0x160
 800c76e:	f89d a164 	ldrb.w	sl, [sp, #356]	; 0x164
 800c772:	f89d b168 	ldrb.w	fp, [sp, #360]	; 0x168
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800c776:	d04d      	beq.n	800c814 <aci_gatt_add_char+0xc4>
 800c778:	2902      	cmp	r1, #2
 800c77a:	d008      	beq.n	800c78e <aci_gatt_add_char+0x3e>
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet(&resp, 0, sizeof(resp));
 800c77c:	2203      	movs	r2, #3
 800c77e:	2100      	movs	r1, #0
 800c780:	a805      	add	r0, sp, #20
 800c782:	f000 fdf9 	bl	800d378 <Osal_MemSet>
  {
    uint8_t size;
    switch (Char_UUID_Type) {
      case 1: size = 2; break;
      case 2: size = 16; break;
      default: return BLE_STATUS_ERROR;
 800c786:	2047      	movs	r0, #71	; 0x47
  {
    return resp.Status;
  }
  *Char_Handle = btoh(resp.Char_Handle, 2);
  return BLE_STATUS_SUCCESS;
}
 800c788:	b04d      	add	sp, #308	; 0x134
 800c78a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  Osal_MemSet(&resp, 0, sizeof(resp));
 800c78e:	ad05      	add	r5, sp, #20
 800c790:	2203      	movs	r2, #3
 800c792:	4628      	mov	r0, r5
 800c794:	2100      	movs	r1, #0
 800c796:	9303      	str	r3, [sp, #12]
  cp0->Service_Handle = htob(Service_Handle, 2);
 800c798:	ae0c      	add	r6, sp, #48	; 0x30
  Osal_MemSet(&resp, 0, sizeof(resp));
 800c79a:	f000 fded 	bl	800d378 <Osal_MemSet>
      case 2: size = 16; break;
 800c79e:	231a      	movs	r3, #26
 800c7a0:	9302      	str	r3, [sp, #8]
 800c7a2:	9b03      	ldr	r3, [sp, #12]
  cp0->Service_Handle = htob(Service_Handle, 2);
 800c7a4:	8037      	strh	r7, [r6, #0]
  cp0->Char_UUID_Type = htob(Char_UUID_Type, 1);
 800c7a6:	70b4      	strb	r4, [r6, #2]
      case 2: size = 16; break;
 800c7a8:	2210      	movs	r2, #16
 800c7aa:	f10d 0743 	add.w	r7, sp, #67	; 0x43
 800c7ae:	2400      	movs	r4, #0
 800c7b0:	f363 0407 	bfi	r4, r3, #0, #8
 800c7b4:	9b01      	ldr	r3, [sp, #4]
 800c7b6:	f363 240f 	bfi	r4, r3, #8, #8
    Osal_MemCpy((void *) &cp0->Char_UUID, (const void *) Char_UUID, size);
 800c7ba:	4641      	mov	r1, r8
 800c7bc:	f10d 0033 	add.w	r0, sp, #51	; 0x33
 800c7c0:	f369 4417 	bfi	r4, r9, #16, #8
 800c7c4:	f000 fdd6 	bl	800d374 <Osal_MemCpy>
 800c7c8:	f36a 641f 	bfi	r4, sl, #24, #8
      cp1->Char_Value_Length = htob(Char_Value_Length, 2);
 800c7cc:	9b00      	ldr	r3, [sp, #0]
 800c7ce:	803b      	strh	r3, [r7, #0]
  Osal_MemSet(&rq, 0, sizeof(rq));
 800c7d0:	2218      	movs	r2, #24
 800c7d2:	2100      	movs	r1, #0
      cp1->Char_Properties = htob(Char_Properties, 1);
 800c7d4:	f8c7 4002 	str.w	r4, [r7, #2]
  Osal_MemSet(&rq, 0, sizeof(rq));
 800c7d8:	a806      	add	r0, sp, #24
      cp1->Is_Variable = htob(Is_Variable, 1);
 800c7da:	f887 b006 	strb.w	fp, [r7, #6]
  Osal_MemSet(&rq, 0, sizeof(rq));
 800c7de:	f000 fdcb 	bl	800d378 <Osal_MemSet>
  rq.clen = index_input;
 800c7e2:	9b02      	ldr	r3, [sp, #8]
  rq.ogf = 0x3f;
 800c7e4:	4c16      	ldr	r4, [pc, #88]	; (800c840 <aci_gatt_add_char+0xf0>)
  rq.cparam = cmd_buffer;
 800c7e6:	9608      	str	r6, [sp, #32]
  rq.rlen = sizeof(resp);
 800c7e8:	2203      	movs	r2, #3
  if (hci_send_req(&rq, FALSE) < 0)
 800c7ea:	a806      	add	r0, sp, #24
 800c7ec:	2100      	movs	r1, #0
  rq.rparam = &resp;
 800c7ee:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
  rq.ogf = 0x3f;
 800c7f2:	9406      	str	r4, [sp, #24]
  rq.rlen = sizeof(resp);
 800c7f4:	920b      	str	r2, [sp, #44]	; 0x2c
  if (hci_send_req(&rq, FALSE) < 0)
 800c7f6:	f000 f9a7 	bl	800cb48 <hci_send_req>
 800c7fa:	2800      	cmp	r0, #0
 800c7fc:	db1b      	blt.n	800c836 <aci_gatt_add_char+0xe6>
  if (resp.Status) 
 800c7fe:	7828      	ldrb	r0, [r5, #0]
 800c800:	2800      	cmp	r0, #0
 800c802:	d1c1      	bne.n	800c788 <aci_gatt_add_char+0x38>
  *Char_Handle = btoh(resp.Char_Handle, 2);
 800c804:	682b      	ldr	r3, [r5, #0]
 800c806:	9a5b      	ldr	r2, [sp, #364]	; 0x16c
 800c808:	f3c3 230f 	ubfx	r3, r3, #8, #16
 800c80c:	8013      	strh	r3, [r2, #0]
}
 800c80e:	b04d      	add	sp, #308	; 0x134
 800c810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  Osal_MemSet(&resp, 0, sizeof(resp));
 800c814:	ad05      	add	r5, sp, #20
  cp0->Service_Handle = htob(Service_Handle, 2);
 800c816:	ae0c      	add	r6, sp, #48	; 0x30
  Osal_MemSet(&resp, 0, sizeof(resp));
 800c818:	2203      	movs	r2, #3
 800c81a:	4628      	mov	r0, r5
 800c81c:	2100      	movs	r1, #0
 800c81e:	9303      	str	r3, [sp, #12]
 800c820:	f000 fdaa 	bl	800d378 <Osal_MemSet>
  cp0->Char_UUID_Type = htob(Char_UUID_Type, 1);
 800c824:	230c      	movs	r3, #12
 800c826:	9302      	str	r3, [sp, #8]
  cp0->Service_Handle = htob(Service_Handle, 2);
 800c828:	8037      	strh	r7, [r6, #0]
  cp0->Char_UUID_Type = htob(Char_UUID_Type, 1);
 800c82a:	70b4      	strb	r4, [r6, #2]
 800c82c:	2202      	movs	r2, #2
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800c82e:	f10d 0735 	add.w	r7, sp, #53	; 0x35
 800c832:	9b03      	ldr	r3, [sp, #12]
 800c834:	e7bb      	b.n	800c7ae <aci_gatt_add_char+0x5e>
    return BLE_STATUS_TIMEOUT;
 800c836:	20ff      	movs	r0, #255	; 0xff
}
 800c838:	b04d      	add	sp, #308	; 0x134
 800c83a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c83e:	bf00      	nop
 800c840:	0104003f 	.word	0x0104003f

0800c844 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t Service_Handle,
                                      uint16_t Char_Handle,
                                      uint8_t Val_Offset,
                                      uint8_t Char_Value_Length,
                                      uint8_t Char_Value[])
{
 800c844:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c846:	b0c9      	sub	sp, #292	; 0x124
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 800c848:	2600      	movs	r6, #0
  int index_input = 0;
  cp0->Service_Handle = htob(Service_Handle, 2);
 800c84a:	f8ad 0020 	strh.w	r0, [sp, #32]
  index_input += 2;
  cp0->Char_Handle = htob(Char_Handle, 2);
 800c84e:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
  index_input += 2;
  cp0->Val_Offset = htob(Val_Offset, 1);
 800c852:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
  index_input += 1;
  cp0->Char_Value_Length = htob(Char_Value_Length, 1);
  index_input += 1;
  Osal_MemCpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length);
 800c856:	994e      	ldr	r1, [sp, #312]	; 0x138
  cp0->Char_Value_Length = htob(Char_Value_Length, 1);
 800c858:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  Osal_MemCpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length);
 800c85c:	461a      	mov	r2, r3
 800c85e:	f10d 0026 	add.w	r0, sp, #38	; 0x26
{
 800c862:	461c      	mov	r4, r3
  tBleStatus status = 0;
 800c864:	f88d 6007 	strb.w	r6, [sp, #7]
  Osal_MemCpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length);
 800c868:	f000 fd84 	bl	800d374 <Osal_MemCpy>
  index_input += Char_Value_Length;
  Osal_MemSet(&rq, 0, sizeof(rq));
 800c86c:	4631      	mov	r1, r6
 800c86e:	a802      	add	r0, sp, #8
 800c870:	2218      	movs	r2, #24
 800c872:	f000 fd81 	bl	800d378 <Osal_MemSet>
  tBleStatus status = 0;
 800c876:	f10d 0707 	add.w	r7, sp, #7
  rq.ogf = 0x3f;
 800c87a:	4a09      	ldr	r2, [pc, #36]	; (800c8a0 <aci_gatt_update_char_value+0x5c>)
 800c87c:	9202      	str	r2, [sp, #8]
  rq.ocf = 0x106;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
  rq.rparam = &status;
  rq.rlen = 1;
 800c87e:	2301      	movs	r3, #1
  cp0->Service_Handle = htob(Service_Handle, 2);
 800c880:	ad08      	add	r5, sp, #32
  index_input += Char_Value_Length;
 800c882:	3406      	adds	r4, #6
  if (hci_send_req(&rq, FALSE) < 0)
 800c884:	4631      	mov	r1, r6
 800c886:	a802      	add	r0, sp, #8
  rq.cparam = cmd_buffer;
 800c888:	9504      	str	r5, [sp, #16]
  rq.rparam = &status;
 800c88a:	e9cd 4705 	strd	r4, r7, [sp, #20]
  rq.rlen = 1;
 800c88e:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800c890:	f000 f95a 	bl	800cb48 <hci_send_req>
 800c894:	42b0      	cmp	r0, r6
    return BLE_STATUS_TIMEOUT;
  if (status) 
 800c896:	bfac      	ite	ge
 800c898:	7838      	ldrbge	r0, [r7, #0]
    return BLE_STATUS_TIMEOUT;
 800c89a:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800c89c:	b049      	add	sp, #292	; 0x124
 800c89e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c8a0:	0106003f 	.word	0x0106003f

0800c8a4 <aci_gatt_allow_read>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gatt_allow_read(uint16_t Connection_Handle)
{
 800c8a4:	b570      	push	{r4, r5, r6, lr}
 800c8a6:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_allow_read_cp0 *cp0 = (aci_gatt_allow_read_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 800c8a8:	2400      	movs	r4, #0
  int index_input = 0;
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800c8aa:	f8ad 0020 	strh.w	r0, [sp, #32]
  index_input += 2;
  Osal_MemSet(&rq, 0, sizeof(rq));
 800c8ae:	4621      	mov	r1, r4
 800c8b0:	a802      	add	r0, sp, #8
 800c8b2:	2218      	movs	r2, #24
  tBleStatus status = 0;
 800c8b4:	f10d 0507 	add.w	r5, sp, #7
 800c8b8:	f88d 4007 	strb.w	r4, [sp, #7]
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800c8bc:	ae08      	add	r6, sp, #32
  Osal_MemSet(&rq, 0, sizeof(rq));
 800c8be:	f000 fd5b 	bl	800d378 <Osal_MemSet>
  rq.ocf = 0x127;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
  rq.rparam = &status;
  rq.rlen = 1;
  if (hci_send_req(&rq, FALSE) < 0)
 800c8c2:	4621      	mov	r1, r4
  rq.clen = index_input;
 800c8c4:	2202      	movs	r2, #2
  rq.rlen = 1;
 800c8c6:	2301      	movs	r3, #1
  rq.ogf = 0x3f;
 800c8c8:	4c07      	ldr	r4, [pc, #28]	; (800c8e8 <aci_gatt_allow_read+0x44>)
  rq.cparam = cmd_buffer;
 800c8ca:	9604      	str	r6, [sp, #16]
  if (hci_send_req(&rq, FALSE) < 0)
 800c8cc:	a802      	add	r0, sp, #8
  rq.rparam = &status;
 800c8ce:	9506      	str	r5, [sp, #24]
  rq.ogf = 0x3f;
 800c8d0:	9402      	str	r4, [sp, #8]
  rq.clen = index_input;
 800c8d2:	9205      	str	r2, [sp, #20]
  rq.rlen = 1;
 800c8d4:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800c8d6:	f000 f937 	bl	800cb48 <hci_send_req>
 800c8da:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  if (status) 
 800c8dc:	bfac      	ite	ge
 800c8de:	7828      	ldrbge	r0, [r5, #0]
    return BLE_STATUS_TIMEOUT;
 800c8e0:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800c8e2:	b048      	add	sp, #288	; 0x120
 800c8e4:	bd70      	pop	{r4, r5, r6, pc}
 800c8e6:	bf00      	nop
 800c8e8:	0127003f 	.word	0x0127003f

0800c8ec <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t Offset,
                                     uint8_t Length,
                                     uint8_t Value[])
{
 800c8ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c8ee:	b0c9      	sub	sp, #292	; 0x124
 800c8f0:	460c      	mov	r4, r1
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 800c8f2:	2600      	movs	r6, #0
  int index_input = 0;
  cp0->Offset = htob(Offset, 1);
  index_input += 1;
  cp0->Length = htob(Length, 1);
  index_input += 1;
  Osal_MemCpy((void *) &cp0->Value, (const void *) Value, Length);
 800c8f4:	4611      	mov	r1, r2
  cp0->Offset = htob(Offset, 1);
 800c8f6:	f88d 0020 	strb.w	r0, [sp, #32]
  Osal_MemCpy((void *) &cp0->Value, (const void *) Value, Length);
 800c8fa:	4622      	mov	r2, r4
 800c8fc:	f10d 0022 	add.w	r0, sp, #34	; 0x22
  cp0->Length = htob(Length, 1);
 800c900:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
  tBleStatus status = 0;
 800c904:	f88d 6007 	strb.w	r6, [sp, #7]
  Osal_MemCpy((void *) &cp0->Value, (const void *) Value, Length);
 800c908:	f000 fd34 	bl	800d374 <Osal_MemCpy>
  index_input += Length;
  Osal_MemSet(&rq, 0, sizeof(rq));
 800c90c:	4631      	mov	r1, r6
 800c90e:	a802      	add	r0, sp, #8
 800c910:	2218      	movs	r2, #24
 800c912:	f000 fd31 	bl	800d378 <Osal_MemSet>
  tBleStatus status = 0;
 800c916:	f10d 0707 	add.w	r7, sp, #7
  rq.ogf = 0x3f;
 800c91a:	4a09      	ldr	r2, [pc, #36]	; (800c940 <aci_hal_write_config_data+0x54>)
 800c91c:	9202      	str	r2, [sp, #8]
  rq.ocf = 0x00c;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
  rq.rparam = &status;
  rq.rlen = 1;
 800c91e:	2301      	movs	r3, #1
  cp0->Offset = htob(Offset, 1);
 800c920:	ad08      	add	r5, sp, #32
  index_input += Length;
 800c922:	3402      	adds	r4, #2
  if (hci_send_req(&rq, FALSE) < 0)
 800c924:	4631      	mov	r1, r6
 800c926:	a802      	add	r0, sp, #8
  rq.cparam = cmd_buffer;
 800c928:	9504      	str	r5, [sp, #16]
  rq.rparam = &status;
 800c92a:	e9cd 4705 	strd	r4, r7, [sp, #20]
  rq.rlen = 1;
 800c92e:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800c930:	f000 f90a 	bl	800cb48 <hci_send_req>
 800c934:	42b0      	cmp	r0, r6
    return BLE_STATUS_TIMEOUT;
  if (status) 
 800c936:	bfac      	ite	ge
 800c938:	7838      	ldrbge	r0, [r7, #0]
    return BLE_STATUS_TIMEOUT;
 800c93a:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800c93c:	b049      	add	sp, #292	; 0x124
 800c93e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c940:	000c003f 	.word	0x000c003f

0800c944 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level(uint8_t En_High_Power,
                                      uint8_t PA_Level)
{
 800c944:	b570      	push	{r4, r5, r6, lr}
 800c946:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 800c948:	2500      	movs	r5, #0
  int index_input = 0;
  cp0->En_High_Power = htob(En_High_Power, 1);
 800c94a:	f88d 0020 	strb.w	r0, [sp, #32]
  index_input += 1;
  cp0->PA_Level = htob(PA_Level, 1);
 800c94e:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
  index_input += 1;
  Osal_MemSet(&rq, 0, sizeof(rq));
 800c952:	a802      	add	r0, sp, #8
 800c954:	4629      	mov	r1, r5
 800c956:	2218      	movs	r2, #24
  tBleStatus status = 0;
 800c958:	f10d 0607 	add.w	r6, sp, #7
 800c95c:	f88d 5007 	strb.w	r5, [sp, #7]
  cp0->En_High_Power = htob(En_High_Power, 1);
 800c960:	ac08      	add	r4, sp, #32
  Osal_MemSet(&rq, 0, sizeof(rq));
 800c962:	f000 fd09 	bl	800d378 <Osal_MemSet>
  rq.ocf = 0x00f;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
  rq.rparam = &status;
  rq.rlen = 1;
  if (hci_send_req(&rq, FALSE) < 0)
 800c966:	4629      	mov	r1, r5
  rq.clen = index_input;
 800c968:	2202      	movs	r2, #2
  rq.rlen = 1;
 800c96a:	2301      	movs	r3, #1
  rq.ogf = 0x3f;
 800c96c:	4d07      	ldr	r5, [pc, #28]	; (800c98c <aci_hal_set_tx_power_level+0x48>)
  rq.cparam = cmd_buffer;
 800c96e:	9404      	str	r4, [sp, #16]
  if (hci_send_req(&rq, FALSE) < 0)
 800c970:	a802      	add	r0, sp, #8
  rq.rparam = &status;
 800c972:	9606      	str	r6, [sp, #24]
  rq.ogf = 0x3f;
 800c974:	9502      	str	r5, [sp, #8]
  rq.clen = index_input;
 800c976:	9205      	str	r2, [sp, #20]
  rq.rlen = 1;
 800c978:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800c97a:	f000 f8e5 	bl	800cb48 <hci_send_req>
 800c97e:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  if (status) 
 800c980:	bfac      	ite	ge
 800c982:	7830      	ldrbge	r0, [r6, #0]
    return BLE_STATUS_TIMEOUT;
 800c984:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800c986:	b048      	add	sp, #288	; 0x120
 800c988:	bd70      	pop	{r4, r5, r6, pc}
 800c98a:	bf00      	nop
 800c98c:	000f003f 	.word	0x000f003f

0800c990 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy((void *) Link_Connection_Handle, (const void *) resp.Link_Connection_Handle, 16);
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask(uint16_t Radio_Activity_Mask)
{
 800c990:	b570      	push	{r4, r5, r6, lr}
 800c992:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 800c994:	2400      	movs	r4, #0
  int index_input = 0;
  cp0->Radio_Activity_Mask = htob(Radio_Activity_Mask, 2);
 800c996:	f8ad 0020 	strh.w	r0, [sp, #32]
  index_input += 2;
  Osal_MemSet(&rq, 0, sizeof(rq));
 800c99a:	4621      	mov	r1, r4
 800c99c:	a802      	add	r0, sp, #8
 800c99e:	2218      	movs	r2, #24
  tBleStatus status = 0;
 800c9a0:	f10d 0507 	add.w	r5, sp, #7
 800c9a4:	f88d 4007 	strb.w	r4, [sp, #7]
  cp0->Radio_Activity_Mask = htob(Radio_Activity_Mask, 2);
 800c9a8:	ae08      	add	r6, sp, #32
  Osal_MemSet(&rq, 0, sizeof(rq));
 800c9aa:	f000 fce5 	bl	800d378 <Osal_MemSet>
  rq.ocf = 0x018;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
  rq.rparam = &status;
  rq.rlen = 1;
  if (hci_send_req(&rq, FALSE) < 0)
 800c9ae:	4621      	mov	r1, r4
  rq.clen = index_input;
 800c9b0:	2202      	movs	r2, #2
  rq.rlen = 1;
 800c9b2:	2301      	movs	r3, #1
  rq.ogf = 0x3f;
 800c9b4:	4c07      	ldr	r4, [pc, #28]	; (800c9d4 <aci_hal_set_radio_activity_mask+0x44>)
  rq.cparam = cmd_buffer;
 800c9b6:	9604      	str	r6, [sp, #16]
  if (hci_send_req(&rq, FALSE) < 0)
 800c9b8:	a802      	add	r0, sp, #8
  rq.rparam = &status;
 800c9ba:	9506      	str	r5, [sp, #24]
  rq.ogf = 0x3f;
 800c9bc:	9402      	str	r4, [sp, #8]
  rq.clen = index_input;
 800c9be:	9205      	str	r2, [sp, #20]
  rq.rlen = 1;
 800c9c0:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800c9c2:	f000 f8c1 	bl	800cb48 <hci_send_req>
 800c9c6:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  if (status) 
 800c9c8:	bfac      	ite	ge
 800c9ca:	7828      	ldrbge	r0, [r5, #0]
    return BLE_STATUS_TIMEOUT;
 800c9cc:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800c9ce:	b048      	add	sp, #288	; 0x120
 800c9d0:	bd70      	pop	{r4, r5, r6, pc}
 800c9d2:	bf00      	nop
 800c9d4:	0018003f 	.word	0x0018003f

0800c9d8 <hci_reset>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus hci_reset(void)
{
 800c9d8:	b510      	push	{r4, lr}
  struct hci_request rq;
  tBleStatus status = 0;
 800c9da:	2400      	movs	r4, #0
{
 800c9dc:	b088      	sub	sp, #32
  Osal_MemSet(&rq, 0, sizeof(rq));
 800c9de:	4621      	mov	r1, r4
 800c9e0:	a802      	add	r0, sp, #8
 800c9e2:	2218      	movs	r2, #24
  tBleStatus status = 0;
 800c9e4:	f88d 4007 	strb.w	r4, [sp, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 800c9e8:	f000 fcc6 	bl	800d378 <Osal_MemSet>
  rq.ogf = 0x03;
  rq.ocf = 0x003;
  rq.rparam = &status;
  rq.rlen = 1;
  if (hci_send_req(&rq, FALSE) < 0)
 800c9ec:	4621      	mov	r1, r4
  rq.rparam = &status;
 800c9ee:	f10d 0207 	add.w	r2, sp, #7
  rq.rlen = 1;
 800c9f2:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 800c9f4:	a802      	add	r0, sp, #8
  rq.ogf = 0x03;
 800c9f6:	f04f 1403 	mov.w	r4, #196611	; 0x30003
 800c9fa:	9402      	str	r4, [sp, #8]
  rq.rlen = 1;
 800c9fc:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 800ca00:	f000 f8a2 	bl	800cb48 <hci_send_req>
 800ca04:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  if (status) 
 800ca06:	bfac      	ite	ge
 800ca08:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 800ca0c:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800ca0e:	b008      	add	sp, #32
 800ca10:	bd10      	pop	{r4, pc}
 800ca12:	bf00      	nop

0800ca14 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy(uint8_t ALL_PHYS,
                                  uint8_t TX_PHYS,
                                  uint8_t RX_PHYS)
{
 800ca14:	b570      	push	{r4, r5, r6, lr}
 800ca16:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 800ca18:	2500      	movs	r5, #0
  int index_input = 0;
  cp0->ALL_PHYS = htob(ALL_PHYS, 1);
 800ca1a:	f88d 0020 	strb.w	r0, [sp, #32]
  index_input += 1;
  cp0->TX_PHYS = htob(TX_PHYS, 1);
 800ca1e:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
  index_input += 1;
  cp0->RX_PHYS = htob(RX_PHYS, 1);
 800ca22:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
  index_input += 1;
  Osal_MemSet(&rq, 0, sizeof(rq));
 800ca26:	4629      	mov	r1, r5
 800ca28:	a802      	add	r0, sp, #8
 800ca2a:	2218      	movs	r2, #24
  tBleStatus status = 0;
 800ca2c:	f10d 0607 	add.w	r6, sp, #7
 800ca30:	f88d 5007 	strb.w	r5, [sp, #7]
  cp0->ALL_PHYS = htob(ALL_PHYS, 1);
 800ca34:	ac08      	add	r4, sp, #32
  Osal_MemSet(&rq, 0, sizeof(rq));
 800ca36:	f000 fc9f 	bl	800d378 <Osal_MemSet>
  rq.ocf = 0x031;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
  rq.rparam = &status;
  rq.rlen = 1;
  if (hci_send_req(&rq, FALSE) < 0)
 800ca3a:	4629      	mov	r1, r5
  rq.clen = index_input;
 800ca3c:	2203      	movs	r2, #3
  rq.rlen = 1;
 800ca3e:	2301      	movs	r3, #1
  rq.ogf = 0x08;
 800ca40:	4d07      	ldr	r5, [pc, #28]	; (800ca60 <hci_le_set_default_phy+0x4c>)
  rq.cparam = cmd_buffer;
 800ca42:	9404      	str	r4, [sp, #16]
  if (hci_send_req(&rq, FALSE) < 0)
 800ca44:	a802      	add	r0, sp, #8
  rq.rparam = &status;
 800ca46:	9606      	str	r6, [sp, #24]
  rq.ogf = 0x08;
 800ca48:	9502      	str	r5, [sp, #8]
  rq.clen = index_input;
 800ca4a:	9205      	str	r2, [sp, #20]
  rq.rlen = 1;
 800ca4c:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800ca4e:	f000 f87b 	bl	800cb48 <hci_send_req>
 800ca52:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  if (status) 
 800ca54:	bfac      	ite	ge
 800ca56:	7830      	ldrbge	r0, [r6, #0]
    return BLE_STATUS_TIMEOUT;
 800ca58:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800ca5a:	b048      	add	sp, #288	; 0x120
 800ca5c:	bd70      	pop	{r4, r5, r6, pc}
 800ca5e:	bf00      	nop
 800ca60:	00310008 	.word	0x00310008

0800ca64 <DbgTraceInit>:
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
#endif 
#endif
  return;
}
 800ca64:	4770      	bx	lr
 800ca66:	bf00      	nop

0800ca68 <TlEvtReceived>:

  return;
}

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800ca68:	b508      	push	{r3, lr}
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800ca6a:	7a43      	ldrb	r3, [r0, #9]
 800ca6c:	3b0e      	subs	r3, #14
 800ca6e:	2b01      	cmp	r3, #1
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800ca70:	4601      	mov	r1, r0
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800ca72:	d907      	bls.n	800ca84 <TlEvtReceived+0x1c>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800ca74:	4807      	ldr	r0, [pc, #28]	; (800ca94 <TlEvtReceived+0x2c>)
 800ca76:	f000 fe21 	bl	800d6bc <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800ca7a:	4806      	ldr	r0, [pc, #24]	; (800ca94 <TlEvtReceived+0x2c>)
  }

  return;
}
 800ca7c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800ca80:	f7f5 ba3c 	b.w	8001efc <hci_notify_asynch_evt>
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800ca84:	4804      	ldr	r0, [pc, #16]	; (800ca98 <TlEvtReceived+0x30>)
 800ca86:	f000 fe19 	bl	800d6bc <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800ca8a:	2000      	movs	r0, #0
}
 800ca8c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800ca90:	f7f5 ba38 	b.w	8001f04 <hci_cmd_resp_release>
 800ca94:	200017e8 	.word	0x200017e8
 800ca98:	20001ab0 	.word	0x20001ab0

0800ca9c <hci_init>:
{
 800ca9c:	b570      	push	{r4, r5, r6, lr}
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800ca9e:	4c0f      	ldr	r4, [pc, #60]	; (800cadc <hci_init+0x40>)
 800caa0:	684b      	ldr	r3, [r1, #4]
  pCmdBuffer = p_cmdbuffer;
 800caa2:	4d0f      	ldr	r5, [pc, #60]	; (800cae0 <hci_init+0x44>)
  hciContext.UserEvtRx = UserEvtRx;
 800caa4:	62a0      	str	r0, [r4, #40]	; 0x28
{
 800caa6:	460e      	mov	r6, r1
 800caa8:	b084      	sub	sp, #16
  hci_register_io_bus (&hciContext.io);
 800caaa:	f104 000c 	add.w	r0, r4, #12
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800caae:	60a3      	str	r3, [r4, #8]
  hci_register_io_bus (&hciContext.io);
 800cab0:	f000 f8ba 	bl	800cc28 <hci_register_io_bus>
  LST_init_head (&HciCmdEventQueue);
 800cab4:	4620      	mov	r0, r4
  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800cab6:	6836      	ldr	r6, [r6, #0]
  LST_init_head (&HciCmdEventQueue);
 800cab8:	f000 fde4 	bl	800d684 <LST_init_head>
  LST_init_head (&HciAsynchEventQueue);
 800cabc:	4628      	mov	r0, r5
  pCmdBuffer = p_cmdbuffer;
 800cabe:	60ae      	str	r6, [r5, #8]
  LST_init_head (&HciAsynchEventQueue);
 800cac0:	f000 fde0 	bl	800d684 <LST_init_head>
  if (hciContext.io.Init)
 800cac4:	68e3      	ldr	r3, [r4, #12]
  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800cac6:	2201      	movs	r2, #1
 800cac8:	732a      	strb	r2, [r5, #12]
  if (hciContext.io.Init)
 800caca:	b12b      	cbz	r3, 800cad8 <hci_init+0x3c>
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800cacc:	a804      	add	r0, sp, #16
 800cace:	4a05      	ldr	r2, [pc, #20]	; (800cae4 <hci_init+0x48>)
 800cad0:	f840 2d10 	str.w	r2, [r0, #-16]!
    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800cad4:	9602      	str	r6, [sp, #8]
    hciContext.io.Init(&Conf);
 800cad6:	4798      	blx	r3
}
 800cad8:	b004      	add	sp, #16
 800cada:	bd70      	pop	{r4, r5, r6, pc}
 800cadc:	20001ab0 	.word	0x20001ab0
 800cae0:	200017e8 	.word	0x200017e8
 800cae4:	0800ca69 	.word	0x0800ca69

0800cae8 <hci_user_evt_proc>:
{
 800cae8:	b570      	push	{r4, r5, r6, lr}
 800caea:	4d15      	ldr	r5, [pc, #84]	; (800cb40 <hci_user_evt_proc+0x58>)
    if (hciContext.UserEvtRx != NULL)
 800caec:	4e15      	ldr	r6, [pc, #84]	; (800cb44 <hci_user_evt_proc+0x5c>)
{
 800caee:	b084      	sub	sp, #16
  while((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800caf0:	462c      	mov	r4, r5
 800caf2:	4620      	mov	r0, r4
 800caf4:	f000 fdca 	bl	800d68c <LST_is_empty>
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800caf8:	a901      	add	r1, sp, #4
  while((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800cafa:	b9d0      	cbnz	r0, 800cb32 <hci_user_evt_proc+0x4a>
 800cafc:	7b2b      	ldrb	r3, [r5, #12]
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800cafe:	4620      	mov	r0, r4
  while((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800cb00:	b1bb      	cbz	r3, 800cb32 <hci_user_evt_proc+0x4a>
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800cb02:	f000 fde7 	bl	800d6d4 <LST_remove_head>
    if (hciContext.UserEvtRx != NULL)
 800cb06:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800cb08:	2201      	movs	r2, #1
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800cb0a:	a802      	add	r0, sp, #8
    UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800cb0c:	732a      	strb	r2, [r5, #12]
    if (hciContext.UserEvtRx != NULL)
 800cb0e:	b193      	cbz	r3, 800cb36 <hci_user_evt_proc+0x4e>
      UserEvtRxParam.pckt = phcievtbuffer;
 800cb10:	9a01      	ldr	r2, [sp, #4]
 800cb12:	9203      	str	r2, [sp, #12]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800cb14:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800cb16:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800cb1a:	732b      	strb	r3, [r5, #12]
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800cb1c:	4620      	mov	r0, r4
    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800cb1e:	b953      	cbnz	r3, 800cb36 <hci_user_evt_proc+0x4e>
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800cb20:	9901      	ldr	r1, [sp, #4]
 800cb22:	f000 fdbf 	bl	800d6a4 <LST_insert_head>
  while((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800cb26:	4620      	mov	r0, r4
 800cb28:	f000 fdb0 	bl	800d68c <LST_is_empty>
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800cb2c:	a901      	add	r1, sp, #4
  while((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800cb2e:	2800      	cmp	r0, #0
 800cb30:	d0e4      	beq.n	800cafc <hci_user_evt_proc+0x14>
}
 800cb32:	b004      	add	sp, #16
 800cb34:	bd70      	pop	{r4, r5, r6, pc}
      TL_MM_EvtDone( phcievtbuffer );
 800cb36:	9801      	ldr	r0, [sp, #4]
 800cb38:	f000 ff44 	bl	800d9c4 <TL_MM_EvtDone>
 800cb3c:	e7d9      	b.n	800caf2 <hci_user_evt_proc+0xa>
 800cb3e:	bf00      	nop
 800cb40:	200017e8 	.word	0x200017e8
 800cb44:	20001ab0 	.word	0x20001ab0

0800cb48 <hci_send_req>:
{
 800cb48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if(StatusNotCallBackFunction != 0)
 800cb4c:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 800cc24 <hci_send_req+0xdc>
 800cb50:	f8d9 3008 	ldr.w	r3, [r9, #8]
{
 800cb54:	b083      	sub	sp, #12
 800cb56:	4680      	mov	r8, r0
    if(StatusNotCallBackFunction != 0)
 800cb58:	b10b      	cbz	r3, 800cb5e <hci_send_req+0x16>
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800cb5a:	2000      	movs	r0, #0
 800cb5c:	4798      	blx	r3
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800cb5e:	f8b8 6002 	ldrh.w	r6, [r8, #2]
 800cb62:	f8b8 3000 	ldrh.w	r3, [r8]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800cb66:	492e      	ldr	r1, [pc, #184]	; (800cc20 <hci_send_req+0xd8>)
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800cb68:	f8d8 200c 	ldr.w	r2, [r8, #12]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800cb6c:	6888      	ldr	r0, [r1, #8]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800cb6e:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800cb72:	72c2      	strb	r2, [r0, #11]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800cb74:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800cb78:	ea46 2683 	orr.w	r6, r6, r3, lsl #10
 800cb7c:	b2b6      	uxth	r6, r6
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800cb7e:	f8a0 6009 	strh.w	r6, [r0, #9]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800cb82:	b2d2      	uxtb	r2, r2
 800cb84:	300c      	adds	r0, #12
 800cb86:	f015 fe63 	bl	8022850 <memcpy>
  hciContext.io.Send(0,0);
 800cb8a:	2100      	movs	r1, #0
 800cb8c:	4608      	mov	r0, r1
 800cb8e:	f8d9 301c 	ldr.w	r3, [r9, #28]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800cb92:	4d24      	ldr	r5, [pc, #144]	; (800cc24 <hci_send_req+0xdc>)
  hciContext.io.Send(0,0);
 800cb94:	4798      	blx	r3
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800cb96:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800cb9a:	f7f5 f9b7 	bl	8001f0c <hci_cmd_resp_wait>
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800cb9e:	2700      	movs	r7, #0
 800cba0:	4628      	mov	r0, r5
 800cba2:	f000 fd73 	bl	800d68c <LST_is_empty>
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800cba6:	a901      	add	r1, sp, #4
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800cba8:	b998      	cbnz	r0, 800cbd2 <hci_send_req+0x8a>
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800cbaa:	4628      	mov	r0, r5
 800cbac:	f000 fd92 	bl	800d6d4 <LST_remove_head>
      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800cbb0:	9c01      	ldr	r4, [sp, #4]
 800cbb2:	7a63      	ldrb	r3, [r4, #9]
 800cbb4:	2b0f      	cmp	r3, #15
 800cbb6:	d017      	beq.n	800cbe8 <hci_send_req+0xa0>
        if(pcommand_complete_event->cmdcode == opcode)
 800cbb8:	89a3      	ldrh	r3, [r4, #12]
 800cbba:	42b3      	cmp	r3, r6
 800cbbc:	d020      	beq.n	800cc00 <hci_send_req+0xb8>
        if(pcommand_complete_event->numcmd != 0)
 800cbbe:	7ae3      	ldrb	r3, [r4, #11]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d0ed      	beq.n	800cba0 <hci_send_req+0x58>
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800cbc4:	4628      	mov	r0, r5
 800cbc6:	f000 fd61 	bl	800d68c <LST_is_empty>
          local_cmd_status = HCI_TL_CmdAvailable;
 800cbca:	2701      	movs	r7, #1
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800cbcc:	a901      	add	r1, sp, #4
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800cbce:	2800      	cmp	r0, #0
 800cbd0:	d0eb      	beq.n	800cbaa <hci_send_req+0x62>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800cbd2:	2f00      	cmp	r7, #0
 800cbd4:	d0df      	beq.n	800cb96 <hci_send_req+0x4e>
    if(StatusNotCallBackFunction != 0)
 800cbd6:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800cbda:	b10b      	cbz	r3, 800cbe0 <hci_send_req+0x98>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800cbdc:	2001      	movs	r0, #1
 800cbde:	4798      	blx	r3
}
 800cbe0:	2000      	movs	r0, #0
 800cbe2:	b003      	add	sp, #12
 800cbe4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if(pcommand_status_event->cmdcode == opcode)
 800cbe8:	f8b4 300d 	ldrh.w	r3, [r4, #13]
 800cbec:	42b3      	cmp	r3, r6
 800cbee:	d103      	bne.n	800cbf8 <hci_send_req+0xb0>
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800cbf0:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800cbf4:	7ae2      	ldrb	r2, [r4, #11]
 800cbf6:	701a      	strb	r2, [r3, #0]
        if(pcommand_status_event->numcmd != 0)
 800cbf8:	7b23      	ldrb	r3, [r4, #12]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d0d0      	beq.n	800cba0 <hci_send_req+0x58>
 800cbfe:	e7e1      	b.n	800cbc4 <hci_send_req+0x7c>
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800cc00:	7aa2      	ldrb	r2, [r4, #10]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800cc02:	e9d8 0304 	ldrd	r0, r3, [r8, #16]
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800cc06:	3a03      	subs	r2, #3
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800cc08:	b2d2      	uxtb	r2, r2
 800cc0a:	429a      	cmp	r2, r3
 800cc0c:	bfa8      	it	ge
 800cc0e:	461a      	movge	r2, r3
 800cc10:	f8c8 2014 	str.w	r2, [r8, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800cc14:	f104 010e 	add.w	r1, r4, #14
 800cc18:	f015 fe1a 	bl	8022850 <memcpy>
 800cc1c:	e7cf      	b.n	800cbbe <hci_send_req+0x76>
 800cc1e:	bf00      	nop
 800cc20:	200017e8 	.word	0x200017e8
 800cc24:	20001ab0 	.word	0x20001ab0

0800cc28 <hci_register_io_bus>:


void hci_register_io_bus(tHciIO* fops)
{
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800cc28:	4a02      	ldr	r2, [pc, #8]	; (800cc34 <hci_register_io_bus+0xc>)
  fops->Send    = TL_BLE_SendCmd;
 800cc2a:	4b03      	ldr	r3, [pc, #12]	; (800cc38 <hci_register_io_bus+0x10>)
  fops->Init    = TL_BLE_Init;
 800cc2c:	6002      	str	r2, [r0, #0]
  fops->Send    = TL_BLE_SendCmd;
 800cc2e:	6103      	str	r3, [r0, #16]

  return;
}
 800cc30:	4770      	bx	lr
 800cc32:	bf00      	nop
 800cc34:	0800d861 	.word	0x0800d861
 800cc38:	0800d8a1 	.word	0x0800d8a1

0800cc3c <Motenv_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Motenv_Event_Handler(void *Event)
{
 800cc3c:	b570      	push	{r4, r5, r6, lr}
  MOTENV_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);

  switch(event_pckt->evt)
 800cc3e:	7843      	ldrb	r3, [r0, #1]
 800cc40:	2bff      	cmp	r3, #255	; 0xff
{
 800cc42:	b084      	sub	sp, #16
  switch(event_pckt->evt)
 800cc44:	d13d      	bne.n	800ccc2 <Motenv_Event_Handler+0x86>
  {
    case EVT_VENDOR:
    {
      blue_evt = (evt_blue_aci*)event_pckt->data;
      switch(blue_evt->ecode)
 800cc46:	f8b0 3003 	ldrh.w	r3, [r0, #3]
 800cc4a:	f640 4201 	movw	r2, #3073	; 0xc01
 800cc4e:	4293      	cmp	r3, r2
 800cc50:	4604      	mov	r4, r0
 800cc52:	d03a      	beq.n	800ccca <Motenv_Event_Handler+0x8e>
 800cc54:	f640 4214 	movw	r2, #3092	; 0xc14
 800cc58:	4293      	cmp	r3, r2
 800cc5a:	d132      	bne.n	800ccc2 <Motenv_Event_Handler+0x86>
        /* Handle Read request from GATT Client */
        case EVT_BLUE_GATT_READ_PERMIT_REQ:
        {
          read_permit_req = (aci_gatt_read_permit_req_event_rp0*)blue_evt->data;
          /* Env char */
          if(read_permit_req->Attribute_Handle == (aMotenvContext.HWEnvCharHdle + 1U))
 800cc5c:	4eb8      	ldr	r6, [pc, #736]	; (800cf40 <Motenv_Event_Handler+0x304>)
 800cc5e:	f8b0 3007 	ldrh.w	r3, [r0, #7]
 800cc62:	88b2      	ldrh	r2, [r6, #4]
 800cc64:	3201      	adds	r2, #1
 800cc66:	4293      	cmp	r3, r2
 800cc68:	f000 80c9 	beq.w	800cdfe <Motenv_Event_Handler+0x1c2>
            BLE_DBG_TEMPLATE_STM_MSG("-- GATT : READ ENV CHAR INFO RECEIVED\n");
            Notification.Motenv_Evt_Opcode = HW_ENV_READ_EVT;
            MOTENV_STM_App_Notification(&Notification);
          }
          /* Acc Event char */
          if(read_permit_req->Attribute_Handle == (aMotenvContext.HWAccEventCharHdle + 1U))
 800cc6c:	88f2      	ldrh	r2, [r6, #6]
 800cc6e:	3201      	adds	r2, #1
 800cc70:	429a      	cmp	r2, r3
 800cc72:	f000 80bb 	beq.w	800cdec <Motenv_Event_Handler+0x1b0>
            BLE_DBG_TEMPLATE_STM_MSG("-- GATT : READ ACC EVENT CHAR INFO RECEIVED\n");
            Notification.Motenv_Evt_Opcode = HW_ACC_EVENT_READ_EVT;
            MOTENV_STM_App_Notification(&Notification);
          }
          /* Activity Rec char */
          else if(read_permit_req->Attribute_Handle == (aMotenvContext.SWActivityRecCharHdle + 1U))
 800cc76:	89f2      	ldrh	r2, [r6, #14]
 800cc78:	3201      	adds	r2, #1
 800cc7a:	429a      	cmp	r2, r3
 800cc7c:	f000 80c8 	beq.w	800ce10 <Motenv_Event_Handler+0x1d4>
            BLE_DBG_TEMPLATE_STM_MSG("-- GATT : READ ACTIVITY REC CHAR INFO RECEIVED\n");
            Notification.Motenv_Evt_Opcode = SW_ACTIVITY_REC_READ_EVT;
            MOTENV_STM_App_Notification(&Notification);
          }
          /* CarryPosition char */
          else if(read_permit_req->Attribute_Handle == (aMotenvContext.SWCarryPositionCharHdle + 1U))
 800cc80:	8a32      	ldrh	r2, [r6, #16]
 800cc82:	3201      	adds	r2, #1
 800cc84:	429a      	cmp	r2, r3
 800cc86:	f000 80d8 	beq.w	800ce3a <Motenv_Event_Handler+0x1fe>
            BLE_DBG_TEMPLATE_STM_MSG("-- GATT : READ CARRY POSITION CHAR INFO RECEIVED\n");
            Notification.Motenv_Evt_Opcode = SW_CARRY_POSITION_READ_EVT;
            MOTENV_STM_App_Notification(&Notification);
          }
          /* GestureRec char */
          else if(read_permit_req->Attribute_Handle == (aMotenvContext.SWGestureRecCharHdle + 1U))
 800cc8a:	8a72      	ldrh	r2, [r6, #18]
 800cc8c:	3201      	adds	r2, #1
 800cc8e:	429a      	cmp	r2, r3
 800cc90:	f000 80e2 	beq.w	800ce58 <Motenv_Event_Handler+0x21c>
            BLE_DBG_TEMPLATE_STM_MSG("-- GATT : READ GESTURE REC CHAR INFO RECEIVED\n");
            Notification.Motenv_Evt_Opcode = SW_GESTURE_REC_READ_EVT;
            MOTENV_STM_App_Notification(&Notification);
          }
          /* Pedometer char */
          else if(read_permit_req->Attribute_Handle == (aMotenvContext.SWPedometerCharHdle + 1U))
 800cc94:	8ab2      	ldrh	r2, [r6, #20]
 800cc96:	3201      	adds	r2, #1
 800cc98:	429a      	cmp	r2, r3
 800cc9a:	f000 80e6 	beq.w	800ce6a <Motenv_Event_Handler+0x22e>
          else
          {
            /* do nothing */
          }
          /* Console Term char */
          if(read_permit_req->Attribute_Handle == (aMotenvContext.ConsoleTermCharHdle + 1U))
 800cc9e:	8bf2      	ldrh	r2, [r6, #30]
 800cca0:	3201      	adds	r2, #1
 800cca2:	429a      	cmp	r2, r3
 800cca4:	f000 8099 	beq.w	800cdda <Motenv_Event_Handler+0x19e>
            BLE_DBG_TEMPLATE_STM_MSG("-- GATT : READ CONSOLE TERM CHAR INFO RECEIVED\n");
            Notification.Motenv_Evt_Opcode = CONSOLE_TERM_READ_EVT;
            MOTENV_STM_App_Notification(&Notification);
          }
          /* Console Stderr char */
          if(read_permit_req->Attribute_Handle == (aMotenvContext.ConsoleStderrCharHdle + 1U))
 800cca8:	8c32      	ldrh	r2, [r6, #32]
 800ccaa:	3201      	adds	r2, #1
 800ccac:	429a      	cmp	r2, r3
 800ccae:	f000 8082 	beq.w	800cdb6 <Motenv_Event_Handler+0x17a>
            */
            BLE_DBG_TEMPLATE_STM_MSG("-- GATT : READ CONSOLE STDERR CHAR INFO RECEIVED\n");
            Notification.Motenv_Evt_Opcode = CONSOLE_STDERR_READ_EVT;
            MOTENV_STM_App_Notification(&Notification);
          }
          (void)aci_gatt_allow_read(read_permit_req->Connection_Handle);
 800ccb2:	f8b4 0005 	ldrh.w	r0, [r4, #5]
 800ccb6:	f7ff fdf5 	bl	800c8a4 <aci_gatt_allow_read>
  return_value = SVCCTL_EvtNotAck;
 800ccba:	2500      	movs	r5, #0
    default:
      break;
  }

  return(return_value);
}/* end Motenv_Event_Handler */
 800ccbc:	4628      	mov	r0, r5
 800ccbe:	b004      	add	sp, #16
 800ccc0:	bd70      	pop	{r4, r5, r6, pc}
  return_value = SVCCTL_EvtNotAck;
 800ccc2:	2500      	movs	r5, #0
}/* end Motenv_Event_Handler */
 800ccc4:	4628      	mov	r0, r5
 800ccc6:	b004      	add	sp, #16
 800ccc8:	bd70      	pop	{r4, r5, r6, pc}
          if(attribute_modified->Attr_Handle == (aMotenvContext.HWEnvCharHdle + 2U))
 800ccca:	4e9d      	ldr	r6, [pc, #628]	; (800cf40 <Motenv_Event_Handler+0x304>)
 800cccc:	f8b0 3007 	ldrh.w	r3, [r0, #7]
 800ccd0:	88b2      	ldrh	r2, [r6, #4]
 800ccd2:	3202      	adds	r2, #2
 800ccd4:	4293      	cmp	r3, r2
 800ccd6:	d048      	beq.n	800cd6a <Motenv_Event_Handler+0x12e>
  return_value = SVCCTL_EvtNotAck;
 800ccd8:	2500      	movs	r5, #0
          if(attribute_modified->Attr_Handle == (aMotenvContext.HWAccEventCharHdle + 2U))
 800ccda:	88f2      	ldrh	r2, [r6, #6]
 800ccdc:	3202      	adds	r2, #2
 800ccde:	429a      	cmp	r2, r3
 800cce0:	d051      	beq.n	800cd86 <Motenv_Event_Handler+0x14a>
          else if(attribute_modified->Attr_Handle == (aMotenvContext.HWMotionCharHdle + 2U))
 800cce2:	8872      	ldrh	r2, [r6, #2]
 800cce4:	3202      	adds	r2, #2
 800cce6:	429a      	cmp	r2, r3
 800cce8:	d06c      	beq.n	800cdc4 <Motenv_Event_Handler+0x188>
          else if(attribute_modified->Attr_Handle == (aMotenvContext.SWQuaternionsCharHdle + 2U))
 800ccea:	8972      	ldrh	r2, [r6, #10]
 800ccec:	3202      	adds	r2, #2
 800ccee:	429a      	cmp	r2, r3
 800ccf0:	f000 8097 	beq.w	800ce22 <Motenv_Event_Handler+0x1e6>
          else if(attribute_modified->Attr_Handle == (aMotenvContext.SWECompassCharHdle + 2U))
 800ccf4:	89b2      	ldrh	r2, [r6, #12]
 800ccf6:	3202      	adds	r2, #2
 800ccf8:	429a      	cmp	r2, r3
 800ccfa:	d050      	beq.n	800cd9e <Motenv_Event_Handler+0x162>
          else if(attribute_modified->Attr_Handle == (aMotenvContext.SWActivityRecCharHdle + 2U))
 800ccfc:	89f2      	ldrh	r2, [r6, #14]
 800ccfe:	3202      	adds	r2, #2
 800cd00:	429a      	cmp	r2, r3
 800cd02:	f000 80bb 	beq.w	800ce7c <Motenv_Event_Handler+0x240>
          else if(attribute_modified->Attr_Handle == (aMotenvContext.SWCarryPositionCharHdle + 2U))
 800cd06:	8a32      	ldrh	r2, [r6, #16]
 800cd08:	3202      	adds	r2, #2
 800cd0a:	429a      	cmp	r2, r3
 800cd0c:	f000 80c2 	beq.w	800ce94 <Motenv_Event_Handler+0x258>
          else if(attribute_modified->Attr_Handle == (aMotenvContext.SWGestureRecCharHdle + 2U))
 800cd10:	8a72      	ldrh	r2, [r6, #18]
 800cd12:	3202      	adds	r2, #2
 800cd14:	429a      	cmp	r2, r3
 800cd16:	f000 80c9 	beq.w	800ceac <Motenv_Event_Handler+0x270>
          else if(attribute_modified->Attr_Handle == (aMotenvContext.SWPedometerCharHdle + 2U))
 800cd1a:	8ab2      	ldrh	r2, [r6, #20]
 800cd1c:	3202      	adds	r2, #2
 800cd1e:	429a      	cmp	r2, r3
 800cd20:	f000 80d0 	beq.w	800cec4 <Motenv_Event_Handler+0x288>
          else if(attribute_modified->Attr_Handle == (aMotenvContext.SWIntensityDetCharHdle + 2U))
 800cd24:	8af2      	ldrh	r2, [r6, #22]
 800cd26:	3202      	adds	r2, #2
 800cd28:	429a      	cmp	r2, r3
 800cd2a:	f000 80d7 	beq.w	800cedc <Motenv_Event_Handler+0x2a0>
          else if(attribute_modified->Attr_Handle == (aMotenvContext.ConfigCharHdle + 2U))
 800cd2e:	8b72      	ldrh	r2, [r6, #26]
 800cd30:	1c91      	adds	r1, r2, #2
 800cd32:	4299      	cmp	r1, r3
 800cd34:	f000 80de 	beq.w	800cef4 <Motenv_Event_Handler+0x2b8>
          else if(attribute_modified->Attr_Handle == (aMotenvContext.ConfigCharHdle + 1U))
 800cd38:	3201      	adds	r2, #1
 800cd3a:	429a      	cmp	r2, r3
 800cd3c:	f000 80f2 	beq.w	800cf24 <Motenv_Event_Handler+0x2e8>
          else if(attribute_modified->Attr_Handle == (aMotenvContext.ConsoleTermCharHdle + 2U))
 800cd40:	8bf2      	ldrh	r2, [r6, #30]
 800cd42:	3202      	adds	r2, #2
 800cd44:	429a      	cmp	r2, r3
 800cd46:	f000 80e1 	beq.w	800cf0c <Motenv_Event_Handler+0x2d0>
          else if(attribute_modified->Attr_Handle == (aMotenvContext.ConsoleStderrCharHdle + 2U))
 800cd4a:	8c32      	ldrh	r2, [r6, #32]
 800cd4c:	3202      	adds	r2, #2
 800cd4e:	429a      	cmp	r2, r3
 800cd50:	d1b8      	bne.n	800ccc4 <Motenv_Event_Handler+0x88>
            if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800cd52:	7b63      	ldrb	r3, [r4, #13]
              Notification.Motenv_Evt_Opcode = CONSOLE_STDERR_NOTIFY_ENABLED_EVT;
 800cd54:	a804      	add	r0, sp, #16
            if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800cd56:	07db      	lsls	r3, r3, #31
              Notification.Motenv_Evt_Opcode = CONSOLE_STDERR_NOTIFY_ENABLED_EVT;
 800cd58:	bf4c      	ite	mi
 800cd5a:	231f      	movmi	r3, #31
              Notification.Motenv_Evt_Opcode = CONSOLE_STDERR_NOTIFY_DISABLED_EVT;
 800cd5c:	2320      	movpl	r3, #32
 800cd5e:	f800 3d10 	strb.w	r3, [r0, #-16]!
              MOTENV_STM_App_Notification(&Notification);
 800cd62:	f7f5 fd4f 	bl	8002804 <MOTENV_STM_App_Notification>
            return_value = SVCCTL_EvtAckFlowEnable;
 800cd66:	2501      	movs	r5, #1
 800cd68:	e7ac      	b.n	800ccc4 <Motenv_Event_Handler+0x88>
            if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800cd6a:	7b43      	ldrb	r3, [r0, #13]
              Notification.Motenv_Evt_Opcode = HW_ENV_NOTIFY_ENABLED_EVT;
 800cd6c:	a804      	add	r0, sp, #16
            if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800cd6e:	07db      	lsls	r3, r3, #31
              Notification.Motenv_Evt_Opcode = HW_ENV_NOTIFY_ENABLED_EVT;
 800cd70:	bf4c      	ite	mi
 800cd72:	2302      	movmi	r3, #2
              Notification.Motenv_Evt_Opcode = HW_ENV_NOTIFY_DISABLED_EVT;
 800cd74:	2303      	movpl	r3, #3
 800cd76:	f800 3d10 	strb.w	r3, [r0, #-16]!
              MOTENV_STM_App_Notification(&Notification);
 800cd7a:	f7f5 fd43 	bl	8002804 <MOTENV_STM_App_Notification>
            return_value = SVCCTL_EvtAckFlowEnable;
 800cd7e:	2501      	movs	r5, #1
 800cd80:	f8b4 3007 	ldrh.w	r3, [r4, #7]
 800cd84:	e7a9      	b.n	800ccda <Motenv_Event_Handler+0x9e>
            if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800cd86:	7b63      	ldrb	r3, [r4, #13]
              Notification.Motenv_Evt_Opcode = HW_ACC_EVENT_NOTIFY_ENABLED_EVT;
 800cd88:	a804      	add	r0, sp, #16
            if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800cd8a:	07de      	lsls	r6, r3, #31
              Notification.Motenv_Evt_Opcode = HW_ACC_EVENT_NOTIFY_ENABLED_EVT;
 800cd8c:	bf4c      	ite	mi
 800cd8e:	2305      	movmi	r3, #5
              Notification.Motenv_Evt_Opcode = HW_ACC_EVENT_NOTIFY_DISABLED_EVT;
 800cd90:	2306      	movpl	r3, #6
 800cd92:	f800 3d10 	strb.w	r3, [r0, #-16]!
              MOTENV_STM_App_Notification(&Notification);
 800cd96:	f7f5 fd35 	bl	8002804 <MOTENV_STM_App_Notification>
            return_value = SVCCTL_EvtAckFlowEnable;
 800cd9a:	2501      	movs	r5, #1
 800cd9c:	e792      	b.n	800ccc4 <Motenv_Event_Handler+0x88>
            if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800cd9e:	7b63      	ldrb	r3, [r4, #13]
              Notification.Motenv_Evt_Opcode = SW_ECOMPASS_NOTIFY_ENABLED_EVT;
 800cda0:	a804      	add	r0, sp, #16
            if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800cda2:	07d9      	lsls	r1, r3, #31
              Notification.Motenv_Evt_Opcode = SW_ECOMPASS_NOTIFY_ENABLED_EVT;
 800cda4:	bf4c      	ite	mi
 800cda6:	230a      	movmi	r3, #10
              Notification.Motenv_Evt_Opcode = SW_ECOMPASS_NOTIFY_DISABLED_EVT;
 800cda8:	230b      	movpl	r3, #11
 800cdaa:	f800 3d10 	strb.w	r3, [r0, #-16]!
              MOTENV_STM_App_Notification(&Notification);
 800cdae:	f7f5 fd29 	bl	8002804 <MOTENV_STM_App_Notification>
            return_value = SVCCTL_EvtAckFlowEnable;
 800cdb2:	2501      	movs	r5, #1
 800cdb4:	e786      	b.n	800ccc4 <Motenv_Event_Handler+0x88>
            Notification.Motenv_Evt_Opcode = CONSOLE_STDERR_READ_EVT;
 800cdb6:	a804      	add	r0, sp, #16
 800cdb8:	2322      	movs	r3, #34	; 0x22
 800cdba:	f800 3d10 	strb.w	r3, [r0, #-16]!
            MOTENV_STM_App_Notification(&Notification);
 800cdbe:	f7f5 fd21 	bl	8002804 <MOTENV_STM_App_Notification>
 800cdc2:	e776      	b.n	800ccb2 <Motenv_Event_Handler+0x76>
            if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800cdc4:	7b63      	ldrb	r3, [r4, #13]
 800cdc6:	07dd      	lsls	r5, r3, #31
              Notification.Motenv_Evt_Opcode = HW_MOTION_NOTIFY_ENABLED_EVT;
 800cdc8:	a804      	add	r0, sp, #16
            if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800cdca:	d53f      	bpl.n	800ce4c <Motenv_Event_Handler+0x210>
              Notification.Motenv_Evt_Opcode = HW_MOTION_NOTIFY_ENABLED_EVT;
 800cdcc:	2300      	movs	r3, #0
 800cdce:	f800 3d10 	strb.w	r3, [r0, #-16]!
              MOTENV_STM_App_Notification(&Notification);
 800cdd2:	f7f5 fd17 	bl	8002804 <MOTENV_STM_App_Notification>
            return_value = SVCCTL_EvtAckFlowEnable;
 800cdd6:	2501      	movs	r5, #1
 800cdd8:	e774      	b.n	800ccc4 <Motenv_Event_Handler+0x88>
            Notification.Motenv_Evt_Opcode = CONSOLE_TERM_READ_EVT;
 800cdda:	a804      	add	r0, sp, #16
 800cddc:	2321      	movs	r3, #33	; 0x21
 800cdde:	f800 3d10 	strb.w	r3, [r0, #-16]!
            MOTENV_STM_App_Notification(&Notification);
 800cde2:	f7f5 fd0f 	bl	8002804 <MOTENV_STM_App_Notification>
 800cde6:	f8b4 3007 	ldrh.w	r3, [r4, #7]
 800cdea:	e75d      	b.n	800cca8 <Motenv_Event_Handler+0x6c>
            Notification.Motenv_Evt_Opcode = HW_ACC_EVENT_READ_EVT;
 800cdec:	a804      	add	r0, sp, #16
 800cdee:	2307      	movs	r3, #7
 800cdf0:	f800 3d10 	strb.w	r3, [r0, #-16]!
            MOTENV_STM_App_Notification(&Notification);
 800cdf4:	f7f5 fd06 	bl	8002804 <MOTENV_STM_App_Notification>
 800cdf8:	f8b4 3007 	ldrh.w	r3, [r4, #7]
 800cdfc:	e74f      	b.n	800cc9e <Motenv_Event_Handler+0x62>
            Notification.Motenv_Evt_Opcode = HW_ENV_READ_EVT;
 800cdfe:	a804      	add	r0, sp, #16
 800ce00:	2304      	movs	r3, #4
 800ce02:	f800 3d10 	strb.w	r3, [r0, #-16]!
            MOTENV_STM_App_Notification(&Notification);
 800ce06:	f7f5 fcfd 	bl	8002804 <MOTENV_STM_App_Notification>
 800ce0a:	f8b4 3007 	ldrh.w	r3, [r4, #7]
 800ce0e:	e72d      	b.n	800cc6c <Motenv_Event_Handler+0x30>
            Notification.Motenv_Evt_Opcode = SW_ACTIVITY_REC_READ_EVT;
 800ce10:	a804      	add	r0, sp, #16
 800ce12:	230e      	movs	r3, #14
 800ce14:	f800 3d10 	strb.w	r3, [r0, #-16]!
            MOTENV_STM_App_Notification(&Notification);
 800ce18:	f7f5 fcf4 	bl	8002804 <MOTENV_STM_App_Notification>
 800ce1c:	f8b4 3007 	ldrh.w	r3, [r4, #7]
 800ce20:	e73d      	b.n	800cc9e <Motenv_Event_Handler+0x62>
            if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800ce22:	7b63      	ldrb	r3, [r4, #13]
              Notification.Motenv_Evt_Opcode = SW_MOTIONFX_NOTIFY_ENABLED_EVT;
 800ce24:	a804      	add	r0, sp, #16
            if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800ce26:	07dc      	lsls	r4, r3, #31
              Notification.Motenv_Evt_Opcode = SW_MOTIONFX_NOTIFY_ENABLED_EVT;
 800ce28:	bf4c      	ite	mi
 800ce2a:	2308      	movmi	r3, #8
              Notification.Motenv_Evt_Opcode = SW_MOTIONFX_NOTIFY_DISABLED_EVT;
 800ce2c:	2309      	movpl	r3, #9
 800ce2e:	f800 3d10 	strb.w	r3, [r0, #-16]!
              MOTENV_STM_App_Notification(&Notification);
 800ce32:	f7f5 fce7 	bl	8002804 <MOTENV_STM_App_Notification>
            return_value = SVCCTL_EvtAckFlowEnable;
 800ce36:	2501      	movs	r5, #1
 800ce38:	e744      	b.n	800ccc4 <Motenv_Event_Handler+0x88>
            Notification.Motenv_Evt_Opcode = SW_CARRY_POSITION_READ_EVT;
 800ce3a:	a804      	add	r0, sp, #16
 800ce3c:	2311      	movs	r3, #17
 800ce3e:	f800 3d10 	strb.w	r3, [r0, #-16]!
            MOTENV_STM_App_Notification(&Notification);
 800ce42:	f7f5 fcdf 	bl	8002804 <MOTENV_STM_App_Notification>
 800ce46:	f8b4 3007 	ldrh.w	r3, [r4, #7]
 800ce4a:	e728      	b.n	800cc9e <Motenv_Event_Handler+0x62>
              Notification.Motenv_Evt_Opcode = HW_MOTION_NOTIFY_DISABLED_EVT;
 800ce4c:	2501      	movs	r5, #1
 800ce4e:	f800 5d10 	strb.w	r5, [r0, #-16]!
              MOTENV_STM_App_Notification(&Notification);
 800ce52:	f7f5 fcd7 	bl	8002804 <MOTENV_STM_App_Notification>
 800ce56:	e735      	b.n	800ccc4 <Motenv_Event_Handler+0x88>
            Notification.Motenv_Evt_Opcode = SW_GESTURE_REC_READ_EVT;
 800ce58:	a804      	add	r0, sp, #16
 800ce5a:	2314      	movs	r3, #20
 800ce5c:	f800 3d10 	strb.w	r3, [r0, #-16]!
            MOTENV_STM_App_Notification(&Notification);
 800ce60:	f7f5 fcd0 	bl	8002804 <MOTENV_STM_App_Notification>
 800ce64:	f8b4 3007 	ldrh.w	r3, [r4, #7]
 800ce68:	e719      	b.n	800cc9e <Motenv_Event_Handler+0x62>
            Notification.Motenv_Evt_Opcode = SW_PEDOMETER_READ_EVT;
 800ce6a:	a804      	add	r0, sp, #16
 800ce6c:	2317      	movs	r3, #23
 800ce6e:	f800 3d10 	strb.w	r3, [r0, #-16]!
            MOTENV_STM_App_Notification(&Notification);
 800ce72:	f7f5 fcc7 	bl	8002804 <MOTENV_STM_App_Notification>
 800ce76:	f8b4 3007 	ldrh.w	r3, [r4, #7]
 800ce7a:	e710      	b.n	800cc9e <Motenv_Event_Handler+0x62>
            if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800ce7c:	7b63      	ldrb	r3, [r4, #13]
              Notification.Motenv_Evt_Opcode = SW_ACTIVITY_REC_NOTIFY_ENABLED_EVT;
 800ce7e:	a804      	add	r0, sp, #16
            if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800ce80:	07da      	lsls	r2, r3, #31
              Notification.Motenv_Evt_Opcode = SW_ACTIVITY_REC_NOTIFY_ENABLED_EVT;
 800ce82:	bf4c      	ite	mi
 800ce84:	230c      	movmi	r3, #12
              Notification.Motenv_Evt_Opcode = SW_ACTIVITY_REC_NOTIFY_DISABLED_EVT;
 800ce86:	230d      	movpl	r3, #13
 800ce88:	f800 3d10 	strb.w	r3, [r0, #-16]!
              MOTENV_STM_App_Notification(&Notification);
 800ce8c:	f7f5 fcba 	bl	8002804 <MOTENV_STM_App_Notification>
            return_value = SVCCTL_EvtAckFlowEnable;
 800ce90:	2501      	movs	r5, #1
 800ce92:	e717      	b.n	800ccc4 <Motenv_Event_Handler+0x88>
            if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800ce94:	7b63      	ldrb	r3, [r4, #13]
              Notification.Motenv_Evt_Opcode = SW_CARRY_POSITION_NOTIFY_ENABLED_EVT;
 800ce96:	a804      	add	r0, sp, #16
            if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800ce98:	07db      	lsls	r3, r3, #31
              Notification.Motenv_Evt_Opcode = SW_CARRY_POSITION_NOTIFY_ENABLED_EVT;
 800ce9a:	bf4c      	ite	mi
 800ce9c:	230f      	movmi	r3, #15
              Notification.Motenv_Evt_Opcode = SW_CARRY_POSITION_NOTIFY_DISABLED_EVT;
 800ce9e:	2310      	movpl	r3, #16
 800cea0:	f800 3d10 	strb.w	r3, [r0, #-16]!
              MOTENV_STM_App_Notification(&Notification);
 800cea4:	f7f5 fcae 	bl	8002804 <MOTENV_STM_App_Notification>
            return_value = SVCCTL_EvtAckFlowEnable;
 800cea8:	2501      	movs	r5, #1
 800ceaa:	e70b      	b.n	800ccc4 <Motenv_Event_Handler+0x88>
            if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800ceac:	7b63      	ldrb	r3, [r4, #13]
              Notification.Motenv_Evt_Opcode = SW_GESTURE_REC_NOTIFY_ENABLED_EVT;
 800ceae:	a804      	add	r0, sp, #16
            if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800ceb0:	07de      	lsls	r6, r3, #31
              Notification.Motenv_Evt_Opcode = SW_GESTURE_REC_NOTIFY_ENABLED_EVT;
 800ceb2:	bf4c      	ite	mi
 800ceb4:	2312      	movmi	r3, #18
              Notification.Motenv_Evt_Opcode = SW_GESTURE_REC_NOTIFY_DISABLED_EVT;
 800ceb6:	2313      	movpl	r3, #19
 800ceb8:	f800 3d10 	strb.w	r3, [r0, #-16]!
              MOTENV_STM_App_Notification(&Notification);
 800cebc:	f7f5 fca2 	bl	8002804 <MOTENV_STM_App_Notification>
            return_value = SVCCTL_EvtAckFlowEnable;
 800cec0:	2501      	movs	r5, #1
 800cec2:	e6ff      	b.n	800ccc4 <Motenv_Event_Handler+0x88>
            if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800cec4:	7b63      	ldrb	r3, [r4, #13]
              Notification.Motenv_Evt_Opcode = SW_PEDOMETER_NOTIFY_ENABLED_EVT;
 800cec6:	a804      	add	r0, sp, #16
            if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800cec8:	07dd      	lsls	r5, r3, #31
              Notification.Motenv_Evt_Opcode = SW_PEDOMETER_NOTIFY_ENABLED_EVT;
 800ceca:	bf4c      	ite	mi
 800cecc:	2315      	movmi	r3, #21
              Notification.Motenv_Evt_Opcode = SW_PEDOMETER_NOTIFY_DISABLED_EVT;
 800cece:	2316      	movpl	r3, #22
 800ced0:	f800 3d10 	strb.w	r3, [r0, #-16]!
              MOTENV_STM_App_Notification(&Notification);
 800ced4:	f7f5 fc96 	bl	8002804 <MOTENV_STM_App_Notification>
            return_value = SVCCTL_EvtAckFlowEnable;
 800ced8:	2501      	movs	r5, #1
 800ceda:	e6f3      	b.n	800ccc4 <Motenv_Event_Handler+0x88>
            if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800cedc:	7b63      	ldrb	r3, [r4, #13]
              Notification.Motenv_Evt_Opcode = SW_INTENSITY_DET_NOTIFY_ENABLED_EVT;
 800cede:	a804      	add	r0, sp, #16
            if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800cee0:	07dc      	lsls	r4, r3, #31
              Notification.Motenv_Evt_Opcode = SW_INTENSITY_DET_NOTIFY_ENABLED_EVT;
 800cee2:	bf4c      	ite	mi
 800cee4:	2318      	movmi	r3, #24
              Notification.Motenv_Evt_Opcode = SW_INTENSITY_DET_NOTIFY_DISABLED_EVT;
 800cee6:	2319      	movpl	r3, #25
 800cee8:	f800 3d10 	strb.w	r3, [r0, #-16]!
              MOTENV_STM_App_Notification(&Notification);
 800ceec:	f7f5 fc8a 	bl	8002804 <MOTENV_STM_App_Notification>
            return_value = SVCCTL_EvtAckFlowEnable;
 800cef0:	2501      	movs	r5, #1
 800cef2:	e6e7      	b.n	800ccc4 <Motenv_Event_Handler+0x88>
            if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800cef4:	7b63      	ldrb	r3, [r4, #13]
              Notification.Motenv_Evt_Opcode = CONFIG_NOTIFY_ENABLED_EVT;
 800cef6:	a804      	add	r0, sp, #16
            if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800cef8:	07d9      	lsls	r1, r3, #31
              Notification.Motenv_Evt_Opcode = CONFIG_NOTIFY_ENABLED_EVT;
 800cefa:	bf4c      	ite	mi
 800cefc:	231a      	movmi	r3, #26
              Notification.Motenv_Evt_Opcode = CONFIG_NOTIFY_DISABLED_EVT;
 800cefe:	231b      	movpl	r3, #27
 800cf00:	f800 3d10 	strb.w	r3, [r0, #-16]!
              MOTENV_STM_App_Notification(&Notification);
 800cf04:	f7f5 fc7e 	bl	8002804 <MOTENV_STM_App_Notification>
            return_value = SVCCTL_EvtAckFlowEnable;
 800cf08:	2501      	movs	r5, #1
 800cf0a:	e6db      	b.n	800ccc4 <Motenv_Event_Handler+0x88>
            if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800cf0c:	7b63      	ldrb	r3, [r4, #13]
              Notification.Motenv_Evt_Opcode = CONSOLE_TERM_NOTIFY_ENABLED_EVT;
 800cf0e:	a804      	add	r0, sp, #16
            if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800cf10:	07da      	lsls	r2, r3, #31
              Notification.Motenv_Evt_Opcode = CONSOLE_TERM_NOTIFY_ENABLED_EVT;
 800cf12:	bf4c      	ite	mi
 800cf14:	231d      	movmi	r3, #29
              Notification.Motenv_Evt_Opcode = CONSOLE_TERM_NOTIFY_DISABLED_EVT;
 800cf16:	231e      	movpl	r3, #30
 800cf18:	f800 3d10 	strb.w	r3, [r0, #-16]!
              MOTENV_STM_App_Notification(&Notification);
 800cf1c:	f7f5 fc72 	bl	8002804 <MOTENV_STM_App_Notification>
            return_value = SVCCTL_EvtAckFlowEnable;
 800cf20:	2501      	movs	r5, #1
 800cf22:	e6cf      	b.n	800ccc4 <Motenv_Event_Handler+0x88>
            Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800cf24:	f8b4 300b 	ldrh.w	r3, [r4, #11]
 800cf28:	f88d 3008 	strb.w	r3, [sp, #8]
            Notification.Motenv_Evt_Opcode = CONFIG_WRITE_EVT;
 800cf2c:	221c      	movs	r2, #28
            Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800cf2e:	340d      	adds	r4, #13
            MOTENV_STM_App_Notification(&Notification);
 800cf30:	4668      	mov	r0, sp
            Notification.Motenv_Evt_Opcode = CONFIG_WRITE_EVT;
 800cf32:	f88d 2000 	strb.w	r2, [sp]
            Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800cf36:	9401      	str	r4, [sp, #4]
            MOTENV_STM_App_Notification(&Notification);
 800cf38:	f7f5 fc64 	bl	8002804 <MOTENV_STM_App_Notification>
 800cf3c:	e6c2      	b.n	800ccc4 <Motenv_Event_Handler+0x88>
 800cf3e:	bf00      	nop
 800cf40:	200017f8 	.word	0x200017f8

0800cf44 <MOTENV_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void MOTENV_STM_Init(void)
{
 800cf44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf48:	b08b      	sub	sp, #44	; 0x2c
  
  /**
   *   Add HW Service
   */
  COPY_HW_SERVICE_UUID(uuid16.Char_UUID_128);
  (void)aci_gatt_add_service(UUID_TYPE_128,
 800cf4a:	4cb6      	ldr	r4, [pc, #728]	; (800d224 <MOTENV_STM_Init+0x2e0>)
  COPY_HW_SERVICE_UUID(uuid16.Char_UUID_128);
 800cf4c:	f8df 92ec 	ldr.w	r9, [pc, #748]	; 800d23c <MOTENV_STM_Init+0x2f8>
 800cf50:	4eb5      	ldr	r6, [pc, #724]	; (800d228 <MOTENV_STM_Init+0x2e4>)
  SVCCTL_RegisterSvcHandler(Motenv_Event_Handler);
 800cf52:	48b6      	ldr	r0, [pc, #728]	; (800d22c <MOTENV_STM_Init+0x2e8>)
  COPY_HW_SERVICE_UUID(uuid16.Char_UUID_128);
 800cf54:	4fb6      	ldr	r7, [pc, #728]	; (800d230 <MOTENV_STM_Init+0x2ec>)
                             1+(3*HW_CHAR_NUMBER), /*Max_Attribute_Records*/
                             &(aMotenvContext.HWSvcHdle));
  /**
   *   Add Motion Characteristic for HW Service
   */
  COPY_HW_MOTION_CHAR_UUID(uuid16.Char_UUID_128);
 800cf56:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 800d240 <MOTENV_STM_Init+0x2fc>
  COPY_HW_SERVICE_UUID(uuid16.Char_UUID_128);
 800cf5a:	2500      	movs	r5, #0
  SVCCTL_RegisterSvcHandler(Motenv_Event_Handler);
 800cf5c:	f000 fc12 	bl	800d784 <SVCCTL_RegisterSvcHandler>
  (void)aci_gatt_add_service(UUID_TYPE_128,
 800cf60:	a906      	add	r1, sp, #24
 800cf62:	9400      	str	r4, [sp, #0]
 800cf64:	230a      	movs	r3, #10
 800cf66:	2201      	movs	r2, #1
 800cf68:	2002      	movs	r0, #2
  COPY_HW_SERVICE_UUID(uuid16.Char_UUID_128);
 800cf6a:	e9cd 6907 	strd	r6, r9, [sp, #28]
 800cf6e:	9706      	str	r7, [sp, #24]
 800cf70:	9509      	str	r5, [sp, #36]	; 0x24
  (void)aci_gatt_add_service(UUID_TYPE_128,
 800cf72:	f7ff fb91 	bl	800c698 <aci_gatt_add_service>
  (void)aci_gatt_add_char(aMotenvContext.HWSvcHdle,
 800cf76:	4623      	mov	r3, r4
 800cf78:	f04f 0a04 	mov.w	sl, #4
 800cf7c:	f833 0b02 	ldrh.w	r0, [r3], #2
 800cf80:	9305      	str	r3, [sp, #20]
 800cf82:	2310      	movs	r3, #16
 800cf84:	aa06      	add	r2, sp, #24
 800cf86:	9303      	str	r3, [sp, #12]
 800cf88:	9300      	str	r3, [sp, #0]
  COPY_HW_MOTION_CHAR_UUID(uuid16.Char_UUID_128);
 800cf8a:	f44f 0c60 	mov.w	ip, #14680064	; 0xe00000
  (void)aci_gatt_add_char(aMotenvContext.HWSvcHdle,
 800cf8e:	9504      	str	r5, [sp, #16]
 800cf90:	9501      	str	r5, [sp, #4]
 800cf92:	f8cd a008 	str.w	sl, [sp, #8]
 800cf96:	2314      	movs	r3, #20
 800cf98:	2102      	movs	r1, #2
  COPY_HW_MOTION_CHAR_UUID(uuid16.Char_UUID_128);
 800cf9a:	e9cd b907 	strd	fp, r9, [sp, #28]
 800cf9e:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800cfa2:	9706      	str	r7, [sp, #24]
  (void)aci_gatt_add_char(aMotenvContext.HWSvcHdle,
 800cfa4:	f7ff fbd4 	bl	800c750 <aci_gatt_add_char>

    /**
     *   Add Env Characteristic for HW Service
     */
    COPY_HW_ENV_CHAR_UUID(uuid16.Char_UUID_128);
    (void)aci_gatt_add_char(aMotenvContext.HWSvcHdle,
 800cfa8:	4623      	mov	r3, r4
 800cfaa:	2210      	movs	r2, #16
 800cfac:	f833 0b04 	ldrh.w	r0, [r3], #4
 800cfb0:	9305      	str	r3, [sp, #20]
 800cfb2:	2312      	movs	r3, #18
 800cfb4:	e9cd a202 	strd	sl, r2, [sp, #8]
 800cfb8:	9300      	str	r3, [sp, #0]
 800cfba:	aa06      	add	r2, sp, #24
    COPY_HW_ENV_CHAR_UUID(uuid16.Char_UUID_128);
 800cfbc:	f44f 1ce8 	mov.w	ip, #1900544	; 0x1d0000
    (void)aci_gatt_add_char(aMotenvContext.HWSvcHdle,
 800cfc0:	9504      	str	r5, [sp, #16]
 800cfc2:	9501      	str	r5, [sp, #4]
 800cfc4:	230c      	movs	r3, #12
 800cfc6:	2102      	movs	r1, #2
    COPY_HW_ENV_CHAR_UUID(uuid16.Char_UUID_128);
 800cfc8:	e9cd 9c08 	strd	r9, ip, [sp, #32]
 800cfcc:	e9cd 7b06 	strd	r7, fp, [sp, #24]
    (void)aci_gatt_add_char(aMotenvContext.HWSvcHdle,
 800cfd0:	f7ff fbbe 	bl	800c750 <aci_gatt_add_char>

    /**
     *   Add Acc Event Characteristic for HW Service
     */
    COPY_HW_ACC_EVENT_CHAR_UUID(uuid16.Char_UUID_128);
    (void)aci_gatt_add_char(aMotenvContext.HWSvcHdle,
 800cfd4:	4623      	mov	r3, r4
 800cfd6:	2210      	movs	r2, #16
 800cfd8:	f833 0b06 	ldrh.w	r0, [r3], #6
 800cfdc:	9305      	str	r3, [sp, #20]
 800cfde:	e9cd a202 	strd	sl, r2, [sp, #8]
 800cfe2:	2301      	movs	r3, #1
 800cfe4:	2212      	movs	r2, #18
 800cfe6:	9200      	str	r2, [sp, #0]
 800cfe8:	9304      	str	r3, [sp, #16]
 800cfea:	aa06      	add	r2, sp, #24
    COPY_HW_ACC_EVENT_CHAR_UUID(uuid16.Char_UUID_128);
 800cfec:	f44f 6c80 	mov.w	ip, #1024	; 0x400
    (void)aci_gatt_add_char(aMotenvContext.HWSvcHdle,
 800cff0:	9501      	str	r5, [sp, #4]
 800cff2:	2305      	movs	r3, #5
 800cff4:	2102      	movs	r1, #2
    COPY_HW_ACC_EVENT_CHAR_UUID(uuid16.Char_UUID_128);
 800cff6:	e9cd 9c08 	strd	r9, ip, [sp, #32]
 800cffa:	e9cd 7b06 	strd	r7, fp, [sp, #24]
    (void)aci_gatt_add_char(aMotenvContext.HWSvcHdle,
 800cffe:	f7ff fba7 	bl	800c750 <aci_gatt_add_char>

  /**
   *   Add SW Service
   */
  COPY_SW_SERVICE_UUID(uuid16.Char_UUID_128);
  (void)aci_gatt_add_service(UUID_TYPE_128,
 800d002:	f104 0308 	add.w	r3, r4, #8
  COPY_SW_SERVICE_UUID(uuid16.Char_UUID_128);
 800d006:	f8df c23c 	ldr.w	ip, [pc, #572]	; 800d244 <MOTENV_STM_Init+0x300>
  (void)aci_gatt_add_service(UUID_TYPE_128,
 800d00a:	9300      	str	r3, [sp, #0]
 800d00c:	a906      	add	r1, sp, #24
 800d00e:	2201      	movs	r2, #1
 800d010:	2316      	movs	r3, #22
 800d012:	2002      	movs	r0, #2
  COPY_SW_SERVICE_UUID(uuid16.Char_UUID_128);
 800d014:	9607      	str	r6, [sp, #28]
 800d016:	e9cd c508 	strd	ip, r5, [sp, #32]
 800d01a:	9706      	str	r7, [sp, #24]
  (void)aci_gatt_add_service(UUID_TYPE_128,
 800d01c:	f7ff fb3c 	bl	800c698 <aci_gatt_add_service>

  /**
   *   Add Quaternions Characteristic for SW Service
   */
  COPY_SW_QUATERNIONS_CHAR_UUID(uuid16.Char_UUID_128);
  (void)aci_gatt_add_char(aMotenvContext.SWSvcHdle,
 800d020:	f104 030a 	add.w	r3, r4, #10
 800d024:	2210      	movs	r2, #16
 800d026:	8920      	ldrh	r0, [r4, #8]
 800d028:	9305      	str	r3, [sp, #20]
 800d02a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800d02e:	e9cd 2500 	strd	r2, r5, [sp]
  COPY_SW_QUATERNIONS_CHAR_UUID(uuid16.Char_UUID_128);
 800d032:	f44f 7c80 	mov.w	ip, #256	; 0x100
  (void)aci_gatt_add_char(aMotenvContext.SWSvcHdle,
 800d036:	aa06      	add	r2, sp, #24
 800d038:	9504      	str	r5, [sp, #16]
 800d03a:	2314      	movs	r3, #20
 800d03c:	2102      	movs	r1, #2
  COPY_SW_QUATERNIONS_CHAR_UUID(uuid16.Char_UUID_128);
 800d03e:	e9cd 9c08 	strd	r9, ip, [sp, #32]
 800d042:	e9cd 7b06 	strd	r7, fp, [sp, #24]
  (void)aci_gatt_add_char(aMotenvContext.SWSvcHdle,
 800d046:	f7ff fb83 	bl	800c750 <aci_gatt_add_char>

  /**
   *   Add ECompass Characteristic for SW Service
   */
  COPY_SW_ECOMPASS_CHAR_UUID(uuid16.Char_UUID_128);
  (void)aci_gatt_add_char(aMotenvContext.SWSvcHdle,
 800d04a:	f104 030c 	add.w	r3, r4, #12
 800d04e:	2210      	movs	r2, #16
 800d050:	8920      	ldrh	r0, [r4, #8]
 800d052:	9305      	str	r3, [sp, #20]
  COPY_SW_ECOMPASS_CHAR_UUID(uuid16.Char_UUID_128);
 800d054:	f04f 0c40 	mov.w	ip, #64	; 0x40
  (void)aci_gatt_add_char(aMotenvContext.SWSvcHdle,
 800d058:	e9cd a202 	strd	sl, r2, [sp, #8]
 800d05c:	e9cd 2500 	strd	r2, r5, [sp]
 800d060:	4653      	mov	r3, sl
 800d062:	aa06      	add	r2, sp, #24
 800d064:	9504      	str	r5, [sp, #16]
 800d066:	2102      	movs	r1, #2
  COPY_SW_ECOMPASS_CHAR_UUID(uuid16.Char_UUID_128);
 800d068:	e9cd 9c08 	strd	r9, ip, [sp, #32]
 800d06c:	e9cd 7b06 	strd	r7, fp, [sp, #24]
  (void)aci_gatt_add_char(aMotenvContext.SWSvcHdle,
 800d070:	f7ff fb6e 	bl	800c750 <aci_gatt_add_char>

  /**
   *   Add Activity Rec Characteristic for SW Service
   */
  COPY_SW_ACTIVITY_REC_CHAR_UUID(uuid16.Char_UUID_128);
  (void)aci_gatt_add_char(aMotenvContext.SWSvcHdle,
 800d074:	2210      	movs	r2, #16
 800d076:	8920      	ldrh	r0, [r4, #8]
 800d078:	9504      	str	r5, [sp, #16]
 800d07a:	f104 030e 	add.w	r3, r4, #14
 800d07e:	e9cd a202 	strd	sl, r2, [sp, #8]
 800d082:	2212      	movs	r2, #18
  COPY_SW_ACTIVITY_REC_CHAR_UUID(uuid16.Char_UUID_128);
 800d084:	2610      	movs	r6, #16
  (void)aci_gatt_add_char(aMotenvContext.SWSvcHdle,
 800d086:	9200      	str	r2, [sp, #0]
 800d088:	9305      	str	r3, [sp, #20]
 800d08a:	aa06      	add	r2, sp, #24
 800d08c:	9501      	str	r5, [sp, #4]
 800d08e:	2303      	movs	r3, #3
 800d090:	2102      	movs	r1, #2
  COPY_SW_ACTIVITY_REC_CHAR_UUID(uuid16.Char_UUID_128);
 800d092:	f8cd 9020 	str.w	r9, [sp, #32]
 800d096:	9609      	str	r6, [sp, #36]	; 0x24
 800d098:	e9cd 7b06 	strd	r7, fp, [sp, #24]
  (void)aci_gatt_add_char(aMotenvContext.SWSvcHdle,
 800d09c:	f7ff fb58 	bl	800c750 <aci_gatt_add_char>

  /**
   *   Add Carry Position Characteristic for SW Service
   */
  COPY_SW_CARRY_POSITION_CHAR_UUID(uuid16.Char_UUID_128);
  (void)aci_gatt_add_char(aMotenvContext.SWSvcHdle,
 800d0a0:	19a3      	adds	r3, r4, r6
 800d0a2:	2212      	movs	r2, #18
 800d0a4:	8920      	ldrh	r0, [r4, #8]
 800d0a6:	9200      	str	r2, [sp, #0]
  COPY_SW_CARRY_POSITION_CHAR_UUID(uuid16.Char_UUID_128);
 800d0a8:	f04f 0c08 	mov.w	ip, #8
  (void)aci_gatt_add_char(aMotenvContext.SWSvcHdle,
 800d0ac:	e9cd a602 	strd	sl, r6, [sp, #8]
 800d0b0:	9305      	str	r3, [sp, #20]
 800d0b2:	aa06      	add	r2, sp, #24
 800d0b4:	9504      	str	r5, [sp, #16]
 800d0b6:	9501      	str	r5, [sp, #4]
 800d0b8:	2303      	movs	r3, #3
 800d0ba:	2102      	movs	r1, #2
  COPY_SW_CARRY_POSITION_CHAR_UUID(uuid16.Char_UUID_128);
 800d0bc:	4666      	mov	r6, ip
 800d0be:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800d0c2:	f8cd 9020 	str.w	r9, [sp, #32]
 800d0c6:	e9cd 7b06 	strd	r7, fp, [sp, #24]
  (void)aci_gatt_add_char(aMotenvContext.SWSvcHdle,
 800d0ca:	f7ff fb41 	bl	800c750 <aci_gatt_add_char>

  /**
   *   Add Gesture Rec Characteristic for SW Service
   */
  COPY_SW_GESTURE_REC_CHAR_UUID(uuid16.Char_UUID_128);
  (void)aci_gatt_add_char(aMotenvContext.SWSvcHdle,
 800d0ce:	2210      	movs	r2, #16
  COPY_SW_GESTURE_REC_CHAR_UUID(uuid16.Char_UUID_128);
 800d0d0:	f04f 0802 	mov.w	r8, #2
  (void)aci_gatt_add_char(aMotenvContext.SWSvcHdle,
 800d0d4:	8920      	ldrh	r0, [r4, #8]
 800d0d6:	9504      	str	r5, [sp, #16]
 800d0d8:	f104 0312 	add.w	r3, r4, #18
 800d0dc:	e9cd a202 	strd	sl, r2, [sp, #8]
 800d0e0:	2212      	movs	r2, #18
 800d0e2:	9200      	str	r2, [sp, #0]
 800d0e4:	9305      	str	r3, [sp, #20]
 800d0e6:	aa06      	add	r2, sp, #24
 800d0e8:	4641      	mov	r1, r8
 800d0ea:	9501      	str	r5, [sp, #4]
 800d0ec:	2303      	movs	r3, #3
  COPY_SW_GESTURE_REC_CHAR_UUID(uuid16.Char_UUID_128);
 800d0ee:	e9cd 9808 	strd	r9, r8, [sp, #32]
 800d0f2:	e9cd 7b06 	strd	r7, fp, [sp, #24]
  (void)aci_gatt_add_char(aMotenvContext.SWSvcHdle,
 800d0f6:	f7ff fb2b 	bl	800c750 <aci_gatt_add_char>

  /**
   *   Add Pedometer Characteristic for SW Service
   */
  COPY_SW_PEDOMETER_CHAR_UUID(uuid16.Char_UUID_128);
  (void)aci_gatt_add_char(aMotenvContext.SWSvcHdle,
 800d0fa:	2310      	movs	r3, #16
 800d0fc:	8920      	ldrh	r0, [r4, #8]
 800d0fe:	9504      	str	r5, [sp, #16]
 800d100:	f104 0214 	add.w	r2, r4, #20
 800d104:	e9cd a302 	strd	sl, r3, [sp, #8]
 800d108:	2312      	movs	r3, #18
  COPY_SW_PEDOMETER_CHAR_UUID(uuid16.Char_UUID_128);
 800d10a:	f04f 0c01 	mov.w	ip, #1
  (void)aci_gatt_add_char(aMotenvContext.SWSvcHdle,
 800d10e:	9300      	str	r3, [sp, #0]
 800d110:	9205      	str	r2, [sp, #20]
 800d112:	4633      	mov	r3, r6
 800d114:	aa06      	add	r2, sp, #24
 800d116:	4641      	mov	r1, r8
 800d118:	9501      	str	r5, [sp, #4]
  COPY_SW_PEDOMETER_CHAR_UUID(uuid16.Char_UUID_128);
 800d11a:	4666      	mov	r6, ip
 800d11c:	f8cd 9020 	str.w	r9, [sp, #32]
 800d120:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800d124:	e9cd 7b06 	strd	r7, fp, [sp, #24]
  (void)aci_gatt_add_char(aMotenvContext.SWSvcHdle,
 800d128:	f7ff fb12 	bl	800c750 <aci_gatt_add_char>

  /**
   *   Add IntensityDet Characteristic for SW Service
   */
  COPY_SW_INTENSITY_DET_CHAR_UUID(uuid16.Char_UUID_128);
  (void)aci_gatt_add_char(aMotenvContext.SWSvcHdle,
 800d12c:	f104 0316 	add.w	r3, r4, #22
 800d130:	2210      	movs	r2, #16
 800d132:	8920      	ldrh	r0, [r4, #8]
 800d134:	9305      	str	r3, [sp, #20]
  COPY_SW_INTENSITY_DET_CHAR_UUID(uuid16.Char_UUID_128);
 800d136:	f04f 0c20 	mov.w	ip, #32
  (void)aci_gatt_add_char(aMotenvContext.SWSvcHdle,
 800d13a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800d13e:	e9cd 2500 	strd	r2, r5, [sp]
 800d142:	4641      	mov	r1, r8
 800d144:	aa06      	add	r2, sp, #24
 800d146:	9504      	str	r5, [sp, #16]
 800d148:	2303      	movs	r3, #3
  COPY_SW_INTENSITY_DET_CHAR_UUID(uuid16.Char_UUID_128);
 800d14a:	e9cd 9c08 	strd	r9, ip, [sp, #32]
 800d14e:	e9cd 7b06 	strd	r7, fp, [sp, #24]
  (void)aci_gatt_add_char(aMotenvContext.SWSvcHdle,
 800d152:	f7ff fafd 	bl	800c750 <aci_gatt_add_char>

  /**
   *   Add Config Service
   */
  COPY_CONFIG_SERVICE_UUID(uuid16.Char_UUID_128);
  (void)aci_gatt_add_service(UUID_TYPE_128,
 800d156:	f104 0318 	add.w	r3, r4, #24
 800d15a:	4632      	mov	r2, r6
  COPY_CONFIG_SERVICE_UUID(uuid16.Char_UUID_128);
 800d15c:	4e32      	ldr	r6, [pc, #200]	; (800d228 <MOTENV_STM_Init+0x2e4>)
  (void)aci_gatt_add_service(UUID_TYPE_128,
 800d15e:	9300      	str	r3, [sp, #0]
 800d160:	a906      	add	r1, sp, #24
 800d162:	4653      	mov	r3, sl
  COPY_CONFIG_SERVICE_UUID(uuid16.Char_UUID_128);
 800d164:	9607      	str	r6, [sp, #28]
  (void)aci_gatt_add_service(UUID_TYPE_128,
 800d166:	4640      	mov	r0, r8
  COPY_CONFIG_SERVICE_UUID(uuid16.Char_UUID_128);
 800d168:	4e32      	ldr	r6, [pc, #200]	; (800d234 <MOTENV_STM_Init+0x2f0>)
 800d16a:	9608      	str	r6, [sp, #32]
 800d16c:	9706      	str	r7, [sp, #24]
 800d16e:	9509      	str	r5, [sp, #36]	; 0x24
  (void)aci_gatt_add_service(UUID_TYPE_128,
 800d170:	f7ff fa92 	bl	800c698 <aci_gatt_add_service>

  /**
   *   Add Config Characteristic for Config Service
   */
  COPY_CONFIG_CHAR_UUID(uuid16.Char_UUID_128);
  (void)aci_gatt_add_char(aMotenvContext.ConfigSvcHdle,
 800d174:	f104 031a 	add.w	r3, r4, #26
 800d178:	8b20      	ldrh	r0, [r4, #24]
 800d17a:	9305      	str	r3, [sp, #20]
 800d17c:	f04f 0914 	mov.w	r9, #20
 800d180:	2210      	movs	r2, #16
 800d182:	2305      	movs	r3, #5
 800d184:	9203      	str	r2, [sp, #12]
 800d186:	4641      	mov	r1, r8
 800d188:	aa06      	add	r2, sp, #24
 800d18a:	9302      	str	r3, [sp, #8]
 800d18c:	9504      	str	r5, [sp, #16]
 800d18e:	464b      	mov	r3, r9
 800d190:	9501      	str	r5, [sp, #4]
 800d192:	f8cd 9000 	str.w	r9, [sp]
  COPY_CONFIG_CHAR_UUID(uuid16.Char_UUID_128);
 800d196:	e9cd 6808 	strd	r6, r8, [sp, #32]
 800d19a:	e9cd 7b06 	strd	r7, fp, [sp, #24]
                          &(aMotenvContext.ConfigCharHdle));

  /**
   *   Add Console Service
   */
  COPY_CONSOLE_SERVICE_UUID(uuid16.Char_UUID_128);
 800d19e:	4e22      	ldr	r6, [pc, #136]	; (800d228 <MOTENV_STM_Init+0x2e4>)
  (void)aci_gatt_add_char(aMotenvContext.ConfigSvcHdle,
 800d1a0:	f7ff fad6 	bl	800c750 <aci_gatt_add_char>
  (void)aci_gatt_add_service(UUID_TYPE_128,
 800d1a4:	f104 031c 	add.w	r3, r4, #28
 800d1a8:	9300      	str	r3, [sp, #0]
 800d1aa:	a906      	add	r1, sp, #24
  COPY_CONSOLE_SERVICE_UUID(uuid16.Char_UUID_128);
 800d1ac:	9607      	str	r6, [sp, #28]
  (void)aci_gatt_add_service(UUID_TYPE_128,
 800d1ae:	2201      	movs	r2, #1
  COPY_CONSOLE_SERVICE_UUID(uuid16.Char_UUID_128);
 800d1b0:	4e21      	ldr	r6, [pc, #132]	; (800d238 <MOTENV_STM_Init+0x2f4>)
 800d1b2:	9608      	str	r6, [sp, #32]
  (void)aci_gatt_add_service(UUID_TYPE_128,
 800d1b4:	4640      	mov	r0, r8
 800d1b6:	2307      	movs	r3, #7
  COPY_CONSOLE_SERVICE_UUID(uuid16.Char_UUID_128);
 800d1b8:	9706      	str	r7, [sp, #24]
 800d1ba:	9509      	str	r5, [sp, #36]	; 0x24
  (void)aci_gatt_add_service(UUID_TYPE_128,
 800d1bc:	f7ff fa6c 	bl	800c698 <aci_gatt_add_service>
                             &(aMotenvContext.ConsoleSvcHdle));
  /**
   *   Add Cosole Term Characteristic for Config Service
   */
  COPY_TERM_CHAR_UUID(uuid16.Char_UUID_128);
  (void)aci_gatt_add_char(aMotenvContext.ConsoleSvcHdle,
 800d1c0:	2305      	movs	r3, #5
 800d1c2:	8ba0      	ldrh	r0, [r4, #28]
 800d1c4:	9302      	str	r3, [sp, #8]
 800d1c6:	f04f 0c1e 	mov.w	ip, #30
 800d1ca:	f104 031e 	add.w	r3, r4, #30
 800d1ce:	2210      	movs	r2, #16
 800d1d0:	2101      	movs	r1, #1
 800d1d2:	e9cd 2103 	strd	r2, r1, [sp, #12]
 800d1d6:	9305      	str	r3, [sp, #20]
 800d1d8:	aa06      	add	r2, sp, #24
 800d1da:	464b      	mov	r3, r9
 800d1dc:	4641      	mov	r1, r8
 800d1de:	f8cd c000 	str.w	ip, [sp]
  COPY_TERM_CHAR_UUID(uuid16.Char_UUID_128);
 800d1e2:	9608      	str	r6, [sp, #32]
  (void)aci_gatt_add_char(aMotenvContext.ConsoleSvcHdle,
 800d1e4:	9501      	str	r5, [sp, #4]
  COPY_TERM_CHAR_UUID(uuid16.Char_UUID_128);
 800d1e6:	2601      	movs	r6, #1
 800d1e8:	9609      	str	r6, [sp, #36]	; 0x24
 800d1ea:	e9cd 7b06 	strd	r7, fp, [sp, #24]
                          &(aMotenvContext.ConsoleTermCharHdle));
  /**
   *   Add Console Stderr Characteristic for Config Service
   */
  COPY_STDERR_CHAR_UUID(uuid16.Char_UUID_128);
  (void)aci_gatt_add_char(aMotenvContext.ConsoleSvcHdle,
 800d1ee:	3420      	adds	r4, #32
  (void)aci_gatt_add_char(aMotenvContext.ConsoleSvcHdle,
 800d1f0:	f7ff faae 	bl	800c750 <aci_gatt_add_char>
  (void)aci_gatt_add_char(aMotenvContext.ConsoleSvcHdle,
 800d1f4:	f834 0c04 	ldrh.w	r0, [r4, #-4]
 800d1f8:	9604      	str	r6, [sp, #16]
 800d1fa:	2312      	movs	r3, #18
 800d1fc:	2210      	movs	r2, #16
  COPY_STDERR_CHAR_UUID(uuid16.Char_UUID_128);
 800d1fe:	4e0e      	ldr	r6, [pc, #56]	; (800d238 <MOTENV_STM_Init+0x2f4>)
  (void)aci_gatt_add_char(aMotenvContext.ConsoleSvcHdle,
 800d200:	9300      	str	r3, [sp, #0]
 800d202:	9203      	str	r2, [sp, #12]
 800d204:	464b      	mov	r3, r9
 800d206:	f8cd a008 	str.w	sl, [sp, #8]
 800d20a:	9501      	str	r5, [sp, #4]
 800d20c:	aa06      	add	r2, sp, #24
 800d20e:	4641      	mov	r1, r8
 800d210:	9405      	str	r4, [sp, #20]
  COPY_STDERR_CHAR_UUID(uuid16.Char_UUID_128);
 800d212:	e9cd 7b06 	strd	r7, fp, [sp, #24]
 800d216:	e9cd 6808 	strd	r6, r8, [sp, #32]
  (void)aci_gatt_add_char(aMotenvContext.ConsoleSvcHdle,
 800d21a:	f7ff fa99 	bl	800c750 <aci_gatt_add_char>
                          16, /* encryKeySize */
                          1, /* isVariable: 1 */
                          &(aMotenvContext.ConsoleStderrCharHdle));

  return;
} /* end MOTENV_STM_Init */
 800d21e:	b00b      	add	sp, #44	; 0x2c
 800d220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d224:	200017f8 	.word	0x200017f8
 800d228:	9ab40002 	.word	0x9ab40002
 800d22c:	0800cc3d 	.word	0x0800cc3d
 800d230:	a5d5c51b 	.word	0xa5d5c51b
 800d234:	000f11e1 	.word	0x000f11e1
 800d238:	000e11e1 	.word	0x000e11e1
 800d23c:	000111e1 	.word	0x000111e1
 800d240:	ac360002 	.word	0xac360002
 800d244:	000211e1 	.word	0x000211e1

0800d248 <MOTENV_STM_App_Update_Char>:
 * @param  payloadLen: Length of the char value to be notified
 * @param  pPayload: Char value to be notified
 * @retval BLE status
 */
tBleStatus MOTENV_STM_App_Update_Char(uint16_t UUID, uint8_t payloadLen, uint8_t *pPayload) 
{
 800d248:	b500      	push	{lr}
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
  switch(UUID)
 800d24a:	2840      	cmp	r0, #64	; 0x40
{
 800d24c:	b083      	sub	sp, #12
 800d24e:	460b      	mov	r3, r1
  switch(UUID)
 800d250:	d075      	beq.n	800d33e <MOTENV_STM_App_Update_Char+0xf6>
 800d252:	d90f      	bls.n	800d274 <MOTENV_STM_App_Update_Char+0x2c>
 800d254:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800d258:	d051      	beq.n	800d2fe <MOTENV_STM_App_Update_Char+0xb6>
 800d25a:	d936      	bls.n	800d2ca <MOTENV_STM_App_Update_Char+0x82>
 800d25c:	f5b0 5fe8 	cmp.w	r0, #7424	; 0x1d00
 800d260:	d019      	beq.n	800d296 <MOTENV_STM_App_Update_Char+0x4e>
 800d262:	f5b0 4f60 	cmp.w	r0, #57344	; 0xe000
 800d266:	d072      	beq.n	800d34e <MOTENV_STM_App_Update_Char+0x106>
 800d268:	f240 210e 	movw	r1, #526	; 0x20e
 800d26c:	4288      	cmp	r0, r1
 800d26e:	d024      	beq.n	800d2ba <MOTENV_STM_App_Update_Char+0x72>
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 800d270:	2042      	movs	r0, #66	; 0x42
 800d272:	e017      	b.n	800d2a4 <MOTENV_STM_App_Update_Char+0x5c>
  switch(UUID)
 800d274:	2804      	cmp	r0, #4
 800d276:	d05a      	beq.n	800d32e <MOTENV_STM_App_Update_Char+0xe6>
 800d278:	d935      	bls.n	800d2e6 <MOTENV_STM_App_Update_Char+0x9e>
 800d27a:	2810      	cmp	r0, #16
 800d27c:	d015      	beq.n	800d2aa <MOTENV_STM_App_Update_Char+0x62>
 800d27e:	2820      	cmp	r0, #32
 800d280:	d045      	beq.n	800d30e <MOTENV_STM_App_Update_Char+0xc6>
 800d282:	2808      	cmp	r0, #8
 800d284:	d1f4      	bne.n	800d270 <MOTENV_STM_App_Update_Char+0x28>
                                         pPayload);
     break;

    case CARRY_POSITION_CHAR_UUID:

     result = aci_gatt_update_char_value(aMotenvContext.SWSvcHdle,
 800d286:	483a      	ldr	r0, [pc, #232]	; (800d370 <MOTENV_STM_App_Update_Char+0x128>)
 800d288:	9200      	str	r2, [sp, #0]
 800d28a:	8a01      	ldrh	r1, [r0, #16]
 800d28c:	8900      	ldrh	r0, [r0, #8]
 800d28e:	2200      	movs	r2, #0
 800d290:	f7ff fad8 	bl	800c844 <aci_gatt_update_char_value>
                                         aMotenvContext.SWCarryPositionCharHdle,
                                         0, /* charValOffset */
                                         payloadLen, /* charValueLen */
                                         pPayload);
     break;
 800d294:	e006      	b.n	800d2a4 <MOTENV_STM_App_Update_Char+0x5c>
     result = aci_gatt_update_char_value(aMotenvContext.HWSvcHdle,
 800d296:	4836      	ldr	r0, [pc, #216]	; (800d370 <MOTENV_STM_App_Update_Char+0x128>)
 800d298:	9200      	str	r2, [sp, #0]
 800d29a:	8881      	ldrh	r1, [r0, #4]
 800d29c:	8800      	ldrh	r0, [r0, #0]
 800d29e:	2200      	movs	r2, #0
 800d2a0:	f7ff fad0 	bl	800c844 <aci_gatt_update_char_value>
    default:
      break;
  }

  return result;
}
 800d2a4:	b003      	add	sp, #12
 800d2a6:	f85d fb04 	ldr.w	pc, [sp], #4
     result = aci_gatt_update_char_value(aMotenvContext.SWSvcHdle,
 800d2aa:	4831      	ldr	r0, [pc, #196]	; (800d370 <MOTENV_STM_App_Update_Char+0x128>)
 800d2ac:	9200      	str	r2, [sp, #0]
 800d2ae:	89c1      	ldrh	r1, [r0, #14]
 800d2b0:	8900      	ldrh	r0, [r0, #8]
 800d2b2:	2200      	movs	r2, #0
 800d2b4:	f7ff fac6 	bl	800c844 <aci_gatt_update_char_value>
     break;
 800d2b8:	e7f4      	b.n	800d2a4 <MOTENV_STM_App_Update_Char+0x5c>
     result = aci_gatt_update_char_value(aMotenvContext.ConsoleSvcHdle,
 800d2ba:	482d      	ldr	r0, [pc, #180]	; (800d370 <MOTENV_STM_App_Update_Char+0x128>)
 800d2bc:	9200      	str	r2, [sp, #0]
 800d2be:	8c01      	ldrh	r1, [r0, #32]
 800d2c0:	8b80      	ldrh	r0, [r0, #28]
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	f7ff fabe 	bl	800c844 <aci_gatt_update_char_value>
     break;
 800d2c8:	e7ec      	b.n	800d2a4 <MOTENV_STM_App_Update_Char+0x5c>
  switch(UUID)
 800d2ca:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800d2ce:	d046      	beq.n	800d35e <MOTENV_STM_App_Update_Char+0x116>
 800d2d0:	f5b0 7f87 	cmp.w	r0, #270	; 0x10e
 800d2d4:	d1cc      	bne.n	800d270 <MOTENV_STM_App_Update_Char+0x28>
     result = aci_gatt_update_char_value(aMotenvContext.ConsoleSvcHdle,
 800d2d6:	4826      	ldr	r0, [pc, #152]	; (800d370 <MOTENV_STM_App_Update_Char+0x128>)
 800d2d8:	9200      	str	r2, [sp, #0]
 800d2da:	8bc1      	ldrh	r1, [r0, #30]
 800d2dc:	8b80      	ldrh	r0, [r0, #28]
 800d2de:	2200      	movs	r2, #0
 800d2e0:	f7ff fab0 	bl	800c844 <aci_gatt_update_char_value>
     break;
 800d2e4:	e7de      	b.n	800d2a4 <MOTENV_STM_App_Update_Char+0x5c>
  switch(UUID)
 800d2e6:	2801      	cmp	r0, #1
 800d2e8:	d019      	beq.n	800d31e <MOTENV_STM_App_Update_Char+0xd6>
 800d2ea:	2802      	cmp	r0, #2
 800d2ec:	d1c0      	bne.n	800d270 <MOTENV_STM_App_Update_Char+0x28>
     result = aci_gatt_update_char_value(aMotenvContext.ConfigSvcHdle,
 800d2ee:	4820      	ldr	r0, [pc, #128]	; (800d370 <MOTENV_STM_App_Update_Char+0x128>)
 800d2f0:	9200      	str	r2, [sp, #0]
 800d2f2:	8b41      	ldrh	r1, [r0, #26]
 800d2f4:	8b00      	ldrh	r0, [r0, #24]
 800d2f6:	2200      	movs	r2, #0
 800d2f8:	f7ff faa4 	bl	800c844 <aci_gatt_update_char_value>
     break;
 800d2fc:	e7d2      	b.n	800d2a4 <MOTENV_STM_App_Update_Char+0x5c>
     result = aci_gatt_update_char_value(aMotenvContext.SWSvcHdle,
 800d2fe:	481c      	ldr	r0, [pc, #112]	; (800d370 <MOTENV_STM_App_Update_Char+0x128>)
 800d300:	9200      	str	r2, [sp, #0]
 800d302:	8a41      	ldrh	r1, [r0, #18]
 800d304:	8900      	ldrh	r0, [r0, #8]
 800d306:	2200      	movs	r2, #0
 800d308:	f7ff fa9c 	bl	800c844 <aci_gatt_update_char_value>
     break;
 800d30c:	e7ca      	b.n	800d2a4 <MOTENV_STM_App_Update_Char+0x5c>
     result = aci_gatt_update_char_value(aMotenvContext.SWSvcHdle,
 800d30e:	4818      	ldr	r0, [pc, #96]	; (800d370 <MOTENV_STM_App_Update_Char+0x128>)
 800d310:	9200      	str	r2, [sp, #0]
 800d312:	8ac1      	ldrh	r1, [r0, #22]
 800d314:	8900      	ldrh	r0, [r0, #8]
 800d316:	2200      	movs	r2, #0
 800d318:	f7ff fa94 	bl	800c844 <aci_gatt_update_char_value>
     break;
 800d31c:	e7c2      	b.n	800d2a4 <MOTENV_STM_App_Update_Char+0x5c>
     result = aci_gatt_update_char_value(aMotenvContext.SWSvcHdle,
 800d31e:	4814      	ldr	r0, [pc, #80]	; (800d370 <MOTENV_STM_App_Update_Char+0x128>)
 800d320:	9200      	str	r2, [sp, #0]
 800d322:	8a81      	ldrh	r1, [r0, #20]
 800d324:	8900      	ldrh	r0, [r0, #8]
 800d326:	2200      	movs	r2, #0
 800d328:	f7ff fa8c 	bl	800c844 <aci_gatt_update_char_value>
     break;
 800d32c:	e7ba      	b.n	800d2a4 <MOTENV_STM_App_Update_Char+0x5c>
     result = aci_gatt_update_char_value(aMotenvContext.HWSvcHdle,
 800d32e:	4810      	ldr	r0, [pc, #64]	; (800d370 <MOTENV_STM_App_Update_Char+0x128>)
 800d330:	9200      	str	r2, [sp, #0]
 800d332:	88c1      	ldrh	r1, [r0, #6]
 800d334:	8800      	ldrh	r0, [r0, #0]
 800d336:	2200      	movs	r2, #0
 800d338:	f7ff fa84 	bl	800c844 <aci_gatt_update_char_value>
      break;
 800d33c:	e7b2      	b.n	800d2a4 <MOTENV_STM_App_Update_Char+0x5c>
     result = aci_gatt_update_char_value(aMotenvContext.SWSvcHdle,
 800d33e:	480c      	ldr	r0, [pc, #48]	; (800d370 <MOTENV_STM_App_Update_Char+0x128>)
 800d340:	9200      	str	r2, [sp, #0]
 800d342:	8981      	ldrh	r1, [r0, #12]
 800d344:	8900      	ldrh	r0, [r0, #8]
 800d346:	2200      	movs	r2, #0
 800d348:	f7ff fa7c 	bl	800c844 <aci_gatt_update_char_value>
     break;
 800d34c:	e7aa      	b.n	800d2a4 <MOTENV_STM_App_Update_Char+0x5c>
     result = aci_gatt_update_char_value(aMotenvContext.HWSvcHdle,
 800d34e:	4808      	ldr	r0, [pc, #32]	; (800d370 <MOTENV_STM_App_Update_Char+0x128>)
 800d350:	9200      	str	r2, [sp, #0]
 800d352:	8841      	ldrh	r1, [r0, #2]
 800d354:	8800      	ldrh	r0, [r0, #0]
 800d356:	2200      	movs	r2, #0
 800d358:	f7ff fa74 	bl	800c844 <aci_gatt_update_char_value>
      break;
 800d35c:	e7a2      	b.n	800d2a4 <MOTENV_STM_App_Update_Char+0x5c>
     result = aci_gatt_update_char_value(aMotenvContext.SWSvcHdle,
 800d35e:	4804      	ldr	r0, [pc, #16]	; (800d370 <MOTENV_STM_App_Update_Char+0x128>)
 800d360:	9200      	str	r2, [sp, #0]
 800d362:	8941      	ldrh	r1, [r0, #10]
 800d364:	8900      	ldrh	r0, [r0, #8]
 800d366:	2200      	movs	r2, #0
 800d368:	f7ff fa6c 	bl	800c844 <aci_gatt_update_char_value>
     break;
 800d36c:	e79a      	b.n	800d2a4 <MOTENV_STM_App_Update_Char+0x5c>
 800d36e:	bf00      	nop
 800d370:	200017f8 	.word	0x200017f8

0800d374 <Osal_MemCpy>:
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
  return memcpy( dest, src, size ); 
 800d374:	f015 ba6c 	b.w	8022850 <memcpy>

0800d378 <Osal_MemSet>:
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
  return memset( ptr, value, size );
 800d378:	f015 ba8e 	b.w	8022898 <memset>

0800d37c <OTP_Read>:
{
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800d37c:	4b08      	ldr	r3, [pc, #32]	; (800d3a0 <OTP_Read+0x24>)
 800d37e:	79da      	ldrb	r2, [r3, #7]
 800d380:	4282      	cmp	r2, r0
 800d382:	d007      	beq.n	800d394 <OTP_Read+0x18>
 800d384:	4907      	ldr	r1, [pc, #28]	; (800d3a4 <OTP_Read+0x28>)
 800d386:	e001      	b.n	800d38c <OTP_Read+0x10>
 800d388:	428b      	cmp	r3, r1
 800d38a:	d005      	beq.n	800d398 <OTP_Read+0x1c>
  {
    p_id -= 8 ;
 800d38c:	3b08      	subs	r3, #8
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800d38e:	79da      	ldrb	r2, [r3, #7]
 800d390:	4282      	cmp	r2, r0
 800d392:	d1f9      	bne.n	800d388 <OTP_Read+0xc>
  {
    p_id = 0 ;
  }

  return p_id ;
}
 800d394:	4618      	mov	r0, r3
 800d396:	4770      	bx	lr
    p_id = 0 ;
 800d398:	2300      	movs	r3, #0
}
 800d39a:	4618      	mov	r0, r3
 800d39c:	4770      	bx	lr
 800d39e:	bf00      	nop
 800d3a0:	1fff73f8 	.word	0x1fff73f8
 800d3a4:	1fff7000 	.word	0x1fff7000

0800d3a8 <PeerToPeer_Event_Handler>:
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);

  switch(event_pckt->evt)
 800d3a8:	7843      	ldrb	r3, [r0, #1]
 800d3aa:	2bff      	cmp	r3, #255	; 0xff
 800d3ac:	d115      	bne.n	800d3da <PeerToPeer_Event_Handler+0x32>
  {
    case EVT_VENDOR:
    {
      blue_evt = (evt_blue_aci*)event_pckt->data;
      switch(blue_evt->ecode)
 800d3ae:	f8b0 2003 	ldrh.w	r2, [r0, #3]
 800d3b2:	f640 4301 	movw	r3, #3073	; 0xc01
 800d3b6:	429a      	cmp	r2, r3
 800d3b8:	d10f      	bne.n	800d3da <PeerToPeer_Event_Handler+0x32>
{
 800d3ba:	b510      	push	{r4, lr}
      {
        case EVT_BLUE_GATT_ATTRIBUTE_MODIFIED:
       {
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blue_evt->data;
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 800d3bc:	4918      	ldr	r1, [pc, #96]	; (800d420 <PeerToPeer_Event_Handler+0x78>)
 800d3be:	f8b0 2007 	ldrh.w	r2, [r0, #7]
 800d3c2:	888b      	ldrh	r3, [r1, #4]
 800d3c4:	3302      	adds	r3, #2
 800d3c6:	429a      	cmp	r2, r3
{
 800d3c8:	b084      	sub	sp, #16
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 800d3ca:	d008      	beq.n	800d3de <PeerToPeer_Event_Handler+0x36>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
                P2PS_STM_App_Notification(&Notification);
              }
            }
            
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 800d3cc:	884b      	ldrh	r3, [r1, #2]
 800d3ce:	3301      	adds	r3, #1
 800d3d0:	429a      	cmp	r2, r3
 800d3d2:	d016      	beq.n	800d402 <PeerToPeer_Event_Handler+0x5a>
  return_value = SVCCTL_EvtNotAck;
 800d3d4:	2000      	movs	r0, #0
    default:
      break;
  }

  return(return_value);
}/* end SVCCTL_EvtAckStatus_t */
 800d3d6:	b004      	add	sp, #16
 800d3d8:	bd10      	pop	{r4, pc}
  return_value = SVCCTL_EvtNotAck;
 800d3da:	2000      	movs	r0, #0
}/* end SVCCTL_EvtAckStatus_t */
 800d3dc:	4770      	bx	lr
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800d3de:	7b43      	ldrb	r3, [r0, #13]
 800d3e0:	07db      	lsls	r3, r3, #31
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 800d3e2:	a804      	add	r0, sp, #16
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800d3e4:	d506      	bpl.n	800d3f4 <PeerToPeer_Event_Handler+0x4c>
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	f800 3d10 	strb.w	r3, [r0, #-16]!
                P2PS_STM_App_Notification(&Notification);
 800d3ec:	f7f7 f9c6 	bl	800477c <P2PS_STM_App_Notification>
              return_value = SVCCTL_EvtAckFlowEnable;
 800d3f0:	2001      	movs	r0, #1
 800d3f2:	e7f0      	b.n	800d3d6 <PeerToPeer_Event_Handler+0x2e>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 800d3f4:	2401      	movs	r4, #1
 800d3f6:	f800 4d10 	strb.w	r4, [r0, #-16]!
                P2PS_STM_App_Notification(&Notification);
 800d3fa:	f7f7 f9bf 	bl	800477c <P2PS_STM_App_Notification>
              return_value = SVCCTL_EvtAckFlowEnable;
 800d3fe:	4620      	mov	r0, r4
 800d400:	e7e9      	b.n	800d3d6 <PeerToPeer_Event_Handler+0x2e>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 800d402:	2303      	movs	r3, #3
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800d404:	f8b0 200b 	ldrh.w	r2, [r0, #11]
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 800d408:	f88d 3000 	strb.w	r3, [sp]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800d40c:	f100 030d 	add.w	r3, r0, #13
              P2PS_STM_App_Notification(&Notification);  
 800d410:	4668      	mov	r0, sp
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800d412:	f88d 2008 	strb.w	r2, [sp, #8]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800d416:	9301      	str	r3, [sp, #4]
              P2PS_STM_App_Notification(&Notification);  
 800d418:	f7f7 f9b0 	bl	800477c <P2PS_STM_App_Notification>
 800d41c:	2000      	movs	r0, #0
 800d41e:	e7da      	b.n	800d3d6 <PeerToPeer_Event_Handler+0x2e>
 800d420:	2000181c 	.word	0x2000181c

0800d424 <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 800d424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 800d428:	4826      	ldr	r0, [pc, #152]	; (800d4c4 <P2PS_STM_Init+0xa0>)
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
    aci_gatt_add_service(UUID_TYPE_128,
 800d42a:	4c27      	ldr	r4, [pc, #156]	; (800d4c8 <P2PS_STM_Init+0xa4>)
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 800d42c:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 800d4d8 <P2PS_STM_Init+0xb4>
 800d430:	4f26      	ldr	r7, [pc, #152]	; (800d4cc <P2PS_STM_Init+0xa8>)
 800d432:	4e27      	ldr	r6, [pc, #156]	; (800d4d0 <P2PS_STM_Init+0xac>)
{
 800d434:	b08a      	sub	sp, #40	; 0x28
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 800d436:	f000 f9a5 	bl	800d784 <SVCCTL_RegisterSvcHandler>
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 800d43a:	f8df e0a0 	ldr.w	lr, [pc, #160]	; 800d4dc <P2PS_STM_Init+0xb8>
 800d43e:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 800d4e0 <P2PS_STM_Init+0xbc>
 800d442:	4b24      	ldr	r3, [pc, #144]	; (800d4d4 <P2PS_STM_Init+0xb0>)
    aci_gatt_add_service(UUID_TYPE_128,
 800d444:	9400      	str	r4, [sp, #0]
 800d446:	a906      	add	r1, sp, #24
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 800d448:	9306      	str	r3, [sp, #24]
 800d44a:	f64f 6540 	movw	r5, #65088	; 0xfe40
    aci_gatt_add_service(UUID_TYPE_128,
 800d44e:	2308      	movs	r3, #8
 800d450:	2201      	movs	r2, #1
 800d452:	2002      	movs	r0, #2
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 800d454:	e9cd ec07 	strd	lr, ip, [sp, #28]
 800d458:	9509      	str	r5, [sp, #36]	; 0x24
    aci_gatt_add_service(UUID_TYPE_128,
 800d45a:	f7ff f91d 	bl	800c698 <aci_gatt_add_service>
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800d45e:	4623      	mov	r3, r4
 800d460:	2501      	movs	r5, #1
 800d462:	f833 0b02 	ldrh.w	r0, [r3], #2
 800d466:	9305      	str	r3, [sp, #20]
 800d468:	f04f 0a0a 	mov.w	sl, #10
 800d46c:	f04f 0900 	mov.w	r9, #0
 800d470:	2302      	movs	r3, #2
 800d472:	2106      	movs	r1, #6
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 800d474:	f64f 6c41 	movw	ip, #65089	; 0xfe41
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800d478:	aa06      	add	r2, sp, #24
 800d47a:	e9cd 1900 	strd	r1, r9, [sp]
 800d47e:	9504      	str	r5, [sp, #16]
 800d480:	4619      	mov	r1, r3
 800d482:	e9cd 5a02 	strd	r5, sl, [sp, #8]
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 800d486:	e9cd 6c08 	strd	r6, ip, [sp, #32]
 800d48a:	e9cd 8706 	strd	r8, r7, [sp, #24]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800d48e:	f7ff f95f 	bl	800c750 <aci_gatt_add_char>

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800d492:	f834 0b04 	ldrh.w	r0, [r4], #4
 800d496:	9405      	str	r4, [sp, #20]
 800d498:	2302      	movs	r3, #2
 800d49a:	2110      	movs	r1, #16
 800d49c:	9100      	str	r1, [sp, #0]
 800d49e:	9504      	str	r5, [sp, #16]
 800d4a0:	e9cd 5a02 	strd	r5, sl, [sp, #8]
 800d4a4:	f8cd 9004 	str.w	r9, [sp, #4]
 800d4a8:	aa06      	add	r2, sp, #24
 800d4aa:	4619      	mov	r1, r3
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 800d4ac:	f64f 6442 	movw	r4, #65090	; 0xfe42
 800d4b0:	e9cd 8706 	strd	r8, r7, [sp, #24]
 800d4b4:	e9cd 6408 	strd	r6, r4, [sp, #32]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800d4b8:	f7ff f94a 	bl	800c750 <aci_gatt_add_char>
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif    

    
  return;
}
 800d4bc:	b00a      	add	sp, #40	; 0x28
 800d4be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4c2:	bf00      	nop
 800d4c4:	0800d3a9 	.word	0x0800d3a9
 800d4c8:	2000181c 	.word	0x2000181c
 800d4cc:	9d4c21ed 	.word	0x9d4c21ed
 800d4d0:	8e224541 	.word	0x8e224541
 800d4d4:	d5b3e58f 	.word	0xd5b3e58f
 800d4d8:	ae82ed19 	.word	0xae82ed19
 800d4dc:	984a7f2e 	.word	0x984a7f2e
 800d4e0:	cc7a482a 	.word	0xcc7a482a

0800d4e4 <P2PS_STM_App_Update_Char>:
 * 
 */
tBleStatus P2PS_STM_App_Update_Char(uint16_t UUID, uint8_t *pPayload) 
{
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
  switch(UUID)
 800d4e4:	f64f 6342 	movw	r3, #65090	; 0xfe42
 800d4e8:	4298      	cmp	r0, r3
 800d4ea:	d10c      	bne.n	800d506 <P2PS_STM_App_Update_Char+0x22>
{
 800d4ec:	b500      	push	{lr}
 800d4ee:	b083      	sub	sp, #12
  {
    case P2P_NOTIFY_CHAR_UUID:
      
     result = aci_gatt_update_char_value(aPeerToPeerContext.PeerToPeerSvcHdle,
 800d4f0:	4b06      	ldr	r3, [pc, #24]	; (800d50c <P2PS_STM_App_Update_Char+0x28>)
 800d4f2:	9100      	str	r1, [sp, #0]
 800d4f4:	8899      	ldrh	r1, [r3, #4]
 800d4f6:	8818      	ldrh	r0, [r3, #0]
 800d4f8:	2200      	movs	r2, #0
 800d4fa:	2302      	movs	r3, #2
 800d4fc:	f7ff f9a2 	bl	800c844 <aci_gatt_update_char_value>
    default:
      break;
  }

  return result;
}/* end P2PS_STM_Init() */
 800d500:	b003      	add	sp, #12
 800d502:	f85d fb04 	ldr.w	pc, [sp], #4
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 800d506:	2042      	movs	r0, #66	; 0x42
}/* end P2PS_STM_Init() */
 800d508:	4770      	bx	lr
 800d50a:	bf00      	nop
 800d50c:	2000181c 	.word	0x2000181c

0800d510 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800d510:	b500      	push	{lr}
 800d512:	b085      	sub	sp, #20
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800d514:	f100 020c 	add.w	r2, r0, #12
 800d518:	466b      	mov	r3, sp
 800d51a:	2121      	movs	r1, #33	; 0x21
 800d51c:	f64f 4066 	movw	r0, #64614	; 0xfc66
 800d520:	f000 f872 	bl	800d608 <shci_send>
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}
 800d524:	f89d 000e 	ldrb.w	r0, [sp, #14]
 800d528:	b005      	add	sp, #20
 800d52a:	f85d fb04 	ldr.w	pc, [sp], #4
 800d52e:	bf00      	nop

0800d530 <TlUserEvtReceived>:

  return;
}

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800d530:	b510      	push	{r4, lr}
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800d532:	4c05      	ldr	r4, [pc, #20]	; (800d548 <TlUserEvtReceived+0x18>)
 800d534:	4601      	mov	r1, r0
 800d536:	4620      	mov	r0, r4
 800d538:	f000 f8c0 	bl	800d6bc <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800d53c:	4620      	mov	r0, r4

  return;
}
 800d53e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800d542:	f7f3 bbcb 	b.w	8000cdc <shci_notify_asynch_evt>
 800d546:	bf00      	nop
 800d548:	20001848 	.word	0x20001848

0800d54c <TlCmdEvtReceived>:
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800d54c:	2000      	movs	r0, #0
 800d54e:	f7f3 bbcb 	b.w	8000ce8 <shci_cmd_resp_release>
 800d552:	bf00      	nop

0800d554 <shci_init>:
{
 800d554:	b570      	push	{r4, r5, r6, lr}
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800d556:	4c10      	ldr	r4, [pc, #64]	; (800d598 <shci_init+0x44>)
  pCmdBuffer = p_cmdbuffer;
 800d558:	4d10      	ldr	r5, [pc, #64]	; (800d59c <shci_init+0x48>)
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800d55a:	684b      	ldr	r3, [r1, #4]
  shciContext.UserEvtRx = UserEvtRx;
 800d55c:	6220      	str	r0, [r4, #32]
{
 800d55e:	460e      	mov	r6, r1
 800d560:	b084      	sub	sp, #16
  shci_register_io_bus (&shciContext.io);
 800d562:	1d20      	adds	r0, r4, #4
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800d564:	6023      	str	r3, [r4, #0]
  shci_register_io_bus (&shciContext.io);
 800d566:	f000 f883 	bl	800d670 <shci_register_io_bus>
  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800d56a:	6836      	ldr	r6, [r6, #0]
  pCmdBuffer = p_cmdbuffer;
 800d56c:	60ae      	str	r6, [r5, #8]
  LST_init_head (&SHciAsynchEventQueue);
 800d56e:	4628      	mov	r0, r5
 800d570:	f000 f888 	bl	800d684 <LST_init_head>
    if(StatusNotCallBackFunction != 0)
 800d574:	6823      	ldr	r3, [r4, #0]
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800d576:	2001      	movs	r0, #1
 800d578:	7328      	strb	r0, [r5, #12]
    if(StatusNotCallBackFunction != 0)
 800d57a:	b103      	cbz	r3, 800d57e <shci_init+0x2a>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800d57c:	4798      	blx	r3
  if (shciContext.io.Init)
 800d57e:	6863      	ldr	r3, [r4, #4]
  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800d580:	2201      	movs	r2, #1
 800d582:	736a      	strb	r2, [r5, #13]
  if (shciContext.io.Init)
 800d584:	b133      	cbz	r3, 800d594 <shci_init+0x40>
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800d586:	4906      	ldr	r1, [pc, #24]	; (800d5a0 <shci_init+0x4c>)
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800d588:	4a06      	ldr	r2, [pc, #24]	; (800d5a4 <shci_init+0x50>)
    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800d58a:	9603      	str	r6, [sp, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800d58c:	e9cd 1201 	strd	r1, r2, [sp, #4]
    shciContext.io.Init(&Conf);
 800d590:	a801      	add	r0, sp, #4
 800d592:	4798      	blx	r3
}
 800d594:	b004      	add	sp, #16
 800d596:	bd70      	pop	{r4, r5, r6, pc}
 800d598:	20001adc 	.word	0x20001adc
 800d59c:	20001848 	.word	0x20001848
 800d5a0:	0800d54d 	.word	0x0800d54d
 800d5a4:	0800d531 	.word	0x0800d531

0800d5a8 <shci_user_evt_proc>:
{
 800d5a8:	b570      	push	{r4, r5, r6, lr}
 800d5aa:	4d15      	ldr	r5, [pc, #84]	; (800d600 <shci_user_evt_proc+0x58>)
    if (shciContext.UserEvtRx != NULL)
 800d5ac:	4e15      	ldr	r6, [pc, #84]	; (800d604 <shci_user_evt_proc+0x5c>)
{
 800d5ae:	b084      	sub	sp, #16
  while((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800d5b0:	462c      	mov	r4, r5
 800d5b2:	4620      	mov	r0, r4
 800d5b4:	f000 f86a 	bl	800d68c <LST_is_empty>
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800d5b8:	a901      	add	r1, sp, #4
  while((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800d5ba:	b9d0      	cbnz	r0, 800d5f2 <shci_user_evt_proc+0x4a>
 800d5bc:	7b6b      	ldrb	r3, [r5, #13]
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800d5be:	4620      	mov	r0, r4
  while((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800d5c0:	b1bb      	cbz	r3, 800d5f2 <shci_user_evt_proc+0x4a>
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800d5c2:	f000 f887 	bl	800d6d4 <LST_remove_head>
    if (shciContext.UserEvtRx != NULL)
 800d5c6:	6a33      	ldr	r3, [r6, #32]
    SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800d5c8:	2201      	movs	r2, #1
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800d5ca:	a802      	add	r0, sp, #8
    SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800d5cc:	736a      	strb	r2, [r5, #13]
    if (shciContext.UserEvtRx != NULL)
 800d5ce:	b193      	cbz	r3, 800d5f6 <shci_user_evt_proc+0x4e>
      UserEvtRxParam.pckt = phcievtbuffer;
 800d5d0:	9a01      	ldr	r2, [sp, #4]
 800d5d2:	9203      	str	r2, [sp, #12]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800d5d4:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800d5d6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800d5da:	736b      	strb	r3, [r5, #13]
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800d5dc:	4620      	mov	r0, r4
    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800d5de:	b953      	cbnz	r3, 800d5f6 <shci_user_evt_proc+0x4e>
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800d5e0:	9901      	ldr	r1, [sp, #4]
 800d5e2:	f000 f85f 	bl	800d6a4 <LST_insert_head>
  while((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800d5e6:	4620      	mov	r0, r4
 800d5e8:	f000 f850 	bl	800d68c <LST_is_empty>
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800d5ec:	a901      	add	r1, sp, #4
  while((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800d5ee:	2800      	cmp	r0, #0
 800d5f0:	d0e4      	beq.n	800d5bc <shci_user_evt_proc+0x14>
}
 800d5f2:	b004      	add	sp, #16
 800d5f4:	bd70      	pop	{r4, r5, r6, pc}
      TL_MM_EvtDone( phcievtbuffer );
 800d5f6:	9801      	ldr	r0, [sp, #4]
 800d5f8:	f000 f9e4 	bl	800d9c4 <TL_MM_EvtDone>
 800d5fc:	e7d9      	b.n	800d5b2 <shci_user_evt_proc+0xa>
 800d5fe:	bf00      	nop
 800d600:	20001848 	.word	0x20001848
 800d604:	20001adc 	.word	0x20001adc

0800d608 <shci_send>:
{
 800d608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if(StatusNotCallBackFunction != 0)
 800d60c:	4d16      	ldr	r5, [pc, #88]	; (800d668 <shci_send+0x60>)
 800d60e:	682c      	ldr	r4, [r5, #0]
{
 800d610:	4680      	mov	r8, r0
 800d612:	460e      	mov	r6, r1
 800d614:	4691      	mov	r9, r2
 800d616:	461f      	mov	r7, r3
    if(StatusNotCallBackFunction != 0)
 800d618:	b10c      	cbz	r4, 800d61e <shci_send+0x16>
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800d61a:	2000      	movs	r0, #0
 800d61c:	47a0      	blx	r4
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800d61e:	4c13      	ldr	r4, [pc, #76]	; (800d66c <shci_send+0x64>)
  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800d620:	68a0      	ldr	r0, [r4, #8]
  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800d622:	4632      	mov	r2, r6
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800d624:	72c6      	strb	r6, [r0, #11]
  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800d626:	4649      	mov	r1, r9
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800d628:	2600      	movs	r6, #0
  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800d62a:	f8a0 8009 	strh.w	r8, [r0, #9]
  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800d62e:	300c      	adds	r0, #12
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800d630:	7326      	strb	r6, [r4, #12]
  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800d632:	f015 f90d 	bl	8022850 <memcpy>
  shciContext.io.Send(0,0);
 800d636:	696b      	ldr	r3, [r5, #20]
 800d638:	4631      	mov	r1, r6
 800d63a:	4630      	mov	r0, r6
 800d63c:	4798      	blx	r3
  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800d63e:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800d642:	f7f3 fb55 	bl	8000cf0 <shci_cmd_resp_wait>
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800d646:	68a1      	ldr	r1, [r4, #8]
 800d648:	788a      	ldrb	r2, [r1, #2]
 800d64a:	f107 0008 	add.w	r0, r7, #8
 800d64e:	3203      	adds	r2, #3
 800d650:	f015 f8fe 	bl	8022850 <memcpy>
    if(StatusNotCallBackFunction != 0)
 800d654:	682b      	ldr	r3, [r5, #0]
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800d656:	2001      	movs	r0, #1
 800d658:	7320      	strb	r0, [r4, #12]
    if(StatusNotCallBackFunction != 0)
 800d65a:	b113      	cbz	r3, 800d662 <shci_send+0x5a>
}
 800d65c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800d660:	4718      	bx	r3
}
 800d662:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d666:	bf00      	nop
 800d668:	20001adc 	.word	0x20001adc
 800d66c:	20001848 	.word	0x20001848

0800d670 <shci_register_io_bus>:


void shci_register_io_bus(tSHciIO* fops)
{
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800d670:	4a02      	ldr	r2, [pc, #8]	; (800d67c <shci_register_io_bus+0xc>)
  fops->Send    = TL_SYS_SendCmd;
 800d672:	4b03      	ldr	r3, [pc, #12]	; (800d680 <shci_register_io_bus+0x10>)
  fops->Init    = TL_SYS_Init;
 800d674:	6002      	str	r2, [r0, #0]
  fops->Send    = TL_SYS_SendCmd;
 800d676:	6103      	str	r3, [r0, #16]

  return;
}
 800d678:	4770      	bx	lr
 800d67a:	bf00      	nop
 800d67c:	0800d8f5 	.word	0x0800d8f5
 800d680:	0800d929 	.word	0x0800d929

0800d684 <LST_init_head>:
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
  listHead->next = listHead;
  listHead->prev = listHead;
 800d684:	e9c0 0000 	strd	r0, r0, [r0]
}
 800d688:	4770      	bx	lr
 800d68a:	bf00      	nop

0800d68c <LST_is_empty>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d68c:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800d690:	b672      	cpsid	i
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800d692:	6803      	ldr	r3, [r0, #0]
  {
    return_value = TRUE;
 800d694:	1a18      	subs	r0, r3, r0
 800d696:	fab0 f080 	clz	r0, r0
 800d69a:	0940      	lsrs	r0, r0, #5
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d69c:	f382 8810 	msr	PRIMASK, r2
    return_value = FALSE;
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
}
 800d6a0:	4770      	bx	lr
 800d6a2:	bf00      	nop

0800d6a4 <LST_insert_head>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d6a4:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800d6a8:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800d6aa:	6802      	ldr	r2, [r0, #0]
  node->prev = listHead;
 800d6ac:	e9c1 2000 	strd	r2, r0, [r1]
  listHead->next = node;
 800d6b0:	6001      	str	r1, [r0, #0]
  (node->next)->prev = node;
 800d6b2:	680a      	ldr	r2, [r1, #0]
 800d6b4:	6051      	str	r1, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d6b6:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800d6ba:	4770      	bx	lr

0800d6bc <LST_insert_tail>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d6bc:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800d6c0:	b672      	cpsid	i

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
  node->prev = listHead->prev;
 800d6c2:	6842      	ldr	r2, [r0, #4]
 800d6c4:	e9c1 0200 	strd	r0, r2, [r1]
  listHead->prev = node;
 800d6c8:	6041      	str	r1, [r0, #4]
  (node->prev)->next = node;
 800d6ca:	684a      	ldr	r2, [r1, #4]
 800d6cc:	6011      	str	r1, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d6ce:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800d6d2:	4770      	bx	lr

0800d6d4 <LST_remove_head>:
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800d6d4:	b410      	push	{r4}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d6d6:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800d6da:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800d6dc:	6803      	ldr	r3, [r0, #0]
 800d6de:	600b      	str	r3, [r1, #0]
  LST_remove_node (listHead->next);
 800d6e0:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d6e2:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800d6e6:	b672      	cpsid	i
  (node->prev)->next = node->next;
 800d6e8:	e9d3 0200 	ldrd	r0, r2, [r3]
 800d6ec:	6010      	str	r0, [r2, #0]
  (node->next)->prev = node->prev;
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d6f2:	f381 8810 	msr	PRIMASK, r1
 800d6f6:	f384 8810 	msr	PRIMASK, r4

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800d6fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d6fe:	4770      	bx	lr

0800d700 <BLS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
__weak void BLS_Init( void )
{
  return;
}
 800d700:	4770      	bx	lr
 800d702:	bf00      	nop

0800d704 <CRS_STM_Init>:
 800d704:	4770      	bx	lr
 800d706:	bf00      	nop

0800d708 <DIS_Init>:
 800d708:	4770      	bx	lr
 800d70a:	bf00      	nop

0800d70c <EDS_STM_Init>:
 800d70c:	4770      	bx	lr
 800d70e:	bf00      	nop

0800d710 <HIDS_Init>:
 800d710:	4770      	bx	lr
 800d712:	bf00      	nop

0800d714 <HRS_Init>:
 800d714:	4770      	bx	lr
 800d716:	bf00      	nop

0800d718 <HTS_Init>:
 800d718:	4770      	bx	lr
 800d71a:	bf00      	nop

0800d71c <IAS_Init>:
 800d71c:	4770      	bx	lr
 800d71e:	bf00      	nop

0800d720 <LLS_Init>:
 800d720:	4770      	bx	lr
 800d722:	bf00      	nop

0800d724 <TPS_Init>:
 800d724:	4770      	bx	lr
 800d726:	bf00      	nop

0800d728 <OTAS_STM_Init>:
 800d728:	4770      	bx	lr
 800d72a:	bf00      	nop

0800d72c <MESH_Init>:
 800d72c:	4770      	bx	lr
 800d72e:	bf00      	nop

0800d730 <SVCCTL_InitCustomSvc>:
 800d730:	4770      	bx	lr
 800d732:	bf00      	nop

0800d734 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800d734:	b508      	push	{r3, lr}
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800d736:	4b12      	ldr	r3, [pc, #72]	; (800d780 <SVCCTL_Init+0x4c>)
 800d738:	2200      	movs	r2, #0
 800d73a:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800d73c:	f883 2020 	strb.w	r2, [r3, #32]

  /**
   * Add and Initialize requested services
   */

  BLS_Init();
 800d740:	f7ff ffde 	bl	800d700 <BLS_Init>

  CRS_STM_Init();
 800d744:	f7ff ffde 	bl	800d704 <CRS_STM_Init>

  DIS_Init();
 800d748:	f7ff ffde 	bl	800d708 <DIS_Init>

  EDS_STM_Init();
 800d74c:	f7ff ffde 	bl	800d70c <EDS_STM_Init>

  HIDS_Init();
 800d750:	f7ff ffde 	bl	800d710 <HIDS_Init>

  HRS_Init();
 800d754:	f7ff ffde 	bl	800d714 <HRS_Init>

  HTS_Init();
 800d758:	f7ff ffde 	bl	800d718 <HTS_Init>

  IAS_Init();
 800d75c:	f7ff ffde 	bl	800d71c <IAS_Init>

  LLS_Init();
 800d760:	f7ff ffde 	bl	800d720 <LLS_Init>

  TPS_Init();
 800d764:	f7ff ffde 	bl	800d724 <TPS_Init>

  MOTENV_STM_Init();
 800d768:	f7ff fbec 	bl	800cf44 <MOTENV_STM_Init>

  P2PS_STM_Init();
 800d76c:	f7ff fe5a 	bl	800d424 <P2PS_STM_Init>

  OTAS_STM_Init();
 800d770:	f7ff ffda 	bl	800d728 <OTAS_STM_Init>

  SVCCTL_InitCustomSvc();
 800d774:	f7ff ffdc 	bl	800d730 <SVCCTL_InitCustomSvc>
  
  MESH_Init();
 800d778:	f7ff ffd8 	bl	800d72c <MESH_Init>

  return;
}
 800d77c:	bd08      	pop	{r3, pc}
 800d77e:	bf00      	nop
 800d780:	20001824 	.word	0x20001824

0800d784 <SVCCTL_RegisterSvcHandler>:
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800d784:	4a03      	ldr	r2, [pc, #12]	; (800d794 <SVCCTL_RegisterSvcHandler+0x10>)
 800d786:	7f13      	ldrb	r3, [r2, #28]
 800d788:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
#endif
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800d78c:	3301      	adds	r3, #1
 800d78e:	7713      	strb	r3, [r2, #28]

  return;
}
 800d790:	4770      	bx	lr
 800d792:	bf00      	nop
 800d794:	20001824 	.word	0x20001824

0800d798 <SVCCTL_UserEvtRx>:

  return;
}

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800d798:	b570      	push	{r4, r5, r6, lr}
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
  event_notification_status = SVCCTL_EvtNotAck;

  switch (event_pckt->evt)
 800d79a:	7843      	ldrb	r3, [r0, #1]
 800d79c:	2bff      	cmp	r3, #255	; 0xff
{
 800d79e:	4605      	mov	r5, r0
  switch (event_pckt->evt)
 800d7a0:	d11a      	bne.n	800d7d8 <SVCCTL_UserEvtRx+0x40>
  {
    case EVT_VENDOR:
    {
      blue_evt = (evt_blue_aci*) event_pckt->data;

      switch ((blue_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800d7a2:	f8b0 3003 	ldrh.w	r3, [r0, #3]
 800d7a6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d7aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d7ae:	d113      	bne.n	800d7d8 <SVCCTL_UserEvtRx+0x40>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800d7b0:	4e0c      	ldr	r6, [pc, #48]	; (800d7e4 <SVCCTL_UserEvtRx+0x4c>)
 800d7b2:	7f33      	ldrb	r3, [r6, #28]
 800d7b4:	b183      	cbz	r3, 800d7d8 <SVCCTL_UserEvtRx+0x40>
 800d7b6:	2400      	movs	r4, #0
 800d7b8:	e002      	b.n	800d7c0 <SVCCTL_UserEvtRx+0x28>
 800d7ba:	7f33      	ldrb	r3, [r6, #28]
 800d7bc:	42a3      	cmp	r3, r4
 800d7be:	d90b      	bls.n	800d7d8 <SVCCTL_UserEvtRx+0x40>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800d7c0:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 800d7c4:	4628      	mov	r0, r5
 800d7c6:	4798      	blx	r3
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800d7c8:	3401      	adds	r4, #1
 800d7ca:	b2e4      	uxtb	r4, r4
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800d7cc:	2800      	cmp	r0, #0
 800d7ce:	d0f4      	beq.n	800d7ba <SVCCTL_UserEvtRx+0x22>
       */
      return_status = SVCCTL_App_Notification(pckt);
      break;

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800d7d0:	3802      	subs	r0, #2
 800d7d2:	bf18      	it	ne
 800d7d4:	2001      	movne	r0, #1
      return_status = SVCCTL_UserEvtFlowEnable;
      break;
  }

  return (return_status);
}
 800d7d6:	bd70      	pop	{r4, r5, r6, pc}
      return_status = SVCCTL_App_Notification(pckt);
 800d7d8:	4628      	mov	r0, r5
}
 800d7da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return_status = SVCCTL_App_Notification(pckt);
 800d7de:	f7f4 bb05 	b.w	8001dec <SVCCTL_App_Notification>
 800d7e2:	bf00      	nop
 800d7e4:	20001824 	.word	0x20001824

0800d7e8 <SendFreeBuf>:

  return;
}

static void SendFreeBuf( void )
{
 800d7e8:	b530      	push	{r4, r5, lr}
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800d7ea:	4c0a      	ldr	r4, [pc, #40]	; (800d814 <SendFreeBuf+0x2c>)
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800d7ec:	4d0a      	ldr	r5, [pc, #40]	; (800d818 <SendFreeBuf+0x30>)
{
 800d7ee:	b083      	sub	sp, #12
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800d7f0:	e007      	b.n	800d802 <SendFreeBuf+0x1a>
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800d7f2:	4620      	mov	r0, r4
 800d7f4:	f7ff ff6e 	bl	800d6d4 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800d7f8:	692b      	ldr	r3, [r5, #16]
 800d7fa:	9901      	ldr	r1, [sp, #4]
 800d7fc:	6918      	ldr	r0, [r3, #16]
 800d7fe:	f7ff ff5d 	bl	800d6bc <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800d802:	4620      	mov	r0, r4
 800d804:	f7ff ff42 	bl	800d68c <LST_is_empty>
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800d808:	a901      	add	r1, sp, #4
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800d80a:	2800      	cmp	r0, #0
 800d80c:	d0f1      	beq.n	800d7f2 <SendFreeBuf+0xa>
  }

  return;
}
 800d80e:	b003      	add	sp, #12
 800d810:	bd30      	pop	{r4, r5, pc}
 800d812:	bf00      	nop
 800d814:	20001b00 	.word	0x20001b00
 800d818:	20030000 	.word	0x20030000

0800d81c <TL_Enable>:
  HW_IPCC_Enable();
 800d81c:	f7f6 bfcc 	b.w	80047b8 <HW_IPCC_Enable>

0800d820 <TL_Init>:
{
 800d820:	b430      	push	{r4, r5}
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800d822:	4b0d      	ldr	r3, [pc, #52]	; (800d858 <TL_Init+0x38>)
 800d824:	4a0d      	ldr	r2, [pc, #52]	; (800d85c <TL_Init+0x3c>)
  TL_RefTable.p_ble_table = &TL_BleTable;
 800d826:	f103 0020 	add.w	r0, r3, #32
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800d82a:	f103 0130 	add.w	r1, r3, #48	; 0x30
  TL_RefTable.p_sys_table = &TL_SysTable;
 800d82e:	f103 053c 	add.w	r5, r3, #60	; 0x3c
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800d832:	f103 0444 	add.w	r4, r3, #68	; 0x44
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800d836:	6013      	str	r3, [r2, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800d838:	6050      	str	r0, [r2, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800d83a:	6091      	str	r1, [r2, #8]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800d83c:	f103 0060 	add.w	r0, r3, #96	; 0x60
  TL_RefTable.p_sys_table = &TL_SysTable;
 800d840:	60d5      	str	r5, [r2, #12]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800d842:	f103 0164 	add.w	r1, r3, #100	; 0x64
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800d846:	6114      	str	r4, [r2, #16]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800d848:	3370      	adds	r3, #112	; 0x70
}
 800d84a:	bc30      	pop	{r4, r5}
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800d84c:	6150      	str	r0, [r2, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800d84e:	6191      	str	r1, [r2, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800d850:	61d3      	str	r3, [r2, #28]
  HW_IPCC_Init();
 800d852:	f7f6 bfbb 	b.w	80047cc <HW_IPCC_Init>
 800d856:	bf00      	nop
 800d858:	2003012c 	.word	0x2003012c
 800d85c:	20030000 	.word	0x20030000

0800d860 <TL_BLE_Init>:
{
 800d860:	b538      	push	{r3, r4, r5, lr}
  LST_init_head (&EvtQueue);
 800d862:	4d0c      	ldr	r5, [pc, #48]	; (800d894 <TL_BLE_Init+0x34>)
{
 800d864:	4604      	mov	r4, r0
  LST_init_head (&EvtQueue);
 800d866:	4628      	mov	r0, r5
 800d868:	f7ff ff0c 	bl	800d684 <LST_init_head>
  p_bletable = TL_RefTable.p_ble_table;
 800d86c:	4b0a      	ldr	r3, [pc, #40]	; (800d898 <TL_BLE_Init+0x38>)
  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800d86e:	68a2      	ldr	r2, [r4, #8]
  p_bletable = TL_RefTable.p_ble_table;
 800d870:	685b      	ldr	r3, [r3, #4]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800d872:	68e1      	ldr	r1, [r4, #12]
  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800d874:	601a      	str	r2, [r3, #0]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800d876:	f105 0208 	add.w	r2, r5, #8
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800d87a:	e9c3 5102 	strd	r5, r1, [r3, #8]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800d87e:	605a      	str	r2, [r3, #4]
  HW_IPCC_BLE_Init();
 800d880:	f7f6 ffc6 	bl	8004810 <HW_IPCC_BLE_Init>
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800d884:	e9d4 1200 	ldrd	r1, r2, [r4]
  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800d888:	4b04      	ldr	r3, [pc, #16]	; (800d89c <TL_BLE_Init+0x3c>)
}
 800d88a:	2000      	movs	r0, #0
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800d88c:	e9c3 1202 	strd	r1, r2, [r3, #8]
}
 800d890:	bd38      	pop	{r3, r4, r5, pc}
 800d892:	bf00      	nop
 800d894:	20030a14 	.word	0x20030a14
 800d898:	20030000 	.word	0x20030000
 800d89c:	20001b00 	.word	0x20001b00

0800d8a0 <TL_BLE_SendCmd>:
{
 800d8a0:	b508      	push	{r3, lr}
  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800d8a2:	4b04      	ldr	r3, [pc, #16]	; (800d8b4 <TL_BLE_SendCmd+0x14>)
 800d8a4:	685b      	ldr	r3, [r3, #4]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	2201      	movs	r2, #1
 800d8aa:	721a      	strb	r2, [r3, #8]
  HW_IPCC_BLE_SendCmd();
 800d8ac:	f7f6 ffb8 	bl	8004820 <HW_IPCC_BLE_SendCmd>
}
 800d8b0:	2000      	movs	r0, #0
 800d8b2:	bd08      	pop	{r3, pc}
 800d8b4:	20030000 	.word	0x20030000

0800d8b8 <HW_IPCC_BLE_RxEvtNot>:
{
 800d8b8:	b530      	push	{r4, r5, lr}
  while(LST_is_empty(&EvtQueue) == FALSE)
 800d8ba:	4c09      	ldr	r4, [pc, #36]	; (800d8e0 <HW_IPCC_BLE_RxEvtNot+0x28>)
    BLE_IoBusEvtCallBackFunction(phcievt);
 800d8bc:	4d09      	ldr	r5, [pc, #36]	; (800d8e4 <HW_IPCC_BLE_RxEvtNot+0x2c>)
{
 800d8be:	b083      	sub	sp, #12
  while(LST_is_empty(&EvtQueue) == FALSE)
 800d8c0:	e005      	b.n	800d8ce <HW_IPCC_BLE_RxEvtNot+0x16>
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800d8c2:	4620      	mov	r0, r4
 800d8c4:	f7ff ff06 	bl	800d6d4 <LST_remove_head>
    BLE_IoBusEvtCallBackFunction(phcievt);
 800d8c8:	68ab      	ldr	r3, [r5, #8]
 800d8ca:	9801      	ldr	r0, [sp, #4]
 800d8cc:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800d8ce:	4620      	mov	r0, r4
 800d8d0:	f7ff fedc 	bl	800d68c <LST_is_empty>
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800d8d4:	a901      	add	r1, sp, #4
  while(LST_is_empty(&EvtQueue) == FALSE)
 800d8d6:	2800      	cmp	r0, #0
 800d8d8:	d0f3      	beq.n	800d8c2 <HW_IPCC_BLE_RxEvtNot+0xa>
}
 800d8da:	b003      	add	sp, #12
 800d8dc:	bd30      	pop	{r4, r5, pc}
 800d8de:	bf00      	nop
 800d8e0:	20030a14 	.word	0x20030a14
 800d8e4:	20001b00 	.word	0x20001b00

0800d8e8 <HW_IPCC_BLE_AclDataAckNot>:
  BLE_IoBusAclDataTxAck( );
 800d8e8:	4b01      	ldr	r3, [pc, #4]	; (800d8f0 <HW_IPCC_BLE_AclDataAckNot+0x8>)
 800d8ea:	68db      	ldr	r3, [r3, #12]
 800d8ec:	4718      	bx	r3
 800d8ee:	bf00      	nop
 800d8f0:	20001b00 	.word	0x20001b00

0800d8f4 <TL_SYS_Init>:
{
 800d8f4:	b538      	push	{r3, r4, r5, lr}
  LST_init_head (&SystemEvtQueue);
 800d8f6:	4d09      	ldr	r5, [pc, #36]	; (800d91c <TL_SYS_Init+0x28>)
{
 800d8f8:	4604      	mov	r4, r0
  LST_init_head (&SystemEvtQueue);
 800d8fa:	4628      	mov	r0, r5
 800d8fc:	f7ff fec2 	bl	800d684 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800d900:	4b07      	ldr	r3, [pc, #28]	; (800d920 <TL_SYS_Init+0x2c>)
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800d902:	68a2      	ldr	r2, [r4, #8]
  p_systable = TL_RefTable.p_sys_table;
 800d904:	68db      	ldr	r3, [r3, #12]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800d906:	e9c3 2500 	strd	r2, r5, [r3]
  HW_IPCC_SYS_Init();
 800d90a:	f7f6 ff91 	bl	8004830 <HW_IPCC_SYS_Init>
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800d90e:	e9d4 1200 	ldrd	r1, r2, [r4]
  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800d912:	4b04      	ldr	r3, [pc, #16]	; (800d924 <TL_SYS_Init+0x30>)
}
 800d914:	2000      	movs	r0, #0
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800d916:	e9c3 1204 	strd	r1, r2, [r3, #16]
}
 800d91a:	bd38      	pop	{r3, r4, r5, pc}
 800d91c:	20030a2c 	.word	0x20030a2c
 800d920:	20030000 	.word	0x20030000
 800d924:	20001b00 	.word	0x20001b00

0800d928 <TL_SYS_SendCmd>:
{
 800d928:	b508      	push	{r3, lr}
  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800d92a:	4b04      	ldr	r3, [pc, #16]	; (800d93c <TL_SYS_SendCmd+0x14>)
 800d92c:	68db      	ldr	r3, [r3, #12]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	2210      	movs	r2, #16
 800d932:	721a      	strb	r2, [r3, #8]
  HW_IPCC_SYS_SendCmd();
 800d934:	f7f6 ff84 	bl	8004840 <HW_IPCC_SYS_SendCmd>
}
 800d938:	2000      	movs	r0, #0
 800d93a:	bd08      	pop	{r3, pc}
 800d93c:	20030000 	.word	0x20030000

0800d940 <HW_IPCC_SYS_CmdEvtNot>:
  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800d940:	4a02      	ldr	r2, [pc, #8]	; (800d94c <HW_IPCC_SYS_CmdEvtNot+0xc>)
 800d942:	4b03      	ldr	r3, [pc, #12]	; (800d950 <HW_IPCC_SYS_CmdEvtNot+0x10>)
 800d944:	68d2      	ldr	r2, [r2, #12]
 800d946:	691b      	ldr	r3, [r3, #16]
 800d948:	6810      	ldr	r0, [r2, #0]
 800d94a:	4718      	bx	r3
 800d94c:	20030000 	.word	0x20030000
 800d950:	20001b00 	.word	0x20001b00

0800d954 <HW_IPCC_SYS_EvtNot>:
{
 800d954:	b530      	push	{r4, r5, lr}
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800d956:	4c09      	ldr	r4, [pc, #36]	; (800d97c <HW_IPCC_SYS_EvtNot+0x28>)
    SYS_EVT_IoBusCallBackFunction( p_evt );
 800d958:	4d09      	ldr	r5, [pc, #36]	; (800d980 <HW_IPCC_SYS_EvtNot+0x2c>)
{
 800d95a:	b083      	sub	sp, #12
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800d95c:	e005      	b.n	800d96a <HW_IPCC_SYS_EvtNot+0x16>
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800d95e:	4620      	mov	r0, r4
 800d960:	f7ff feb8 	bl	800d6d4 <LST_remove_head>
    SYS_EVT_IoBusCallBackFunction( p_evt );
 800d964:	696b      	ldr	r3, [r5, #20]
 800d966:	9801      	ldr	r0, [sp, #4]
 800d968:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800d96a:	4620      	mov	r0, r4
 800d96c:	f7ff fe8e 	bl	800d68c <LST_is_empty>
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800d970:	a901      	add	r1, sp, #4
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800d972:	2800      	cmp	r0, #0
 800d974:	d0f3      	beq.n	800d95e <HW_IPCC_SYS_EvtNot+0xa>
}
 800d976:	b003      	add	sp, #12
 800d978:	bd30      	pop	{r4, r5, pc}
 800d97a:	bf00      	nop
 800d97c:	20030a2c 	.word	0x20030a2c
 800d980:	20001b00 	.word	0x20001b00

0800d984 <TL_MM_Init>:
{
 800d984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LST_init_head (&FreeBufQueue);
 800d986:	4d0c      	ldr	r5, [pc, #48]	; (800d9b8 <TL_MM_Init+0x34>)
{
 800d988:	4604      	mov	r4, r0
  LST_init_head (&FreeBufQueue);
 800d98a:	4628      	mov	r0, r5
 800d98c:	f7ff fe7a 	bl	800d684 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800d990:	480a      	ldr	r0, [pc, #40]	; (800d9bc <TL_MM_Init+0x38>)
 800d992:	f7ff fe77 	bl	800d684 <LST_init_head>
  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800d996:	4b0a      	ldr	r3, [pc, #40]	; (800d9c0 <TL_MM_Init+0x3c>)
  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800d998:	68a2      	ldr	r2, [r4, #8]
  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800d99a:	691b      	ldr	r3, [r3, #16]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800d99c:	68e7      	ldr	r7, [r4, #12]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800d99e:	6826      	ldr	r6, [r4, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800d9a0:	6860      	ldr	r0, [r4, #4]
  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800d9a2:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800d9a4:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800d9a8:	611d      	str	r5, [r3, #16]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800d9aa:	60df      	str	r7, [r3, #12]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800d9ac:	e9c3 6000 	strd	r6, r0, [r3]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800d9b0:	e9c3 1205 	strd	r1, r2, [r3, #20]
}
 800d9b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d9b6:	bf00      	nop
 800d9b8:	200301a4 	.word	0x200301a4
 800d9bc:	20001b00 	.word	0x20001b00
 800d9c0:	20030000 	.word	0x20030000

0800d9c4 <TL_MM_EvtDone>:
{
 800d9c4:	b508      	push	{r3, lr}
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800d9c6:	4601      	mov	r1, r0
 800d9c8:	4803      	ldr	r0, [pc, #12]	; (800d9d8 <TL_MM_EvtDone+0x14>)
 800d9ca:	f7ff fe77 	bl	800d6bc <LST_insert_tail>
  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800d9ce:	4803      	ldr	r0, [pc, #12]	; (800d9dc <TL_MM_EvtDone+0x18>)
}
 800d9d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800d9d4:	f7f6 bf7c 	b.w	80048d0 <HW_IPCC_MM_SendFreeBuf>
 800d9d8:	20001b00 	.word	0x20001b00
 800d9dc:	0800d7e9 	.word	0x0800d7e9

0800d9e0 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800d9e0:	b510      	push	{r4, lr}
  LST_init_head (&TracesEvtQueue);
 800d9e2:	4c05      	ldr	r4, [pc, #20]	; (800d9f8 <TL_TRACES_Init+0x18>)
 800d9e4:	4620      	mov	r0, r4
 800d9e6:	f7ff fe4d 	bl	800d684 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800d9ea:	4b04      	ldr	r3, [pc, #16]	; (800d9fc <TL_TRACES_Init+0x1c>)
 800d9ec:	695b      	ldr	r3, [r3, #20]
 800d9ee:	601c      	str	r4, [r3, #0]

  HW_IPCC_TRACES_Init();

  return;
}
 800d9f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HW_IPCC_TRACES_Init();
 800d9f4:	f7f6 bf82 	b.w	80048fc <HW_IPCC_TRACES_Init>
 800d9f8:	200301ac 	.word	0x200301ac
 800d9fc:	20030000 	.word	0x20030000

0800da00 <TL_TRACES_EvtReceived>:
  }

  return;
}

__weak void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt ){};
 800da00:	4770      	bx	lr
 800da02:	bf00      	nop

0800da04 <HW_IPCC_TRACES_EvtNot>:
{
 800da04:	b510      	push	{r4, lr}
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800da06:	4c08      	ldr	r4, [pc, #32]	; (800da28 <HW_IPCC_TRACES_EvtNot+0x24>)
{
 800da08:	b082      	sub	sp, #8
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800da0a:	e005      	b.n	800da18 <HW_IPCC_TRACES_EvtNot+0x14>
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800da0c:	4620      	mov	r0, r4
 800da0e:	f7ff fe61 	bl	800d6d4 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800da12:	9801      	ldr	r0, [sp, #4]
 800da14:	f7ff fff4 	bl	800da00 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800da18:	4620      	mov	r0, r4
 800da1a:	f7ff fe37 	bl	800d68c <LST_is_empty>
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800da1e:	a901      	add	r1, sp, #4
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800da20:	2800      	cmp	r0, #0
 800da22:	d0f3      	beq.n	800da0c <HW_IPCC_TRACES_EvtNot+0x8>
}
 800da24:	b002      	add	sp, #8
 800da26:	bd10      	pop	{r4, pc}
 800da28:	200301ac 	.word	0x200301ac

0800da2c <UTIL_LPM_Init>:
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800da2c:	4b02      	ldr	r3, [pc, #8]	; (800da38 <UTIL_LPM_Init+0xc>)
 800da2e:	2200      	movs	r2, #0
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800da30:	e9c3 2200 	strd	r2, r2, [r3]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800da34:	4770      	bx	lr
 800da36:	bf00      	nop
 800da38:	20001b18 	.word	0x20001b18

0800da3c <UTIL_LPM_SetOffMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800da3c:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800da40:	b672      	cpsid	i

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 800da42:	b141      	cbz	r1, 800da56 <UTIL_LPM_SetOffMode+0x1a>
 800da44:	2901      	cmp	r1, #1
 800da46:	d103      	bne.n	800da50 <UTIL_LPM_SetOffMode+0x14>
  {
    case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800da48:	4907      	ldr	r1, [pc, #28]	; (800da68 <UTIL_LPM_SetOffMode+0x2c>)
 800da4a:	684a      	ldr	r2, [r1, #4]
 800da4c:	4310      	orrs	r0, r2
 800da4e:	6048      	str	r0, [r1, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800da50:	f383 8810 	msr	PRIMASK, r3
    default:
      break;
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800da54:	4770      	bx	lr
      OffModeDisable &= ( ~lpm_id_bm );
 800da56:	4904      	ldr	r1, [pc, #16]	; (800da68 <UTIL_LPM_SetOffMode+0x2c>)
 800da58:	684a      	ldr	r2, [r1, #4]
 800da5a:	ea22 0000 	bic.w	r0, r2, r0
 800da5e:	6048      	str	r0, [r1, #4]
 800da60:	f383 8810 	msr	PRIMASK, r3
}
 800da64:	4770      	bx	lr
 800da66:	bf00      	nop
 800da68:	20001b18 	.word	0x20001b18

0800da6c <UTIL_SEQ_RegTask>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800da6c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800da70:	b672      	cpsid	i
 */
void UTIL_SEQ_RegTask( UTIL_SEQ_bm_t task_id_bm , uint32_t flags, void (*task)( void ) )
{
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  TaskCb[bit_position(task_id_bm)] = task;
 800da72:	4b05      	ldr	r3, [pc, #20]	; (800da88 <UTIL_SEQ_RegTask+0x1c>)
  return (31-n);
}
#else
static uint32_t bit_position(uint32_t value)
{
  return (31 -__CLZ( value ));
 800da74:	fab0 f080 	clz	r0, r0
 800da78:	f1c0 001f 	rsb	r0, r0, #31
  TaskCb[bit_position(task_id_bm)] = task;
 800da7c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800da80:	6102      	str	r2, [r0, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800da82:	f381 8810 	msr	PRIMASK, r1
}
 800da86:	4770      	bx	lr
 800da88:	20001b20 	.word	0x20001b20

0800da8c <UTIL_SEQ_SetTask>:
{
 800da8c:	b430      	push	{r4, r5}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800da8e:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800da92:	b672      	cpsid	i
  TaskSet |= task_id_bm;
 800da94:	4b06      	ldr	r3, [pc, #24]	; (800dab0 <UTIL_SEQ_SetTask+0x24>)
  TaskPrio[task_prio].priority |= task_id_bm;
 800da96:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
  TaskSet |= task_id_bm;
 800da9a:	681a      	ldr	r2, [r3, #0]
  TaskPrio[task_prio].priority |= task_id_bm;
 800da9c:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
  TaskSet |= task_id_bm;
 800da9e:	4302      	orrs	r2, r0
  TaskPrio[task_prio].priority |= task_id_bm;
 800daa0:	4304      	orrs	r4, r0
 800daa2:	64cc      	str	r4, [r1, #76]	; 0x4c
  TaskSet |= task_id_bm;
 800daa4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800daa6:	f385 8810 	msr	PRIMASK, r5
}
 800daaa:	bc30      	pop	{r4, r5}
 800daac:	4770      	bx	lr
 800daae:	bf00      	nop
 800dab0:	20001b20 	.word	0x20001b20

0800dab4 <UTIL_SEQ_PauseTask>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dab4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800dab8:	b672      	cpsid	i
  TaskMask &= (~task_id_bm);
 800daba:	4a04      	ldr	r2, [pc, #16]	; (800dacc <UTIL_SEQ_PauseTask+0x18>)
 800dabc:	6813      	ldr	r3, [r2, #0]
 800dabe:	ea23 0300 	bic.w	r3, r3, r0
 800dac2:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dac4:	f381 8810 	msr	PRIMASK, r1
}
 800dac8:	4770      	bx	lr
 800daca:	bf00      	nop
 800dacc:	20000158 	.word	0x20000158

0800dad0 <UTIL_SEQ_ResumeTask>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dad0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800dad4:	b672      	cpsid	i
  TaskMask |= task_id_bm;
 800dad6:	4a03      	ldr	r2, [pc, #12]	; (800dae4 <UTIL_SEQ_ResumeTask+0x14>)
 800dad8:	6813      	ldr	r3, [r2, #0]
 800dada:	4303      	orrs	r3, r0
 800dadc:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dade:	f381 8810 	msr	PRIMASK, r1
}
 800dae2:	4770      	bx	lr
 800dae4:	20000158 	.word	0x20000158

0800dae8 <UTIL_SEQ_SetEvt>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dae8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800daec:	b672      	cpsid	i
  EvtSet |= evt_id_bm;
 800daee:	4a03      	ldr	r2, [pc, #12]	; (800dafc <UTIL_SEQ_SetEvt+0x14>)
 800daf0:	6853      	ldr	r3, [r2, #4]
 800daf2:	4303      	orrs	r3, r0
 800daf4:	6053      	str	r3, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800daf6:	f381 8810 	msr	PRIMASK, r1
}
 800dafa:	4770      	bx	lr
 800dafc:	20001b20 	.word	0x20001b20

0800db00 <UTIL_SEQ_PreIdle>:
 800db00:	4770      	bx	lr
 800db02:	bf00      	nop

0800db04 <UTIL_SEQ_PostIdle>:
 800db04:	4770      	bx	lr
 800db06:	bf00      	nop

0800db08 <UTIL_SEQ_Run>:
{
 800db08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  super_mask_backup = SuperMask;
 800db0a:	4d30      	ldr	r5, [pc, #192]	; (800dbcc <UTIL_SEQ_Run+0xc4>)
  while( (TaskSet & TaskMask & SuperMask) && (!(EvtSet & EvtWaited)) )
 800db0c:	4c30      	ldr	r4, [pc, #192]	; (800dbd0 <UTIL_SEQ_Run+0xc8>)
 800db0e:	e9d5 2600 	ldrd	r2, r6, [r5]
 800db12:	6823      	ldr	r3, [r4, #0]
  SuperMask &= mask_bm;
 800db14:	4030      	ands	r0, r6
  while( (TaskSet & TaskMask & SuperMask) && (!(EvtSet & EvtWaited)) )
 800db16:	4013      	ands	r3, r2
 800db18:	4203      	tst	r3, r0
  SuperMask &= mask_bm;
 800db1a:	6068      	str	r0, [r5, #4]
  while( (TaskSet & TaskMask & SuperMask) && (!(EvtSet & EvtWaited)) )
 800db1c:	d003      	beq.n	800db26 <UTIL_SEQ_Run+0x1e>
 800db1e:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 800db22:	4219      	tst	r1, r3
 800db24:	d01c      	beq.n	800db60 <UTIL_SEQ_Run+0x58>
  UTIL_SEQ_PreIdle( );
 800db26:	f7ff ffeb 	bl	800db00 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800db2a:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800db2e:	b672      	cpsid	i
  if (!((TaskSet & TaskMask & SuperMask) || (EvtSet & EvtWaited)))
 800db30:	e9d5 1200 	ldrd	r1, r2, [r5]
 800db34:	6823      	ldr	r3, [r4, #0]
 800db36:	400b      	ands	r3, r1
 800db38:	4213      	tst	r3, r2
 800db3a:	d103      	bne.n	800db44 <UTIL_SEQ_Run+0x3c>
 800db3c:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 800db40:	421a      	tst	r2, r3
 800db42:	d005      	beq.n	800db50 <UTIL_SEQ_Run+0x48>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800db44:	f387 8810 	msr	PRIMASK, r7
  UTIL_SEQ_PostIdle( );
 800db48:	f7ff ffdc 	bl	800db04 <UTIL_SEQ_PostIdle>
  SuperMask = super_mask_backup;
 800db4c:	606e      	str	r6, [r5, #4]
}
 800db4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    UTIL_SEQ_Idle( );
 800db50:	f7f3 f8be 	bl	8000cd0 <UTIL_SEQ_Idle>
 800db54:	f387 8810 	msr	PRIMASK, r7
  UTIL_SEQ_PostIdle( );
 800db58:	f7ff ffd4 	bl	800db04 <UTIL_SEQ_PostIdle>
  SuperMask = super_mask_backup;
 800db5c:	606e      	str	r6, [r5, #4]
}
 800db5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TaskPrio[counter].round_robin &= ~(1 << (CurrentTaskIdx));
 800db60:	2701      	movs	r7, #1
    if (!(TaskPrio[counter].round_robin & current_task_set))
 800db62:	e9d4 3113 	ldrd	r3, r1, [r4, #76]	; 0x4c
    while(!(TaskPrio[counter].priority & TaskMask & SuperMask))
 800db66:	4010      	ands	r0, r2
 800db68:	4018      	ands	r0, r3
    if (!(TaskPrio[counter].round_robin & current_task_set))
 800db6a:	ea00 0301 	and.w	r3, r0, r1
 800db6e:	2b00      	cmp	r3, #0
 800db70:	bf18      	it	ne
 800db72:	4618      	movne	r0, r3
  return (31 -__CLZ( value ));
 800db74:	fab0 f080 	clz	r0, r0
 800db78:	f1c0 001f 	rsb	r0, r0, #31
    TaskPrio[counter].round_robin &= ~(1 << (CurrentTaskIdx));
 800db7c:	fa07 f300 	lsl.w	r3, r7, r0
    if (!(TaskPrio[counter].round_robin & current_task_set))
 800db80:	bf08      	it	eq
 800db82:	f04f 31ff 	moveq.w	r1, #4294967295
    TaskPrio[counter].round_robin &= ~(1 << (CurrentTaskIdx));
 800db86:	ea21 0103 	bic.w	r1, r1, r3
    CurrentTaskIdx = bit_position(current_task_set & TaskPrio[counter].round_robin);
 800db8a:	60e0      	str	r0, [r4, #12]
    TaskPrio[counter].round_robin &= ~(1 << (CurrentTaskIdx));
 800db8c:	6521      	str	r1, [r4, #80]	; 0x50
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800db8e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800db92:	b672      	cpsid	i
    TaskSet &= ~(1 << (CurrentTaskIdx));
 800db94:	68e3      	ldr	r3, [r4, #12]
 800db96:	6821      	ldr	r1, [r4, #0]
      TaskPrio[counter - 1].priority &= ~(1 << (CurrentTaskIdx));
 800db98:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    TaskSet &= ~(1 << (CurrentTaskIdx));
 800db9a:	fa07 f303 	lsl.w	r3, r7, r3
 800db9e:	43db      	mvns	r3, r3
 800dba0:	4019      	ands	r1, r3
      TaskPrio[counter - 1].priority &= ~(1 << (CurrentTaskIdx));
 800dba2:	4013      	ands	r3, r2
    TaskSet &= ~(1 << (CurrentTaskIdx));
 800dba4:	6021      	str	r1, [r4, #0]
      TaskPrio[counter - 1].priority &= ~(1 << (CurrentTaskIdx));
 800dba6:	64e3      	str	r3, [r4, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dba8:	f380 8810 	msr	PRIMASK, r0
    TaskCb[CurrentTaskIdx]( );
 800dbac:	68e3      	ldr	r3, [r4, #12]
 800dbae:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800dbb2:	691b      	ldr	r3, [r3, #16]
 800dbb4:	4798      	blx	r3
  while( (TaskSet & TaskMask & SuperMask) && (!(EvtSet & EvtWaited)) )
 800dbb6:	682a      	ldr	r2, [r5, #0]
 800dbb8:	6823      	ldr	r3, [r4, #0]
 800dbba:	6868      	ldr	r0, [r5, #4]
 800dbbc:	4013      	ands	r3, r2
 800dbbe:	4203      	tst	r3, r0
 800dbc0:	d0b1      	beq.n	800db26 <UTIL_SEQ_Run+0x1e>
 800dbc2:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
 800dbc6:	4219      	tst	r1, r3
 800dbc8:	d1ad      	bne.n	800db26 <UTIL_SEQ_Run+0x1e>
 800dbca:	e7ca      	b.n	800db62 <UTIL_SEQ_Run+0x5a>
 800dbcc:	20000158 	.word	0x20000158
 800dbd0:	20001b20 	.word	0x20001b20

0800dbd4 <UTIL_SEQ_WaitEvt>:
{
 800dbd4:	b570      	push	{r4, r5, r6, lr}
  current_task_id_bm = (1 << CurrentTaskIdx);
 800dbd6:	4c0b      	ldr	r4, [pc, #44]	; (800dc04 <UTIL_SEQ_WaitEvt+0x30>)
  event_waited_id_backup = EvtWaited;
 800dbd8:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
  current_task_id_bm = (1 << CurrentTaskIdx);
 800dbdc:	68e2      	ldr	r2, [r4, #12]
  EvtWaited = evt_id_bm;
 800dbde:	60a0      	str	r0, [r4, #8]
  current_task_id_bm = (1 << CurrentTaskIdx);
 800dbe0:	2501      	movs	r5, #1
  while((EvtSet & EvtWaited) == 0)
 800dbe2:	4203      	tst	r3, r0
{
 800dbe4:	4601      	mov	r1, r0
  current_task_id_bm = (1 << CurrentTaskIdx);
 800dbe6:	fa05 f502 	lsl.w	r5, r5, r2
  while((EvtSet & EvtWaited) == 0)
 800dbea:	d106      	bne.n	800dbfa <UTIL_SEQ_WaitEvt+0x26>
    UTIL_SEQ_EvtIdle(current_task_id_bm, EvtWaited);
 800dbec:	4628      	mov	r0, r5
 800dbee:	f7f3 f871 	bl	8000cd4 <UTIL_SEQ_EvtIdle>
  while((EvtSet & EvtWaited) == 0)
 800dbf2:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 800dbf6:	420b      	tst	r3, r1
 800dbf8:	d0f8      	beq.n	800dbec <UTIL_SEQ_WaitEvt+0x18>
  EvtSet &= (~EvtWaited);
 800dbfa:	ea23 0101 	bic.w	r1, r3, r1
  EvtWaited = event_waited_id_backup;
 800dbfe:	e9c4 1601 	strd	r1, r6, [r4, #4]
}
 800dc02:	bd70      	pop	{r4, r5, r6, pc}
 800dc04:	20001b20 	.word	0x20001b20

0800dc08 <MotionAR_Initialize>:
 800dc08:	491a      	ldr	r1, [pc, #104]	; (800dc74 <MotionAR_Initialize+0x6c>)
 800dc0a:	4a1b      	ldr	r2, [pc, #108]	; (800dc78 <MotionAR_Initialize+0x70>)
 800dc0c:	680b      	ldr	r3, [r1, #0]
 800dc0e:	2001      	movs	r0, #1
 800dc10:	f023 0301 	bic.w	r3, r3, #1
 800dc14:	600b      	str	r3, [r1, #0]
 800dc16:	4611      	mov	r1, r2
 800dc18:	6010      	str	r0, [r2, #0]
 800dc1a:	2364      	movs	r3, #100	; 0x64
 800dc1c:	e001      	b.n	800dc22 <MotionAR_Initialize+0x1a>
 800dc1e:	3b01      	subs	r3, #1
 800dc20:	d00a      	beq.n	800dc38 <MotionAR_Initialize+0x30>
 800dc22:	680a      	ldr	r2, [r1, #0]
 800dc24:	2a00      	cmp	r2, #0
 800dc26:	d1fa      	bne.n	800dc1e <MotionAR_Initialize+0x16>
 800dc28:	4b14      	ldr	r3, [pc, #80]	; (800dc7c <MotionAR_Initialize+0x74>)
 800dc2a:	4915      	ldr	r1, [pc, #84]	; (800dc80 <MotionAR_Initialize+0x78>)
 800dc2c:	6019      	str	r1, [r3, #0]
 800dc2e:	6819      	ldr	r1, [r3, #0]
 800dc30:	4b14      	ldr	r3, [pc, #80]	; (800dc84 <MotionAR_Initialize+0x7c>)
 800dc32:	4299      	cmp	r1, r3
 800dc34:	d001      	beq.n	800dc3a <MotionAR_Initialize+0x32>
 800dc36:	e7fe      	b.n	800dc36 <MotionAR_Initialize+0x2e>
 800dc38:	e7fd      	b.n	800dc36 <MotionAR_Initialize+0x2e>
 800dc3a:	4b13      	ldr	r3, [pc, #76]	; (800dc88 <MotionAR_Initialize+0x80>)
 800dc3c:	2101      	movs	r1, #1
 800dc3e:	2003      	movs	r0, #3
 800dc40:	b410      	push	{r4}
 800dc42:	4c12      	ldr	r4, [pc, #72]	; (800dc8c <MotionAR_Initialize+0x84>)
 800dc44:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800dc48:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800dc4c:	f883 004f 	strb.w	r0, [r3, #79]	; 0x4f
 800dc50:	7019      	strb	r1, [r3, #0]
 800dc52:	f883 104c 	strb.w	r1, [r3, #76]	; 0x4c
 800dc56:	f883 104d 	strb.w	r1, [r3, #77]	; 0x4d
 800dc5a:	62dc      	str	r4, [r3, #44]	; 0x2c
 800dc5c:	629a      	str	r2, [r3, #40]	; 0x28
 800dc5e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800dc62:	e9c3 220d 	strd	r2, r2, [r3, #52]	; 0x34
 800dc66:	e9c3 220f 	strd	r2, r2, [r3, #60]	; 0x3c
 800dc6a:	e9c3 2211 	strd	r2, r2, [r3, #68]	; 0x44
 800dc6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc72:	4770      	bx	lr
 800dc74:	e0002000 	.word	0xe0002000
 800dc78:	40023008 	.word	0x40023008
 800dc7c:	40023000 	.word	0x40023000
 800dc80:	f407a5c2 	.word	0xf407a5c2
 800dc84:	b5e8b5cd 	.word	0xb5e8b5cd
 800dc88:	20001b74 	.word	0x20001b74
 800dc8c:	42780000 	.word	0x42780000

0800dc90 <MotionAR_SetOrientation_Acc>:
 800dc90:	4b44      	ldr	r3, [pc, #272]	; (800dda4 <MotionAR_SetOrientation_Acc+0x114>)
 800dc92:	781b      	ldrb	r3, [r3, #0]
 800dc94:	b903      	cbnz	r3, 800dc98 <MotionAR_SetOrientation_Acc+0x8>
 800dc96:	4770      	bx	lr
 800dc98:	4b43      	ldr	r3, [pc, #268]	; (800dda8 <MotionAR_SetOrientation_Acc+0x118>)
 800dc9a:	2200      	movs	r2, #0
 800dc9c:	e9c3 2200 	strd	r2, r2, [r3]
 800dca0:	721a      	strb	r2, [r3, #8]
 800dca2:	7802      	ldrb	r2, [r0, #0]
 800dca4:	f1a2 0142 	sub.w	r1, r2, #66	; 0x42
 800dca8:	b082      	sub	sp, #8
 800dcaa:	2917      	cmp	r1, #23
 800dcac:	bf98      	it	ls
 800dcae:	3220      	addls	r2, #32
 800dcb0:	f88d 2004 	strb.w	r2, [sp, #4]
 800dcb4:	7842      	ldrb	r2, [r0, #1]
 800dcb6:	f1a2 0142 	sub.w	r1, r2, #66	; 0x42
 800dcba:	2917      	cmp	r1, #23
 800dcbc:	bf98      	it	ls
 800dcbe:	3220      	addls	r2, #32
 800dcc0:	f88d 2005 	strb.w	r2, [sp, #5]
 800dcc4:	7882      	ldrb	r2, [r0, #2]
 800dcc6:	f1a2 0142 	sub.w	r1, r2, #66	; 0x42
 800dcca:	2917      	cmp	r1, #23
 800dccc:	bf98      	it	ls
 800dcce:	3220      	addls	r2, #32
 800dcd0:	f88d 2006 	strb.w	r2, [sp, #6]
 800dcd4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800dcd8:	3a64      	subs	r2, #100	; 0x64
 800dcda:	2a13      	cmp	r2, #19
 800dcdc:	d80d      	bhi.n	800dcfa <MotionAR_SetOrientation_Acc+0x6a>
 800dcde:	e8df f002 	tbb	[pc, r2]
 800dce2:	5e0a      	.short	0x5e0a
 800dce4:	0c0c0c0c 	.word	0x0c0c0c0c
 800dce8:	0c0c0c0c 	.word	0x0c0c0c0c
 800dcec:	0c0c0c5b 	.word	0x0c0c0c5b
 800dcf0:	550c580c 	.word	0x550c580c
 800dcf4:	520c      	.short	0x520c
 800dcf6:	22ff      	movs	r2, #255	; 0xff
 800dcf8:	719a      	strb	r2, [r3, #6]
 800dcfa:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800dcfe:	3a64      	subs	r2, #100	; 0x64
 800dd00:	2a13      	cmp	r2, #19
 800dd02:	d80d      	bhi.n	800dd20 <MotionAR_SetOrientation_Acc+0x90>
 800dd04:	e8df f002 	tbb	[pc, r2]
 800dd08:	0c0c3c0a 	.word	0x0c0c3c0a
 800dd0c:	0c0c0c0c 	.word	0x0c0c0c0c
 800dd10:	0c390c0c 	.word	0x0c390c0c
 800dd14:	360c0c0c 	.word	0x360c0c0c
 800dd18:	300c330c 	.word	0x300c330c
 800dd1c:	22ff      	movs	r2, #255	; 0xff
 800dd1e:	71da      	strb	r2, [r3, #7]
 800dd20:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800dd24:	3a64      	subs	r2, #100	; 0x64
 800dd26:	2a13      	cmp	r2, #19
 800dd28:	d80d      	bhi.n	800dd46 <MotionAR_SetOrientation_Acc+0xb6>
 800dd2a:	e8df f002 	tbb	[pc, r2]
 800dd2e:	1a0a      	.short	0x1a0a
 800dd30:	0c0c0c0c 	.word	0x0c0c0c0c
 800dd34:	0c0c0c0c 	.word	0x0c0c0c0c
 800dd38:	0c0c0c17 	.word	0x0c0c0c17
 800dd3c:	110c140c 	.word	0x110c140c
 800dd40:	0e0c      	.short	0x0e0c
 800dd42:	22ff      	movs	r2, #255	; 0xff
 800dd44:	721a      	strb	r2, [r3, #8]
 800dd46:	b002      	add	sp, #8
 800dd48:	4770      	bx	lr
 800dd4a:	22ff      	movs	r2, #255	; 0xff
 800dd4c:	709a      	strb	r2, [r3, #2]
 800dd4e:	e7fa      	b.n	800dd46 <MotionAR_SetOrientation_Acc+0xb6>
 800dd50:	2201      	movs	r2, #1
 800dd52:	721a      	strb	r2, [r3, #8]
 800dd54:	e7f7      	b.n	800dd46 <MotionAR_SetOrientation_Acc+0xb6>
 800dd56:	22ff      	movs	r2, #255	; 0xff
 800dd58:	715a      	strb	r2, [r3, #5]
 800dd5a:	e7f4      	b.n	800dd46 <MotionAR_SetOrientation_Acc+0xb6>
 800dd5c:	2201      	movs	r2, #1
 800dd5e:	715a      	strb	r2, [r3, #5]
 800dd60:	e7f1      	b.n	800dd46 <MotionAR_SetOrientation_Acc+0xb6>
 800dd62:	2201      	movs	r2, #1
 800dd64:	709a      	strb	r2, [r3, #2]
 800dd66:	e7ee      	b.n	800dd46 <MotionAR_SetOrientation_Acc+0xb6>
 800dd68:	22ff      	movs	r2, #255	; 0xff
 800dd6a:	705a      	strb	r2, [r3, #1]
 800dd6c:	e7d8      	b.n	800dd20 <MotionAR_SetOrientation_Acc+0x90>
 800dd6e:	2201      	movs	r2, #1
 800dd70:	71da      	strb	r2, [r3, #7]
 800dd72:	e7d5      	b.n	800dd20 <MotionAR_SetOrientation_Acc+0x90>
 800dd74:	22ff      	movs	r2, #255	; 0xff
 800dd76:	711a      	strb	r2, [r3, #4]
 800dd78:	e7d2      	b.n	800dd20 <MotionAR_SetOrientation_Acc+0x90>
 800dd7a:	2201      	movs	r2, #1
 800dd7c:	711a      	strb	r2, [r3, #4]
 800dd7e:	e7cf      	b.n	800dd20 <MotionAR_SetOrientation_Acc+0x90>
 800dd80:	2201      	movs	r2, #1
 800dd82:	705a      	strb	r2, [r3, #1]
 800dd84:	e7cc      	b.n	800dd20 <MotionAR_SetOrientation_Acc+0x90>
 800dd86:	22ff      	movs	r2, #255	; 0xff
 800dd88:	701a      	strb	r2, [r3, #0]
 800dd8a:	e7b6      	b.n	800dcfa <MotionAR_SetOrientation_Acc+0x6a>
 800dd8c:	2201      	movs	r2, #1
 800dd8e:	719a      	strb	r2, [r3, #6]
 800dd90:	e7b3      	b.n	800dcfa <MotionAR_SetOrientation_Acc+0x6a>
 800dd92:	22ff      	movs	r2, #255	; 0xff
 800dd94:	70da      	strb	r2, [r3, #3]
 800dd96:	e7b0      	b.n	800dcfa <MotionAR_SetOrientation_Acc+0x6a>
 800dd98:	2201      	movs	r2, #1
 800dd9a:	70da      	strb	r2, [r3, #3]
 800dd9c:	e7ad      	b.n	800dcfa <MotionAR_SetOrientation_Acc+0x6a>
 800dd9e:	2201      	movs	r2, #1
 800dda0:	701a      	strb	r2, [r3, #0]
 800dda2:	e7aa      	b.n	800dcfa <MotionAR_SetOrientation_Acc+0x6a>
 800dda4:	20001b74 	.word	0x20001b74
 800dda8:	20000160 	.word	0x20000160
 800ddac:	00000000 	.word	0x00000000

0800ddb0 <MotionAR_Update>:
 800ddb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddb4:	4ced      	ldr	r4, [pc, #948]	; (800e16c <MotionAR_Update+0x3bc>)
 800ddb6:	ed2d 8b10 	vpush	{d8-d15}
 800ddba:	7823      	ldrb	r3, [r4, #0]
 800ddbc:	b095      	sub	sp, #84	; 0x54
 800ddbe:	b923      	cbnz	r3, 800ddca <MotionAR_Update+0x1a>
 800ddc0:	b015      	add	sp, #84	; 0x54
 800ddc2:	ecbd 8b10 	vpop	{d8-d15}
 800ddc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddca:	eddf 7ae9 	vldr	s15, [pc, #932]	; 800e170 <MotionAR_Update+0x3c0>
 800ddce:	edd0 5a00 	vldr	s11, [r0]
 800ddd2:	edd0 6a01 	vldr	s13, [r0, #4]
 800ddd6:	ed90 7a02 	vldr	s14, [r0, #8]
 800ddda:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800dddc:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800dde0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800dde4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	f000 81ac 	beq.w	800e146 <MotionAR_Update+0x396>
 800ddee:	ed94 4a02 	vldr	s8, [r4, #8]
 800ddf2:	edd4 4a03 	vldr	s9, [r4, #12]
 800ddf6:	ed94 5a04 	vldr	s10, [r4, #16]
 800ddfa:	6a20      	ldr	r0, [r4, #32]
 800ddfc:	ed84 4a05 	vstr	s8, [r4, #20]
 800de00:	3301      	adds	r3, #1
 800de02:	2b05      	cmp	r3, #5
 800de04:	edc4 5a02 	vstr	s11, [r4, #8]
 800de08:	edc4 4a06 	vstr	s9, [r4, #24]
 800de0c:	edc4 6a03 	vstr	s13, [r4, #12]
 800de10:	ed84 5a07 	vstr	s10, [r4, #28]
 800de14:	ed84 7a04 	vstr	s14, [r4, #16]
 800de18:	e9c4 2008 	strd	r2, r0, [r4, #32]
 800de1c:	dd00      	ble.n	800de20 <MotionAR_Update+0x70>
 800de1e:	2305      	movs	r3, #5
 800de20:	edd4 7a01 	vldr	s15, [r4, #4]
 800de24:	ed94 6a0b 	vldr	s12, [r4, #44]	; 0x2c
 800de28:	62a3      	str	r3, [r4, #40]	; 0x28
 800de2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800de2e:	ee77 7a86 	vadd.f32	s15, s15, s12
 800de32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800de36:	ee17 3a90 	vmov	r3, s15
 800de3a:	429a      	cmp	r2, r3
 800de3c:	f2c0 818e 	blt.w	800e15c <MotionAR_Update+0x3ac>
 800de40:	1a12      	subs	r2, r2, r0
 800de42:	2a64      	cmp	r2, #100	; 0x64
 800de44:	f200 818a 	bhi.w	800e15c <MotionAR_Update+0x3ac>
 800de48:	1a18      	subs	r0, r3, r0
 800de4a:	ee07 0a90 	vmov	s15, r0
 800de4e:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800de52:	ee07 2a90 	vmov	s15, r2
 800de56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800de5a:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 800de5e:	ee86 3a27 	vdiv.f32	s6, s12, s15
 800de62:	6063      	str	r3, [r4, #4]
 800de64:	ee73 7ac3 	vsub.f32	s15, s7, s6
 800de68:	ee24 4a27 	vmul.f32	s8, s8, s15
 800de6c:	ee64 4aa7 	vmul.f32	s9, s9, s15
 800de70:	ee25 5a27 	vmul.f32	s10, s10, s15
 800de74:	eea5 4a83 	vfma.f32	s8, s11, s6
 800de78:	eee6 4a83 	vfma.f32	s9, s13, s6
 800de7c:	eea7 5a03 	vfma.f32	s10, s14, s6
 800de80:	eef0 5a44 	vmov.f32	s11, s8
 800de84:	eef0 6a64 	vmov.f32	s13, s9
 800de88:	eeb0 7a45 	vmov.f32	s14, s10
 800de8c:	4db9      	ldr	r5, [pc, #740]	; (800e174 <MotionAR_Update+0x3c4>)
 800de8e:	f894 7031 	ldrb.w	r7, [r4, #49]	; 0x31
 800de92:	f995 3001 	ldrsb.w	r3, [r5, #1]
 800de96:	f995 2008 	ldrsb.w	r2, [r5, #8]
 800de9a:	ee09 3a10 	vmov	s18, r3
 800de9e:	f995 3004 	ldrsb.w	r3, [r5, #4]
 800dea2:	ee08 3a90 	vmov	s17, r3
 800dea6:	f995 3007 	ldrsb.w	r3, [r5, #7]
 800deaa:	ee07 3a90 	vmov	s15, r3
 800deae:	f995 3000 	ldrsb.w	r3, [r5]
 800deb2:	ee06 3a10 	vmov	s12, r3
 800deb6:	f995 3003 	ldrsb.w	r3, [r5, #3]
 800deba:	ee04 3a10 	vmov	s8, r3
 800debe:	f995 3006 	ldrsb.w	r3, [r5, #6]
 800dec2:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 800dec6:	ee04 3a90 	vmov	s9, r3
 800deca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dece:	ee29 9a26 	vmul.f32	s18, s18, s13
 800ded2:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 800ded6:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800deda:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800dede:	f995 3002 	ldrsb.w	r3, [r5, #2]
 800dee2:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 800dee6:	ee68 8aa6 	vmul.f32	s17, s17, s13
 800deea:	eef0 6a49 	vmov.f32	s13, s18
 800deee:	eee5 6a86 	vfma.f32	s13, s11, s12
 800def2:	4688      	mov	r8, r1
 800def4:	ee05 3a10 	vmov	s10, r3
 800def8:	eee5 7aa4 	vfma.f32	s15, s11, s9
 800defc:	f995 3005 	ldrsb.w	r3, [r5, #5]
 800df00:	ee06 2a10 	vmov	s12, r2
 800df04:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 800df08:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 800df0c:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800df10:	eee5 8a84 	vfma.f32	s17, s11, s8
 800df14:	eee7 6a05 	vfma.f32	s13, s14, s10
 800df18:	ee05 3a90 	vmov	s11, r3
 800df1c:	eee7 7a06 	vfma.f32	s15, s14, s12
 800df20:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800df24:	eeb0 9a66 	vmov.f32	s18, s13
 800df28:	eee7 8a25 	vfma.f32	s17, s14, s11
 800df2c:	eeb0 8a67 	vmov.f32	s16, s15
 800df30:	2f00      	cmp	r7, #0
 800df32:	f000 813d 	beq.w	800e1b0 <MotionAR_Update+0x400>
 800df36:	f894 6050 	ldrb.w	r6, [r4, #80]	; 0x50
 800df3a:	f894 2053 	ldrb.w	r2, [r4, #83]	; 0x53
 800df3e:	4b8e      	ldr	r3, [pc, #568]	; (800e178 <MotionAR_Update+0x3c8>)
 800df40:	488e      	ldr	r0, [pc, #568]	; (800e17c <MotionAR_Update+0x3cc>)
 800df42:	eddf 7a8f 	vldr	s15, [pc, #572]	; 800e180 <MotionAR_Update+0x3d0>
 800df46:	f894 7051 	ldrb.w	r7, [r4, #81]	; 0x51
 800df4a:	f894 c052 	ldrb.w	ip, [r4, #82]	; 0x52
 800df4e:	3601      	adds	r6, #1
 800df50:	1c51      	adds	r1, r2, #1
 800df52:	fba0 e001 	umull	lr, r0, r0, r1
 800df56:	fba3 e306 	umull	lr, r3, r3, r6
 800df5a:	095b      	lsrs	r3, r3, #5
 800df5c:	0880      	lsrs	r0, r0, #2
 800df5e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800df62:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800df66:	1a09      	subs	r1, r1, r0
 800df68:	eba6 1303 	sub.w	r3, r6, r3, lsl #4
 800df6c:	2001      	movs	r0, #1
 800df6e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800df72:	ee28 7aa7 	vmul.f32	s14, s17, s15
 800df76:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 800df7a:	b2c9      	uxtb	r1, r1
 800df7c:	f102 0e05 	add.w	lr, r2, #5
 800df80:	ee68 7a27 	vmul.f32	s15, s16, s15
 800df84:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
 800df88:	b12f      	cbz	r7, 800df96 <MotionAR_Update+0x1e6>
 800df8a:	f00c 0c0f 	and.w	ip, ip, #15
 800df8e:	f10c 0c01 	add.w	ip, ip, #1
 800df92:	f884 c052 	strb.w	ip, [r4, #82]	; 0x52
 800df96:	ee27 6a07 	vmul.f32	s12, s14, s14
 800df9a:	0098      	lsls	r0, r3, #2
 800df9c:	eea6 6aa6 	vfma.f32	s12, s13, s13
 800dfa0:	1826      	adds	r6, r4, r0
 800dfa2:	2b2f      	cmp	r3, #47	; 0x2f
 800dfa4:	edc6 6a37 	vstr	s13, [r6, #220]	; 0xdc
 800dfa8:	eef0 6a46 	vmov.f32	s13, s12
 800dfac:	eee7 6aa7 	vfma.f32	s13, s15, s15
 800dfb0:	4b72      	ldr	r3, [pc, #456]	; (800e17c <MotionAR_Update+0x3cc>)
 800dfb2:	f884 1053 	strb.w	r1, [r4, #83]	; 0x53
 800dfb6:	f10e 39ff 	add.w	r9, lr, #4294967295
 800dfba:	ed86 7a67 	vstr	s14, [r6, #412]	; 0x19c
 800dfbe:	edc6 6ac7 	vstr	s13, [r6, #796]	; 0x31c
 800dfc2:	edc6 7a97 	vstr	s15, [r6, #604]	; 0x25c
 800dfc6:	fba3 160e 	umull	r1, r6, r3, lr
 800dfca:	ea4f 0696 	mov.w	r6, r6, lsr #2
 800dfce:	fba3 a109 	umull	sl, r1, r3, r9
 800dfd2:	ea4f 0191 	mov.w	r1, r1, lsr #2
 800dfd6:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 800dfda:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 800dfde:	ebae 0606 	sub.w	r6, lr, r6
 800dfe2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800dfe6:	edc2 6a03 	vstr	s13, [r2, #12]
 800dfea:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 800dfee:	eba9 0101 	sub.w	r1, r9, r1
 800dff2:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 800dff6:	ed96 7a03 	vldr	s14, [r6, #12]
 800dffa:	edd1 7a03 	vldr	s15, [r1, #12]
 800dffe:	ed9f 5a61 	vldr	s10, [pc, #388]	; 800e184 <MotionAR_Update+0x3d4>
 800e002:	ed82 7a08 	vstr	s14, [r2, #32]
 800e006:	eef1 5a00 	vmov.f32	s11, #16	; 0x40800000  4.0
 800e00a:	eef0 6a47 	vmov.f32	s13, s14
 800e00e:	eee7 6aa5 	vfma.f32	s13, s15, s11
 800e012:	f1ae 0a02 	sub.w	sl, lr, #2
 800e016:	fba3 690a 	umull	r6, r9, r3, sl
 800e01a:	ea4f 0999 	mov.w	r9, r9, lsr #2
 800e01e:	edc2 6a0d 	vstr	s13, [r2, #52]	; 0x34
 800e022:	eef0 7a66 	vmov.f32	s15, s13
 800e026:	edd1 6a0d 	vldr	s13, [r1, #52]	; 0x34
 800e02a:	edd1 0a08 	vldr	s1, [r1, #32]
 800e02e:	ed9f 1a56 	vldr	s2, [pc, #344]	; 800e188 <MotionAR_Update+0x3d8>
 800e032:	eddf 1a56 	vldr	s3, [pc, #344]	; 800e18c <MotionAR_Update+0x3dc>
 800e036:	ed9f 2a56 	vldr	s4, [pc, #344]	; 800e190 <MotionAR_Update+0x3e0>
 800e03a:	eddf 2a56 	vldr	s5, [pc, #344]	; 800e194 <MotionAR_Update+0x3e4>
 800e03e:	ed9f 3a56 	vldr	s6, [pc, #344]	; 800e198 <MotionAR_Update+0x3e8>
 800e042:	eddf 3a56 	vldr	s7, [pc, #344]	; 800e19c <MotionAR_Update+0x3ec>
 800e046:	ed9f 4a56 	vldr	s8, [pc, #344]	; 800e1a0 <MotionAR_Update+0x3f0>
 800e04a:	ed9f 6a56 	vldr	s12, [pc, #344]	; 800e1a4 <MotionAR_Update+0x3f4>
 800e04e:	eddf 4a56 	vldr	s9, [pc, #344]	; 800e1a8 <MotionAR_Update+0x3f8>
 800e052:	4e56      	ldr	r6, [pc, #344]	; (800e1ac <MotionAR_Update+0x3fc>)
 800e054:	eb09 0989 	add.w	r9, r9, r9, lsl #2
 800e058:	eee6 7ac5 	vfms.f32	s15, s13, s10
 800e05c:	ebaa 0909 	sub.w	r9, sl, r9
 800e060:	eb05 0989 	add.w	r9, r5, r9, lsl #2
 800e064:	ed99 5a03 	vldr	s10, [r9, #12]
 800e068:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800e06c:	eee5 7a26 	vfma.f32	s15, s10, s13
 800e070:	f1ae 0a03 	sub.w	sl, lr, #3
 800e074:	fba3 b10a 	umull	fp, r1, r3, sl
 800e078:	eea0 7ac1 	vfms.f32	s14, s1, s2
 800e07c:	ea4f 0191 	mov.w	r1, r1, lsr #2
 800e080:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800e084:	eef8 6a00 	vmov.f32	s13, #128	; 0xc0000000 -2.0
 800e088:	edc2 7a0d 	vstr	s15, [r2, #52]	; 0x34
 800e08c:	eea5 7a26 	vfma.f32	s14, s10, s13
 800e090:	ebaa 0101 	sub.w	r1, sl, r1
 800e094:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 800e098:	edd9 6a0d 	vldr	s13, [r9, #52]	; 0x34
 800e09c:	ed82 7a08 	vstr	s14, [r2, #32]
 800e0a0:	eee6 7ae1 	vfms.f32	s15, s13, s3
 800e0a4:	f1ae 0e04 	sub.w	lr, lr, #4
 800e0a8:	fba3 a30e 	umull	sl, r3, r3, lr
 800e0ac:	edd9 6a08 	vldr	s13, [r9, #32]
 800e0b0:	ed91 5a03 	vldr	s10, [r1, #12]
 800e0b4:	eea6 7ac2 	vfms.f32	s14, s13, s4
 800e0b8:	ea4f 0393 	mov.w	r3, r3, lsr #2
 800e0bc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800e0c0:	eee5 7a25 	vfma.f32	s15, s10, s11
 800e0c4:	ebae 0303 	sub.w	r3, lr, r3
 800e0c8:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 800e0cc:	ed82 7a08 	vstr	s14, [r2, #32]
 800e0d0:	edc2 7a0d 	vstr	s15, [r2, #52]	; 0x34
 800e0d4:	edd1 6a08 	vldr	s13, [r1, #32]
 800e0d8:	ed91 5a0d 	vldr	s10, [r1, #52]	; 0x34
 800e0dc:	edd5 5a03 	vldr	s11, [r5, #12]
 800e0e0:	eea6 7ac3 	vfms.f32	s14, s13, s6
 800e0e4:	bf08      	it	eq
 800e0e6:	2701      	moveq	r7, #1
 800e0e8:	eb06 0300 	add.w	r3, r6, r0
 800e0ec:	eee5 7a62 	vfms.f32	s15, s10, s5
 800e0f0:	bf08      	it	eq
 800e0f2:	f884 7051 	strbeq.w	r7, [r4, #81]	; 0x51
 800e0f6:	4420      	add	r0, r4
 800e0f8:	ee37 7a25 	vadd.f32	s14, s14, s11
 800e0fc:	ee75 7aa7 	vadd.f32	s15, s11, s15
 800e100:	ed82 7a08 	vstr	s14, [r2, #32]
 800e104:	edc2 7a0d 	vstr	s15, [r2, #52]	; 0x34
 800e108:	edd5 6a08 	vldr	s13, [r5, #32]
 800e10c:	edd5 5a0d 	vldr	s11, [r5, #52]	; 0x34
 800e110:	eea6 7ac4 	vfms.f32	s14, s13, s8
 800e114:	f1bc 0f10 	cmp.w	ip, #16
 800e118:	eee5 7ae3 	vfms.f32	s15, s11, s7
 800e11c:	ee67 6a24 	vmul.f32	s13, s14, s9
 800e120:	ee27 6a86 	vmul.f32	s12, s15, s12
 800e124:	edc2 7a0d 	vstr	s15, [r2, #52]	; 0x34
 800e128:	ed83 6a00 	vstr	s12, [r3]
 800e12c:	ed82 7a08 	vstr	s14, [r2, #32]
 800e130:	edc0 6af7 	vstr	s13, [r0, #988]	; 0x3dc
 800e134:	f000 8084 	beq.w	800e240 <MotionAR_Update+0x490>
 800e138:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 800e13c:	f888 3000 	strb.w	r3, [r8]
 800e140:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 800e144:	e63c      	b.n	800ddc0 <MotionAR_Update+0x10>
 800e146:	2301      	movs	r3, #1
 800e148:	edc4 5a02 	vstr	s11, [r4, #8]
 800e14c:	edc4 6a03 	vstr	s13, [r4, #12]
 800e150:	ed84 7a04 	vstr	s14, [r4, #16]
 800e154:	6222      	str	r2, [r4, #32]
 800e156:	6062      	str	r2, [r4, #4]
 800e158:	62a3      	str	r3, [r4, #40]	; 0x28
 800e15a:	e697      	b.n	800de8c <MotionAR_Update+0xdc>
 800e15c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800e160:	700b      	strb	r3, [r1, #0]
 800e162:	b015      	add	sp, #84	; 0x54
 800e164:	ecbd 8b10 	vpop	{d8-d15}
 800e168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e16c:	20001b74 	.word	0x20001b74
 800e170:	411cf5c3 	.word	0x411cf5c3
 800e174:	20000160 	.word	0x20000160
 800e178:	aaaaaaab 	.word	0xaaaaaaab
 800e17c:	cccccccd 	.word	0xcccccccd
 800e180:	bdd0fac6 	.word	0xbdd0fac6
 800e184:	c03e849e 	.word	0xc03e849e
 800e188:	c01f623c 	.word	0xc01f623c
 800e18c:	405b071f 	.word	0x405b071f
 800e190:	4041cfc2 	.word	0x4041cfc2
 800e194:	bfe49f24 	.word	0xbfe49f24
 800e198:	bff02766 	.word	0xbff02766
 800e19c:	3eb60e3d 	.word	0x3eb60e3d
 800e1a0:	3f12f5b9 	.word	0x3f12f5b9
 800e1a4:	3a74b608 	.word	0x3a74b608
 800e1a8:	3cf5c28f 	.word	0x3cf5c28f
 800e1ac:	20002010 	.word	0x20002010
 800e1b0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800e1b4:	2280      	movs	r2, #128	; 0x80
 800e1b6:	4639      	mov	r1, r7
 800e1b8:	481d      	ldr	r0, [pc, #116]	; (800e230 <MotionAR_Update+0x480>)
 800e1ba:	60eb      	str	r3, [r5, #12]
 800e1bc:	622b      	str	r3, [r5, #32]
 800e1be:	636b      	str	r3, [r5, #52]	; 0x34
 800e1c0:	612b      	str	r3, [r5, #16]
 800e1c2:	626b      	str	r3, [r5, #36]	; 0x24
 800e1c4:	63ab      	str	r3, [r5, #56]	; 0x38
 800e1c6:	616b      	str	r3, [r5, #20]
 800e1c8:	62ab      	str	r3, [r5, #40]	; 0x28
 800e1ca:	63eb      	str	r3, [r5, #60]	; 0x3c
 800e1cc:	61ab      	str	r3, [r5, #24]
 800e1ce:	62eb      	str	r3, [r5, #44]	; 0x2c
 800e1d0:	642b      	str	r3, [r5, #64]	; 0x40
 800e1d2:	61eb      	str	r3, [r5, #28]
 800e1d4:	632b      	str	r3, [r5, #48]	; 0x30
 800e1d6:	646b      	str	r3, [r5, #68]	; 0x44
 800e1d8:	f884 7052 	strb.w	r7, [r4, #82]	; 0x52
 800e1dc:	f884 7051 	strb.w	r7, [r4, #81]	; 0x51
 800e1e0:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
 800e1e4:	f014 fb58 	bl	8022898 <memset>
 800e1e8:	eddf 7a12 	vldr	s15, [pc, #72]	; 800e234 <MotionAR_Update+0x484>
 800e1ec:	f8c4 70d8 	str.w	r7, [r4, #216]	; 0xd8
 800e1f0:	2301      	movs	r3, #1
 800e1f2:	2203      	movs	r2, #3
 800e1f4:	ee69 6a27 	vmul.f32	s13, s18, s15
 800e1f8:	ee28 7aa7 	vmul.f32	s14, s17, s15
 800e1fc:	f884 204f 	strb.w	r2, [r4, #79]	; 0x4f
 800e200:	4619      	mov	r1, r3
 800e202:	e9c4 770d 	strd	r7, r7, [r4, #52]	; 0x34
 800e206:	e9c4 770f 	strd	r7, r7, [r4, #60]	; 0x3c
 800e20a:	e9c4 7711 	strd	r7, r7, [r4, #68]	; 0x44
 800e20e:	f884 704e 	strb.w	r7, [r4, #78]	; 0x4e
 800e212:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 800e216:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 800e21a:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
 800e21e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 800e222:	ee68 7a27 	vmul.f32	s15, s16, s15
 800e226:	46bc      	mov	ip, r7
 800e228:	f04f 0e05 	mov.w	lr, #5
 800e22c:	463a      	mov	r2, r7
 800e22e:	e6b2      	b.n	800df96 <MotionAR_Update+0x1e6>
 800e230:	20001bcc 	.word	0x20001bcc
 800e234:	bdd0fac6 	.word	0xbdd0fac6
 800e238:	00000000 	.word	0x00000000
 800e23c:	3caaaaab 	.word	0x3caaaaab
 800e240:	2f00      	cmp	r7, #0
 800e242:	f43f af79 	beq.w	800e138 <MotionAR_Update+0x388>
 800e246:	ed1f 8a04 	vldr	s16, [pc, #-16]	; 800e238 <MotionAR_Update+0x488>
 800e24a:	f5a6 7940 	sub.w	r9, r6, #768	; 0x300
 800e24e:	f5a6 7a10 	sub.w	sl, r6, #576	; 0x240
 800e252:	f5a6 7770 	sub.w	r7, r6, #960	; 0x3c0
 800e256:	eeb0 9a48 	vmov.f32	s18, s16
 800e25a:	eef0 da48 	vmov.f32	s27, s16
 800e25e:	eef0 5a48 	vmov.f32	s11, s16
 800e262:	eef0 ea48 	vmov.f32	s29, s16
 800e266:	eef0 9a48 	vmov.f32	s19, s16
 800e26a:	eeb0 aa48 	vmov.f32	s20, s16
 800e26e:	eeb0 ba48 	vmov.f32	s22, s16
 800e272:	eef0 aa48 	vmov.f32	s21, s16
 800e276:	eef0 ca48 	vmov.f32	s25, s16
 800e27a:	eeb0 2a48 	vmov.f32	s4, s16
 800e27e:	eef0 1a48 	vmov.f32	s3, s16
 800e282:	eef0 2a48 	vmov.f32	s5, s16
 800e286:	46b3      	mov	fp, r6
 800e288:	463d      	mov	r5, r7
 800e28a:	46ce      	mov	lr, r9
 800e28c:	46cc      	mov	ip, r9
 800e28e:	4650      	mov	r0, sl
 800e290:	f50a 71c0 	add.w	r1, sl, #384	; 0x180
 800e294:	4632      	mov	r2, r6
 800e296:	f5a6 73c0 	sub.w	r3, r6, #384	; 0x180
 800e29a:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 800e29e:	ecf3 7a01 	vldmia	r3!, {s15}
 800e2a2:	ecb5 4a01 	vldmia	r5!, {s8}
 800e2a6:	ecfc 4a01 	vldmia	ip!, {s9}
 800e2aa:	ecb0 5a01 	vldmia	r0!, {s10}
 800e2ae:	ecf1 6a01 	vldmia	r1!, {s13}
 800e2b2:	ecb2 7a01 	vldmia	r2!, {s14}
 800e2b6:	eef4 eae7 	vcmpe.f32	s29, s15
 800e2ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2be:	eeb4 6ae7 	vcmpe.f32	s12, s15
 800e2c2:	bfb8      	it	lt
 800e2c4:	eef0 ea67 	vmovlt.f32	s29, s15
 800e2c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2cc:	bf88      	it	hi
 800e2ce:	eeb0 6a67 	vmovhi.f32	s12, s15
 800e2d2:	45ae      	cmp	lr, r5
 800e2d4:	ee7c caa7 	vadd.f32	s25, s25, s15
 800e2d8:	eee7 9aa7 	vfma.f32	s19, s15, s15
 800e2dc:	ee72 2a84 	vadd.f32	s5, s5, s8
 800e2e0:	eee4 aa04 	vfma.f32	s21, s8, s8
 800e2e4:	ee71 1aa4 	vadd.f32	s3, s3, s9
 800e2e8:	eea4 baa4 	vfma.f32	s22, s9, s9
 800e2ec:	ee32 2a05 	vadd.f32	s4, s4, s10
 800e2f0:	eea5 aa05 	vfma.f32	s20, s10, s10
 800e2f4:	ee75 5aa6 	vadd.f32	s11, s11, s13
 800e2f8:	eea6 9aa6 	vfma.f32	s18, s13, s13
 800e2fc:	ee7d da87 	vadd.f32	s27, s27, s14
 800e300:	eea7 8a07 	vfma.f32	s16, s14, s14
 800e304:	d1cb      	bne.n	800e29e <MotionAR_Update+0x4ee>
 800e306:	ed1f 1a33 	vldr	s2, [pc, #-204]	; 800e23c <MotionAR_Update+0x48c>
 800e30a:	edcd 5a02 	vstr	s11, [sp, #8]
 800e30e:	ee62 8a81 	vmul.f32	s17, s5, s2
 800e312:	ee62 ba01 	vmul.f32	s23, s4, s2
 800e316:	ee28 daa8 	vmul.f32	s26, s17, s17
 800e31a:	ee2b eaab 	vmul.f32	s28, s23, s23
 800e31e:	ee21 fa81 	vmul.f32	s30, s3, s2
 800e322:	ee7d fa0e 	vadd.f32	s31, s26, s28
 800e326:	ed8d 6a01 	vstr	s12, [sp, #4]
 800e32a:	eef1 7aef 	vsqrt.f32	s15, s31
 800e32e:	ed8d 1a00 	vstr	s2, [sp]
 800e332:	eecf 7a27 	vdiv.f32	s15, s30, s15
 800e336:	eeb0 cae8 	vabs.f32	s24, s17
 800e33a:	ee17 0a90 	vmov	r0, s15
 800e33e:	f7f2 f883 	bl	8000448 <__aeabi_f2d>
 800e342:	f012 faf1 	bl	8020928 <atan>
 800e346:	f7f2 fbcf 	bl	8000ae8 <__aeabi_d2f>
 800e34a:	eecc 7a2b 	vdiv.f32	s15, s24, s23
 800e34e:	9004      	str	r0, [sp, #16]
 800e350:	ee17 0a90 	vmov	r0, s15
 800e354:	f7f2 f878 	bl	8000448 <__aeabi_f2d>
 800e358:	f012 fae6 	bl	8020928 <atan>
 800e35c:	f7f2 fbc4 	bl	8000ae8 <__aeabi_d2f>
 800e360:	f8d4 20d8 	ldr.w	r2, [r4, #216]	; 0xd8
 800e364:	ed9d 1a00 	vldr	s2, [sp]
 800e368:	9003      	str	r0, [sp, #12]
 800e36a:	1c51      	adds	r1, r2, #1
 800e36c:	f1d1 0c00 	rsbs	ip, r1, #0
 800e370:	eb04 0082 	add.w	r0, r4, r2, lsl #2
 800e374:	f00c 0c07 	and.w	ip, ip, #7
 800e378:	4b84      	ldr	r3, [pc, #528]	; (800e58c <MotionAR_Update+0x7dc>)
 800e37a:	eddd 5a02 	vldr	s11, [sp, #8]
 800e37e:	ed9d 6a01 	vldr	s12, [sp, #4]
 800e382:	edc0 8a16 	vstr	s17, [r0, #88]	; 0x58
 800e386:	ee2c 1a81 	vmul.f32	s2, s25, s2
 800e38a:	f001 0107 	and.w	r1, r1, #7
 800e38e:	bf58      	it	pl
 800e390:	f1cc 0100 	rsbpl	r1, ip, #0
 800e394:	4684      	mov	ip, r0
 800e396:	ed80 fa1e 	vstr	s30, [r0, #120]	; 0x78
 800e39a:	edc0 ba26 	vstr	s23, [r0, #152]	; 0x98
 800e39e:	f8c4 10d8 	str.w	r1, [r4, #216]	; 0xd8
 800e3a2:	f103 0080 	add.w	r0, r3, #128	; 0x80
 800e3a6:	ed8c 1a2e 	vstr	s2, [ip, #184]	; 0xb8
 800e3aa:	a90c      	add	r1, sp, #48	; 0x30
 800e3ac:	aa10      	add	r2, sp, #64	; 0x40
 800e3ae:	edd3 7a00 	vldr	s15, [r3]
 800e3b2:	edd3 6a01 	vldr	s13, [r3, #4]
 800e3b6:	edc1 7a00 	vstr	s15, [r1]
 800e3ba:	eef4 6ae7 	vcmpe.f32	s13, s15
 800e3be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3c2:	eef4 6ae7 	vcmpe.f32	s13, s15
 800e3c6:	bfca      	itet	gt
 800e3c8:	eeb0 7a66 	vmovgt.f32	s14, s13
 800e3cc:	eeb0 7a67 	vmovle.f32	s14, s15
 800e3d0:	edc1 6a00 	vstrgt	s13, [r1]
 800e3d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3d8:	edc2 7a00 	vstr	s15, [r2]
 800e3dc:	bf44      	itt	mi
 800e3de:	eef0 7a66 	vmovmi.f32	s15, s13
 800e3e2:	edc2 6a00 	vstrmi	s13, [r2]
 800e3e6:	edd3 6a02 	vldr	s13, [r3, #8]
 800e3ea:	eef4 6ac7 	vcmpe.f32	s13, s14
 800e3ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3f2:	eef4 6ae7 	vcmpe.f32	s13, s15
 800e3f6:	bfc4      	itt	gt
 800e3f8:	eeb0 7a66 	vmovgt.f32	s14, s13
 800e3fc:	edc1 6a00 	vstrgt	s13, [r1]
 800e400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e404:	bf44      	itt	mi
 800e406:	eef0 7a66 	vmovmi.f32	s15, s13
 800e40a:	edc2 6a00 	vstrmi	s13, [r2]
 800e40e:	edd3 6a03 	vldr	s13, [r3, #12]
 800e412:	eef4 6ac7 	vcmpe.f32	s13, s14
 800e416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e41a:	eef4 6ae7 	vcmpe.f32	s13, s15
 800e41e:	bfc4      	itt	gt
 800e420:	eeb0 7a66 	vmovgt.f32	s14, s13
 800e424:	edc1 6a00 	vstrgt	s13, [r1]
 800e428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e42c:	bf44      	itt	mi
 800e42e:	eef0 7a66 	vmovmi.f32	s15, s13
 800e432:	edc2 6a00 	vstrmi	s13, [r2]
 800e436:	edd3 6a04 	vldr	s13, [r3, #16]
 800e43a:	eef4 6ac7 	vcmpe.f32	s13, s14
 800e43e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e442:	eef4 6ae7 	vcmpe.f32	s13, s15
 800e446:	bfc4      	itt	gt
 800e448:	eeb0 7a66 	vmovgt.f32	s14, s13
 800e44c:	edc1 6a00 	vstrgt	s13, [r1]
 800e450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e454:	bf44      	itt	mi
 800e456:	eef0 7a66 	vmovmi.f32	s15, s13
 800e45a:	edc2 6a00 	vstrmi	s13, [r2]
 800e45e:	edd3 6a05 	vldr	s13, [r3, #20]
 800e462:	eef4 6ac7 	vcmpe.f32	s13, s14
 800e466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e46a:	eef4 6ae7 	vcmpe.f32	s13, s15
 800e46e:	bfc4      	itt	gt
 800e470:	eeb0 7a66 	vmovgt.f32	s14, s13
 800e474:	edc1 6a00 	vstrgt	s13, [r1]
 800e478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e47c:	bf44      	itt	mi
 800e47e:	eef0 7a66 	vmovmi.f32	s15, s13
 800e482:	edc2 6a00 	vstrmi	s13, [r2]
 800e486:	edd3 6a06 	vldr	s13, [r3, #24]
 800e48a:	eef4 6ac7 	vcmpe.f32	s13, s14
 800e48e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e492:	eef4 6ae7 	vcmpe.f32	s13, s15
 800e496:	bfc4      	itt	gt
 800e498:	edc1 6a00 	vstrgt	s13, [r1]
 800e49c:	eeb0 7a66 	vmovgt.f32	s14, s13
 800e4a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4a4:	bf44      	itt	mi
 800e4a6:	edc2 6a00 	vstrmi	s13, [r2]
 800e4aa:	eef0 7a66 	vmovmi.f32	s15, s13
 800e4ae:	edd3 6a07 	vldr	s13, [r3, #28]
 800e4b2:	eef4 6ac7 	vcmpe.f32	s13, s14
 800e4b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4ba:	eef4 6ae7 	vcmpe.f32	s13, s15
 800e4be:	bfc8      	it	gt
 800e4c0:	edc1 6a00 	vstrgt	s13, [r1]
 800e4c4:	3320      	adds	r3, #32
 800e4c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4ca:	bf48      	it	mi
 800e4cc:	edc2 6a00 	vstrmi	s13, [r2]
 800e4d0:	4298      	cmp	r0, r3
 800e4d2:	f101 0104 	add.w	r1, r1, #4
 800e4d6:	f102 0204 	add.w	r2, r2, #4
 800e4da:	f47f af68 	bne.w	800e3ae <MotionAR_Update+0x5fe>
 800e4de:	ed9d 7a0c 	vldr	s14, [sp, #48]	; 0x30
 800e4e2:	ed9f 5a2b 	vldr	s10, [pc, #172]	; 800e590 <MotionAR_Update+0x7e0>
 800e4e6:	ed8d 7a06 	vstr	s14, [sp, #24]
 800e4ea:	ed9d 7a10 	vldr	s14, [sp, #64]	; 0x40
 800e4ee:	4929      	ldr	r1, [pc, #164]	; (800e594 <MotionAR_Update+0x7e4>)
 800e4f0:	ed8d 7a07 	vstr	s14, [sp, #28]
 800e4f4:	ed9d 7a0e 	vldr	s14, [sp, #56]	; 0x38
 800e4f8:	ed9f 4a27 	vldr	s8, [pc, #156]	; 800e598 <MotionAR_Update+0x7e8>
 800e4fc:	ed8d 7a00 	vstr	s14, [sp]
 800e500:	ed9d 7a12 	vldr	s14, [sp, #72]	; 0x48
 800e504:	ee6f ca0f 	vmul.f32	s25, s30, s30
 800e508:	ed8d 7a01 	vstr	s14, [sp, #4]
 800e50c:	ed9d 7a0f 	vldr	s14, [sp, #60]	; 0x3c
 800e510:	ee7f 6aac 	vadd.f32	s13, s31, s25
 800e514:	ed8d 7a02 	vstr	s14, [sp, #8]
 800e518:	ed9d 7a13 	vldr	s14, [sp, #76]	; 0x4c
 800e51c:	eddd fa0d 	vldr	s31, [sp, #52]	; 0x34
 800e520:	ed8d 7a05 	vstr	s14, [sp, #20]
 800e524:	eeb1 7ae6 	vsqrt.f32	s14, s13
 800e528:	2300      	movs	r3, #0
 800e52a:	461a      	mov	r2, r3
 800e52c:	f04f 0c03 	mov.w	ip, #3
 800e530:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e534:	eec7 0a87 	vdiv.f32	s1, s15, s14
 800e538:	eef1 4ac6 	vsqrt.f32	s9, s12
 800e53c:	eef1 3aee 	vsqrt.f32	s7, s29
 800e540:	ee61 7a41 	vnmul.f32	s15, s2, s2
 800e544:	ee65 5a85 	vmul.f32	s11, s11, s10
 800e548:	eee9 7a85 	vfma.f32	s15, s19, s10
 800e54c:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800e59c <MotionAR_Update+0x7ec>
 800e550:	ed94 6af7 	vldr	s12, [r4, #988]	; 0x3dc
 800e554:	edd6 6a00 	vldr	s13, [r6]
 800e558:	eddd ea11 	vldr	s29, [sp, #68]	; 0x44
 800e55c:	ee2d 5a85 	vmul.f32	s10, s27, s10
 800e560:	ee68 2aa0 	vmul.f32	s5, s17, s1
 800e564:	ee73 dae4 	vsub.f32	s27, s7, s9
 800e568:	ee2f 0a20 	vmul.f32	s0, s30, s1
 800e56c:	eeb0 2aeb 	vabs.f32	s4, s23
 800e570:	ee6b 0aa0 	vmul.f32	s1, s23, s1
 800e574:	eef0 1acf 	vabs.f32	s3, s30
 800e578:	ee67 ba87 	vmul.f32	s23, s15, s14
 800e57c:	ee36 6a65 	vsub.f32	s12, s12, s11
 800e580:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800e584:	eddf 4a06 	vldr	s9, [pc, #24]	; 800e5a0 <MotionAR_Update+0x7f0>
 800e588:	e00d      	b.n	800e5a6 <MotionAR_Update+0x7f6>
 800e58a:	bf00      	nop
 800e58c:	20001bcc 	.word	0x20001bcc
 800e590:	3caaaaab 	.word	0x3caaaaab
 800e594:	20001f50 	.word	0x20001f50
 800e598:	3ecccccd 	.word	0x3ecccccd
 800e59c:	447a0000 	.word	0x447a0000
 800e5a0:	3d0f5c29 	.word	0x3d0f5c29
 800e5a4:	46f4      	mov	ip, lr
 800e5a6:	edd1 7a01 	vldr	s15, [r1, #4]
 800e5aa:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800e5ae:	ee36 7a44 	vsub.f32	s14, s12, s8
 800e5b2:	ee77 3ac4 	vsub.f32	s7, s15, s8
 800e5b6:	ee37 3a84 	vadd.f32	s6, s15, s8
 800e5ba:	ee27 7a23 	vmul.f32	s14, s14, s7
 800e5be:	ee36 6a04 	vadd.f32	s12, s12, s8
 800e5c2:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800e5c6:	ed9b 7a01 	vldr	s14, [fp, #4]
 800e5ca:	ee26 6a03 	vmul.f32	s12, s12, s6
 800e5ce:	ee37 7a45 	vsub.f32	s14, s14, s10
 800e5d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5d6:	ee77 3a64 	vsub.f32	s7, s14, s9
 800e5da:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 800e5de:	ee36 6ae4 	vsub.f32	s12, s13, s9
 800e5e2:	bf48      	it	mi
 800e5e4:	3201      	addmi	r2, #1
 800e5e6:	ee26 6a23 	vmul.f32	s12, s12, s7
 800e5ea:	bf48      	it	mi
 800e5ec:	b2d2      	uxtbmi	r2, r2
 800e5ee:	ee77 3a24 	vadd.f32	s7, s14, s9
 800e5f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5f6:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800e5fa:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 800e5fe:	ed91 6a02 	vldr	s12, [r1, #8]
 800e602:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800e606:	ee36 6a65 	vsub.f32	s12, s12, s11
 800e60a:	bf44      	itt	mi
 800e60c:	3201      	addmi	r2, #1
 800e60e:	b2d2      	uxtbmi	r2, r2
 800e610:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800e614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e618:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800e61c:	ee76 6a44 	vsub.f32	s13, s12, s8
 800e620:	bf48      	it	mi
 800e622:	3301      	addmi	r3, #1
 800e624:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e628:	eddb 6a02 	vldr	s13, [fp, #8]
 800e62c:	bf48      	it	mi
 800e62e:	b2db      	uxtbmi	r3, r3
 800e630:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800e634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e638:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e63c:	ee76 7a04 	vadd.f32	s15, s12, s8
 800e640:	bf48      	it	mi
 800e642:	3301      	addmi	r3, #1
 800e644:	ee27 3a83 	vmul.f32	s6, s15, s6
 800e648:	ee37 7a64 	vsub.f32	s14, s14, s9
 800e64c:	ee76 7ae4 	vsub.f32	s15, s13, s9
 800e650:	bf48      	it	mi
 800e652:	b2db      	uxtbmi	r3, r3
 800e654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e658:	bf48      	it	mi
 800e65a:	3201      	addmi	r2, #1
 800e65c:	eeb5 3ac0 	vcmpe.f32	s6, #0.0
 800e660:	ee27 7a87 	vmul.f32	s14, s15, s14
 800e664:	ee76 7aa4 	vadd.f32	s15, s13, s9
 800e668:	bf48      	it	mi
 800e66a:	b2d2      	uxtbmi	r2, r2
 800e66c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e670:	bf48      	it	mi
 800e672:	3201      	addmi	r2, #1
 800e674:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800e678:	ee67 3aa3 	vmul.f32	s7, s15, s7
 800e67c:	bf48      	it	mi
 800e67e:	b2d2      	uxtbmi	r2, r2
 800e680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e684:	bf48      	it	mi
 800e686:	3301      	addmi	r3, #1
 800e688:	eef5 3ac0 	vcmpe.f32	s7, #0.0
 800e68c:	bf48      	it	mi
 800e68e:	b2db      	uxtbmi	r3, r3
 800e690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e694:	bf48      	it	mi
 800e696:	3301      	addmi	r3, #1
 800e698:	f10c 0e02 	add.w	lr, ip, #2
 800e69c:	bf48      	it	mi
 800e69e:	b2db      	uxtbmi	r3, r3
 800e6a0:	f1be 0f31 	cmp.w	lr, #49	; 0x31
 800e6a4:	f101 0108 	add.w	r1, r1, #8
 800e6a8:	f10b 0b08 	add.w	fp, fp, #8
 800e6ac:	fa5f f08c 	uxtb.w	r0, ip
 800e6b0:	f47f af78 	bne.w	800e5a4 <MotionAR_Update+0x7f4>
 800e6b4:	f10c 4180 	add.w	r1, ip, #1073741824	; 0x40000000
 800e6b8:	f1c0 002f 	rsb	r0, r0, #47	; 0x2f
 800e6bc:	fa5c fc80 	uxtab	ip, ip, r0
 800e6c0:	3901      	subs	r1, #1
 800e6c2:	48c3      	ldr	r0, [pc, #780]	; (800e9d0 <MotionAR_Update+0xc20>)
 800e6c4:	ed9f 6ac3 	vldr	s12, [pc, #780]	; 800e9d4 <MotionAR_Update+0xc24>
 800e6c8:	eddf 6ac3 	vldr	s13, [pc, #780]	; 800e9d8 <MotionAR_Update+0xc28>
 800e6cc:	0089      	lsls	r1, r1, #2
 800e6ce:	440e      	add	r6, r1
 800e6d0:	eb00 0e8c 	add.w	lr, r0, ip, lsl #2
 800e6d4:	4401      	add	r1, r0
 800e6d6:	edd1 7a00 	vldr	s15, [r1]
 800e6da:	3104      	adds	r1, #4
 800e6dc:	ed91 7a00 	vldr	s14, [r1]
 800e6e0:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800e6e4:	ee37 7a65 	vsub.f32	s14, s14, s11
 800e6e8:	ee37 4ac6 	vsub.f32	s8, s15, s12
 800e6ec:	ee77 4a46 	vsub.f32	s9, s14, s12
 800e6f0:	ee77 7a86 	vadd.f32	s15, s15, s12
 800e6f4:	ee37 7a06 	vadd.f32	s14, s14, s12
 800e6f8:	ee64 4a84 	vmul.f32	s9, s9, s8
 800e6fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e700:	46b4      	mov	ip, r6
 800e702:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 800e706:	3604      	adds	r6, #4
 800e708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e70c:	ed9c 7a00 	vldr	s14, [ip]
 800e710:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e714:	edd6 7a00 	vldr	s15, [r6]
 800e718:	ee37 7a45 	vsub.f32	s14, s14, s10
 800e71c:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800e720:	ee77 4a66 	vsub.f32	s9, s14, s13
 800e724:	ee37 4ae6 	vsub.f32	s8, s15, s13
 800e728:	bf48      	it	mi
 800e72a:	3201      	addmi	r2, #1
 800e72c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e730:	ee37 7a26 	vadd.f32	s14, s14, s13
 800e734:	ee64 4a84 	vmul.f32	s9, s9, s8
 800e738:	bf48      	it	mi
 800e73a:	b2d2      	uxtbmi	r2, r2
 800e73c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e740:	bf48      	it	mi
 800e742:	3201      	addmi	r2, #1
 800e744:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 800e748:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e74c:	bf48      	it	mi
 800e74e:	b2d2      	uxtbmi	r2, r2
 800e750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e754:	bf48      	it	mi
 800e756:	3301      	addmi	r3, #1
 800e758:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e75c:	bf48      	it	mi
 800e75e:	b2db      	uxtbmi	r3, r3
 800e760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e764:	bf44      	itt	mi
 800e766:	3301      	addmi	r3, #1
 800e768:	b2db      	uxtbmi	r3, r3
 800e76a:	4571      	cmp	r1, lr
 800e76c:	d1b3      	bne.n	800e6d6 <MotionAR_Update+0x926>
 800e76e:	eddf 5a9b 	vldr	s11, [pc, #620]	; 800e9dc <MotionAR_Update+0xc2c>
 800e772:	eeb0 5a65 	vmov.f32	s10, s11
 800e776:	eeb0 4a65 	vmov.f32	s8, s11
 800e77a:	eef0 4a65 	vmov.f32	s9, s11
 800e77e:	ecf9 7a01 	vldmia	r9!, {s15}
 800e782:	ecb7 6a01 	vldmia	r7!, {s12}
 800e786:	ecfa 6a01 	vldmia	sl!, {s13}
 800e78a:	ee20 7a27 	vmul.f32	s14, s0, s15
 800e78e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800e792:	eea2 7a86 	vfma.f32	s14, s5, s12
 800e796:	42bd      	cmp	r5, r7
 800e798:	eee6 7a06 	vfma.f32	s15, s12, s12
 800e79c:	eea0 7aa6 	vfma.f32	s14, s1, s13
 800e7a0:	eee6 7aa6 	vfma.f32	s15, s13, s13
 800e7a4:	eea7 5a07 	vfma.f32	s10, s14, s14
 800e7a8:	eee7 7a47 	vfms.f32	s15, s14, s14
 800e7ac:	eef0 6ac7 	vabs.f32	s13, s14
 800e7b0:	eef0 7ae7 	vabs.f32	s15, s15
 800e7b4:	eeb1 7ae7 	vsqrt.f32	s14, s15
 800e7b8:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800e7bc:	ee34 4a07 	vadd.f32	s8, s8, s14
 800e7c0:	ee74 4aa6 	vadd.f32	s9, s9, s13
 800e7c4:	d1db      	bne.n	800e77e <MotionAR_Update+0x9ce>
 800e7c6:	eddf 7a86 	vldr	s15, [pc, #536]	; 800e9e0 <MotionAR_Update+0xc30>
 800e7ca:	eef4 bae7 	vcmpe.f32	s23, s15
 800e7ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7d2:	f240 820c 	bls.w	800ebee <MotionAR_Update+0xe3e>
 800e7d6:	ee07 3a90 	vmov	s15, r3
 800e7da:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800e7de:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800e7e2:	eddf 6a80 	vldr	s13, [pc, #512]	; 800e9e4 <MotionAR_Update+0xc34>
 800e7e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e7ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7ee:	ee24 4a26 	vmul.f32	s8, s8, s13
 800e7f2:	d815      	bhi.n	800e820 <MotionAR_Update+0xa70>
 800e7f4:	eddf 7a7c 	vldr	s15, [pc, #496]	; 800e9e8 <MotionAR_Update+0xc38>
 800e7f8:	eeb4 9ae7 	vcmpe.f32	s18, s15
 800e7fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e800:	f200 83d1 	bhi.w	800efa6 <MotionAR_Update+0x11f6>
 800e804:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800e808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e80c:	f240 81ef 	bls.w	800ebee <MotionAR_Update+0xe3e>
 800e810:	eddf 7a76 	vldr	s15, [pc, #472]	; 800e9ec <MotionAR_Update+0xc3c>
 800e814:	eeb4 4ae7 	vcmpe.f32	s8, s15
 800e818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e81c:	f200 81e7 	bhi.w	800ebee <MotionAR_Update+0xe3e>
 800e820:	eddf 7a70 	vldr	s15, [pc, #448]	; 800e9e4 <MotionAR_Update+0xc34>
 800e824:	eddd 3a01 	vldr	s7, [sp, #4]
 800e828:	ed9d 6a00 	vldr	s12, [sp]
 800e82c:	ed9d 3a05 	vldr	s6, [sp, #20]
 800e830:	eedb ca27 	vfnms.f32	s25, s22, s15
 800e834:	ee65 6a27 	vmul.f32	s13, s10, s15
 800e838:	ee64 4aa7 	vmul.f32	s9, s9, s15
 800e83c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800e840:	ee9a daa7 	vfnms.f32	s26, s21, s15
 800e844:	ee9a ea27 	vfnms.f32	s28, s20, s15
 800e848:	eddf 7a69 	vldr	s15, [pc, #420]	; 800e9f0 <MotionAR_Update+0xc40>
 800e84c:	ed9f 5a69 	vldr	s10, [pc, #420]	; 800e9f4 <MotionAR_Update+0xc44>
 800e850:	ee6c caa7 	vmul.f32	s25, s25, s15
 800e854:	eee4 6ae4 	vfms.f32	s13, s9, s9
 800e858:	eee4 5a44 	vfms.f32	s11, s8, s8
 800e85c:	ee36 6a63 	vsub.f32	s12, s12, s7
 800e860:	eef4 cac5 	vcmpe.f32	s25, s10
 800e864:	eddd 3a02 	vldr	s7, [sp, #8]
 800e868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e86c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800e870:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800e874:	ee2d da27 	vmul.f32	s26, s26, s15
 800e878:	ee7f eaee 	vsub.f32	s29, s31, s29
 800e87c:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800e880:	ee6e 7a27 	vmul.f32	s15, s28, s15
 800e884:	f200 82e8 	bhi.w	800ee58 <MotionAR_Update+0x10a8>
 800e888:	ed9f 5a5b 	vldr	s10, [pc, #364]	; 800e9f8 <MotionAR_Update+0xc48>
 800e88c:	eeb4 2ac5 	vcmpe.f32	s4, s10
 800e890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e894:	f200 8400 	bhi.w	800f098 <MotionAR_Update+0x12e8>
 800e898:	ed9f 5a58 	vldr	s10, [pc, #352]	; 800e9fc <MotionAR_Update+0xc4c>
 800e89c:	ed9d 3a04 	vldr	s6, [sp, #16]
 800e8a0:	eeb4 3ac5 	vcmpe.f32	s6, s10
 800e8a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8a8:	f200 8586 	bhi.w	800f3b8 <MotionAR_Update+0x1608>
 800e8ac:	ed9f 6a54 	vldr	s12, [pc, #336]	; 800ea00 <MotionAR_Update+0xc50>
 800e8b0:	eeb4 8ac6 	vcmpe.f32	s16, s12
 800e8b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8b8:	f200 862f 	bhi.w	800f51a <MotionAR_Update+0x176a>
 800e8bc:	ed9f 6a51 	vldr	s12, [pc, #324]	; 800ea04 <MotionAR_Update+0xc54>
 800e8c0:	eeb4 3ac6 	vcmpe.f32	s6, s12
 800e8c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8c8:	d907      	bls.n	800e8da <MotionAR_Update+0xb2a>
 800e8ca:	ed9f 6a4f 	vldr	s12, [pc, #316]	; 800ea08 <MotionAR_Update+0xc58>
 800e8ce:	eeb4 4ac6 	vcmpe.f32	s8, s12
 800e8d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8d6:	f200 81f1 	bhi.w	800ecbc <MotionAR_Update+0xf0c>
 800e8da:	eddf 7a4c 	vldr	s15, [pc, #304]	; 800ea0c <MotionAR_Update+0xc5c>
 800e8de:	eeb4 2ae7 	vcmpe.f32	s4, s15
 800e8e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8e6:	f200 83fa 	bhi.w	800f0de <MotionAR_Update+0x132e>
 800e8ea:	eddf 7a49 	vldr	s15, [pc, #292]	; 800ea10 <MotionAR_Update+0xc60>
 800e8ee:	eeb4 cae7 	vcmpe.f32	s24, s15
 800e8f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8f6:	f200 8267 	bhi.w	800edc8 <MotionAR_Update+0x1018>
 800e8fa:	eddf 7a46 	vldr	s15, [pc, #280]	; 800ea14 <MotionAR_Update+0xc64>
 800e8fe:	eef4 1ae7 	vcmpe.f32	s3, s15
 800e902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e906:	f200 85c4 	bhi.w	800f492 <MotionAR_Update+0x16e2>
 800e90a:	eddf 7a43 	vldr	s15, [pc, #268]	; 800ea18 <MotionAR_Update+0xc68>
 800e90e:	eeb4 cae7 	vcmpe.f32	s24, s15
 800e912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e916:	d90e      	bls.n	800e936 <MotionAR_Update+0xb86>
 800e918:	eddf 7a40 	vldr	s15, [pc, #256]	; 800ea1c <MotionAR_Update+0xc6c>
 800e91c:	eef4 9ae7 	vcmpe.f32	s19, s15
 800e920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e924:	d807      	bhi.n	800e936 <MotionAR_Update+0xb86>
 800e926:	eddf 7a3e 	vldr	s15, [pc, #248]	; 800ea20 <MotionAR_Update+0xc70>
 800e92a:	eeb4 1ae7 	vcmpe.f32	s2, s15
 800e92e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e932:	f200 8268 	bhi.w	800ee06 <MotionAR_Update+0x1056>
 800e936:	2300      	movs	r3, #0
 800e938:	2505      	movs	r5, #5
 800e93a:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 800e93e:	eef4 bae7 	vcmpe.f32	s23, s15
 800e942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e946:	f100 87b5 	bmi.w	800f8b4 <MotionAR_Update+0x1b04>
 800e94a:	ed9d 8a04 	vldr	s16, [sp, #16]
 800e94e:	ee18 0a10 	vmov	r0, s16
 800e952:	f7f1 fd79 	bl	8000448 <__aeabi_f2d>
 800e956:	a31c      	add	r3, pc, #112	; (adr r3, 800e9c8 <MotionAR_Update+0xc18>)
 800e958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e95c:	f7f2 f85c 	bl	8000a18 <__aeabi_dcmpgt>
 800e960:	b128      	cbz	r0, 800e96e <MotionAR_Update+0xbbe>
 800e962:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800e966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e96a:	f100 83fa 	bmi.w	800f162 <MotionAR_Update+0x13b2>
 800e96e:	e9d4 360d 	ldrd	r3, r6, [r4, #52]	; 0x34
 800e972:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	; 0x3c
 800e976:	0058      	lsls	r0, r3, #1
 800e978:	0049      	lsls	r1, r1, #1
 800e97a:	0073      	lsls	r3, r6, #1
 800e97c:	0052      	lsls	r2, r2, #1
 800e97e:	f000 0002 	and.w	r0, r0, #2
 800e982:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800e986:	f001 017e 	and.w	r1, r1, #126	; 0x7e
 800e98a:	f002 027e 	and.w	r2, r2, #126	; 0x7e
 800e98e:	2d01      	cmp	r5, #1
 800e990:	e9c4 030d 	strd	r0, r3, [r4, #52]	; 0x34
 800e994:	e9c4 120f 	strd	r1, r2, [r4, #60]	; 0x3c
 800e998:	f000 82ca 	beq.w	800ef30 <MotionAR_Update+0x1180>
 800e99c:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800e99e:	4f21      	ldr	r7, [pc, #132]	; (800ea24 <MotionAR_Update+0xc74>)
 800e9a0:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 800e9a2:	ea07 0040 	and.w	r0, r7, r0, lsl #1
 800e9a6:	ea07 0646 	and.w	r6, r7, r6, lsl #1
 800e9aa:	3d03      	subs	r5, #3
 800e9ac:	e9c4 0611 	strd	r0, r6, [r4, #68]	; 0x44
 800e9b0:	2d03      	cmp	r5, #3
 800e9b2:	f200 80e4 	bhi.w	800eb7e <MotionAR_Update+0xdce>
 800e9b6:	e8df f015 	tbh	[pc, r5, lsl #1]
 800e9ba:	00dd      	.short	0x00dd
 800e9bc:	00e70075 	.word	0x00e70075
 800e9c0:	02e1      	.short	0x02e1
 800e9c2:	bf00      	nop
 800e9c4:	f3af 8000 	nop.w
 800e9c8:	c985f06f 	.word	0xc985f06f
 800e9cc:	bfe0c154 	.word	0xbfe0c154
 800e9d0:	20001f50 	.word	0x20001f50
 800e9d4:	3ecccccd 	.word	0x3ecccccd
 800e9d8:	3d0f5c29 	.word	0x3d0f5c29
 800e9dc:	00000000 	.word	0x00000000
 800e9e0:	3f422307 	.word	0x3f422307
 800e9e4:	3caaaaab 	.word	0x3caaaaab
 800e9e8:	3bb4b72c 	.word	0x3bb4b72c
 800e9ec:	3e21b4fe 	.word	0x3e21b4fe
 800e9f0:	447a0000 	.word	0x447a0000
 800e9f4:	40616751 	.word	0x40616751
 800e9f8:	3e8f3d9f 	.word	0x3e8f3d9f
 800e9fc:	3f8c5a3e 	.word	0x3f8c5a3e
 800ea00:	423e5c56 	.word	0x423e5c56
 800ea04:	bf5bfe6d 	.word	0xbf5bfe6d
 800ea08:	3d90afe6 	.word	0x3d90afe6
 800ea0c:	3f717215 	.word	0x3f717215
 800ea10:	3f2c47d4 	.word	0x3f2c47d4
 800ea14:	3f79dd3c 	.word	0x3f79dd3c
 800ea18:	3f1ba344 	.word	0x3f1ba344
 800ea1c:	4244530d 	.word	0x4244530d
 800ea20:	3f71308c 	.word	0x3f71308c
 800ea24:	3ffffffe 	.word	0x3ffffffe
 800ea28:	3f87955f 	.word	0x3f87955f
 800ea2c:	3e1687f4 	.word	0x3e1687f4
 800ea30:	3f2357b4 	.word	0x3f2357b4
 800ea34:	3eb72629 	.word	0x3eb72629
 800ea38:	3f7357e6 	.word	0x3f7357e6
 800ea3c:	3e4ccccd 	.word	0x3e4ccccd
 800ea40:	3eb33333 	.word	0x3eb33333
 800ea44:	3f769cbb 	.word	0x3f769cbb
 800ea48:	3eec853c 	.word	0x3eec853c
 800ea4c:	3ef8f649 	.word	0x3ef8f649
 800ea50:	3d944f5d 	.word	0x3d944f5d
 800ea54:	42c349cd 	.word	0x42c349cd
 800ea58:	bf83bc34 	.word	0xbf83bc34
 800ea5c:	4466c816 	.word	0x4466c816
 800ea60:	401bd38d 	.word	0x401bd38d
 800ea64:	3e1f9054 	.word	0x3e1f9054
 800ea68:	413ad4c0 	.word	0x413ad4c0
 800ea6c:	3f48522f 	.word	0x3f48522f
 800ea70:	3f796c94 	.word	0x3f796c94
 800ea74:	42369e86 	.word	0x42369e86
 800ea78:	43ede040 	.word	0x43ede040
 800ea7c:	43d505fe 	.word	0x43d505fe
 800ea80:	3f9fb20c 	.word	0x3f9fb20c
 800ea84:	41c1fda4 	.word	0x41c1fda4
 800ea88:	41a16439 	.word	0x41a16439
 800ea8c:	3f3065c7 	.word	0x3f3065c7
 800ea90:	3ec0d152 	.word	0x3ec0d152
 800ea94:	3e8d27e5 	.word	0x3e8d27e5
 800ea98:	3e2b5e0f 	.word	0x3e2b5e0f
 800ea9c:	3f8a3c5c 	.word	0x3f8a3c5c
 800eaa0:	3e60917d 	.word	0x3e60917d
 800eaa4:	3201      	adds	r2, #1
 800eaa6:	f894 004d 	ldrb.w	r0, [r4, #77]	; 0x4d
 800eaaa:	6422      	str	r2, [r4, #64]	; 0x40
 800eaac:	f894 604f 	ldrb.w	r6, [r4, #79]	; 0x4f
 800eab0:	2e00      	cmp	r6, #0
 800eab2:	f000 81bf 	beq.w	800ee34 <MotionAR_Update+0x1084>
 800eab6:	2500      	movs	r5, #0
 800eab8:	462f      	mov	r7, r5
 800eaba:	f013 0f01 	tst.w	r3, #1
 800eabe:	f105 0501 	add.w	r5, r5, #1
 800eac2:	bf18      	it	ne
 800eac4:	3701      	addne	r7, #1
 800eac6:	fa5f fc85 	uxtb.w	ip, r5
 800eaca:	bf18      	it	ne
 800eacc:	b2ff      	uxtbne	r7, r7
 800eace:	4566      	cmp	r6, ip
 800ead0:	ea4f 0353 	mov.w	r3, r3, lsr #1
 800ead4:	d8f1      	bhi.n	800eaba <MotionAR_Update+0xd0a>
 800ead6:	42be      	cmp	r6, r7
 800ead8:	f000 81ac 	beq.w	800ee34 <MotionAR_Update+0x1084>
 800eadc:	2300      	movs	r3, #0
 800eade:	461d      	mov	r5, r3
 800eae0:	f011 0f01 	tst.w	r1, #1
 800eae4:	f103 0301 	add.w	r3, r3, #1
 800eae8:	bf18      	it	ne
 800eaea:	3501      	addne	r5, #1
 800eaec:	b2df      	uxtb	r7, r3
 800eaee:	bf18      	it	ne
 800eaf0:	b2ed      	uxtbne	r5, r5
 800eaf2:	42be      	cmp	r6, r7
 800eaf4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800eaf8:	d8f2      	bhi.n	800eae0 <MotionAR_Update+0xd30>
 800eafa:	42ae      	cmp	r6, r5
 800eafc:	f000 8243 	beq.w	800ef86 <MotionAR_Update+0x11d6>
 800eb00:	2300      	movs	r3, #0
 800eb02:	4619      	mov	r1, r3
 800eb04:	f012 0f01 	tst.w	r2, #1
 800eb08:	f103 0301 	add.w	r3, r3, #1
 800eb0c:	bf18      	it	ne
 800eb0e:	3101      	addne	r1, #1
 800eb10:	b2dd      	uxtb	r5, r3
 800eb12:	bf18      	it	ne
 800eb14:	b2c9      	uxtbne	r1, r1
 800eb16:	42ae      	cmp	r6, r5
 800eb18:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800eb1c:	d8f2      	bhi.n	800eb04 <MotionAR_Update+0xd54>
 800eb1e:	428e      	cmp	r6, r1
 800eb20:	f000 8226 	beq.w	800ef70 <MotionAR_Update+0x11c0>
 800eb24:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800eb26:	231e      	movs	r3, #30
 800eb28:	2100      	movs	r1, #0
 800eb2a:	f012 0f01 	tst.w	r2, #1
 800eb2e:	bf18      	it	ne
 800eb30:	3101      	addne	r1, #1
 800eb32:	f103 33ff 	add.w	r3, r3, #4294967295
 800eb36:	bf18      	it	ne
 800eb38:	b2c9      	uxtbne	r1, r1
 800eb3a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 800eb3e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800eb42:	d1f2      	bne.n	800eb2a <MotionAR_Update+0xd7a>
 800eb44:	2917      	cmp	r1, #23
 800eb46:	d970      	bls.n	800ec2a <MotionAR_Update+0xe7a>
 800eb48:	2305      	movs	r3, #5
 800eb4a:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
 800eb4e:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 800eb52:	3801      	subs	r0, #1
 800eb54:	2803      	cmp	r0, #3
 800eb56:	d806      	bhi.n	800eb66 <MotionAR_Update+0xdb6>
 800eb58:	2200      	movs	r2, #0
 800eb5a:	e9c4 220e 	strd	r2, r2, [r4, #56]	; 0x38
 800eb5e:	2105      	movs	r1, #5
 800eb60:	f884 104f 	strb.w	r1, [r4, #79]	; 0x4f
 800eb64:	6422      	str	r2, [r4, #64]	; 0x40
 800eb66:	2200      	movs	r2, #0
 800eb68:	f884 204e 	strb.w	r2, [r4, #78]	; 0x4e
 800eb6c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 800eb70:	f7ff bae4 	b.w	800e13c <MotionAR_Update+0x38c>
 800eb74:	3101      	adds	r1, #1
 800eb76:	63e1      	str	r1, [r4, #60]	; 0x3c
 800eb78:	f894 004d 	ldrb.w	r0, [r4, #77]	; 0x4d
 800eb7c:	e796      	b.n	800eaac <MotionAR_Update+0xcfc>
 800eb7e:	3301      	adds	r3, #1
 800eb80:	63a3      	str	r3, [r4, #56]	; 0x38
 800eb82:	f894 004d 	ldrb.w	r0, [r4, #77]	; 0x4d
 800eb86:	e791      	b.n	800eaac <MotionAR_Update+0xcfc>
 800eb88:	3001      	adds	r0, #1
 800eb8a:	6460      	str	r0, [r4, #68]	; 0x44
 800eb8c:	f894 004d 	ldrb.w	r0, [r4, #77]	; 0x4d
 800eb90:	e78c      	b.n	800eaac <MotionAR_Update+0xcfc>
 800eb92:	ed5f 7a5b 	vldr	s15, [pc, #-364]	; 800ea28 <MotionAR_Update+0xc78>
 800eb96:	eeb4 1ae7 	vcmpe.f32	s2, s15
 800eb9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb9e:	f200 81b2 	bhi.w	800ef06 <MotionAR_Update+0x1156>
 800eba2:	ed5f 7a5e 	vldr	s15, [pc, #-376]	; 800ea2c <MotionAR_Update+0xc7c>
 800eba6:	eeb4 cae7 	vcmpe.f32	s24, s15
 800ebaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebae:	f200 83fa 	bhi.w	800f3a6 <MotionAR_Update+0x15f6>
 800ebb2:	ed5f 7a61 	vldr	s15, [pc, #-388]	; 800ea30 <MotionAR_Update+0xc80>
 800ebb6:	eef4 cae7 	vcmpe.f32	s25, s15
 800ebba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebbe:	f200 84b6 	bhi.w	800f52e <MotionAR_Update+0x177e>
 800ebc2:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800ebc6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ebca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebce:	d90e      	bls.n	800ebee <MotionAR_Update+0xe3e>
 800ebd0:	ed5f 7a68 	vldr	s15, [pc, #-416]	; 800ea34 <MotionAR_Update+0xc84>
 800ebd4:	eef4 1ae7 	vcmpe.f32	s3, s15
 800ebd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebdc:	d907      	bls.n	800ebee <MotionAR_Update+0xe3e>
 800ebde:	ed5f 7a6a 	vldr	s15, [pc, #-424]	; 800ea38 <MotionAR_Update+0xc88>
 800ebe2:	eeb4 2ae7 	vcmpe.f32	s4, s15
 800ebe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebea:	f240 818c 	bls.w	800ef06 <MotionAR_Update+0x1156>
 800ebee:	23fc      	movs	r3, #252	; 0xfc
 800ebf0:	2501      	movs	r5, #1
 800ebf2:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 800ebf6:	eef4 bae7 	vcmpe.f32	s23, s15
 800ebfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebfe:	f57f aeb6 	bpl.w	800e96e <MotionAR_Update+0xbbe>
 800ec02:	ed5f 7a72 	vldr	s15, [pc, #-456]	; 800ea3c <MotionAR_Update+0xc8c>
 800ec06:	eeb4 cae7 	vcmpe.f32	s24, s15
 800ec0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec0e:	f57f aeae 	bpl.w	800e96e <MotionAR_Update+0xbbe>
 800ec12:	ed5f 7a75 	vldr	s15, [pc, #-468]	; 800ea40 <MotionAR_Update+0xc90>
 800ec16:	eef4 1ae7 	vcmpe.f32	s3, s15
 800ec1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec1e:	f100 81b8 	bmi.w	800ef92 <MotionAR_Update+0x11e2>
 800ec22:	2b01      	cmp	r3, #1
 800ec24:	f67f ae91 	bls.w	800e94a <MotionAR_Update+0xb9a>
 800ec28:	e6a1      	b.n	800e96e <MotionAR_Update+0xbbe>
 800ec2a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ec2c:	221e      	movs	r2, #30
 800ec2e:	f011 0f01 	tst.w	r1, #1
 800ec32:	bf18      	it	ne
 800ec34:	3301      	addne	r3, #1
 800ec36:	f102 32ff 	add.w	r2, r2, #4294967295
 800ec3a:	bf18      	it	ne
 800ec3c:	b2db      	uxtbne	r3, r3
 800ec3e:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 800ec42:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800ec46:	d1f2      	bne.n	800ec2e <MotionAR_Update+0xe7e>
 800ec48:	2b17      	cmp	r3, #23
 800ec4a:	f240 80aa 	bls.w	800eda2 <MotionAR_Update+0xff2>
 800ec4e:	2306      	movs	r3, #6
 800ec50:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
 800ec54:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 800ec58:	e77b      	b.n	800eb52 <MotionAR_Update+0xda2>
 800ec5a:	ed1f 5a86 	vldr	s10, [pc, #-536]	; 800ea44 <MotionAR_Update+0xc94>
 800ec5e:	eef4 4ac5 	vcmpe.f32	s9, s10
 800ec62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec66:	f200 851e 	bhi.w	800f6a6 <MotionAR_Update+0x18f6>
 800ec6a:	ed1f 5a89 	vldr	s10, [pc, #-548]	; 800ea48 <MotionAR_Update+0xc98>
 800ec6e:	eef4 1ac5 	vcmpe.f32	s3, s10
 800ec72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec76:	d921      	bls.n	800ecbc <MotionAR_Update+0xf0c>
 800ec78:	ed1f 5a8c 	vldr	s10, [pc, #-560]	; 800ea4c <MotionAR_Update+0xc9c>
 800ec7c:	eeb4 2ac5 	vcmpe.f32	s4, s10
 800ec80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec84:	f63f ae29 	bhi.w	800e8da <MotionAR_Update+0xb2a>
 800ec88:	ed1f 5a8f 	vldr	s10, [pc, #-572]	; 800ea50 <MotionAR_Update+0xca0>
 800ec8c:	eeb4 6ac5 	vcmpe.f32	s12, s10
 800ec90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec94:	f67f ae21 	bls.w	800e8da <MotionAR_Update+0xb2a>
 800ec98:	ed1f 6a92 	vldr	s12, [pc, #-584]	; 800ea54 <MotionAR_Update+0xca4>
 800ec9c:	eeb4 8ac6 	vcmpe.f32	s16, s12
 800eca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eca4:	f63f ae19 	bhi.w	800e8da <MotionAR_Update+0xb2a>
 800eca8:	ed1f 6a95 	vldr	s12, [pc, #-596]	; 800ea58 <MotionAR_Update+0xca8>
 800ecac:	ed9d 5a03 	vldr	s10, [sp, #12]
 800ecb0:	eeb4 5ac6 	vcmpe.f32	s10, s12
 800ecb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecb8:	f67f ae0f 	bls.w	800e8da <MotionAR_Update+0xb2a>
 800ecbc:	ed1f 5a99 	vldr	s10, [pc, #-612]	; 800ea5c <MotionAR_Update+0xcac>
 800ecc0:	ee06 2a10 	vmov	s12, r2
 800ecc4:	eef4 6ac5 	vcmpe.f32	s13, s10
 800ecc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eccc:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 800ecd0:	f200 811c 	bhi.w	800ef0c <MotionAR_Update+0x115c>
 800ecd4:	ed1f 5a9e 	vldr	s10, [pc, #-632]	; 800ea60 <MotionAR_Update+0xcb0>
 800ecd8:	eeb4 9ac5 	vcmpe.f32	s18, s10
 800ecdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ece0:	f200 8216 	bhi.w	800f110 <MotionAR_Update+0x1360>
 800ece4:	ed1f 5aa1 	vldr	s10, [pc, #-644]	; 800ea64 <MotionAR_Update+0xcb4>
 800ece8:	eeb4 2ac5 	vcmpe.f32	s4, s10
 800ecec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecf0:	f200 8350 	bhi.w	800f394 <MotionAR_Update+0x15e4>
 800ecf4:	ed1f 5aa4 	vldr	s10, [pc, #-656]	; 800ea68 <MotionAR_Update+0xcb8>
 800ecf8:	eef4 7ac5 	vcmpe.f32	s15, s10
 800ecfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed00:	d816      	bhi.n	800ed30 <MotionAR_Update+0xf80>
 800ed02:	ed1f 5aa6 	vldr	s10, [pc, #-664]	; 800ea6c <MotionAR_Update+0xcbc>
 800ed06:	eeb4 cac5 	vcmpe.f32	s24, s10
 800ed0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed0e:	d80f      	bhi.n	800ed30 <MotionAR_Update+0xf80>
 800ed10:	ed1f 5aa9 	vldr	s10, [pc, #-676]	; 800ea70 <MotionAR_Update+0xcc0>
 800ed14:	eef4 4ac5 	vcmpe.f32	s9, s10
 800ed18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed1c:	f63f addd 	bhi.w	800e8da <MotionAR_Update+0xb2a>
 800ed20:	ed1f 5aac 	vldr	s10, [pc, #-688]	; 800ea74 <MotionAR_Update+0xcc4>
 800ed24:	eeb4 8ac5 	vcmpe.f32	s16, s10
 800ed28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed2c:	f63f add5 	bhi.w	800e8da <MotionAR_Update+0xb2a>
 800ed30:	ed1f 5aaf 	vldr	s10, [pc, #-700]	; 800ea78 <MotionAR_Update+0xcc8>
 800ed34:	eef4 6ac5 	vcmpe.f32	s13, s10
 800ed38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed3c:	d866      	bhi.n	800ee0c <MotionAR_Update+0x105c>
 800ed3e:	ed5f 6ab1 	vldr	s13, [pc, #-708]	; 800ea7c <MotionAR_Update+0xccc>
 800ed42:	eeb4 dae6 	vcmpe.f32	s26, s13
 800ed46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed4a:	f200 8152 	bhi.w	800eff2 <MotionAR_Update+0x1242>
 800ed4e:	ed5f 6ab4 	vldr	s13, [pc, #-720]	; 800ea80 <MotionAR_Update+0xcd0>
 800ed52:	eef4 4ae6 	vcmpe.f32	s9, s13
 800ed56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed5a:	f200 82dd 	bhi.w	800f318 <MotionAR_Update+0x1568>
 800ed5e:	ed5f 6ab7 	vldr	s13, [pc, #-732]	; 800ea84 <MotionAR_Update+0xcd4>
 800ed62:	eeb4 9ae6 	vcmpe.f32	s18, s13
 800ed66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed6a:	f200 834b 	bhi.w	800f404 <MotionAR_Update+0x1654>
 800ed6e:	eef3 7a01 	vmov.f32	s15, #49	; 0x41880000  17.0
 800ed72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ed76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed7a:	d944      	bls.n	800ee06 <MotionAR_Update+0x1056>
 800ed7c:	ed5f 7abe 	vldr	s15, [pc, #-760]	; 800ea88 <MotionAR_Update+0xcd8>
 800ed80:	eeb4 9ae7 	vcmpe.f32	s18, s15
 800ed84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed88:	d93d      	bls.n	800ee06 <MotionAR_Update+0x1056>
 800ed8a:	ed5f 7ac0 	vldr	s15, [pc, #-768]	; 800ea8c <MotionAR_Update+0xcdc>
 800ed8e:	eeb4 cae7 	vcmpe.f32	s24, s15
 800ed92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed96:	bf95      	itete	ls
 800ed98:	23fd      	movls	r3, #253	; 0xfd
 800ed9a:	23fe      	movhi	r3, #254	; 0xfe
 800ed9c:	2502      	movls	r5, #2
 800ed9e:	2503      	movhi	r5, #3
 800eda0:	e727      	b.n	800ebf2 <MotionAR_Update+0xe42>
 800eda2:	2801      	cmp	r0, #1
 800eda4:	f040 8118 	bne.w	800efd8 <MotionAR_Update+0x1228>
 800eda8:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
 800edac:	3301      	adds	r3, #1
 800edae:	b2db      	uxtb	r3, r3
 800edb0:	2b78      	cmp	r3, #120	; 0x78
 800edb2:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
 800edb6:	f000 8111 	beq.w	800efdc <MotionAR_Update+0x122c>
 800edba:	f240 8320 	bls.w	800f3fe <MotionAR_Update+0x164e>
 800edbe:	2378      	movs	r3, #120	; 0x78
 800edc0:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
 800edc4:	2301      	movs	r3, #1
 800edc6:	e6d1      	b.n	800eb6c <MotionAR_Update+0xdbc>
 800edc8:	ed5f 7acf 	vldr	s15, [pc, #-828]	; 800ea90 <MotionAR_Update+0xce0>
 800edcc:	eef4 1ae7 	vcmpe.f32	s3, s15
 800edd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edd4:	f67f adaf 	bls.w	800e936 <MotionAR_Update+0xb86>
 800edd8:	ed5f 7ad2 	vldr	s15, [pc, #-840]	; 800ea94 <MotionAR_Update+0xce4>
 800eddc:	eeb4 2ae7 	vcmpe.f32	s4, s15
 800ede0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ede4:	f200 8404 	bhi.w	800f5f0 <MotionAR_Update+0x1840>
 800ede8:	ed5f 7ad5 	vldr	s15, [pc, #-852]	; 800ea98 <MotionAR_Update+0xce8>
 800edec:	eeb4 4ae7 	vcmpe.f32	s8, s15
 800edf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edf4:	d907      	bls.n	800ee06 <MotionAR_Update+0x1056>
 800edf6:	ed5f 7ad7 	vldr	s15, [pc, #-860]	; 800ea9c <MotionAR_Update+0xcec>
 800edfa:	eeb4 1ae7 	vcmpe.f32	s2, s15
 800edfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee02:	f63f ad98 	bhi.w	800e936 <MotionAR_Update+0xb86>
 800ee06:	23fd      	movs	r3, #253	; 0xfd
 800ee08:	2502      	movs	r5, #2
 800ee0a:	e6f2      	b.n	800ebf2 <MotionAR_Update+0xe42>
 800ee0c:	eef3 7a06 	vmov.f32	s15, #54	; 0x41b00000  22.0
 800ee10:	eeb4 6ae7 	vcmpe.f32	s12, s15
 800ee14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee18:	f200 810e 	bhi.w	800f038 <MotionAR_Update+0x1288>
 800ee1c:	ed5f 7ae0 	vldr	s15, [pc, #-896]	; 800eaa0 <MotionAR_Update+0xcf0>
 800ee20:	eef4 1ae7 	vcmpe.f32	s3, s15
 800ee24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee28:	d8ed      	bhi.n	800ee06 <MotionAR_Update+0x1056>
 800ee2a:	eddf 7adf 	vldr	s15, [pc, #892]	; 800f1a8 <MotionAR_Update+0x13f8>
 800ee2e:	eef4 cae7 	vcmpe.f32	s25, s15
 800ee32:	e7ae      	b.n	800ed92 <MotionAR_Update+0xfe2>
 800ee34:	2302      	movs	r3, #2
 800ee36:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
 800ee3a:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 800ee3e:	2801      	cmp	r0, #1
 800ee40:	d003      	beq.n	800ee4a <MotionAR_Update+0x109a>
 800ee42:	3805      	subs	r0, #5
 800ee44:	2801      	cmp	r0, #1
 800ee46:	f63f ae8e 	bhi.w	800eb66 <MotionAR_Update+0xdb6>
 800ee4a:	2200      	movs	r2, #0
 800ee4c:	2103      	movs	r1, #3
 800ee4e:	e9c4 2211 	strd	r2, r2, [r4, #68]	; 0x44
 800ee52:	f884 104f 	strb.w	r1, [r4, #79]	; 0x4f
 800ee56:	e686      	b.n	800eb66 <MotionAR_Update+0xdb6>
 800ee58:	ed9f 5ad4 	vldr	s10, [pc, #848]	; 800f1ac <MotionAR_Update+0x13fc>
 800ee5c:	eeb4 9ac5 	vcmpe.f32	s18, s10
 800ee60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee64:	f200 80ff 	bhi.w	800f066 <MotionAR_Update+0x12b6>
 800ee68:	ed9f 5ad1 	vldr	s10, [pc, #836]	; 800f1b0 <MotionAR_Update+0x1400>
 800ee6c:	eef4 6ac5 	vcmpe.f32	s13, s10
 800ee70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee74:	d929      	bls.n	800eeca <MotionAR_Update+0x111a>
 800ee76:	ed9f 5acf 	vldr	s10, [pc, #828]	; 800f1b4 <MotionAR_Update+0x1404>
 800ee7a:	eeb4 2ac5 	vcmpe.f32	s4, s10
 800ee7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee82:	f200 838e 	bhi.w	800f5a2 <MotionAR_Update+0x17f2>
 800ee86:	ed9f 5acc 	vldr	s10, [pc, #816]	; 800f1b8 <MotionAR_Update+0x1408>
 800ee8a:	eef4 7ac5 	vcmpe.f32	s15, s10
 800ee8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee92:	f200 83d5 	bhi.w	800f640 <MotionAR_Update+0x1890>
 800ee96:	ed9f 6ac9 	vldr	s12, [pc, #804]	; 800f1bc <MotionAR_Update+0x140c>
 800ee9a:	eeb4 cac6 	vcmpe.f32	s24, s12
 800ee9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eea2:	f63f af0b 	bhi.w	800ecbc <MotionAR_Update+0xf0c>
 800eea6:	ed9f 6ac6 	vldr	s12, [pc, #792]	; 800f1c0 <MotionAR_Update+0x1410>
 800eeaa:	ed9d 5a04 	vldr	s10, [sp, #16]
 800eeae:	eeb4 5ac6 	vcmpe.f32	s10, s12
 800eeb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eeb6:	f63f ad10 	bhi.w	800e8da <MotionAR_Update+0xb2a>
 800eeba:	ed9f 6ac2 	vldr	s12, [pc, #776]	; 800f1c4 <MotionAR_Update+0x1414>
 800eebe:	eef4 3ac6 	vcmpe.f32	s7, s12
 800eec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eec6:	f67f aef9 	bls.w	800ecbc <MotionAR_Update+0xf0c>
 800eeca:	eddf 7abf 	vldr	s15, [pc, #764]	; 800f1c8 <MotionAR_Update+0x1418>
 800eece:	eeb4 2ae7 	vcmpe.f32	s4, s15
 800eed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eed6:	f63f ae5c 	bhi.w	800eb92 <MotionAR_Update+0xde2>
 800eeda:	eddf 7abc 	vldr	s15, [pc, #752]	; 800f1cc <MotionAR_Update+0x141c>
 800eede:	eeb4 9ae7 	vcmpe.f32	s18, s15
 800eee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eee6:	d80e      	bhi.n	800ef06 <MotionAR_Update+0x1156>
 800eee8:	eddf 7ab9 	vldr	s15, [pc, #740]	; 800f1d0 <MotionAR_Update+0x1420>
 800eeec:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800eef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eef4:	d807      	bhi.n	800ef06 <MotionAR_Update+0x1156>
 800eef6:	eddf 7ab7 	vldr	s15, [pc, #732]	; 800f1d4 <MotionAR_Update+0x1424>
 800eefa:	eef4 cae7 	vcmpe.f32	s25, s15
 800eefe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef02:	f67f ae74 	bls.w	800ebee <MotionAR_Update+0xe3e>
 800ef06:	2301      	movs	r3, #1
 800ef08:	2506      	movs	r5, #6
 800ef0a:	e516      	b.n	800e93a <MotionAR_Update+0xb8a>
 800ef0c:	ed9f 5ab2 	vldr	s10, [pc, #712]	; 800f1d8 <MotionAR_Update+0x1428>
 800ef10:	eef4 6ac5 	vcmpe.f32	s13, s10
 800ef14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef18:	d807      	bhi.n	800ef2a <MotionAR_Update+0x117a>
 800ef1a:	ed9f 5ab0 	vldr	s10, [pc, #704]	; 800f1dc <MotionAR_Update+0x142c>
 800ef1e:	eeb4 cac5 	vcmpe.f32	s24, s10
 800ef22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef26:	f67f af03 	bls.w	800ed30 <MotionAR_Update+0xf80>
 800ef2a:	23ff      	movs	r3, #255	; 0xff
 800ef2c:	2504      	movs	r5, #4
 800ef2e:	e660      	b.n	800ebf2 <MotionAR_Update+0xe42>
 800ef30:	1c46      	adds	r6, r0, #1
 800ef32:	07f7      	lsls	r7, r6, #31
 800ef34:	6366      	str	r6, [r4, #52]	; 0x34
 800ef36:	f894 004d 	ldrb.w	r0, [r4, #77]	; 0x4d
 800ef3a:	f57f adb7 	bpl.w	800eaac <MotionAR_Update+0xcfc>
 800ef3e:	0876      	lsrs	r6, r6, #1
 800ef40:	f43f adb4 	beq.w	800eaac <MotionAR_Update+0xcfc>
 800ef44:	1e83      	subs	r3, r0, #2
 800ef46:	2b02      	cmp	r3, #2
 800ef48:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
 800ef4c:	f884 504d 	strb.w	r5, [r4, #77]	; 0x4d
 800ef50:	d803      	bhi.n	800ef5a <MotionAR_Update+0x11aa>
 800ef52:	2300      	movs	r3, #0
 800ef54:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 800ef58:	6423      	str	r3, [r4, #64]	; 0x40
 800ef5a:	3805      	subs	r0, #5
 800ef5c:	2801      	cmp	r0, #1
 800ef5e:	f63f af23 	bhi.w	800eda8 <MotionAR_Update+0xff8>
 800ef62:	e9d4 3211 	ldrd	r3, r2, [r4, #68]	; 0x44
 800ef66:	0e92      	lsrs	r2, r2, #26
 800ef68:	0e9b      	lsrs	r3, r3, #26
 800ef6a:	e9c4 3211 	strd	r3, r2, [r4, #68]	; 0x44
 800ef6e:	e71b      	b.n	800eda8 <MotionAR_Update+0xff8>
 800ef70:	2304      	movs	r3, #4
 800ef72:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
 800ef76:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 800ef7a:	e760      	b.n	800ee3e <MotionAR_Update+0x108e>
 800ef7c:	3601      	adds	r6, #1
 800ef7e:	64a6      	str	r6, [r4, #72]	; 0x48
 800ef80:	f894 004d 	ldrb.w	r0, [r4, #77]	; 0x4d
 800ef84:	e592      	b.n	800eaac <MotionAR_Update+0xcfc>
 800ef86:	2303      	movs	r3, #3
 800ef88:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
 800ef8c:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 800ef90:	e755      	b.n	800ee3e <MotionAR_Update+0x108e>
 800ef92:	eddf 7a93 	vldr	s15, [pc, #588]	; 800f1e0 <MotionAR_Update+0x1430>
 800ef96:	eeb4 2ae7 	vcmpe.f32	s4, s15
 800ef9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef9e:	f77f ae40 	ble.w	800ec22 <MotionAR_Update+0xe72>
 800efa2:	2501      	movs	r5, #1
 800efa4:	e4e3      	b.n	800e96e <MotionAR_Update+0xbbe>
 800efa6:	eddf 7a8f 	vldr	s15, [pc, #572]	; 800f1e4 <MotionAR_Update+0x1434>
 800efaa:	eeb4 9ae7 	vcmpe.f32	s18, s15
 800efae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efb2:	f67f ac35 	bls.w	800e820 <MotionAR_Update+0xa70>
 800efb6:	eddf 7a8c 	vldr	s15, [pc, #560]	; 800f1e8 <MotionAR_Update+0x1438>
 800efba:	eef4 bae7 	vcmpe.f32	s23, s15
 800efbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efc2:	f63f ac2d 	bhi.w	800e820 <MotionAR_Update+0xa70>
 800efc6:	eddf 7a89 	vldr	s15, [pc, #548]	; 800f1ec <MotionAR_Update+0x143c>
 800efca:	eef4 dae7 	vcmpe.f32	s27, s15
 800efce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efd2:	f63f ae0c 	bhi.w	800ebee <MotionAR_Update+0xe3e>
 800efd6:	e423      	b.n	800e820 <MotionAR_Update+0xa70>
 800efd8:	4603      	mov	r3, r0
 800efda:	e5c4      	b.n	800eb66 <MotionAR_Update+0xdb6>
 800efdc:	2300      	movs	r3, #0
 800efde:	2205      	movs	r2, #5
 800efe0:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 800efe4:	6423      	str	r3, [r4, #64]	; 0x40
 800efe6:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44
 800efea:	f884 204f 	strb.w	r2, [r4, #79]	; 0x4f
 800efee:	2301      	movs	r3, #1
 800eff0:	e5bc      	b.n	800eb6c <MotionAR_Update+0xdbc>
 800eff2:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 800f1f0 <MotionAR_Update+0x1440>
 800eff6:	eef4 9ac7 	vcmpe.f32	s19, s14
 800effa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800effe:	f67f af02 	bls.w	800ee06 <MotionAR_Update+0x1056>
 800f002:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 800f1f4 <MotionAR_Update+0x1444>
 800f006:	eef4 bac7 	vcmpe.f32	s23, s14
 800f00a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f00e:	f200 823b 	bhi.w	800f488 <MotionAR_Update+0x16d8>
 800f012:	ed9f 7a79 	vldr	s14, [pc, #484]	; 800f1f8 <MotionAR_Update+0x1448>
 800f016:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f01a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f01e:	d91f      	bls.n	800f060 <MotionAR_Update+0x12b0>
 800f020:	eddf 7a76 	vldr	s15, [pc, #472]	; 800f1fc <MotionAR_Update+0x144c>
 800f024:	eef4 1ae7 	vcmpe.f32	s3, s15
 800f028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f02c:	bf95      	itete	ls
 800f02e:	23fe      	movls	r3, #254	; 0xfe
 800f030:	23fd      	movhi	r3, #253	; 0xfd
 800f032:	2503      	movls	r5, #3
 800f034:	2502      	movhi	r5, #2
 800f036:	e5dc      	b.n	800ebf2 <MotionAR_Update+0xe42>
 800f038:	eddf 7a71 	vldr	s15, [pc, #452]	; 800f200 <MotionAR_Update+0x1450>
 800f03c:	eef4 5ae7 	vcmpe.f32	s11, s15
 800f040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f044:	d90c      	bls.n	800f060 <MotionAR_Update+0x12b0>
 800f046:	eddf 7a6f 	vldr	s15, [pc, #444]	; 800f204 <MotionAR_Update+0x1454>
 800f04a:	eef4 1ae7 	vcmpe.f32	s3, s15
 800f04e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f052:	f63f aed8 	bhi.w	800ee06 <MotionAR_Update+0x1056>
 800f056:	eddf 7a6c 	vldr	s15, [pc, #432]	; 800f208 <MotionAR_Update+0x1458>
 800f05a:	eef4 cae7 	vcmpe.f32	s25, s15
 800f05e:	e698      	b.n	800ed92 <MotionAR_Update+0xfe2>
 800f060:	23fe      	movs	r3, #254	; 0xfe
 800f062:	2503      	movs	r5, #3
 800f064:	e5c5      	b.n	800ebf2 <MotionAR_Update+0xe42>
 800f066:	ed9f 5a69 	vldr	s10, [pc, #420]	; 800f20c <MotionAR_Update+0x145c>
 800f06a:	eeb4 2ac5 	vcmpe.f32	s4, s10
 800f06e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f072:	f200 816e 	bhi.w	800f352 <MotionAR_Update+0x15a2>
 800f076:	ed9f 6a66 	vldr	s12, [pc, #408]	; 800f210 <MotionAR_Update+0x1460>
 800f07a:	eef4 7ac6 	vcmpe.f32	s15, s12
 800f07e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f082:	f200 826c 	bhi.w	800f55e <MotionAR_Update+0x17ae>
 800f086:	ed9f 6a63 	vldr	s12, [pc, #396]	; 800f214 <MotionAR_Update+0x1464>
 800f08a:	eef4 3ac6 	vcmpe.f32	s7, s12
 800f08e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f092:	f67f ac22 	bls.w	800e8da <MotionAR_Update+0xb2a>
 800f096:	e611      	b.n	800ecbc <MotionAR_Update+0xf0c>
 800f098:	ed9f 6a5f 	vldr	s12, [pc, #380]	; 800f218 <MotionAR_Update+0x1468>
 800f09c:	eeb4 1ac6 	vcmpe.f32	s2, s12
 800f0a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0a4:	f67f ac19 	bls.w	800e8da <MotionAR_Update+0xb2a>
 800f0a8:	ed9f 6a5c 	vldr	s12, [pc, #368]	; 800f21c <MotionAR_Update+0x146c>
 800f0ac:	eef4 7ac6 	vcmpe.f32	s15, s12
 800f0b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0b4:	f67f af09 	bls.w	800eeca <MotionAR_Update+0x111a>
 800f0b8:	ed9f 6a59 	vldr	s12, [pc, #356]	; 800f220 <MotionAR_Update+0x1470>
 800f0bc:	ed9d 5a03 	vldr	s10, [sp, #12]
 800f0c0:	eeb4 5ac6 	vcmpe.f32	s10, s12
 800f0c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0c8:	f63f aeff 	bhi.w	800eeca <MotionAR_Update+0x111a>
 800f0cc:	ed9f 6a55 	vldr	s12, [pc, #340]	; 800f224 <MotionAR_Update+0x1474>
 800f0d0:	eeb4 2ac6 	vcmpe.f32	s4, s12
 800f0d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0d8:	f67f aef7 	bls.w	800eeca <MotionAR_Update+0x111a>
 800f0dc:	e5ee      	b.n	800ecbc <MotionAR_Update+0xf0c>
 800f0de:	eef2 7a02 	vmov.f32	s15, #34	; 0x41100000  9.0
 800f0e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f0e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0ea:	f63f ae8c 	bhi.w	800ee06 <MotionAR_Update+0x1056>
 800f0ee:	eddf 7a4e 	vldr	s15, [pc, #312]	; 800f228 <MotionAR_Update+0x1478>
 800f0f2:	eef4 4ae7 	vcmpe.f32	s9, s15
 800f0f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0fa:	f63f ac1c 	bhi.w	800e936 <MotionAR_Update+0xb86>
 800f0fe:	eddf 7a4b 	vldr	s15, [pc, #300]	; 800f22c <MotionAR_Update+0x147c>
 800f102:	eeb4 cae7 	vcmpe.f32	s24, s15
 800f106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f10a:	f67f ae7c 	bls.w	800ee06 <MotionAR_Update+0x1056>
 800f10e:	e412      	b.n	800e936 <MotionAR_Update+0xb86>
 800f110:	ed9f 5a47 	vldr	s10, [pc, #284]	; 800f230 <MotionAR_Update+0x1480>
 800f114:	eeb4 dac5 	vcmpe.f32	s26, s10
 800f118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f11c:	f200 8166 	bhi.w	800f3ec <MotionAR_Update+0x163c>
 800f120:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 800f20c <MotionAR_Update+0x145c>
 800f124:	eeb4 2ac5 	vcmpe.f32	s4, s10
 800f128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f12c:	f200 81c3 	bhi.w	800f4b6 <MotionAR_Update+0x1706>
 800f130:	ed9f 5a62 	vldr	s10, [pc, #392]	; 800f2bc <MotionAR_Update+0x150c>
 800f134:	eeb4 dac5 	vcmpe.f32	s26, s10
 800f138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f13c:	f63f adf8 	bhi.w	800ed30 <MotionAR_Update+0xf80>
 800f140:	ed9f 5a5f 	vldr	s10, [pc, #380]	; 800f2c0 <MotionAR_Update+0x1510>
 800f144:	eeb4 2ac5 	vcmpe.f32	s4, s10
 800f148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f14c:	f63f abc5 	bhi.w	800e8da <MotionAR_Update+0xb2a>
 800f150:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800f234 <MotionAR_Update+0x1484>
 800f154:	eef4 7ac5 	vcmpe.f32	s15, s10
 800f158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f15c:	f67f abbd 	bls.w	800e8da <MotionAR_Update+0xb2a>
 800f160:	e5e6      	b.n	800ed30 <MotionAR_Update+0xf80>
 800f162:	ed9d 8a03 	vldr	s16, [sp, #12]
 800f166:	ee18 0a10 	vmov	r0, s16
 800f16a:	f7f1 f96d 	bl	8000448 <__aeabi_f2d>
 800f16e:	a30c      	add	r3, pc, #48	; (adr r3, 800f1a0 <MotionAR_Update+0x13f0>)
 800f170:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f174:	f7f1 fc50 	bl	8000a18 <__aeabi_dcmpgt>
 800f178:	2800      	cmp	r0, #0
 800f17a:	f43f abf8 	beq.w	800e96e <MotionAR_Update+0xbbe>
 800f17e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800f182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f186:	f57f abf2 	bpl.w	800e96e <MotionAR_Update+0xbbe>
 800f18a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f18e:	eef4 da67 	vcmp.f32	s27, s15
 800f192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f196:	bfc8      	it	gt
 800f198:	2502      	movgt	r5, #2
 800f19a:	f7ff bbe8 	b.w	800e96e <MotionAR_Update+0xbbe>
 800f19e:	bf00      	nop
 800f1a0:	c985f06f 	.word	0xc985f06f
 800f1a4:	bfd0c154 	.word	0xbfd0c154
 800f1a8:	432ec9d7 	.word	0x432ec9d7
 800f1ac:	401c3c97 	.word	0x401c3c97
 800f1b0:	40273283 	.word	0x40273283
 800f1b4:	3e687d2c 	.word	0x3e687d2c
 800f1b8:	40fa5810 	.word	0x40fa5810
 800f1bc:	3f1bd45a 	.word	0x3f1bd45a
 800f1c0:	bf7beea2 	.word	0xbf7beea2
 800f1c4:	3ca1ad64 	.word	0x3ca1ad64
 800f1c8:	3f706ad3 	.word	0x3f706ad3
 800f1cc:	3b23f898 	.word	0x3b23f898
 800f1d0:	423e299b 	.word	0x423e299b
 800f1d4:	3e340a28 	.word	0x3e340a28
 800f1d8:	447f0b35 	.word	0x447f0b35
 800f1dc:	3f198eeb 	.word	0x3f198eeb
 800f1e0:	3f6b851f 	.word	0x3f6b851f
 800f1e4:	3e582adc 	.word	0x3e582adc
 800f1e8:	418d11a2 	.word	0x418d11a2
 800f1ec:	3f2731a1 	.word	0x3f2731a1
 800f1f0:	43924eca 	.word	0x43924eca
 800f1f4:	454ce75c 	.word	0x454ce75c
 800f1f8:	43a02f9a 	.word	0x43a02f9a
 800f1fc:	3e378573 	.word	0x3e378573
 800f200:	4356e1f4 	.word	0x4356e1f4
 800f204:	3e88ddc6 	.word	0x3e88ddc6
 800f208:	43305732 	.word	0x43305732
 800f20c:	3e8d4196 	.word	0x3e8d4196
 800f210:	4076c1f0 	.word	0x4076c1f0
 800f214:	3e9bdc05 	.word	0x3e9bdc05
 800f218:	3f6e0fc3 	.word	0x3f6e0fc3
 800f21c:	4158480f 	.word	0x4158480f
 800f220:	bb6e06d9 	.word	0xbb6e06d9
 800f224:	3f5dc0db 	.word	0x3f5dc0db
 800f228:	3f837920 	.word	0x3f837920
 800f22c:	3e20d307 	.word	0x3e20d307
 800f230:	43cc23fa 	.word	0x43cc23fa
 800f234:	417205dd 	.word	0x417205dd
 800f238:	3f70cf3a 	.word	0x3f70cf3a
 800f23c:	3edc42ea 	.word	0x3edc42ea
 800f240:	43389c37 	.word	0x43389c37
 800f244:	41e542bd 	.word	0x41e542bd
 800f248:	41e6f0cf 	.word	0x41e6f0cf
 800f24c:	3f3136a4 	.word	0x3f3136a4
 800f250:	3d8626f6 	.word	0x3d8626f6
 800f254:	3f711c7e 	.word	0x3f711c7e
 800f258:	3f7ebde4 	.word	0x3f7ebde4
 800f25c:	3e4b5287 	.word	0x3e4b5287
 800f260:	3dca979e 	.word	0x3dca979e
 800f264:	3f08b7d4 	.word	0x3f08b7d4
 800f268:	3f016cc6 	.word	0x3f016cc6
 800f26c:	3eb4a298 	.word	0x3eb4a298
 800f270:	3f6d89ad 	.word	0x3f6d89ad
 800f274:	3ec71cda 	.word	0x3ec71cda
 800f278:	3f3a045c 	.word	0x3f3a045c
 800f27c:	421a344a 	.word	0x421a344a
 800f280:	3e28c9b8 	.word	0x3e28c9b8
 800f284:	42e1ab19 	.word	0x42e1ab19
 800f288:	44b0f028 	.word	0x44b0f028
 800f28c:	435b8ff3 	.word	0x435b8ff3
 800f290:	3e03a861 	.word	0x3e03a861
 800f294:	3f83136a 	.word	0x3f83136a
 800f298:	3e905f29 	.word	0x3e905f29
 800f29c:	3f2f3a47 	.word	0x3f2f3a47
 800f2a0:	3e8f3de2 	.word	0x3e8f3de2
 800f2a4:	3efb749b 	.word	0x3efb749b
 800f2a8:	40bd4e27 	.word	0x40bd4e27
 800f2ac:	3ebca44c 	.word	0x3ebca44c
 800f2b0:	3e8e2e2c 	.word	0x3e8e2e2c
 800f2b4:	424044a4 	.word	0x424044a4
 800f2b8:	3f7eb8fa 	.word	0x3f7eb8fa
 800f2bc:	416b5467 	.word	0x416b5467
 800f2c0:	3e2ffa3c 	.word	0x3e2ffa3c
 800f2c4:	41720ac2 	.word	0x41720ac2
 800f2c8:	3ee9ad86 	.word	0x3ee9ad86
 800f2cc:	3f6f9431 	.word	0x3f6f9431
 800f2d0:	3ca832ba 	.word	0x3ca832ba
 800f2d4:	3f1bf3bf 	.word	0x3f1bf3bf
 800f2d8:	3da87ebf 	.word	0x3da87ebf
 800f2dc:	3f7c8ede 	.word	0x3f7c8ede
 800f2e0:	3e5a1405 	.word	0x3e5a1405
 800f2e4:	438d932d 	.word	0x438d932d
 800f2e8:	3f86cfd9 	.word	0x3f86cfd9
 800f2ec:	3cd145d8 	.word	0x3cd145d8
 800f2f0:	3efe4580 	.word	0x3efe4580
 800f2f4:	4154d773 	.word	0x4154d773
 800f2f8:	bece6128 	.word	0xbece6128
 800f2fc:	3f0bae79 	.word	0x3f0bae79
 800f300:	41152be9 	.word	0x41152be9
 800f304:	3c797edc 	.word	0x3c797edc
 800f308:	3c861c7a 	.word	0x3c861c7a
 800f30c:	3f97cd70 	.word	0x3f97cd70
 800f310:	3e495810 	.word	0x3e495810
 800f314:	3e7f27fe 	.word	0x3e7f27fe
 800f318:	ed5f 7a39 	vldr	s15, [pc, #-228]	; 800f238 <MotionAR_Update+0x1488>
 800f31c:	eef4 1ae7 	vcmpe.f32	s3, s15
 800f320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f324:	f200 80a3 	bhi.w	800f46e <MotionAR_Update+0x16be>
 800f328:	eef3 7a07 	vmov.f32	s15, #55	; 0x41b80000  23.0
 800f32c:	eeb4 6ae7 	vcmpe.f32	s12, s15
 800f330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f334:	f63f ae94 	bhi.w	800f060 <MotionAR_Update+0x12b0>
 800f338:	ed5f 7a40 	vldr	s15, [pc, #-256]	; 800f23c <MotionAR_Update+0x148c>
 800f33c:	eef4 1ae7 	vcmpe.f32	s3, s15
 800f340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f344:	f63f ad5f 	bhi.w	800ee06 <MotionAR_Update+0x1056>
 800f348:	ed5f 7a43 	vldr	s15, [pc, #-268]	; 800f240 <MotionAR_Update+0x1490>
 800f34c:	eeb4 dae7 	vcmpe.f32	s26, s15
 800f350:	e51f      	b.n	800ed92 <MotionAR_Update+0xfe2>
 800f352:	ed1f 5a44 	vldr	s10, [pc, #-272]	; 800f244 <MotionAR_Update+0x1494>
 800f356:	eef4 7ac5 	vcmpe.f32	s15, s10
 800f35a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f35e:	f63f ac7c 	bhi.w	800ec5a <MotionAR_Update+0xeaa>
 800f362:	ed1f 6a47 	vldr	s12, [pc, #-284]	; 800f248 <MotionAR_Update+0x1498>
 800f366:	eef4 cac6 	vcmpe.f32	s25, s12
 800f36a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f36e:	f200 821a 	bhi.w	800f7a6 <MotionAR_Update+0x19f6>
 800f372:	ed1f 6a4a 	vldr	s12, [pc, #-296]	; 800f24c <MotionAR_Update+0x149c>
 800f376:	eef4 1ac6 	vcmpe.f32	s3, s12
 800f37a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f37e:	f63f aaac 	bhi.w	800e8da <MotionAR_Update+0xb2a>
 800f382:	ed1f 6a4d 	vldr	s12, [pc, #-308]	; 800f250 <MotionAR_Update+0x14a0>
 800f386:	eeb4 4ac6 	vcmpe.f32	s8, s12
 800f38a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f38e:	f67f ad9c 	bls.w	800eeca <MotionAR_Update+0x111a>
 800f392:	e493      	b.n	800ecbc <MotionAR_Update+0xf0c>
 800f394:	ed1f 5a51 	vldr	s10, [pc, #-324]	; 800f254 <MotionAR_Update+0x14a4>
 800f398:	eeb4 cac5 	vcmpe.f32	s24, s10
 800f39c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3a0:	f67f aa9b 	bls.w	800e8da <MotionAR_Update+0xb2a>
 800f3a4:	e4c4      	b.n	800ed30 <MotionAR_Update+0xf80>
 800f3a6:	ed5f 7a54 	vldr	s15, [pc, #-336]	; 800f258 <MotionAR_Update+0x14a8>
 800f3aa:	eeb4 1ae7 	vcmpe.f32	s2, s15
 800f3ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3b2:	f67f ac1c 	bls.w	800ebee <MotionAR_Update+0xe3e>
 800f3b6:	e5a6      	b.n	800ef06 <MotionAR_Update+0x1156>
 800f3b8:	ed5f 7a58 	vldr	s15, [pc, #-352]	; 800f25c <MotionAR_Update+0x14ac>
 800f3bc:	eeb4 6ae7 	vcmpe.f32	s12, s15
 800f3c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3c4:	f67f aa89 	bls.w	800e8da <MotionAR_Update+0xb2a>
 800f3c8:	ed5f 7a5b 	vldr	s15, [pc, #-364]	; 800f260 <MotionAR_Update+0x14b0>
 800f3cc:	eef4 3ae7 	vcmpe.f32	s7, s15
 800f3d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3d4:	f63f aa81 	bhi.w	800e8da <MotionAR_Update+0xb2a>
 800f3d8:	ed5f 7a5e 	vldr	s15, [pc, #-376]	; 800f264 <MotionAR_Update+0x14b4>
 800f3dc:	eeb4 6ae7 	vcmpe.f32	s12, s15
 800f3e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3e4:	f67f ad71 	bls.w	800eeca <MotionAR_Update+0x111a>
 800f3e8:	f7ff ba77 	b.w	800e8da <MotionAR_Update+0xb2a>
 800f3ec:	ed1f 5a62 	vldr	s10, [pc, #-392]	; 800f268 <MotionAR_Update+0x14b8>
 800f3f0:	eeb4 4ac5 	vcmpe.f32	s8, s10
 800f3f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3f8:	f67f ad97 	bls.w	800ef2a <MotionAR_Update+0x117a>
 800f3fc:	e498      	b.n	800ed30 <MotionAR_Update+0xf80>
 800f3fe:	2301      	movs	r3, #1
 800f400:	f7ff bbb4 	b.w	800eb6c <MotionAR_Update+0xdbc>
 800f404:	ed1f 7a67 	vldr	s14, [pc, #-412]	; 800f26c <MotionAR_Update+0x14bc>
 800f408:	eeb4 4ac7 	vcmpe.f32	s8, s14
 800f40c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f410:	f200 80f8 	bhi.w	800f604 <MotionAR_Update+0x1854>
 800f414:	ed1f 7a6a 	vldr	s14, [pc, #-424]	; 800f270 <MotionAR_Update+0x14c0>
 800f418:	eeb4 cac7 	vcmpe.f32	s24, s14
 800f41c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f420:	f63f acf1 	bhi.w	800ee06 <MotionAR_Update+0x1056>
 800f424:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 800f428:	eeb4 6ac7 	vcmpe.f32	s12, s14
 800f42c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f430:	f200 8290 	bhi.w	800f954 <MotionAR_Update+0x1ba4>
 800f434:	ed5f 7a71 	vldr	s15, [pc, #-452]	; 800f274 <MotionAR_Update+0x14c4>
 800f438:	eeb4 2ae7 	vcmpe.f32	s4, s15
 800f43c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f440:	f200 82a6 	bhi.w	800f990 <MotionAR_Update+0x1be0>
 800f444:	ed5f 7a74 	vldr	s15, [pc, #-464]	; 800f278 <MotionAR_Update+0x14c8>
 800f448:	eeb4 cae7 	vcmpe.f32	s24, s15
 800f44c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f450:	f67f acd9 	bls.w	800ee06 <MotionAR_Update+0x1056>
 800f454:	ed5f 7a77 	vldr	s15, [pc, #-476]	; 800f27c <MotionAR_Update+0x14cc>
 800f458:	eeb4 9ae7 	vcmpe.f32	s18, s15
 800f45c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f460:	f63f acd1 	bhi.w	800ee06 <MotionAR_Update+0x1056>
 800f464:	ed5f 7a7a 	vldr	s15, [pc, #-488]	; 800f280 <MotionAR_Update+0x14d0>
 800f468:	eeb4 4ae7 	vcmpe.f32	s8, s15
 800f46c:	e491      	b.n	800ed92 <MotionAR_Update+0xfe2>
 800f46e:	ed5f 7a7b 	vldr	s15, [pc, #-492]	; 800f284 <MotionAR_Update+0x14d4>
 800f472:	eef4 cae7 	vcmpe.f32	s25, s15
 800f476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f47a:	f67f adf1 	bls.w	800f060 <MotionAR_Update+0x12b0>
 800f47e:	ed5f 7a7e 	vldr	s15, [pc, #-504]	; 800f288 <MotionAR_Update+0x14d8>
 800f482:	eef4 bae7 	vcmpe.f32	s23, s15
 800f486:	e484      	b.n	800ed92 <MotionAR_Update+0xfe2>
 800f488:	ed5f 7a80 	vldr	s15, [pc, #-512]	; 800f28c <MotionAR_Update+0x14dc>
 800f48c:	eef4 cae7 	vcmpe.f32	s25, s15
 800f490:	e47f      	b.n	800ed92 <MotionAR_Update+0xfe2>
 800f492:	ed5f 7a81 	vldr	s15, [pc, #-516]	; 800f290 <MotionAR_Update+0x14e0>
 800f496:	eeb4 4ae7 	vcmpe.f32	s8, s15
 800f49a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f49e:	f67f aa4a 	bls.w	800e936 <MotionAR_Update+0xb86>
 800f4a2:	ed5f 7a84 	vldr	s15, [pc, #-528]	; 800f294 <MotionAR_Update+0x14e4>
 800f4a6:	eef4 4ae7 	vcmpe.f32	s9, s15
 800f4aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4ae:	f67f acaa 	bls.w	800ee06 <MotionAR_Update+0x1056>
 800f4b2:	f7ff ba40 	b.w	800e936 <MotionAR_Update+0xb86>
 800f4b6:	eeb3 5a01 	vmov.f32	s10, #49	; 0x41880000  17.0
 800f4ba:	eeb4 6ac5 	vcmpe.f32	s12, s10
 800f4be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4c2:	f200 8184 	bhi.w	800f7ce <MotionAR_Update+0x1a1e>
 800f4c6:	ed1f 5a8c 	vldr	s10, [pc, #-560]	; 800f298 <MotionAR_Update+0x14e8>
 800f4ca:	eef4 1ac5 	vcmpe.f32	s3, s10
 800f4ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4d2:	f67f ac2d 	bls.w	800ed30 <MotionAR_Update+0xf80>
 800f4d6:	ed1f 5a8f 	vldr	s10, [pc, #-572]	; 800f29c <MotionAR_Update+0x14ec>
 800f4da:	eeb4 cac5 	vcmpe.f32	s24, s10
 800f4de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4e2:	f63f ac25 	bhi.w	800ed30 <MotionAR_Update+0xf80>
 800f4e6:	ed1f 5a92 	vldr	s10, [pc, #-584]	; 800f2a0 <MotionAR_Update+0x14f0>
 800f4ea:	eeb4 4ac5 	vcmpe.f32	s8, s10
 800f4ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4f2:	f67f a9f2 	bls.w	800e8da <MotionAR_Update+0xb2a>
 800f4f6:	ed1f 5a95 	vldr	s10, [pc, #-596]	; 800f2a4 <MotionAR_Update+0x14f4>
 800f4fa:	eeb4 2ac5 	vcmpe.f32	s4, s10
 800f4fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f502:	f200 81cd 	bhi.w	800f8a0 <MotionAR_Update+0x1af0>
 800f506:	ed1f 5a98 	vldr	s10, [pc, #-608]	; 800f2a8 <MotionAR_Update+0x14f8>
 800f50a:	eef4 dac5 	vcmpe.f32	s27, s10
 800f50e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f512:	f67f ac0d 	bls.w	800ed30 <MotionAR_Update+0xf80>
 800f516:	f7ff b9e0 	b.w	800e8da <MotionAR_Update+0xb2a>
 800f51a:	ed5f 7a9c 	vldr	s15, [pc, #-624]	; 800f2ac <MotionAR_Update+0x14fc>
 800f51e:	eef4 eae7 	vcmpe.f32	s29, s15
 800f522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f526:	f67f acd0 	bls.w	800eeca <MotionAR_Update+0x111a>
 800f52a:	f7ff b9d6 	b.w	800e8da <MotionAR_Update+0xb2a>
 800f52e:	ed5f 7aa0 	vldr	s15, [pc, #-640]	; 800f2b0 <MotionAR_Update+0x1500>
 800f532:	eef4 1ae7 	vcmpe.f32	s3, s15
 800f536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f53a:	d870      	bhi.n	800f61e <MotionAR_Update+0x186e>
 800f53c:	ed5f 7aa3 	vldr	s15, [pc, #-652]	; 800f2b4 <MotionAR_Update+0x1504>
 800f540:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800f544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f548:	f67f ab51 	bls.w	800ebee <MotionAR_Update+0xe3e>
 800f54c:	ed5f 7aa6 	vldr	s15, [pc, #-664]	; 800f2b8 <MotionAR_Update+0x1508>
 800f550:	eeb4 2ae7 	vcmpe.f32	s4, s15
 800f554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f558:	f63f ab49 	bhi.w	800ebee <MotionAR_Update+0xe3e>
 800f55c:	e4d3      	b.n	800ef06 <MotionAR_Update+0x1156>
 800f55e:	ed1f 6aa9 	vldr	s12, [pc, #-676]	; 800f2bc <MotionAR_Update+0x150c>
 800f562:	eeb4 dac6 	vcmpe.f32	s26, s12
 800f566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f56a:	f63f aba7 	bhi.w	800ecbc <MotionAR_Update+0xf0c>
 800f56e:	ed1f 6aac 	vldr	s12, [pc, #-688]	; 800f2c0 <MotionAR_Update+0x1510>
 800f572:	eeb4 2ac6 	vcmpe.f32	s4, s12
 800f576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f57a:	f63f a9ae 	bhi.w	800e8da <MotionAR_Update+0xb2a>
 800f57e:	ed1f 6aaf 	vldr	s12, [pc, #-700]	; 800f2c4 <MotionAR_Update+0x1514>
 800f582:	eef4 7ac6 	vcmpe.f32	s15, s12
 800f586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f58a:	f67f a9a6 	bls.w	800e8da <MotionAR_Update+0xb2a>
 800f58e:	ed1f 6ab2 	vldr	s12, [pc, #-712]	; 800f2c8 <MotionAR_Update+0x1518>
 800f592:	eef4 eac6 	vcmpe.f32	s29, s12
 800f596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f59a:	f67f ab8f 	bls.w	800ecbc <MotionAR_Update+0xf0c>
 800f59e:	f7ff b99c 	b.w	800e8da <MotionAR_Update+0xb2a>
 800f5a2:	ed1f 5ab6 	vldr	s10, [pc, #-728]	; 800f2cc <MotionAR_Update+0x151c>
 800f5a6:	eeb4 2ac5 	vcmpe.f32	s4, s10
 800f5aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5ae:	f200 80df 	bhi.w	800f770 <MotionAR_Update+0x19c0>
 800f5b2:	ed1f 6ab9 	vldr	s12, [pc, #-740]	; 800f2d0 <MotionAR_Update+0x1520>
 800f5b6:	eef4 3ac6 	vcmpe.f32	s7, s12
 800f5ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5be:	f200 80bd 	bhi.w	800f73c <MotionAR_Update+0x198c>
 800f5c2:	ed1f 6abc 	vldr	s12, [pc, #-752]	; 800f2d4 <MotionAR_Update+0x1524>
 800f5c6:	eeb4 cac6 	vcmpe.f32	s24, s12
 800f5ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5ce:	f63f ab75 	bhi.w	800ecbc <MotionAR_Update+0xf0c>
 800f5d2:	eddd 6a07 	vldr	s13, [sp, #28]
 800f5d6:	eddd 7a06 	vldr	s15, [sp, #24]
 800f5da:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f5de:	ed5f 6ac2 	vldr	s13, [pc, #-776]	; 800f2d8 <MotionAR_Update+0x1528>
 800f5e2:	eef4 7ae6 	vcmpe.f32	s15, s13
 800f5e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5ea:	f67f a976 	bls.w	800e8da <MotionAR_Update+0xb2a>
 800f5ee:	e46c      	b.n	800eeca <MotionAR_Update+0x111a>
 800f5f0:	ed5f 7ac6 	vldr	s15, [pc, #-792]	; 800f2dc <MotionAR_Update+0x152c>
 800f5f4:	eeb4 1ae7 	vcmpe.f32	s2, s15
 800f5f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5fc:	f67f ac03 	bls.w	800ee06 <MotionAR_Update+0x1056>
 800f600:	f7ff b999 	b.w	800e936 <MotionAR_Update+0xb86>
 800f604:	ed5f 7aca 	vldr	s15, [pc, #-808]	; 800f2e0 <MotionAR_Update+0x1530>
 800f608:	eeb4 2ae7 	vcmpe.f32	s4, s15
 800f60c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f610:	f67f abf9 	bls.w	800ee06 <MotionAR_Update+0x1056>
 800f614:	ed5f 7acd 	vldr	s15, [pc, #-820]	; 800f2e4 <MotionAR_Update+0x1534>
 800f618:	eef4 cae7 	vcmpe.f32	s25, s15
 800f61c:	e504      	b.n	800f028 <MotionAR_Update+0x1278>
 800f61e:	ed5f 7ace 	vldr	s15, [pc, #-824]	; 800f2e8 <MotionAR_Update+0x1538>
 800f622:	eeb4 1ae7 	vcmpe.f32	s2, s15
 800f626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f62a:	f67f ac6c 	bls.w	800ef06 <MotionAR_Update+0x1156>
 800f62e:	ed5f 7ad1 	vldr	s15, [pc, #-836]	; 800f2ec <MotionAR_Update+0x153c>
 800f632:	eeb4 cae7 	vcmpe.f32	s24, s15
 800f636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f63a:	f67f aad8 	bls.w	800ebee <MotionAR_Update+0xe3e>
 800f63e:	e462      	b.n	800ef06 <MotionAR_Update+0x1156>
 800f640:	ed1f 5ad5 	vldr	s10, [pc, #-852]	; 800f2f0 <MotionAR_Update+0x1540>
 800f644:	eeb4 6ac5 	vcmpe.f32	s12, s10
 800f648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f64c:	d850      	bhi.n	800f6f0 <MotionAR_Update+0x1940>
 800f64e:	ed1f 6ad7 	vldr	s12, [pc, #-860]	; 800f2f4 <MotionAR_Update+0x1544>
 800f652:	eef4 7ac6 	vcmpe.f32	s15, s12
 800f656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f65a:	f63f ab2f 	bhi.w	800ecbc <MotionAR_Update+0xf0c>
 800f65e:	ed1f 6ada 	vldr	s12, [pc, #-872]	; 800f2f8 <MotionAR_Update+0x1548>
 800f662:	ed9d 5a03 	vldr	s10, [sp, #12]
 800f666:	eeb4 5ac6 	vcmpe.f32	s10, s12
 800f66a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f66e:	f63f ab25 	bhi.w	800ecbc <MotionAR_Update+0xf0c>
 800f672:	ed1f 6ade 	vldr	s12, [pc, #-888]	; 800f2fc <MotionAR_Update+0x154c>
 800f676:	eef4 1ac6 	vcmpe.f32	s3, s12
 800f67a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f67e:	f67f ab1d 	bls.w	800ecbc <MotionAR_Update+0xf0c>
 800f682:	ed1f 6ae1 	vldr	s12, [pc, #-900]	; 800f300 <MotionAR_Update+0x1550>
 800f686:	eef4 5ac6 	vcmpe.f32	s11, s12
 800f68a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f68e:	f63f ab15 	bhi.w	800ecbc <MotionAR_Update+0xf0c>
 800f692:	ed1f 6ae4 	vldr	s12, [pc, #-912]	; 800f304 <MotionAR_Update+0x1554>
 800f696:	eef4 eac6 	vcmpe.f32	s29, s12
 800f69a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f69e:	f67f ab0d 	bls.w	800ecbc <MotionAR_Update+0xf0c>
 800f6a2:	f7ff b91a 	b.w	800e8da <MotionAR_Update+0xb2a>
 800f6a6:	ed1f 5ae8 	vldr	s10, [pc, #-928]	; 800f308 <MotionAR_Update+0x1558>
 800f6aa:	ed9d 3a03 	vldr	s6, [sp, #12]
 800f6ae:	eeb4 3ac5 	vcmpe.f32	s6, s10
 800f6b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6b6:	d825      	bhi.n	800f704 <MotionAR_Update+0x1954>
 800f6b8:	ed1f 5aec 	vldr	s10, [pc, #-944]	; 800f30c <MotionAR_Update+0x155c>
 800f6bc:	ed9d 3a04 	vldr	s6, [sp, #16]
 800f6c0:	eeb4 3ac5 	vcmpe.f32	s6, s10
 800f6c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6c8:	f67f aaf8 	bls.w	800ecbc <MotionAR_Update+0xf0c>
 800f6cc:	ed1f 5af0 	vldr	s10, [pc, #-960]	; 800f310 <MotionAR_Update+0x1560>
 800f6d0:	eef4 3ac5 	vcmpe.f32	s7, s10
 800f6d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6d8:	f67f aaf0 	bls.w	800ecbc <MotionAR_Update+0xf0c>
 800f6dc:	ed1f 5af3 	vldr	s10, [pc, #-972]	; 800f314 <MotionAR_Update+0x1564>
 800f6e0:	eeb4 6ac5 	vcmpe.f32	s12, s10
 800f6e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6e8:	f67f a8f7 	bls.w	800e8da <MotionAR_Update+0xb2a>
 800f6ec:	f7ff bae6 	b.w	800ecbc <MotionAR_Update+0xf0c>
 800f6f0:	ed9f 6aa9 	vldr	s12, [pc, #676]	; 800f998 <MotionAR_Update+0x1be8>
 800f6f4:	eef4 3ac6 	vcmpe.f32	s7, s12
 800f6f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6fc:	f67f aade 	bls.w	800ecbc <MotionAR_Update+0xf0c>
 800f700:	f7ff b8eb 	b.w	800e8da <MotionAR_Update+0xb2a>
 800f704:	ed9f 5aa5 	vldr	s10, [pc, #660]	; 800f99c <MotionAR_Update+0x1bec>
 800f708:	eddd 3a03 	vldr	s7, [sp, #12]
 800f70c:	eef4 3ac5 	vcmpe.f32	s7, s10
 800f710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f714:	f67f a8e1 	bls.w	800e8da <MotionAR_Update+0xb2a>
 800f718:	ed9f 5aa1 	vldr	s10, [pc, #644]	; 800f9a0 <MotionAR_Update+0x1bf0>
 800f71c:	eeb4 6ac5 	vcmpe.f32	s12, s10
 800f720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f724:	f67f aaca 	bls.w	800ecbc <MotionAR_Update+0xf0c>
 800f728:	ed9f 5a9e 	vldr	s10, [pc, #632]	; 800f9a4 <MotionAR_Update+0x1bf4>
 800f72c:	eeb4 6ac5 	vcmpe.f32	s12, s10
 800f730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f734:	f63f a8d1 	bhi.w	800e8da <MotionAR_Update+0xb2a>
 800f738:	f7ff bac0 	b.w	800ecbc <MotionAR_Update+0xf0c>
 800f73c:	ed9f 6a9a 	vldr	s12, [pc, #616]	; 800f9a8 <MotionAR_Update+0x1bf8>
 800f740:	eef4 1ac6 	vcmpe.f32	s3, s12
 800f744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f748:	f200 80d0 	bhi.w	800f8ec <MotionAR_Update+0x1b3c>
 800f74c:	ed9f 6a97 	vldr	s12, [pc, #604]	; 800f9ac <MotionAR_Update+0x1bfc>
 800f750:	eeb4 9ac6 	vcmpe.f32	s18, s12
 800f754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f758:	f200 80b6 	bhi.w	800f8c8 <MotionAR_Update+0x1b18>
 800f75c:	eddf 7a94 	vldr	s15, [pc, #592]	; 800f9b0 <MotionAR_Update+0x1c00>
 800f760:	eef4 4ae7 	vcmpe.f32	s9, s15
 800f764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f768:	f67f a8b7 	bls.w	800e8da <MotionAR_Update+0xb2a>
 800f76c:	f7ff bbad 	b.w	800eeca <MotionAR_Update+0x111a>
 800f770:	ed9f 5a90 	vldr	s10, [pc, #576]	; 800f9b4 <MotionAR_Update+0x1c04>
 800f774:	eddd 3a03 	vldr	s7, [sp, #12]
 800f778:	eef4 3ac5 	vcmpe.f32	s7, s10
 800f77c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f780:	d84d      	bhi.n	800f81e <MotionAR_Update+0x1a6e>
 800f782:	ed9f 5a8d 	vldr	s10, [pc, #564]	; 800f9b8 <MotionAR_Update+0x1c08>
 800f786:	eeb4 6ac5 	vcmpe.f32	s12, s10
 800f78a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f78e:	f67f aa95 	bls.w	800ecbc <MotionAR_Update+0xf0c>
 800f792:	ed9f 6a8a 	vldr	s12, [pc, #552]	; 800f9bc <MotionAR_Update+0x1c0c>
 800f796:	eef4 1ac6 	vcmpe.f32	s3, s12
 800f79a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f79e:	f67f aa8d 	bls.w	800ecbc <MotionAR_Update+0xf0c>
 800f7a2:	f7ff b89a 	b.w	800e8da <MotionAR_Update+0xb2a>
 800f7a6:	ed9f 6a86 	vldr	s12, [pc, #536]	; 800f9c0 <MotionAR_Update+0x1c10>
 800f7aa:	ed9d 5a03 	vldr	s10, [sp, #12]
 800f7ae:	eeb4 5ac6 	vcmpe.f32	s10, s12
 800f7b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7b6:	f63f a890 	bhi.w	800e8da <MotionAR_Update+0xb2a>
 800f7ba:	ed9f 6a82 	vldr	s12, [pc, #520]	; 800f9c4 <MotionAR_Update+0x1c14>
 800f7be:	eef4 eac6 	vcmpe.f32	s29, s12
 800f7c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7c6:	f67f aa79 	bls.w	800ecbc <MotionAR_Update+0xf0c>
 800f7ca:	f7ff b886 	b.w	800e8da <MotionAR_Update+0xb2a>
 800f7ce:	ed9f 5a7e 	vldr	s10, [pc, #504]	; 800f9c8 <MotionAR_Update+0x1c18>
 800f7d2:	eef4 cac5 	vcmpe.f32	s25, s10
 800f7d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7da:	d834      	bhi.n	800f846 <MotionAR_Update+0x1a96>
 800f7dc:	eeb3 5a0b 	vmov.f32	s10, #59	; 0x41d80000  27.0
 800f7e0:	eeb4 6ac5 	vcmpe.f32	s12, s10
 800f7e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7e8:	f67f aaa2 	bls.w	800ed30 <MotionAR_Update+0xf80>
 800f7ec:	ed9f 5a77 	vldr	s10, [pc, #476]	; 800f9cc <MotionAR_Update+0x1c1c>
 800f7f0:	eeb4 4ac5 	vcmpe.f32	s8, s10
 800f7f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7f8:	d83e      	bhi.n	800f878 <MotionAR_Update+0x1ac8>
 800f7fa:	ed9f 5a75 	vldr	s10, [pc, #468]	; 800f9d0 <MotionAR_Update+0x1c20>
 800f7fe:	eef4 1ac5 	vcmpe.f32	s3, s10
 800f802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f806:	f67f aa93 	bls.w	800ed30 <MotionAR_Update+0xf80>
 800f80a:	ed9f 5a72 	vldr	s10, [pc, #456]	; 800f9d4 <MotionAR_Update+0x1c24>
 800f80e:	eef4 dac5 	vcmpe.f32	s27, s10
 800f812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f816:	f67f aa8b 	bls.w	800ed30 <MotionAR_Update+0xf80>
 800f81a:	f7ff bb86 	b.w	800ef2a <MotionAR_Update+0x117a>
 800f81e:	eddf 7a6e 	vldr	s15, [pc, #440]	; 800f9d8 <MotionAR_Update+0x1c28>
 800f822:	eef4 eae7 	vcmpe.f32	s29, s15
 800f826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f82a:	f63f a856 	bhi.w	800e8da <MotionAR_Update+0xb2a>
 800f82e:	eddf 7a6b 	vldr	s15, [pc, #428]	; 800f9dc <MotionAR_Update+0x1c2c>
 800f832:	eddd 6a04 	vldr	s13, [sp, #16]
 800f836:	eef4 6ae7 	vcmpe.f32	s13, s15
 800f83a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f83e:	f67f a84c 	bls.w	800e8da <MotionAR_Update+0xb2a>
 800f842:	f7ff bb42 	b.w	800eeca <MotionAR_Update+0x111a>
 800f846:	ed9f 5a66 	vldr	s10, [pc, #408]	; 800f9e0 <MotionAR_Update+0x1c30>
 800f84a:	eeb4 dac5 	vcmpe.f32	s26, s10
 800f84e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f852:	f67f a842 	bls.w	800e8da <MotionAR_Update+0xb2a>
 800f856:	ed9f 5a63 	vldr	s10, [pc, #396]	; 800f9e4 <MotionAR_Update+0x1c34>
 800f85a:	eeb4 2ac5 	vcmpe.f32	s4, s10
 800f85e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f862:	d813      	bhi.n	800f88c <MotionAR_Update+0x1adc>
 800f864:	ed9f 5a60 	vldr	s10, [pc, #384]	; 800f9e8 <MotionAR_Update+0x1c38>
 800f868:	eef4 dac5 	vcmpe.f32	s27, s10
 800f86c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f870:	f67f aa5e 	bls.w	800ed30 <MotionAR_Update+0xf80>
 800f874:	f7ff b831 	b.w	800e8da <MotionAR_Update+0xb2a>
 800f878:	ed9f 5a5c 	vldr	s10, [pc, #368]	; 800f9ec <MotionAR_Update+0x1c3c>
 800f87c:	eef4 1ac5 	vcmpe.f32	s3, s10
 800f880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f884:	f67f aa54 	bls.w	800ed30 <MotionAR_Update+0xf80>
 800f888:	f7ff bb4f 	b.w	800ef2a <MotionAR_Update+0x117a>
 800f88c:	ed9f 5a58 	vldr	s10, [pc, #352]	; 800f9f0 <MotionAR_Update+0x1c40>
 800f890:	eef4 1ac5 	vcmpe.f32	s3, s10
 800f894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f898:	f67f aa4a 	bls.w	800ed30 <MotionAR_Update+0xf80>
 800f89c:	f7ff b81d 	b.w	800e8da <MotionAR_Update+0xb2a>
 800f8a0:	ed9f 5a54 	vldr	s10, [pc, #336]	; 800f9f4 <MotionAR_Update+0x1c44>
 800f8a4:	eef4 4ac5 	vcmpe.f32	s9, s10
 800f8a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8ac:	f67f aa40 	bls.w	800ed30 <MotionAR_Update+0xf80>
 800f8b0:	f7ff b813 	b.w	800e8da <MotionAR_Update+0xb2a>
 800f8b4:	eddf 7a50 	vldr	s15, [pc, #320]	; 800f9f8 <MotionAR_Update+0x1c48>
 800f8b8:	eeb4 cae7 	vcmpe.f32	s24, s15
 800f8bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8c0:	f53f a9a7 	bmi.w	800ec12 <MotionAR_Update+0xe62>
 800f8c4:	f7ff b841 	b.w	800e94a <MotionAR_Update+0xb9a>
 800f8c8:	ed9f 6a4c 	vldr	s12, [pc, #304]	; 800f9fc <MotionAR_Update+0x1c4c>
 800f8cc:	eef4 eac6 	vcmpe.f32	s29, s12
 800f8d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8d4:	f67f a9f2 	bls.w	800ecbc <MotionAR_Update+0xf0c>
 800f8d8:	ed9f 6a49 	vldr	s12, [pc, #292]	; 800fa00 <MotionAR_Update+0x1c50>
 800f8dc:	eeb4 cac6 	vcmpe.f32	s24, s12
 800f8e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8e4:	f67f a9ea 	bls.w	800ecbc <MotionAR_Update+0xf0c>
 800f8e8:	f7ff baef 	b.w	800eeca <MotionAR_Update+0x111a>
 800f8ec:	eddf 7a45 	vldr	s15, [pc, #276]	; 800fa04 <MotionAR_Update+0x1c54>
 800f8f0:	eddd 6a03 	vldr	s13, [sp, #12]
 800f8f4:	eef4 6ae7 	vcmpe.f32	s13, s15
 800f8f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8fc:	f67e afed 	bls.w	800e8da <MotionAR_Update+0xb2a>
 800f900:	eddf 7a41 	vldr	s15, [pc, #260]	; 800fa08 <MotionAR_Update+0x1c58>
 800f904:	eeb4 2ae7 	vcmpe.f32	s4, s15
 800f908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f90c:	f63f aadd 	bhi.w	800eeca <MotionAR_Update+0x111a>
 800f910:	eddf 7a3e 	vldr	s15, [pc, #248]	; 800fa0c <MotionAR_Update+0x1c5c>
 800f914:	eeb4 2ae7 	vcmpe.f32	s4, s15
 800f918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f91c:	f67e afdd 	bls.w	800e8da <MotionAR_Update+0xb2a>
 800f920:	eddf 7a3b 	vldr	s15, [pc, #236]	; 800fa10 <MotionAR_Update+0x1c60>
 800f924:	eeb4 cae7 	vcmpe.f32	s24, s15
 800f928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f92c:	f67e afd5 	bls.w	800e8da <MotionAR_Update+0xb2a>
 800f930:	eddf 7a38 	vldr	s15, [pc, #224]	; 800fa14 <MotionAR_Update+0x1c64>
 800f934:	eef4 5ae7 	vcmpe.f32	s11, s15
 800f938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f93c:	f63e afcd 	bhi.w	800e8da <MotionAR_Update+0xb2a>
 800f940:	eddf 7a35 	vldr	s15, [pc, #212]	; 800fa18 <MotionAR_Update+0x1c68>
 800f944:	eef4 3ae7 	vcmpe.f32	s7, s15
 800f948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f94c:	f67f aabd 	bls.w	800eeca <MotionAR_Update+0x111a>
 800f950:	f7fe bfc3 	b.w	800e8da <MotionAR_Update+0xb2a>
 800f954:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800fa1c <MotionAR_Update+0x1c6c>
 800f958:	eeb4 9ac7 	vcmpe.f32	s18, s14
 800f95c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f960:	f63f ab7e 	bhi.w	800f060 <MotionAR_Update+0x12b0>
 800f964:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800fa20 <MotionAR_Update+0x1c70>
 800f968:	eeb4 2ac7 	vcmpe.f32	s4, s14
 800f96c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f970:	f63f ab76 	bhi.w	800f060 <MotionAR_Update+0x12b0>
 800f974:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800fa24 <MotionAR_Update+0x1c74>
 800f978:	eef4 dac7 	vcmpe.f32	s27, s14
 800f97c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f980:	f63f aa41 	bhi.w	800ee06 <MotionAR_Update+0x1056>
 800f984:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800fa28 <MotionAR_Update+0x1c78>
 800f988:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f98c:	f7ff ba01 	b.w	800ed92 <MotionAR_Update+0xfe2>
 800f990:	eddf 7a26 	vldr	s15, [pc, #152]	; 800fa2c <MotionAR_Update+0x1c7c>
 800f994:	f7ff bb46 	b.w	800f024 <MotionAR_Update+0x1274>
 800f998:	3da46bf0 	.word	0x3da46bf0
 800f99c:	3f1a9692 	.word	0x3f1a9692
 800f9a0:	3e5c46d8 	.word	0x3e5c46d8
 800f9a4:	3ee5d420 	.word	0x3ee5d420
 800f9a8:	3de56ef0 	.word	0x3de56ef0
 800f9ac:	3f145bc0 	.word	0x3f145bc0
 800f9b0:	3f7ca7a4 	.word	0x3f7ca7a4
 800f9b4:	ba03126f 	.word	0xba03126f
 800f9b8:	3dc68c26 	.word	0x3dc68c26
 800f9bc:	3ec53fc0 	.word	0x3ec53fc0
 800f9c0:	bf3b27ee 	.word	0xbf3b27ee
 800f9c4:	3dd13059 	.word	0x3dd13059
 800f9c8:	42f34942 	.word	0x42f34942
 800f9cc:	3e6bc5df 	.word	0x3e6bc5df
 800f9d0:	3e87bbd8 	.word	0x3e87bbd8
 800f9d4:	406b4b73 	.word	0x406b4b73
 800f9d8:	3edcd91f 	.word	0x3edcd91f
 800f9dc:	beb1a7a0 	.word	0xbeb1a7a0
 800f9e0:	42001b3b 	.word	0x42001b3b
 800f9e4:	3ed5f267 	.word	0x3ed5f267
 800f9e8:	40e360fc 	.word	0x40e360fc
 800f9ec:	3e56e936 	.word	0x3e56e936
 800f9f0:	3f13dec6 	.word	0x3f13dec6
 800f9f4:	3f42dc2b 	.word	0x3f42dc2b
 800f9f8:	3e4ccccd 	.word	0x3e4ccccd
 800f9fc:	3e43bea9 	.word	0x3e43bea9
 800fa00:	3f0ebda1 	.word	0x3f0ebda1
 800fa04:	3f098f3f 	.word	0x3f098f3f
 800fa08:	3f20dbbe 	.word	0x3f20dbbe
 800fa0c:	3ecc2e12 	.word	0x3ecc2e12
 800fa10:	3ed15e39 	.word	0x3ed15e39
 800fa14:	41135a60 	.word	0x41135a60
 800fa18:	3e6863bf 	.word	0x3e6863bf
 800fa1c:	41f40da3 	.word	0x41f40da3
 800fa20:	3e9668e4 	.word	0x3e9668e4
 800fa24:	404ea194 	.word	0x404ea194
 800fa28:	425b5243 	.word	0x425b5243
 800fa2c:	3f42d289 	.word	0x3f42d289

0800fa30 <MotionCP_Initialize>:
 800fa30:	490b      	ldr	r1, [pc, #44]	; (800fa60 <MotionCP_Initialize+0x30>)
 800fa32:	4a0c      	ldr	r2, [pc, #48]	; (800fa64 <MotionCP_Initialize+0x34>)
 800fa34:	680b      	ldr	r3, [r1, #0]
 800fa36:	2001      	movs	r0, #1
 800fa38:	f023 0301 	bic.w	r3, r3, #1
 800fa3c:	600b      	str	r3, [r1, #0]
 800fa3e:	4613      	mov	r3, r2
 800fa40:	6010      	str	r0, [r2, #0]
 800fa42:	681a      	ldr	r2, [r3, #0]
 800fa44:	2a00      	cmp	r2, #0
 800fa46:	d1fc      	bne.n	800fa42 <MotionCP_Initialize+0x12>
 800fa48:	4b07      	ldr	r3, [pc, #28]	; (800fa68 <MotionCP_Initialize+0x38>)
 800fa4a:	4a08      	ldr	r2, [pc, #32]	; (800fa6c <MotionCP_Initialize+0x3c>)
 800fa4c:	601a      	str	r2, [r3, #0]
 800fa4e:	681a      	ldr	r2, [r3, #0]
 800fa50:	4b07      	ldr	r3, [pc, #28]	; (800fa70 <MotionCP_Initialize+0x40>)
 800fa52:	429a      	cmp	r2, r3
 800fa54:	d000      	beq.n	800fa58 <MotionCP_Initialize+0x28>
 800fa56:	e7fe      	b.n	800fa56 <MotionCP_Initialize+0x26>
 800fa58:	4b06      	ldr	r3, [pc, #24]	; (800fa74 <MotionCP_Initialize+0x44>)
 800fa5a:	2201      	movs	r2, #1
 800fa5c:	701a      	strb	r2, [r3, #0]
 800fa5e:	4770      	bx	lr
 800fa60:	e0002000 	.word	0xe0002000
 800fa64:	40023008 	.word	0x40023008
 800fa68:	40023000 	.word	0x40023000
 800fa6c:	f407a5c2 	.word	0xf407a5c2
 800fa70:	b5e8b5cd 	.word	0xb5e8b5cd
 800fa74:	200020d0 	.word	0x200020d0

0800fa78 <MotionCP_SetOrientation_Acc>:
 800fa78:	4b44      	ldr	r3, [pc, #272]	; (800fb8c <MotionCP_SetOrientation_Acc+0x114>)
 800fa7a:	781a      	ldrb	r2, [r3, #0]
 800fa7c:	b902      	cbnz	r2, 800fa80 <MotionCP_SetOrientation_Acc+0x8>
 800fa7e:	4770      	bx	lr
 800fa80:	2200      	movs	r2, #0
 800fa82:	e9c3 2201 	strd	r2, r2, [r3, #4]
 800fa86:	731a      	strb	r2, [r3, #12]
 800fa88:	7802      	ldrb	r2, [r0, #0]
 800fa8a:	f1a2 0142 	sub.w	r1, r2, #66	; 0x42
 800fa8e:	b082      	sub	sp, #8
 800fa90:	2917      	cmp	r1, #23
 800fa92:	bf98      	it	ls
 800fa94:	3220      	addls	r2, #32
 800fa96:	f88d 2004 	strb.w	r2, [sp, #4]
 800fa9a:	7842      	ldrb	r2, [r0, #1]
 800fa9c:	f1a2 0142 	sub.w	r1, r2, #66	; 0x42
 800faa0:	2917      	cmp	r1, #23
 800faa2:	bf98      	it	ls
 800faa4:	3220      	addls	r2, #32
 800faa6:	f88d 2005 	strb.w	r2, [sp, #5]
 800faaa:	7882      	ldrb	r2, [r0, #2]
 800faac:	f1a2 0142 	sub.w	r1, r2, #66	; 0x42
 800fab0:	2917      	cmp	r1, #23
 800fab2:	bf98      	it	ls
 800fab4:	3220      	addls	r2, #32
 800fab6:	f88d 2006 	strb.w	r2, [sp, #6]
 800faba:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fabe:	3a64      	subs	r2, #100	; 0x64
 800fac0:	2a13      	cmp	r2, #19
 800fac2:	d80d      	bhi.n	800fae0 <MotionCP_SetOrientation_Acc+0x68>
 800fac4:	e8df f002 	tbb	[pc, r2]
 800fac8:	0c0c5e0a 	.word	0x0c0c5e0a
 800facc:	0c0c0c0c 	.word	0x0c0c0c0c
 800fad0:	0c5b0c0c 	.word	0x0c5b0c0c
 800fad4:	580c0c0c 	.word	0x580c0c0c
 800fad8:	520c550c 	.word	0x520c550c
 800fadc:	22ff      	movs	r2, #255	; 0xff
 800fade:	729a      	strb	r2, [r3, #10]
 800fae0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800fae4:	3a64      	subs	r2, #100	; 0x64
 800fae6:	2a13      	cmp	r2, #19
 800fae8:	d80d      	bhi.n	800fb06 <MotionCP_SetOrientation_Acc+0x8e>
 800faea:	e8df f002 	tbb	[pc, r2]
 800faee:	3c0a      	.short	0x3c0a
 800faf0:	0c0c0c0c 	.word	0x0c0c0c0c
 800faf4:	0c0c0c0c 	.word	0x0c0c0c0c
 800faf8:	0c0c0c39 	.word	0x0c0c0c39
 800fafc:	330c360c 	.word	0x330c360c
 800fb00:	300c      	.short	0x300c
 800fb02:	22ff      	movs	r2, #255	; 0xff
 800fb04:	72da      	strb	r2, [r3, #11]
 800fb06:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fb0a:	3a64      	subs	r2, #100	; 0x64
 800fb0c:	2a13      	cmp	r2, #19
 800fb0e:	d80d      	bhi.n	800fb2c <MotionCP_SetOrientation_Acc+0xb4>
 800fb10:	e8df f002 	tbb	[pc, r2]
 800fb14:	0c0c1a0a 	.word	0x0c0c1a0a
 800fb18:	0c0c0c0c 	.word	0x0c0c0c0c
 800fb1c:	0c170c0c 	.word	0x0c170c0c
 800fb20:	140c0c0c 	.word	0x140c0c0c
 800fb24:	0e0c110c 	.word	0x0e0c110c
 800fb28:	22ff      	movs	r2, #255	; 0xff
 800fb2a:	731a      	strb	r2, [r3, #12]
 800fb2c:	b002      	add	sp, #8
 800fb2e:	4770      	bx	lr
 800fb30:	22ff      	movs	r2, #255	; 0xff
 800fb32:	719a      	strb	r2, [r3, #6]
 800fb34:	e7fa      	b.n	800fb2c <MotionCP_SetOrientation_Acc+0xb4>
 800fb36:	2201      	movs	r2, #1
 800fb38:	731a      	strb	r2, [r3, #12]
 800fb3a:	e7f7      	b.n	800fb2c <MotionCP_SetOrientation_Acc+0xb4>
 800fb3c:	22ff      	movs	r2, #255	; 0xff
 800fb3e:	725a      	strb	r2, [r3, #9]
 800fb40:	e7f4      	b.n	800fb2c <MotionCP_SetOrientation_Acc+0xb4>
 800fb42:	2201      	movs	r2, #1
 800fb44:	725a      	strb	r2, [r3, #9]
 800fb46:	e7f1      	b.n	800fb2c <MotionCP_SetOrientation_Acc+0xb4>
 800fb48:	2201      	movs	r2, #1
 800fb4a:	719a      	strb	r2, [r3, #6]
 800fb4c:	e7ee      	b.n	800fb2c <MotionCP_SetOrientation_Acc+0xb4>
 800fb4e:	22ff      	movs	r2, #255	; 0xff
 800fb50:	715a      	strb	r2, [r3, #5]
 800fb52:	e7d8      	b.n	800fb06 <MotionCP_SetOrientation_Acc+0x8e>
 800fb54:	2201      	movs	r2, #1
 800fb56:	72da      	strb	r2, [r3, #11]
 800fb58:	e7d5      	b.n	800fb06 <MotionCP_SetOrientation_Acc+0x8e>
 800fb5a:	22ff      	movs	r2, #255	; 0xff
 800fb5c:	721a      	strb	r2, [r3, #8]
 800fb5e:	e7d2      	b.n	800fb06 <MotionCP_SetOrientation_Acc+0x8e>
 800fb60:	2201      	movs	r2, #1
 800fb62:	721a      	strb	r2, [r3, #8]
 800fb64:	e7cf      	b.n	800fb06 <MotionCP_SetOrientation_Acc+0x8e>
 800fb66:	2201      	movs	r2, #1
 800fb68:	715a      	strb	r2, [r3, #5]
 800fb6a:	e7cc      	b.n	800fb06 <MotionCP_SetOrientation_Acc+0x8e>
 800fb6c:	22ff      	movs	r2, #255	; 0xff
 800fb6e:	711a      	strb	r2, [r3, #4]
 800fb70:	e7b6      	b.n	800fae0 <MotionCP_SetOrientation_Acc+0x68>
 800fb72:	2201      	movs	r2, #1
 800fb74:	729a      	strb	r2, [r3, #10]
 800fb76:	e7b3      	b.n	800fae0 <MotionCP_SetOrientation_Acc+0x68>
 800fb78:	22ff      	movs	r2, #255	; 0xff
 800fb7a:	71da      	strb	r2, [r3, #7]
 800fb7c:	e7b0      	b.n	800fae0 <MotionCP_SetOrientation_Acc+0x68>
 800fb7e:	2201      	movs	r2, #1
 800fb80:	71da      	strb	r2, [r3, #7]
 800fb82:	e7ad      	b.n	800fae0 <MotionCP_SetOrientation_Acc+0x68>
 800fb84:	2201      	movs	r2, #1
 800fb86:	711a      	strb	r2, [r3, #4]
 800fb88:	e7aa      	b.n	800fae0 <MotionCP_SetOrientation_Acc+0x68>
 800fb8a:	bf00      	nop
 800fb8c:	200020d0 	.word	0x200020d0

0800fb90 <MotionCP_Update>:
 800fb90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb94:	ed2d 8b06 	vpush	{d8-d10}
 800fb98:	4c75      	ldr	r4, [pc, #468]	; (800fd70 <MotionCP_Update+0x1e0>)
 800fb9a:	7823      	ldrb	r3, [r4, #0]
 800fb9c:	b0a1      	sub	sp, #132	; 0x84
 800fb9e:	b923      	cbnz	r3, 800fbaa <MotionCP_Update+0x1a>
 800fba0:	b021      	add	sp, #132	; 0x84
 800fba2:	ecbd 8b06 	vpop	{d8-d10}
 800fba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbaa:	f994 3005 	ldrsb.w	r3, [r4, #5]
 800fbae:	eddf 5a71 	vldr	s11, [pc, #452]	; 800fd74 <MotionCP_Update+0x1e4>
 800fbb2:	edd0 6a01 	vldr	s13, [r0, #4]
 800fbb6:	ed90 7a00 	vldr	s14, [r0]
 800fbba:	edd0 7a02 	vldr	s15, [r0, #8]
 800fbbe:	89e2      	ldrh	r2, [r4, #14]
 800fbc0:	9218      	str	r2, [sp, #96]	; 0x60
 800fbc2:	ee09 3a10 	vmov	s18, r3
 800fbc6:	f994 3008 	ldrsb.w	r3, [r4, #8]
 800fbca:	ee08 3a10 	vmov	s16, r3
 800fbce:	f994 300b 	ldrsb.w	r3, [r4, #11]
 800fbd2:	ee08 3a90 	vmov	s17, r3
 800fbd6:	f994 3004 	ldrsb.w	r3, [r4, #4]
 800fbda:	ee06 3a10 	vmov	s12, r3
 800fbde:	f994 3007 	ldrsb.w	r3, [r4, #7]
 800fbe2:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800fbe6:	ee04 3a90 	vmov	s9, r3
 800fbea:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 800fbee:	f994 300a 	ldrsb.w	r3, [r4, #10]
 800fbf2:	ee27 7a25 	vmul.f32	s14, s14, s11
 800fbf6:	ee05 3a10 	vmov	s10, r3
 800fbfa:	ee29 9a26 	vmul.f32	s18, s18, s13
 800fbfe:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800fc02:	f994 3006 	ldrsb.w	r3, [r4, #6]
 800fc06:	eea7 9a06 	vfma.f32	s18, s14, s12
 800fc0a:	2ac8      	cmp	r2, #200	; 0xc8
 800fc0c:	ee06 3a10 	vmov	s12, r3
 800fc10:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 800fc14:	f994 3009 	ldrsb.w	r3, [r4, #9]
 800fc18:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 800fc1c:	ee28 8a26 	vmul.f32	s16, s16, s13
 800fc20:	ee68 8aa6 	vmul.f32	s17, s17, s13
 800fc24:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 800fc28:	ee06 3a90 	vmov	s13, r3
 800fc2c:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 800fc30:	f994 300c 	ldrsb.w	r3, [r4, #12]
 800fc34:	eea7 8a24 	vfma.f32	s16, s14, s9
 800fc38:	eee7 8a05 	vfma.f32	s17, s14, s10
 800fc3c:	ee07 3a10 	vmov	s14, r3
 800fc40:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800fc44:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800fc48:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800fc4c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800fc50:	eea7 9a86 	vfma.f32	s18, s15, s12
 800fc54:	eea7 8aa6 	vfma.f32	s16, s15, s13
 800fc58:	eee7 8a87 	vfma.f32	s17, s15, s14
 800fc5c:	d804      	bhi.n	800fc68 <MotionCP_Update+0xd8>
 800fc5e:	4613      	mov	r3, r2
 800fc60:	3301      	adds	r3, #1
 800fc62:	b29b      	uxth	r3, r3
 800fc64:	9318      	str	r3, [sp, #96]	; 0x60
 800fc66:	81e3      	strh	r3, [r4, #14]
 800fc68:	7c23      	ldrb	r3, [r4, #16]
 800fc6a:	4a43      	ldr	r2, [pc, #268]	; (800fd78 <MotionCP_Update+0x1e8>)
 800fc6c:	eddf 7a43 	vldr	s15, [pc, #268]	; 800fd7c <MotionCP_Update+0x1ec>
 800fc70:	7c60      	ldrb	r0, [r4, #17]
 800fc72:	9019      	str	r0, [sp, #100]	; 0x64
 800fc74:	3301      	adds	r3, #1
 800fc76:	fba2 5203 	umull	r5, r2, r2, r3
 800fc7a:	0912      	lsrs	r2, r2, #4
 800fc7c:	4615      	mov	r5, r2
 800fc7e:	2296      	movs	r2, #150	; 0x96
 800fc80:	fb02 3315 	mls	r3, r2, r5, r3
 800fc84:	7ca2      	ldrb	r2, [r4, #18]
 800fc86:	9314      	str	r3, [sp, #80]	; 0x50
 800fc88:	7423      	strb	r3, [r4, #16]
 800fc8a:	ee29 9a27 	vmul.f32	s18, s18, s15
 800fc8e:	ee28 8a27 	vmul.f32	s16, s16, s15
 800fc92:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800fc96:	9215      	str	r2, [sp, #84]	; 0x54
 800fc98:	b158      	cbz	r0, 800fcb2 <MotionCP_Update+0x122>
 800fc9a:	4b39      	ldr	r3, [pc, #228]	; (800fd80 <MotionCP_Update+0x1f0>)
 800fc9c:	4610      	mov	r0, r2
 800fc9e:	fba3 2302 	umull	r2, r3, r3, r2
 800fca2:	091b      	lsrs	r3, r3, #4
 800fca4:	2232      	movs	r2, #50	; 0x32
 800fca6:	fb02 0313 	mls	r3, r2, r3, r0
 800fcaa:	3301      	adds	r3, #1
 800fcac:	b2db      	uxtb	r3, r3
 800fcae:	9315      	str	r3, [sp, #84]	; 0x54
 800fcb0:	74a3      	strb	r3, [r4, #18]
 800fcb2:	ee19 0a10 	vmov	r0, s18
 800fcb6:	9117      	str	r1, [sp, #92]	; 0x5c
 800fcb8:	f7f0 fbc6 	bl	8000448 <__aeabi_f2d>
 800fcbc:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800fcbe:	eb07 0547 	add.w	r5, r7, r7, lsl #1
 800fcc2:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 800fcc6:	e9c3 0106 	strd	r0, r1, [r3, #24]
 800fcca:	ee18 0a10 	vmov	r0, s16
 800fcce:	ee28 8a08 	vmul.f32	s16, s16, s16
 800fcd2:	f7f0 fbb9 	bl	8000448 <__aeabi_f2d>
 800fcd6:	eea9 8a09 	vfma.f32	s16, s18, s18
 800fcda:	1c6e      	adds	r6, r5, #1
 800fcdc:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
 800fce0:	e9c6 0106 	strd	r0, r1, [r6, #24]
 800fce4:	eea8 8aa8 	vfma.f32	s16, s17, s17
 800fce8:	3502      	adds	r5, #2
 800fcea:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800fcee:	ee18 0a90 	vmov	r0, s17
 800fcf2:	f7f0 fba9 	bl	8000448 <__aeabi_f2d>
 800fcf6:	e9c5 0106 	strd	r0, r1, [r5, #24]
 800fcfa:	ee18 0a10 	vmov	r0, s16
 800fcfe:	f7f0 fba3 	bl	8000448 <__aeabi_f2d>
 800fd02:	4b20      	ldr	r3, [pc, #128]	; (800fd84 <MotionCP_Update+0x1f4>)
 800fd04:	2f95      	cmp	r7, #149	; 0x95
 800fd06:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800fd0a:	e9c3 0100 	strd	r0, r1, [r3]
 800fd0e:	f000 8343 	beq.w	8010398 <MotionCP_Update+0x808>
 800fd12:	4b1d      	ldr	r3, [pc, #116]	; (800fd88 <MotionCP_Update+0x1f8>)
 800fd14:	4d1d      	ldr	r5, [pc, #116]	; (800fd8c <MotionCP_Update+0x1fc>)
 800fd16:	f893 21e0 	ldrb.w	r2, [r3, #480]	; 0x1e0
 800fd1a:	4b1d      	ldr	r3, [pc, #116]	; (800fd90 <MotionCP_Update+0x200>)
 800fd1c:	9216      	str	r2, [sp, #88]	; 0x58
 800fd1e:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 800fd22:	3209      	adds	r2, #9
 800fd24:	9213      	str	r2, [sp, #76]	; 0x4c
 800fd26:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800fd2a:	9211      	str	r2, [sp, #68]	; 0x44
 800fd2c:	f103 0290 	add.w	r2, r3, #144	; 0x90
 800fd30:	920c      	str	r2, [sp, #48]	; 0x30
 800fd32:	f103 02d8 	add.w	r2, r3, #216	; 0xd8
 800fd36:	920e      	str	r2, [sp, #56]	; 0x38
 800fd38:	f503 7290 	add.w	r2, r3, #288	; 0x120
 800fd3c:	f04f 0a00 	mov.w	sl, #0
 800fd40:	f04f 0b00 	mov.w	fp, #0
 800fd44:	9312      	str	r3, [sp, #72]	; 0x48
 800fd46:	9210      	str	r2, [sp, #64]	; 0x40
 800fd48:	f503 72b4 	add.w	r2, r3, #360	; 0x168
 800fd4c:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 800fd50:	e9c5 0100 	strd	r0, r1, [r5]
 800fd54:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800fd58:	e9cd ab06 	strd	sl, fp, [sp, #24]
 800fd5c:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800fd60:	e9cd ab02 	strd	sl, fp, [sp, #8]
 800fd64:	920a      	str	r2, [sp, #40]	; 0x28
 800fd66:	930b      	str	r3, [sp, #44]	; 0x2c
 800fd68:	f04f 0900 	mov.w	r9, #0
 800fd6c:	e01a      	b.n	800fda4 <MotionCP_Update+0x214>
 800fd6e:	bf00      	nop
 800fd70:	200020d0 	.word	0x200020d0
 800fd74:	411cf5c3 	.word	0x411cf5c3
 800fd78:	1b4e81b5 	.word	0x1b4e81b5
 800fd7c:	bdd0fac6 	.word	0xbdd0fac6
 800fd80:	51eb851f 	.word	0x51eb851f
 800fd84:	20002ef8 	.word	0x20002ef8
 800fd88:	200031c8 	.word	0x200031c8
 800fd8c:	200001a8 	.word	0x200001a8
 800fd90:	08022a78 	.word	0x08022a78
 800fd94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fd96:	3308      	adds	r3, #8
 800fd98:	930a      	str	r3, [sp, #40]	; 0x28
 800fd9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fd9c:	3308      	adds	r3, #8
 800fd9e:	f109 0901 	add.w	r9, r9, #1
 800fda2:	930b      	str	r3, [sp, #44]	; 0x2c
 800fda4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fda6:	4a87      	ldr	r2, [pc, #540]	; (800ffc4 <MotionCP_Update+0x434>)
 800fda8:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800fdaa:	eba3 0309 	sub.w	r3, r3, r9
 800fdae:	fba2 2403 	umull	r2, r4, r2, r3
 800fdb2:	0864      	lsrs	r4, r4, #1
 800fdb4:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
 800fdb8:	1b1c      	subs	r4, r3, r4
 800fdba:	4b83      	ldr	r3, [pc, #524]	; (800ffc8 <MotionCP_Update+0x438>)
 800fdbc:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800fdc0:	ed94 7b00 	vldr	d7, [r4]
 800fdc4:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800fdc8:	ec53 2b17 	vmov	r2, r3, d7
 800fdcc:	ed8d 7b00 	vstr	d7, [sp]
 800fdd0:	9612      	str	r6, [sp, #72]	; 0x48
 800fdd2:	f7f0 fb91 	bl	80004f8 <__aeabi_dmul>
 800fdd6:	4602      	mov	r2, r0
 800fdd8:	460b      	mov	r3, r1
 800fdda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fdde:	f7f0 f9d5 	bl	800018c <__adddf3>
 800fde2:	460f      	mov	r7, r1
 800fde4:	9911      	ldr	r1, [sp, #68]	; 0x44
 800fde6:	4606      	mov	r6, r0
 800fde8:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800fdec:	ec47 6b17 	vmov	d7, r6, r7
 800fdf0:	9111      	str	r1, [sp, #68]	; 0x44
 800fdf2:	ed85 7b12 	vstr	d7, [r5, #72]	; 0x48
 800fdf6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fdfa:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800fdfe:	f7f0 fb7b 	bl	80004f8 <__aeabi_dmul>
 800fe02:	4602      	mov	r2, r0
 800fe04:	460b      	mov	r3, r1
 800fe06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fe0a:	f7f0 f9bf 	bl	800018c <__adddf3>
 800fe0e:	460f      	mov	r7, r1
 800fe10:	990c      	ldr	r1, [sp, #48]	; 0x30
 800fe12:	4606      	mov	r6, r0
 800fe14:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800fe18:	ec47 6b17 	vmov	d7, r6, r7
 800fe1c:	910c      	str	r1, [sp, #48]	; 0x30
 800fe1e:	ed85 7b24 	vstr	d7, [r5, #144]	; 0x90
 800fe22:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fe26:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800fe2a:	f7f0 fb65 	bl	80004f8 <__aeabi_dmul>
 800fe2e:	4602      	mov	r2, r0
 800fe30:	460b      	mov	r3, r1
 800fe32:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fe36:	f7f0 f9a9 	bl	800018c <__adddf3>
 800fe3a:	460f      	mov	r7, r1
 800fe3c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800fe3e:	4606      	mov	r6, r0
 800fe40:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800fe44:	ec47 6b17 	vmov	d7, r6, r7
 800fe48:	910e      	str	r1, [sp, #56]	; 0x38
 800fe4a:	ed85 7b36 	vstr	d7, [r5, #216]	; 0xd8
 800fe4e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fe52:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800fe56:	f7f0 fb4f 	bl	80004f8 <__aeabi_dmul>
 800fe5a:	4602      	mov	r2, r0
 800fe5c:	460b      	mov	r3, r1
 800fe5e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800fe62:	f7f0 f993 	bl	800018c <__adddf3>
 800fe66:	460f      	mov	r7, r1
 800fe68:	9910      	ldr	r1, [sp, #64]	; 0x40
 800fe6a:	4606      	mov	r6, r0
 800fe6c:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800fe70:	ec47 6b17 	vmov	d7, r6, r7
 800fe74:	9110      	str	r1, [sp, #64]	; 0x40
 800fe76:	ed85 7b48 	vstr	d7, [r5, #288]	; 0x120
 800fe7a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fe7e:	e9cd 6708 	strd	r6, r7, [sp, #32]
 800fe82:	f7f0 fb39 	bl	80004f8 <__aeabi_dmul>
 800fe86:	460b      	mov	r3, r1
 800fe88:	4602      	mov	r2, r0
 800fe8a:	4659      	mov	r1, fp
 800fe8c:	4650      	mov	r0, sl
 800fe8e:	f7f0 f97d 	bl	800018c <__adddf3>
 800fe92:	4b4e      	ldr	r3, [pc, #312]	; (800ffcc <MotionCP_Update+0x43c>)
 800fe94:	468b      	mov	fp, r1
 800fe96:	ea4f 08c9 	mov.w	r8, r9, lsl #3
 800fe9a:	4682      	mov	sl, r0
 800fe9c:	eb03 0108 	add.w	r1, r3, r8
 800fea0:	e9c5 ab5a 	strd	sl, fp, [r5, #360]	; 0x168
 800fea4:	fa5f f689 	uxtb.w	r6, r9
 800fea8:	f1b9 0f00 	cmp.w	r9, #0
 800feac:	f43f af72 	beq.w	800fd94 <MotionCP_Update+0x204>
 800feb0:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
 800feb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800feb8:	f7f0 fb1e 	bl	80004f8 <__aeabi_dmul>
 800febc:	4602      	mov	r2, r0
 800febe:	460b      	mov	r3, r1
 800fec0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fec4:	f7f0 f960 	bl	8000188 <__aeabi_dsub>
 800fec8:	4b41      	ldr	r3, [pc, #260]	; (800ffd0 <MotionCP_Update+0x440>)
 800feca:	4443      	add	r3, r8
 800fecc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fed0:	e9c5 0112 	strd	r0, r1, [r5, #72]	; 0x48
 800fed4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fed8:	e9d4 2324 	ldrd	r2, r3, [r4, #144]	; 0x90
 800fedc:	f7f0 fb0c 	bl	80004f8 <__aeabi_dmul>
 800fee0:	4602      	mov	r2, r0
 800fee2:	460b      	mov	r3, r1
 800fee4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fee8:	f7f0 f94e 	bl	8000188 <__aeabi_dsub>
 800feec:	4b39      	ldr	r3, [pc, #228]	; (800ffd4 <MotionCP_Update+0x444>)
 800feee:	4498      	add	r8, r3
 800fef0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fef4:	e9d4 2336 	ldrd	r2, r3, [r4, #216]	; 0xd8
 800fef8:	e9c5 0124 	strd	r0, r1, [r5, #144]	; 0x90
 800fefc:	e9d8 0100 	ldrd	r0, r1, [r8]
 800ff00:	f7f0 fafa 	bl	80004f8 <__aeabi_dmul>
 800ff04:	4602      	mov	r2, r0
 800ff06:	460b      	mov	r3, r1
 800ff08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ff0c:	f7f0 f93c 	bl	8000188 <__aeabi_dsub>
 800ff10:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ff14:	e9c5 0136 	strd	r0, r1, [r5, #216]	; 0xd8
 800ff18:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ff1a:	e9d4 2348 	ldrd	r2, r3, [r4, #288]	; 0x120
 800ff1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ff22:	f7f0 fae9 	bl	80004f8 <__aeabi_dmul>
 800ff26:	4602      	mov	r2, r0
 800ff28:	460b      	mov	r3, r1
 800ff2a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ff2e:	f7f0 f92b 	bl	8000188 <__aeabi_dsub>
 800ff32:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ff36:	e9c5 0148 	strd	r0, r1, [r5, #288]	; 0x120
 800ff3a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ff3c:	e9d4 235a 	ldrd	r2, r3, [r4, #360]	; 0x168
 800ff40:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ff44:	f7f0 fad8 	bl	80004f8 <__aeabi_dmul>
 800ff48:	4602      	mov	r2, r0
 800ff4a:	460b      	mov	r3, r1
 800ff4c:	4650      	mov	r0, sl
 800ff4e:	4659      	mov	r1, fp
 800ff50:	f7f0 f91a 	bl	8000188 <__aeabi_dsub>
 800ff54:	2e08      	cmp	r6, #8
 800ff56:	4682      	mov	sl, r0
 800ff58:	468b      	mov	fp, r1
 800ff5a:	e9c5 ab5a 	strd	sl, fp, [r5, #360]	; 0x168
 800ff5e:	f47f af19 	bne.w	800fd94 <MotionCP_Update+0x204>
 800ff62:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ff64:	4b17      	ldr	r3, [pc, #92]	; (800ffc4 <MotionCP_Update+0x434>)
 800ff66:	4c1c      	ldr	r4, [pc, #112]	; (800ffd8 <MotionCP_Update+0x448>)
 800ff68:	481c      	ldr	r0, [pc, #112]	; (800ffdc <MotionCP_Update+0x44c>)
 800ff6a:	3201      	adds	r2, #1
 800ff6c:	fba3 1302 	umull	r1, r3, r3, r2
 800ff70:	9914      	ldr	r1, [sp, #80]	; 0x50
 800ff72:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ff76:	085b      	lsrs	r3, r3, #1
 800ff78:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800ff7c:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800ff80:	1ad3      	subs	r3, r2, r3
 800ff82:	eb04 02c1 	add.w	r2, r4, r1, lsl #3
 800ff86:	ed82 7b00 	vstr	d7, [r2]
 800ff8a:	ed9d 7b04 	vldr	d7, [sp, #16]
 800ff8e:	ed82 7b02 	vstr	d7, [r2, #8]
 800ff92:	ed9d 7b06 	vldr	d7, [sp, #24]
 800ff96:	f880 31e0 	strb.w	r3, [r0, #480]	; 0x1e0
 800ff9a:	ed82 7b04 	vstr	d7, [r2, #16]
 800ff9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ffa0:	ed9d 7b08 	vldr	d7, [sp, #32]
 800ffa4:	2b32      	cmp	r3, #50	; 0x32
 800ffa6:	ed82 7b06 	vstr	d7, [r2, #24]
 800ffaa:	e9c2 ab08 	strd	sl, fp, [r2, #32]
 800ffae:	d017      	beq.n	800ffe0 <MotionCP_Update+0x450>
 800ffb0:	4b0a      	ldr	r3, [pc, #40]	; (800ffdc <MotionCP_Update+0x44c>)
 800ffb2:	f893 71e1 	ldrb.w	r7, [r3, #481]	; 0x1e1
 800ffb6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ffb8:	701f      	strb	r7, [r3, #0]
 800ffba:	b021      	add	sp, #132	; 0x84
 800ffbc:	ecbd 8b06 	vpop	{d8-d10}
 800ffc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffc4:	38e38e39 	.word	0x38e38e39
 800ffc8:	200001a8 	.word	0x200001a8
 800ffcc:	08022c70 	.word	0x08022c70
 800ffd0:	08022cb8 	.word	0x08022cb8
 800ffd4:	08022d00 	.word	0x08022d00
 800ffd8:	200033d0 	.word	0x200033d0
 800ffdc:	200031c8 	.word	0x200031c8
 800ffe0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d0e4      	beq.n	800ffb0 <MotionCP_Update+0x420>
 800ffe6:	4dd8      	ldr	r5, [pc, #864]	; (8010348 <MotionCP_Update+0x7b8>)
 800ffe8:	f04f 0b00 	mov.w	fp, #0
 800ffec:	f505 6361 	add.w	r3, r5, #3600	; 0xe10
 800fff0:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 800fff4:	f8cd b000 	str.w	fp, [sp]
 800fff8:	f8cd b010 	str.w	fp, [sp, #16]
 800fffc:	f8cd b008 	str.w	fp, [sp, #8]
 8010000:	f8cd b018 	str.w	fp, [sp, #24]
 8010004:	46d9      	mov	r9, fp
 8010006:	46da      	mov	sl, fp
 8010008:	f8cd b020 	str.w	fp, [sp, #32]
 801000c:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8010010:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8010014:	46d8      	mov	r8, fp
 8010016:	930b      	str	r3, [sp, #44]	; 0x2c
 8010018:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40
 801001c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8010020:	4610      	mov	r0, r2
 8010022:	4619      	mov	r1, r3
 8010024:	f7f0 fa68 	bl	80004f8 <__aeabi_dmul>
 8010028:	4606      	mov	r6, r0
 801002a:	9806      	ldr	r0, [sp, #24]
 801002c:	460f      	mov	r7, r1
 801002e:	f7f0 fa0b 	bl	8000448 <__aeabi_f2d>
 8010032:	4602      	mov	r2, r0
 8010034:	460b      	mov	r3, r1
 8010036:	4630      	mov	r0, r6
 8010038:	4639      	mov	r1, r7
 801003a:	f7f0 f8a7 	bl	800018c <__adddf3>
 801003e:	f7f0 fd53 	bl	8000ae8 <__aeabi_d2f>
 8010042:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8010046:	9006      	str	r0, [sp, #24]
 8010048:	4619      	mov	r1, r3
 801004a:	4610      	mov	r0, r2
 801004c:	f7f0 fa54 	bl	80004f8 <__aeabi_dmul>
 8010050:	4606      	mov	r6, r0
 8010052:	9802      	ldr	r0, [sp, #8]
 8010054:	460f      	mov	r7, r1
 8010056:	f7f0 f9f7 	bl	8000448 <__aeabi_f2d>
 801005a:	4602      	mov	r2, r0
 801005c:	460b      	mov	r3, r1
 801005e:	4630      	mov	r0, r6
 8010060:	4639      	mov	r1, r7
 8010062:	f7f0 f893 	bl	800018c <__adddf3>
 8010066:	f7f0 fd3f 	bl	8000ae8 <__aeabi_d2f>
 801006a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 801006e:	9002      	str	r0, [sp, #8]
 8010070:	4619      	mov	r1, r3
 8010072:	4610      	mov	r0, r2
 8010074:	f7f0 fa40 	bl	80004f8 <__aeabi_dmul>
 8010078:	4606      	mov	r6, r0
 801007a:	9804      	ldr	r0, [sp, #16]
 801007c:	460f      	mov	r7, r1
 801007e:	f7f0 f9e3 	bl	8000448 <__aeabi_f2d>
 8010082:	4602      	mov	r2, r0
 8010084:	460b      	mov	r3, r1
 8010086:	4630      	mov	r0, r6
 8010088:	4639      	mov	r1, r7
 801008a:	f7f0 f87f 	bl	800018c <__adddf3>
 801008e:	f7f0 fd2b 	bl	8000ae8 <__aeabi_d2f>
 8010092:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8010096:	9004      	str	r0, [sp, #16]
 8010098:	4619      	mov	r1, r3
 801009a:	4610      	mov	r0, r2
 801009c:	f7f0 fa2c 	bl	80004f8 <__aeabi_dmul>
 80100a0:	4606      	mov	r6, r0
 80100a2:	9800      	ldr	r0, [sp, #0]
 80100a4:	460f      	mov	r7, r1
 80100a6:	f7f0 f9cf 	bl	8000448 <__aeabi_f2d>
 80100aa:	4602      	mov	r2, r0
 80100ac:	460b      	mov	r3, r1
 80100ae:	4630      	mov	r0, r6
 80100b0:	4639      	mov	r1, r7
 80100b2:	f7f0 f86b 	bl	800018c <__adddf3>
 80100b6:	f7f0 fd17 	bl	8000ae8 <__aeabi_d2f>
 80100ba:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 80100be:	9000      	str	r0, [sp, #0]
 80100c0:	4619      	mov	r1, r3
 80100c2:	4610      	mov	r0, r2
 80100c4:	f7f0 fa18 	bl	80004f8 <__aeabi_dmul>
 80100c8:	4606      	mov	r6, r0
 80100ca:	4658      	mov	r0, fp
 80100cc:	460f      	mov	r7, r1
 80100ce:	f7f0 f9bb 	bl	8000448 <__aeabi_f2d>
 80100d2:	4602      	mov	r2, r0
 80100d4:	460b      	mov	r3, r1
 80100d6:	4630      	mov	r0, r6
 80100d8:	4639      	mov	r1, r7
 80100da:	f7f0 f857 	bl	800018c <__adddf3>
 80100de:	f7f0 fd03 	bl	8000ae8 <__aeabi_d2f>
 80100e2:	4683      	mov	fp, r0
 80100e4:	9808      	ldr	r0, [sp, #32]
 80100e6:	f7f0 f9af 	bl	8000448 <__aeabi_f2d>
 80100ea:	e9d5 2300 	ldrd	r2, r3, [r5]
 80100ee:	f7f0 f84d 	bl	800018c <__adddf3>
 80100f2:	f7f0 fcf9 	bl	8000ae8 <__aeabi_d2f>
 80100f6:	9008      	str	r0, [sp, #32]
 80100f8:	4648      	mov	r0, r9
 80100fa:	f7f0 f9a5 	bl	8000448 <__aeabi_f2d>
 80100fe:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8010102:	f7f0 f843 	bl	800018c <__adddf3>
 8010106:	f7f0 fcef 	bl	8000ae8 <__aeabi_d2f>
 801010a:	4681      	mov	r9, r0
 801010c:	4640      	mov	r0, r8
 801010e:	f7f0 f99b 	bl	8000448 <__aeabi_f2d>
 8010112:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8010116:	f7f0 f839 	bl	800018c <__adddf3>
 801011a:	f7f0 fce5 	bl	8000ae8 <__aeabi_d2f>
 801011e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010120:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 8010124:	4680      	mov	r8, r0
 8010126:	4650      	mov	r0, sl
 8010128:	930b      	str	r3, [sp, #44]	; 0x2c
 801012a:	f7f0 f98d 	bl	8000448 <__aeabi_f2d>
 801012e:	4632      	mov	r2, r6
 8010130:	463b      	mov	r3, r7
 8010132:	f7f0 f82b 	bl	800018c <__adddf3>
 8010136:	f7f0 fcd7 	bl	8000ae8 <__aeabi_d2f>
 801013a:	4632      	mov	r2, r6
 801013c:	463b      	mov	r3, r7
 801013e:	4682      	mov	sl, r0
 8010140:	4639      	mov	r1, r7
 8010142:	4630      	mov	r0, r6
 8010144:	f7f0 f9d8 	bl	80004f8 <__aeabi_dmul>
 8010148:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801014c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801014e:	f7f0 f97b 	bl	8000448 <__aeabi_f2d>
 8010152:	4602      	mov	r2, r0
 8010154:	460b      	mov	r3, r1
 8010156:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801015a:	f7f0 f817 	bl	800018c <__adddf3>
 801015e:	f7f0 fcc3 	bl	8000ae8 <__aeabi_d2f>
 8010162:	900a      	str	r0, [sp, #40]	; 0x28
 8010164:	980e      	ldr	r0, [sp, #56]	; 0x38
 8010166:	f7f0 f96f 	bl	8000448 <__aeabi_f2d>
 801016a:	4632      	mov	r2, r6
 801016c:	463b      	mov	r3, r7
 801016e:	f7f0 fc35 	bl	80009dc <__aeabi_dcmplt>
 8010172:	b120      	cbz	r0, 801017e <MotionCP_Update+0x5ee>
 8010174:	4630      	mov	r0, r6
 8010176:	4639      	mov	r1, r7
 8010178:	f7f0 fcb6 	bl	8000ae8 <__aeabi_d2f>
 801017c:	900e      	str	r0, [sp, #56]	; 0x38
 801017e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8010180:	f7f0 f962 	bl	8000448 <__aeabi_f2d>
 8010184:	4632      	mov	r2, r6
 8010186:	463b      	mov	r3, r7
 8010188:	f7f0 fc46 	bl	8000a18 <__aeabi_dcmpgt>
 801018c:	b120      	cbz	r0, 8010198 <MotionCP_Update+0x608>
 801018e:	4630      	mov	r0, r6
 8010190:	4639      	mov	r1, r7
 8010192:	f7f0 fca9 	bl	8000ae8 <__aeabi_d2f>
 8010196:	9010      	str	r0, [sp, #64]	; 0x40
 8010198:	4b6c      	ldr	r3, [pc, #432]	; (801034c <MotionCP_Update+0x7bc>)
 801019a:	3428      	adds	r4, #40	; 0x28
 801019c:	429c      	cmp	r4, r3
 801019e:	f105 0518 	add.w	r5, r5, #24
 80101a2:	f47f af3b 	bne.w	801001c <MotionCP_Update+0x48c>
 80101a6:	eddd 7a02 	vldr	s15, [sp, #8]
 80101aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80101ae:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80101b2:	4653      	mov	r3, sl
 80101b4:	46ca      	mov	sl, r9
 80101b6:	46c1      	mov	r9, r8
 80101b8:	4698      	mov	r8, r3
 80101ba:	ed9d 7a02 	vldr	s14, [sp, #8]
 80101be:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80101c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101c6:	f000 80eb 	beq.w	80103a0 <MotionCP_Update+0x810>
 80101ca:	ed9d 7a06 	vldr	s14, [sp, #24]
 80101ce:	ee27 6a27 	vmul.f32	s12, s14, s15
 80101d2:	ed9d 7a04 	vldr	s14, [sp, #16]
 80101d6:	ed8d 6a1b 	vstr	s12, [sp, #108]	; 0x6c
 80101da:	ee67 6a27 	vmul.f32	s13, s14, s15
 80101de:	ee05 ba90 	vmov	s11, fp
 80101e2:	ed9d 7a00 	vldr	s14, [sp]
 80101e6:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 80101ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80101ee:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80101f2:	ed8d 7a1e 	vstr	s14, [sp, #120]	; 0x78
 80101f6:	edcd 7a1f 	vstr	s15, [sp, #124]	; 0x7c
 80101fa:	eddf aa55 	vldr	s21, [pc, #340]	; 8010350 <MotionCP_Update+0x7c0>
 80101fe:	eddd 7a08 	vldr	s15, [sp, #32]
 8010202:	ed9d 7a10 	vldr	s14, [sp, #64]	; 0x40
 8010206:	ee27 8aaa 	vmul.f32	s16, s15, s21
 801020a:	ee07 9a90 	vmov	s15, r9
 801020e:	ee67 8aaa 	vmul.f32	s17, s15, s21
 8010212:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 8010216:	ee37 9ac7 	vsub.f32	s18, s15, s14
 801021a:	eec8 7a28 	vdiv.f32	s15, s16, s17
 801021e:	ee17 0a90 	vmov	r0, s15
 8010222:	f7f0 f911 	bl	8000448 <__aeabi_f2d>
 8010226:	f010 fb7f 	bl	8020928 <atan>
 801022a:	a345      	add	r3, pc, #276	; (adr r3, 8010340 <MotionCP_Update+0x7b0>)
 801022c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010230:	f7f0 f962 	bl	80004f8 <__aeabi_dmul>
 8010234:	f7f0 fc58 	bl	8000ae8 <__aeabi_d2f>
 8010238:	ee07 aa90 	vmov	s15, sl
 801023c:	ee67 7aaa 	vmul.f32	s15, s15, s21
 8010240:	ee0a 0a10 	vmov	s20, r0
 8010244:	ee17 0a90 	vmov	r0, s15
 8010248:	f7f0 f8fe 	bl	8000448 <__aeabi_f2d>
 801024c:	ee68 7a08 	vmul.f32	s15, s16, s16
 8010250:	4604      	mov	r4, r0
 8010252:	eee8 7aa8 	vfma.f32	s15, s17, s17
 8010256:	460d      	mov	r5, r1
 8010258:	e9cd 4508 	strd	r4, r5, [sp, #32]
 801025c:	ee17 0a90 	vmov	r0, s15
 8010260:	f7f0 f8f2 	bl	8000448 <__aeabi_f2d>
 8010264:	f010 ff98 	bl	8021198 <sqrt>
 8010268:	4602      	mov	r2, r0
 801026a:	460b      	mov	r3, r1
 801026c:	4620      	mov	r0, r4
 801026e:	4629      	mov	r1, r5
 8010270:	f7f0 fa6c 	bl	800074c <__aeabi_ddiv>
 8010274:	f010 fb58 	bl	8020928 <atan>
 8010278:	a331      	add	r3, pc, #196	; (adr r3, 8010340 <MotionCP_Update+0x7b0>)
 801027a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801027e:	f7f0 f93b 	bl	80004f8 <__aeabi_dmul>
 8010282:	f7f0 fc31 	bl	8000ae8 <__aeabi_d2f>
 8010286:	eddf 7a33 	vldr	s15, [pc, #204]	; 8010354 <MotionCP_Update+0x7c4>
 801028a:	eeb4 9ae7 	vcmpe.f32	s18, s15
 801028e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010292:	ee09 0a90 	vmov	s19, r0
 8010296:	f200 814f 	bhi.w	8010538 <MotionCP_Update+0x9a8>
 801029a:	eddf 7a2f 	vldr	s15, [pc, #188]	; 8010358 <MotionCP_Update+0x7c8>
 801029e:	eeb4 9ae7 	vcmpe.f32	s18, s15
 80102a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102a6:	eeb0 aaca 	vabs.f32	s20, s20
 80102aa:	f200 81cd 	bhi.w	8010648 <MotionCP_Update+0xab8>
 80102ae:	eddf 7a2b 	vldr	s15, [pc, #172]	; 801035c <MotionCP_Update+0x7cc>
 80102b2:	eeb4 aae7 	vcmpe.f32	s20, s15
 80102b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102ba:	f340 8204 	ble.w	80106c6 <MotionCP_Update+0xb36>
 80102be:	eddf 7a28 	vldr	s15, [pc, #160]	; 8010360 <MotionCP_Update+0x7d0>
 80102c2:	eeb4 aae7 	vcmpe.f32	s20, s15
 80102c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102ca:	f140 81fc 	bpl.w	80106c6 <MotionCP_Update+0xb36>
 80102ce:	eddf 7a25 	vldr	s15, [pc, #148]	; 8010364 <MotionCP_Update+0x7d4>
 80102d2:	eef4 9ae7 	vcmpe.f32	s19, s15
 80102d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102da:	f340 81f4 	ble.w	80106c6 <MotionCP_Update+0xb36>
 80102de:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 80102e2:	eef4 9ae7 	vcmpe.f32	s19, s15
 80102e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102ea:	bf4c      	ite	mi
 80102ec:	2703      	movmi	r7, #3
 80102ee:	2701      	movpl	r7, #1
 80102f0:	4b1d      	ldr	r3, [pc, #116]	; (8010368 <MotionCP_Update+0x7d8>)
 80102f2:	f503 70f8 	add.w	r0, r3, #496	; 0x1f0
 80102f6:	f8d3 61e4 	ldr.w	r6, [r3, #484]	; 0x1e4
 80102fa:	f8d3 51e8 	ldr.w	r5, [r3, #488]	; 0x1e8
 80102fe:	f8d3 41ec 	ldr.w	r4, [r3, #492]	; 0x1ec
 8010302:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 8010304:	0064      	lsls	r4, r4, #1
 8010306:	0040      	lsls	r0, r0, #1
 8010308:	0049      	lsls	r1, r1, #1
 801030a:	0052      	lsls	r2, r2, #1
 801030c:	005b      	lsls	r3, r3, #1
 801030e:	f004 0c7e 	and.w	ip, r4, #126	; 0x7e
 8010312:	0076      	lsls	r6, r6, #1
 8010314:	f000 047e 	and.w	r4, r0, #126	; 0x7e
 8010318:	006d      	lsls	r5, r5, #1
 801031a:	f001 007e 	and.w	r0, r1, #126	; 0x7e
 801031e:	f002 017e 	and.w	r1, r2, #126	; 0x7e
 8010322:	f003 027e 	and.w	r2, r3, #126	; 0x7e
 8010326:	4b10      	ldr	r3, [pc, #64]	; (8010368 <MotionCP_Update+0x7d8>)
 8010328:	f006 067e 	and.w	r6, r6, #126	; 0x7e
 801032c:	f005 057e 	and.w	r5, r5, #126	; 0x7e
 8010330:	f107 3eff 	add.w	lr, r7, #4294967295
 8010334:	f8c3 61e4 	str.w	r6, [r3, #484]	; 0x1e4
 8010338:	f8c3 51e8 	str.w	r5, [r3, #488]	; 0x1e8
 801033c:	e016      	b.n	801036c <MotionCP_Update+0x7dc>
 801033e:	bf00      	nop
 8010340:	1a63c1f5 	.word	0x1a63c1f5
 8010344:	404ca5dc 	.word	0x404ca5dc
 8010348:	200020e8 	.word	0x200020e8
 801034c:	20004b40 	.word	0x20004b40
 8010350:	3bda740e 	.word	0x3bda740e
 8010354:	3f76d634 	.word	0x3f76d634
 8010358:	3d23d70a 	.word	0x3d23d70a
 801035c:	42480000 	.word	0x42480000
 8010360:	42b40000 	.word	0x42b40000
 8010364:	c2700000 	.word	0xc2700000
 8010368:	200031c8 	.word	0x200031c8
 801036c:	f8c3 c1ec 	str.w	ip, [r3, #492]	; 0x1ec
 8010370:	f8c3 41f0 	str.w	r4, [r3, #496]	; 0x1f0
 8010374:	f8c3 01f4 	str.w	r0, [r3, #500]	; 0x1f4
 8010378:	f8c3 11f8 	str.w	r1, [r3, #504]	; 0x1f8
 801037c:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
 8010380:	4673      	mov	r3, lr
 8010382:	2b06      	cmp	r3, #6
 8010384:	d816      	bhi.n	80103b4 <MotionCP_Update+0x824>
 8010386:	e8df f013 	tbh	[pc, r3, lsl #1]
 801038a:	00cc      	.short	0x00cc
 801038c:	00d100c7 	.word	0x00d100c7
 8010390:	00c200b8 	.word	0x00c200b8
 8010394:	001100bd 	.word	0x001100bd
 8010398:	2301      	movs	r3, #1
 801039a:	7463      	strb	r3, [r4, #17]
 801039c:	9319      	str	r3, [sp, #100]	; 0x64
 801039e:	e4b8      	b.n	800fd12 <MotionCP_Update+0x182>
 80103a0:	2300      	movs	r3, #0
 80103a2:	931d      	str	r3, [sp, #116]	; 0x74
 80103a4:	931b      	str	r3, [sp, #108]	; 0x6c
 80103a6:	e9cd 331e 	strd	r3, r3, [sp, #120]	; 0x78
 80103aa:	e726      	b.n	80101fa <MotionCP_Update+0x66a>
 80103ac:	4b9e      	ldr	r3, [pc, #632]	; (8010628 <MotionCP_Update+0xa98>)
 80103ae:	3201      	adds	r2, #1
 80103b0:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
 80103b4:	f006 0301 	and.w	r3, r6, #1
 80103b8:	f016 0f02 	tst.w	r6, #2
 80103bc:	bf18      	it	ne
 80103be:	3301      	addne	r3, #1
 80103c0:	f016 0f04 	tst.w	r6, #4
 80103c4:	bf1c      	itt	ne
 80103c6:	3301      	addne	r3, #1
 80103c8:	b2db      	uxtbne	r3, r3
 80103ca:	f016 0f08 	tst.w	r6, #8
 80103ce:	bf1c      	itt	ne
 80103d0:	3301      	addne	r3, #1
 80103d2:	b2db      	uxtbne	r3, r3
 80103d4:	06f6      	lsls	r6, r6, #27
 80103d6:	d505      	bpl.n	80103e4 <MotionCP_Update+0x854>
 80103d8:	2b04      	cmp	r3, #4
 80103da:	d103      	bne.n	80103e4 <MotionCP_Update+0x854>
 80103dc:	4e92      	ldr	r6, [pc, #584]	; (8010628 <MotionCP_Update+0xa98>)
 80103de:	2301      	movs	r3, #1
 80103e0:	f886 3200 	strb.w	r3, [r6, #512]	; 0x200
 80103e4:	f005 0301 	and.w	r3, r5, #1
 80103e8:	07ae      	lsls	r6, r5, #30
 80103ea:	bf48      	it	mi
 80103ec:	3301      	addmi	r3, #1
 80103ee:	076e      	lsls	r6, r5, #29
 80103f0:	bf44      	itt	mi
 80103f2:	3301      	addmi	r3, #1
 80103f4:	b2db      	uxtbmi	r3, r3
 80103f6:	072e      	lsls	r6, r5, #28
 80103f8:	bf44      	itt	mi
 80103fa:	3301      	addmi	r3, #1
 80103fc:	b2db      	uxtbmi	r3, r3
 80103fe:	06ee      	lsls	r6, r5, #27
 8010400:	d505      	bpl.n	801040e <MotionCP_Update+0x87e>
 8010402:	2b04      	cmp	r3, #4
 8010404:	d103      	bne.n	801040e <MotionCP_Update+0x87e>
 8010406:	4d88      	ldr	r5, [pc, #544]	; (8010628 <MotionCP_Update+0xa98>)
 8010408:	2302      	movs	r3, #2
 801040a:	f885 3200 	strb.w	r3, [r5, #512]	; 0x200
 801040e:	f00c 0301 	and.w	r3, ip, #1
 8010412:	f01c 0f02 	tst.w	ip, #2
 8010416:	bf18      	it	ne
 8010418:	3301      	addne	r3, #1
 801041a:	f01c 0f04 	tst.w	ip, #4
 801041e:	bf1c      	itt	ne
 8010420:	3301      	addne	r3, #1
 8010422:	b2db      	uxtbne	r3, r3
 8010424:	f01c 0f08 	tst.w	ip, #8
 8010428:	bf1c      	itt	ne
 801042a:	3301      	addne	r3, #1
 801042c:	b2db      	uxtbne	r3, r3
 801042e:	f01c 0f10 	tst.w	ip, #16
 8010432:	d005      	beq.n	8010440 <MotionCP_Update+0x8b0>
 8010434:	2b04      	cmp	r3, #4
 8010436:	d103      	bne.n	8010440 <MotionCP_Update+0x8b0>
 8010438:	4d7b      	ldr	r5, [pc, #492]	; (8010628 <MotionCP_Update+0xa98>)
 801043a:	2303      	movs	r3, #3
 801043c:	f885 3200 	strb.w	r3, [r5, #512]	; 0x200
 8010440:	f004 0301 	and.w	r3, r4, #1
 8010444:	07a5      	lsls	r5, r4, #30
 8010446:	bf48      	it	mi
 8010448:	3301      	addmi	r3, #1
 801044a:	0766      	lsls	r6, r4, #29
 801044c:	bf44      	itt	mi
 801044e:	3301      	addmi	r3, #1
 8010450:	b2db      	uxtbmi	r3, r3
 8010452:	0725      	lsls	r5, r4, #28
 8010454:	bf44      	itt	mi
 8010456:	3301      	addmi	r3, #1
 8010458:	b2db      	uxtbmi	r3, r3
 801045a:	06e6      	lsls	r6, r4, #27
 801045c:	d504      	bpl.n	8010468 <MotionCP_Update+0x8d8>
 801045e:	2b04      	cmp	r3, #4
 8010460:	bf04      	itt	eq
 8010462:	4c71      	ldreq	r4, [pc, #452]	; (8010628 <MotionCP_Update+0xa98>)
 8010464:	f884 3200 	strbeq.w	r3, [r4, #512]	; 0x200
 8010468:	f000 0301 	and.w	r3, r0, #1
 801046c:	0785      	lsls	r5, r0, #30
 801046e:	bf48      	it	mi
 8010470:	3301      	addmi	r3, #1
 8010472:	0744      	lsls	r4, r0, #29
 8010474:	bf44      	itt	mi
 8010476:	3301      	addmi	r3, #1
 8010478:	b2db      	uxtbmi	r3, r3
 801047a:	0706      	lsls	r6, r0, #28
 801047c:	bf44      	itt	mi
 801047e:	3301      	addmi	r3, #1
 8010480:	b2db      	uxtbmi	r3, r3
 8010482:	06c5      	lsls	r5, r0, #27
 8010484:	d505      	bpl.n	8010492 <MotionCP_Update+0x902>
 8010486:	2b04      	cmp	r3, #4
 8010488:	d103      	bne.n	8010492 <MotionCP_Update+0x902>
 801048a:	4867      	ldr	r0, [pc, #412]	; (8010628 <MotionCP_Update+0xa98>)
 801048c:	2305      	movs	r3, #5
 801048e:	f880 3200 	strb.w	r3, [r0, #512]	; 0x200
 8010492:	f001 0301 	and.w	r3, r1, #1
 8010496:	078c      	lsls	r4, r1, #30
 8010498:	bf48      	it	mi
 801049a:	3301      	addmi	r3, #1
 801049c:	0748      	lsls	r0, r1, #29
 801049e:	bf44      	itt	mi
 80104a0:	3301      	addmi	r3, #1
 80104a2:	b2db      	uxtbmi	r3, r3
 80104a4:	070e      	lsls	r6, r1, #28
 80104a6:	bf44      	itt	mi
 80104a8:	3301      	addmi	r3, #1
 80104aa:	b2db      	uxtbmi	r3, r3
 80104ac:	06cd      	lsls	r5, r1, #27
 80104ae:	d505      	bpl.n	80104bc <MotionCP_Update+0x92c>
 80104b0:	2b04      	cmp	r3, #4
 80104b2:	d103      	bne.n	80104bc <MotionCP_Update+0x92c>
 80104b4:	495c      	ldr	r1, [pc, #368]	; (8010628 <MotionCP_Update+0xa98>)
 80104b6:	2306      	movs	r3, #6
 80104b8:	f881 3200 	strb.w	r3, [r1, #512]	; 0x200
 80104bc:	f002 0301 	and.w	r3, r2, #1
 80104c0:	0794      	lsls	r4, r2, #30
 80104c2:	bf48      	it	mi
 80104c4:	3301      	addmi	r3, #1
 80104c6:	0750      	lsls	r0, r2, #29
 80104c8:	bf44      	itt	mi
 80104ca:	3301      	addmi	r3, #1
 80104cc:	b2db      	uxtbmi	r3, r3
 80104ce:	0711      	lsls	r1, r2, #28
 80104d0:	bf44      	itt	mi
 80104d2:	3301      	addmi	r3, #1
 80104d4:	b2db      	uxtbmi	r3, r3
 80104d6:	06d2      	lsls	r2, r2, #27
 80104d8:	d505      	bpl.n	80104e6 <MotionCP_Update+0x956>
 80104da:	2b04      	cmp	r3, #4
 80104dc:	d103      	bne.n	80104e6 <MotionCP_Update+0x956>
 80104de:	4a52      	ldr	r2, [pc, #328]	; (8010628 <MotionCP_Update+0xa98>)
 80104e0:	2307      	movs	r3, #7
 80104e2:	f882 3200 	strb.w	r3, [r2, #512]	; 0x200
 80104e6:	4b50      	ldr	r3, [pc, #320]	; (8010628 <MotionCP_Update+0xa98>)
 80104e8:	2f00      	cmp	r7, #0
 80104ea:	f040 8082 	bne.w	80105f2 <MotionCP_Update+0xa62>
 80104ee:	f883 7200 	strb.w	r7, [r3, #512]	; 0x200
 80104f2:	4b4d      	ldr	r3, [pc, #308]	; (8010628 <MotionCP_Update+0xa98>)
 80104f4:	f883 71e1 	strb.w	r7, [r3, #481]	; 0x1e1
 80104f8:	e55d      	b.n	800ffb6 <MotionCP_Update+0x426>
 80104fa:	4b4b      	ldr	r3, [pc, #300]	; (8010628 <MotionCP_Update+0xa98>)
 80104fc:	3401      	adds	r4, #1
 80104fe:	f8c3 41f0 	str.w	r4, [r3, #496]	; 0x1f0
 8010502:	e757      	b.n	80103b4 <MotionCP_Update+0x824>
 8010504:	4b48      	ldr	r3, [pc, #288]	; (8010628 <MotionCP_Update+0xa98>)
 8010506:	3101      	adds	r1, #1
 8010508:	f8c3 11f8 	str.w	r1, [r3, #504]	; 0x1f8
 801050c:	e752      	b.n	80103b4 <MotionCP_Update+0x824>
 801050e:	4b46      	ldr	r3, [pc, #280]	; (8010628 <MotionCP_Update+0xa98>)
 8010510:	3001      	adds	r0, #1
 8010512:	f8c3 01f4 	str.w	r0, [r3, #500]	; 0x1f4
 8010516:	e74d      	b.n	80103b4 <MotionCP_Update+0x824>
 8010518:	4b43      	ldr	r3, [pc, #268]	; (8010628 <MotionCP_Update+0xa98>)
 801051a:	3501      	adds	r5, #1
 801051c:	f8c3 51e8 	str.w	r5, [r3, #488]	; 0x1e8
 8010520:	e748      	b.n	80103b4 <MotionCP_Update+0x824>
 8010522:	4b41      	ldr	r3, [pc, #260]	; (8010628 <MotionCP_Update+0xa98>)
 8010524:	3601      	adds	r6, #1
 8010526:	f8c3 61e4 	str.w	r6, [r3, #484]	; 0x1e4
 801052a:	e743      	b.n	80103b4 <MotionCP_Update+0x824>
 801052c:	4b3e      	ldr	r3, [pc, #248]	; (8010628 <MotionCP_Update+0xa98>)
 801052e:	f10c 0c01 	add.w	ip, ip, #1
 8010532:	f8c3 c1ec 	str.w	ip, [r3, #492]	; 0x1ec
 8010536:	e73d      	b.n	80103b4 <MotionCP_Update+0x824>
 8010538:	ee18 0a90 	vmov	r0, s17
 801053c:	f7ef ff84 	bl	8000448 <__aeabi_f2d>
 8010540:	a32d      	add	r3, pc, #180	; (adr r3, 80105f8 <MotionCP_Update+0xa68>)
 8010542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010546:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801054a:	f7f0 fa51 	bl	80009f0 <__aeabi_dcmple>
 801054e:	2800      	cmp	r0, #0
 8010550:	f040 80f5 	bne.w	801073e <MotionCP_Update+0xbae>
 8010554:	ee19 0a10 	vmov	r0, s18
 8010558:	f7ef ff76 	bl	8000448 <__aeabi_f2d>
 801055c:	eddd 7a1e 	vldr	s15, [sp, #120]	; 0x78
 8010560:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8010562:	f8dd a074 	ldr.w	sl, [sp, #116]	; 0x74
 8010566:	ee17 9a90 	vmov	r9, s15
 801056a:	eddd 7a1f 	vldr	s15, [sp, #124]	; 0x7c
 801056e:	4604      	mov	r4, r0
 8010570:	460d      	mov	r5, r1
 8010572:	a323      	add	r3, pc, #140	; (adr r3, 8010600 <MotionCP_Update+0xa70>)
 8010574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010578:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
 801057c:	edcd 7a0b 	vstr	s15, [sp, #44]	; 0x2c
 8010580:	f7f0 fa36 	bl	80009f0 <__aeabi_dcmple>
 8010584:	2800      	cmp	r0, #0
 8010586:	f000 80e4 	beq.w	8010752 <MotionCP_Update+0xbc2>
 801058a:	9806      	ldr	r0, [sp, #24]
 801058c:	f7ef ff5c 	bl	8000448 <__aeabi_f2d>
 8010590:	a31d      	add	r3, pc, #116	; (adr r3, 8010608 <MotionCP_Update+0xa78>)
 8010592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010596:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801059a:	f7f0 fa29 	bl	80009f0 <__aeabi_dcmple>
 801059e:	2800      	cmp	r0, #0
 80105a0:	f000 811a 	beq.w	80107d8 <MotionCP_Update+0xc48>
 80105a4:	ee18 0a10 	vmov	r0, s16
 80105a8:	f7ef ff4e 	bl	8000448 <__aeabi_f2d>
 80105ac:	a318      	add	r3, pc, #96	; (adr r3, 8010610 <MotionCP_Update+0xa80>)
 80105ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105b2:	f7f0 fa1d 	bl	80009f0 <__aeabi_dcmple>
 80105b6:	2800      	cmp	r0, #0
 80105b8:	f000 8365 	beq.w	8010c86 <MotionCP_Update+0x10f6>
 80105bc:	4630      	mov	r0, r6
 80105be:	f7ef ff43 	bl	8000448 <__aeabi_f2d>
 80105c2:	a315      	add	r3, pc, #84	; (adr r3, 8010618 <MotionCP_Update+0xa88>)
 80105c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105c8:	f7f0 fa12 	bl	80009f0 <__aeabi_dcmple>
 80105cc:	2800      	cmp	r0, #0
 80105ce:	f040 811b 	bne.w	8010808 <MotionCP_Update+0xc78>
 80105d2:	4620      	mov	r0, r4
 80105d4:	4629      	mov	r1, r5
 80105d6:	a312      	add	r3, pc, #72	; (adr r3, 8010620 <MotionCP_Update+0xa90>)
 80105d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105dc:	f7f0 fa08 	bl	80009f0 <__aeabi_dcmple>
 80105e0:	2800      	cmp	r0, #0
 80105e2:	f000 8111 	beq.w	8010808 <MotionCP_Update+0xc78>
 80105e6:	2706      	movs	r7, #6
 80105e8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80105ea:	2bc7      	cmp	r3, #199	; 0xc7
 80105ec:	bf98      	it	ls
 80105ee:	2700      	movls	r7, #0
 80105f0:	e67e      	b.n	80102f0 <MotionCP_Update+0x760>
 80105f2:	f893 7200 	ldrb.w	r7, [r3, #512]	; 0x200
 80105f6:	e77c      	b.n	80104f2 <MotionCP_Update+0x962>
 80105f8:	e071c53f 	.word	0xe071c53f
 80105fc:	bfe9f2d5 	.word	0xbfe9f2d5
 8010600:	80b24207 	.word	0x80b24207
 8010604:	400d9c09 	.word	0x400d9c09
 8010608:	21af7d31 	.word	0x21af7d31
 801060c:	4001ce38 	.word	0x4001ce38
 8010610:	851eb852 	.word	0x851eb852
 8010614:	bfe751eb 	.word	0xbfe751eb
 8010618:	fc5cdd51 	.word	0xfc5cdd51
 801061c:	3fcc4f6d 	.word	0x3fcc4f6d
 8010620:	df3300de 	.word	0xdf3300de
 8010624:	4001cfc1 	.word	0x4001cfc1
 8010628:	200031c8 	.word	0x200031c8
 801062c:	42340000 	.word	0x42340000
 8010630:	c29c0000 	.word	0xc29c0000
 8010634:	420c0000 	.word	0x420c0000
 8010638:	42480000 	.word	0x42480000
 801063c:	42b40000 	.word	0x42b40000
 8010640:	c25c0000 	.word	0xc25c0000
 8010644:	425c0000 	.word	0x425c0000
 8010648:	ed5f 7a08 	vldr	s15, [pc, #-32]	; 801062c <MotionCP_Update+0xa9c>
 801064c:	eeb4 aae7 	vcmpe.f32	s20, s15
 8010650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010654:	d50e      	bpl.n	8010674 <MotionCP_Update+0xae4>
 8010656:	ed5f 7a0a 	vldr	s15, [pc, #-40]	; 8010630 <MotionCP_Update+0xaa0>
 801065a:	eef4 9ae7 	vcmpe.f32	s19, s15
 801065e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010662:	dd07      	ble.n	8010674 <MotionCP_Update+0xae4>
 8010664:	ed5f 7a0d 	vldr	s15, [pc, #-52]	; 8010634 <MotionCP_Update+0xaa4>
 8010668:	eef4 9ae7 	vcmpe.f32	s19, s15
 801066c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010670:	f100 8102 	bmi.w	8010878 <MotionCP_Update+0xce8>
 8010674:	ed5f 7a10 	vldr	s15, [pc, #-64]	; 8010638 <MotionCP_Update+0xaa8>
 8010678:	eeb4 aae7 	vcmpe.f32	s20, s15
 801067c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010680:	dd15      	ble.n	80106ae <MotionCP_Update+0xb1e>
 8010682:	ed5f 7a12 	vldr	s15, [pc, #-72]	; 801063c <MotionCP_Update+0xaac>
 8010686:	eeb4 aae7 	vcmpe.f32	s20, s15
 801068a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801068e:	d50e      	bpl.n	80106ae <MotionCP_Update+0xb1e>
 8010690:	ed5f 7a15 	vldr	s15, [pc, #-84]	; 8010640 <MotionCP_Update+0xab0>
 8010694:	eef4 9ae7 	vcmpe.f32	s19, s15
 8010698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801069c:	dd07      	ble.n	80106ae <MotionCP_Update+0xb1e>
 801069e:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 80106a2:	eef4 9ae7 	vcmpe.f32	s19, s15
 80106a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106aa:	f100 80e7 	bmi.w	801087c <MotionCP_Update+0xcec>
 80106ae:	ed5f 7a1b 	vldr	s15, [pc, #-108]	; 8010644 <MotionCP_Update+0xab4>
 80106b2:	eef0 9ae9 	vabs.f32	s19, s19
 80106b6:	eef4 9ae7 	vcmpe.f32	s19, s15
 80106ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106be:	bfcc      	ite	gt
 80106c0:	2704      	movgt	r7, #4
 80106c2:	2700      	movle	r7, #0
 80106c4:	e614      	b.n	80102f0 <MotionCP_Update+0x760>
 80106c6:	2701      	movs	r7, #1
 80106c8:	e612      	b.n	80102f0 <MotionCP_Update+0x760>
 80106ca:	9804      	ldr	r0, [sp, #16]
 80106cc:	f7ef febc 	bl	8000448 <__aeabi_f2d>
 80106d0:	a3e0      	add	r3, pc, #896	; (adr r3, 8010a54 <MotionCP_Update+0xec4>)
 80106d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106d6:	f7f0 f98b 	bl	80009f0 <__aeabi_dcmple>
 80106da:	2800      	cmp	r0, #0
 80106dc:	f000 8272 	beq.w	8010bc4 <MotionCP_Update+0x1034>
 80106e0:	a3de      	add	r3, pc, #888	; (adr r3, 8010a5c <MotionCP_Update+0xecc>)
 80106e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106e6:	4620      	mov	r0, r4
 80106e8:	4629      	mov	r1, r5
 80106ea:	f7f0 f981 	bl	80009f0 <__aeabi_dcmple>
 80106ee:	bb30      	cbnz	r0, 801073e <MotionCP_Update+0xbae>
 80106f0:	4650      	mov	r0, sl
 80106f2:	f7ef fea9 	bl	8000448 <__aeabi_f2d>
 80106f6:	a3db      	add	r3, pc, #876	; (adr r3, 8010a64 <MotionCP_Update+0xed4>)
 80106f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106fc:	f7f0 f978 	bl	80009f0 <__aeabi_dcmple>
 8010700:	2800      	cmp	r0, #0
 8010702:	f000 8253 	beq.w	8010bac <MotionCP_Update+0x101c>
 8010706:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801070a:	a3d8      	add	r3, pc, #864	; (adr r3, 8010a6c <MotionCP_Update+0xedc>)
 801070c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010710:	f7f0 f96e 	bl	80009f0 <__aeabi_dcmple>
 8010714:	2800      	cmp	r0, #0
 8010716:	d077      	beq.n	8010808 <MotionCP_Update+0xc78>
 8010718:	ee1a 0a10 	vmov	r0, s20
 801071c:	f7ef fe94 	bl	8000448 <__aeabi_f2d>
 8010720:	a3d4      	add	r3, pc, #848	; (adr r3, 8010a74 <MotionCP_Update+0xee4>)
 8010722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010726:	f7f0 f963 	bl	80009f0 <__aeabi_dcmple>
 801072a:	b140      	cbz	r0, 801073e <MotionCP_Update+0xbae>
 801072c:	4620      	mov	r0, r4
 801072e:	4629      	mov	r1, r5
 8010730:	a3d2      	add	r3, pc, #840	; (adr r3, 8010a7c <MotionCP_Update+0xeec>)
 8010732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010736:	f7f0 f95b 	bl	80009f0 <__aeabi_dcmple>
 801073a:	2800      	cmp	r0, #0
 801073c:	d064      	beq.n	8010808 <MotionCP_Update+0xc78>
 801073e:	eddf 7ac4 	vldr	s15, [pc, #784]	; 8010a50 <MotionCP_Update+0xec0>
 8010742:	eeb0 aaca 	vabs.f32	s20, s20
 8010746:	eeb4 aae7 	vcmpe.f32	s20, s15
 801074a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801074e:	d591      	bpl.n	8010674 <MotionCP_Update+0xae4>
 8010750:	e781      	b.n	8010656 <MotionCP_Update+0xac6>
 8010752:	ee18 0a10 	vmov	r0, s16
 8010756:	f7ef fe77 	bl	8000448 <__aeabi_f2d>
 801075a:	a38b      	add	r3, pc, #556	; (adr r3, 8010988 <MotionCP_Update+0xdf8>)
 801075c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010760:	4604      	mov	r4, r0
 8010762:	460d      	mov	r5, r1
 8010764:	f7f0 f944 	bl	80009f0 <__aeabi_dcmple>
 8010768:	2800      	cmp	r0, #0
 801076a:	d04f      	beq.n	801080c <MotionCP_Update+0xc7c>
 801076c:	9800      	ldr	r0, [sp, #0]
 801076e:	f7ef fe6b 	bl	8000448 <__aeabi_f2d>
 8010772:	a387      	add	r3, pc, #540	; (adr r3, 8010990 <MotionCP_Update+0xe00>)
 8010774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010778:	f7f0 f93a 	bl	80009f0 <__aeabi_dcmple>
 801077c:	2800      	cmp	r0, #0
 801077e:	f000 8255 	beq.w	8010c2c <MotionCP_Update+0x109c>
 8010782:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010786:	a384      	add	r3, pc, #528	; (adr r3, 8010998 <MotionCP_Update+0xe08>)
 8010788:	e9d3 2300 	ldrd	r2, r3, [r3]
 801078c:	f7f0 f930 	bl	80009f0 <__aeabi_dcmple>
 8010790:	2800      	cmp	r0, #0
 8010792:	f43f af28 	beq.w	80105e6 <MotionCP_Update+0xa56>
 8010796:	9806      	ldr	r0, [sp, #24]
 8010798:	f7ef fe56 	bl	8000448 <__aeabi_f2d>
 801079c:	a380      	add	r3, pc, #512	; (adr r3, 80109a0 <MotionCP_Update+0xe10>)
 801079e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107a2:	4604      	mov	r4, r0
 80107a4:	460d      	mov	r5, r1
 80107a6:	f7f0 f923 	bl	80009f0 <__aeabi_dcmple>
 80107aa:	2800      	cmp	r0, #0
 80107ac:	f000 829b 	beq.w	8010ce6 <MotionCP_Update+0x1156>
 80107b0:	4650      	mov	r0, sl
 80107b2:	f7ef fe49 	bl	8000448 <__aeabi_f2d>
 80107b6:	a37c      	add	r3, pc, #496	; (adr r3, 80109a8 <MotionCP_Update+0xe18>)
 80107b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107bc:	f7f0 f918 	bl	80009f0 <__aeabi_dcmple>
 80107c0:	bb10      	cbnz	r0, 8010808 <MotionCP_Update+0xc78>
 80107c2:	4648      	mov	r0, r9
 80107c4:	f7ef fe40 	bl	8000448 <__aeabi_f2d>
 80107c8:	a379      	add	r3, pc, #484	; (adr r3, 80109b0 <MotionCP_Update+0xe20>)
 80107ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107ce:	f7f0 f90f 	bl	80009f0 <__aeabi_dcmple>
 80107d2:	b1c8      	cbz	r0, 8010808 <MotionCP_Update+0xc78>
 80107d4:	2705      	movs	r7, #5
 80107d6:	e707      	b.n	80105e8 <MotionCP_Update+0xa58>
 80107d8:	ee19 0a90 	vmov	r0, s19
 80107dc:	f7ef fe34 	bl	8000448 <__aeabi_f2d>
 80107e0:	a375      	add	r3, pc, #468	; (adr r3, 80109b8 <MotionCP_Update+0xe28>)
 80107e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107e6:	4604      	mov	r4, r0
 80107e8:	460d      	mov	r5, r1
 80107ea:	f7f0 f901 	bl	80009f0 <__aeabi_dcmple>
 80107ee:	2800      	cmp	r0, #0
 80107f0:	f000 81f4 	beq.w	8010bdc <MotionCP_Update+0x104c>
 80107f4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80107f6:	f7ef fe27 	bl	8000448 <__aeabi_f2d>
 80107fa:	a371      	add	r3, pc, #452	; (adr r3, 80109c0 <MotionCP_Update+0xe30>)
 80107fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010800:	f7f0 f8f6 	bl	80009f0 <__aeabi_dcmple>
 8010804:	2800      	cmp	r0, #0
 8010806:	d09a      	beq.n	801073e <MotionCP_Update+0xbae>
 8010808:	2707      	movs	r7, #7
 801080a:	e571      	b.n	80102f0 <MotionCP_Update+0x760>
 801080c:	4630      	mov	r0, r6
 801080e:	f7ef fe1b 	bl	8000448 <__aeabi_f2d>
 8010812:	a36d      	add	r3, pc, #436	; (adr r3, 80109c8 <MotionCP_Update+0xe38>)
 8010814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010818:	4606      	mov	r6, r0
 801081a:	460f      	mov	r7, r1
 801081c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010820:	f7f0 f8e6 	bl	80009f0 <__aeabi_dcmple>
 8010824:	2800      	cmp	r0, #0
 8010826:	f000 8081 	beq.w	801092c <MotionCP_Update+0xd9c>
 801082a:	a369      	add	r3, pc, #420	; (adr r3, 80109d0 <MotionCP_Update+0xe40>)
 801082c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010830:	4630      	mov	r0, r6
 8010832:	4639      	mov	r1, r7
 8010834:	f7f0 f8dc 	bl	80009f0 <__aeabi_dcmple>
 8010838:	b310      	cbz	r0, 8010880 <MotionCP_Update+0xcf0>
 801083a:	9802      	ldr	r0, [sp, #8]
 801083c:	f7ef fe04 	bl	8000448 <__aeabi_f2d>
 8010840:	a365      	add	r3, pc, #404	; (adr r3, 80109d8 <MotionCP_Update+0xe48>)
 8010842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010846:	f7f0 f8d3 	bl	80009f0 <__aeabi_dcmple>
 801084a:	2800      	cmp	r0, #0
 801084c:	f43f af3d 	beq.w	80106ca <MotionCP_Update+0xb3a>
 8010850:	4620      	mov	r0, r4
 8010852:	4629      	mov	r1, r5
 8010854:	a362      	add	r3, pc, #392	; (adr r3, 80109e0 <MotionCP_Update+0xe50>)
 8010856:	e9d3 2300 	ldrd	r2, r3, [r3]
 801085a:	f7f0 f8c9 	bl	80009f0 <__aeabi_dcmple>
 801085e:	2800      	cmp	r0, #0
 8010860:	d1d2      	bne.n	8010808 <MotionCP_Update+0xc78>
 8010862:	4648      	mov	r0, r9
 8010864:	f7ef fdf0 	bl	8000448 <__aeabi_f2d>
 8010868:	a35f      	add	r3, pc, #380	; (adr r3, 80109e8 <MotionCP_Update+0xe58>)
 801086a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801086e:	f7f0 f8bf 	bl	80009f0 <__aeabi_dcmple>
 8010872:	2800      	cmp	r0, #0
 8010874:	d1ae      	bne.n	80107d4 <MotionCP_Update+0xc44>
 8010876:	e7c7      	b.n	8010808 <MotionCP_Update+0xc78>
 8010878:	2702      	movs	r7, #2
 801087a:	e539      	b.n	80102f0 <MotionCP_Update+0x760>
 801087c:	2703      	movs	r7, #3
 801087e:	e537      	b.n	80102f0 <MotionCP_Update+0x760>
 8010880:	ee19 0a90 	vmov	r0, s19
 8010884:	f7ef fde0 	bl	8000448 <__aeabi_f2d>
 8010888:	a359      	add	r3, pc, #356	; (adr r3, 80109f0 <MotionCP_Update+0xe60>)
 801088a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801088e:	e9cd 0100 	strd	r0, r1, [sp]
 8010892:	f7f0 f8ad 	bl	80009f0 <__aeabi_dcmple>
 8010896:	2800      	cmp	r0, #0
 8010898:	f000 80f4 	beq.w	8010a84 <MotionCP_Update+0xef4>
 801089c:	a356      	add	r3, pc, #344	; (adr r3, 80109f8 <MotionCP_Update+0xe68>)
 801089e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108a2:	4620      	mov	r0, r4
 80108a4:	4629      	mov	r1, r5
 80108a6:	f7f0 f8a3 	bl	80009f0 <__aeabi_dcmple>
 80108aa:	2800      	cmp	r0, #0
 80108ac:	d0ac      	beq.n	8010808 <MotionCP_Update+0xc78>
 80108ae:	4650      	mov	r0, sl
 80108b0:	f7ef fdca 	bl	8000448 <__aeabi_f2d>
 80108b4:	a352      	add	r3, pc, #328	; (adr r3, 8010a00 <MotionCP_Update+0xe70>)
 80108b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108ba:	4606      	mov	r6, r0
 80108bc:	460f      	mov	r7, r1
 80108be:	f7f0 f897 	bl	80009f0 <__aeabi_dcmple>
 80108c2:	2800      	cmp	r0, #0
 80108c4:	d047      	beq.n	8010956 <MotionCP_Update+0xdc6>
 80108c6:	9802      	ldr	r0, [sp, #8]
 80108c8:	f7ef fdbe 	bl	8000448 <__aeabi_f2d>
 80108cc:	a34e      	add	r3, pc, #312	; (adr r3, 8010a08 <MotionCP_Update+0xe78>)
 80108ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108d2:	f7f0 f88d 	bl	80009f0 <__aeabi_dcmple>
 80108d6:	2800      	cmp	r0, #0
 80108d8:	d096      	beq.n	8010808 <MotionCP_Update+0xc78>
 80108da:	4620      	mov	r0, r4
 80108dc:	4629      	mov	r1, r5
 80108de:	a34c      	add	r3, pc, #304	; (adr r3, 8010a10 <MotionCP_Update+0xe80>)
 80108e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108e4:	f7f0 f884 	bl	80009f0 <__aeabi_dcmple>
 80108e8:	2800      	cmp	r0, #0
 80108ea:	d08d      	beq.n	8010808 <MotionCP_Update+0xc78>
 80108ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80108f0:	a349      	add	r3, pc, #292	; (adr r3, 8010a18 <MotionCP_Update+0xe88>)
 80108f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108f6:	f7f0 f87b 	bl	80009f0 <__aeabi_dcmple>
 80108fa:	2800      	cmp	r0, #0
 80108fc:	d084      	beq.n	8010808 <MotionCP_Update+0xc78>
 80108fe:	ee1a 0a10 	vmov	r0, s20
 8010902:	f7ef fda1 	bl	8000448 <__aeabi_f2d>
 8010906:	a346      	add	r3, pc, #280	; (adr r3, 8010a20 <MotionCP_Update+0xe90>)
 8010908:	e9d3 2300 	ldrd	r2, r3, [r3]
 801090c:	f7f0 f870 	bl	80009f0 <__aeabi_dcmple>
 8010910:	2800      	cmp	r0, #0
 8010912:	f43f af5f 	beq.w	80107d4 <MotionCP_Update+0xc44>
 8010916:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801091a:	a343      	add	r3, pc, #268	; (adr r3, 8010a28 <MotionCP_Update+0xe98>)
 801091c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010920:	f7f0 f866 	bl	80009f0 <__aeabi_dcmple>
 8010924:	2800      	cmp	r0, #0
 8010926:	f47f af55 	bne.w	80107d4 <MotionCP_Update+0xc44>
 801092a:	e76d      	b.n	8010808 <MotionCP_Update+0xc78>
 801092c:	4630      	mov	r0, r6
 801092e:	4639      	mov	r1, r7
 8010930:	a33f      	add	r3, pc, #252	; (adr r3, 8010a30 <MotionCP_Update+0xea0>)
 8010932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010936:	f7f0 f85b 	bl	80009f0 <__aeabi_dcmple>
 801093a:	2800      	cmp	r0, #0
 801093c:	f47f aeff 	bne.w	801073e <MotionCP_Update+0xbae>
 8010940:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010944:	a33c      	add	r3, pc, #240	; (adr r3, 8010a38 <MotionCP_Update+0xea8>)
 8010946:	e9d3 2300 	ldrd	r2, r3, [r3]
 801094a:	f7f0 f851 	bl	80009f0 <__aeabi_dcmple>
 801094e:	2800      	cmp	r0, #0
 8010950:	f43f af40 	beq.w	80107d4 <MotionCP_Update+0xc44>
 8010954:	e758      	b.n	8010808 <MotionCP_Update+0xc78>
 8010956:	9804      	ldr	r0, [sp, #16]
 8010958:	f7ef fd76 	bl	8000448 <__aeabi_f2d>
 801095c:	a338      	add	r3, pc, #224	; (adr r3, 8010a40 <MotionCP_Update+0xeb0>)
 801095e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010962:	f7f0 f845 	bl	80009f0 <__aeabi_dcmple>
 8010966:	2800      	cmp	r0, #0
 8010968:	f000 80c6 	beq.w	8010af8 <MotionCP_Update+0xf68>
 801096c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010970:	a335      	add	r3, pc, #212	; (adr r3, 8010a48 <MotionCP_Update+0xeb8>)
 8010972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010976:	f7f0 f83b 	bl	80009f0 <__aeabi_dcmple>
 801097a:	2800      	cmp	r0, #0
 801097c:	f47f af2a 	bne.w	80107d4 <MotionCP_Update+0xc44>
 8010980:	e742      	b.n	8010808 <MotionCP_Update+0xc78>
 8010982:	bf00      	nop
 8010984:	f3af 8000 	nop.w
 8010988:	6833c600 	.word	0x6833c600
 801098c:	bfe61fe8 	.word	0xbfe61fe8
 8010990:	631f8a09 	.word	0x631f8a09
 8010994:	403cb2ee 	.word	0x403cb2ee
 8010998:	de9c022a 	.word	0xde9c022a
 801099c:	3fd7fbc5 	.word	0x3fd7fbc5
 80109a0:	2cfd8f0c 	.word	0x2cfd8f0c
 80109a4:	4025ca96 	.word	0x4025ca96
 80109a8:	50acc0be 	.word	0x50acc0be
 80109ac:	3fd7fba4 	.word	0x3fd7fba4
 80109b0:	bd1aa822 	.word	0xbd1aa822
 80109b4:	3faca01a 	.word	0x3faca01a
 80109b8:	4a87e38f 	.word	0x4a87e38f
 80109bc:	c051e123 	.word	0xc051e123
 80109c0:	6317268d 	.word	0x6317268d
 80109c4:	3fa71d60 	.word	0x3fa71d60
 80109c8:	e88df373 	.word	0xe88df373
 80109cc:	3fd0759e 	.word	0x3fd0759e
 80109d0:	78d0cc36 	.word	0x78d0cc36
 80109d4:	3f938822 	.word	0x3f938822
 80109d8:	0c1333b9 	.word	0x0c1333b9
 80109dc:	404026e7 	.word	0x404026e7
 80109e0:	700cd856 	.word	0x700cd856
 80109e4:	bfd3b641 	.word	0xbfd3b641
 80109e8:	b517a461 	.word	0xb517a461
 80109ec:	3fce55fb 	.word	0x3fce55fb
 80109f0:	b45ae600 	.word	0xb45ae600
 80109f4:	402ff500 	.word	0x402ff500
 80109f8:	faf85943 	.word	0xfaf85943
 80109fc:	3fe8975a 	.word	0x3fe8975a
 8010a00:	4f1a1987 	.word	0x4f1a1987
 8010a04:	3fae7104 	.word	0x3fae7104
 8010a08:	8eb0318c 	.word	0x8eb0318c
 8010a0c:	40408de3 	.word	0x40408de3
 8010a10:	4d2b2bfe 	.word	0x4d2b2bfe
 8010a14:	3fc1414a 	.word	0x3fc1414a
 8010a18:	7a89331a 	.word	0x7a89331a
 8010a1c:	3fcba7c1 	.word	0x3fcba7c1
 8010a20:	63779e9d 	.word	0x63779e9d
 8010a24:	c0551f41 	.word	0xc0551f41
 8010a28:	7b0f6ad7 	.word	0x7b0f6ad7
 8010a2c:	bfef80a1 	.word	0xbfef80a1
 8010a30:	424e5929 	.word	0x424e5929
 8010a34:	3f910be9 	.word	0x3f910be9
 8010a38:	489d27c4 	.word	0x489d27c4
 8010a3c:	3fef5530 	.word	0x3fef5530
 8010a40:	639d5e4a 	.word	0x639d5e4a
 8010a44:	3fd0f640 	.word	0x3fd0f640
 8010a48:	c58ab92c 	.word	0xc58ab92c
 8010a4c:	bfb30a6f 	.word	0xbfb30a6f
 8010a50:	42340000 	.word	0x42340000
 8010a54:	14db5958 	.word	0x14db5958
 8010a58:	401eeb8f 	.word	0x401eeb8f
 8010a5c:	dc11e42e 	.word	0xdc11e42e
 8010a60:	bfcad948 	.word	0xbfcad948
 8010a64:	6b93ccd1 	.word	0x6b93ccd1
 8010a68:	3fae640a 	.word	0x3fae640a
 8010a6c:	23315d70 	.word	0x23315d70
 8010a70:	bfd23dbc 	.word	0xbfd23dbc
 8010a74:	28c79f66 	.word	0x28c79f66
 8010a78:	4044c6cf 	.word	0x4044c6cf
 8010a7c:	4ce3de61 	.word	0x4ce3de61
 8010a80:	bf9fb613 	.word	0xbf9fb613
 8010a84:	4630      	mov	r0, r6
 8010a86:	4639      	mov	r1, r7
 8010a88:	f20f 4350 	addw	r3, pc, #1104	; 0x450
 8010a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a90:	f7ef ffae 	bl	80009f0 <__aeabi_dcmple>
 8010a94:	2800      	cmp	r0, #0
 8010a96:	d051      	beq.n	8010b3c <MotionCP_Update+0xfac>
 8010a98:	4650      	mov	r0, sl
 8010a9a:	f7ef fcd5 	bl	8000448 <__aeabi_f2d>
 8010a9e:	f20f 4344 	addw	r3, pc, #1092	; 0x444
 8010aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010aa6:	f7ef ffa3 	bl	80009f0 <__aeabi_dcmple>
 8010aaa:	2800      	cmp	r0, #0
 8010aac:	f43f ae92 	beq.w	80107d4 <MotionCP_Update+0xc44>
 8010ab0:	4648      	mov	r0, r9
 8010ab2:	f7ef fcc9 	bl	8000448 <__aeabi_f2d>
 8010ab6:	f20f 4334 	addw	r3, pc, #1076	; 0x434
 8010aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010abe:	f7ef ff97 	bl	80009f0 <__aeabi_dcmple>
 8010ac2:	2800      	cmp	r0, #0
 8010ac4:	f47f ae86 	bne.w	80107d4 <MotionCP_Update+0xc44>
 8010ac8:	4620      	mov	r0, r4
 8010aca:	4629      	mov	r1, r5
 8010acc:	f20f 4324 	addw	r3, pc, #1060	; 0x424
 8010ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ad4:	f7ef ff8c 	bl	80009f0 <__aeabi_dcmple>
 8010ad8:	2800      	cmp	r0, #0
 8010ada:	f43f ae7b 	beq.w	80107d4 <MotionCP_Update+0xc44>
 8010ade:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8010ae0:	f7ef fcb2 	bl	8000448 <__aeabi_f2d>
 8010ae4:	f20f 4314 	addw	r3, pc, #1044	; 0x414
 8010ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010aec:	f7ef ff80 	bl	80009f0 <__aeabi_dcmple>
 8010af0:	2800      	cmp	r0, #0
 8010af2:	f47f ae89 	bne.w	8010808 <MotionCP_Update+0xc78>
 8010af6:	e66d      	b.n	80107d4 <MotionCP_Update+0xc44>
 8010af8:	ee1a 0a10 	vmov	r0, s20
 8010afc:	f7ef fca4 	bl	8000448 <__aeabi_f2d>
 8010b00:	f20f 4300 	addw	r3, pc, #1024	; 0x400
 8010b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b08:	f7ef ff72 	bl	80009f0 <__aeabi_dcmple>
 8010b0c:	2800      	cmp	r0, #0
 8010b0e:	f47f ae61 	bne.w	80107d4 <MotionCP_Update+0xc44>
 8010b12:	4658      	mov	r0, fp
 8010b14:	f7ef fc98 	bl	8000448 <__aeabi_f2d>
 8010b18:	a3fc      	add	r3, pc, #1008	; (adr r3, 8010f0c <MotionCP_Update+0x137c>)
 8010b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b1e:	f7ef ff67 	bl	80009f0 <__aeabi_dcmple>
 8010b22:	2800      	cmp	r0, #0
 8010b24:	d036      	beq.n	8010b94 <MotionCP_Update+0x1004>
 8010b26:	4630      	mov	r0, r6
 8010b28:	4639      	mov	r1, r7
 8010b2a:	a3fa      	add	r3, pc, #1000	; (adr r3, 8010f14 <MotionCP_Update+0x1384>)
 8010b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b30:	f7ef ff5e 	bl	80009f0 <__aeabi_dcmple>
 8010b34:	2800      	cmp	r0, #0
 8010b36:	f47f ae67 	bne.w	8010808 <MotionCP_Update+0xc78>
 8010b3a:	e64b      	b.n	80107d4 <MotionCP_Update+0xc44>
 8010b3c:	9802      	ldr	r0, [sp, #8]
 8010b3e:	f7ef fc83 	bl	8000448 <__aeabi_f2d>
 8010b42:	a3f6      	add	r3, pc, #984	; (adr r3, 8010f1c <MotionCP_Update+0x138c>)
 8010b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b48:	f7ef ff52 	bl	80009f0 <__aeabi_dcmple>
 8010b4c:	2800      	cmp	r0, #0
 8010b4e:	f43f ae41 	beq.w	80107d4 <MotionCP_Update+0xc44>
 8010b52:	4620      	mov	r0, r4
 8010b54:	4629      	mov	r1, r5
 8010b56:	a3f3      	add	r3, pc, #972	; (adr r3, 8010f24 <MotionCP_Update+0x1394>)
 8010b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b5c:	f7ef ff48 	bl	80009f0 <__aeabi_dcmple>
 8010b60:	2800      	cmp	r0, #0
 8010b62:	f47f ae37 	bne.w	80107d4 <MotionCP_Update+0xc44>
 8010b66:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010b6a:	a3f0      	add	r3, pc, #960	; (adr r3, 8010f2c <MotionCP_Update+0x139c>)
 8010b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b70:	f7ef ff3e 	bl	80009f0 <__aeabi_dcmple>
 8010b74:	2800      	cmp	r0, #0
 8010b76:	f47f ae2d 	bne.w	80107d4 <MotionCP_Update+0xc44>
 8010b7a:	ee1a 0a10 	vmov	r0, s20
 8010b7e:	f7ef fc63 	bl	8000448 <__aeabi_f2d>
 8010b82:	a3ec      	add	r3, pc, #944	; (adr r3, 8010f34 <MotionCP_Update+0x13a4>)
 8010b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b88:	f7ef ff32 	bl	80009f0 <__aeabi_dcmple>
 8010b8c:	2800      	cmp	r0, #0
 8010b8e:	f47f ae3b 	bne.w	8010808 <MotionCP_Update+0xc78>
 8010b92:	e61f      	b.n	80107d4 <MotionCP_Update+0xc44>
 8010b94:	9802      	ldr	r0, [sp, #8]
 8010b96:	f7ef fc57 	bl	8000448 <__aeabi_f2d>
 8010b9a:	a3e8      	add	r3, pc, #928	; (adr r3, 8010f3c <MotionCP_Update+0x13ac>)
 8010b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ba0:	f7ef ff26 	bl	80009f0 <__aeabi_dcmple>
 8010ba4:	2800      	cmp	r0, #0
 8010ba6:	f47f ae2f 	bne.w	8010808 <MotionCP_Update+0xc78>
 8010baa:	e613      	b.n	80107d4 <MotionCP_Update+0xc44>
 8010bac:	9800      	ldr	r0, [sp, #0]
 8010bae:	f7ef fc4b 	bl	8000448 <__aeabi_f2d>
 8010bb2:	a3e4      	add	r3, pc, #912	; (adr r3, 8010f44 <MotionCP_Update+0x13b4>)
 8010bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bb8:	f7ef ff1a 	bl	80009f0 <__aeabi_dcmple>
 8010bbc:	2800      	cmp	r0, #0
 8010bbe:	f47f ae09 	bne.w	80107d4 <MotionCP_Update+0xc44>
 8010bc2:	e621      	b.n	8010808 <MotionCP_Update+0xc78>
 8010bc4:	9800      	ldr	r0, [sp, #0]
 8010bc6:	f7ef fc3f 	bl	8000448 <__aeabi_f2d>
 8010bca:	a3e0      	add	r3, pc, #896	; (adr r3, 8010f4c <MotionCP_Update+0x13bc>)
 8010bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bd0:	f7ef ff0e 	bl	80009f0 <__aeabi_dcmple>
 8010bd4:	2800      	cmp	r0, #0
 8010bd6:	f47f adfd 	bne.w	80107d4 <MotionCP_Update+0xc44>
 8010bda:	e615      	b.n	8010808 <MotionCP_Update+0xc78>
 8010bdc:	9800      	ldr	r0, [sp, #0]
 8010bde:	f7ef fc33 	bl	8000448 <__aeabi_f2d>
 8010be2:	a3dc      	add	r3, pc, #880	; (adr r3, 8010f54 <MotionCP_Update+0x13c4>)
 8010be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010be8:	f7ef ff02 	bl	80009f0 <__aeabi_dcmple>
 8010bec:	2800      	cmp	r0, #0
 8010bee:	d036      	beq.n	8010c5e <MotionCP_Update+0x10ce>
 8010bf0:	a3da      	add	r3, pc, #872	; (adr r3, 8010f5c <MotionCP_Update+0x13cc>)
 8010bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bf6:	4620      	mov	r0, r4
 8010bf8:	4629      	mov	r1, r5
 8010bfa:	f7ef fef9 	bl	80009f0 <__aeabi_dcmple>
 8010bfe:	b310      	cbz	r0, 8010c46 <MotionCP_Update+0x10b6>
 8010c00:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010c04:	a3d7      	add	r3, pc, #860	; (adr r3, 8010f64 <MotionCP_Update+0x13d4>)
 8010c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c0a:	f7ef fef1 	bl	80009f0 <__aeabi_dcmple>
 8010c0e:	2800      	cmp	r0, #0
 8010c10:	f47f ace9 	bne.w	80105e6 <MotionCP_Update+0xa56>
 8010c14:	9804      	ldr	r0, [sp, #16]
 8010c16:	f7ef fc17 	bl	8000448 <__aeabi_f2d>
 8010c1a:	a3d4      	add	r3, pc, #848	; (adr r3, 8010f6c <MotionCP_Update+0x13dc>)
 8010c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c20:	f7ef fee6 	bl	80009f0 <__aeabi_dcmple>
 8010c24:	2800      	cmp	r0, #0
 8010c26:	f47f acde 	bne.w	80105e6 <MotionCP_Update+0xa56>
 8010c2a:	e5ed      	b.n	8010808 <MotionCP_Update+0xc78>
 8010c2c:	9804      	ldr	r0, [sp, #16]
 8010c2e:	f7ef fc0b 	bl	8000448 <__aeabi_f2d>
 8010c32:	a3d0      	add	r3, pc, #832	; (adr r3, 8010f74 <MotionCP_Update+0x13e4>)
 8010c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c38:	f7ef feda 	bl	80009f0 <__aeabi_dcmple>
 8010c3c:	2800      	cmp	r0, #0
 8010c3e:	bf14      	ite	ne
 8010c40:	2706      	movne	r7, #6
 8010c42:	2705      	moveq	r7, #5
 8010c44:	e4d0      	b.n	80105e8 <MotionCP_Update+0xa58>
 8010c46:	4620      	mov	r0, r4
 8010c48:	4629      	mov	r1, r5
 8010c4a:	a3cc      	add	r3, pc, #816	; (adr r3, 8010f7c <MotionCP_Update+0x13ec>)
 8010c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c50:	f7ef fece 	bl	80009f0 <__aeabi_dcmple>
 8010c54:	2800      	cmp	r0, #0
 8010c56:	bf14      	ite	ne
 8010c58:	2706      	movne	r7, #6
 8010c5a:	2705      	moveq	r7, #5
 8010c5c:	e4c4      	b.n	80105e8 <MotionCP_Update+0xa58>
 8010c5e:	a3c9      	add	r3, pc, #804	; (adr r3, 8010f84 <MotionCP_Update+0x13f4>)
 8010c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c64:	4620      	mov	r0, r4
 8010c66:	4629      	mov	r1, r5
 8010c68:	f7ef fec2 	bl	80009f0 <__aeabi_dcmple>
 8010c6c:	2800      	cmp	r0, #0
 8010c6e:	d046      	beq.n	8010cfe <MotionCP_Update+0x116e>
 8010c70:	4620      	mov	r0, r4
 8010c72:	4629      	mov	r1, r5
 8010c74:	a3c5      	add	r3, pc, #788	; (adr r3, 8010f8c <MotionCP_Update+0x13fc>)
 8010c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c7a:	f7ef feb9 	bl	80009f0 <__aeabi_dcmple>
 8010c7e:	2800      	cmp	r0, #0
 8010c80:	f47f ada8 	bne.w	80107d4 <MotionCP_Update+0xc44>
 8010c84:	e5c0      	b.n	8010808 <MotionCP_Update+0xc78>
 8010c86:	ee19 0a90 	vmov	r0, s19
 8010c8a:	f7ef fbdd 	bl	8000448 <__aeabi_f2d>
 8010c8e:	4604      	mov	r4, r0
 8010c90:	4650      	mov	r0, sl
 8010c92:	460d      	mov	r5, r1
 8010c94:	f7ef fbd8 	bl	8000448 <__aeabi_f2d>
 8010c98:	a3be      	add	r3, pc, #760	; (adr r3, 8010f94 <MotionCP_Update+0x1404>)
 8010c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c9e:	f7ef fea7 	bl	80009f0 <__aeabi_dcmple>
 8010ca2:	2800      	cmp	r0, #0
 8010ca4:	d07b      	beq.n	8010d9e <MotionCP_Update+0x120e>
 8010ca6:	a3bd      	add	r3, pc, #756	; (adr r3, 8010f9c <MotionCP_Update+0x140c>)
 8010ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cac:	4620      	mov	r0, r4
 8010cae:	4629      	mov	r1, r5
 8010cb0:	f7ef fe9e 	bl	80009f0 <__aeabi_dcmple>
 8010cb4:	2800      	cmp	r0, #0
 8010cb6:	d039      	beq.n	8010d2c <MotionCP_Update+0x119c>
 8010cb8:	9802      	ldr	r0, [sp, #8]
 8010cba:	f7ef fbc5 	bl	8000448 <__aeabi_f2d>
 8010cbe:	a3b9      	add	r3, pc, #740	; (adr r3, 8010fa4 <MotionCP_Update+0x1414>)
 8010cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cc4:	f7ef fe94 	bl	80009f0 <__aeabi_dcmple>
 8010cc8:	2800      	cmp	r0, #0
 8010cca:	f43f ad9d 	beq.w	8010808 <MotionCP_Update+0xc78>
 8010cce:	4630      	mov	r0, r6
 8010cd0:	f7ef fbba 	bl	8000448 <__aeabi_f2d>
 8010cd4:	a3b5      	add	r3, pc, #724	; (adr r3, 8010fac <MotionCP_Update+0x141c>)
 8010cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cda:	f7ef fe89 	bl	80009f0 <__aeabi_dcmple>
 8010cde:	2800      	cmp	r0, #0
 8010ce0:	f47f ad2d 	bne.w	801073e <MotionCP_Update+0xbae>
 8010ce4:	e590      	b.n	8010808 <MotionCP_Update+0xc78>
 8010ce6:	4620      	mov	r0, r4
 8010ce8:	4629      	mov	r1, r5
 8010cea:	a3b2      	add	r3, pc, #712	; (adr r3, 8010fb4 <MotionCP_Update+0x1424>)
 8010cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cf0:	f7ef fe7e 	bl	80009f0 <__aeabi_dcmple>
 8010cf4:	2800      	cmp	r0, #0
 8010cf6:	bf14      	ite	ne
 8010cf8:	2706      	movne	r7, #6
 8010cfa:	2705      	moveq	r7, #5
 8010cfc:	e474      	b.n	80105e8 <MotionCP_Update+0xa58>
 8010cfe:	ee18 0a10 	vmov	r0, s16
 8010d02:	f7ef fba1 	bl	8000448 <__aeabi_f2d>
 8010d06:	a3ad      	add	r3, pc, #692	; (adr r3, 8010fbc <MotionCP_Update+0x142c>)
 8010d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d0c:	f7ef fe70 	bl	80009f0 <__aeabi_dcmple>
 8010d10:	2800      	cmp	r0, #0
 8010d12:	f43f ad5f 	beq.w	80107d4 <MotionCP_Update+0xc44>
 8010d16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010d1a:	a3aa      	add	r3, pc, #680	; (adr r3, 8010fc4 <MotionCP_Update+0x1434>)
 8010d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d20:	f7ef fe66 	bl	80009f0 <__aeabi_dcmple>
 8010d24:	2800      	cmp	r0, #0
 8010d26:	f47f ad6f 	bne.w	8010808 <MotionCP_Update+0xc78>
 8010d2a:	e45c      	b.n	80105e6 <MotionCP_Update+0xa56>
 8010d2c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8010d2e:	f7ef fb8b 	bl	8000448 <__aeabi_f2d>
 8010d32:	a3a6      	add	r3, pc, #664	; (adr r3, 8010fcc <MotionCP_Update+0x143c>)
 8010d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d38:	f7ef fe5a 	bl	80009f0 <__aeabi_dcmple>
 8010d3c:	2800      	cmp	r0, #0
 8010d3e:	d04f      	beq.n	8010de0 <MotionCP_Update+0x1250>
 8010d40:	4648      	mov	r0, r9
 8010d42:	f7ef fb81 	bl	8000448 <__aeabi_f2d>
 8010d46:	a3a3      	add	r3, pc, #652	; (adr r3, 8010fd4 <MotionCP_Update+0x1444>)
 8010d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d4c:	f7ef fe50 	bl	80009f0 <__aeabi_dcmple>
 8010d50:	2800      	cmp	r0, #0
 8010d52:	f47f acf4 	bne.w	801073e <MotionCP_Update+0xbae>
 8010d56:	ee07 8a90 	vmov	s15, r8
 8010d5a:	eddd 6a0a 	vldr	s13, [sp, #40]	; 0x28
 8010d5e:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8010ed8 <MotionCP_Update+0x1348>
 8010d62:	ee67 7ae7 	vnmul.f32	s15, s15, s15
 8010d66:	eee7 6aaa 	vfma.f32	s13, s15, s21
 8010d6a:	ee66 7a87 	vmul.f32	s15, s13, s14
 8010d6e:	ee17 0a90 	vmov	r0, s15
 8010d72:	f7ef fb69 	bl	8000448 <__aeabi_f2d>
 8010d76:	a340      	add	r3, pc, #256	; (adr r3, 8010e78 <MotionCP_Update+0x12e8>)
 8010d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d7c:	f7ef fe38 	bl	80009f0 <__aeabi_dcmple>
 8010d80:	2800      	cmp	r0, #0
 8010d82:	f47f acdc 	bne.w	801073e <MotionCP_Update+0xbae>
 8010d86:	9800      	ldr	r0, [sp, #0]
 8010d88:	f7ef fb5e 	bl	8000448 <__aeabi_f2d>
 8010d8c:	a33c      	add	r3, pc, #240	; (adr r3, 8010e80 <MotionCP_Update+0x12f0>)
 8010d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d92:	f7ef fe2d 	bl	80009f0 <__aeabi_dcmple>
 8010d96:	2800      	cmp	r0, #0
 8010d98:	f47f acd1 	bne.w	801073e <MotionCP_Update+0xbae>
 8010d9c:	e534      	b.n	8010808 <MotionCP_Update+0xc78>
 8010d9e:	4620      	mov	r0, r4
 8010da0:	4629      	mov	r1, r5
 8010da2:	a339      	add	r3, pc, #228	; (adr r3, 8010e88 <MotionCP_Update+0x12f8>)
 8010da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010da8:	f7ef fe22 	bl	80009f0 <__aeabi_dcmple>
 8010dac:	2800      	cmp	r0, #0
 8010dae:	f43f ad11 	beq.w	80107d4 <MotionCP_Update+0xc44>
 8010db2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8010db6:	a336      	add	r3, pc, #216	; (adr r3, 8010e90 <MotionCP_Update+0x1300>)
 8010db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dbc:	f7ef fe18 	bl	80009f0 <__aeabi_dcmple>
 8010dc0:	2800      	cmp	r0, #0
 8010dc2:	f47f acbc 	bne.w	801073e <MotionCP_Update+0xbae>
 8010dc6:	ee1a 0a10 	vmov	r0, s20
 8010dca:	f7ef fb3d 	bl	8000448 <__aeabi_f2d>
 8010dce:	a332      	add	r3, pc, #200	; (adr r3, 8010e98 <MotionCP_Update+0x1308>)
 8010dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dd4:	f7ef fe0c 	bl	80009f0 <__aeabi_dcmple>
 8010dd8:	2800      	cmp	r0, #0
 8010dda:	f47f acb0 	bne.w	801073e <MotionCP_Update+0xbae>
 8010dde:	e4f9      	b.n	80107d4 <MotionCP_Update+0xc44>
 8010de0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8010de4:	a32e      	add	r3, pc, #184	; (adr r3, 8010ea0 <MotionCP_Update+0x1310>)
 8010de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dea:	f7ef fe01 	bl	80009f0 <__aeabi_dcmple>
 8010dee:	b160      	cbz	r0, 8010e0a <MotionCP_Update+0x127a>
 8010df0:	4630      	mov	r0, r6
 8010df2:	f7ef fb29 	bl	8000448 <__aeabi_f2d>
 8010df6:	a32c      	add	r3, pc, #176	; (adr r3, 8010ea8 <MotionCP_Update+0x1318>)
 8010df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dfc:	f7ef fdf8 	bl	80009f0 <__aeabi_dcmple>
 8010e00:	2800      	cmp	r0, #0
 8010e02:	f47f ac9c 	bne.w	801073e <MotionCP_Update+0xbae>
 8010e06:	f7ff bbee 	b.w	80105e6 <MotionCP_Update+0xa56>
 8010e0a:	4620      	mov	r0, r4
 8010e0c:	4629      	mov	r1, r5
 8010e0e:	a328      	add	r3, pc, #160	; (adr r3, 8010eb0 <MotionCP_Update+0x1320>)
 8010e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e14:	f7ef fdec 	bl	80009f0 <__aeabi_dcmple>
 8010e18:	b160      	cbz	r0, 8010e34 <MotionCP_Update+0x12a4>
 8010e1a:	ee1a 0a10 	vmov	r0, s20
 8010e1e:	f7ef fb13 	bl	8000448 <__aeabi_f2d>
 8010e22:	a325      	add	r3, pc, #148	; (adr r3, 8010eb8 <MotionCP_Update+0x1328>)
 8010e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e28:	f7ef fde2 	bl	80009f0 <__aeabi_dcmple>
 8010e2c:	2800      	cmp	r0, #0
 8010e2e:	f47f ac86 	bne.w	801073e <MotionCP_Update+0xbae>
 8010e32:	e4cf      	b.n	80107d4 <MotionCP_Update+0xc44>
 8010e34:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010e38:	a321      	add	r3, pc, #132	; (adr r3, 8010ec0 <MotionCP_Update+0x1330>)
 8010e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e3e:	f7ef fdd7 	bl	80009f0 <__aeabi_dcmple>
 8010e42:	b160      	cbz	r0, 8010e5e <MotionCP_Update+0x12ce>
 8010e44:	ee1a 0a10 	vmov	r0, s20
 8010e48:	f7ef fafe 	bl	8000448 <__aeabi_f2d>
 8010e4c:	a31e      	add	r3, pc, #120	; (adr r3, 8010ec8 <MotionCP_Update+0x1338>)
 8010e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e52:	f7ef fdcd 	bl	80009f0 <__aeabi_dcmple>
 8010e56:	2800      	cmp	r0, #0
 8010e58:	f47f acd6 	bne.w	8010808 <MotionCP_Update+0xc78>
 8010e5c:	e4ba      	b.n	80107d4 <MotionCP_Update+0xc44>
 8010e5e:	9800      	ldr	r0, [sp, #0]
 8010e60:	f7ef faf2 	bl	8000448 <__aeabi_f2d>
 8010e64:	a31a      	add	r3, pc, #104	; (adr r3, 8010ed0 <MotionCP_Update+0x1340>)
 8010e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e6a:	f7ef fdc1 	bl	80009f0 <__aeabi_dcmple>
 8010e6e:	2800      	cmp	r0, #0
 8010e70:	f47f acb0 	bne.w	80107d4 <MotionCP_Update+0xc44>
 8010e74:	e463      	b.n	801073e <MotionCP_Update+0xbae>
 8010e76:	bf00      	nop
 8010e78:	3126e979 	.word	0x3126e979
 8010e7c:	3fd1ac08 	.word	0x3fd1ac08
 8010e80:	d48cb4af 	.word	0xd48cb4af
 8010e84:	40181a7b 	.word	0x40181a7b
 8010e88:	f7a4e7ab 	.word	0xf7a4e7ab
 8010e8c:	c052a98d 	.word	0xc052a98d
 8010e90:	7a7008a7 	.word	0x7a7008a7
 8010e94:	40074f17 	.word	0x40074f17
 8010e98:	aa00192a 	.word	0xaa00192a
 8010e9c:	402241b8 	.word	0x402241b8
 8010ea0:	f76e6107 	.word	0xf76e6107
 8010ea4:	40049f72 	.word	0x40049f72
 8010ea8:	f94c8798 	.word	0xf94c8798
 8010eac:	3fc35410 	.word	0x3fc35410
 8010eb0:	1fa33376 	.word	0x1fa33376
 8010eb4:	c053440d 	.word	0xc053440d
 8010eb8:	4d3bf2f5 	.word	0x4d3bf2f5
 8010ebc:	402d2c66 	.word	0x402d2c66
 8010ec0:	642bf983 	.word	0x642bf983
 8010ec4:	3feb8cae 	.word	0x3feb8cae
 8010ec8:	26aa8eb4 	.word	0x26aa8eb4
 8010ecc:	4045a688 	.word	0x4045a688
 8010ed0:	f4e0114d 	.word	0xf4e0114d
 8010ed4:	3ffd9e2e 	.word	0x3ffd9e2e
 8010ed8:	3bdbeb62 	.word	0x3bdbeb62
 8010edc:	ccaf709b 	.word	0xccaf709b
 8010ee0:	3fad755b 	.word	0x3fad755b
 8010ee4:	1fd5885d 	.word	0x1fd5885d
 8010ee8:	3fb81861 	.word	0x3fb81861
 8010eec:	177ea1c7 	.word	0x177ea1c7
 8010ef0:	3fb366b6 	.word	0x3fb366b6
 8010ef4:	625204b0 	.word	0x625204b0
 8010ef8:	3fc4f6d7 	.word	0x3fc4f6d7
 8010efc:	f0b6b6e1 	.word	0xf0b6b6e1
 8010f00:	3fb854bc 	.word	0x3fb854bc
 8010f04:	79746024 	.word	0x79746024
 8010f08:	40538073 	.word	0x40538073
 8010f0c:	5a3a083a 	.word	0x5a3a083a
 8010f10:	3feb92d5 	.word	0x3feb92d5
 8010f14:	fd933e36 	.word	0xfd933e36
 8010f18:	3fc634f3 	.word	0x3fc634f3
 8010f1c:	e5e24788 	.word	0xe5e24788
 8010f20:	40207ce9 	.word	0x40207ce9
 8010f24:	1f8a0903 	.word	0x1f8a0903
 8010f28:	3fbaee63 	.word	0x3fbaee63
 8010f2c:	1416377a 	.word	0x1416377a
 8010f30:	4052d006 	.word	0x4052d006
 8010f34:	14ca9260 	.word	0x14ca9260
 8010f38:	c0452273 	.word	0xc0452273
 8010f3c:	6a098916 	.word	0x6a098916
 8010f40:	400356f8 	.word	0x400356f8
 8010f44:	f2064239 	.word	0xf2064239
 8010f48:	4010b2ec 	.word	0x4010b2ec
 8010f4c:	fa58f712 	.word	0xfa58f712
 8010f50:	4030e9d0 	.word	0x4030e9d0
 8010f54:	59c8c932 	.word	0x59c8c932
 8010f58:	3ffc93d8 	.word	0x3ffc93d8
 8010f5c:	b4677b39 	.word	0xb4677b39
 8010f60:	40508f55 	.word	0x40508f55
 8010f64:	4573a798 	.word	0x4573a798
 8010f68:	40517829 	.word	0x40517829
 8010f6c:	e30446b7 	.word	0xe30446b7
 8010f70:	4003f2e0 	.word	0x4003f2e0
 8010f74:	2d38476f 	.word	0x2d38476f
 8010f78:	40364d78 	.word	0x40364d78
 8010f7c:	d9a95422 	.word	0xd9a95422
 8010f80:	40515003 	.word	0x40515003
 8010f84:	fcbd5561 	.word	0xfcbd5561
 8010f88:	4027a34e 	.word	0x4027a34e
 8010f8c:	27525461 	.word	0x27525461
 8010f90:	c03829a0 	.word	0xc03829a0
 8010f94:	0110a138 	.word	0x0110a138
 8010f98:	3fb15087 	.word	0x3fb15087
 8010f9c:	b85a4f01 	.word	0xb85a4f01
 8010fa0:	c05516ac 	.word	0xc05516ac
 8010fa4:	fce746cc 	.word	0xfce746cc
 8010fa8:	403ed714 	.word	0x403ed714
 8010fac:	adafd114 	.word	0xadafd114
 8010fb0:	3f83fe9f 	.word	0x3f83fe9f
 8010fb4:	a3619978 	.word	0xa3619978
 8010fb8:	404245ac 	.word	0x404245ac
 8010fbc:	b64e0547 	.word	0xb64e0547
 8010fc0:	bfdd3b81 	.word	0xbfdd3b81
 8010fc4:	78359bc3 	.word	0x78359bc3
 8010fc8:	4011455f 	.word	0x4011455f
 8010fcc:	908e581d 	.word	0x908e581d
 8010fd0:	3fa33c81 	.word	0x3fa33c81
 8010fd4:	62845996 	.word	0x62845996
 8010fd8:	3fca682b 	.word	0x3fca682b

08010fdc <m_mldivide>:
 8010fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fe0:	ed2d 8b02 	vpush	{d8}
 8010fe4:	b099      	sub	sp, #100	; 0x64
 8010fe6:	4606      	mov	r6, r0
 8010fe8:	460d      	mov	r5, r1
 8010fea:	4614      	mov	r4, r2
 8010fec:	4607      	mov	r7, r0
 8010fee:	f100 0820 	add.w	r8, r0, #32
 8010ff2:	f10d 0e3c 	add.w	lr, sp, #60	; 0x3c
 8010ff6:	6838      	ldr	r0, [r7, #0]
 8010ff8:	6879      	ldr	r1, [r7, #4]
 8010ffa:	68ba      	ldr	r2, [r7, #8]
 8010ffc:	68fb      	ldr	r3, [r7, #12]
 8010ffe:	46f4      	mov	ip, lr
 8011000:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011004:	3710      	adds	r7, #16
 8011006:	4547      	cmp	r7, r8
 8011008:	46e6      	mov	lr, ip
 801100a:	d1f4      	bne.n	8010ff6 <m_mldivide+0x1a>
 801100c:	edd6 7a00 	vldr	s15, [r6]
 8011010:	ed96 7a01 	vldr	s14, [r6, #4]
 8011014:	6838      	ldr	r0, [r7, #0]
 8011016:	f8cc 0000 	str.w	r0, [ip]
 801101a:	eef0 7ae7 	vabs.f32	s15, s15
 801101e:	eeb0 7ac7 	vabs.f32	s14, s14
 8011022:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801102a:	f100 8173 	bmi.w	8011314 <m_mldivide+0x338>
 801102e:	2307      	movs	r3, #7
 8011030:	2004      	movs	r0, #4
 8011032:	f04f 0b00 	mov.w	fp, #0
 8011036:	9305      	str	r3, [sp, #20]
 8011038:	2301      	movs	r3, #1
 801103a:	9004      	str	r0, [sp, #16]
 801103c:	eeb0 7a67 	vmov.f32	s14, s15
 8011040:	46de      	mov	lr, fp
 8011042:	f04f 0806 	mov.w	r8, #6
 8011046:	2703      	movs	r7, #3
 8011048:	9301      	str	r3, [sp, #4]
 801104a:	edd6 7a02 	vldr	s15, [r6, #8]
 801104e:	eef0 7ae7 	vabs.f32	s15, s15
 8011052:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801105a:	f300 816a 	bgt.w	8011332 <m_mldivide+0x356>
 801105e:	2202      	movs	r2, #2
 8011060:	9202      	str	r2, [sp, #8]
 8011062:	9a01      	ldr	r2, [sp, #4]
 8011064:	2308      	movs	r3, #8
 8011066:	f04f 0c05 	mov.w	ip, #5
 801106a:	4430      	add	r0, r6
 801106c:	4476      	add	r6, lr
 801106e:	edd0 6a00 	vldr	s13, [r0]
 8011072:	ed96 7a00 	vldr	s14, [r6]
 8011076:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801107a:	0090      	lsls	r0, r2, #2
 801107c:	aa18      	add	r2, sp, #96	; 0x60
 801107e:	eb02 0e00 	add.w	lr, r2, r0
 8011082:	9006      	str	r0, [sp, #24]
 8011084:	9a02      	ldr	r2, [sp, #8]
 8011086:	ea4f 008b 	mov.w	r0, fp, lsl #2
 801108a:	ae18      	add	r6, sp, #96	; 0x60
 801108c:	900b      	str	r0, [sp, #44]	; 0x2c
 801108e:	1830      	adds	r0, r6, r0
 8011090:	9e04      	ldr	r6, [sp, #16]
 8011092:	ea4f 0a82 	mov.w	sl, r2, lsl #2
 8011096:	aa18      	add	r2, sp, #96	; 0x60
 8011098:	00b6      	lsls	r6, r6, #2
 801109a:	4452      	add	r2, sl
 801109c:	9208      	str	r2, [sp, #32]
 801109e:	00bf      	lsls	r7, r7, #2
 80110a0:	4632      	mov	r2, r6
 80110a2:	9607      	str	r6, [sp, #28]
 80110a4:	ae18      	add	r6, sp, #96	; 0x60
 80110a6:	970c      	str	r7, [sp, #48]	; 0x30
 80110a8:	19f7      	adds	r7, r6, r7
 80110aa:	9709      	str	r7, [sp, #36]	; 0x24
 80110ac:	4637      	mov	r7, r6
 80110ae:	18b9      	adds	r1, r7, r2
 80110b0:	9103      	str	r1, [sp, #12]
 80110b2:	9908      	ldr	r1, [sp, #32]
 80110b4:	ed4e 7a09 	vstr	s15, [lr, #-36]	; 0xffffffdc
 80110b8:	ed51 6a09 	vldr	s13, [r1, #-36]	; 0xffffffdc
 80110bc:	ed10 7a09 	vldr	s14, [r0, #-36]	; 0xffffffdc
 80110c0:	9805      	ldr	r0, [sp, #20]
 80110c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80110c6:	ea4f 0288 	mov.w	r2, r8, lsl #2
 80110ca:	0080      	lsls	r0, r0, #2
 80110cc:	ea4f 098c 	mov.w	r9, ip, lsl #2
 80110d0:	eb07 0c09 	add.w	ip, r7, r9
 80110d4:	4616      	mov	r6, r2
 80110d6:	4607      	mov	r7, r0
 80110d8:	920d      	str	r2, [sp, #52]	; 0x34
 80110da:	aa18      	add	r2, sp, #96	; 0x60
 80110dc:	9008      	str	r0, [sp, #32]
 80110de:	1990      	adds	r0, r2, r6
 80110e0:	19d6      	adds	r6, r2, r7
 80110e2:	960a      	str	r6, [sp, #40]	; 0x28
 80110e4:	9f03      	ldr	r7, [sp, #12]
 80110e6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80110e8:	ed41 7a09 	vstr	s15, [r1, #-36]	; 0xffffffdc
 80110ec:	ed5e 6a09 	vldr	s13, [lr, #-36]	; 0xffffffdc
 80110f0:	ed16 7a09 	vldr	s14, [r6, #-36]	; 0xffffffdc
 80110f4:	ed57 7a09 	vldr	s15, [r7, #-36]	; 0xffffffdc
 80110f8:	eee6 7ac7 	vfms.f32	s15, s13, s14
 80110fc:	009b      	lsls	r3, r3, #2
 80110fe:	eb02 0803 	add.w	r8, r2, r3
 8011102:	460a      	mov	r2, r1
 8011104:	ed47 7a09 	vstr	s15, [r7, #-36]	; 0xffffffdc
 8011108:	ed52 6a09 	vldr	s13, [r2, #-36]	; 0xffffffdc
 801110c:	ed16 7a09 	vldr	s14, [r6, #-36]	; 0xffffffdc
 8011110:	ed5c 7a09 	vldr	s15, [ip, #-36]	; 0xffffffdc
 8011114:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8011118:	4611      	mov	r1, r2
 801111a:	ed4c 7a09 	vstr	s15, [ip, #-36]	; 0xffffffdc
 801111e:	ed5e 6a09 	vldr	s13, [lr, #-36]	; 0xffffffdc
 8011122:	ed10 7a09 	vldr	s14, [r0, #-36]	; 0xffffffdc
 8011126:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8011128:	9f03      	ldr	r7, [sp, #12]
 801112a:	ed56 7a09 	vldr	s15, [r6, #-36]	; 0xffffffdc
 801112e:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8011132:	ed46 7a09 	vstr	s15, [r6, #-36]	; 0xffffffdc
 8011136:	ed51 6a09 	vldr	s13, [r1, #-36]	; 0xffffffdc
 801113a:	ed10 7a09 	vldr	s14, [r0, #-36]	; 0xffffffdc
 801113e:	ed58 7a09 	vldr	s15, [r8, #-36]	; 0xffffffdc
 8011142:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8011146:	ed48 7a09 	vstr	s15, [r8, #-36]	; 0xffffffdc
 801114a:	ed5c 7a09 	vldr	s15, [ip, #-36]	; 0xffffffdc
 801114e:	ed17 7a09 	vldr	s14, [r7, #-36]	; 0xffffffdc
 8011152:	eeb0 6ae7 	vabs.f32	s12, s15
 8011156:	eef0 6ac7 	vabs.f32	s13, s14
 801115a:	eeb4 6ae6 	vcmpe.f32	s12, s13
 801115e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011162:	dc14      	bgt.n	801118e <m_mldivide+0x1b2>
 8011164:	9802      	ldr	r0, [sp, #8]
 8011166:	9901      	ldr	r1, [sp, #4]
 8011168:	9e04      	ldr	r6, [sp, #16]
 801116a:	9001      	str	r0, [sp, #4]
 801116c:	9805      	ldr	r0, [sp, #20]
 801116e:	f8cd a018 	str.w	sl, [sp, #24]
 8011172:	eef0 6a47 	vmov.f32	s13, s14
 8011176:	e9cd 9307 	strd	r9, r3, [sp, #28]
 801117a:	eeb0 7a67 	vmov.f32	s14, s15
 801117e:	9102      	str	r1, [sp, #8]
 8011180:	eef0 7a66 	vmov.f32	s15, s13
 8011184:	ea4f 0986 	mov.w	r9, r6, lsl #2
 8011188:	0083      	lsls	r3, r0, #2
 801118a:	ea4f 0a81 	mov.w	sl, r1, lsl #2
 801118e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8011192:	9a07      	ldr	r2, [sp, #28]
 8011194:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8011196:	a818      	add	r0, sp, #96	; 0x60
 8011198:	4402      	add	r2, r0
 801119a:	4616      	mov	r6, r2
 801119c:	9a08      	ldr	r2, [sp, #32]
 801119e:	4402      	add	r2, r0
 80111a0:	4610      	mov	r0, r2
 80111a2:	aa18      	add	r2, sp, #96	; 0x60
 80111a4:	1899      	adds	r1, r3, r2
 80111a6:	eb05 0e07 	add.w	lr, r5, r7
 80111aa:	ed9e 7a00 	vldr	s14, [lr]
 80111ae:	ed46 6a09 	vstr	s13, [r6, #-36]	; 0xffffffdc
 80111b2:	ed11 6a09 	vldr	s12, [r1, #-36]	; 0xffffffdc
 80111b6:	ed50 7a09 	vldr	s15, [r0, #-36]	; 0xffffffdc
 80111ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80111bc:	ed84 7a00 	vstr	s14, [r4]
 80111c0:	eee6 7ac6 	vfms.f32	s15, s13, s12
 80111c4:	eb02 0e0a 	add.w	lr, r2, sl
 80111c8:	4413      	add	r3, r2
 80111ca:	44aa      	add	sl, r5
 80111cc:	ed40 7a09 	vstr	s15, [r0, #-36]	; 0xffffffdc
 80111d0:	ed5e 1a09 	vldr	s3, [lr, #-36]	; 0xffffffdc
 80111d4:	edda 6a00 	vldr	s13, [sl]
 80111d8:	ed56 2a09 	vldr	s5, [r6, #-36]	; 0xffffffdc
 80111dc:	ed11 3a09 	vldr	s6, [r1, #-36]	; 0xffffffdc
 80111e0:	4698      	mov	r8, r3
 80111e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80111e4:	ed58 3a09 	vldr	s7, [r8, #-36]	; 0xffffffdc
 80111e8:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80111ec:	eef1 8a61 	vneg.f32	s17, s3
 80111f0:	eee8 6a87 	vfma.f32	s13, s17, s14
 80111f4:	4413      	add	r3, r2
 80111f6:	eb02 0c07 	add.w	ip, r2, r7
 80111fa:	eec1 4a27 	vdiv.f32	s9, s2, s15
 80111fe:	461f      	mov	r7, r3
 8011200:	9b06      	ldr	r3, [sp, #24]
 8011202:	4491      	add	r9, r2
 8011204:	eb02 0e03 	add.w	lr, r2, r3
 8011208:	18e8      	adds	r0, r5, r3
 801120a:	9a02      	ldr	r2, [sp, #8]
 801120c:	9b01      	ldr	r3, [sp, #4]
 801120e:	eb05 0683 	add.w	r6, r5, r3, lsl #2
 8011212:	edc4 6a01 	vstr	s13, [r4, #4]
 8011216:	ed59 5a09 	vldr	s11, [r9, #-36]	; 0xffffffdc
 801121a:	ed1e 2a09 	vldr	s4, [lr, #-36]	; 0xffffffdc
 801121e:	ed90 6a00 	vldr	s12, [r0]
 8011222:	ed5c 0a09 	vldr	s1, [ip, #-36]	; 0xffffffdc
 8011226:	ed17 4a09 	vldr	s8, [r7, #-36]	; 0xffffffdc
 801122a:	ee81 5a25 	vdiv.f32	s10, s2, s11
 801122e:	eb05 0c8b 	add.w	ip, r5, fp, lsl #2
 8011232:	eb05 0782 	add.w	r7, r5, r2, lsl #2
 8011236:	eeb1 8a42 	vneg.f32	s16, s4
 801123a:	eea8 6a07 	vfma.f32	s12, s16, s14
 801123e:	eeb1 0a62 	vneg.f32	s0, s5
 8011242:	eea0 6a26 	vfma.f32	s12, s0, s13
 8011246:	eec1 5a20 	vdiv.f32	s11, s2, s1
 801124a:	ee26 6a24 	vmul.f32	s12, s12, s9
 801124e:	eef1 0a43 	vneg.f32	s1, s6
 8011252:	eee0 6a86 	vfma.f32	s13, s1, s12
 8011256:	eeb1 1a63 	vneg.f32	s2, s7
 801125a:	eea1 7a06 	vfma.f32	s14, s2, s12
 801125e:	ee66 6a85 	vmul.f32	s13, s13, s10
 8011262:	eef1 7a44 	vneg.f32	s15, s8
 8011266:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801126a:	ed84 6a02 	vstr	s12, [r4, #8]
 801126e:	ee27 7a25 	vmul.f32	s14, s14, s11
 8011272:	edc4 6a01 	vstr	s13, [r4, #4]
 8011276:	ed84 7a00 	vstr	s14, [r4]
 801127a:	ed9c 7a03 	vldr	s14, [ip, #12]
 801127e:	ed84 7a03 	vstr	s14, [r4, #12]
 8011282:	edd7 6a03 	vldr	s13, [r7, #12]
 8011286:	eee8 6a87 	vfma.f32	s13, s17, s14
 801128a:	edc4 6a04 	vstr	s13, [r4, #16]
 801128e:	ed96 6a03 	vldr	s12, [r6, #12]
 8011292:	eea8 6a07 	vfma.f32	s12, s16, s14
 8011296:	eea0 6a26 	vfma.f32	s12, s0, s13
 801129a:	ee26 6a24 	vmul.f32	s12, s12, s9
 801129e:	eee0 6a86 	vfma.f32	s13, s1, s12
 80112a2:	eea1 7a06 	vfma.f32	s14, s2, s12
 80112a6:	ee66 6a85 	vmul.f32	s13, s13, s10
 80112aa:	ed84 6a05 	vstr	s12, [r4, #20]
 80112ae:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80112b2:	edc4 6a04 	vstr	s13, [r4, #16]
 80112b6:	ee27 7a25 	vmul.f32	s14, s14, s11
 80112ba:	ed84 7a03 	vstr	s14, [r4, #12]
 80112be:	ed9c 7a06 	vldr	s14, [ip, #24]
 80112c2:	ed84 7a06 	vstr	s14, [r4, #24]
 80112c6:	edd7 7a06 	vldr	s15, [r7, #24]
 80112ca:	eeb1 6a47 	vneg.f32	s12, s14
 80112ce:	eee6 7a21 	vfma.f32	s15, s12, s3
 80112d2:	edc4 7a07 	vstr	s15, [r4, #28]
 80112d6:	edd6 6a06 	vldr	s13, [r6, #24]
 80112da:	eee6 6a02 	vfma.f32	s13, s12, s4
 80112de:	eee7 6ae2 	vfms.f32	s13, s15, s5
 80112e2:	ee66 4aa4 	vmul.f32	s9, s13, s9
 80112e6:	eef1 6a64 	vneg.f32	s13, s9
 80112ea:	eee6 7a83 	vfma.f32	s15, s13, s6
 80112ee:	eea6 7aa3 	vfma.f32	s14, s13, s7
 80112f2:	ee67 7a85 	vmul.f32	s15, s15, s10
 80112f6:	edc4 4a08 	vstr	s9, [r4, #32]
 80112fa:	eea7 7ac4 	vfms.f32	s14, s15, s8
 80112fe:	edc4 7a07 	vstr	s15, [r4, #28]
 8011302:	ee27 7a25 	vmul.f32	s14, s14, s11
 8011306:	ed84 7a06 	vstr	s14, [r4, #24]
 801130a:	b019      	add	sp, #100	; 0x64
 801130c:	ecbd 8b02 	vpop	{d8}
 8011310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011314:	2300      	movs	r3, #0
 8011316:	2704      	movs	r7, #4
 8011318:	9301      	str	r3, [sp, #4]
 801131a:	4618      	mov	r0, r3
 801131c:	f04f 0c06 	mov.w	ip, #6
 8011320:	2303      	movs	r3, #3
 8011322:	46be      	mov	lr, r7
 8011324:	f04f 0807 	mov.w	r8, #7
 8011328:	e9cd 3c04 	strd	r3, ip, [sp, #16]
 801132c:	f04f 0b01 	mov.w	fp, #1
 8011330:	e68b      	b.n	801104a <m_mldivide+0x6e>
 8011332:	2207      	movs	r2, #7
 8011334:	2304      	movs	r3, #4
 8011336:	f04f 0808 	mov.w	r8, #8
 801133a:	9205      	str	r2, [sp, #20]
 801133c:	2100      	movs	r1, #0
 801133e:	2201      	movs	r2, #1
 8011340:	9304      	str	r3, [sp, #16]
 8011342:	4618      	mov	r0, r3
 8011344:	46c6      	mov	lr, r8
 8011346:	2306      	movs	r3, #6
 8011348:	f04f 0c03 	mov.w	ip, #3
 801134c:	2705      	movs	r7, #5
 801134e:	f04f 0b02 	mov.w	fp, #2
 8011352:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8011356:	e688      	b.n	801106a <m_mldivide+0x8e>

08011358 <m_qmult_eml>:
 8011358:	ed91 3a02 	vldr	s6, [r1, #8]
 801135c:	edd0 3a01 	vldr	s7, [r0, #4]
 8011360:	ed91 5a03 	vldr	s10, [r1, #12]
 8011364:	ed90 4a02 	vldr	s8, [r0, #8]
 8011368:	ed91 2a00 	vldr	s4, [r1]
 801136c:	edd1 2a01 	vldr	s5, [r1, #4]
 8011370:	edd0 4a00 	vldr	s9, [r0]
 8011374:	edd0 5a03 	vldr	s11, [r0, #12]
 8011378:	eeb1 1a43 	vneg.f32	s2, s6
 801137c:	ee23 6a83 	vmul.f32	s12, s7, s6
 8011380:	ee24 7a01 	vmul.f32	s14, s8, s2
 8011384:	ee64 6a02 	vmul.f32	s13, s8, s4
 8011388:	ee64 7a05 	vmul.f32	s15, s8, s10
 801138c:	eef1 0a62 	vneg.f32	s1, s5
 8011390:	eef1 1a42 	vneg.f32	s3, s4
 8011394:	eea4 6a85 	vfma.f32	s12, s9, s10
 8011398:	eea3 7aa0 	vfma.f32	s14, s7, s1
 801139c:	eee3 6a85 	vfma.f32	s13, s7, s10
 80113a0:	eee3 7aa1 	vfma.f32	s15, s7, s3
 80113a4:	eea4 6a20 	vfma.f32	s12, s8, s1
 80113a8:	eee4 6a81 	vfma.f32	s13, s9, s2
 80113ac:	eea4 7aa1 	vfma.f32	s14, s9, s3
 80113b0:	eee4 7aa2 	vfma.f32	s15, s9, s5
 80113b4:	eea5 6a82 	vfma.f32	s12, s11, s4
 80113b8:	eee5 6aa2 	vfma.f32	s13, s11, s5
 80113bc:	eea5 7a85 	vfma.f32	s14, s11, s10
 80113c0:	eee5 7a83 	vfma.f32	s15, s11, s6
 80113c4:	ed82 6a00 	vstr	s12, [r2]
 80113c8:	edc2 6a01 	vstr	s13, [r2, #4]
 80113cc:	ed82 7a03 	vstr	s14, [r2, #12]
 80113d0:	edc2 7a02 	vstr	s15, [r2, #8]
 80113d4:	4770      	bx	lr
 80113d6:	bf00      	nop

080113d8 <m_q2dcm_eml>:
 80113d8:	b510      	push	{r4, lr}
 80113da:	ed2d 8b06 	vpush	{d8-d10}
 80113de:	edd0 9a01 	vldr	s19, [r0, #4]
 80113e2:	ed90 9a03 	vldr	s18, [r0, #12]
 80113e6:	ed90 8a00 	vldr	s16, [r0]
 80113ea:	edd0 8a02 	vldr	s17, [r0, #8]
 80113ee:	ee29 aaa9 	vmul.f32	s20, s19, s19
 80113f2:	ee69 aa09 	vmul.f32	s21, s18, s18
 80113f6:	460c      	mov	r4, r1
 80113f8:	1d08      	adds	r0, r1, #4
 80113fa:	2220      	movs	r2, #32
 80113fc:	2100      	movs	r1, #0
 80113fe:	f011 fa4b 	bl	8022898 <memset>
 8011402:	eef1 4a48 	vneg.f32	s9, s16
 8011406:	eeb0 5a4a 	vmov.f32	s10, s20
 801140a:	eef0 5a4a 	vmov.f32	s11, s20
 801140e:	eeb0 6a6a 	vmov.f32	s12, s21
 8011412:	eee4 5a88 	vfma.f32	s11, s9, s16
 8011416:	ee98 5a08 	vfnms.f32	s10, s16, s16
 801141a:	eea8 6aa8 	vfma.f32	s12, s17, s17
 801141e:	eeb1 4a68 	vneg.f32	s8, s17
 8011422:	ee29 7aa8 	vmul.f32	s14, s19, s17
 8011426:	ee68 6a89 	vmul.f32	s13, s17, s18
 801142a:	ee69 7a89 	vmul.f32	s15, s19, s18
 801142e:	eea4 5a28 	vfma.f32	s10, s8, s17
 8011432:	eee4 5a28 	vfma.f32	s11, s8, s17
 8011436:	eea4 6a88 	vfma.f32	s12, s9, s16
 801143a:	eeb0 4a47 	vmov.f32	s8, s14
 801143e:	eea4 4a89 	vfma.f32	s8, s9, s18
 8011442:	eef0 3a66 	vmov.f32	s7, s13
 8011446:	eef0 4a67 	vmov.f32	s9, s15
 801144a:	eee8 3a29 	vfma.f32	s7, s16, s19
 801144e:	eed8 6a29 	vfnms.f32	s13, s16, s19
 8011452:	eea8 7a09 	vfma.f32	s14, s16, s18
 8011456:	eed8 4a28 	vfnms.f32	s9, s16, s17
 801145a:	eee8 7a28 	vfma.f32	s15, s16, s17
 801145e:	ee35 5a2a 	vadd.f32	s10, s10, s21
 8011462:	ee75 5aaa 	vadd.f32	s11, s11, s21
 8011466:	ee36 6a4a 	vsub.f32	s12, s12, s20
 801146a:	ecbd 8b06 	vpop	{d8-d10}
 801146e:	ee73 3aa3 	vadd.f32	s7, s7, s7
 8011472:	ee76 6aa6 	vadd.f32	s13, s13, s13
 8011476:	ee34 4a04 	vadd.f32	s8, s8, s8
 801147a:	ee37 7a07 	vadd.f32	s14, s14, s14
 801147e:	ee74 4aa4 	vadd.f32	s9, s9, s9
 8011482:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8011486:	ed84 5a00 	vstr	s10, [r4]
 801148a:	edc4 5a04 	vstr	s11, [r4, #16]
 801148e:	ed84 6a08 	vstr	s12, [r4, #32]
 8011492:	edc4 3a03 	vstr	s7, [r4, #12]
 8011496:	edc4 6a01 	vstr	s13, [r4, #4]
 801149a:	ed84 4a05 	vstr	s8, [r4, #20]
 801149e:	ed84 7a07 	vstr	s14, [r4, #28]
 80114a2:	edc4 4a06 	vstr	s9, [r4, #24]
 80114a6:	edc4 7a02 	vstr	s15, [r4, #8]
 80114aa:	bd10      	pop	{r4, pc}

080114ac <MEMS_EmptyDataFrame>:
 80114ac:	2300      	movs	r3, #0
 80114ae:	8103      	strh	r3, [r0, #8]
 80114b0:	60c3      	str	r3, [r0, #12]
 80114b2:	4770      	bx	lr

080114b4 <MEMS_DataBuffInit>:
 80114b4:	b510      	push	{r4, lr}
 80114b6:	4604      	mov	r4, r0
 80114b8:	f7ff fff8 	bl	80114ac <MEMS_EmptyDataFrame>
 80114bc:	2382      	movs	r3, #130	; 0x82
 80114be:	8163      	strh	r3, [r4, #10]
 80114c0:	4b01      	ldr	r3, [pc, #4]	; (80114c8 <MEMS_DataBuffInit+0x14>)
 80114c2:	6123      	str	r3, [r4, #16]
 80114c4:	bd10      	pop	{r4, pc}
 80114c6:	bf00      	nop
 80114c8:	20004b40 	.word	0x20004b40

080114cc <MEMS_checkTimeToRun>:
 80114cc:	7803      	ldrb	r3, [r0, #0]
 80114ce:	b363      	cbz	r3, 801152a <MEMS_checkTimeToRun+0x5e>
 80114d0:	890b      	ldrh	r3, [r1, #8]
 80114d2:	894a      	ldrh	r2, [r1, #10]
 80114d4:	429a      	cmp	r2, r3
 80114d6:	d027      	beq.n	8011528 <MEMS_checkTimeToRun+0x5c>
 80114d8:	b430      	push	{r4, r5}
 80114da:	b373      	cbz	r3, 801153a <MEMS_checkTimeToRun+0x6e>
 80114dc:	68ca      	ldr	r2, [r1, #12]
 80114de:	3201      	adds	r2, #1
 80114e0:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 80114e4:	441a      	add	r2, r3
 80114e6:	f1b2 3fff 	cmp.w	r2, #4294967295
 80114ea:	bf08      	it	eq
 80114ec:	2200      	moveq	r2, #0
 80114ee:	f502 531c 	add.w	r3, r2, #9984	; 0x2700
 80114f2:	3310      	adds	r3, #16
 80114f4:	6844      	ldr	r4, [r0, #4]
 80114f6:	429c      	cmp	r4, r3
 80114f8:	bf88      	it	hi
 80114fa:	6042      	strhi	r2, [r0, #4]
 80114fc:	8905      	ldrh	r5, [r0, #8]
 80114fe:	6844      	ldr	r4, [r0, #4]
 8011500:	442c      	add	r4, r5
 8011502:	4294      	cmp	r4, r2
 8011504:	d815      	bhi.n	8011532 <MEMS_checkTimeToRun+0x66>
 8011506:	890b      	ldrh	r3, [r1, #8]
 8011508:	b18b      	cbz	r3, 801152e <MEMS_checkTimeToRun+0x62>
 801150a:	3b01      	subs	r3, #1
 801150c:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8011510:	68c9      	ldr	r1, [r1, #12]
 8011512:	fb04 1313 	mls	r3, r4, r3, r1
 8011516:	1ad3      	subs	r3, r2, r3
 8011518:	b21b      	sxth	r3, r3
 801151a:	42ab      	cmp	r3, r5
 801151c:	bfb4      	ite	lt
 801151e:	2300      	movlt	r3, #0
 8011520:	2301      	movge	r3, #1
 8011522:	4618      	mov	r0, r3
 8011524:	bc30      	pop	{r4, r5}
 8011526:	4770      	bx	lr
 8011528:	2301      	movs	r3, #1
 801152a:	4618      	mov	r0, r3
 801152c:	4770      	bx	lr
 801152e:	2300      	movs	r3, #0
 8011530:	e7f1      	b.n	8011516 <MEMS_checkTimeToRun+0x4a>
 8011532:	2300      	movs	r3, #0
 8011534:	4618      	mov	r0, r3
 8011536:	bc30      	pop	{r4, r5}
 8011538:	4770      	bx	lr
 801153a:	2200      	movs	r2, #0
 801153c:	e7d7      	b.n	80114ee <MEMS_checkTimeToRun+0x22>
 801153e:	bf00      	nop

08011540 <updateProcBuffer_Temp>:
 8011540:	f8d1 c000 	ldr.w	ip, [r1]
 8011544:	790b      	ldrb	r3, [r1, #4]
 8011546:	2b00      	cmp	r3, #0
 8011548:	d05a      	beq.n	8011600 <updateProcBuffer_Temp+0xc0>
 801154a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801154e:	2400      	movs	r4, #0
 8011550:	f04f 087a 	mov.w	r8, #122	; 0x7a
 8011554:	f06f 4560 	mvn.w	r5, #3758096384	; 0xe0000000
 8011558:	f04f 0e01 	mov.w	lr, #1
 801155c:	fb08 1604 	mla	r6, r8, r4, r1
 8011560:	79b3      	ldrb	r3, [r6, #6]
 8011562:	2b00      	cmp	r3, #0
 8011564:	d045      	beq.n	80115f2 <updateProcBuffer_Temp+0xb2>
 8011566:	8943      	ldrh	r3, [r0, #10]
 8011568:	2b00      	cmp	r3, #0
 801156a:	d042      	beq.n	80115f2 <updateProcBuffer_Temp+0xb2>
 801156c:	8902      	ldrh	r2, [r0, #8]
 801156e:	4293      	cmp	r3, r2
 8011570:	bf28      	it	cs
 8011572:	4613      	movcs	r3, r2
 8011574:	8103      	strh	r3, [r0, #8]
 8011576:	79b3      	ldrb	r3, [r6, #6]
 8011578:	2b00      	cmp	r3, #0
 801157a:	d03a      	beq.n	80115f2 <updateProcBuffer_Temp+0xb2>
 801157c:	2200      	movs	r2, #0
 801157e:	fb08 f704 	mul.w	r7, r8, r4
 8011582:	8903      	ldrh	r3, [r0, #8]
 8011584:	3301      	adds	r3, #1
 8011586:	b29b      	uxth	r3, r3
 8011588:	f8b0 900a 	ldrh.w	r9, [r0, #10]
 801158c:	454b      	cmp	r3, r9
 801158e:	bf28      	it	cs
 8011590:	464b      	movcs	r3, r9
 8011592:	8103      	strh	r3, [r0, #8]
 8011594:	eb03 0905 	add.w	r9, r3, r5
 8011598:	6903      	ldr	r3, [r0, #16]
 801159a:	f803 e039 	strb.w	lr, [r3, r9, lsl #3]
 801159e:	eb07 09c2 	add.w	r9, r7, r2, lsl #3
 80115a2:	4489      	add	r9, r1
 80115a4:	f9b9 a00a 	ldrsh.w	sl, [r9, #10]
 80115a8:	8903      	ldrh	r3, [r0, #8]
 80115aa:	eb03 0b05 	add.w	fp, r3, r5
 80115ae:	6903      	ldr	r3, [r0, #16]
 80115b0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80115b4:	f8a3 a002 	strh.w	sl, [r3, #2]
 80115b8:	f9b9 a00c 	ldrsh.w	sl, [r9, #12]
 80115bc:	8903      	ldrh	r3, [r0, #8]
 80115be:	eb03 0b05 	add.w	fp, r3, r5
 80115c2:	6903      	ldr	r3, [r0, #16]
 80115c4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80115c8:	f8a3 a004 	strh.w	sl, [r3, #4]
 80115cc:	f9b9 a00e 	ldrsh.w	sl, [r9, #14]
 80115d0:	8903      	ldrh	r3, [r0, #8]
 80115d2:	eb03 0b05 	add.w	fp, r3, r5
 80115d6:	6903      	ldr	r3, [r0, #16]
 80115d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80115dc:	f8a3 a006 	strh.w	sl, [r3, #6]
 80115e0:	f8b9 3008 	ldrh.w	r3, [r9, #8]
 80115e4:	4463      	add	r3, ip
 80115e6:	60c3      	str	r3, [r0, #12]
 80115e8:	3201      	adds	r2, #1
 80115ea:	b2d2      	uxtb	r2, r2
 80115ec:	79b3      	ldrb	r3, [r6, #6]
 80115ee:	4293      	cmp	r3, r2
 80115f0:	d8c7      	bhi.n	8011582 <updateProcBuffer_Temp+0x42>
 80115f2:	3401      	adds	r4, #1
 80115f4:	b2e4      	uxtb	r4, r4
 80115f6:	790b      	ldrb	r3, [r1, #4]
 80115f8:	42a3      	cmp	r3, r4
 80115fa:	d8af      	bhi.n	801155c <updateProcBuffer_Temp+0x1c>
 80115fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011600:	4770      	bx	lr
 8011602:	bf00      	nop

08011604 <MEMS_getSensorData_I16>:
 8011604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011608:	8903      	ldrh	r3, [r0, #8]
 801160a:	fa1f fe82 	uxth.w	lr, r2
 801160e:	4573      	cmp	r3, lr
 8011610:	d95e      	bls.n	80116d0 <MEMS_getSensorData_I16+0xcc>
 8011612:	f8a1 e004 	strh.w	lr, [r1, #4]
 8011616:	f890 c008 	ldrb.w	ip, [r0, #8]
 801161a:	ebac 0c02 	sub.w	ip, ip, r2
 801161e:	fa5f fc8c 	uxtb.w	ip, ip
 8011622:	8903      	ldrh	r3, [r0, #8]
 8011624:	3b01      	subs	r3, #1
 8011626:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 801162a:	68c5      	ldr	r5, [r0, #12]
 801162c:	fb04 5313 	mls	r3, r4, r3, r5
 8011630:	600b      	str	r3, [r1, #0]
 8011632:	888b      	ldrh	r3, [r1, #4]
 8011634:	b1db      	cbz	r3, 801166e <MEMS_getSensorData_I16+0x6a>
 8011636:	2600      	movs	r6, #0
 8011638:	00f7      	lsls	r7, r6, #3
 801163a:	6903      	ldr	r3, [r0, #16]
 801163c:	f813 4036 	ldrb.w	r4, [r3, r6, lsl #3]
 8011640:	688b      	ldr	r3, [r1, #8]
 8011642:	f803 4036 	strb.w	r4, [r3, r6, lsl #3]
 8011646:	2500      	movs	r5, #0
 8011648:	6903      	ldr	r3, [r0, #16]
 801164a:	19dc      	adds	r4, r3, r7
 801164c:	ea4f 0845 	mov.w	r8, r5, lsl #1
 8011650:	4444      	add	r4, r8
 8011652:	f9b4 4002 	ldrsh.w	r4, [r4, #2]
 8011656:	688b      	ldr	r3, [r1, #8]
 8011658:	443b      	add	r3, r7
 801165a:	4443      	add	r3, r8
 801165c:	805c      	strh	r4, [r3, #2]
 801165e:	3501      	adds	r5, #1
 8011660:	2d03      	cmp	r5, #3
 8011662:	d1f1      	bne.n	8011648 <MEMS_getSensorData_I16+0x44>
 8011664:	3601      	adds	r6, #1
 8011666:	b2f6      	uxtb	r6, r6
 8011668:	888b      	ldrh	r3, [r1, #4]
 801166a:	42b3      	cmp	r3, r6
 801166c:	d8e4      	bhi.n	8011638 <MEMS_getSensorData_I16+0x34>
 801166e:	8903      	ldrh	r3, [r0, #8]
 8011670:	459e      	cmp	lr, r3
 8011672:	d22a      	bcs.n	80116ca <MEMS_getSensorData_I16+0xc6>
 8011674:	eba3 0e0e 	sub.w	lr, r3, lr
 8011678:	f8a0 e008 	strh.w	lr, [r0, #8]
 801167c:	f1bc 0f00 	cmp.w	ip, #0
 8011680:	d021      	beq.n	80116c6 <MEMS_getSensorData_I16+0xc2>
 8011682:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011686:	fa5f fc8c 	uxtb.w	ip, ip
 801168a:	f10c 0c01 	add.w	ip, ip, #1
 801168e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8011692:	00d2      	lsls	r2, r2, #3
 8011694:	2600      	movs	r6, #0
 8011696:	46b6      	mov	lr, r6
 8011698:	6903      	ldr	r3, [r0, #16]
 801169a:	1997      	adds	r7, r2, r6
 801169c:	5dd9      	ldrb	r1, [r3, r7]
 801169e:	5599      	strb	r1, [r3, r6]
 80116a0:	2100      	movs	r1, #0
 80116a2:	6903      	ldr	r3, [r0, #16]
 80116a4:	19dc      	adds	r4, r3, r7
 80116a6:	004d      	lsls	r5, r1, #1
 80116a8:	442c      	add	r4, r5
 80116aa:	f9b4 4002 	ldrsh.w	r4, [r4, #2]
 80116ae:	4433      	add	r3, r6
 80116b0:	442b      	add	r3, r5
 80116b2:	805c      	strh	r4, [r3, #2]
 80116b4:	3101      	adds	r1, #1
 80116b6:	2903      	cmp	r1, #3
 80116b8:	d1f3      	bne.n	80116a2 <MEMS_getSensorData_I16+0x9e>
 80116ba:	6903      	ldr	r3, [r0, #16]
 80116bc:	f803 e007 	strb.w	lr, [r3, r7]
 80116c0:	3608      	adds	r6, #8
 80116c2:	4566      	cmp	r6, ip
 80116c4:	d1e8      	bne.n	8011698 <MEMS_getSensorData_I16+0x94>
 80116c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116ca:	2300      	movs	r3, #0
 80116cc:	8103      	strh	r3, [r0, #8]
 80116ce:	e7d5      	b.n	801167c <MEMS_getSensorData_I16+0x78>
 80116d0:	808b      	strh	r3, [r1, #4]
 80116d2:	f04f 0c00 	mov.w	ip, #0
 80116d6:	e7a4      	b.n	8011622 <MEMS_getSensorData_I16+0x1e>

080116d8 <m_dcm2q_eml>:
 80116d8:	ed90 7a04 	vldr	s14, [r0, #16]
 80116dc:	edd0 7a00 	vldr	s15, [r0]
 80116e0:	edd0 6a08 	vldr	s13, [r0, #32]
 80116e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80116e8:	b538      	push	{r3, r4, r5, lr}
 80116ea:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80116ee:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80116f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80116f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116fa:	ed2d 8b02 	vpush	{d8}
 80116fe:	4604      	mov	r4, r0
 8011700:	460d      	mov	r5, r1
 8011702:	f340 80bc 	ble.w	801187e <m_dcm2q_eml+0x1a6>
 8011706:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801170a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801170e:	ee17 0a90 	vmov	r0, s15
 8011712:	f7ee fe99 	bl	8000448 <__aeabi_f2d>
 8011716:	f00f fd3f 	bl	8021198 <sqrt>
 801171a:	f7ef f9e5 	bl	8000ae8 <__aeabi_d2f>
 801171e:	ee07 0a10 	vmov	s14, r0
 8011722:	edd4 7a05 	vldr	s15, [r4, #20]
 8011726:	edd4 5a07 	vldr	s11, [r4, #28]
 801172a:	ed94 5a06 	vldr	s10, [r4, #24]
 801172e:	ed94 6a02 	vldr	s12, [r4, #8]
 8011732:	edd4 6a03 	vldr	s13, [r4, #12]
 8011736:	edd4 4a01 	vldr	s9, [r4, #4]
 801173a:	ee75 5ae7 	vsub.f32	s11, s11, s15
 801173e:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8011742:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8011746:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 801174a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801174e:	bf54      	ite	pl
 8011750:	eef0 5a48 	vmovpl.f32	s11, s16
 8011754:	eef0 5a67 	vmovmi.f32	s11, s15
 8011758:	ee27 7a25 	vmul.f32	s14, s14, s11
 801175c:	ee36 6a45 	vsub.f32	s12, s12, s10
 8011760:	ed85 7a00 	vstr	s14, [r5]
 8011764:	ed94 7a04 	vldr	s14, [r4, #16]
 8011768:	ed94 5a00 	vldr	s10, [r4]
 801176c:	edd4 5a08 	vldr	s11, [r4, #32]
 8011770:	ee37 7a45 	vsub.f32	s14, s14, s10
 8011774:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8011778:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 801177c:	ee37 7a65 	vsub.f32	s14, s14, s11
 8011780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011784:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8011788:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 801178c:	bf54      	ite	pl
 801178e:	eef0 8a48 	vmovpl.f32	s17, s16
 8011792:	eef0 8a67 	vmovmi.f32	s17, s15
 8011796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801179a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801179e:	bf48      	it	mi
 80117a0:	eeb0 8a67 	vmovmi.f32	s16, s15
 80117a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117a8:	dd66      	ble.n	8011878 <m_dcm2q_eml+0x1a0>
 80117aa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80117ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80117b2:	ee17 0a90 	vmov	r0, s15
 80117b6:	f7ee fe47 	bl	8000448 <__aeabi_f2d>
 80117ba:	f00f fced 	bl	8021198 <sqrt>
 80117be:	f7ef f993 	bl	8000ae8 <__aeabi_d2f>
 80117c2:	ee07 0a90 	vmov	s15, r0
 80117c6:	ee67 7aa8 	vmul.f32	s15, s15, s17
 80117ca:	edc5 7a01 	vstr	s15, [r5, #4]
 80117ce:	edd4 6a04 	vldr	s13, [r4, #16]
 80117d2:	ed94 7a00 	vldr	s14, [r4]
 80117d6:	edd4 7a08 	vldr	s15, [r4, #32]
 80117da:	ee37 7a26 	vadd.f32	s14, s14, s13
 80117de:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 80117e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80117e6:	eef4 7ae6 	vcmpe.f32	s15, s13
 80117ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117ee:	dd40      	ble.n	8011872 <m_dcm2q_eml+0x19a>
 80117f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80117f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80117f8:	ee17 0a90 	vmov	r0, s15
 80117fc:	f7ee fe24 	bl	8000448 <__aeabi_f2d>
 8011800:	f00f fcca 	bl	8021198 <sqrt>
 8011804:	f7ef f970 	bl	8000ae8 <__aeabi_d2f>
 8011808:	ee07 0a90 	vmov	s15, r0
 801180c:	ee67 7a88 	vmul.f32	s15, s15, s16
 8011810:	edc5 7a02 	vstr	s15, [r5, #8]
 8011814:	ed94 7a04 	vldr	s14, [r4, #16]
 8011818:	edd4 7a00 	vldr	s15, [r4]
 801181c:	edd4 6a08 	vldr	s13, [r4, #32]
 8011820:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011824:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8011828:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801182c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011834:	dd16      	ble.n	8011864 <m_dcm2q_eml+0x18c>
 8011836:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801183a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801183e:	ee17 0a90 	vmov	r0, s15
 8011842:	f7ee fe01 	bl	8000448 <__aeabi_f2d>
 8011846:	f00f fca7 	bl	8021198 <sqrt>
 801184a:	f7ef f94d 	bl	8000ae8 <__aeabi_d2f>
 801184e:	ecbd 8b02 	vpop	{d8}
 8011852:	ee07 0a10 	vmov	s14, r0
 8011856:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801185a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801185e:	edc5 7a03 	vstr	s15, [r5, #12]
 8011862:	bd38      	pop	{r3, r4, r5, pc}
 8011864:	ecbd 8b02 	vpop	{d8}
 8011868:	eddf 7a06 	vldr	s15, [pc, #24]	; 8011884 <m_dcm2q_eml+0x1ac>
 801186c:	edc5 7a03 	vstr	s15, [r5, #12]
 8011870:	bd38      	pop	{r3, r4, r5, pc}
 8011872:	eddf 7a04 	vldr	s15, [pc, #16]	; 8011884 <m_dcm2q_eml+0x1ac>
 8011876:	e7cb      	b.n	8011810 <m_dcm2q_eml+0x138>
 8011878:	eddf 7a02 	vldr	s15, [pc, #8]	; 8011884 <m_dcm2q_eml+0x1ac>
 801187c:	e7a5      	b.n	80117ca <m_dcm2q_eml+0xf2>
 801187e:	ed9f 7a01 	vldr	s14, [pc, #4]	; 8011884 <m_dcm2q_eml+0x1ac>
 8011882:	e74e      	b.n	8011722 <m_dcm2q_eml+0x4a>
 8011884:	00000000 	.word	0x00000000

08011888 <SpacePointGyroProp>:
 8011888:	b570      	push	{r4, r5, r6, lr}
 801188a:	ed92 6a01 	vldr	s12, [r2, #4]
 801188e:	ed92 7a00 	vldr	s14, [r2]
 8011892:	edd2 6a02 	vldr	s13, [r2, #8]
 8011896:	edd1 7a02 	vldr	s15, [r1, #8]
 801189a:	ed2d 8b04 	vpush	{d8-d9}
 801189e:	edd1 8a01 	vldr	s17, [r1, #4]
 80118a2:	ed9f 8a3c 	vldr	s16, [pc, #240]	; 8011994 <SpacePointGyroProp+0x10c>
 80118a6:	ed91 9a00 	vldr	s18, [r1]
 80118aa:	9d08      	ldr	r5, [sp, #32]
 80118ac:	ee20 8a08 	vmul.f32	s16, s0, s16
 80118b0:	ee78 8ac6 	vsub.f32	s17, s17, s12
 80118b4:	ee39 9a47 	vsub.f32	s18, s18, s14
 80118b8:	ee68 8a88 	vmul.f32	s17, s17, s16
 80118bc:	ee29 9a08 	vmul.f32	s18, s18, s16
 80118c0:	ee28 7aa8 	vmul.f32	s14, s17, s17
 80118c4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80118c8:	eea9 7a09 	vfma.f32	s14, s18, s18
 80118cc:	4606      	mov	r6, r0
 80118ce:	461c      	mov	r4, r3
 80118d0:	ee27 8a88 	vmul.f32	s16, s15, s16
 80118d4:	eef0 7a47 	vmov.f32	s15, s14
 80118d8:	eee8 7a08 	vfma.f32	s15, s16, s16
 80118dc:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 80118e0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80118e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80118e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80118ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118f0:	d445      	bmi.n	801197e <SpacePointGyroProp+0xf6>
 80118f2:	2000      	movs	r0, #0
 80118f4:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80118f8:	ee29 9a00 	vmul.f32	s18, s18, s0
 80118fc:	ee68 8a80 	vmul.f32	s17, s17, s0
 8011900:	ee28 8a00 	vmul.f32	s16, s16, s0
 8011904:	4622      	mov	r2, r4
 8011906:	60e8      	str	r0, [r5, #12]
 8011908:	4631      	mov	r1, r6
 801190a:	ed85 9a00 	vstr	s18, [r5]
 801190e:	edc5 8a01 	vstr	s17, [r5, #4]
 8011912:	ed85 8a02 	vstr	s16, [r5, #8]
 8011916:	4628      	mov	r0, r5
 8011918:	f7ff fd1e 	bl	8011358 <m_qmult_eml>
 801191c:	edd4 8a02 	vldr	s17, [r4, #8]
 8011920:	ed94 9a01 	vldr	s18, [r4, #4]
 8011924:	ed94 8a03 	vldr	s16, [r4, #12]
 8011928:	edd4 9a00 	vldr	s19, [r4]
 801192c:	ee68 7aa8 	vmul.f32	s15, s17, s17
 8011930:	eee9 7a09 	vfma.f32	s15, s18, s18
 8011934:	eee8 7a08 	vfma.f32	s15, s16, s16
 8011938:	eee9 7aa9 	vfma.f32	s15, s19, s19
 801193c:	ee17 0a90 	vmov	r0, s15
 8011940:	f7ee fd82 	bl	8000448 <__aeabi_f2d>
 8011944:	f00f fc28 	bl	8021198 <sqrt>
 8011948:	f7ef f8ce 	bl	8000ae8 <__aeabi_d2f>
 801194c:	ee07 0a90 	vmov	s15, r0
 8011950:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011954:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8011958:	ee69 9aa7 	vmul.f32	s19, s19, s15
 801195c:	ee29 9a27 	vmul.f32	s18, s18, s15
 8011960:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8011964:	ee28 8a27 	vmul.f32	s16, s16, s15
 8011968:	edc4 9a00 	vstr	s19, [r4]
 801196c:	ed84 9a01 	vstr	s18, [r4, #4]
 8011970:	edc4 8a02 	vstr	s17, [r4, #8]
 8011974:	ed84 8a03 	vstr	s16, [r4, #12]
 8011978:	ecbd 8b04 	vpop	{d8-d9}
 801197c:	bd70      	pop	{r4, r5, r6, pc}
 801197e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011982:	ee17 0a90 	vmov	r0, s15
 8011986:	f7ee fd5f 	bl	8000448 <__aeabi_f2d>
 801198a:	f00f fc05 	bl	8021198 <sqrt>
 801198e:	f7ef f8ab 	bl	8000ae8 <__aeabi_d2f>
 8011992:	e7af      	b.n	80118f4 <SpacePointGyroProp+0x6c>
 8011994:	3c8efa35 	.word	0x3c8efa35

08011998 <quatErr2EulerErr>:
 8011998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801199c:	2300      	movs	r3, #0
 801199e:	ed2d 8b04 	vpush	{d8-d9}
 80119a2:	6013      	str	r3, [r2, #0]
 80119a4:	6053      	str	r3, [r2, #4]
 80119a6:	6093      	str	r3, [r2, #8]
 80119a8:	ed9f 8a71 	vldr	s16, [pc, #452]	; 8011b70 <quatErr2EulerErr+0x1d8>
 80119ac:	edd0 7a01 	vldr	s15, [r0, #4]
 80119b0:	ee67 7a88 	vmul.f32	s15, s15, s16
 80119b4:	4606      	mov	r6, r0
 80119b6:	ee17 0a90 	vmov	r0, s15
 80119ba:	460c      	mov	r4, r1
 80119bc:	4615      	mov	r5, r2
 80119be:	f00f fad1 	bl	8020f64 <cosf>
 80119c2:	edd6 8a02 	vldr	s17, [r6, #8]
 80119c6:	ee68 8a88 	vmul.f32	s17, s17, s16
 80119ca:	ee09 0a10 	vmov	s18, r0
 80119ce:	ee18 0a90 	vmov	r0, s17
 80119d2:	f00f fb2b 	bl	802102c <sinf>
 80119d6:	ee08 0a10 	vmov	s16, r0
 80119da:	ee18 0a90 	vmov	r0, s17
 80119de:	f00f fac1 	bl	8020f64 <cosf>
 80119e2:	ee06 0a10 	vmov	s12, r0
 80119e6:	edd4 7a01 	vldr	s15, [r4, #4]
 80119ea:	edd4 6a02 	vldr	s13, [r4, #8]
 80119ee:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8011b74 <quatErr2EulerErr+0x1dc>
 80119f2:	ee66 8a06 	vmul.f32	s17, s12, s12
 80119f6:	ee28 8a08 	vmul.f32	s16, s16, s16
 80119fa:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80119fe:	eee8 7a26 	vfma.f32	s15, s16, s13
 8011a02:	eef1 6ae7 	vsqrt.f32	s13, s15
 8011a06:	ee66 7a87 	vmul.f32	s15, s13, s14
 8011a0a:	ee17 0a90 	vmov	r0, s15
 8011a0e:	f7ee fd1b 	bl	8000448 <__aeabi_f2d>
 8011a12:	2200      	movs	r2, #0
 8011a14:	4b58      	ldr	r3, [pc, #352]	; (8011b78 <quatErr2EulerErr+0x1e0>)
 8011a16:	4680      	mov	r8, r0
 8011a18:	4689      	mov	r9, r1
 8011a1a:	f7ee ffe9 	bl	80009f0 <__aeabi_dcmple>
 8011a1e:	b918      	cbnz	r0, 8011a28 <quatErr2EulerErr+0x90>
 8011a20:	f8df 9154 	ldr.w	r9, [pc, #340]	; 8011b78 <quatErr2EulerErr+0x1e0>
 8011a24:	f04f 0800 	mov.w	r8, #0
 8011a28:	4649      	mov	r1, r9
 8011a2a:	4640      	mov	r0, r8
 8011a2c:	f7ef f85c 	bl	8000ae8 <__aeabi_d2f>
 8011a30:	f7ee fd0a 	bl	8000448 <__aeabi_f2d>
 8011a34:	2200      	movs	r2, #0
 8011a36:	4b51      	ldr	r3, [pc, #324]	; (8011b7c <quatErr2EulerErr+0x1e4>)
 8011a38:	4680      	mov	r8, r0
 8011a3a:	4689      	mov	r9, r1
 8011a3c:	f7ee ffe2 	bl	8000a04 <__aeabi_dcmpge>
 8011a40:	b918      	cbnz	r0, 8011a4a <quatErr2EulerErr+0xb2>
 8011a42:	f8df 9138 	ldr.w	r9, [pc, #312]	; 8011b7c <quatErr2EulerErr+0x1e4>
 8011a46:	f04f 0800 	mov.w	r8, #0
 8011a4a:	4649      	mov	r1, r9
 8011a4c:	4640      	mov	r0, r8
 8011a4e:	f7ef f84b 	bl	8000ae8 <__aeabi_d2f>
 8011a52:	6068      	str	r0, [r5, #4]
 8011a54:	edd4 7a02 	vldr	s15, [r4, #8]
 8011a58:	ed94 6a01 	vldr	s12, [r4, #4]
 8011a5c:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8011b80 <quatErr2EulerErr+0x1e8>
 8011a60:	eddf 6a44 	vldr	s13, [pc, #272]	; 8011b74 <quatErr2EulerErr+0x1dc>
 8011a64:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8011a68:	eea9 7a09 	vfma.f32	s14, s18, s18
 8011a6c:	eee8 7a06 	vfma.f32	s15, s16, s12
 8011a70:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8011a74:	eef1 7ac6 	vsqrt.f32	s15, s12
 8011a78:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011a7c:	ee17 0a90 	vmov	r0, s15
 8011a80:	f7ee fce2 	bl	8000448 <__aeabi_f2d>
 8011a84:	2200      	movs	r2, #0
 8011a86:	4b3f      	ldr	r3, [pc, #252]	; (8011b84 <quatErr2EulerErr+0x1ec>)
 8011a88:	4680      	mov	r8, r0
 8011a8a:	4689      	mov	r9, r1
 8011a8c:	f7ee ffb0 	bl	80009f0 <__aeabi_dcmple>
 8011a90:	b918      	cbnz	r0, 8011a9a <quatErr2EulerErr+0x102>
 8011a92:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 8011b84 <quatErr2EulerErr+0x1ec>
 8011a96:	f04f 0800 	mov.w	r8, #0
 8011a9a:	4649      	mov	r1, r9
 8011a9c:	4640      	mov	r0, r8
 8011a9e:	f7ef f823 	bl	8000ae8 <__aeabi_d2f>
 8011aa2:	f7ee fcd1 	bl	8000448 <__aeabi_f2d>
 8011aa6:	2200      	movs	r2, #0
 8011aa8:	4b34      	ldr	r3, [pc, #208]	; (8011b7c <quatErr2EulerErr+0x1e4>)
 8011aaa:	4680      	mov	r8, r0
 8011aac:	4689      	mov	r9, r1
 8011aae:	f7ee ffa9 	bl	8000a04 <__aeabi_dcmpge>
 8011ab2:	b918      	cbnz	r0, 8011abc <quatErr2EulerErr+0x124>
 8011ab4:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8011b7c <quatErr2EulerErr+0x1e4>
 8011ab8:	f04f 0800 	mov.w	r8, #0
 8011abc:	4640      	mov	r0, r8
 8011abe:	4649      	mov	r1, r9
 8011ac0:	f7ef f812 	bl	8000ae8 <__aeabi_d2f>
 8011ac4:	6028      	str	r0, [r5, #0]
 8011ac6:	edd6 7a01 	vldr	s15, [r6, #4]
 8011aca:	eddf 5a29 	vldr	s11, [pc, #164]	; 8011b70 <quatErr2EulerErr+0x1d8>
 8011ace:	edd4 6a02 	vldr	s13, [r4, #8]
 8011ad2:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8011b88 <quatErr2EulerErr+0x1f0>
 8011ad6:	ed94 6a01 	vldr	s12, [r4, #4]
 8011ada:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8011ade:	ee28 8a26 	vmul.f32	s16, s16, s13
 8011ae2:	eef0 6ae7 	vabs.f32	s13, s15
 8011ae6:	eef4 6ac7 	vcmpe.f32	s13, s14
 8011aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011aee:	eea8 8a86 	vfma.f32	s16, s17, s12
 8011af2:	d430      	bmi.n	8011b56 <quatErr2EulerErr+0x1be>
 8011af4:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8011b8c <quatErr2EulerErr+0x1f4>
 8011af8:	edd4 7a00 	vldr	s15, [r4]
 8011afc:	eee8 7a07 	vfma.f32	s15, s16, s14
 8011b00:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8011b04:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8011b74 <quatErr2EulerErr+0x1dc>
 8011b08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011b0c:	ee17 0a90 	vmov	r0, s15
 8011b10:	f7ee fc9a 	bl	8000448 <__aeabi_f2d>
 8011b14:	2200      	movs	r2, #0
 8011b16:	4b1b      	ldr	r3, [pc, #108]	; (8011b84 <quatErr2EulerErr+0x1ec>)
 8011b18:	4606      	mov	r6, r0
 8011b1a:	460f      	mov	r7, r1
 8011b1c:	f7ee ff68 	bl	80009f0 <__aeabi_dcmple>
 8011b20:	b908      	cbnz	r0, 8011b26 <quatErr2EulerErr+0x18e>
 8011b22:	4f18      	ldr	r7, [pc, #96]	; (8011b84 <quatErr2EulerErr+0x1ec>)
 8011b24:	2600      	movs	r6, #0
 8011b26:	4639      	mov	r1, r7
 8011b28:	4630      	mov	r0, r6
 8011b2a:	f7ee ffdd 	bl	8000ae8 <__aeabi_d2f>
 8011b2e:	f7ee fc8b 	bl	8000448 <__aeabi_f2d>
 8011b32:	2200      	movs	r2, #0
 8011b34:	4b11      	ldr	r3, [pc, #68]	; (8011b7c <quatErr2EulerErr+0x1e4>)
 8011b36:	4606      	mov	r6, r0
 8011b38:	460f      	mov	r7, r1
 8011b3a:	f7ee ff63 	bl	8000a04 <__aeabi_dcmpge>
 8011b3e:	b908      	cbnz	r0, 8011b44 <quatErr2EulerErr+0x1ac>
 8011b40:	4f0e      	ldr	r7, [pc, #56]	; (8011b7c <quatErr2EulerErr+0x1e4>)
 8011b42:	2600      	movs	r6, #0
 8011b44:	4630      	mov	r0, r6
 8011b46:	4639      	mov	r1, r7
 8011b48:	f7ee ffce 	bl	8000ae8 <__aeabi_d2f>
 8011b4c:	ecbd 8b04 	vpop	{d8-d9}
 8011b50:	60a8      	str	r0, [r5, #8]
 8011b52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011b56:	ee17 0a90 	vmov	r0, s15
 8011b5a:	f00f faa1 	bl	80210a0 <tanf>
 8011b5e:	ee07 0a10 	vmov	s14, r0
 8011b62:	edd4 7a00 	vldr	s15, [r4]
 8011b66:	ee27 7a07 	vmul.f32	s14, s14, s14
 8011b6a:	eee7 7a08 	vfma.f32	s15, s14, s16
 8011b6e:	e7c7      	b.n	8011b00 <quatErr2EulerErr+0x168>
 8011b70:	3c8efa35 	.word	0x3c8efa35
 8011b74:	42e52ee1 	.word	0x42e52ee1
 8011b78:	40568000 	.word	0x40568000
 8011b7c:	3ff00000 	.word	0x3ff00000
 8011b80:	3a83126f 	.word	0x3a83126f
 8011b84:	40668000 	.word	0x40668000
 8011b88:	3fbc430e 	.word	0x3fbc430e
 8011b8c:	42c6ab07 	.word	0x42c6ab07

08011b90 <rt_InitInfAndNaN.isra.3>:
 8011b90:	4b05      	ldr	r3, [pc, #20]	; (8011ba8 <rt_InitInfAndNaN.isra.3+0x18>)
 8011b92:	4a06      	ldr	r2, [pc, #24]	; (8011bac <rt_InitInfAndNaN.isra.3+0x1c>)
 8011b94:	f503 6182 	add.w	r1, r3, #1040	; 0x410
 8011b98:	f203 4314 	addw	r3, r3, #1044	; 0x414
 8011b9c:	f04f 40ff 	mov.w	r0, #2139095040	; 0x7f800000
 8011ba0:	6008      	str	r0, [r1, #0]
 8011ba2:	601a      	str	r2, [r3, #0]
 8011ba4:	4770      	bx	lr
 8011ba6:	bf00      	nop
 8011ba8:	20004b40 	.word	0x20004b40
 8011bac:	ff800000 	.word	0xff800000

08011bb0 <MEMSloadFromNVM.isra.10>:
 8011bb0:	f7ef bf98 	b.w	8001ae4 <MotionFX_LoadMagCalFromNVM>

08011bb4 <MEMSLoadMagCalNVM>:
 8011bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011bb6:	b097      	sub	sp, #92	; 0x5c
 8011bb8:	4604      	mov	r4, r0
 8011bba:	2301      	movs	r3, #1
 8011bbc:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
 8011bc0:	a916      	add	r1, sp, #88	; 0x58
 8011bc2:	2300      	movs	r3, #0
 8011bc4:	f801 3d54 	strb.w	r3, [r1, #-84]!
 8011bc8:	2054      	movs	r0, #84	; 0x54
 8011bca:	f7ff fff1 	bl	8011bb0 <MEMSloadFromNVM.isra.10>
 8011bce:	2801      	cmp	r0, #1
 8011bd0:	d101      	bne.n	8011bd6 <MEMSLoadMagCalNVM+0x22>
 8011bd2:	b017      	add	sp, #92	; 0x5c
 8011bd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011bd6:	2300      	movs	r3, #0
 8011bd8:	f88d 3004 	strb.w	r3, [sp, #4]
 8011bdc:	9d02      	ldr	r5, [sp, #8]
 8011bde:	2d00      	cmp	r5, #0
 8011be0:	d0f7      	beq.n	8011bd2 <MEMSLoadMagCalNVM+0x1e>
 8011be2:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d0f3      	beq.n	8011bd2 <MEMSLoadMagCalNVM+0x1e>
 8011bea:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	d0ef      	beq.n	8011bd2 <MEMSLoadMagCalNVM+0x1e>
 8011bf2:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 8011bf6:	429a      	cmp	r2, r3
 8011bf8:	d3eb      	bcc.n	8011bd2 <MEMSLoadMagCalNVM+0x1e>
 8011bfa:	f10d 0c0c 	add.w	ip, sp, #12
 8011bfe:	f104 066c 	add.w	r6, r4, #108	; 0x6c
 8011c02:	f10d 0e3c 	add.w	lr, sp, #60	; 0x3c
 8011c06:	4667      	mov	r7, ip
 8011c08:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8011c0a:	6030      	str	r0, [r6, #0]
 8011c0c:	6071      	str	r1, [r6, #4]
 8011c0e:	60b2      	str	r2, [r6, #8]
 8011c10:	60f3      	str	r3, [r6, #12]
 8011c12:	46bc      	mov	ip, r7
 8011c14:	3610      	adds	r6, #16
 8011c16:	4577      	cmp	r7, lr
 8011c18:	d1f5      	bne.n	8011c06 <MEMSLoadMagCalNVM+0x52>
 8011c1a:	6838      	ldr	r0, [r7, #0]
 8011c1c:	6030      	str	r0, [r6, #0]
 8011c1e:	61e5      	str	r5, [r4, #28]
 8011c20:	ad10      	add	r5, sp, #64	; 0x40
 8011c22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011c24:	6560      	str	r0, [r4, #84]	; 0x54
 8011c26:	65a1      	str	r1, [r4, #88]	; 0x58
 8011c28:	65e2      	str	r2, [r4, #92]	; 0x5c
 8011c2a:	6623      	str	r3, [r4, #96]	; 0x60
 8011c2c:	cd03      	ldmia	r5!, {r0, r1}
 8011c2e:	6660      	str	r0, [r4, #100]	; 0x64
 8011c30:	66a1      	str	r1, [r4, #104]	; 0x68
 8011c32:	e7ce      	b.n	8011bd2 <MEMSLoadMagCalNVM+0x1e>

08011c34 <MEMSsaveInNVM.isra.11>:
 8011c34:	f7ef bf58 	b.w	8001ae8 <MotionFX_SaveMagCalInNVM>

08011c38 <MEMSSaveMagCalNVM>:
 8011c38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011c3a:	b097      	sub	sp, #92	; 0x5c
 8011c3c:	4606      	mov	r6, r0
 8011c3e:	2301      	movs	r3, #1
 8011c40:	f88d 3004 	strb.w	r3, [sp, #4]
 8011c44:	f100 0458 	add.w	r4, r0, #88	; 0x58
 8011c48:	af03      	add	r7, sp, #12
 8011c4a:	f100 0c88 	add.w	ip, r0, #136	; 0x88
 8011c4e:	463d      	mov	r5, r7
 8011c50:	6820      	ldr	r0, [r4, #0]
 8011c52:	6861      	ldr	r1, [r4, #4]
 8011c54:	68a2      	ldr	r2, [r4, #8]
 8011c56:	68e3      	ldr	r3, [r4, #12]
 8011c58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011c5a:	3410      	adds	r4, #16
 8011c5c:	462f      	mov	r7, r5
 8011c5e:	4564      	cmp	r4, ip
 8011c60:	d1f5      	bne.n	8011c4e <MEMSSaveMagCalNVM+0x16>
 8011c62:	6820      	ldr	r0, [r4, #0]
 8011c64:	6028      	str	r0, [r5, #0]
 8011c66:	68b3      	ldr	r3, [r6, #8]
 8011c68:	9302      	str	r3, [sp, #8]
 8011c6a:	ac10      	add	r4, sp, #64	; 0x40
 8011c6c:	f856 0f40 	ldr.w	r0, [r6, #64]!
 8011c70:	6871      	ldr	r1, [r6, #4]
 8011c72:	68b2      	ldr	r2, [r6, #8]
 8011c74:	68f3      	ldr	r3, [r6, #12]
 8011c76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011c78:	6930      	ldr	r0, [r6, #16]
 8011c7a:	6971      	ldr	r1, [r6, #20]
 8011c7c:	c403      	stmia	r4!, {r0, r1}
 8011c7e:	a901      	add	r1, sp, #4
 8011c80:	2054      	movs	r0, #84	; 0x54
 8011c82:	f7ff ffd7 	bl	8011c34 <MEMSsaveInNVM.isra.11>
 8011c86:	b017      	add	sp, #92	; 0x5c
 8011c88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011c8a:	bf00      	nop

08011c8c <llEvaluate.constprop.23>:
 8011c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011c8e:	b085      	sub	sp, #20
 8011c90:	4606      	mov	r6, r0
 8011c92:	f102 0e10 	add.w	lr, r2, #16
 8011c96:	4607      	mov	r7, r0
 8011c98:	4604      	mov	r4, r0
 8011c9a:	466b      	mov	r3, sp
 8011c9c:	f852 5b04 	ldr.w	r5, [r2], #4
 8011ca0:	601d      	str	r5, [r3, #0]
 8011ca2:	46ec      	mov	ip, sp
 8011ca4:	463d      	mov	r5, r7
 8011ca6:	42a5      	cmp	r5, r4
 8011ca8:	edd3 7a00 	vldr	s15, [r3]
 8011cac:	d008      	beq.n	8011cc0 <llEvaluate.constprop.23+0x34>
 8011cae:	ecbc 7a01 	vldmia	ip!, {s14}
 8011cb2:	ecf5 6a01 	vldmia	r5!, {s13}
 8011cb6:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8011cba:	edc3 7a00 	vstr	s15, [r3]
 8011cbe:	e7f2      	b.n	8011ca6 <llEvaluate.constprop.23+0x1a>
 8011cc0:	edd5 6a00 	vldr	s13, [r5]
 8011cc4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8011cc8:	462c      	mov	r4, r5
 8011cca:	4572      	cmp	r2, lr
 8011ccc:	f107 0710 	add.w	r7, r7, #16
 8011cd0:	f104 0414 	add.w	r4, r4, #20
 8011cd4:	eca3 7a01 	vstmia	r3!, {s14}
 8011cd8:	d1e0      	bne.n	8011c9c <llEvaluate.constprop.23+0x10>
 8011cda:	f10d 0c10 	add.w	ip, sp, #16
 8011cde:	f101 0410 	add.w	r4, r1, #16
 8011ce2:	2203      	movs	r2, #3
 8011ce4:	f85c 5d04 	ldr.w	r5, [ip, #-4]!
 8011ce8:	f844 5c04 	str.w	r5, [r4, #-4]
 8011cec:	1c53      	adds	r3, r2, #1
 8011cee:	b25b      	sxtb	r3, r3
 8011cf0:	ea4f 0e82 	mov.w	lr, r2, lsl #2
 8011cf4:	b21d      	sxth	r5, r3
 8011cf6:	eb00 1705 	add.w	r7, r0, r5, lsl #4
 8011cfa:	2b04      	cmp	r3, #4
 8011cfc:	4477      	add	r7, lr
 8011cfe:	eb01 0585 	add.w	r5, r1, r5, lsl #2
 8011d02:	ed54 7a01 	vldr	s15, [r4, #-4]
 8011d06:	d00a      	beq.n	8011d1e <llEvaluate.constprop.23+0x92>
 8011d08:	edd7 6a00 	vldr	s13, [r7]
 8011d0c:	ed95 7a00 	vldr	s14, [r5]
 8011d10:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8011d14:	3301      	adds	r3, #1
 8011d16:	b25b      	sxtb	r3, r3
 8011d18:	ed44 7a01 	vstr	s15, [r4, #-4]
 8011d1c:	e7ea      	b.n	8011cf4 <llEvaluate.constprop.23+0x68>
 8011d1e:	edd6 6a0f 	vldr	s13, [r6, #60]	; 0x3c
 8011d22:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8011d26:	3a01      	subs	r2, #1
 8011d28:	1c53      	adds	r3, r2, #1
 8011d2a:	f1a6 0614 	sub.w	r6, r6, #20
 8011d2e:	ed24 7a01 	vstmdb	r4!, {s14}
 8011d32:	d1d7      	bne.n	8011ce4 <llEvaluate.constprop.23+0x58>
 8011d34:	b005      	add	sp, #20
 8011d36:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011d38 <iNemo_setOrientation.constprop.40>:
 8011d38:	b4f0      	push	{r4, r5, r6, r7}
 8011d3a:	4973      	ldr	r1, [pc, #460]	; (8011f08 <iNemo_setOrientation.constprop.40+0x1d0>)
 8011d3c:	4b73      	ldr	r3, [pc, #460]	; (8011f0c <iNemo_setOrientation.constprop.40+0x1d4>)
 8011d3e:	7808      	ldrb	r0, [r1, #0]
 8011d40:	2200      	movs	r2, #0
 8011d42:	f1a0 0742 	sub.w	r7, r0, #66	; 0x42
 8011d46:	b084      	sub	sp, #16
 8011d48:	2f17      	cmp	r7, #23
 8011d4a:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
 8011d4e:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
 8011d52:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
 8011d56:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
 8011d5a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8011d5e:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
 8011d62:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
 8011d66:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
 8011d6a:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
 8011d6e:	790a      	ldrb	r2, [r1, #4]
 8011d70:	bf98      	it	ls
 8011d72:	3020      	addls	r0, #32
 8011d74:	f88d 0004 	strb.w	r0, [sp, #4]
 8011d78:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 8011d7c:	2817      	cmp	r0, #23
 8011d7e:	bf98      	it	ls
 8011d80:	3220      	addls	r2, #32
 8011d82:	f88d 2008 	strb.w	r2, [sp, #8]
 8011d86:	7a0a      	ldrb	r2, [r1, #8]
 8011d88:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 8011d8c:	2817      	cmp	r0, #23
 8011d8e:	bf98      	it	ls
 8011d90:	3220      	addls	r2, #32
 8011d92:	f88d 200c 	strb.w	r2, [sp, #12]
 8011d96:	784a      	ldrb	r2, [r1, #1]
 8011d98:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 8011d9c:	2817      	cmp	r0, #23
 8011d9e:	bf98      	it	ls
 8011da0:	3220      	addls	r2, #32
 8011da2:	f88d 2005 	strb.w	r2, [sp, #5]
 8011da6:	794a      	ldrb	r2, [r1, #5]
 8011da8:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 8011dac:	2817      	cmp	r0, #23
 8011dae:	bf98      	it	ls
 8011db0:	3220      	addls	r2, #32
 8011db2:	f88d 2009 	strb.w	r2, [sp, #9]
 8011db6:	7a4a      	ldrb	r2, [r1, #9]
 8011db8:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 8011dbc:	2817      	cmp	r0, #23
 8011dbe:	bf98      	it	ls
 8011dc0:	3220      	addls	r2, #32
 8011dc2:	f88d 200d 	strb.w	r2, [sp, #13]
 8011dc6:	788a      	ldrb	r2, [r1, #2]
 8011dc8:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 8011dcc:	2817      	cmp	r0, #23
 8011dce:	bf98      	it	ls
 8011dd0:	3220      	addls	r2, #32
 8011dd2:	f88d 2006 	strb.w	r2, [sp, #6]
 8011dd6:	798a      	ldrb	r2, [r1, #6]
 8011dd8:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 8011ddc:	2817      	cmp	r0, #23
 8011dde:	bf98      	it	ls
 8011de0:	3220      	addls	r2, #32
 8011de2:	f88d 200a 	strb.w	r2, [sp, #10]
 8011de6:	7a8a      	ldrb	r2, [r1, #10]
 8011de8:	f1a2 0142 	sub.w	r1, r2, #66	; 0x42
 8011dec:	2917      	cmp	r1, #23
 8011dee:	bf98      	it	ls
 8011df0:	3220      	addls	r2, #32
 8011df2:	f88d 200e 	strb.w	r2, [sp, #14]
 8011df6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011dfa:	3a64      	subs	r2, #100	; 0x64
 8011dfc:	2a13      	cmp	r2, #19
 8011dfe:	d80e      	bhi.n	8011e1e <iNemo_setOrientation.constprop.40+0xe6>
 8011e00:	e8df f002 	tbb	[pc, r2]
 8011e04:	0d0dba0a 	.word	0x0d0dba0a
 8011e08:	0d0d0d0d 	.word	0x0d0d0d0d
 8011e0c:	0dbe0d0d 	.word	0x0dbe0d0d
 8011e10:	c20d0d0d 	.word	0xc20d0d0d
 8011e14:	ca0dc60d 	.word	0xca0dc60d
 8011e18:	22ff      	movs	r2, #255	; 0xff
 8011e1a:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
 8011e1e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8011e22:	3a64      	subs	r2, #100	; 0x64
 8011e24:	2a13      	cmp	r2, #19
 8011e26:	d80e      	bhi.n	8011e46 <iNemo_setOrientation.constprop.40+0x10e>
 8011e28:	e8df f002 	tbb	[pc, r2]
 8011e2c:	0d0dba0a 	.word	0x0d0dba0a
 8011e30:	0d0d0d0d 	.word	0x0d0d0d0d
 8011e34:	0dbe0d0d 	.word	0x0dbe0d0d
 8011e38:	c20d0d0d 	.word	0xc20d0d0d
 8011e3c:	ca0dc60d 	.word	0xca0dc60d
 8011e40:	22ff      	movs	r2, #255	; 0xff
 8011e42:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
 8011e46:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011e4a:	3a64      	subs	r2, #100	; 0x64
 8011e4c:	2a13      	cmp	r2, #19
 8011e4e:	d80e      	bhi.n	8011e6e <iNemo_setOrientation.constprop.40+0x136>
 8011e50:	e8df f002 	tbb	[pc, r2]
 8011e54:	0d0dba0a 	.word	0x0d0dba0a
 8011e58:	0d0d0d0d 	.word	0x0d0d0d0d
 8011e5c:	0dbe0d0d 	.word	0x0dbe0d0d
 8011e60:	c20d0d0d 	.word	0xc20d0d0d
 8011e64:	ca0dc60d 	.word	0xca0dc60d
 8011e68:	22ff      	movs	r2, #255	; 0xff
 8011e6a:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
 8011e6e:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8011e72:	3a64      	subs	r2, #100	; 0x64
 8011e74:	2a13      	cmp	r2, #19
 8011e76:	d80e      	bhi.n	8011e96 <iNemo_setOrientation.constprop.40+0x15e>
 8011e78:	e8df f002 	tbb	[pc, r2]
 8011e7c:	0d0dba0a 	.word	0x0d0dba0a
 8011e80:	0d0d0d0d 	.word	0x0d0d0d0d
 8011e84:	0dbe0d0d 	.word	0x0dbe0d0d
 8011e88:	c20d0d0d 	.word	0xc20d0d0d
 8011e8c:	ca0dc60d 	.word	0xca0dc60d
 8011e90:	22ff      	movs	r2, #255	; 0xff
 8011e92:	f883 2436 	strb.w	r2, [r3, #1078]	; 0x436
 8011e96:	f89d 2009 	ldrb.w	r2, [sp, #9]
 8011e9a:	3a64      	subs	r2, #100	; 0x64
 8011e9c:	2a13      	cmp	r2, #19
 8011e9e:	d80e      	bhi.n	8011ebe <iNemo_setOrientation.constprop.40+0x186>
 8011ea0:	e8df f002 	tbb	[pc, r2]
 8011ea4:	0d0dba0a 	.word	0x0d0dba0a
 8011ea8:	0d0d0d0d 	.word	0x0d0d0d0d
 8011eac:	0dbe0d0d 	.word	0x0dbe0d0d
 8011eb0:	c20d0d0d 	.word	0xc20d0d0d
 8011eb4:	ca0dc60d 	.word	0xca0dc60d
 8011eb8:	22ff      	movs	r2, #255	; 0xff
 8011eba:	f883 2437 	strb.w	r2, [r3, #1079]	; 0x437
 8011ebe:	f89d 200a 	ldrb.w	r2, [sp, #10]
 8011ec2:	3a64      	subs	r2, #100	; 0x64
 8011ec4:	2a13      	cmp	r2, #19
 8011ec6:	d80e      	bhi.n	8011ee6 <iNemo_setOrientation.constprop.40+0x1ae>
 8011ec8:	e8df f002 	tbb	[pc, r2]
 8011ecc:	0d0dba0a 	.word	0x0d0dba0a
 8011ed0:	0d0d0d0d 	.word	0x0d0d0d0d
 8011ed4:	0dbe0d0d 	.word	0x0dbe0d0d
 8011ed8:	c20d0d0d 	.word	0xc20d0d0d
 8011edc:	ca0dc60d 	.word	0xca0dc60d
 8011ee0:	22ff      	movs	r2, #255	; 0xff
 8011ee2:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
 8011ee6:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8011eea:	3a64      	subs	r2, #100	; 0x64
 8011eec:	2a13      	cmp	r2, #19
 8011eee:	d812      	bhi.n	8011f16 <iNemo_setOrientation.constprop.40+0x1de>
 8011ef0:	e8df f002 	tbb	[pc, r2]
 8011ef4:	1111ba0e 	.word	0x1111ba0e
 8011ef8:	11111111 	.word	0x11111111
 8011efc:	11be1111 	.word	0x11be1111
 8011f00:	c2111111 	.word	0xc2111111
 8011f04:	ca11c611 	.word	0xca11c611
 8011f08:	20000358 	.word	0x20000358
 8011f0c:	20004b40 	.word	0x20004b40
 8011f10:	22ff      	movs	r2, #255	; 0xff
 8011f12:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a
 8011f16:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8011f1a:	3a64      	subs	r2, #100	; 0x64
 8011f1c:	2a13      	cmp	r2, #19
 8011f1e:	d80e      	bhi.n	8011f3e <iNemo_setOrientation.constprop.40+0x206>
 8011f20:	e8df f002 	tbb	[pc, r2]
 8011f24:	0d0db60a 	.word	0x0d0db60a
 8011f28:	0d0d0d0d 	.word	0x0d0d0d0d
 8011f2c:	0dba0d0d 	.word	0x0dba0d0d
 8011f30:	be0d0d0d 	.word	0xbe0d0d0d
 8011f34:	c60dc20d 	.word	0xc60dc20d
 8011f38:	22ff      	movs	r2, #255	; 0xff
 8011f3a:	f883 242b 	strb.w	r2, [r3, #1067]	; 0x42b
 8011f3e:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8011f42:	3a64      	subs	r2, #100	; 0x64
 8011f44:	2a13      	cmp	r2, #19
 8011f46:	d80e      	bhi.n	8011f66 <iNemo_setOrientation.constprop.40+0x22e>
 8011f48:	e8df f002 	tbb	[pc, r2]
 8011f4c:	0d0db60a 	.word	0x0d0db60a
 8011f50:	0d0d0d0d 	.word	0x0d0d0d0d
 8011f54:	0dbc0d0d 	.word	0x0dbc0d0d
 8011f58:	c20d0d0d 	.word	0xc20d0d0d
 8011f5c:	100dc80d 	.word	0x100dc80d
 8011f60:	22ff      	movs	r2, #255	; 0xff
 8011f62:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
 8011f66:	b004      	add	sp, #16
 8011f68:	bcf0      	pop	{r4, r5, r6, r7}
 8011f6a:	4770      	bx	lr
 8011f6c:	22ff      	movs	r2, #255	; 0xff
 8011f6e:	f883 2426 	strb.w	r2, [r3, #1062]	; 0x426
 8011f72:	b004      	add	sp, #16
 8011f74:	bcf0      	pop	{r4, r5, r6, r7}
 8011f76:	4770      	bx	lr
 8011f78:	2201      	movs	r2, #1
 8011f7a:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
 8011f7e:	e74e      	b.n	8011e1e <iNemo_setOrientation.constprop.40+0xe6>
 8011f80:	2201      	movs	r2, #1
 8011f82:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b
 8011f86:	e74a      	b.n	8011e1e <iNemo_setOrientation.constprop.40+0xe6>
 8011f88:	22ff      	movs	r2, #255	; 0xff
 8011f8a:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b
 8011f8e:	e746      	b.n	8011e1e <iNemo_setOrientation.constprop.40+0xe6>
 8011f90:	2201      	movs	r2, #1
 8011f92:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
 8011f96:	e742      	b.n	8011e1e <iNemo_setOrientation.constprop.40+0xe6>
 8011f98:	22ff      	movs	r2, #255	; 0xff
 8011f9a:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
 8011f9e:	e73e      	b.n	8011e1e <iNemo_setOrientation.constprop.40+0xe6>
 8011fa0:	2201      	movs	r2, #1
 8011fa2:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
 8011fa6:	e74e      	b.n	8011e46 <iNemo_setOrientation.constprop.40+0x10e>
 8011fa8:	2201      	movs	r2, #1
 8011faa:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 8011fae:	e74a      	b.n	8011e46 <iNemo_setOrientation.constprop.40+0x10e>
 8011fb0:	22ff      	movs	r2, #255	; 0xff
 8011fb2:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 8011fb6:	e746      	b.n	8011e46 <iNemo_setOrientation.constprop.40+0x10e>
 8011fb8:	2201      	movs	r2, #1
 8011fba:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
 8011fbe:	e742      	b.n	8011e46 <iNemo_setOrientation.constprop.40+0x10e>
 8011fc0:	22ff      	movs	r2, #255	; 0xff
 8011fc2:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
 8011fc6:	e73e      	b.n	8011e46 <iNemo_setOrientation.constprop.40+0x10e>
 8011fc8:	2201      	movs	r2, #1
 8011fca:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
 8011fce:	e74e      	b.n	8011e6e <iNemo_setOrientation.constprop.40+0x136>
 8011fd0:	2201      	movs	r2, #1
 8011fd2:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 8011fd6:	e74a      	b.n	8011e6e <iNemo_setOrientation.constprop.40+0x136>
 8011fd8:	22ff      	movs	r2, #255	; 0xff
 8011fda:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 8011fde:	e746      	b.n	8011e6e <iNemo_setOrientation.constprop.40+0x136>
 8011fe0:	2201      	movs	r2, #1
 8011fe2:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
 8011fe6:	e742      	b.n	8011e6e <iNemo_setOrientation.constprop.40+0x136>
 8011fe8:	22ff      	movs	r2, #255	; 0xff
 8011fea:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
 8011fee:	e73e      	b.n	8011e6e <iNemo_setOrientation.constprop.40+0x136>
 8011ff0:	2201      	movs	r2, #1
 8011ff2:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
 8011ff6:	e74e      	b.n	8011e96 <iNemo_setOrientation.constprop.40+0x15e>
 8011ff8:	2201      	movs	r2, #1
 8011ffa:	f883 2433 	strb.w	r2, [r3, #1075]	; 0x433
 8011ffe:	e74a      	b.n	8011e96 <iNemo_setOrientation.constprop.40+0x15e>
 8012000:	22ff      	movs	r2, #255	; 0xff
 8012002:	f883 2433 	strb.w	r2, [r3, #1075]	; 0x433
 8012006:	e746      	b.n	8011e96 <iNemo_setOrientation.constprop.40+0x15e>
 8012008:	2201      	movs	r2, #1
 801200a:	f883 2436 	strb.w	r2, [r3, #1078]	; 0x436
 801200e:	e742      	b.n	8011e96 <iNemo_setOrientation.constprop.40+0x15e>
 8012010:	22ff      	movs	r2, #255	; 0xff
 8012012:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
 8012016:	e73e      	b.n	8011e96 <iNemo_setOrientation.constprop.40+0x15e>
 8012018:	2201      	movs	r2, #1
 801201a:	f883 2431 	strb.w	r2, [r3, #1073]	; 0x431
 801201e:	e74e      	b.n	8011ebe <iNemo_setOrientation.constprop.40+0x186>
 8012020:	2201      	movs	r2, #1
 8012022:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
 8012026:	e74a      	b.n	8011ebe <iNemo_setOrientation.constprop.40+0x186>
 8012028:	22ff      	movs	r2, #255	; 0xff
 801202a:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
 801202e:	e746      	b.n	8011ebe <iNemo_setOrientation.constprop.40+0x186>
 8012030:	2201      	movs	r2, #1
 8012032:	f883 2437 	strb.w	r2, [r3, #1079]	; 0x437
 8012036:	e742      	b.n	8011ebe <iNemo_setOrientation.constprop.40+0x186>
 8012038:	22ff      	movs	r2, #255	; 0xff
 801203a:	f883 2431 	strb.w	r2, [r3, #1073]	; 0x431
 801203e:	e73e      	b.n	8011ebe <iNemo_setOrientation.constprop.40+0x186>
 8012040:	2201      	movs	r2, #1
 8012042:	f883 2432 	strb.w	r2, [r3, #1074]	; 0x432
 8012046:	e74e      	b.n	8011ee6 <iNemo_setOrientation.constprop.40+0x1ae>
 8012048:	2201      	movs	r2, #1
 801204a:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435
 801204e:	e74a      	b.n	8011ee6 <iNemo_setOrientation.constprop.40+0x1ae>
 8012050:	22ff      	movs	r2, #255	; 0xff
 8012052:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435
 8012056:	e746      	b.n	8011ee6 <iNemo_setOrientation.constprop.40+0x1ae>
 8012058:	2201      	movs	r2, #1
 801205a:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
 801205e:	e742      	b.n	8011ee6 <iNemo_setOrientation.constprop.40+0x1ae>
 8012060:	22ff      	movs	r2, #255	; 0xff
 8012062:	f883 2432 	strb.w	r2, [r3, #1074]	; 0x432
 8012066:	e73e      	b.n	8011ee6 <iNemo_setOrientation.constprop.40+0x1ae>
 8012068:	2201      	movs	r2, #1
 801206a:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
 801206e:	e752      	b.n	8011f16 <iNemo_setOrientation.constprop.40+0x1de>
 8012070:	2201      	movs	r2, #1
 8012072:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
 8012076:	e74e      	b.n	8011f16 <iNemo_setOrientation.constprop.40+0x1de>
 8012078:	22ff      	movs	r2, #255	; 0xff
 801207a:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
 801207e:	e74a      	b.n	8011f16 <iNemo_setOrientation.constprop.40+0x1de>
 8012080:	2201      	movs	r2, #1
 8012082:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a
 8012086:	e746      	b.n	8011f16 <iNemo_setOrientation.constprop.40+0x1de>
 8012088:	22ff      	movs	r2, #255	; 0xff
 801208a:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
 801208e:	e742      	b.n	8011f16 <iNemo_setOrientation.constprop.40+0x1de>
 8012090:	2201      	movs	r2, #1
 8012092:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
 8012096:	e752      	b.n	8011f3e <iNemo_setOrientation.constprop.40+0x206>
 8012098:	2201      	movs	r2, #1
 801209a:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
 801209e:	e74e      	b.n	8011f3e <iNemo_setOrientation.constprop.40+0x206>
 80120a0:	22ff      	movs	r2, #255	; 0xff
 80120a2:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
 80120a6:	e74a      	b.n	8011f3e <iNemo_setOrientation.constprop.40+0x206>
 80120a8:	2201      	movs	r2, #1
 80120aa:	f883 242b 	strb.w	r2, [r3, #1067]	; 0x42b
 80120ae:	e746      	b.n	8011f3e <iNemo_setOrientation.constprop.40+0x206>
 80120b0:	22ff      	movs	r2, #255	; 0xff
 80120b2:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
 80120b6:	e742      	b.n	8011f3e <iNemo_setOrientation.constprop.40+0x206>
 80120b8:	2201      	movs	r2, #1
 80120ba:	f883 2426 	strb.w	r2, [r3, #1062]	; 0x426
 80120be:	b004      	add	sp, #16
 80120c0:	bcf0      	pop	{r4, r5, r6, r7}
 80120c2:	4770      	bx	lr
 80120c4:	2201      	movs	r2, #1
 80120c6:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
 80120ca:	b004      	add	sp, #16
 80120cc:	bcf0      	pop	{r4, r5, r6, r7}
 80120ce:	4770      	bx	lr
 80120d0:	22ff      	movs	r2, #255	; 0xff
 80120d2:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
 80120d6:	b004      	add	sp, #16
 80120d8:	bcf0      	pop	{r4, r5, r6, r7}
 80120da:	4770      	bx	lr
 80120dc:	2201      	movs	r2, #1
 80120de:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
 80120e2:	b004      	add	sp, #16
 80120e4:	bcf0      	pop	{r4, r5, r6, r7}
 80120e6:	4770      	bx	lr

080120e8 <iNemo_setOrientation_6X.constprop.41>:
 80120e8:	b4f0      	push	{r4, r5, r6, r7}
 80120ea:	4973      	ldr	r1, [pc, #460]	; (80122b8 <iNemo_setOrientation_6X.constprop.41+0x1d0>)
 80120ec:	4b73      	ldr	r3, [pc, #460]	; (80122bc <iNemo_setOrientation_6X.constprop.41+0x1d4>)
 80120ee:	7808      	ldrb	r0, [r1, #0]
 80120f0:	2200      	movs	r2, #0
 80120f2:	f1a0 0742 	sub.w	r7, r0, #66	; 0x42
 80120f6:	b084      	sub	sp, #16
 80120f8:	2f17      	cmp	r7, #23
 80120fa:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
 80120fe:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
 8012102:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
 8012106:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
 801210a:	f8c3 2454 	str.w	r2, [r3, #1108]	; 0x454
 801210e:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
 8012112:	f883 2450 	strb.w	r2, [r3, #1104]	; 0x450
 8012116:	f8c3 2458 	str.w	r2, [r3, #1112]	; 0x458
 801211a:	f883 245c 	strb.w	r2, [r3, #1116]	; 0x45c
 801211e:	790a      	ldrb	r2, [r1, #4]
 8012120:	bf98      	it	ls
 8012122:	3020      	addls	r0, #32
 8012124:	f88d 0004 	strb.w	r0, [sp, #4]
 8012128:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 801212c:	2817      	cmp	r0, #23
 801212e:	bf98      	it	ls
 8012130:	3220      	addls	r2, #32
 8012132:	f88d 2008 	strb.w	r2, [sp, #8]
 8012136:	7a0a      	ldrb	r2, [r1, #8]
 8012138:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 801213c:	2817      	cmp	r0, #23
 801213e:	bf98      	it	ls
 8012140:	3220      	addls	r2, #32
 8012142:	f88d 200c 	strb.w	r2, [sp, #12]
 8012146:	784a      	ldrb	r2, [r1, #1]
 8012148:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 801214c:	2817      	cmp	r0, #23
 801214e:	bf98      	it	ls
 8012150:	3220      	addls	r2, #32
 8012152:	f88d 2005 	strb.w	r2, [sp, #5]
 8012156:	794a      	ldrb	r2, [r1, #5]
 8012158:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 801215c:	2817      	cmp	r0, #23
 801215e:	bf98      	it	ls
 8012160:	3220      	addls	r2, #32
 8012162:	f88d 2009 	strb.w	r2, [sp, #9]
 8012166:	7a4a      	ldrb	r2, [r1, #9]
 8012168:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 801216c:	2817      	cmp	r0, #23
 801216e:	bf98      	it	ls
 8012170:	3220      	addls	r2, #32
 8012172:	f88d 200d 	strb.w	r2, [sp, #13]
 8012176:	788a      	ldrb	r2, [r1, #2]
 8012178:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 801217c:	2817      	cmp	r0, #23
 801217e:	bf98      	it	ls
 8012180:	3220      	addls	r2, #32
 8012182:	f88d 2006 	strb.w	r2, [sp, #6]
 8012186:	798a      	ldrb	r2, [r1, #6]
 8012188:	f1a2 0042 	sub.w	r0, r2, #66	; 0x42
 801218c:	2817      	cmp	r0, #23
 801218e:	bf98      	it	ls
 8012190:	3220      	addls	r2, #32
 8012192:	f88d 200a 	strb.w	r2, [sp, #10]
 8012196:	7a8a      	ldrb	r2, [r1, #10]
 8012198:	f1a2 0142 	sub.w	r1, r2, #66	; 0x42
 801219c:	2917      	cmp	r1, #23
 801219e:	bf98      	it	ls
 80121a0:	3220      	addls	r2, #32
 80121a2:	f88d 200e 	strb.w	r2, [sp, #14]
 80121a6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80121aa:	3a64      	subs	r2, #100	; 0x64
 80121ac:	2a13      	cmp	r2, #19
 80121ae:	d80e      	bhi.n	80121ce <iNemo_setOrientation_6X.constprop.41+0xe6>
 80121b0:	e8df f002 	tbb	[pc, r2]
 80121b4:	0d0dba0a 	.word	0x0d0dba0a
 80121b8:	0d0d0d0d 	.word	0x0d0d0d0d
 80121bc:	0dbe0d0d 	.word	0x0dbe0d0d
 80121c0:	c20d0d0d 	.word	0xc20d0d0d
 80121c4:	ca0dc60d 	.word	0xca0dc60d
 80121c8:	22ff      	movs	r2, #255	; 0xff
 80121ca:	f883 2442 	strb.w	r2, [r3, #1090]	; 0x442
 80121ce:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80121d2:	3a64      	subs	r2, #100	; 0x64
 80121d4:	2a13      	cmp	r2, #19
 80121d6:	d80e      	bhi.n	80121f6 <iNemo_setOrientation_6X.constprop.41+0x10e>
 80121d8:	e8df f002 	tbb	[pc, r2]
 80121dc:	0d0dba0a 	.word	0x0d0dba0a
 80121e0:	0d0d0d0d 	.word	0x0d0d0d0d
 80121e4:	0dbe0d0d 	.word	0x0dbe0d0d
 80121e8:	c20d0d0d 	.word	0xc20d0d0d
 80121ec:	ca0dc60d 	.word	0xca0dc60d
 80121f0:	22ff      	movs	r2, #255	; 0xff
 80121f2:	f883 2443 	strb.w	r2, [r3, #1091]	; 0x443
 80121f6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80121fa:	3a64      	subs	r2, #100	; 0x64
 80121fc:	2a13      	cmp	r2, #19
 80121fe:	d80e      	bhi.n	801221e <iNemo_setOrientation_6X.constprop.41+0x136>
 8012200:	e8df f002 	tbb	[pc, r2]
 8012204:	0d0dba0a 	.word	0x0d0dba0a
 8012208:	0d0d0d0d 	.word	0x0d0d0d0d
 801220c:	0dbe0d0d 	.word	0x0dbe0d0d
 8012210:	c20d0d0d 	.word	0xc20d0d0d
 8012214:	ca0dc60d 	.word	0xca0dc60d
 8012218:	22ff      	movs	r2, #255	; 0xff
 801221a:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
 801221e:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8012222:	3a64      	subs	r2, #100	; 0x64
 8012224:	2a13      	cmp	r2, #19
 8012226:	d80e      	bhi.n	8012246 <iNemo_setOrientation_6X.constprop.41+0x15e>
 8012228:	e8df f002 	tbb	[pc, r2]
 801222c:	0d0dba0a 	.word	0x0d0dba0a
 8012230:	0d0d0d0d 	.word	0x0d0d0d0d
 8012234:	0dbe0d0d 	.word	0x0dbe0d0d
 8012238:	c20d0d0d 	.word	0xc20d0d0d
 801223c:	ca0dc60d 	.word	0xca0dc60d
 8012240:	22ff      	movs	r2, #255	; 0xff
 8012242:	f883 245a 	strb.w	r2, [r3, #1114]	; 0x45a
 8012246:	f89d 2009 	ldrb.w	r2, [sp, #9]
 801224a:	3a64      	subs	r2, #100	; 0x64
 801224c:	2a13      	cmp	r2, #19
 801224e:	d80e      	bhi.n	801226e <iNemo_setOrientation_6X.constprop.41+0x186>
 8012250:	e8df f002 	tbb	[pc, r2]
 8012254:	0d0dba0a 	.word	0x0d0dba0a
 8012258:	0d0d0d0d 	.word	0x0d0d0d0d
 801225c:	0dbe0d0d 	.word	0x0dbe0d0d
 8012260:	c20d0d0d 	.word	0xc20d0d0d
 8012264:	ca0dc60d 	.word	0xca0dc60d
 8012268:	22ff      	movs	r2, #255	; 0xff
 801226a:	f883 245b 	strb.w	r2, [r3, #1115]	; 0x45b
 801226e:	f89d 200a 	ldrb.w	r2, [sp, #10]
 8012272:	3a64      	subs	r2, #100	; 0x64
 8012274:	2a13      	cmp	r2, #19
 8012276:	d80e      	bhi.n	8012296 <iNemo_setOrientation_6X.constprop.41+0x1ae>
 8012278:	e8df f002 	tbb	[pc, r2]
 801227c:	0d0dba0a 	.word	0x0d0dba0a
 8012280:	0d0d0d0d 	.word	0x0d0d0d0d
 8012284:	0dbe0d0d 	.word	0x0dbe0d0d
 8012288:	c20d0d0d 	.word	0xc20d0d0d
 801228c:	ca0dc60d 	.word	0xca0dc60d
 8012290:	22ff      	movs	r2, #255	; 0xff
 8012292:	f883 245c 	strb.w	r2, [r3, #1116]	; 0x45c
 8012296:	f89d 200c 	ldrb.w	r2, [sp, #12]
 801229a:	3a64      	subs	r2, #100	; 0x64
 801229c:	2a13      	cmp	r2, #19
 801229e:	d812      	bhi.n	80122c6 <iNemo_setOrientation_6X.constprop.41+0x1de>
 80122a0:	e8df f002 	tbb	[pc, r2]
 80122a4:	1111ba0e 	.word	0x1111ba0e
 80122a8:	11111111 	.word	0x11111111
 80122ac:	11be1111 	.word	0x11be1111
 80122b0:	c2111111 	.word	0xc2111111
 80122b4:	ca11c611 	.word	0xca11c611
 80122b8:	20000358 	.word	0x20000358
 80122bc:	20004b40 	.word	0x20004b40
 80122c0:	22ff      	movs	r2, #255	; 0xff
 80122c2:	f883 244e 	strb.w	r2, [r3, #1102]	; 0x44e
 80122c6:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80122ca:	3a64      	subs	r2, #100	; 0x64
 80122cc:	2a13      	cmp	r2, #19
 80122ce:	d80e      	bhi.n	80122ee <iNemo_setOrientation_6X.constprop.41+0x206>
 80122d0:	e8df f002 	tbb	[pc, r2]
 80122d4:	0d0db60a 	.word	0x0d0db60a
 80122d8:	0d0d0d0d 	.word	0x0d0d0d0d
 80122dc:	0dba0d0d 	.word	0x0dba0d0d
 80122e0:	be0d0d0d 	.word	0xbe0d0d0d
 80122e4:	c60dc20d 	.word	0xc60dc20d
 80122e8:	22ff      	movs	r2, #255	; 0xff
 80122ea:	f883 244f 	strb.w	r2, [r3, #1103]	; 0x44f
 80122ee:	f89d 200e 	ldrb.w	r2, [sp, #14]
 80122f2:	3a64      	subs	r2, #100	; 0x64
 80122f4:	2a13      	cmp	r2, #19
 80122f6:	d80e      	bhi.n	8012316 <iNemo_setOrientation_6X.constprop.41+0x22e>
 80122f8:	e8df f002 	tbb	[pc, r2]
 80122fc:	0d0db60a 	.word	0x0d0db60a
 8012300:	0d0d0d0d 	.word	0x0d0d0d0d
 8012304:	0dbc0d0d 	.word	0x0dbc0d0d
 8012308:	c20d0d0d 	.word	0xc20d0d0d
 801230c:	100dc80d 	.word	0x100dc80d
 8012310:	22ff      	movs	r2, #255	; 0xff
 8012312:	f883 2450 	strb.w	r2, [r3, #1104]	; 0x450
 8012316:	b004      	add	sp, #16
 8012318:	bcf0      	pop	{r4, r5, r6, r7}
 801231a:	4770      	bx	lr
 801231c:	22ff      	movs	r2, #255	; 0xff
 801231e:	f883 244a 	strb.w	r2, [r3, #1098]	; 0x44a
 8012322:	b004      	add	sp, #16
 8012324:	bcf0      	pop	{r4, r5, r6, r7}
 8012326:	4770      	bx	lr
 8012328:	2201      	movs	r2, #1
 801232a:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
 801232e:	e74e      	b.n	80121ce <iNemo_setOrientation_6X.constprop.41+0xe6>
 8012330:	2201      	movs	r2, #1
 8012332:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
 8012336:	e74a      	b.n	80121ce <iNemo_setOrientation_6X.constprop.41+0xe6>
 8012338:	22ff      	movs	r2, #255	; 0xff
 801233a:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
 801233e:	e746      	b.n	80121ce <iNemo_setOrientation_6X.constprop.41+0xe6>
 8012340:	2201      	movs	r2, #1
 8012342:	f883 2442 	strb.w	r2, [r3, #1090]	; 0x442
 8012346:	e742      	b.n	80121ce <iNemo_setOrientation_6X.constprop.41+0xe6>
 8012348:	22ff      	movs	r2, #255	; 0xff
 801234a:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
 801234e:	e73e      	b.n	80121ce <iNemo_setOrientation_6X.constprop.41+0xe6>
 8012350:	2201      	movs	r2, #1
 8012352:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
 8012356:	e74e      	b.n	80121f6 <iNemo_setOrientation_6X.constprop.41+0x10e>
 8012358:	2201      	movs	r2, #1
 801235a:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
 801235e:	e74a      	b.n	80121f6 <iNemo_setOrientation_6X.constprop.41+0x10e>
 8012360:	22ff      	movs	r2, #255	; 0xff
 8012362:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
 8012366:	e746      	b.n	80121f6 <iNemo_setOrientation_6X.constprop.41+0x10e>
 8012368:	2201      	movs	r2, #1
 801236a:	f883 2443 	strb.w	r2, [r3, #1091]	; 0x443
 801236e:	e742      	b.n	80121f6 <iNemo_setOrientation_6X.constprop.41+0x10e>
 8012370:	22ff      	movs	r2, #255	; 0xff
 8012372:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
 8012376:	e73e      	b.n	80121f6 <iNemo_setOrientation_6X.constprop.41+0x10e>
 8012378:	2201      	movs	r2, #1
 801237a:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
 801237e:	e74e      	b.n	801221e <iNemo_setOrientation_6X.constprop.41+0x136>
 8012380:	2201      	movs	r2, #1
 8012382:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
 8012386:	e74a      	b.n	801221e <iNemo_setOrientation_6X.constprop.41+0x136>
 8012388:	22ff      	movs	r2, #255	; 0xff
 801238a:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
 801238e:	e746      	b.n	801221e <iNemo_setOrientation_6X.constprop.41+0x136>
 8012390:	2201      	movs	r2, #1
 8012392:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
 8012396:	e742      	b.n	801221e <iNemo_setOrientation_6X.constprop.41+0x136>
 8012398:	22ff      	movs	r2, #255	; 0xff
 801239a:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
 801239e:	e73e      	b.n	801221e <iNemo_setOrientation_6X.constprop.41+0x136>
 80123a0:	2201      	movs	r2, #1
 80123a2:	f883 2454 	strb.w	r2, [r3, #1108]	; 0x454
 80123a6:	e74e      	b.n	8012246 <iNemo_setOrientation_6X.constprop.41+0x15e>
 80123a8:	2201      	movs	r2, #1
 80123aa:	f883 2457 	strb.w	r2, [r3, #1111]	; 0x457
 80123ae:	e74a      	b.n	8012246 <iNemo_setOrientation_6X.constprop.41+0x15e>
 80123b0:	22ff      	movs	r2, #255	; 0xff
 80123b2:	f883 2457 	strb.w	r2, [r3, #1111]	; 0x457
 80123b6:	e746      	b.n	8012246 <iNemo_setOrientation_6X.constprop.41+0x15e>
 80123b8:	2201      	movs	r2, #1
 80123ba:	f883 245a 	strb.w	r2, [r3, #1114]	; 0x45a
 80123be:	e742      	b.n	8012246 <iNemo_setOrientation_6X.constprop.41+0x15e>
 80123c0:	22ff      	movs	r2, #255	; 0xff
 80123c2:	f883 2454 	strb.w	r2, [r3, #1108]	; 0x454
 80123c6:	e73e      	b.n	8012246 <iNemo_setOrientation_6X.constprop.41+0x15e>
 80123c8:	2201      	movs	r2, #1
 80123ca:	f883 2455 	strb.w	r2, [r3, #1109]	; 0x455
 80123ce:	e74e      	b.n	801226e <iNemo_setOrientation_6X.constprop.41+0x186>
 80123d0:	2201      	movs	r2, #1
 80123d2:	f883 2458 	strb.w	r2, [r3, #1112]	; 0x458
 80123d6:	e74a      	b.n	801226e <iNemo_setOrientation_6X.constprop.41+0x186>
 80123d8:	22ff      	movs	r2, #255	; 0xff
 80123da:	f883 2458 	strb.w	r2, [r3, #1112]	; 0x458
 80123de:	e746      	b.n	801226e <iNemo_setOrientation_6X.constprop.41+0x186>
 80123e0:	2201      	movs	r2, #1
 80123e2:	f883 245b 	strb.w	r2, [r3, #1115]	; 0x45b
 80123e6:	e742      	b.n	801226e <iNemo_setOrientation_6X.constprop.41+0x186>
 80123e8:	22ff      	movs	r2, #255	; 0xff
 80123ea:	f883 2455 	strb.w	r2, [r3, #1109]	; 0x455
 80123ee:	e73e      	b.n	801226e <iNemo_setOrientation_6X.constprop.41+0x186>
 80123f0:	2201      	movs	r2, #1
 80123f2:	f883 2456 	strb.w	r2, [r3, #1110]	; 0x456
 80123f6:	e74e      	b.n	8012296 <iNemo_setOrientation_6X.constprop.41+0x1ae>
 80123f8:	2201      	movs	r2, #1
 80123fa:	f883 2459 	strb.w	r2, [r3, #1113]	; 0x459
 80123fe:	e74a      	b.n	8012296 <iNemo_setOrientation_6X.constprop.41+0x1ae>
 8012400:	22ff      	movs	r2, #255	; 0xff
 8012402:	f883 2459 	strb.w	r2, [r3, #1113]	; 0x459
 8012406:	e746      	b.n	8012296 <iNemo_setOrientation_6X.constprop.41+0x1ae>
 8012408:	2201      	movs	r2, #1
 801240a:	f883 245c 	strb.w	r2, [r3, #1116]	; 0x45c
 801240e:	e742      	b.n	8012296 <iNemo_setOrientation_6X.constprop.41+0x1ae>
 8012410:	22ff      	movs	r2, #255	; 0xff
 8012412:	f883 2456 	strb.w	r2, [r3, #1110]	; 0x456
 8012416:	e73e      	b.n	8012296 <iNemo_setOrientation_6X.constprop.41+0x1ae>
 8012418:	2201      	movs	r2, #1
 801241a:	f883 2448 	strb.w	r2, [r3, #1096]	; 0x448
 801241e:	e752      	b.n	80122c6 <iNemo_setOrientation_6X.constprop.41+0x1de>
 8012420:	2201      	movs	r2, #1
 8012422:	f883 244b 	strb.w	r2, [r3, #1099]	; 0x44b
 8012426:	e74e      	b.n	80122c6 <iNemo_setOrientation_6X.constprop.41+0x1de>
 8012428:	22ff      	movs	r2, #255	; 0xff
 801242a:	f883 244b 	strb.w	r2, [r3, #1099]	; 0x44b
 801242e:	e74a      	b.n	80122c6 <iNemo_setOrientation_6X.constprop.41+0x1de>
 8012430:	2201      	movs	r2, #1
 8012432:	f883 244e 	strb.w	r2, [r3, #1102]	; 0x44e
 8012436:	e746      	b.n	80122c6 <iNemo_setOrientation_6X.constprop.41+0x1de>
 8012438:	22ff      	movs	r2, #255	; 0xff
 801243a:	f883 2448 	strb.w	r2, [r3, #1096]	; 0x448
 801243e:	e742      	b.n	80122c6 <iNemo_setOrientation_6X.constprop.41+0x1de>
 8012440:	2201      	movs	r2, #1
 8012442:	f883 2449 	strb.w	r2, [r3, #1097]	; 0x449
 8012446:	e752      	b.n	80122ee <iNemo_setOrientation_6X.constprop.41+0x206>
 8012448:	2201      	movs	r2, #1
 801244a:	f883 244c 	strb.w	r2, [r3, #1100]	; 0x44c
 801244e:	e74e      	b.n	80122ee <iNemo_setOrientation_6X.constprop.41+0x206>
 8012450:	22ff      	movs	r2, #255	; 0xff
 8012452:	f883 244c 	strb.w	r2, [r3, #1100]	; 0x44c
 8012456:	e74a      	b.n	80122ee <iNemo_setOrientation_6X.constprop.41+0x206>
 8012458:	2201      	movs	r2, #1
 801245a:	f883 244f 	strb.w	r2, [r3, #1103]	; 0x44f
 801245e:	e746      	b.n	80122ee <iNemo_setOrientation_6X.constprop.41+0x206>
 8012460:	22ff      	movs	r2, #255	; 0xff
 8012462:	f883 2449 	strb.w	r2, [r3, #1097]	; 0x449
 8012466:	e742      	b.n	80122ee <iNemo_setOrientation_6X.constprop.41+0x206>
 8012468:	2201      	movs	r2, #1
 801246a:	f883 244a 	strb.w	r2, [r3, #1098]	; 0x44a
 801246e:	b004      	add	sp, #16
 8012470:	bcf0      	pop	{r4, r5, r6, r7}
 8012472:	4770      	bx	lr
 8012474:	2201      	movs	r2, #1
 8012476:	f883 244d 	strb.w	r2, [r3, #1101]	; 0x44d
 801247a:	b004      	add	sp, #16
 801247c:	bcf0      	pop	{r4, r5, r6, r7}
 801247e:	4770      	bx	lr
 8012480:	22ff      	movs	r2, #255	; 0xff
 8012482:	f883 244d 	strb.w	r2, [r3, #1101]	; 0x44d
 8012486:	b004      	add	sp, #16
 8012488:	bcf0      	pop	{r4, r5, r6, r7}
 801248a:	4770      	bx	lr
 801248c:	2201      	movs	r2, #1
 801248e:	f883 2450 	strb.w	r2, [r3, #1104]	; 0x450
 8012492:	b004      	add	sp, #16
 8012494:	bcf0      	pop	{r4, r5, r6, r7}
 8012496:	4770      	bx	lr

08012498 <getMagStats.constprop.26>:
 8012498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801249c:	2400      	movs	r4, #0
 801249e:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 8012678 <getMagStats.constprop.26+0x1e0>
 80124a2:	601c      	str	r4, [r3, #0]
 80124a4:	6014      	str	r4, [r2, #0]
 80124a6:	f898 e500 	ldrb.w	lr, [r8, #1280]	; 0x500
 80124aa:	f898 c501 	ldrb.w	ip, [r8, #1281]	; 0x501
 80124ae:	f998 4502 	ldrsb.w	r4, [r8, #1282]	; 0x502
 80124b2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80124b6:	45e6      	cmp	lr, ip
 80124b8:	b083      	sub	sp, #12
 80124ba:	f104 0401 	add.w	r4, r4, #1
 80124be:	ee87 4a80 	vdiv.f32	s8, s15, s0
 80124c2:	f000 80c7 	beq.w	8012654 <getMagStats.constprop.26+0x1bc>
 80124c6:	eba4 040e 	sub.w	r4, r4, lr
 80124ca:	fb94 f9fc 	sdiv	r9, r4, ip
 80124ce:	fb0c 4419 	mls	r4, ip, r9, r4
 80124d2:	2c00      	cmp	r4, #0
 80124d4:	fa0f f984 	sxth.w	r9, r4
 80124d8:	bfbc      	itt	lt
 80124da:	4464      	addlt	r4, ip
 80124dc:	fa0f f984 	sxthlt.w	r9, r4
 80124e0:	eddf 3a62 	vldr	s7, [pc, #392]	; 801266c <getMagStats.constprop.26+0x1d4>
 80124e4:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 80124e8:	ee64 3a23 	vmul.f32	s7, s8, s7
 80124ec:	ee24 4a27 	vmul.f32	s8, s8, s15
 80124f0:	f1be 0f00 	cmp.w	lr, #0
 80124f4:	f000 80b5 	beq.w	8012662 <getMagStats.constprop.26+0x1ca>
 80124f8:	2700      	movs	r7, #0
 80124fa:	f8b0 b000 	ldrh.w	fp, [r0]
 80124fe:	f8b0 a002 	ldrh.w	sl, [r0, #2]
 8012502:	8880      	ldrh	r0, [r0, #4]
 8012504:	9001      	str	r0, [sp, #4]
 8012506:	eddf 5a5a 	vldr	s11, [pc, #360]	; 8012670 <getMagStats.constprop.26+0x1d8>
 801250a:	9700      	str	r7, [sp, #0]
 801250c:	e001      	b.n	8012512 <getMagStats.constprop.26+0x7a>
 801250e:	edd2 5a00 	vldr	s11, [r2]
 8012512:	9801      	ldr	r0, [sp, #4]
 8012514:	edd1 4a00 	vldr	s9, [r1]
 8012518:	ed91 6a04 	vldr	s12, [r1, #16]
 801251c:	edd1 6a08 	vldr	s13, [r1, #32]
 8012520:	eb09 0507 	add.w	r5, r9, r7
 8012524:	fb95 f4fc 	sdiv	r4, r5, ip
 8012528:	fb0c 5414 	mls	r4, ip, r4, r5
 801252c:	b2e4      	uxtb	r4, r4
 801252e:	3404      	adds	r4, #4
 8012530:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
 8012534:	3701      	adds	r7, #1
 8012536:	f8b4 6502 	ldrh.w	r6, [r4, #1282]	; 0x502
 801253a:	f8b4 5504 	ldrh.w	r5, [r4, #1284]	; 0x504
 801253e:	f8b4 4506 	ldrh.w	r4, [r4, #1286]	; 0x506
 8012542:	eba6 060b 	sub.w	r6, r6, fp
 8012546:	b236      	sxth	r6, r6
 8012548:	ee07 6a90 	vmov	s15, r6
 801254c:	eba5 050a 	sub.w	r5, r5, sl
 8012550:	b22d      	sxth	r5, r5
 8012552:	1a24      	subs	r4, r4, r0
 8012554:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8012558:	ee07 5a90 	vmov	s15, r5
 801255c:	b224      	sxth	r4, r4
 801255e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8012562:	ee07 4a90 	vmov	s15, r4
 8012566:	ee25 5a24 	vmul.f32	s10, s10, s9
 801256a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801256e:	ee27 7a06 	vmul.f32	s14, s14, s12
 8012572:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012576:	eefd 6ac5 	vcvt.s32.f32	s13, s10
 801257a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801257e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012582:	ee16 0a90 	vmov	r0, s13
 8012586:	ee17 4a10 	vmov	r4, s14
 801258a:	b205      	sxth	r5, r0
 801258c:	ee17 0a90 	vmov	r0, s15
 8012590:	fb14 f404 	smulbb	r4, r4, r4
 8012594:	fb05 4505 	mla	r5, r5, r5, r4
 8012598:	b204      	sxth	r4, r0
 801259a:	fb04 5404 	mla	r4, r4, r4, r5
 801259e:	ee07 4a90 	vmov	s15, r4
 80125a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80125a6:	9800      	ldr	r0, [sp, #0]
 80125a8:	eeb1 7ae7 	vsqrt.f32	s14, s15
 80125ac:	1c46      	adds	r6, r0, #1
 80125ae:	b2fd      	uxtb	r5, r7
 80125b0:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80125b4:	ee17 0a10 	vmov	r0, s14
 80125b8:	b200      	sxth	r0, r0
 80125ba:	ee07 0a90 	vmov	s15, r0
 80125be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80125c2:	ee37 7ae3 	vsub.f32	s14, s15, s7
 80125c6:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80125ca:	eeb0 7ac7 	vabs.f32	s14, s14
 80125ce:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80125d2:	edc2 7a00 	vstr	s15, [r2]
 80125d6:	ee17 0a10 	vmov	r0, s14
 80125da:	b204      	sxth	r4, r0
 80125dc:	ee07 4a10 	vmov	s14, r4
 80125e0:	fb04 f004 	mul.w	r0, r4, r4
 80125e4:	ee07 0a90 	vmov	s15, r0
 80125e8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80125ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80125f0:	eeb4 4ac7 	vcmpe.f32	s8, s14
 80125f4:	ed93 7a00 	vldr	s14, [r3]
 80125f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125fc:	bf48      	it	mi
 80125fe:	b2f0      	uxtbmi	r0, r6
 8012600:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012604:	bf48      	it	mi
 8012606:	9000      	strmi	r0, [sp, #0]
 8012608:	45ae      	cmp	lr, r5
 801260a:	edc3 7a00 	vstr	s15, [r3]
 801260e:	f63f af7e 	bhi.w	801250e <getMagStats.constprop.26+0x76>
 8012612:	9800      	ldr	r0, [sp, #0]
 8012614:	eddf 6a17 	vldr	s13, [pc, #92]	; 8012674 <getMagStats.constprop.26+0x1dc>
 8012618:	ee07 ea10 	vmov	s14, lr
 801261c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012620:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8012624:	eef1 7ac6 	vsqrt.f32	s15, s12
 8012628:	ee60 7a27 	vmul.f32	s15, s0, s15
 801262c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8012630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012634:	bfb8      	it	lt
 8012636:	eef0 7a66 	vmovlt.f32	s15, s13
 801263a:	edc3 7a00 	vstr	s15, [r3]
 801263e:	edd2 7a00 	vldr	s15, [r2]
 8012642:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012646:	eec0 7a07 	vdiv.f32	s15, s0, s14
 801264a:	edc2 7a00 	vstr	s15, [r2]
 801264e:	b003      	add	sp, #12
 8012650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012654:	fb94 f9fe 	sdiv	r9, r4, lr
 8012658:	fb0e 4919 	mls	r9, lr, r9, r4
 801265c:	fa0f f989 	sxth.w	r9, r9
 8012660:	e73e      	b.n	80124e0 <getMagStats.constprop.26+0x48>
 8012662:	edd3 7a00 	vldr	s15, [r3]
 8012666:	4670      	mov	r0, lr
 8012668:	e7d4      	b.n	8012614 <getMagStats.constprop.26+0x17c>
 801266a:	bf00      	nop
 801266c:	423c0000 	.word	0x423c0000
 8012670:	00000000 	.word	0x00000000
 8012674:	3f59999a 	.word	0x3f59999a
 8012678:	20004b40 	.word	0x20004b40

0801267c <MEMS_updateMagBufferIndex.constprop.24>:
 801267c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012680:	4e98      	ldr	r6, [pc, #608]	; (80128e4 <MEMS_updateMagBufferIndex.constprop.24+0x268>)
 8012682:	ed2d 8b02 	vpush	{d8}
 8012686:	f896 9500 	ldrb.w	r9, [r6, #1280]	; 0x500
 801268a:	f896 8501 	ldrb.w	r8, [r6, #1281]	; 0x501
 801268e:	f996 1502 	ldrsb.w	r1, [r6, #1282]	; 0x502
 8012692:	2300      	movs	r3, #0
 8012694:	45c1      	cmp	r9, r8
 8012696:	b08f      	sub	sp, #60	; 0x3c
 8012698:	f101 0101 	add.w	r1, r1, #1
 801269c:	f8c6 3508 	str.w	r3, [r6, #1288]	; 0x508
 80126a0:	f8c6 350c 	str.w	r3, [r6, #1292]	; 0x50c
 80126a4:	f8c6 3510 	str.w	r3, [r6, #1296]	; 0x510
 80126a8:	f8c6 3514 	str.w	r3, [r6, #1300]	; 0x514
 80126ac:	f8c6 351c 	str.w	r3, [r6, #1308]	; 0x51c
 80126b0:	f8c6 3518 	str.w	r3, [r6, #1304]	; 0x518
 80126b4:	f000 810b 	beq.w	80128ce <MEMS_updateMagBufferIndex.constprop.24+0x252>
 80126b8:	eba1 0109 	sub.w	r1, r1, r9
 80126bc:	fb91 f3f8 	sdiv	r3, r1, r8
 80126c0:	fb08 1113 	mls	r1, r8, r3, r1
 80126c4:	b20b      	sxth	r3, r1
 80126c6:	2900      	cmp	r1, #0
 80126c8:	9301      	str	r3, [sp, #4]
 80126ca:	f2c0 80fc 	blt.w	80128c6 <MEMS_updateMagBufferIndex.constprop.24+0x24a>
 80126ce:	f1b9 0f00 	cmp.w	r9, #0
 80126d2:	d107      	bne.n	80126e4 <MEMS_updateMagBufferIndex.constprop.24+0x68>
 80126d4:	23ff      	movs	r3, #255	; 0xff
 80126d6:	f886 3502 	strb.w	r3, [r6, #1282]	; 0x502
 80126da:	b00f      	add	sp, #60	; 0x3c
 80126dc:	ecbd 8b02 	vpop	{d8}
 80126e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126e4:	2500      	movs	r5, #0
 80126e6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80126ea:	f8cd 9018 	str.w	r9, [sp, #24]
 80126ee:	ee87 8a80 	vdiv.f32	s16, s15, s0
 80126f2:	9509      	str	r5, [sp, #36]	; 0x24
 80126f4:	46aa      	mov	sl, r5
 80126f6:	950d      	str	r5, [sp, #52]	; 0x34
 80126f8:	9507      	str	r5, [sp, #28]
 80126fa:	950a      	str	r5, [sp, #40]	; 0x28
 80126fc:	9502      	str	r5, [sp, #8]
 80126fe:	950b      	str	r5, [sp, #44]	; 0x2c
 8012700:	9503      	str	r5, [sp, #12]
 8012702:	950c      	str	r5, [sp, #48]	; 0x30
 8012704:	9504      	str	r5, [sp, #16]
 8012706:	9508      	str	r5, [sp, #32]
 8012708:	9505      	str	r5, [sp, #20]
 801270a:	2701      	movs	r7, #1
 801270c:	4681      	mov	r9, r0
 801270e:	e02b      	b.n	8012768 <MEMS_updateMagBufferIndex.constprop.24+0xec>
 8012710:	9b05      	ldr	r3, [sp, #20]
 8012712:	3c20      	subs	r4, #32
 8012714:	fa07 f404 	lsl.w	r4, r7, r4
 8012718:	ea24 0403 	bic.w	r4, r4, r3
 801271c:	4063      	eors	r3, r4
 801271e:	9305      	str	r3, [sp, #20]
 8012720:	f1bb 0f1f 	cmp.w	fp, #31
 8012724:	f04f 0301 	mov.w	r3, #1
 8012728:	9308      	str	r3, [sp, #32]
 801272a:	f240 8091 	bls.w	8012850 <MEMS_updateMagBufferIndex.constprop.24+0x1d4>
 801272e:	9a03      	ldr	r2, [sp, #12]
 8012730:	f1ab 0320 	sub.w	r3, fp, #32
 8012734:	fa07 f303 	lsl.w	r3, r7, r3
 8012738:	ea23 0302 	bic.w	r3, r3, r2
 801273c:	4053      	eors	r3, r2
 801273e:	9303      	str	r3, [sp, #12]
 8012740:	291f      	cmp	r1, #31
 8012742:	f04f 0301 	mov.w	r3, #1
 8012746:	930b      	str	r3, [sp, #44]	; 0x2c
 8012748:	f200 808f 	bhi.w	801286a <MEMS_updateMagBufferIndex.constprop.24+0x1ee>
 801274c:	2301      	movs	r3, #1
 801274e:	3501      	adds	r5, #1
 8012750:	9a06      	ldr	r2, [sp, #24]
 8012752:	9309      	str	r3, [sp, #36]	; 0x24
 8012754:	fa07 f101 	lsl.w	r1, r7, r1
 8012758:	b2eb      	uxtb	r3, r5
 801275a:	ea21 010a 	bic.w	r1, r1, sl
 801275e:	429a      	cmp	r2, r3
 8012760:	ea8a 0a01 	eor.w	sl, sl, r1
 8012764:	f240 8091 	bls.w	801288a <MEMS_updateMagBufferIndex.constprop.24+0x20e>
 8012768:	9b01      	ldr	r3, [sp, #4]
 801276a:	1959      	adds	r1, r3, r5
 801276c:	fb91 f3f8 	sdiv	r3, r1, r8
 8012770:	fb08 1313 	mls	r3, r8, r3, r1
 8012774:	b2db      	uxtb	r3, r3
 8012776:	f103 0b04 	add.w	fp, r3, #4
 801277a:	eb06 01cb 	add.w	r1, r6, fp, lsl #3
 801277e:	f9b1 0502 	ldrsh.w	r0, [r1, #1282]	; 0x502
 8012782:	fb90 f1f9 	sdiv	r1, r0, r9
 8012786:	fb09 0111 	mls	r1, r9, r1, r0
 801278a:	2900      	cmp	r1, #0
 801278c:	bfb8      	it	lt
 801278e:	4449      	addlt	r1, r9
 8012790:	b20b      	sxth	r3, r1
 8012792:	ee07 3a90 	vmov	s15, r3
 8012796:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801279a:	ee67 7a88 	vmul.f32	s15, s15, s16
 801279e:	ee17 0a90 	vmov	r0, s15
 80127a2:	f00e fc1b 	bl	8020fdc <roundf>
 80127a6:	eb06 01cb 	add.w	r1, r6, fp, lsl #3
 80127aa:	ee07 0a90 	vmov	s15, r0
 80127ae:	f9b1 0504 	ldrsh.w	r0, [r1, #1284]	; 0x504
 80127b2:	fb90 f1f9 	sdiv	r1, r0, r9
 80127b6:	fb09 0111 	mls	r1, r9, r1, r0
 80127ba:	2900      	cmp	r1, #0
 80127bc:	bfb8      	it	lt
 80127be:	4449      	addlt	r1, r9
 80127c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80127c4:	b20b      	sxth	r3, r1
 80127c6:	edcd 7a00 	vstr	s15, [sp]
 80127ca:	ee07 3a90 	vmov	s15, r3
 80127ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80127d2:	f89d 4000 	ldrb.w	r4, [sp]
 80127d6:	ee67 7a88 	vmul.f32	s15, s15, s16
 80127da:	ee17 0a90 	vmov	r0, s15
 80127de:	f00e fbfd 	bl	8020fdc <roundf>
 80127e2:	eb06 03cb 	add.w	r3, r6, fp, lsl #3
 80127e6:	ee07 0a90 	vmov	s15, r0
 80127ea:	f9b3 3506 	ldrsh.w	r3, [r3, #1286]	; 0x506
 80127ee:	fb93 f1f9 	sdiv	r1, r3, r9
 80127f2:	fb09 3111 	mls	r1, r9, r1, r3
 80127f6:	2900      	cmp	r1, #0
 80127f8:	bfb8      	it	lt
 80127fa:	4449      	addlt	r1, r9
 80127fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012800:	b20b      	sxth	r3, r1
 8012802:	edcd 7a00 	vstr	s15, [sp]
 8012806:	ee07 3a90 	vmov	s15, r3
 801280a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801280e:	f89d b000 	ldrb.w	fp, [sp]
 8012812:	ee67 7a88 	vmul.f32	s15, s15, s16
 8012816:	ee17 0a90 	vmov	r0, s15
 801281a:	f00e fbdf 	bl	8020fdc <roundf>
 801281e:	ee07 0a90 	vmov	s15, r0
 8012822:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012826:	2c1f      	cmp	r4, #31
 8012828:	edcd 7a00 	vstr	s15, [sp]
 801282c:	f89d 1000 	ldrb.w	r1, [sp]
 8012830:	f63f af6e 	bhi.w	8012710 <MEMS_updateMagBufferIndex.constprop.24+0x94>
 8012834:	9b04      	ldr	r3, [sp, #16]
 8012836:	fa07 f404 	lsl.w	r4, r7, r4
 801283a:	ea24 0403 	bic.w	r4, r4, r3
 801283e:	4063      	eors	r3, r4
 8012840:	9304      	str	r3, [sp, #16]
 8012842:	f1bb 0f1f 	cmp.w	fp, #31
 8012846:	f04f 0301 	mov.w	r3, #1
 801284a:	930c      	str	r3, [sp, #48]	; 0x30
 801284c:	f63f af6f 	bhi.w	801272e <MEMS_updateMagBufferIndex.constprop.24+0xb2>
 8012850:	9a02      	ldr	r2, [sp, #8]
 8012852:	fa07 f30b 	lsl.w	r3, r7, fp
 8012856:	ea23 0302 	bic.w	r3, r3, r2
 801285a:	4053      	eors	r3, r2
 801285c:	9302      	str	r3, [sp, #8]
 801285e:	291f      	cmp	r1, #31
 8012860:	f04f 0301 	mov.w	r3, #1
 8012864:	930a      	str	r3, [sp, #40]	; 0x28
 8012866:	f67f af71 	bls.w	801274c <MEMS_updateMagBufferIndex.constprop.24+0xd0>
 801286a:	9b07      	ldr	r3, [sp, #28]
 801286c:	9a06      	ldr	r2, [sp, #24]
 801286e:	3920      	subs	r1, #32
 8012870:	fa07 f101 	lsl.w	r1, r7, r1
 8012874:	ea21 0103 	bic.w	r1, r1, r3
 8012878:	404b      	eors	r3, r1
 801287a:	9307      	str	r3, [sp, #28]
 801287c:	3501      	adds	r5, #1
 801287e:	2301      	movs	r3, #1
 8012880:	930d      	str	r3, [sp, #52]	; 0x34
 8012882:	b2eb      	uxtb	r3, r5
 8012884:	429a      	cmp	r2, r3
 8012886:	f63f af6f 	bhi.w	8012768 <MEMS_updateMagBufferIndex.constprop.24+0xec>
 801288a:	9b08      	ldr	r3, [sp, #32]
 801288c:	4652      	mov	r2, sl
 801288e:	bb2b      	cbnz	r3, 80128dc <MEMS_updateMagBufferIndex.constprop.24+0x260>
 8012890:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012892:	b113      	cbz	r3, 801289a <MEMS_updateMagBufferIndex.constprop.24+0x21e>
 8012894:	9b04      	ldr	r3, [sp, #16]
 8012896:	f8c6 350c 	str.w	r3, [r6, #1292]	; 0x50c
 801289a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801289c:	b113      	cbz	r3, 80128a4 <MEMS_updateMagBufferIndex.constprop.24+0x228>
 801289e:	9b03      	ldr	r3, [sp, #12]
 80128a0:	f8c6 3510 	str.w	r3, [r6, #1296]	; 0x510
 80128a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80128a6:	b113      	cbz	r3, 80128ae <MEMS_updateMagBufferIndex.constprop.24+0x232>
 80128a8:	9b02      	ldr	r3, [sp, #8]
 80128aa:	f8c6 3514 	str.w	r3, [r6, #1300]	; 0x514
 80128ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80128b0:	b113      	cbz	r3, 80128b8 <MEMS_updateMagBufferIndex.constprop.24+0x23c>
 80128b2:	9b07      	ldr	r3, [sp, #28]
 80128b4:	f8c6 351c 	str.w	r3, [r6, #1308]	; 0x51c
 80128b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	f43f af0d 	beq.w	80126da <MEMS_updateMagBufferIndex.constprop.24+0x5e>
 80128c0:	f8c6 2518 	str.w	r2, [r6, #1304]	; 0x518
 80128c4:	e709      	b.n	80126da <MEMS_updateMagBufferIndex.constprop.24+0x5e>
 80128c6:	4441      	add	r1, r8
 80128c8:	b20b      	sxth	r3, r1
 80128ca:	9301      	str	r3, [sp, #4]
 80128cc:	e6ff      	b.n	80126ce <MEMS_updateMagBufferIndex.constprop.24+0x52>
 80128ce:	fb91 f3f9 	sdiv	r3, r1, r9
 80128d2:	fb09 1113 	mls	r1, r9, r3, r1
 80128d6:	b20b      	sxth	r3, r1
 80128d8:	9301      	str	r3, [sp, #4]
 80128da:	e6f8      	b.n	80126ce <MEMS_updateMagBufferIndex.constprop.24+0x52>
 80128dc:	9b05      	ldr	r3, [sp, #20]
 80128de:	f8c6 3508 	str.w	r3, [r6, #1288]	; 0x508
 80128e2:	e7d5      	b.n	8012890 <MEMS_updateMagBufferIndex.constprop.24+0x214>
 80128e4:	20004b40 	.word	0x20004b40

080128e8 <iNemo_quat2heading>:
 80128e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80128ec:	4ddc      	ldr	r5, [pc, #880]	; (8012c60 <iNemo_quat2heading+0x378>)
 80128ee:	ed2d 8b0a 	vpush	{d8-d12}
 80128f2:	ed92 ba01 	vldr	s22, [r2, #4]
 80128f6:	edd2 aa00 	vldr	s21, [r2]
 80128fa:	ed92 aa02 	vldr	s20, [r2, #8]
 80128fe:	edd0 ba01 	vldr	s23, [r0, #4]
 8012902:	ed90 ca00 	vldr	s24, [r0]
 8012906:	edd0 ca02 	vldr	s25, [r0, #8]
 801290a:	ed90 9a03 	vldr	s18, [r0, #12]
 801290e:	f8d5 4820 	ldr.w	r4, [r5, #2080]	; 0x820
 8012912:	468a      	mov	sl, r1
 8012914:	eeb0 8acb 	vabs.f32	s16, s22
 8012918:	eef0 8aea 	vabs.f32	s17, s21
 801291c:	eef0 9aca 	vabs.f32	s19, s20
 8012920:	2b00      	cmp	r3, #0
 8012922:	d145      	bne.n	80129b0 <iNemo_quat2heading+0xc8>
 8012924:	ee18 0a10 	vmov	r0, s16
 8012928:	f7ed fd8e 	bl	8000448 <__aeabi_f2d>
 801292c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8012930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012934:	4606      	mov	r6, r0
 8012936:	460f      	mov	r7, r1
 8012938:	f140 80f6 	bpl.w	8012b28 <iNemo_quat2heading+0x240>
 801293c:	eef4 8ae9 	vcmpe.f32	s17, s19
 8012940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012944:	f340 80f0 	ble.w	8012b28 <iNemo_quat2heading+0x240>
 8012948:	ee18 0a90 	vmov	r0, s17
 801294c:	f7ed fd7c 	bl	8000448 <__aeabi_f2d>
 8012950:	a3bf      	add	r3, pc, #764	; (adr r3, 8012c50 <iNemo_quat2heading+0x368>)
 8012952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012956:	4680      	mov	r8, r0
 8012958:	4689      	mov	r9, r1
 801295a:	4630      	mov	r0, r6
 801295c:	4639      	mov	r1, r7
 801295e:	f7ed fdcb 	bl	80004f8 <__aeabi_dmul>
 8012962:	eef5 aac0 	vcmpe.f32	s21, #0.0
 8012966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801296a:	4602      	mov	r2, r0
 801296c:	460b      	mov	r3, r1
 801296e:	4640      	mov	r0, r8
 8012970:	4649      	mov	r1, r9
 8012972:	f340 820a 	ble.w	8012d8a <iNemo_quat2heading+0x4a2>
 8012976:	f7ee f84f 	bl	8000a18 <__aeabi_dcmpgt>
 801297a:	b170      	cbz	r0, 801299a <iNemo_quat2heading+0xb2>
 801297c:	ee19 0a90 	vmov	r0, s19
 8012980:	f7ed fd62 	bl	8000448 <__aeabi_f2d>
 8012984:	a3b2      	add	r3, pc, #712	; (adr r3, 8012c50 <iNemo_quat2heading+0x368>)
 8012986:	e9d3 2300 	ldrd	r2, r3, [r3]
 801298a:	f7ed fdb5 	bl	80004f8 <__aeabi_dmul>
 801298e:	4642      	mov	r2, r8
 8012990:	464b      	mov	r3, r9
 8012992:	f7ee f823 	bl	80009dc <__aeabi_dcmplt>
 8012996:	2800      	cmp	r0, #0
 8012998:	d148      	bne.n	8012a2c <iNemo_quat2heading+0x144>
 801299a:	2c05      	cmp	r4, #5
 801299c:	f200 8224 	bhi.w	8012de8 <iNemo_quat2heading+0x500>
 80129a0:	e8df f014 	tbh	[pc, r4, lsl #1]
 80129a4:	00980120 	.word	0x00980120
 80129a8:	017e0047 	.word	0x017e0047
 80129ac:	01200047 	.word	0x01200047
 80129b0:	ee18 0a90 	vmov	r0, s17
 80129b4:	f7ed fd48 	bl	8000448 <__aeabi_f2d>
 80129b8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80129bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129c0:	eef1 ca6c 	vneg.f32	s25, s25
 80129c4:	4606      	mov	r6, r0
 80129c6:	460f      	mov	r7, r1
 80129c8:	dd4f      	ble.n	8012a6a <iNemo_quat2heading+0x182>
 80129ca:	eeb4 8ae9 	vcmpe.f32	s16, s19
 80129ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129d2:	dd4a      	ble.n	8012a6a <iNemo_quat2heading+0x182>
 80129d4:	ee18 0a10 	vmov	r0, s16
 80129d8:	f7ed fd36 	bl	8000448 <__aeabi_f2d>
 80129dc:	a39c      	add	r3, pc, #624	; (adr r3, 8012c50 <iNemo_quat2heading+0x368>)
 80129de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129e2:	4680      	mov	r8, r0
 80129e4:	4689      	mov	r9, r1
 80129e6:	4630      	mov	r0, r6
 80129e8:	4639      	mov	r1, r7
 80129ea:	f7ed fd85 	bl	80004f8 <__aeabi_dmul>
 80129ee:	eeb5 bac0 	vcmpe.f32	s22, #0.0
 80129f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129f6:	4602      	mov	r2, r0
 80129f8:	460b      	mov	r3, r1
 80129fa:	4640      	mov	r0, r8
 80129fc:	4649      	mov	r1, r9
 80129fe:	f340 81dd 	ble.w	8012dbc <iNemo_quat2heading+0x4d4>
 8012a02:	f7ee f809 	bl	8000a18 <__aeabi_dcmpgt>
 8012a06:	2800      	cmp	r0, #0
 8012a08:	f000 8119 	beq.w	8012c3e <iNemo_quat2heading+0x356>
 8012a0c:	ee19 0a90 	vmov	r0, s19
 8012a10:	f7ed fd1a 	bl	8000448 <__aeabi_f2d>
 8012a14:	a38e      	add	r3, pc, #568	; (adr r3, 8012c50 <iNemo_quat2heading+0x368>)
 8012a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a1a:	f7ed fd6d 	bl	80004f8 <__aeabi_dmul>
 8012a1e:	4642      	mov	r2, r8
 8012a20:	464b      	mov	r3, r9
 8012a22:	f7ed ffdb 	bl	80009dc <__aeabi_dcmplt>
 8012a26:	2800      	cmp	r0, #0
 8012a28:	f000 8109 	beq.w	8012c3e <iNemo_quat2heading+0x356>
 8012a2c:	2304      	movs	r3, #4
 8012a2e:	f8c5 3820 	str.w	r3, [r5, #2080]	; 0x820
 8012a32:	ed9a 0a00 	vldr	s0, [sl]
 8012a36:	eddf 7a8b 	vldr	s15, [pc, #556]	; 8012c64 <iNemo_quat2heading+0x37c>
 8012a3a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012a3e:	eddf 7a8a 	vldr	s15, [pc, #552]	; 8012c68 <iNemo_quat2heading+0x380>
 8012a42:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a4a:	bfa8      	it	ge
 8012a4c:	ee30 0a67 	vsubge.f32	s0, s0, s15
 8012a50:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8012a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a58:	d503      	bpl.n	8012a62 <iNemo_quat2heading+0x17a>
 8012a5a:	eddf 7a83 	vldr	s15, [pc, #524]	; 8012c68 <iNemo_quat2heading+0x380>
 8012a5e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012a62:	ecbd 8b0a 	vpop	{d8-d12}
 8012a66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a6a:	eef4 8ae9 	vcmpe.f32	s17, s19
 8012a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a72:	f340 80ba 	ble.w	8012bea <iNemo_quat2heading+0x302>
 8012a76:	ee18 0a10 	vmov	r0, s16
 8012a7a:	f7ed fce5 	bl	8000448 <__aeabi_f2d>
 8012a7e:	a374      	add	r3, pc, #464	; (adr r3, 8012c50 <iNemo_quat2heading+0x368>)
 8012a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a84:	f7ed fd38 	bl	80004f8 <__aeabi_dmul>
 8012a88:	eef5 aac0 	vcmpe.f32	s21, #0.0
 8012a8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a90:	4632      	mov	r2, r6
 8012a92:	463b      	mov	r3, r7
 8012a94:	f340 8145 	ble.w	8012d22 <iNemo_quat2heading+0x43a>
 8012a98:	f7ed ffa0 	bl	80009dc <__aeabi_dcmplt>
 8012a9c:	2800      	cmp	r0, #0
 8012a9e:	f000 80ce 	beq.w	8012c3e <iNemo_quat2heading+0x356>
 8012aa2:	ee19 0a90 	vmov	r0, s19
 8012aa6:	f7ed fccf 	bl	8000448 <__aeabi_f2d>
 8012aaa:	a369      	add	r3, pc, #420	; (adr r3, 8012c50 <iNemo_quat2heading+0x368>)
 8012aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ab0:	f7ed fd22 	bl	80004f8 <__aeabi_dmul>
 8012ab4:	4632      	mov	r2, r6
 8012ab6:	463b      	mov	r3, r7
 8012ab8:	f7ed ff90 	bl	80009dc <__aeabi_dcmplt>
 8012abc:	2800      	cmp	r0, #0
 8012abe:	f000 80be 	beq.w	8012c3e <iNemo_quat2heading+0x356>
 8012ac2:	eef0 7a6b 	vmov.f32	s15, s23
 8012ac6:	2301      	movs	r3, #1
 8012ac8:	eef0 ba4c 	vmov.f32	s23, s24
 8012acc:	f8c5 3820 	str.w	r3, [r5, #2080]	; 0x820
 8012ad0:	eeb0 ca67 	vmov.f32	s24, s15
 8012ad4:	ee6b 7aeb 	vnmul.f32	s15, s23, s23
 8012ad8:	eeec 7a0c 	vfma.f32	s15, s24, s24
 8012adc:	eeec 7aec 	vfms.f32	s15, s25, s25
 8012ae0:	eee9 7a09 	vfma.f32	s15, s18, s18
 8012ae4:	ee2c 9a89 	vmul.f32	s18, s25, s18
 8012ae8:	ee17 0a90 	vmov	r0, s15
 8012aec:	eeab 9a8c 	vfma.f32	s18, s23, s24
 8012af0:	f7ed fcaa 	bl	8000448 <__aeabi_f2d>
 8012af4:	ee79 7a09 	vadd.f32	s15, s18, s18
 8012af8:	4604      	mov	r4, r0
 8012afa:	460d      	mov	r5, r1
 8012afc:	ee17 0a90 	vmov	r0, s15
 8012b00:	f7ed fca2 	bl	8000448 <__aeabi_f2d>
 8012b04:	4622      	mov	r2, r4
 8012b06:	462b      	mov	r3, r5
 8012b08:	f00e fb44 	bl	8021194 <atan2>
 8012b0c:	a352      	add	r3, pc, #328	; (adr r3, 8012c58 <iNemo_quat2heading+0x370>)
 8012b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b12:	f7ed fcf1 	bl	80004f8 <__aeabi_dmul>
 8012b16:	2200      	movs	r2, #0
 8012b18:	4b54      	ldr	r3, [pc, #336]	; (8012c6c <iNemo_quat2heading+0x384>)
 8012b1a:	f7ed fb35 	bl	8000188 <__aeabi_dsub>
 8012b1e:	f7ed ffe3 	bl	8000ae8 <__aeabi_d2f>
 8012b22:	ee00 0a10 	vmov	s0, r0
 8012b26:	e78a      	b.n	8012a3e <iNemo_quat2heading+0x156>
 8012b28:	eeb4 8ae9 	vcmpe.f32	s16, s19
 8012b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b30:	dd29      	ble.n	8012b86 <iNemo_quat2heading+0x29e>
 8012b32:	ee18 0a90 	vmov	r0, s17
 8012b36:	f7ed fc87 	bl	8000448 <__aeabi_f2d>
 8012b3a:	a345      	add	r3, pc, #276	; (adr r3, 8012c50 <iNemo_quat2heading+0x368>)
 8012b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b40:	f7ed fcda 	bl	80004f8 <__aeabi_dmul>
 8012b44:	eeb5 bac0 	vcmpe.f32	s22, #0.0
 8012b48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b4c:	4632      	mov	r2, r6
 8012b4e:	463b      	mov	r3, r7
 8012b50:	f340 808e 	ble.w	8012c70 <iNemo_quat2heading+0x388>
 8012b54:	f7ed ff42 	bl	80009dc <__aeabi_dcmplt>
 8012b58:	2800      	cmp	r0, #0
 8012b5a:	f43f af1e 	beq.w	801299a <iNemo_quat2heading+0xb2>
 8012b5e:	ee19 0a90 	vmov	r0, s19
 8012b62:	f7ed fc71 	bl	8000448 <__aeabi_f2d>
 8012b66:	a33a      	add	r3, pc, #232	; (adr r3, 8012c50 <iNemo_quat2heading+0x368>)
 8012b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b6c:	f7ed fcc4 	bl	80004f8 <__aeabi_dmul>
 8012b70:	4632      	mov	r2, r6
 8012b72:	463b      	mov	r3, r7
 8012b74:	f7ed ff32 	bl	80009dc <__aeabi_dcmplt>
 8012b78:	2800      	cmp	r0, #0
 8012b7a:	f43f af0e 	beq.w	801299a <iNemo_quat2heading+0xb2>
 8012b7e:	2301      	movs	r3, #1
 8012b80:	f8c5 3820 	str.w	r3, [r5, #2080]	; 0x820
 8012b84:	e7a6      	b.n	8012ad4 <iNemo_quat2heading+0x1ec>
 8012b86:	ee19 0a90 	vmov	r0, s19
 8012b8a:	f7ed fc5d 	bl	8000448 <__aeabi_f2d>
 8012b8e:	a330      	add	r3, pc, #192	; (adr r3, 8012c50 <iNemo_quat2heading+0x368>)
 8012b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b94:	4680      	mov	r8, r0
 8012b96:	4689      	mov	r9, r1
 8012b98:	4630      	mov	r0, r6
 8012b9a:	4639      	mov	r1, r7
 8012b9c:	f7ed fcac 	bl	80004f8 <__aeabi_dmul>
 8012ba0:	eeb5 aac0 	vcmpe.f32	s20, #0.0
 8012ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ba8:	4602      	mov	r2, r0
 8012baa:	460b      	mov	r3, r1
 8012bac:	4640      	mov	r0, r8
 8012bae:	4649      	mov	r1, r9
 8012bb0:	f340 80d5 	ble.w	8012d5e <iNemo_quat2heading+0x476>
 8012bb4:	f7ed ff30 	bl	8000a18 <__aeabi_dcmpgt>
 8012bb8:	2800      	cmp	r0, #0
 8012bba:	f43f aeee 	beq.w	801299a <iNemo_quat2heading+0xb2>
 8012bbe:	ee18 0a90 	vmov	r0, s17
 8012bc2:	f7ed fc41 	bl	8000448 <__aeabi_f2d>
 8012bc6:	a322      	add	r3, pc, #136	; (adr r3, 8012c50 <iNemo_quat2heading+0x368>)
 8012bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bcc:	f7ed fc94 	bl	80004f8 <__aeabi_dmul>
 8012bd0:	4642      	mov	r2, r8
 8012bd2:	464b      	mov	r3, r9
 8012bd4:	f7ed ff02 	bl	80009dc <__aeabi_dcmplt>
 8012bd8:	2800      	cmp	r0, #0
 8012bda:	f43f aede 	beq.w	801299a <iNemo_quat2heading+0xb2>
 8012bde:	2300      	movs	r3, #0
 8012be0:	f8c5 3820 	str.w	r3, [r5, #2080]	; 0x820
 8012be4:	ed9a 0a00 	vldr	s0, [sl]
 8012be8:	e729      	b.n	8012a3e <iNemo_quat2heading+0x156>
 8012bea:	a319      	add	r3, pc, #100	; (adr r3, 8012c50 <iNemo_quat2heading+0x368>)
 8012bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bf0:	4630      	mov	r0, r6
 8012bf2:	4639      	mov	r1, r7
 8012bf4:	f7ed fc80 	bl	80004f8 <__aeabi_dmul>
 8012bf8:	4680      	mov	r8, r0
 8012bfa:	ee19 0a90 	vmov	r0, s19
 8012bfe:	4689      	mov	r9, r1
 8012c00:	f7ed fc22 	bl	8000448 <__aeabi_f2d>
 8012c04:	eeb5 aac0 	vcmpe.f32	s20, #0.0
 8012c08:	4606      	mov	r6, r0
 8012c0a:	460f      	mov	r7, r1
 8012c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c10:	4640      	mov	r0, r8
 8012c12:	4649      	mov	r1, r9
 8012c14:	4632      	mov	r2, r6
 8012c16:	463b      	mov	r3, r7
 8012c18:	d56c      	bpl.n	8012cf4 <iNemo_quat2heading+0x40c>
 8012c1a:	f7ed fedf 	bl	80009dc <__aeabi_dcmplt>
 8012c1e:	b170      	cbz	r0, 8012c3e <iNemo_quat2heading+0x356>
 8012c20:	ee18 0a10 	vmov	r0, s16
 8012c24:	f7ed fc10 	bl	8000448 <__aeabi_f2d>
 8012c28:	a309      	add	r3, pc, #36	; (adr r3, 8012c50 <iNemo_quat2heading+0x368>)
 8012c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c2e:	f7ed fc63 	bl	80004f8 <__aeabi_dmul>
 8012c32:	4632      	mov	r2, r6
 8012c34:	463b      	mov	r3, r7
 8012c36:	f7ed fed1 	bl	80009dc <__aeabi_dcmplt>
 8012c3a:	2800      	cmp	r0, #0
 8012c3c:	d1cf      	bne.n	8012bde <iNemo_quat2heading+0x2f6>
 8012c3e:	eef0 7a4c 	vmov.f32	s15, s24
 8012c42:	eeb0 ca6b 	vmov.f32	s24, s23
 8012c46:	eef0 ba67 	vmov.f32	s23, s15
 8012c4a:	e6a6      	b.n	801299a <iNemo_quat2heading+0xb2>
 8012c4c:	f3af 8000 	nop.w
 8012c50:	e0000000 	.word	0xe0000000
 8012c54:	3ff6b851 	.word	0x3ff6b851
 8012c58:	20000000 	.word	0x20000000
 8012c5c:	404ca5dc 	.word	0x404ca5dc
 8012c60:	20004b40 	.word	0x20004b40
 8012c64:	43340000 	.word	0x43340000
 8012c68:	43b40000 	.word	0x43b40000
 8012c6c:	40568000 	.word	0x40568000
 8012c70:	f7ed feb4 	bl	80009dc <__aeabi_dcmplt>
 8012c74:	2800      	cmp	r0, #0
 8012c76:	f43f ae90 	beq.w	801299a <iNemo_quat2heading+0xb2>
 8012c7a:	ee19 0a90 	vmov	r0, s19
 8012c7e:	f7ed fbe3 	bl	8000448 <__aeabi_f2d>
 8012c82:	a35b      	add	r3, pc, #364	; (adr r3, 8012df0 <iNemo_quat2heading+0x508>)
 8012c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c88:	f7ed fc36 	bl	80004f8 <__aeabi_dmul>
 8012c8c:	4632      	mov	r2, r6
 8012c8e:	463b      	mov	r3, r7
 8012c90:	f7ed fea4 	bl	80009dc <__aeabi_dcmplt>
 8012c94:	2800      	cmp	r0, #0
 8012c96:	f43f ae80 	beq.w	801299a <iNemo_quat2heading+0xb2>
 8012c9a:	2303      	movs	r3, #3
 8012c9c:	f8c5 3820 	str.w	r3, [r5, #2080]	; 0x820
 8012ca0:	ee6b 7aeb 	vnmul.f32	s15, s23, s23
 8012ca4:	eeec 7a0c 	vfma.f32	s15, s24, s24
 8012ca8:	eeec 7aec 	vfms.f32	s15, s25, s25
 8012cac:	eee9 7a09 	vfma.f32	s15, s18, s18
 8012cb0:	ee2c 9a89 	vmul.f32	s18, s25, s18
 8012cb4:	ee17 0a90 	vmov	r0, s15
 8012cb8:	eeab 9a8c 	vfma.f32	s18, s23, s24
 8012cbc:	f7ed fbc4 	bl	8000448 <__aeabi_f2d>
 8012cc0:	ee79 7a09 	vadd.f32	s15, s18, s18
 8012cc4:	4604      	mov	r4, r0
 8012cc6:	460d      	mov	r5, r1
 8012cc8:	ee17 0a90 	vmov	r0, s15
 8012ccc:	f7ed fbbc 	bl	8000448 <__aeabi_f2d>
 8012cd0:	4622      	mov	r2, r4
 8012cd2:	462b      	mov	r3, r5
 8012cd4:	f00e fa5e 	bl	8021194 <atan2>
 8012cd8:	a349      	add	r3, pc, #292	; (adr r3, 8012e00 <iNemo_quat2heading+0x518>)
 8012cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cde:	f7ed fc0b 	bl	80004f8 <__aeabi_dmul>
 8012ce2:	2200      	movs	r2, #0
 8012ce4:	4b44      	ldr	r3, [pc, #272]	; (8012df8 <iNemo_quat2heading+0x510>)
 8012ce6:	f7ed fa51 	bl	800018c <__adddf3>
 8012cea:	f7ed fefd 	bl	8000ae8 <__aeabi_d2f>
 8012cee:	ee00 0a10 	vmov	s0, r0
 8012cf2:	e6a4      	b.n	8012a3e <iNemo_quat2heading+0x156>
 8012cf4:	f7ed fe72 	bl	80009dc <__aeabi_dcmplt>
 8012cf8:	2800      	cmp	r0, #0
 8012cfa:	d0a0      	beq.n	8012c3e <iNemo_quat2heading+0x356>
 8012cfc:	ee18 0a10 	vmov	r0, s16
 8012d00:	f7ed fba2 	bl	8000448 <__aeabi_f2d>
 8012d04:	a33a      	add	r3, pc, #232	; (adr r3, 8012df0 <iNemo_quat2heading+0x508>)
 8012d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d0a:	f7ed fbf5 	bl	80004f8 <__aeabi_dmul>
 8012d0e:	4632      	mov	r2, r6
 8012d10:	463b      	mov	r3, r7
 8012d12:	f7ed fe63 	bl	80009dc <__aeabi_dcmplt>
 8012d16:	2800      	cmp	r0, #0
 8012d18:	d091      	beq.n	8012c3e <iNemo_quat2heading+0x356>
 8012d1a:	2302      	movs	r3, #2
 8012d1c:	f8c5 3820 	str.w	r3, [r5, #2080]	; 0x820
 8012d20:	e687      	b.n	8012a32 <iNemo_quat2heading+0x14a>
 8012d22:	f7ed fe5b 	bl	80009dc <__aeabi_dcmplt>
 8012d26:	2800      	cmp	r0, #0
 8012d28:	d089      	beq.n	8012c3e <iNemo_quat2heading+0x356>
 8012d2a:	ee19 0a90 	vmov	r0, s19
 8012d2e:	f7ed fb8b 	bl	8000448 <__aeabi_f2d>
 8012d32:	a32f      	add	r3, pc, #188	; (adr r3, 8012df0 <iNemo_quat2heading+0x508>)
 8012d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d38:	f7ed fbde 	bl	80004f8 <__aeabi_dmul>
 8012d3c:	4632      	mov	r2, r6
 8012d3e:	463b      	mov	r3, r7
 8012d40:	f7ed fe4c 	bl	80009dc <__aeabi_dcmplt>
 8012d44:	2800      	cmp	r0, #0
 8012d46:	f43f af7a 	beq.w	8012c3e <iNemo_quat2heading+0x356>
 8012d4a:	eef0 7a6b 	vmov.f32	s15, s23
 8012d4e:	2303      	movs	r3, #3
 8012d50:	eef0 ba4c 	vmov.f32	s23, s24
 8012d54:	f8c5 3820 	str.w	r3, [r5, #2080]	; 0x820
 8012d58:	eeb0 ca67 	vmov.f32	s24, s15
 8012d5c:	e7a0      	b.n	8012ca0 <iNemo_quat2heading+0x3b8>
 8012d5e:	f7ed fe5b 	bl	8000a18 <__aeabi_dcmpgt>
 8012d62:	2800      	cmp	r0, #0
 8012d64:	f43f ae19 	beq.w	801299a <iNemo_quat2heading+0xb2>
 8012d68:	ee18 0a90 	vmov	r0, s17
 8012d6c:	f7ed fb6c 	bl	8000448 <__aeabi_f2d>
 8012d70:	a31f      	add	r3, pc, #124	; (adr r3, 8012df0 <iNemo_quat2heading+0x508>)
 8012d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d76:	f7ed fbbf 	bl	80004f8 <__aeabi_dmul>
 8012d7a:	4642      	mov	r2, r8
 8012d7c:	464b      	mov	r3, r9
 8012d7e:	f7ed fe2d 	bl	80009dc <__aeabi_dcmplt>
 8012d82:	2800      	cmp	r0, #0
 8012d84:	f43f ae09 	beq.w	801299a <iNemo_quat2heading+0xb2>
 8012d88:	e7c7      	b.n	8012d1a <iNemo_quat2heading+0x432>
 8012d8a:	f7ed fe45 	bl	8000a18 <__aeabi_dcmpgt>
 8012d8e:	2800      	cmp	r0, #0
 8012d90:	f43f ae03 	beq.w	801299a <iNemo_quat2heading+0xb2>
 8012d94:	ee19 0a90 	vmov	r0, s19
 8012d98:	f7ed fb56 	bl	8000448 <__aeabi_f2d>
 8012d9c:	a314      	add	r3, pc, #80	; (adr r3, 8012df0 <iNemo_quat2heading+0x508>)
 8012d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012da2:	f7ed fba9 	bl	80004f8 <__aeabi_dmul>
 8012da6:	4642      	mov	r2, r8
 8012da8:	464b      	mov	r3, r9
 8012daa:	f7ed fe17 	bl	80009dc <__aeabi_dcmplt>
 8012dae:	2800      	cmp	r0, #0
 8012db0:	f43f adf3 	beq.w	801299a <iNemo_quat2heading+0xb2>
 8012db4:	2305      	movs	r3, #5
 8012db6:	f8c5 3820 	str.w	r3, [r5, #2080]	; 0x820
 8012dba:	e713      	b.n	8012be4 <iNemo_quat2heading+0x2fc>
 8012dbc:	f7ed fe2c 	bl	8000a18 <__aeabi_dcmpgt>
 8012dc0:	2800      	cmp	r0, #0
 8012dc2:	f43f af3c 	beq.w	8012c3e <iNemo_quat2heading+0x356>
 8012dc6:	ee19 0a90 	vmov	r0, s19
 8012dca:	f7ed fb3d 	bl	8000448 <__aeabi_f2d>
 8012dce:	a308      	add	r3, pc, #32	; (adr r3, 8012df0 <iNemo_quat2heading+0x508>)
 8012dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dd4:	f7ed fb90 	bl	80004f8 <__aeabi_dmul>
 8012dd8:	4642      	mov	r2, r8
 8012dda:	464b      	mov	r3, r9
 8012ddc:	f7ed fdfe 	bl	80009dc <__aeabi_dcmplt>
 8012de0:	2800      	cmp	r0, #0
 8012de2:	f43f af2c 	beq.w	8012c3e <iNemo_quat2heading+0x356>
 8012de6:	e7e5      	b.n	8012db4 <iNemo_quat2heading+0x4cc>
 8012de8:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8012dfc <iNemo_quat2heading+0x514>
 8012dec:	e639      	b.n	8012a62 <iNemo_quat2heading+0x17a>
 8012dee:	bf00      	nop
 8012df0:	e0000000 	.word	0xe0000000
 8012df4:	3ff6b851 	.word	0x3ff6b851
 8012df8:	40568000 	.word	0x40568000
 8012dfc:	00000000 	.word	0x00000000
 8012e00:	20000000 	.word	0x20000000
 8012e04:	404ca5dc 	.word	0x404ca5dc

08012e08 <output_update>:
 8012e08:	edd0 5a03 	vldr	s11, [r0, #12]
 8012e0c:	ed90 7a02 	vldr	s14, [r0, #8]
 8012e10:	edd0 4a01 	vldr	s9, [r0, #4]
 8012e14:	edd0 3a00 	vldr	s7, [r0]
 8012e18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012e1c:	ee65 7aa5 	vmul.f32	s15, s11, s11
 8012e20:	eeb1 5a64 	vneg.f32	s10, s9
 8012e24:	eee7 7a07 	vfma.f32	s15, s14, s14
 8012e28:	4682      	mov	sl, r0
 8012e2a:	460f      	mov	r7, r1
 8012e2c:	ee24 6a87 	vmul.f32	s12, s9, s14
 8012e30:	ee65 6ac5 	vnmul.f32	s13, s11, s10
 8012e34:	ed2d 8b0a 	vpush	{d8-d12}
 8012e38:	eeb1 4a63 	vneg.f32	s8, s7
 8012e3c:	eee3 6a87 	vfma.f32	s13, s7, s14
 8012e40:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 8012e44:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8012e46:	ed8a 4a00 	vstr	s8, [sl]
 8012e4a:	eee4 7a23 	vfma.f32	s15, s8, s7
 8012e4e:	4614      	mov	r4, r2
 8012e50:	461d      	mov	r5, r3
 8012e52:	eea4 6a25 	vfma.f32	s12, s8, s11
 8012e56:	eeb1 7a47 	vneg.f32	s14, s14
 8012e5a:	ed8a 7a02 	vstr	s14, [sl, #8]
 8012e5e:	ee36 6a06 	vadd.f32	s12, s12, s12
 8012e62:	ee76 6aa6 	vadd.f32	s13, s13, s13
 8012e66:	eee5 7a24 	vfma.f32	s15, s10, s9
 8012e6a:	ed8a 5a01 	vstr	s10, [sl, #4]
 8012e6e:	2800      	cmp	r0, #0
 8012e70:	d141      	bne.n	8012ef6 <output_update+0xee>
 8012e72:	edc3 6a00 	vstr	s13, [r3]
 8012e76:	edc3 7a02 	vstr	s15, [r3, #8]
 8012e7a:	ed83 6a01 	vstr	s12, [r3, #4]
 8012e7e:	ed9a 7a02 	vldr	s14, [sl, #8]
 8012e82:	edda 6a03 	vldr	s13, [sl, #12]
 8012e86:	edda 5a00 	vldr	s11, [sl]
 8012e8a:	ed9a 6a01 	vldr	s12, [sl, #4]
 8012e8e:	4bf2      	ldr	r3, [pc, #968]	; (8013258 <output_update+0x450>)
 8012e90:	ee67 7a26 	vmul.f32	s15, s14, s13
 8012e94:	ee65 baa5 	vmul.f32	s23, s11, s11
 8012e98:	eee5 7a86 	vfma.f32	s15, s11, s12
 8012e9c:	ee26 aa06 	vmul.f32	s20, s12, s12
 8012ea0:	ee67 9a07 	vmul.f32	s19, s14, s14
 8012ea4:	ee37 8aa7 	vadd.f32	s16, s15, s15
 8012ea8:	ee3b 7aca 	vsub.f32	s14, s23, s20
 8012eac:	edd3 aa00 	vldr	s21, [r3]
 8012eb0:	ee26 9aa6 	vmul.f32	s18, s13, s13
 8012eb4:	ee37 7a69 	vsub.f32	s14, s14, s19
 8012eb8:	eeb4 8a6a 	vcmp.f32	s16, s21
 8012ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ec0:	ee37 7a09 	vadd.f32	s14, s14, s18
 8012ec4:	d032      	beq.n	8012f2c <output_update+0x124>
 8012ec6:	edd3 7a01 	vldr	s15, [r3, #4]
 8012eca:	eeb4 8a67 	vcmp.f32	s16, s15
 8012ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ed2:	d02b      	beq.n	8012f2c <output_update+0x124>
 8012ed4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8012ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012edc:	f040 81a4 	bne.w	8013228 <output_update+0x420>
 8012ee0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8012ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ee8:	f340 81ef 	ble.w	80132ca <output_update+0x4c2>
 8012eec:	ed9f badb 	vldr	s22, [pc, #876]	; 801325c <output_update+0x454>
 8012ef0:	ed9f 7adb 	vldr	s14, [pc, #876]	; 8013260 <output_update+0x458>
 8012ef4:	e04c      	b.n	8012f90 <output_update+0x188>
 8012ef6:	2801      	cmp	r0, #1
 8012ef8:	f000 8099 	beq.w	801302e <output_update+0x226>
 8012efc:	ecbd 8b0a 	vpop	{d8-d12}
 8012f00:	ed9f 6ae2 	vldr	s12, [pc, #904]	; 801328c <output_update+0x484>
 8012f04:	edd2 6a00 	vldr	s13, [r2]
 8012f08:	ed92 7a01 	vldr	s14, [r2, #4]
 8012f0c:	edd2 7a02 	vldr	s15, [r2, #8]
 8012f10:	ee66 6a86 	vmul.f32	s13, s13, s12
 8012f14:	ee27 7a06 	vmul.f32	s14, s14, s12
 8012f18:	ee67 7a86 	vmul.f32	s15, s15, s12
 8012f1c:	edc2 6a00 	vstr	s13, [r2]
 8012f20:	ed82 7a01 	vstr	s14, [r2, #4]
 8012f24:	edc2 7a02 	vstr	s15, [r2, #8]
 8012f28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f2c:	eeb4 7a6a 	vcmp.f32	s14, s21
 8012f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f34:	f040 811f 	bne.w	8013176 <output_update+0x36e>
 8012f38:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8012f3c:	eddf 5ac9 	vldr	s11, [pc, #804]	; 8013264 <output_update+0x45c>
 8012f40:	ed9f 4ac9 	vldr	s8, [pc, #804]	; 8013268 <output_update+0x460>
 8012f44:	ed9f 6ac9 	vldr	s12, [pc, #804]	; 801326c <output_update+0x464>
 8012f48:	eddf 4ac9 	vldr	s9, [pc, #804]	; 8013270 <output_update+0x468>
 8012f4c:	ed9f bac9 	vldr	s22, [pc, #804]	; 8013274 <output_update+0x46c>
 8012f50:	ed9f 5ac9 	vldr	s10, [pc, #804]	; 8013278 <output_update+0x470>
 8012f54:	eddf 6ac9 	vldr	s13, [pc, #804]	; 801327c <output_update+0x474>
 8012f58:	eddf 7ac9 	vldr	s15, [pc, #804]	; 8013280 <output_update+0x478>
 8012f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f60:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8012f64:	bfd8      	it	le
 8012f66:	eef0 5a44 	vmovle.f32	s11, s8
 8012f6a:	bfd8      	it	le
 8012f6c:	eeb0 6a64 	vmovle.f32	s12, s9
 8012f70:	bfd8      	it	le
 8012f72:	eeb0 ba45 	vmovle.f32	s22, s10
 8012f76:	bfd4      	ite	le
 8012f78:	eeb0 7a67 	vmovle.f32	s14, s15
 8012f7c:	eeb0 7a66 	vmovgt.f32	s14, s13
 8012f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f84:	bfc8      	it	gt
 8012f86:	eeb0 ba65 	vmovgt.f32	s22, s11
 8012f8a:	bfc8      	it	gt
 8012f8c:	eeb0 7a46 	vmovgt.f32	s14, s12
 8012f90:	ed84 7a00 	vstr	s14, [r4]
 8012f94:	edda 7a01 	vldr	s15, [sl, #4]
 8012f98:	ed9a 7a03 	vldr	s14, [sl, #12]
 8012f9c:	edda 6a02 	vldr	s13, [sl, #8]
 8012fa0:	ed9a 6a00 	vldr	s12, [sl]
 8012fa4:	ee27 7a67 	vnmul.f32	s14, s14, s15
 8012fa8:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 8012fac:	eea6 7a26 	vfma.f32	s14, s12, s13
 8012fb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012fb4:	ee17 0a90 	vmov	r0, s15
 8012fb8:	f7ed fa46 	bl	8000448 <__aeabi_f2d>
 8012fbc:	f00e f896 	bl	80210ec <asin>
 8012fc0:	f7ed fd92 	bl	8000ae8 <__aeabi_d2f>
 8012fc4:	6060      	str	r0, [r4, #4]
 8012fc6:	edda 7a03 	vldr	s15, [sl, #12]
 8012fca:	ed9a 8a00 	vldr	s16, [sl]
 8012fce:	edda 6a01 	vldr	s13, [sl, #4]
 8012fd2:	ed9a 7a02 	vldr	s14, [sl, #8]
 8012fd6:	ee28 8a27 	vmul.f32	s16, s16, s15
 8012fda:	ee79 7a89 	vadd.f32	s15, s19, s18
 8012fde:	eea6 8a87 	vfma.f32	s16, s13, s14
 8012fe2:	ee77 7aeb 	vsub.f32	s15, s15, s23
 8012fe6:	ee38 8a08 	vadd.f32	s16, s16, s16
 8012fea:	ee08 0a90 	vmov	s17, r0
 8012fee:	eeb4 8a6a 	vcmp.f32	s16, s21
 8012ff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ff6:	ee77 7aca 	vsub.f32	s15, s15, s20
 8012ffa:	f000 80c6 	beq.w	801318a <output_update+0x382>
 8012ffe:	4ba1      	ldr	r3, [pc, #644]	; (8013284 <output_update+0x47c>)
 8013000:	ed93 7a00 	vldr	s14, [r3]
 8013004:	eeb4 8a47 	vcmp.f32	s16, s14
 8013008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801300c:	f000 80bd 	beq.w	801318a <output_update+0x382>
 8013010:	eef5 7a40 	vcmp.f32	s15, #0.0
 8013014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013018:	f040 8140 	bne.w	801329c <output_update+0x494>
 801301c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8013020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013024:	f340 8157 	ble.w	80132d6 <output_update+0x4ce>
 8013028:	eddf 7a8c 	vldr	s15, [pc, #560]	; 801325c <output_update+0x454>
 801302c:	e0d6      	b.n	80131dc <output_update+0x3d4>
 801302e:	eef1 7a67 	vneg.f32	s15, s15
 8013032:	ed83 6a00 	vstr	s12, [r3]
 8013036:	edc3 6a01 	vstr	s13, [r3, #4]
 801303a:	edc3 7a02 	vstr	s15, [r3, #8]
 801303e:	ed9a aa00 	vldr	s20, [sl]
 8013042:	edda 8a02 	vldr	s17, [sl, #8]
 8013046:	edda aa01 	vldr	s21, [sl, #4]
 801304a:	ed9a 8a03 	vldr	s16, [sl, #12]
 801304e:	ee2a 9a0a 	vmul.f32	s18, s20, s20
 8013052:	ee68 7aa8 	vmul.f32	s15, s17, s17
 8013056:	ee39 9a09 	vadd.f32	s18, s18, s18
 801305a:	eeb0 ca00 	vmov.f32	s24, #0	; 0x40000000  2.0
 801305e:	eeb0 7a49 	vmov.f32	s14, s18
 8013062:	eea7 7a8c 	vfma.f32	s14, s15, s24
 8013066:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
 801306a:	ee7b 7ac7 	vsub.f32	s15, s23, s14
 801306e:	eef1 8a68 	vneg.f32	s17, s17
 8013072:	ee17 0a90 	vmov	r0, s15
 8013076:	f7ed f9e7 	bl	8000448 <__aeabi_f2d>
 801307a:	ee6a 7a2a 	vmul.f32	s15, s20, s21
 801307e:	4680      	mov	r8, r0
 8013080:	eee8 7a88 	vfma.f32	s15, s17, s16
 8013084:	4689      	mov	r9, r1
 8013086:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801308a:	ee17 0a90 	vmov	r0, s15
 801308e:	f7ed f9db 	bl	8000448 <__aeabi_f2d>
 8013092:	4642      	mov	r2, r8
 8013094:	464b      	mov	r3, r9
 8013096:	f00e f87d 	bl	8021194 <atan2>
 801309a:	f7ed fd25 	bl	8000ae8 <__aeabi_d2f>
 801309e:	ee6a 7aaa 	vmul.f32	s15, s21, s21
 80130a2:	ee0b 0a10 	vmov	s22, r0
 80130a6:	eea7 9a8c 	vfma.f32	s18, s15, s24
 80130aa:	eef1 9a4b 	vneg.f32	s19, s22
 80130ae:	ee7b 7ac9 	vsub.f32	s15, s23, s18
 80130b2:	edc4 9a00 	vstr	s19, [r4]
 80130b6:	ee17 0a90 	vmov	r0, s15
 80130ba:	f7ed f9c5 	bl	8000448 <__aeabi_f2d>
 80130be:	ee6a 7a88 	vmul.f32	s15, s21, s16
 80130c2:	4680      	mov	r8, r0
 80130c4:	eeea 7a28 	vfma.f32	s15, s20, s17
 80130c8:	4689      	mov	r9, r1
 80130ca:	ee28 8a4a 	vnmul.f32	s16, s16, s20
 80130ce:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80130d2:	eea8 8aaa 	vfma.f32	s16, s17, s21
 80130d6:	ee17 0a90 	vmov	r0, s15
 80130da:	f7ed f9b5 	bl	8000448 <__aeabi_f2d>
 80130de:	4642      	mov	r2, r8
 80130e0:	464b      	mov	r3, r9
 80130e2:	f00e f857 	bl	8021194 <atan2>
 80130e6:	f7ed fcff 	bl	8000ae8 <__aeabi_d2f>
 80130ea:	ee07 0a90 	vmov	s15, r0
 80130ee:	eeb1 9a67 	vneg.f32	s18, s15
 80130f2:	ee78 7a08 	vadd.f32	s15, s16, s16
 80130f6:	ed84 9a01 	vstr	s18, [r4, #4]
 80130fa:	ee17 0a90 	vmov	r0, s15
 80130fe:	f7ed f9a3 	bl	8000448 <__aeabi_f2d>
 8013102:	f00d fff3 	bl	80210ec <asin>
 8013106:	f7ed fcef 	bl	8000ae8 <__aeabi_d2f>
 801310a:	eeb5 bac0 	vcmpe.f32	s22, #0.0
 801310e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013112:	ee07 0a90 	vmov	s15, r0
 8013116:	60a0      	str	r0, [r4, #8]
 8013118:	dd03      	ble.n	8013122 <output_update+0x31a>
 801311a:	eddf 9a5b 	vldr	s19, [pc, #364]	; 8013288 <output_update+0x480>
 801311e:	ee79 9acb 	vsub.f32	s19, s19, s22
 8013122:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 801328c <output_update+0x484>
 8013126:	ee69 9a87 	vmul.f32	s19, s19, s14
 801312a:	ee29 9a07 	vmul.f32	s18, s18, s14
 801312e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013132:	edc4 9a00 	vstr	s19, [r4]
 8013136:	ed84 9a01 	vstr	s18, [r4, #4]
 801313a:	edc4 7a02 	vstr	s15, [r4, #8]
 801313e:	ed97 7a01 	vldr	s14, [r7, #4]
 8013142:	edd5 7a00 	vldr	s15, [r5]
 8013146:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801314a:	ecbd 8b0a 	vpop	{d8-d12}
 801314e:	edc6 7a00 	vstr	s15, [r6]
 8013152:	ed97 7a00 	vldr	s14, [r7]
 8013156:	edd5 7a01 	vldr	s15, [r5, #4]
 801315a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801315e:	edc6 7a01 	vstr	s15, [r6, #4]
 8013162:	edd5 7a02 	vldr	s15, [r5, #8]
 8013166:	ed97 7a02 	vldr	s14, [r7, #8]
 801316a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801316e:	edc6 7a02 	vstr	s15, [r6, #8]
 8013172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013176:	4b43      	ldr	r3, [pc, #268]	; (8013284 <output_update+0x47c>)
 8013178:	edd3 7a00 	vldr	s15, [r3]
 801317c:	eeb4 7a67 	vcmp.f32	s14, s15
 8013180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013184:	f47f aea6 	bne.w	8012ed4 <output_update+0xcc>
 8013188:	e6d6      	b.n	8012f38 <output_update+0x130>
 801318a:	eef4 7a6a 	vcmp.f32	s15, s21
 801318e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013192:	d008      	beq.n	80131a6 <output_update+0x39e>
 8013194:	4b3b      	ldr	r3, [pc, #236]	; (8013284 <output_update+0x47c>)
 8013196:	ed93 7a00 	vldr	s14, [r3]
 801319a:	eef4 7a47 	vcmp.f32	s15, s14
 801319e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131a2:	f47f af35 	bne.w	8013010 <output_update+0x208>
 80131a6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80131aa:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8013264 <output_update+0x45c>
 80131ae:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8013268 <output_update+0x460>
 80131b2:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8013274 <output_update+0x46c>
 80131b6:	ed9f 6a30 	vldr	s12, [pc, #192]	; 8013278 <output_update+0x470>
 80131ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131be:	eef5 7a40 	vcmp.f32	s15, #0.0
 80131c2:	bfd8      	it	le
 80131c4:	eef0 6a65 	vmovle.f32	s13, s11
 80131c8:	bfd4      	ite	le
 80131ca:	eef0 7a46 	vmovle.f32	s15, s12
 80131ce:	eef0 7a47 	vmovgt.f32	s15, s14
 80131d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131d6:	bfc8      	it	gt
 80131d8:	eef0 7a66 	vmovgt.f32	s15, s13
 80131dc:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 801328c <output_update+0x484>
 80131e0:	ed84 ba00 	vstr	s22, [r4]
 80131e4:	ee68 8a87 	vmul.f32	s17, s17, s14
 80131e8:	edc4 7a02 	vstr	s15, [r4, #8]
 80131ec:	edc4 8a01 	vstr	s17, [r4, #4]
 80131f0:	ed97 7a00 	vldr	s14, [r7]
 80131f4:	edd5 7a00 	vldr	s15, [r5]
 80131f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80131fc:	ecbd 8b0a 	vpop	{d8-d12}
 8013200:	edc6 7a00 	vstr	s15, [r6]
 8013204:	ed97 7a01 	vldr	s14, [r7, #4]
 8013208:	edd5 7a01 	vldr	s15, [r5, #4]
 801320c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013210:	edc6 7a01 	vstr	s15, [r6, #4]
 8013214:	edd5 7a02 	vldr	s15, [r5, #8]
 8013218:	ed97 7a02 	vldr	s14, [r7, #8]
 801321c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013220:	edc6 7a02 	vstr	s15, [r6, #8]
 8013224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013228:	ee17 0a10 	vmov	r0, s14
 801322c:	f7ed f90c 	bl	8000448 <__aeabi_f2d>
 8013230:	4680      	mov	r8, r0
 8013232:	4689      	mov	r9, r1
 8013234:	ee18 0a10 	vmov	r0, s16
 8013238:	f7ed f906 	bl	8000448 <__aeabi_f2d>
 801323c:	4642      	mov	r2, r8
 801323e:	464b      	mov	r3, r9
 8013240:	f00d ffa8 	bl	8021194 <atan2>
 8013244:	f7ed fc50 	bl	8000ae8 <__aeabi_d2f>
 8013248:	ed9f ba10 	vldr	s22, [pc, #64]	; 801328c <output_update+0x484>
 801324c:	ee07 0a10 	vmov	s14, r0
 8013250:	ee27 ba0b 	vmul.f32	s22, s14, s22
 8013254:	e69c      	b.n	8012f90 <output_update+0x188>
 8013256:	bf00      	nop
 8013258:	20004f50 	.word	0x20004f50
 801325c:	42b40000 	.word	0x42b40000
 8013260:	3fc90fdb 	.word	0x3fc90fdb
 8013264:	42340000 	.word	0x42340000
 8013268:	c2340000 	.word	0xc2340000
 801326c:	3f490fdb 	.word	0x3f490fdb
 8013270:	bf490fdb 	.word	0xbf490fdb
 8013274:	43070000 	.word	0x43070000
 8013278:	c3070000 	.word	0xc3070000
 801327c:	4016cbe4 	.word	0x4016cbe4
 8013280:	c016cbe4 	.word	0xc016cbe4
 8013284:	20004f54 	.word	0x20004f54
 8013288:	40c90e56 	.word	0x40c90e56
 801328c:	42652ee1 	.word	0x42652ee1
 8013290:	00000000 	.word	0x00000000
 8013294:	bfc90fdb 	.word	0xbfc90fdb
 8013298:	c2b40000 	.word	0xc2b40000
 801329c:	ee17 0a90 	vmov	r0, s15
 80132a0:	f7ed f8d2 	bl	8000448 <__aeabi_f2d>
 80132a4:	4680      	mov	r8, r0
 80132a6:	4689      	mov	r9, r1
 80132a8:	ee18 0a10 	vmov	r0, s16
 80132ac:	f7ed f8cc 	bl	8000448 <__aeabi_f2d>
 80132b0:	4642      	mov	r2, r8
 80132b2:	464b      	mov	r3, r9
 80132b4:	f00d ff6e 	bl	8021194 <atan2>
 80132b8:	f7ed fc16 	bl	8000ae8 <__aeabi_d2f>
 80132bc:	ed5f 7a0d 	vldr	s15, [pc, #-52]	; 801328c <output_update+0x484>
 80132c0:	ee07 0a10 	vmov	s14, r0
 80132c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80132c8:	e788      	b.n	80131dc <output_update+0x3d4>
 80132ca:	d408      	bmi.n	80132de <output_update+0x4d6>
 80132cc:	ed1f ba10 	vldr	s22, [pc, #-64]	; 8013290 <output_update+0x488>
 80132d0:	eeb0 7a4b 	vmov.f32	s14, s22
 80132d4:	e65c      	b.n	8012f90 <output_update+0x188>
 80132d6:	d407      	bmi.n	80132e8 <output_update+0x4e0>
 80132d8:	ed5f 7a13 	vldr	s15, [pc, #-76]	; 8013290 <output_update+0x488>
 80132dc:	e77e      	b.n	80131dc <output_update+0x3d4>
 80132de:	ed1f ba12 	vldr	s22, [pc, #-72]	; 8013298 <output_update+0x490>
 80132e2:	ed1f 7a14 	vldr	s14, [pc, #-80]	; 8013294 <output_update+0x48c>
 80132e6:	e653      	b.n	8012f90 <output_update+0x188>
 80132e8:	ed5f 7a15 	vldr	s15, [pc, #-84]	; 8013298 <output_update+0x490>
 80132ec:	e776      	b.n	80131dc <output_update+0x3d4>
 80132ee:	bf00      	nop

080132f0 <MEMS_runMagCal.constprop.14>:
 80132f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132f4:	ed2d 8b0c 	vpush	{d8-d13}
 80132f8:	f8df b40c 	ldr.w	fp, [pc, #1036]	; 8013708 <MEMS_runMagCal.constprop.14+0x418>
 80132fc:	f2ad 5d6c 	subw	sp, sp, #1388	; 0x56c
 8013300:	2382      	movs	r3, #130	; 0x82
 8013302:	461a      	mov	r2, r3
 8013304:	f50b 608c 	add.w	r0, fp, #1120	; 0x460
 8013308:	ac56      	add	r4, sp, #344	; 0x158
 801330a:	a917      	add	r1, sp, #92	; 0x5c
 801330c:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
 8013310:	9419      	str	r4, [sp, #100]	; 0x64
 8013312:	f7fe f977 	bl	8011604 <MEMS_getSensorData_I16>
 8013316:	f8bd 0060 	ldrh.w	r0, [sp, #96]	; 0x60
 801331a:	f9bb 2462 	ldrsh.w	r2, [fp, #1122]	; 0x462
 801331e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013320:	f100 39ff 	add.w	r9, r0, #4294967295
 8013324:	fb02 3209 	mla	r2, r2, r9, r3
 8013328:	9209      	str	r2, [sp, #36]	; 0x24
 801332a:	f8cb 24ac 	str.w	r2, [fp, #1196]	; 0x4ac
 801332e:	2800      	cmp	r0, #0
 8013330:	f000 8277 	beq.w	8013822 <MEMS_runMagCal.constprop.14+0x532>
 8013334:	f8db 347c 	ldr.w	r3, [fp, #1148]	; 0x47c
 8013338:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801333c:	f502 32c3 	add.w	r2, r2, #99840	; 0x18600
 8013340:	fb01 f103 	mul.w	r1, r1, r3
 8013344:	32a0      	adds	r2, #160	; 0xa0
 8013346:	428a      	cmp	r2, r1
 8013348:	f080 8271 	bcs.w	801382e <MEMS_runMagCal.constprop.14+0x53e>
 801334c:	2200      	movs	r2, #0
 801334e:	f88b 2500 	strb.w	r2, [fp, #1280]	; 0x500
 8013352:	2b00      	cmp	r3, #0
 8013354:	f040 8276 	bne.w	8013844 <MEMS_runMagCal.constprop.14+0x554>
 8013358:	f8cb 347c 	str.w	r3, [fp, #1148]	; 0x47c
 801335c:	2200      	movs	r2, #0
 801335e:	f8cb 3478 	str.w	r3, [fp, #1144]	; 0x478
 8013362:	f8cb 2480 	str.w	r2, [fp, #1152]	; 0x480
 8013366:	2300      	movs	r3, #0
 8013368:	22ff      	movs	r2, #255	; 0xff
 801336a:	f8cb 3508 	str.w	r3, [fp, #1288]	; 0x508
 801336e:	f8cb 350c 	str.w	r3, [fp, #1292]	; 0x50c
 8013372:	f8cb 3510 	str.w	r3, [fp, #1296]	; 0x510
 8013376:	f8cb 3514 	str.w	r3, [fp, #1300]	; 0x514
 801337a:	f8cb 351c 	str.w	r3, [fp, #1308]	; 0x51c
 801337e:	f8cb 3518 	str.w	r3, [fp, #1304]	; 0x518
 8013382:	f88b 2502 	strb.w	r2, [fp, #1282]	; 0x502
 8013386:	4bdc      	ldr	r3, [pc, #880]	; (80136f8 <MEMS_runMagCal.constprop.14+0x408>)
 8013388:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 801338c:	4fdb      	ldr	r7, [pc, #876]	; (80136fc <MEMS_runMagCal.constprop.14+0x40c>)
 801338e:	eddf 7adc 	vldr	s15, [pc, #880]	; 8013700 <MEMS_runMagCal.constprop.14+0x410>
 8013392:	edd3 2a01 	vldr	s5, [r3, #4]
 8013396:	edd3 5a1f 	vldr	s11, [r3, #124]	; 0x7c
 801339a:	ed93 5a1c 	vldr	s10, [r3, #112]	; 0x70
 801339e:	edd3 4a23 	vldr	s9, [r3, #140]	; 0x8c
 80133a2:	ed93 4a1d 	vldr	s8, [r3, #116]	; 0x74
 80133a6:	edd3 3a27 	vldr	s7, [r3, #156]	; 0x9c
 80133aa:	ed93 3a1e 	vldr	s6, [r3, #120]	; 0x78
 80133ae:	9002      	str	r0, [sp, #8]
 80133b0:	f04f 0c00 	mov.w	ip, #0
 80133b4:	fa1f f989 	uxth.w	r9, r9
 80133b8:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80133bc:	464d      	mov	r5, r9
 80133be:	e9cd cc04 	strd	ip, ip, [sp, #16]
 80133c2:	e9cd cc06 	strd	ip, ip, [sp, #24]
 80133c6:	f06f 2480 	mvn.w	r4, #2147516416	; 0x80008000
 80133ca:	f04f 2280 	mov.w	r2, #2147516416	; 0x80008000
 80133ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80133d2:	468e      	mov	lr, r1
 80133d4:	2d03      	cmp	r5, #3
 80133d6:	9446      	str	r4, [sp, #280]	; 0x118
 80133d8:	9236      	str	r2, [sp, #216]	; 0xd8
 80133da:	f8ad 30dc 	strh.w	r3, [sp, #220]	; 0xdc
 80133de:	f8cd a020 	str.w	sl, [sp, #32]
 80133e2:	4653      	mov	r3, sl
 80133e4:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 80133e8:	eeb0 7a67 	vmov.f32	s14, s15
 80133ec:	f8ad 111c 	strh.w	r1, [sp, #284]	; 0x11c
 80133f0:	9101      	str	r1, [sp, #4]
 80133f2:	4688      	mov	r8, r1
 80133f4:	bf28      	it	cs
 80133f6:	2503      	movcs	r5, #3
 80133f8:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 80133fc:	9700      	str	r7, [sp, #0]
 80133fe:	f8cd c00c 	str.w	ip, [sp, #12]
 8013402:	4662      	mov	r2, ip
 8013404:	4666      	mov	r6, ip
 8013406:	4664      	mov	r4, ip
 8013408:	4638      	mov	r0, r7
 801340a:	46f1      	mov	r9, lr
 801340c:	46ba      	mov	sl, r7
 801340e:	7819      	ldrb	r1, [r3, #0]
 8013410:	2900      	cmp	r1, #0
 8013412:	d047      	beq.n	80134a4 <MEMS_runMagCal.constprop.14+0x1b4>
 8013414:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8013418:	4297      	cmp	r7, r2
 801341a:	f106 0601 	add.w	r6, r6, #1
 801341e:	bfbc      	itt	lt
 8013420:	4617      	movlt	r7, r2
 8013422:	f04f 0c01 	movlt.w	ip, #1
 8013426:	4596      	cmp	lr, r2
 8013428:	b276      	sxtb	r6, r6
 801342a:	dd02      	ble.n	8013432 <MEMS_runMagCal.constprop.14+0x142>
 801342c:	2101      	movs	r1, #1
 801342e:	4696      	mov	lr, r2
 8013430:	9104      	str	r1, [sp, #16]
 8013432:	ee07 2a90 	vmov	s15, r2
 8013436:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801343a:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801343e:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8013442:	4290      	cmp	r0, r2
 8013444:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8013448:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801344c:	da02      	bge.n	8013454 <MEMS_runMagCal.constprop.14+0x164>
 801344e:	2101      	movs	r1, #1
 8013450:	4610      	mov	r0, r2
 8013452:	9105      	str	r1, [sp, #20]
 8013454:	4591      	cmp	r9, r2
 8013456:	dd02      	ble.n	801345e <MEMS_runMagCal.constprop.14+0x16e>
 8013458:	2101      	movs	r1, #1
 801345a:	4691      	mov	r9, r2
 801345c:	9106      	str	r1, [sp, #24]
 801345e:	ee06 2a90 	vmov	s13, r2
 8013462:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8013466:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801346a:	ee76 6ac4 	vsub.f32	s13, s13, s8
 801346e:	4552      	cmp	r2, sl
 8013470:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8013474:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8013478:	ee37 7a87 	vadd.f32	s14, s15, s14
 801347c:	dd02      	ble.n	8013484 <MEMS_runMagCal.constprop.14+0x194>
 801347e:	2101      	movs	r1, #1
 8013480:	4692      	mov	sl, r2
 8013482:	9107      	str	r1, [sp, #28]
 8013484:	4542      	cmp	r2, r8
 8013486:	da02      	bge.n	801348e <MEMS_runMagCal.constprop.14+0x19e>
 8013488:	2101      	movs	r1, #1
 801348a:	4690      	mov	r8, r2
 801348c:	9103      	str	r1, [sp, #12]
 801348e:	ee07 2a90 	vmov	s15, r2
 8013492:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013496:	2201      	movs	r2, #1
 8013498:	ee77 7ac3 	vsub.f32	s15, s15, s6
 801349c:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80134a0:	eea7 7aa7 	vfma.f32	s14, s15, s15
 80134a4:	3401      	adds	r4, #1
 80134a6:	b2a4      	uxth	r4, r4
 80134a8:	42ac      	cmp	r4, r5
 80134aa:	f103 0308 	add.w	r3, r3, #8
 80134ae:	d9ae      	bls.n	801340e <MEMS_runMagCal.constprop.14+0x11e>
 80134b0:	9000      	str	r0, [sp, #0]
 80134b2:	9802      	ldr	r0, [sp, #8]
 80134b4:	f8cd 9004 	str.w	r9, [sp, #4]
 80134b8:	42a0      	cmp	r0, r4
 80134ba:	f8cd a008 	str.w	sl, [sp, #8]
 80134be:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 80134c2:	f8dd a020 	ldr.w	sl, [sp, #32]
 80134c6:	f240 81c1 	bls.w	801384c <MEMS_runMagCal.constprop.14+0x55c>
 80134ca:	eba9 0904 	sub.w	r9, r9, r4
 80134ce:	fa14 f989 	uxtah	r9, r4, r9
 80134d2:	eb0a 04c4 	add.w	r4, sl, r4, lsl #3
 80134d6:	f1aa 0a16 	sub.w	sl, sl, #22
 80134da:	eb0a 09c9 	add.w	r9, sl, r9, lsl #3
 80134de:	3c1e      	subs	r4, #30
 80134e0:	f04f 0a00 	mov.w	sl, #0
 80134e4:	f8cd c020 	str.w	ip, [sp, #32]
 80134e8:	7fa3      	ldrb	r3, [r4, #30]
 80134ea:	2b00      	cmp	r3, #0
 80134ec:	f000 8092 	beq.w	8013614 <MEMS_runMagCal.constprop.14+0x324>
 80134f0:	f9b4 1020 	ldrsh.w	r1, [r4, #32]
 80134f4:	3601      	adds	r6, #1
 80134f6:	42b9      	cmp	r1, r7
 80134f8:	b276      	sxtb	r6, r6
 80134fa:	dd02      	ble.n	8013502 <MEMS_runMagCal.constprop.14+0x212>
 80134fc:	2301      	movs	r3, #1
 80134fe:	460f      	mov	r7, r1
 8013500:	9308      	str	r3, [sp, #32]
 8013502:	4571      	cmp	r1, lr
 8013504:	da02      	bge.n	801350c <MEMS_runMagCal.constprop.14+0x21c>
 8013506:	2301      	movs	r3, #1
 8013508:	468e      	mov	lr, r1
 801350a:	9304      	str	r3, [sp, #16]
 801350c:	ee07 1a90 	vmov	s15, r1
 8013510:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013514:	f9b4 2022 	ldrsh.w	r2, [r4, #34]	; 0x22
 8013518:	9b00      	ldr	r3, [sp, #0]
 801351a:	ee77 7ac5 	vsub.f32	s15, s15, s10
 801351e:	429a      	cmp	r2, r3
 8013520:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8013524:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8013528:	dd02      	ble.n	8013530 <MEMS_runMagCal.constprop.14+0x240>
 801352a:	2301      	movs	r3, #1
 801352c:	9200      	str	r2, [sp, #0]
 801352e:	9305      	str	r3, [sp, #20]
 8013530:	9b01      	ldr	r3, [sp, #4]
 8013532:	429a      	cmp	r2, r3
 8013534:	da02      	bge.n	801353c <MEMS_runMagCal.constprop.14+0x24c>
 8013536:	2301      	movs	r3, #1
 8013538:	9201      	str	r2, [sp, #4]
 801353a:	9306      	str	r3, [sp, #24]
 801353c:	ee06 2a90 	vmov	s13, r2
 8013540:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8013544:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	; 0x24
 8013548:	9802      	ldr	r0, [sp, #8]
 801354a:	ee76 6ac4 	vsub.f32	s13, s13, s8
 801354e:	4283      	cmp	r3, r0
 8013550:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8013554:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8013558:	ee37 6a87 	vadd.f32	s12, s15, s14
 801355c:	dd02      	ble.n	8013564 <MEMS_runMagCal.constprop.14+0x274>
 801355e:	2001      	movs	r0, #1
 8013560:	9302      	str	r3, [sp, #8]
 8013562:	9007      	str	r0, [sp, #28]
 8013564:	4543      	cmp	r3, r8
 8013566:	da02      	bge.n	801356e <MEMS_runMagCal.constprop.14+0x27e>
 8013568:	2001      	movs	r0, #1
 801356a:	4698      	mov	r8, r3
 801356c:	9003      	str	r0, [sp, #12]
 801356e:	f9b4 c008 	ldrsh.w	ip, [r4, #8]
 8013572:	f9b4 5000 	ldrsh.w	r5, [r4]
 8013576:	f9b4 0018 	ldrsh.w	r0, [r4, #24]
 801357a:	1b49      	subs	r1, r1, r5
 801357c:	eba0 000c 	sub.w	r0, r0, ip
 8013580:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8013584:	ee07 0a90 	vmov	s15, r0
 8013588:	f9b4 101a 	ldrsh.w	r1, [r4, #26]
 801358c:	f9b4 c00a 	ldrsh.w	ip, [r4, #10]
 8013590:	f9b4 5002 	ldrsh.w	r5, [r4, #2]
 8013594:	f9b4 001c 	ldrsh.w	r0, [r4, #28]
 8013598:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801359c:	1b52      	subs	r2, r2, r5
 801359e:	eba1 010c 	sub.w	r1, r1, ip
 80135a2:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 80135a6:	eeb0 7ac7 	vabs.f32	s14, s14
 80135aa:	ee07 1a90 	vmov	s15, r1
 80135ae:	eefc 6ac7 	vcvt.u32.f32	s13, s14
 80135b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80135b6:	eeb8 7a66 	vcvt.f32.u32	s14, s13
 80135ba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80135be:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80135c2:	eef0 7ae7 	vabs.f32	s15, s15
 80135c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80135ca:	1a80      	subs	r0, r0, r2
 80135cc:	ee07 3a90 	vmov	s15, r3
 80135d0:	1a59      	subs	r1, r3, r1
 80135d2:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 80135d6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80135da:	ee07 0a90 	vmov	s15, r0
 80135de:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80135e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80135e6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80135ea:	eef0 7ae7 	vabs.f32	s15, s15
 80135ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80135f2:	ee76 6ac3 	vsub.f32	s13, s13, s6
 80135f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80135fa:	ee66 6aa3 	vmul.f32	s13, s13, s7
 80135fe:	eeb0 7a46 	vmov.f32	s14, s12
 8013602:	ee17 3a90 	vmov	r3, s15
 8013606:	eea6 7aa6 	vfma.f32	s14, s13, s13
 801360a:	459a      	cmp	sl, r3
 801360c:	f04f 0201 	mov.w	r2, #1
 8013610:	bf38      	it	cc
 8013612:	469a      	movcc	sl, r3
 8013614:	3408      	adds	r4, #8
 8013616:	45a1      	cmp	r9, r4
 8013618:	f47f af66 	bne.w	80134e8 <MEMS_runMagCal.constprop.14+0x1f8>
 801361c:	f8dd c020 	ldr.w	ip, [sp, #32]
 8013620:	eddf 7a37 	vldr	s15, [pc, #220]	; 8013700 <MEMS_runMagCal.constprop.14+0x410>
 8013624:	9b03      	ldr	r3, [sp, #12]
 8013626:	2a00      	cmp	r2, #0
 8013628:	bf08      	it	eq
 801362a:	eeb0 7a67 	vmoveq.f32	s14, s15
 801362e:	2b00      	cmp	r3, #0
 8013630:	f040 810f 	bne.w	8013852 <MEMS_runMagCal.constprop.14+0x562>
 8013634:	9b07      	ldr	r3, [sp, #28]
 8013636:	b11b      	cbz	r3, 8013640 <MEMS_runMagCal.constprop.14+0x350>
 8013638:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801363c:	f8ad 30dc 	strh.w	r3, [sp, #220]	; 0xdc
 8013640:	9b06      	ldr	r3, [sp, #24]
 8013642:	b11b      	cbz	r3, 801364c <MEMS_runMagCal.constprop.14+0x35c>
 8013644:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8013648:	f8ad 311a 	strh.w	r3, [sp, #282]	; 0x11a
 801364c:	9b05      	ldr	r3, [sp, #20]
 801364e:	b11b      	cbz	r3, 8013658 <MEMS_runMagCal.constprop.14+0x368>
 8013650:	f8bd 3000 	ldrh.w	r3, [sp]
 8013654:	f8ad 30da 	strh.w	r3, [sp, #218]	; 0xda
 8013658:	9b04      	ldr	r3, [sp, #16]
 801365a:	b10b      	cbz	r3, 8013660 <MEMS_runMagCal.constprop.14+0x370>
 801365c:	f8ad e118 	strh.w	lr, [sp, #280]	; 0x118
 8013660:	f1bc 0f00 	cmp.w	ip, #0
 8013664:	f041 81fa 	bne.w	8014a5c <MEMS_runMagCal.constprop.14+0x176c>
 8013668:	4f24      	ldr	r7, [pc, #144]	; (80136fc <MEMS_runMagCal.constprop.14+0x40c>)
 801366a:	2e00      	cmp	r6, #0
 801366c:	f000 80f4 	beq.w	8013858 <MEMS_runMagCal.constprop.14+0x568>
 8013670:	f9bd 30d8 	ldrsh.w	r3, [sp, #216]	; 0xd8
 8013674:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8013678:	f280 81b0 	bge.w	80139dc <MEMS_runMagCal.constprop.14+0x6ec>
 801367c:	f9bd 0118 	ldrsh.w	r0, [sp, #280]	; 0x118
 8013680:	f510 4f80 	cmn.w	r0, #16384	; 0x4000
 8013684:	f2c0 81aa 	blt.w	80139dc <MEMS_runMagCal.constprop.14+0x6ec>
 8013688:	f9bd 30da 	ldrsh.w	r3, [sp, #218]	; 0xda
 801368c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8013690:	f280 81a4 	bge.w	80139dc <MEMS_runMagCal.constprop.14+0x6ec>
 8013694:	f9bd 211a 	ldrsh.w	r2, [sp, #282]	; 0x11a
 8013698:	f512 4f80 	cmn.w	r2, #16384	; 0x4000
 801369c:	f2c0 819e 	blt.w	80139dc <MEMS_runMagCal.constprop.14+0x6ec>
 80136a0:	f9bd 10dc 	ldrsh.w	r1, [sp, #220]	; 0xdc
 80136a4:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 80136a8:	f280 8198 	bge.w	80139dc <MEMS_runMagCal.constprop.14+0x6ec>
 80136ac:	f9bd 411c 	ldrsh.w	r4, [sp, #284]	; 0x11c
 80136b0:	f514 4f80 	cmn.w	r4, #16384	; 0x4000
 80136b4:	f2c0 8192 	blt.w	80139dc <MEMS_runMagCal.constprop.14+0x6ec>
 80136b8:	ee07 6a90 	vmov	s15, r6
 80136bc:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80136c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80136c4:	eec7 7a06 	vdiv.f32	s15, s14, s12
 80136c8:	1a9a      	subs	r2, r3, r2
 80136ca:	1b09      	subs	r1, r1, r4
 80136cc:	428a      	cmp	r2, r1
 80136ce:	4613      	mov	r3, r2
 80136d0:	eba7 0700 	sub.w	r7, r7, r0
 80136d4:	bfb8      	it	lt
 80136d6:	460b      	movlt	r3, r1
 80136d8:	42bb      	cmp	r3, r7
 80136da:	bfb8      	it	lt
 80136dc:	463b      	movlt	r3, r7
 80136de:	ee86 6aa2 	vdiv.f32	s12, s13, s5
 80136e2:	eeb1 7ae7 	vsqrt.f32	s14, s15
 80136e6:	ee06 3a90 	vmov	s13, r3
 80136ea:	eddf 7a06 	vldr	s15, [pc, #24]	; 8013704 <MEMS_runMagCal.constprop.14+0x414>
 80136ee:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80136f2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80136f6:	e00f      	b.n	8013718 <MEMS_runMagCal.constprop.14+0x428>
 80136f8:	20004fa0 	.word	0x20004fa0
 80136fc:	ffff8000 	.word	0xffff8000
 8013700:	00000000 	.word	0x00000000
 8013704:	43020000 	.word	0x43020000
 8013708:	20004b40 	.word	0x20004b40
 801370c:	447a0000 	.word	0x447a0000
 8013710:	42c80000 	.word	0x42c80000
 8013714:	477fff00 	.word	0x477fff00
 8013718:	ee22 7a87 	vmul.f32	s14, s5, s14
 801371c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8013720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013724:	f100 815a 	bmi.w	80139dc <MEMS_runMagCal.constprop.14+0x6ec>
 8013728:	ee07 aa90 	vmov	s15, sl
 801372c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013730:	ed5f 5a0a 	vldr	s11, [pc, #-40]	; 801370c <MEMS_runMagCal.constprop.14+0x41c>
 8013734:	ee67 2aa2 	vmul.f32	s5, s15, s5
 8013738:	eef4 2ae5 	vcmpe.f32	s5, s11
 801373c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013740:	f300 814c 	bgt.w	80139dc <MEMS_runMagCal.constprop.14+0x6ec>
 8013744:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 8013748:	ee26 6a27 	vmul.f32	s12, s12, s15
 801374c:	eeb4 6ae6 	vcmpe.f32	s12, s13
 8013750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013754:	f300 84ff 	bgt.w	8014156 <MEMS_runMagCal.constprop.14+0xe66>
 8013758:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 801375c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8013760:	eef4 6ae7 	vcmpe.f32	s13, s15
 8013764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013768:	f340 84fb 	ble.w	8014162 <MEMS_runMagCal.constprop.14+0xe72>
 801376c:	ee07 7a90 	vmov	s15, r7
 8013770:	ee36 6a06 	vadd.f32	s12, s12, s12
 8013774:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013778:	eef4 7ac6 	vcmpe.f32	s15, s12
 801377c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013780:	f340 84ef 	ble.w	8014162 <MEMS_runMagCal.constprop.14+0xe72>
 8013784:	ee07 2a90 	vmov	s15, r2
 8013788:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801378c:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8013790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013794:	f140 84e5 	bpl.w	8014162 <MEMS_runMagCal.constprop.14+0xe72>
 8013798:	ee07 1a90 	vmov	s15, r1
 801379c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80137a0:	f04f 0900 	mov.w	r9, #0
 80137a4:	eeb4 6ae7 	vcmpe.f32	s12, s15
 80137a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137ac:	bf4c      	ite	mi
 80137ae:	f04f 0a01 	movmi.w	sl, #1
 80137b2:	46ca      	movpl	sl, r9
 80137b4:	ed5f 6a2a 	vldr	s13, [pc, #-168]	; 8013710 <MEMS_runMagCal.constprop.14+0x420>
 80137b8:	ed5f 7a2a 	vldr	s15, [pc, #-168]	; 8013714 <MEMS_runMagCal.constprop.14+0x424>
 80137bc:	f89b 54cc 	ldrb.w	r5, [fp, #1228]	; 0x4cc
 80137c0:	ee27 7a26 	vmul.f32	s14, s14, s13
 80137c4:	2300      	movs	r3, #0
 80137c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80137ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137ce:	bf88      	it	hi
 80137d0:	eeb0 7a67 	vmovhi.f32	s14, s15
 80137d4:	2d01      	cmp	r5, #1
 80137d6:	ed8d 7a0d 	vstr	s14, [sp, #52]	; 0x34
 80137da:	9300      	str	r3, [sp, #0]
 80137dc:	d955      	bls.n	801388a <MEMS_runMagCal.constprop.14+0x59a>
 80137de:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80137e2:	edcd 7a01 	vstr	s15, [sp, #4]
 80137e6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80137ea:	3bc8      	subs	r3, #200	; 0xc8
 80137ec:	b29b      	uxth	r3, r3
 80137ee:	f644 422c 	movw	r2, #19500	; 0x4c2c
 80137f2:	4293      	cmp	r3, r2
 80137f4:	d909      	bls.n	801380a <MEMS_runMagCal.constprop.14+0x51a>
 80137f6:	2500      	movs	r5, #0
 80137f8:	23ff      	movs	r3, #255	; 0xff
 80137fa:	f88b 54cc 	strb.w	r5, [fp, #1228]	; 0x4cc
 80137fe:	f88b 5500 	strb.w	r5, [fp, #1280]	; 0x500
 8013802:	f88b 54b4 	strb.w	r5, [fp, #1204]	; 0x4b4
 8013806:	f88b 3502 	strb.w	r3, [fp, #1282]	; 0x502
 801380a:	9b00      	ldr	r3, [sp, #0]
 801380c:	2b02      	cmp	r3, #2
 801380e:	d13c      	bne.n	801388a <MEMS_runMagCal.constprop.14+0x59a>
 8013810:	2200      	movs	r2, #0
 8013812:	23ff      	movs	r3, #255	; 0xff
 8013814:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013816:	f8cb 1480 	str.w	r1, [fp, #1152]	; 0x480
 801381a:	f88b 2500 	strb.w	r2, [fp, #1280]	; 0x500
 801381e:	f88b 3502 	strb.w	r3, [fp, #1282]	; 0x502
 8013822:	f20d 5d6c 	addw	sp, sp, #1388	; 0x56c
 8013826:	ecbd 8b0c 	vpop	{d8-d13}
 801382a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801382e:	f8db 1504 	ldr.w	r1, [fp, #1284]	; 0x504
 8013832:	428a      	cmp	r2, r1
 8013834:	f4ff ad8a 	bcc.w	801334c <MEMS_runMagCal.constprop.14+0x5c>
 8013838:	f89b 3500 	ldrb.w	r3, [fp, #1280]	; 0x500
 801383c:	2b00      	cmp	r3, #0
 801383e:	f47f ada2 	bne.w	8013386 <MEMS_runMagCal.constprop.14+0x96>
 8013842:	e590      	b.n	8013366 <MEMS_runMagCal.constprop.14+0x76>
 8013844:	2301      	movs	r3, #1
 8013846:	f8cb 347c 	str.w	r3, [fp, #1148]	; 0x47c
 801384a:	e587      	b.n	801335c <MEMS_runMagCal.constprop.14+0x6c>
 801384c:	f04f 0a00 	mov.w	sl, #0
 8013850:	e6e6      	b.n	8013620 <MEMS_runMagCal.constprop.14+0x330>
 8013852:	f8ad 811c 	strh.w	r8, [sp, #284]	; 0x11c
 8013856:	e6ed      	b.n	8013634 <MEMS_runMagCal.constprop.14+0x344>
 8013858:	ed5f 6a53 	vldr	s13, [pc, #-332]	; 8013710 <MEMS_runMagCal.constprop.14+0x420>
 801385c:	ed5f 7a53 	vldr	s15, [pc, #-332]	; 8013714 <MEMS_runMagCal.constprop.14+0x424>
 8013860:	f89b 54cc 	ldrb.w	r5, [fp, #1228]	; 0x4cc
 8013864:	ee27 7a26 	vmul.f32	s14, s14, s13
 8013868:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801386c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013870:	bf88      	it	hi
 8013872:	eeb0 7a67 	vmovhi.f32	s14, s15
 8013876:	2d01      	cmp	r5, #1
 8013878:	ed8d 7a0d 	vstr	s14, [sp, #52]	; 0x34
 801387c:	bf88      	it	hi
 801387e:	9600      	strhi	r6, [sp, #0]
 8013880:	f200 80c2 	bhi.w	8013a08 <MEMS_runMagCal.constprop.14+0x718>
 8013884:	46b1      	mov	r9, r6
 8013886:	9600      	str	r6, [sp, #0]
 8013888:	46b2      	mov	sl, r6
 801388a:	f99b 3486 	ldrsb.w	r3, [fp, #1158]	; 0x486
 801388e:	f89b 7485 	ldrb.w	r7, [fp, #1157]	; 0x485
 8013892:	2b00      	cmp	r3, #0
 8013894:	f2c0 80c2 	blt.w	8013a1c <MEMS_runMagCal.constprop.14+0x72c>
 8013898:	3301      	adds	r3, #1
 801389a:	fb93 f4f7 	sdiv	r4, r3, r7
 801389e:	fb07 3314 	mls	r3, r7, r4, r3
 80138a2:	b25c      	sxtb	r4, r3
 80138a4:	f88b 4486 	strb.w	r4, [fp, #1158]	; 0x486
 80138a8:	f89b 6484 	ldrb.w	r6, [fp, #1156]	; 0x484
 80138ac:	3601      	adds	r6, #1
 80138ae:	42be      	cmp	r6, r7
 80138b0:	bfa8      	it	ge
 80138b2:	463e      	movge	r6, r7
 80138b4:	fa5f f886 	uxtb.w	r8, r6
 80138b8:	ee17 0a10 	vmov	r0, s14
 80138bc:	f88b 8484 	strb.w	r8, [fp, #1156]	; 0x484
 80138c0:	f00d fb8c 	bl	8020fdc <roundf>
 80138c4:	ee07 0a90 	vmov	s15, r0
 80138c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80138cc:	eb0b 0344 	add.w	r3, fp, r4, lsl #1
 80138d0:	ee17 0a90 	vmov	r0, s15
 80138d4:	f8a3 0488 	strh.w	r0, [r3, #1160]	; 0x488
 80138d8:	9b00      	ldr	r3, [sp, #0]
 80138da:	2b00      	cmp	r3, #0
 80138dc:	d198      	bne.n	8013810 <MEMS_runMagCal.constprop.14+0x520>
 80138de:	f8db 3480 	ldr.w	r3, [fp, #1152]	; 0x480
 80138e2:	b123      	cbz	r3, 80138ee <MEMS_runMagCal.constprop.14+0x5fe>
 80138e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80138e6:	f503 6296 	add.w	r2, r3, #1200	; 0x4b0
 80138ea:	4291      	cmp	r1, r2
 80138ec:	d399      	bcc.n	8013822 <MEMS_runMagCal.constprop.14+0x532>
 80138ee:	f1b9 0f00 	cmp.w	r9, #0
 80138f2:	d196      	bne.n	8013822 <MEMS_runMagCal.constprop.14+0x532>
 80138f4:	1eaa      	subs	r2, r5, #2
 80138f6:	2a01      	cmp	r2, #1
 80138f8:	f240 8363 	bls.w	8013fc2 <MEMS_runMagCal.constprop.14+0xcd2>
 80138fc:	4be3      	ldr	r3, [pc, #908]	; (8013c8c <MEMS_runMagCal.constprop.14+0x99c>)
 80138fe:	eddf 7ae4 	vldr	s15, [pc, #912]	; 8013c90 <MEMS_runMagCal.constprop.14+0x9a0>
 8013902:	ed93 8a01 	vldr	s16, [r3, #4]
 8013906:	f8bd 4060 	ldrh.w	r4, [sp, #96]	; 0x60
 801390a:	f8db 3504 	ldr.w	r3, [fp, #1284]	; 0x504
 801390e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8013910:	f9bb 0462 	ldrsh.w	r0, [fp, #1122]	; 0x462
 8013914:	f89b 5500 	ldrb.w	r5, [fp, #1280]	; 0x500
 8013918:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801391c:	eec7 8a08 	vdiv.f32	s17, s14, s16
 8013920:	f503 511c 	add.w	r1, r3, #9984	; 0x2700
 8013924:	3c01      	subs	r4, #1
 8013926:	fb00 2404 	mla	r4, r0, r4, r2
 801392a:	3110      	adds	r1, #16
 801392c:	42a1      	cmp	r1, r4
 801392e:	eeb0 9a08 	vmov.f32	s18, #8	; 0x40400000  3.0
 8013932:	ee28 9a89 	vmul.f32	s18, s17, s18
 8013936:	ee69 7a27 	vmul.f32	s15, s18, s15
 801393a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801393e:	ee17 2a90 	vmov	r2, s15
 8013942:	fa1f f982 	uxth.w	r9, r2
 8013946:	d27f      	bcs.n	8013a48 <MEMS_runMagCal.constprop.14+0x758>
 8013948:	f242 3228 	movw	r2, #9000	; 0x2328
 801394c:	4294      	cmp	r4, r2
 801394e:	f89b 0501 	ldrb.w	r0, [fp, #1281]	; 0x501
 8013952:	f99b 2502 	ldrsb.w	r2, [fp, #1282]	; 0x502
 8013956:	bf1a      	itte	ne
 8013958:	f5a4 540c 	subne.w	r4, r4, #8960	; 0x2300
 801395c:	3c28      	subne	r4, #40	; 0x28
 801395e:	2400      	moveq	r4, #0
 8013960:	42a8      	cmp	r0, r5
 8013962:	f102 0201 	add.w	r2, r2, #1
 8013966:	f000 869f 	beq.w	80146a8 <MEMS_runMagCal.constprop.14+0x13b8>
 801396a:	1b52      	subs	r2, r2, r5
 801396c:	fb92 f1f0 	sdiv	r1, r2, r0
 8013970:	fb00 2211 	mls	r2, r0, r1, r2
 8013974:	2a00      	cmp	r2, #0
 8013976:	b216      	sxth	r6, r2
 8013978:	bfbc      	itt	lt
 801397a:	1812      	addlt	r2, r2, r0
 801397c:	b216      	sxthlt	r6, r2
 801397e:	b22f      	sxth	r7, r5
 8013980:	2f00      	cmp	r7, #0
 8013982:	d05e      	beq.n	8013a42 <MEMS_runMagCal.constprop.14+0x752>
 8013984:	2200      	movs	r2, #0
 8013986:	1b1b      	subs	r3, r3, r4
 8013988:	b299      	uxth	r1, r3
 801398a:	9201      	str	r2, [sp, #4]
 801398c:	4696      	mov	lr, r2
 801398e:	46ac      	mov	ip, r5
 8013990:	9402      	str	r4, [sp, #8]
 8013992:	e003      	b.n	801399c <MEMS_runMagCal.constprop.14+0x6ac>
 8013994:	3201      	adds	r2, #1
 8013996:	b213      	sxth	r3, r2
 8013998:	429f      	cmp	r7, r3
 801399a:	dd43      	ble.n	8013a24 <MEMS_runMagCal.constprop.14+0x734>
 801399c:	eb06 0802 	add.w	r8, r6, r2
 80139a0:	fb98 f3f0 	sdiv	r3, r8, r0
 80139a4:	fb00 8313 	mls	r3, r0, r3, r8
 80139a8:	b2db      	uxtb	r3, r3
 80139aa:	3304      	adds	r3, #4
 80139ac:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 80139b0:	f8b3 8500 	ldrh.w	r8, [r3, #1280]	; 0x500
 80139b4:	4488      	add	r8, r1
 80139b6:	fa0f f888 	sxth.w	r8, r8
 80139ba:	f1b8 0f00 	cmp.w	r8, #0
 80139be:	f8a3 8500 	strh.w	r8, [r3, #1280]	; 0x500
 80139c2:	dae7      	bge.n	8013994 <MEMS_runMagCal.constprop.14+0x6a4>
 80139c4:	f10c 33ff 	add.w	r3, ip, #4294967295
 80139c8:	f1bc 0f00 	cmp.w	ip, #0
 80139cc:	f000 82f6 	beq.w	8013fbc <MEMS_runMagCal.constprop.14+0xccc>
 80139d0:	2401      	movs	r4, #1
 80139d2:	9401      	str	r4, [sp, #4]
 80139d4:	fa5f fc83 	uxtb.w	ip, r3
 80139d8:	46a6      	mov	lr, r4
 80139da:	e7db      	b.n	8013994 <MEMS_runMagCal.constprop.14+0x6a4>
 80139dc:	eddf 6aad 	vldr	s13, [pc, #692]	; 8013c94 <MEMS_runMagCal.constprop.14+0x9a4>
 80139e0:	eddf 7aad 	vldr	s15, [pc, #692]	; 8013c98 <MEMS_runMagCal.constprop.14+0x9a8>
 80139e4:	f89b 54cc 	ldrb.w	r5, [fp, #1228]	; 0x4cc
 80139e8:	ee27 7a26 	vmul.f32	s14, s14, s13
 80139ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80139f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139f4:	bf88      	it	hi
 80139f6:	eeb0 7a67 	vmovhi.f32	s14, s15
 80139fa:	2d01      	cmp	r5, #1
 80139fc:	ed8d 7a0d 	vstr	s14, [sp, #52]	; 0x34
 8013a00:	f67f af06 	bls.w	8013810 <MEMS_runMagCal.constprop.14+0x520>
 8013a04:	2302      	movs	r3, #2
 8013a06:	9300      	str	r3, [sp, #0]
 8013a08:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8013a0c:	f04f 0a00 	mov.w	sl, #0
 8013a10:	edcd 7a01 	vstr	s15, [sp, #4]
 8013a14:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8013a18:	46d1      	mov	r9, sl
 8013a1a:	e6e6      	b.n	80137ea <MEMS_runMagCal.constprop.14+0x4fa>
 8013a1c:	2400      	movs	r4, #0
 8013a1e:	f88b 4486 	strb.w	r4, [fp, #1158]	; 0x486
 8013a22:	e741      	b.n	80138a8 <MEMS_runMagCal.constprop.14+0x5b8>
 8013a24:	e9dd 3401 	ldrd	r3, r4, [sp, #4]
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	f040 8735 	bne.w	8014898 <MEMS_runMagCal.constprop.14+0x15a8>
 8013a2e:	f1be 0f00 	cmp.w	lr, #0
 8013a32:	d006      	beq.n	8013a42 <MEMS_runMagCal.constprop.14+0x752>
 8013a34:	eeb0 0a49 	vmov.f32	s0, s18
 8013a38:	4648      	mov	r0, r9
 8013a3a:	f7fe fe1f 	bl	801267c <MEMS_updateMagBufferIndex.constprop.24>
 8013a3e:	f89b 5500 	ldrb.w	r5, [fp, #1280]	; 0x500
 8013a42:	f8cb 4504 	str.w	r4, [fp, #1284]	; 0x504
 8013a46:	4623      	mov	r3, r4
 8013a48:	2d00      	cmp	r5, #0
 8013a4a:	f000 82fa 	beq.w	8014042 <MEMS_runMagCal.constprop.14+0xd52>
 8013a4e:	f99b 2502 	ldrsb.w	r2, [fp, #1282]	; 0x502
 8013a52:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8013a54:	eb0b 02c2 	add.w	r2, fp, r2, lsl #3
 8013a58:	f9b2 2520 	ldrsh.w	r2, [r2, #1312]	; 0x520
 8013a5c:	f502 529c 	add.w	r2, r2, #4992	; 0x1380
 8013a60:	3208      	adds	r2, #8
 8013a62:	4413      	add	r3, r2
 8013a64:	4299      	cmp	r1, r3
 8013a66:	f200 81e7 	bhi.w	8013e38 <MEMS_runMagCal.constprop.14+0xb48>
 8013a6a:	f1ba 0f00 	cmp.w	sl, #0
 8013a6e:	d104      	bne.n	8013a7a <MEMS_runMagCal.constprop.14+0x78a>
 8013a70:	f89b 3500 	ldrb.w	r3, [fp, #1280]	; 0x500
 8013a74:	2b0a      	cmp	r3, #10
 8013a76:	f240 82e8 	bls.w	801404a <MEMS_runMagCal.constprop.14+0xd5a>
 8013a7a:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 8013a7e:	9301      	str	r3, [sp, #4]
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	f000 82e2 	beq.w	801404a <MEMS_runMagCal.constprop.14+0xd5a>
 8013a86:	eddf 6a85 	vldr	s13, [pc, #532]	; 8013c9c <MEMS_runMagCal.constprop.14+0x9ac>
 8013a8a:	ed9f 7a85 	vldr	s14, [pc, #532]	; 8013ca0 <MEMS_runMagCal.constprop.14+0x9b0>
 8013a8e:	f8cd a018 	str.w	sl, [sp, #24]
 8013a92:	ee29 aa09 	vmul.f32	s20, s18, s18
 8013a96:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8013a9a:	eef7 9a08 	vmov.f32	s19, #120	; 0x3fc00000  1.5
 8013a9e:	2300      	movs	r3, #0
 8013aa0:	ee28 8a26 	vmul.f32	s16, s16, s13
 8013aa4:	ee2a aa07 	vmul.f32	s20, s20, s14
 8013aa8:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8013aac:	ee69 9a29 	vmul.f32	s19, s18, s19
 8013ab0:	9304      	str	r3, [sp, #16]
 8013ab2:	461a      	mov	r2, r3
 8013ab4:	461c      	mov	r4, r3
 8013ab6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013ab8:	f813 1034 	ldrb.w	r1, [r3, r4, lsl #3]
 8013abc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013ac0:	b2a4      	uxth	r4, r4
 8013ac2:	2900      	cmp	r1, #0
 8013ac4:	f000 8123 	beq.w	8013d0e <MEMS_runMagCal.constprop.14+0xa1e>
 8013ac8:	f9b3 5002 	ldrsh.w	r5, [r3, #2]
 8013acc:	f9b3 6004 	ldrsh.w	r6, [r3, #4]
 8013ad0:	f9b3 7006 	ldrsh.w	r7, [r3, #6]
 8013ad4:	ee07 5a90 	vmov	s15, r5
 8013ad8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013adc:	eef0 7ae7 	vabs.f32	s15, s15
 8013ae0:	eef4 7ae8 	vcmpe.f32	s15, s17
 8013ae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ae8:	d516      	bpl.n	8013b18 <MEMS_runMagCal.constprop.14+0x828>
 8013aea:	ee07 6a90 	vmov	s15, r6
 8013aee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013af2:	eef0 7ae7 	vabs.f32	s15, s15
 8013af6:	eef4 8ae7 	vcmpe.f32	s17, s15
 8013afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013afe:	dd0b      	ble.n	8013b18 <MEMS_runMagCal.constprop.14+0x828>
 8013b00:	ee07 7a90 	vmov	s15, r7
 8013b04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013b08:	eef0 7ae7 	vabs.f32	s15, s15
 8013b0c:	eef4 8ae7 	vcmpe.f32	s17, s15
 8013b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b14:	f300 80fb 	bgt.w	8013d0e <MEMS_runMagCal.constprop.14+0xa1e>
 8013b18:	f89b 8500 	ldrb.w	r8, [fp, #1280]	; 0x500
 8013b1c:	f1b8 0f00 	cmp.w	r8, #0
 8013b20:	f000 819a 	beq.w	8013e58 <MEMS_runMagCal.constprop.14+0xb68>
 8013b24:	f9bb 281a 	ldrsh.w	r2, [fp, #2074]	; 0x81a
 8013b28:	f9bb 1818 	ldrsh.w	r1, [fp, #2072]	; 0x818
 8013b2c:	f9bb 381c 	ldrsh.w	r3, [fp, #2076]	; 0x81c
 8013b30:	1b92      	subs	r2, r2, r6
 8013b32:	fb02 f002 	mul.w	r0, r2, r2
 8013b36:	1b4a      	subs	r2, r1, r5
 8013b38:	fb02 0202 	mla	r2, r2, r2, r0
 8013b3c:	1bdb      	subs	r3, r3, r7
 8013b3e:	fb03 2303 	mla	r3, r3, r3, r2
 8013b42:	ee07 3a90 	vmov	s15, r3
 8013b46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013b4a:	eeb4 aae7 	vcmpe.f32	s20, s15
 8013b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b52:	f300 80dc 	bgt.w	8013d0e <MEMS_runMagCal.constprop.14+0xa1e>
 8013b56:	fb95 f3f9 	sdiv	r3, r5, r9
 8013b5a:	fb09 5313 	mls	r3, r9, r3, r5
 8013b5e:	2b00      	cmp	r3, #0
 8013b60:	bfb8      	it	lt
 8013b62:	444b      	addlt	r3, r9
 8013b64:	b21b      	sxth	r3, r3
 8013b66:	ee07 3a90 	vmov	s15, r3
 8013b6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013b6e:	ee67 7a88 	vmul.f32	s15, s15, s16
 8013b72:	ee17 0a90 	vmov	r0, s15
 8013b76:	f00d fa31 	bl	8020fdc <roundf>
 8013b7a:	fb96 f3f9 	sdiv	r3, r6, r9
 8013b7e:	ee07 0a90 	vmov	s15, r0
 8013b82:	fb09 6313 	mls	r3, r9, r3, r6
 8013b86:	2b00      	cmp	r3, #0
 8013b88:	bfb8      	it	lt
 8013b8a:	444b      	addlt	r3, r9
 8013b8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013b90:	b21b      	sxth	r3, r3
 8013b92:	edcd 7a02 	vstr	s15, [sp, #8]
 8013b96:	ee07 3a90 	vmov	s15, r3
 8013b9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013b9e:	f89d a008 	ldrb.w	sl, [sp, #8]
 8013ba2:	ee67 7a88 	vmul.f32	s15, s15, s16
 8013ba6:	ee17 0a90 	vmov	r0, s15
 8013baa:	f00d fa17 	bl	8020fdc <roundf>
 8013bae:	fb97 f3f9 	sdiv	r3, r7, r9
 8013bb2:	ee07 0a90 	vmov	s15, r0
 8013bb6:	fb09 7313 	mls	r3, r9, r3, r7
 8013bba:	2b00      	cmp	r3, #0
 8013bbc:	bfb8      	it	lt
 8013bbe:	444b      	addlt	r3, r9
 8013bc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013bc4:	b21b      	sxth	r3, r3
 8013bc6:	edcd 7a02 	vstr	s15, [sp, #8]
 8013bca:	ee07 3a90 	vmov	s15, r3
 8013bce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013bd2:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8013bd6:	9202      	str	r2, [sp, #8]
 8013bd8:	ee67 7a88 	vmul.f32	s15, s15, s16
 8013bdc:	ee17 0a90 	vmov	r0, s15
 8013be0:	f00d f9fc 	bl	8020fdc <roundf>
 8013be4:	ee07 0a90 	vmov	s15, r0
 8013be8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013bec:	f1ba 0f1f 	cmp.w	sl, #31
 8013bf0:	edcd 7a03 	vstr	s15, [sp, #12]
 8013bf4:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8013bf8:	f8db 2508 	ldr.w	r2, [fp, #1288]	; 0x508
 8013bfc:	f8db 350c 	ldr.w	r3, [fp, #1292]	; 0x50c
 8013c00:	9103      	str	r1, [sp, #12]
 8013c02:	f240 81cb 	bls.w	8013f9c <MEMS_runMagCal.constprop.14+0xcac>
 8013c06:	f1aa 0320 	sub.w	r3, sl, #32
 8013c0a:	2101      	movs	r1, #1
 8013c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8013c10:	4013      	ands	r3, r2
 8013c12:	9802      	ldr	r0, [sp, #8]
 8013c14:	f8db 1510 	ldr.w	r1, [fp, #1296]	; 0x510
 8013c18:	f8db 2514 	ldr.w	r2, [fp, #1300]	; 0x514
 8013c1c:	281f      	cmp	r0, #31
 8013c1e:	f240 81c6 	bls.w	8013fae <MEMS_runMagCal.constprop.14+0xcbe>
 8013c22:	f1a0 0220 	sub.w	r2, r0, #32
 8013c26:	2001      	movs	r0, #1
 8013c28:	fa00 f202 	lsl.w	r2, r0, r2
 8013c2c:	ea02 0e01 	and.w	lr, r2, r1
 8013c30:	9a03      	ldr	r2, [sp, #12]
 8013c32:	f8db 151c 	ldr.w	r1, [fp, #1308]	; 0x51c
 8013c36:	f8db 0518 	ldr.w	r0, [fp, #1304]	; 0x518
 8013c3a:	2a1f      	cmp	r2, #31
 8013c3c:	f240 81b3 	bls.w	8013fa6 <MEMS_runMagCal.constprop.14+0xcb6>
 8013c40:	f1a2 0020 	sub.w	r0, r2, #32
 8013c44:	2201      	movs	r2, #1
 8013c46:	fa02 f000 	lsl.w	r0, r2, r0
 8013c4a:	4001      	ands	r1, r0
 8013c4c:	2900      	cmp	r1, #0
 8013c4e:	f040 8199 	bne.w	8013f84 <MEMS_runMagCal.constprop.14+0xc94>
 8013c52:	f99b 1502 	ldrsb.w	r1, [fp, #1282]	; 0x502
 8013c56:	f89b c501 	ldrb.w	ip, [fp, #1281]	; 0x501
 8013c5a:	1c4a      	adds	r2, r1, #1
 8013c5c:	9205      	str	r2, [sp, #20]
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	f000 820b 	beq.w	801407a <MEMS_runMagCal.constprop.14+0xd8a>
 8013c64:	45e0      	cmp	r8, ip
 8013c66:	9b05      	ldr	r3, [sp, #20]
 8013c68:	f000 84f9 	beq.w	801465e <MEMS_runMagCal.constprop.14+0x136e>
 8013c6c:	eba3 0208 	sub.w	r2, r3, r8
 8013c70:	fb92 f3fc 	sdiv	r3, r2, ip
 8013c74:	fb0c 2313 	mls	r3, ip, r3, r2
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	fa0f fe83 	sxth.w	lr, r3
 8013c7e:	bfbc      	itt	lt
 8013c80:	4463      	addlt	r3, ip
 8013c82:	fa0f fe83 	sxthlt.w	lr, r3
 8013c86:	2200      	movs	r2, #0
 8013c88:	e011      	b.n	8013cae <MEMS_runMagCal.constprop.14+0x9be>
 8013c8a:	bf00      	nop
 8013c8c:	20004fa0 	.word	0x20004fa0
 8013c90:	427c0000 	.word	0x427c0000
 8013c94:	42c80000 	.word	0x42c80000
 8013c98:	477fff00 	.word	0x477fff00
 8013c9c:	3eaaaaab 	.word	0x3eaaaaab
 8013ca0:	3f666666 	.word	0x3f666666
 8013ca4:	3a83126f 	.word	0x3a83126f
 8013ca8:	4598      	cmp	r8, r3
 8013caa:	f240 81ea 	bls.w	8014082 <MEMS_runMagCal.constprop.14+0xd92>
 8013cae:	eb0e 0102 	add.w	r1, lr, r2
 8013cb2:	fb91 f3fc 	sdiv	r3, r1, ip
 8013cb6:	fb0c 1313 	mls	r3, ip, r3, r1
 8013cba:	b2db      	uxtb	r3, r3
 8013cbc:	3304      	adds	r3, #4
 8013cbe:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8013cc2:	3201      	adds	r2, #1
 8013cc4:	f9b3 0502 	ldrsh.w	r0, [r3, #1282]	; 0x502
 8013cc8:	f9b3 1504 	ldrsh.w	r1, [r3, #1284]	; 0x504
 8013ccc:	f9b3 3506 	ldrsh.w	r3, [r3, #1286]	; 0x506
 8013cd0:	1a28      	subs	r0, r5, r0
 8013cd2:	1a71      	subs	r1, r6, r1
 8013cd4:	ee06 0a10 	vmov	s12, r0
 8013cd8:	ee07 1a10 	vmov	s14, r1
 8013cdc:	1afb      	subs	r3, r7, r3
 8013cde:	ee07 3a90 	vmov	s15, r3
 8013ce2:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8013ce6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013cea:	eeb0 6ac6 	vabs.f32	s12, s12
 8013cee:	eeb0 7ac7 	vabs.f32	s14, s14
 8013cf2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8013cf6:	ee36 7a07 	vadd.f32	s14, s12, s14
 8013cfa:	eef0 7ae6 	vabs.f32	s15, s13
 8013cfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013d02:	b2d3      	uxtb	r3, r2
 8013d04:	eef4 9ae7 	vcmpe.f32	s19, s15
 8013d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d0c:	ddcc      	ble.n	8013ca8 <MEMS_runMagCal.constprop.14+0x9b8>
 8013d0e:	3401      	adds	r4, #1
 8013d10:	9b01      	ldr	r3, [sp, #4]
 8013d12:	b224      	sxth	r4, r4
 8013d14:	429c      	cmp	r4, r3
 8013d16:	4622      	mov	r2, r4
 8013d18:	f6ff aecd 	blt.w	8013ab6 <MEMS_runMagCal.constprop.14+0x7c6>
 8013d1c:	f8dd a018 	ldr.w	sl, [sp, #24]
 8013d20:	9a04      	ldr	r2, [sp, #16]
 8013d22:	f89b 3474 	ldrb.w	r3, [fp, #1140]	; 0x474
 8013d26:	431a      	orrs	r2, r3
 8013d28:	f88b 2474 	strb.w	r2, [fp, #1140]	; 0x474
 8013d2c:	2a00      	cmp	r2, #0
 8013d2e:	f43f ad78 	beq.w	8013822 <MEMS_runMagCal.constprop.14+0x532>
 8013d32:	f89b 3500 	ldrb.w	r3, [fp, #1280]	; 0x500
 8013d36:	9301      	str	r3, [sp, #4]
 8013d38:	2b19      	cmp	r3, #25
 8013d3a:	f67f ad72 	bls.w	8013822 <MEMS_runMagCal.constprop.14+0x532>
 8013d3e:	f8db 347c 	ldr.w	r3, [fp, #1148]	; 0x47c
 8013d42:	9302      	str	r3, [sp, #8]
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	f000 8482 	beq.w	801464e <MEMS_runMagCal.constprop.14+0x135e>
 8013d4a:	f8db 3478 	ldr.w	r3, [fp, #1144]	; 0x478
 8013d4e:	2b00      	cmp	r3, #0
 8013d50:	f000 847d 	beq.w	801464e <MEMS_runMagCal.constprop.14+0x135e>
 8013d54:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 8013d58:	ed5f 6a2e 	vldr	s13, [pc, #-184]	; 8013ca4 <MEMS_runMagCal.constprop.14+0x9b4>
 8013d5c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8013d60:	ee07 3a90 	vmov	s15, r3
 8013d64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013d68:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8013d6c:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8013d70:	eef4 7ae6 	vcmpe.f32	s15, s13
 8013d74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d78:	f200 8469 	bhi.w	801464e <MEMS_runMagCal.constprop.14+0x135e>
 8013d7c:	f1ba 0f00 	cmp.w	sl, #0
 8013d80:	f43f ad4f 	beq.w	8013822 <MEMS_runMagCal.constprop.14+0x532>
 8013d84:	eddd 7a02 	vldr	s15, [sp, #8]
 8013d88:	ed5f 6a3a 	vldr	s13, [pc, #-232]	; 8013ca4 <MEMS_runMagCal.constprop.14+0x9b4>
 8013d8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013d90:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8013d94:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8013d98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013d9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013da0:	bf4c      	ite	mi
 8013da2:	2301      	movmi	r3, #1
 8013da4:	2300      	movpl	r3, #0
 8013da6:	9303      	str	r3, [sp, #12]
 8013da8:	49e2      	ldr	r1, [pc, #904]	; (8014134 <MEMS_runMagCal.constprop.14+0xe44>)
 8013daa:	f8db 9508 	ldr.w	r9, [fp, #1288]	; 0x508
 8013dae:	edd1 8a01 	vldr	s17, [r1, #4]
 8013db2:	f8db 850c 	ldr.w	r8, [fp, #1292]	; 0x50c
 8013db6:	f8db e514 	ldr.w	lr, [fp, #1300]	; 0x514
 8013dba:	f8db c518 	ldr.w	ip, [fp, #1304]	; 0x518
 8013dbe:	f8db 7510 	ldr.w	r7, [fp, #1296]	; 0x510
 8013dc2:	f8db 651c 	ldr.w	r6, [fp, #1308]	; 0x51c
 8013dc6:	2200      	movs	r2, #0
 8013dc8:	9229      	str	r2, [sp, #164]	; 0xa4
 8013dca:	4614      	mov	r4, r2
 8013dcc:	4610      	mov	r0, r2
 8013dce:	4611      	mov	r1, r2
 8013dd0:	e9cd 222a 	strd	r2, r2, [sp, #168]	; 0xa8
 8013dd4:	e9cd 222c 	strd	r2, r2, [sp, #176]	; 0xb0
 8013dd8:	2501      	movs	r5, #1
 8013dda:	e019      	b.n	8013e10 <MEMS_runMagCal.constprop.14+0xb20>
 8013ddc:	f1a1 0320 	sub.w	r3, r1, #32
 8013de0:	fa05 f303 	lsl.w	r3, r5, r3
 8013de4:	ea19 0f03 	tst.w	r9, r3
 8013de8:	ea07 0a03 	and.w	sl, r7, r3
 8013dec:	d030      	beq.n	8013e50 <MEMS_runMagCal.constprop.14+0xb60>
 8013dee:	3001      	adds	r0, #1
 8013df0:	b2c0      	uxtb	r0, r0
 8013df2:	f1ba 0f00 	cmp.w	sl, #0
 8013df6:	d001      	beq.n	8013dfc <MEMS_runMagCal.constprop.14+0xb0c>
 8013df8:	3401      	adds	r4, #1
 8013dfa:	b2e4      	uxtb	r4, r4
 8013dfc:	4033      	ands	r3, r6
 8013dfe:	3101      	adds	r1, #1
 8013e00:	2b00      	cmp	r3, #0
 8013e02:	bf0c      	ite	eq
 8013e04:	4613      	moveq	r3, r2
 8013e06:	1c53      	addne	r3, r2, #1
 8013e08:	2940      	cmp	r1, #64	; 0x40
 8013e0a:	b2da      	uxtb	r2, r3
 8013e0c:	f000 81ae 	beq.w	801416c <MEMS_runMagCal.constprop.14+0xe7c>
 8013e10:	291f      	cmp	r1, #31
 8013e12:	d8e3      	bhi.n	8013ddc <MEMS_runMagCal.constprop.14+0xaec>
 8013e14:	fa05 f301 	lsl.w	r3, r5, r1
 8013e18:	ea08 0a03 	and.w	sl, r8, r3
 8013e1c:	f1ba 0f00 	cmp.w	sl, #0
 8013e20:	bf18      	it	ne
 8013e22:	3001      	addne	r0, #1
 8013e24:	ea1e 0f03 	tst.w	lr, r3
 8013e28:	bf18      	it	ne
 8013e2a:	3401      	addne	r4, #1
 8013e2c:	b2c0      	uxtb	r0, r0
 8013e2e:	bf18      	it	ne
 8013e30:	b2e4      	uxtbne	r4, r4
 8013e32:	ea0c 0303 	and.w	r3, ip, r3
 8013e36:	e7e2      	b.n	8013dfe <MEMS_runMagCal.constprop.14+0xb0e>
 8013e38:	2200      	movs	r2, #0
 8013e3a:	23ff      	movs	r3, #255	; 0xff
 8013e3c:	eeb0 0a49 	vmov.f32	s0, s18
 8013e40:	4648      	mov	r0, r9
 8013e42:	f88b 2500 	strb.w	r2, [fp, #1280]	; 0x500
 8013e46:	f88b 3502 	strb.w	r3, [fp, #1282]	; 0x502
 8013e4a:	f7fe fc17 	bl	801267c <MEMS_updateMagBufferIndex.constprop.24>
 8013e4e:	e60c      	b.n	8013a6a <MEMS_runMagCal.constprop.14+0x77a>
 8013e50:	f1ba 0f00 	cmp.w	sl, #0
 8013e54:	d1d0      	bne.n	8013df8 <MEMS_runMagCal.constprop.14+0xb08>
 8013e56:	e7d1      	b.n	8013dfc <MEMS_runMagCal.constprop.14+0xb0c>
 8013e58:	f9bb 0462 	ldrsh.w	r0, [fp, #1122]	; 0x462
 8013e5c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013e5e:	fb95 f1f9 	sdiv	r1, r5, r9
 8013e62:	fb02 3200 	mla	r2, r2, r0, r3
 8013e66:	fb09 5311 	mls	r3, r9, r1, r5
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	bfb8      	it	lt
 8013e6e:	444b      	addlt	r3, r9
 8013e70:	b21b      	sxth	r3, r3
 8013e72:	ee07 3a90 	vmov	s15, r3
 8013e76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013e7a:	f04f 0c01 	mov.w	ip, #1
 8013e7e:	ee67 7a88 	vmul.f32	s15, s15, s16
 8013e82:	f88b c500 	strb.w	ip, [fp, #1280]	; 0x500
 8013e86:	ee17 0a90 	vmov	r0, s15
 8013e8a:	f8cb 2504 	str.w	r2, [fp, #1284]	; 0x504
 8013e8e:	f8ab 5522 	strh.w	r5, [fp, #1314]	; 0x522
 8013e92:	f8ab 5818 	strh.w	r5, [fp, #2072]	; 0x818
 8013e96:	f8ab 6524 	strh.w	r6, [fp, #1316]	; 0x524
 8013e9a:	f8ab 681a 	strh.w	r6, [fp, #2074]	; 0x81a
 8013e9e:	f8ab 7526 	strh.w	r7, [fp, #1318]	; 0x526
 8013ea2:	f8ab 781c 	strh.w	r7, [fp, #2076]	; 0x81c
 8013ea6:	f88b 8502 	strb.w	r8, [fp, #1282]	; 0x502
 8013eaa:	f8ab 8520 	strh.w	r8, [fp, #1312]	; 0x520
 8013eae:	f00d f895 	bl	8020fdc <roundf>
 8013eb2:	fb96 f3f9 	sdiv	r3, r6, r9
 8013eb6:	ee07 0a90 	vmov	s15, r0
 8013eba:	fb09 6613 	mls	r6, r9, r3, r6
 8013ebe:	2e00      	cmp	r6, #0
 8013ec0:	bfb8      	it	lt
 8013ec2:	444e      	addlt	r6, r9
 8013ec4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013ec8:	b233      	sxth	r3, r6
 8013eca:	edcd 7a02 	vstr	s15, [sp, #8]
 8013ece:	ee07 3a90 	vmov	s15, r3
 8013ed2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013ed6:	f89d 5008 	ldrb.w	r5, [sp, #8]
 8013eda:	ee67 7a88 	vmul.f32	s15, s15, s16
 8013ede:	ee17 0a90 	vmov	r0, s15
 8013ee2:	f00d f87b 	bl	8020fdc <roundf>
 8013ee6:	fb97 f3f9 	sdiv	r3, r7, r9
 8013eea:	ee07 0a90 	vmov	s15, r0
 8013eee:	fb09 7713 	mls	r7, r9, r3, r7
 8013ef2:	2f00      	cmp	r7, #0
 8013ef4:	bfb8      	it	lt
 8013ef6:	444f      	addlt	r7, r9
 8013ef8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013efc:	b23b      	sxth	r3, r7
 8013efe:	edcd 7a02 	vstr	s15, [sp, #8]
 8013f02:	ee07 3a90 	vmov	s15, r3
 8013f06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013f0a:	f89d 6008 	ldrb.w	r6, [sp, #8]
 8013f0e:	ee67 7a88 	vmul.f32	s15, s15, s16
 8013f12:	ee17 0a90 	vmov	r0, s15
 8013f16:	f00d f861 	bl	8020fdc <roundf>
 8013f1a:	ee07 0a90 	vmov	s15, r0
 8013f1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013f22:	2d1f      	cmp	r5, #31
 8013f24:	edcd 7a02 	vstr	s15, [sp, #8]
 8013f28:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8013f2c:	f240 809b 	bls.w	8014066 <MEMS_runMagCal.constprop.14+0xd76>
 8013f30:	f8db 1508 	ldr.w	r1, [fp, #1288]	; 0x508
 8013f34:	f1a5 0220 	sub.w	r2, r5, #32
 8013f38:	2001      	movs	r0, #1
 8013f3a:	fa00 f202 	lsl.w	r2, r0, r2
 8013f3e:	ea22 0201 	bic.w	r2, r2, r1
 8013f42:	404a      	eors	r2, r1
 8013f44:	f8cb 2508 	str.w	r2, [fp, #1288]	; 0x508
 8013f48:	2e1f      	cmp	r6, #31
 8013f4a:	f240 8082 	bls.w	8014052 <MEMS_runMagCal.constprop.14+0xd62>
 8013f4e:	f8db 1510 	ldr.w	r1, [fp, #1296]	; 0x510
 8013f52:	f1a6 0220 	sub.w	r2, r6, #32
 8013f56:	2001      	movs	r0, #1
 8013f58:	fa00 f202 	lsl.w	r2, r0, r2
 8013f5c:	ea22 0201 	bic.w	r2, r2, r1
 8013f60:	404a      	eors	r2, r1
 8013f62:	f8cb 2510 	str.w	r2, [fp, #1296]	; 0x510
 8013f66:	2b1f      	cmp	r3, #31
 8013f68:	f200 80e8 	bhi.w	801413c <MEMS_runMagCal.constprop.14+0xe4c>
 8013f6c:	f8db 2518 	ldr.w	r2, [fp, #1304]	; 0x518
 8013f70:	2101      	movs	r1, #1
 8013f72:	fa01 f303 	lsl.w	r3, r1, r3
 8013f76:	ea23 0302 	bic.w	r3, r3, r2
 8013f7a:	4053      	eors	r3, r2
 8013f7c:	f8cb 3518 	str.w	r3, [fp, #1304]	; 0x518
 8013f80:	9104      	str	r1, [sp, #16]
 8013f82:	e6c4      	b.n	8013d0e <MEMS_runMagCal.constprop.14+0xa1e>
 8013f84:	b11b      	cbz	r3, 8013f8e <MEMS_runMagCal.constprop.14+0xc9e>
 8013f86:	f1be 0f00 	cmp.w	lr, #0
 8013f8a:	f47f aec0 	bne.w	8013d0e <MEMS_runMagCal.constprop.14+0xa1e>
 8013f8e:	f99b 3502 	ldrsb.w	r3, [fp, #1282]	; 0x502
 8013f92:	f89b c501 	ldrb.w	ip, [fp, #1281]	; 0x501
 8013f96:	3301      	adds	r3, #1
 8013f98:	9305      	str	r3, [sp, #20]
 8013f9a:	e663      	b.n	8013c64 <MEMS_runMagCal.constprop.14+0x974>
 8013f9c:	2201      	movs	r2, #1
 8013f9e:	fa02 f20a 	lsl.w	r2, r2, sl
 8013fa2:	4013      	ands	r3, r2
 8013fa4:	e635      	b.n	8013c12 <MEMS_runMagCal.constprop.14+0x922>
 8013fa6:	2101      	movs	r1, #1
 8013fa8:	4091      	lsls	r1, r2
 8013faa:	4001      	ands	r1, r0
 8013fac:	e64e      	b.n	8013c4c <MEMS_runMagCal.constprop.14+0x95c>
 8013fae:	4601      	mov	r1, r0
 8013fb0:	2001      	movs	r0, #1
 8013fb2:	fa00 f101 	lsl.w	r1, r0, r1
 8013fb6:	ea02 0e01 	and.w	lr, r2, r1
 8013fba:	e639      	b.n	8013c30 <MEMS_runMagCal.constprop.14+0x940>
 8013fbc:	f04f 0e01 	mov.w	lr, #1
 8013fc0:	e4e8      	b.n	8013994 <MEMS_runMagCal.constprop.14+0x6a4>
 8013fc2:	45b8      	cmp	r8, r7
 8013fc4:	f000 8377 	beq.w	80146b6 <MEMS_runMagCal.constprop.14+0x13c6>
 8013fc8:	f8db 247c 	ldr.w	r2, [fp, #1148]	; 0x47c
 8013fcc:	2d03      	cmp	r5, #3
 8013fce:	f47f ac95 	bne.w	80138fc <MEMS_runMagCal.constprop.14+0x60c>
 8013fd2:	ee07 3a90 	vmov	s15, r3
 8013fd6:	f8db 3478 	ldr.w	r3, [fp, #1144]	; 0x478
 8013fda:	eddf 6a57 	vldr	s13, [pc, #348]	; 8014138 <MEMS_runMagCal.constprop.14+0xe48>
 8013fde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013fe2:	ee07 3a10 	vmov	s14, r3
 8013fe6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013fea:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8013fee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013ff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ff6:	f77f ac81 	ble.w	80138fc <MEMS_runMagCal.constprop.14+0x60c>
 8013ffa:	2a00      	cmp	r2, #0
 8013ffc:	f43f ac7e 	beq.w	80138fc <MEMS_runMagCal.constprop.14+0x60c>
 8014000:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 8014004:	320a      	adds	r2, #10
 8014006:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801400a:	ee07 2a90 	vmov	s15, r2
 801400e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8014012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014016:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801401a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801401e:	f77f ac6d 	ble.w	80138fc <MEMS_runMagCal.constprop.14+0x60c>
 8014022:	f89b 3475 	ldrb.w	r3, [fp, #1141]	; 0x475
 8014026:	2b00      	cmp	r3, #0
 8014028:	f47f ac68 	bne.w	80138fc <MEMS_runMagCal.constprop.14+0x60c>
 801402c:	f89b 34b4 	ldrb.w	r3, [fp, #1204]	; 0x4b4
 8014030:	2b00      	cmp	r3, #0
 8014032:	f43f abf6 	beq.w	8013822 <MEMS_runMagCal.constprop.14+0x532>
 8014036:	f89b 34bc 	ldrb.w	r3, [fp, #1212]	; 0x4bc
 801403a:	2bff      	cmp	r3, #255	; 0xff
 801403c:	f47f abf1 	bne.w	8013822 <MEMS_runMagCal.constprop.14+0x532>
 8014040:	e45c      	b.n	80138fc <MEMS_runMagCal.constprop.14+0x60c>
 8014042:	f1ba 0f00 	cmp.w	sl, #0
 8014046:	f47f ad18 	bne.w	8013a7a <MEMS_runMagCal.constprop.14+0x78a>
 801404a:	2300      	movs	r3, #0
 801404c:	9304      	str	r3, [sp, #16]
 801404e:	461a      	mov	r2, r3
 8014050:	e667      	b.n	8013d22 <MEMS_runMagCal.constprop.14+0xa32>
 8014052:	f8db 1514 	ldr.w	r1, [fp, #1300]	; 0x514
 8014056:	2201      	movs	r2, #1
 8014058:	40b2      	lsls	r2, r6
 801405a:	ea22 0201 	bic.w	r2, r2, r1
 801405e:	404a      	eors	r2, r1
 8014060:	f8cb 2514 	str.w	r2, [fp, #1300]	; 0x514
 8014064:	e77f      	b.n	8013f66 <MEMS_runMagCal.constprop.14+0xc76>
 8014066:	f8db 150c 	ldr.w	r1, [fp, #1292]	; 0x50c
 801406a:	2201      	movs	r2, #1
 801406c:	40aa      	lsls	r2, r5
 801406e:	ea22 0201 	bic.w	r2, r2, r1
 8014072:	404a      	eors	r2, r1
 8014074:	f8cb 250c 	str.w	r2, [fp, #1292]	; 0x50c
 8014078:	e766      	b.n	8013f48 <MEMS_runMagCal.constprop.14+0xc58>
 801407a:	f1be 0f00 	cmp.w	lr, #0
 801407e:	f47f adf1 	bne.w	8013c64 <MEMS_runMagCal.constprop.14+0x974>
 8014082:	9b05      	ldr	r3, [sp, #20]
 8014084:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014086:	fb93 f1fc 	sdiv	r1, r3, ip
 801408a:	f108 0801 	add.w	r8, r8, #1
 801408e:	fb0c 3111 	mls	r1, ip, r1, r3
 8014092:	f8db 3504 	ldr.w	r3, [fp, #1284]	; 0x504
 8014096:	f8bb 0462 	ldrh.w	r0, [fp, #1122]	; 0x462
 801409a:	f8ab 5818 	strh.w	r5, [fp, #2072]	; 0x818
 801409e:	45e0      	cmp	r8, ip
 80140a0:	b249      	sxtb	r1, r1
 80140a2:	bfa8      	it	ge
 80140a4:	46e0      	movge	r8, ip
 80140a6:	1ad3      	subs	r3, r2, r3
 80140a8:	1d0a      	adds	r2, r1, #4
 80140aa:	eb0b 02c2 	add.w	r2, fp, r2, lsl #3
 80140ae:	fa5f f888 	uxtb.w	r8, r8
 80140b2:	fb10 3304 	smlabb	r3, r0, r4, r3
 80140b6:	45e0      	cmp	r8, ip
 80140b8:	f8ab 681a 	strh.w	r6, [fp, #2074]	; 0x81a
 80140bc:	f88b 8500 	strb.w	r8, [fp, #1280]	; 0x500
 80140c0:	f8ab 781c 	strh.w	r7, [fp, #2076]	; 0x81c
 80140c4:	f88b 1502 	strb.w	r1, [fp, #1282]	; 0x502
 80140c8:	f8a2 5502 	strh.w	r5, [r2, #1282]	; 0x502
 80140cc:	f8a2 6504 	strh.w	r6, [r2, #1284]	; 0x504
 80140d0:	f8a2 7506 	strh.w	r7, [r2, #1286]	; 0x506
 80140d4:	f8a2 3500 	strh.w	r3, [r2, #1280]	; 0x500
 80140d8:	f000 836c 	beq.w	80147b4 <MEMS_runMagCal.constprop.14+0x14c4>
 80140dc:	f1ba 0f1f 	cmp.w	sl, #31
 80140e0:	f240 82d0 	bls.w	8014684 <MEMS_runMagCal.constprop.14+0x1394>
 80140e4:	f8db 2508 	ldr.w	r2, [fp, #1288]	; 0x508
 80140e8:	f1aa 0320 	sub.w	r3, sl, #32
 80140ec:	2101      	movs	r1, #1
 80140ee:	fa01 f303 	lsl.w	r3, r1, r3
 80140f2:	ea23 0302 	bic.w	r3, r3, r2
 80140f6:	4053      	eors	r3, r2
 80140f8:	f8cb 3508 	str.w	r3, [fp, #1288]	; 0x508
 80140fc:	9b02      	ldr	r3, [sp, #8]
 80140fe:	2b1f      	cmp	r3, #31
 8014100:	f240 82b5 	bls.w	801466e <MEMS_runMagCal.constprop.14+0x137e>
 8014104:	f8db 2510 	ldr.w	r2, [fp, #1296]	; 0x510
 8014108:	3b20      	subs	r3, #32
 801410a:	2101      	movs	r1, #1
 801410c:	fa01 f303 	lsl.w	r3, r1, r3
 8014110:	ea23 0302 	bic.w	r3, r3, r2
 8014114:	4053      	eors	r3, r2
 8014116:	f8cb 3510 	str.w	r3, [fp, #1296]	; 0x510
 801411a:	9b03      	ldr	r3, [sp, #12]
 801411c:	2b1f      	cmp	r3, #31
 801411e:	f200 82bc 	bhi.w	801469a <MEMS_runMagCal.constprop.14+0x13aa>
 8014122:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 8014126:	9301      	str	r3, [sp, #4]
 8014128:	f8db 2518 	ldr.w	r2, [fp, #1304]	; 0x518
 801412c:	9b03      	ldr	r3, [sp, #12]
 801412e:	2101      	movs	r1, #1
 8014130:	e71f      	b.n	8013f72 <MEMS_runMagCal.constprop.14+0xc82>
 8014132:	bf00      	nop
 8014134:	20004fa0 	.word	0x20004fa0
 8014138:	3a83126f 	.word	0x3a83126f
 801413c:	f8db 251c 	ldr.w	r2, [fp, #1308]	; 0x51c
 8014140:	3b20      	subs	r3, #32
 8014142:	2101      	movs	r1, #1
 8014144:	fa01 f303 	lsl.w	r3, r1, r3
 8014148:	ea23 0302 	bic.w	r3, r3, r2
 801414c:	4053      	eors	r3, r2
 801414e:	f8cb 351c 	str.w	r3, [fp, #1308]	; 0x51c
 8014152:	9104      	str	r1, [sp, #16]
 8014154:	e5db      	b.n	8013d0e <MEMS_runMagCal.constprop.14+0xa1e>
 8014156:	f04f 0a00 	mov.w	sl, #0
 801415a:	f04f 0901 	mov.w	r9, #1
 801415e:	f7ff bb29 	b.w	80137b4 <MEMS_runMagCal.constprop.14+0x4c4>
 8014162:	f04f 0a00 	mov.w	sl, #0
 8014166:	46d1      	mov	r9, sl
 8014168:	f7ff bb24 	b.w	80137b4 <MEMS_runMagCal.constprop.14+0x4c4>
 801416c:	2805      	cmp	r0, #5
 801416e:	f240 8269 	bls.w	8014644 <MEMS_runMagCal.constprop.14+0x1354>
 8014172:	2c05      	cmp	r4, #5
 8014174:	f240 8266 	bls.w	8014644 <MEMS_runMagCal.constprop.14+0x1354>
 8014178:	2a05      	cmp	r2, #5
 801417a:	f240 8263 	bls.w	8014644 <MEMS_runMagCal.constprop.14+0x1354>
 801417e:	f89b 6501 	ldrb.w	r6, [fp, #1281]	; 0x501
 8014182:	9a01      	ldr	r2, [sp, #4]
 8014184:	f99b a502 	ldrsb.w	sl, [fp, #1282]	; 0x502
 8014188:	42b2      	cmp	r2, r6
 801418a:	f10a 0301 	add.w	r3, sl, #1
 801418e:	f000 8367 	beq.w	8014860 <MEMS_runMagCal.constprop.14+0x1570>
 8014192:	1a9a      	subs	r2, r3, r2
 8014194:	fb92 f3f6 	sdiv	r3, r2, r6
 8014198:	fb06 2313 	mls	r3, r6, r3, r2
 801419c:	2b00      	cmp	r3, #0
 801419e:	b219      	sxth	r1, r3
 80141a0:	bfbc      	itt	lt
 80141a2:	199b      	addlt	r3, r3, r6
 80141a4:	b219      	sxthlt	r1, r3
 80141a6:	f101 0315 	add.w	r3, r1, #21
 80141aa:	00db      	lsls	r3, r3, #3
 80141ac:	eb0b 0203 	add.w	r2, fp, r3
 80141b0:	489b      	ldr	r0, [pc, #620]	; (8014420 <MEMS_runMagCal.constprop.14+0x1130>)
 80141b2:	f9b2 547e 	ldrsh.w	r5, [r2, #1150]	; 0x47e
 80141b6:	f9b2 c47a 	ldrsh.w	ip, [r2, #1146]	; 0x47a
 80141ba:	f9b2 747c 	ldrsh.w	r7, [r2, #1148]	; 0x47c
 80141be:	f8ad 5048 	strh.w	r5, [sp, #72]	; 0x48
 80141c2:	2200      	movs	r2, #0
 80141c4:	4403      	add	r3, r0
 80141c6:	e9cd 2206 	strd	r2, r2, [sp, #24]
 80141ca:	f8d3 301a 	ldr.w	r3, [r3, #26]
 80141ce:	9311      	str	r3, [sp, #68]	; 0x44
 80141d0:	9313      	str	r3, [sp, #76]	; 0x4c
 80141d2:	46e0      	mov	r8, ip
 80141d4:	f8ad 5050 	strh.w	r5, [sp, #80]	; 0x50
 80141d8:	46a9      	mov	r9, r5
 80141da:	46be      	mov	lr, r7
 80141dc:	920a      	str	r2, [sp, #40]	; 0x28
 80141de:	9208      	str	r2, [sp, #32]
 80141e0:	920b      	str	r2, [sp, #44]	; 0x2c
 80141e2:	9205      	str	r2, [sp, #20]
 80141e4:	9104      	str	r1, [sp, #16]
 80141e6:	9b04      	ldr	r3, [sp, #16]
 80141e8:	1898      	adds	r0, r3, r2
 80141ea:	fb90 f3f6 	sdiv	r3, r0, r6
 80141ee:	fb06 0313 	mls	r3, r6, r3, r0
 80141f2:	b2db      	uxtb	r3, r3
 80141f4:	3315      	adds	r3, #21
 80141f6:	eb0b 00c3 	add.w	r0, fp, r3, lsl #3
 80141fa:	f9b0 447a 	ldrsh.w	r4, [r0, #1146]	; 0x47a
 80141fe:	4564      	cmp	r4, ip
 8014200:	dd02      	ble.n	8014208 <MEMS_runMagCal.constprop.14+0xf18>
 8014202:	2001      	movs	r0, #1
 8014204:	46a4      	mov	ip, r4
 8014206:	900b      	str	r0, [sp, #44]	; 0x2c
 8014208:	eb0b 00c3 	add.w	r0, fp, r3, lsl #3
 801420c:	f9b0 047c 	ldrsh.w	r0, [r0, #1148]	; 0x47c
 8014210:	42b8      	cmp	r0, r7
 8014212:	dd02      	ble.n	801421a <MEMS_runMagCal.constprop.14+0xf2a>
 8014214:	2101      	movs	r1, #1
 8014216:	4607      	mov	r7, r0
 8014218:	910a      	str	r1, [sp, #40]	; 0x28
 801421a:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 801421e:	f9b3 347e 	ldrsh.w	r3, [r3, #1150]	; 0x47e
 8014222:	42ab      	cmp	r3, r5
 8014224:	dd02      	ble.n	801422c <MEMS_runMagCal.constprop.14+0xf3c>
 8014226:	2101      	movs	r1, #1
 8014228:	461d      	mov	r5, r3
 801422a:	9108      	str	r1, [sp, #32]
 801422c:	4544      	cmp	r4, r8
 801422e:	da02      	bge.n	8014236 <MEMS_runMagCal.constprop.14+0xf46>
 8014230:	2101      	movs	r1, #1
 8014232:	46a0      	mov	r8, r4
 8014234:	9107      	str	r1, [sp, #28]
 8014236:	4570      	cmp	r0, lr
 8014238:	da02      	bge.n	8014240 <MEMS_runMagCal.constprop.14+0xf50>
 801423a:	2101      	movs	r1, #1
 801423c:	4686      	mov	lr, r0
 801423e:	9106      	str	r1, [sp, #24]
 8014240:	454b      	cmp	r3, r9
 8014242:	da02      	bge.n	801424a <MEMS_runMagCal.constprop.14+0xf5a>
 8014244:	4699      	mov	r9, r3
 8014246:	2301      	movs	r3, #1
 8014248:	9305      	str	r3, [sp, #20]
 801424a:	3201      	adds	r2, #1
 801424c:	9801      	ldr	r0, [sp, #4]
 801424e:	b2d3      	uxtb	r3, r2
 8014250:	4298      	cmp	r0, r3
 8014252:	d8c8      	bhi.n	80141e6 <MEMS_runMagCal.constprop.14+0xef6>
 8014254:	9b06      	ldr	r3, [sp, #24]
 8014256:	9904      	ldr	r1, [sp, #16]
 8014258:	2b00      	cmp	r3, #0
 801425a:	f040 8324 	bne.w	80148a6 <MEMS_runMagCal.constprop.14+0x15b6>
 801425e:	9b07      	ldr	r3, [sp, #28]
 8014260:	b10b      	cbz	r3, 8014266 <MEMS_runMagCal.constprop.14+0xf76>
 8014262:	f8ad 804c 	strh.w	r8, [sp, #76]	; 0x4c
 8014266:	9b05      	ldr	r3, [sp, #20]
 8014268:	b10b      	cbz	r3, 801426e <MEMS_runMagCal.constprop.14+0xf7e>
 801426a:	f8ad 9050 	strh.w	r9, [sp, #80]	; 0x50
 801426e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014270:	b10b      	cbz	r3, 8014276 <MEMS_runMagCal.constprop.14+0xf86>
 8014272:	f8ad c044 	strh.w	ip, [sp, #68]	; 0x44
 8014276:	9b08      	ldr	r3, [sp, #32]
 8014278:	b10b      	cbz	r3, 801427e <MEMS_runMagCal.constprop.14+0xf8e>
 801427a:	f8ad 5048 	strh.w	r5, [sp, #72]	; 0x48
 801427e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014280:	b10b      	cbz	r3, 8014286 <MEMS_runMagCal.constprop.14+0xf96>
 8014282:	f8ad 7046 	strh.w	r7, [sp, #70]	; 0x46
 8014286:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801428a:	ee87 9aa8 	vdiv.f32	s18, s15, s17
 801428e:	f8bd 5046 	ldrh.w	r5, [sp, #70]	; 0x46
 8014292:	f8bd 004e 	ldrh.w	r0, [sp, #78]	; 0x4e
 8014296:	f8bd 7044 	ldrh.w	r7, [sp, #68]	; 0x44
 801429a:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
 801429e:	f8bd 4048 	ldrh.w	r4, [sp, #72]	; 0x48
 80142a2:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 80142a6:	1a28      	subs	r0, r5, r0
 80142a8:	f89b 54b4 	ldrb.w	r5, [fp, #1204]	; 0x4b4
 80142ac:	1aba      	subs	r2, r7, r2
 80142ae:	1ae3      	subs	r3, r4, r3
 80142b0:	b212      	sxth	r2, r2
 80142b2:	ed9f 5a5c 	vldr	s10, [pc, #368]	; 8014424 <MEMS_runMagCal.constprop.14+0x1134>
 80142b6:	b200      	sxth	r0, r0
 80142b8:	ee29 5a05 	vmul.f32	s10, s18, s10
 80142bc:	b21b      	sxth	r3, r3
 80142be:	2d00      	cmp	r5, #0
 80142c0:	f040 82b5 	bne.w	801482e <MEMS_runMagCal.constprop.14+0x153e>
 80142c4:	f89b 44cc 	ldrb.w	r4, [fp, #1228]	; 0x4cc
 80142c8:	fab4 f484 	clz	r4, r4
 80142cc:	0964      	lsrs	r4, r4, #5
 80142ce:	9404      	str	r4, [sp, #16]
 80142d0:	ee07 2a10 	vmov	s14, r2
 80142d4:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 80142d8:	ee65 7a27 	vmul.f32	s15, s10, s15
 80142dc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80142e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80142e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142e8:	f300 8285 	bgt.w	80147f6 <MEMS_runMagCal.constprop.14+0x1506>
 80142ec:	ee06 0a90 	vmov	s13, r0
 80142f0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80142f4:	eef4 7ae6 	vcmpe.f32	s15, s13
 80142f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142fc:	f100 827b 	bmi.w	80147f6 <MEMS_runMagCal.constprop.14+0x1506>
 8014300:	ee06 3a10 	vmov	s12, r3
 8014304:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8014308:	eef4 7ac6 	vcmpe.f32	s15, s12
 801430c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014310:	f100 8271 	bmi.w	80147f6 <MEMS_runMagCal.constprop.14+0x1506>
 8014314:	4293      	cmp	r3, r2
 8014316:	461c      	mov	r4, r3
 8014318:	bfa8      	it	ge
 801431a:	4614      	movge	r4, r2
 801431c:	b224      	sxth	r4, r4
 801431e:	4284      	cmp	r4, r0
 8014320:	bfa8      	it	ge
 8014322:	4604      	movge	r4, r0
 8014324:	4290      	cmp	r0, r2
 8014326:	4605      	mov	r5, r0
 8014328:	bfb8      	it	lt
 801432a:	4615      	movlt	r5, r2
 801432c:	429c      	cmp	r4, r3
 801432e:	bfa8      	it	ge
 8014330:	461c      	movge	r4, r3
 8014332:	429d      	cmp	r5, r3
 8014334:	bfb8      	it	lt
 8014336:	461d      	movlt	r5, r3
 8014338:	fa0f fa85 	sxth.w	sl, r5
 801433c:	b224      	sxth	r4, r4
 801433e:	4592      	cmp	sl, r2
 8014340:	f8ad 404e 	strh.w	r4, [sp, #78]	; 0x4e
 8014344:	f340 8276 	ble.w	8014834 <MEMS_runMagCal.constprop.14+0x1544>
 8014348:	4294      	cmp	r4, r2
 801434a:	f280 8273 	bge.w	8014834 <MEMS_runMagCal.constprop.14+0x1544>
 801434e:	2501      	movs	r5, #1
 8014350:	4582      	cmp	sl, r0
 8014352:	f300 8299 	bgt.w	8014888 <MEMS_runMagCal.constprop.14+0x1598>
 8014356:	4553      	cmp	r3, sl
 8014358:	f280 8291 	bge.w	801487e <MEMS_runMagCal.constprop.14+0x158e>
 801435c:	42a3      	cmp	r3, r4
 801435e:	f340 828e 	ble.w	801487e <MEMS_runMagCal.constprop.14+0x158e>
 8014362:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
 8014366:	9b04      	ldr	r3, [sp, #16]
 8014368:	2b00      	cmp	r3, #0
 801436a:	f000 8142 	beq.w	80145f2 <MEMS_runMagCal.constprop.14+0x1302>
 801436e:	eeb4 5ac7 	vcmpe.f32	s10, s14
 8014372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014376:	dc0c      	bgt.n	8014392 <MEMS_runMagCal.constprop.14+0x10a2>
 8014378:	eeb4 5ae6 	vcmpe.f32	s10, s13
 801437c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014380:	dc07      	bgt.n	8014392 <MEMS_runMagCal.constprop.14+0x10a2>
 8014382:	eeb4 5ac6 	vcmpe.f32	s10, s12
 8014386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801438a:	bfcc      	ite	gt
 801438c:	2301      	movgt	r3, #1
 801438e:	2300      	movle	r3, #0
 8014390:	9304      	str	r3, [sp, #16]
 8014392:	eddf 7a25 	vldr	s15, [pc, #148]	; 8014428 <MEMS_runMagCal.constprop.14+0x1138>
 8014396:	ee05 aa90 	vmov	s11, sl
 801439a:	ee65 7a27 	vmul.f32	s15, s10, s15
 801439e:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80143a2:	eef4 5ae7 	vcmpe.f32	s11, s15
 80143a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143aa:	db1e      	blt.n	80143ea <MEMS_runMagCal.constprop.14+0x10fa>
 80143ac:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 80143b0:	ee05 3a90 	vmov	s11, r3
 80143b4:	eef7 7a02 	vmov.f32	s15, #114	; 0x3f900000  1.125
 80143b8:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80143bc:	ee65 7a27 	vmul.f32	s15, s10, s15
 80143c0:	eef4 5ae7 	vcmpe.f32	s11, s15
 80143c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143c8:	db0f      	blt.n	80143ea <MEMS_runMagCal.constprop.14+0x10fa>
 80143ca:	ebba 0f44 	cmp.w	sl, r4, lsl #1
 80143ce:	da0c      	bge.n	80143ea <MEMS_runMagCal.constprop.14+0x10fa>
 80143d0:	ee07 4a90 	vmov	s15, r4
 80143d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80143d8:	eef7 5a04 	vmov.f32	s11, #116	; 0x3fa00000  1.250
 80143dc:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80143e0:	eeb4 5ae7 	vcmpe.f32	s10, s15
 80143e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143e8:	d422      	bmi.n	8014430 <MEMS_runMagCal.constprop.14+0x1140>
 80143ea:	eef7 7a02 	vmov.f32	s15, #114	; 0x3f900000  1.125
 80143ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80143f2:	eeb4 5ac7 	vcmpe.f32	s10, s14
 80143f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143fa:	f300 8123 	bgt.w	8014644 <MEMS_runMagCal.constprop.14+0x1354>
 80143fe:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8014402:	eeb4 5ae6 	vcmpe.f32	s10, s13
 8014406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801440a:	f300 811b 	bgt.w	8014644 <MEMS_runMagCal.constprop.14+0x1354>
 801440e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8014412:	eeb4 5ae7 	vcmpe.f32	s10, s15
 8014416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801441a:	f300 8113 	bgt.w	8014644 <MEMS_runMagCal.constprop.14+0x1354>
 801441e:	e007      	b.n	8014430 <MEMS_runMagCal.constprop.14+0x1140>
 8014420:	20004fa0 	.word	0x20004fa0
 8014424:	42340000 	.word	0x42340000
 8014428:	3faccccd 	.word	0x3faccccd
 801442c:	00000000 	.word	0x00000000
 8014430:	fa4f f981 	sxtb.w	r9, r1
 8014434:	2700      	movs	r7, #0
 8014436:	f109 0301 	add.w	r3, r9, #1
 801443a:	9302      	str	r3, [sp, #8]
 801443c:	46b8      	mov	r8, r7
 801443e:	463b      	mov	r3, r7
 8014440:	f04f 0e01 	mov.w	lr, #1
 8014444:	9a02      	ldr	r2, [sp, #8]
 8014446:	eb09 0103 	add.w	r1, r9, r3
 801444a:	441a      	add	r2, r3
 801444c:	fb91 f3f6 	sdiv	r3, r1, r6
 8014450:	fb06 1313 	mls	r3, r6, r3, r1
 8014454:	b25c      	sxtb	r4, r3
 8014456:	2c00      	cmp	r4, #0
 8014458:	bfb8      	it	lt
 801445a:	199b      	addlt	r3, r3, r6
 801445c:	fb92 f1f6 	sdiv	r1, r2, r6
 8014460:	fb06 2111 	mls	r1, r6, r1, r2
 8014464:	bfb8      	it	lt
 8014466:	b25c      	sxtblt	r4, r3
 8014468:	b249      	sxtb	r1, r1
 801446a:	3104      	adds	r1, #4
 801446c:	3404      	adds	r4, #4
 801446e:	eb0b 02c4 	add.w	r2, fp, r4, lsl #3
 8014472:	eb0b 03c1 	add.w	r3, fp, r1, lsl #3
 8014476:	f9b2 0502 	ldrsh.w	r0, [r2, #1282]	; 0x502
 801447a:	f9b3 3502 	ldrsh.w	r3, [r3, #1282]	; 0x502
 801447e:	1a1a      	subs	r2, r3, r0
 8014480:	2a00      	cmp	r2, #0
 8014482:	b29b      	uxth	r3, r3
 8014484:	b280      	uxth	r0, r0
 8014486:	bfb4      	ite	lt
 8014488:	1ac3      	sublt	r3, r0, r3
 801448a:	1a1b      	subge	r3, r3, r0
 801448c:	eb0b 02c4 	add.w	r2, fp, r4, lsl #3
 8014490:	b218      	sxth	r0, r3
 8014492:	eb0b 03c1 	add.w	r3, fp, r1, lsl #3
 8014496:	f9b2 2504 	ldrsh.w	r2, [r2, #1284]	; 0x504
 801449a:	f9b3 3504 	ldrsh.w	r3, [r3, #1284]	; 0x504
 801449e:	1a9d      	subs	r5, r3, r2
 80144a0:	2d00      	cmp	r5, #0
 80144a2:	b29b      	uxth	r3, r3
 80144a4:	b292      	uxth	r2, r2
 80144a6:	bfb4      	ite	lt
 80144a8:	1ad3      	sublt	r3, r2, r3
 80144aa:	1a9b      	subge	r3, r3, r2
 80144ac:	eb0b 05c1 	add.w	r5, fp, r1, lsl #3
 80144b0:	eb0b 02c4 	add.w	r2, fp, r4, lsl #3
 80144b4:	eb0b 01c1 	add.w	r1, fp, r1, lsl #3
 80144b8:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 80144bc:	f9b5 5506 	ldrsh.w	r5, [r5, #1286]	; 0x506
 80144c0:	f9b2 2506 	ldrsh.w	r2, [r2, #1286]	; 0x506
 80144c4:	f8b1 1500 	ldrh.w	r1, [r1, #1280]	; 0x500
 80144c8:	f8b4 4500 	ldrh.w	r4, [r4, #1280]	; 0x500
 80144cc:	eba5 0c02 	sub.w	ip, r5, r2
 80144d0:	1b09      	subs	r1, r1, r4
 80144d2:	b292      	uxth	r2, r2
 80144d4:	f1bc 0f00 	cmp.w	ip, #0
 80144d8:	b2ad      	uxth	r5, r5
 80144da:	b209      	sxth	r1, r1
 80144dc:	bfb4      	ite	lt
 80144de:	1b52      	sublt	r2, r2, r5
 80144e0:	1aaa      	subge	r2, r5, r2
 80144e2:	2900      	cmp	r1, #0
 80144e4:	b21b      	sxth	r3, r3
 80144e6:	b212      	sxth	r2, r2
 80144e8:	dd1e      	ble.n	8014528 <MEMS_runMagCal.constprop.14+0x1238>
 80144ea:	4403      	add	r3, r0
 80144ec:	441a      	add	r2, r3
 80144ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80144f2:	fb03 f202 	mul.w	r2, r3, r2
 80144f6:	ee07 2a90 	vmov	s15, r2
 80144fa:	ee07 1a10 	vmov	s14, r1
 80144fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014502:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014506:	ee67 7aa8 	vmul.f32	s15, s15, s17
 801450a:	f108 0801 	add.w	r8, r8, #1
 801450e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8014512:	fa5f f888 	uxtb.w	r8, r8
 8014516:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 801451a:	ee17 3a90 	vmov	r3, s15
 801451e:	b21b      	sxth	r3, r3
 8014520:	2b96      	cmp	r3, #150	; 0x96
 8014522:	bfc4      	itt	gt
 8014524:	3701      	addgt	r7, #1
 8014526:	b2ff      	uxtbgt	r7, r7
 8014528:	4673      	mov	r3, lr
 801452a:	9901      	ldr	r1, [sp, #4]
 801452c:	f10e 0e01 	add.w	lr, lr, #1
 8014530:	fa5f f28e 	uxtb.w	r2, lr
 8014534:	4291      	cmp	r1, r2
 8014536:	d885      	bhi.n	8014444 <MEMS_runMagCal.constprop.14+0x1154>
 8014538:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801453c:	4547      	cmp	r7, r8
 801453e:	f340 8081 	ble.w	8014644 <MEMS_runMagCal.constprop.14+0x1354>
 8014542:	9b03      	ldr	r3, [sp, #12]
 8014544:	b92b      	cbnz	r3, 8014552 <MEMS_runMagCal.constprop.14+0x1262>
 8014546:	f89b 34cc 	ldrb.w	r3, [fp, #1228]	; 0x4cc
 801454a:	3b02      	subs	r3, #2
 801454c:	2b01      	cmp	r3, #1
 801454e:	f240 81ad 	bls.w	80148ac <MEMS_runMagCal.constprop.14+0x15bc>
 8014552:	2220      	movs	r2, #32
 8014554:	2100      	movs	r1, #0
 8014556:	a82e      	add	r0, sp, #184	; 0xb8
 8014558:	f00e f99e 	bl	8022898 <memset>
 801455c:	f89b 8500 	ldrb.w	r8, [fp, #1280]	; 0x500
 8014560:	f89b 2501 	ldrb.w	r2, [fp, #1281]	; 0x501
 8014564:	f99b 3502 	ldrsb.w	r3, [fp, #1282]	; 0x502
 8014568:	2100      	movs	r1, #0
 801456a:	4590      	cmp	r8, r2
 801456c:	e9cd 111a 	strd	r1, r1, [sp, #104]	; 0x68
 8014570:	911c      	str	r1, [sp, #112]	; 0x70
 8014572:	f103 0301 	add.w	r3, r3, #1
 8014576:	f000 824f 	beq.w	8014a18 <MEMS_runMagCal.constprop.14+0x1728>
 801457a:	eba3 0308 	sub.w	r3, r3, r8
 801457e:	fb93 f1f2 	sdiv	r1, r3, r2
 8014582:	fb02 3311 	mls	r3, r2, r1, r3
 8014586:	2b00      	cmp	r3, #0
 8014588:	b219      	sxth	r1, r3
 801458a:	bfbc      	itt	lt
 801458c:	189b      	addlt	r3, r3, r2
 801458e:	b219      	sxthlt	r1, r3
 8014590:	ed5f 7a5a 	vldr	s15, [pc, #-360]	; 801442c <MEMS_runMagCal.constprop.14+0x113c>
 8014594:	2000      	movs	r0, #0
 8014596:	eeb0 7a67 	vmov.f32	s14, s15
 801459a:	eef0 6a67 	vmov.f32	s13, s15
 801459e:	4604      	mov	r4, r0
 80145a0:	b2c3      	uxtb	r3, r0
 80145a2:	4598      	cmp	r8, r3
 80145a4:	eb01 0500 	add.w	r5, r1, r0
 80145a8:	f240 81d4 	bls.w	8014954 <MEMS_runMagCal.constprop.14+0x1664>
 80145ac:	fb95 f3f2 	sdiv	r3, r5, r2
 80145b0:	fb02 5313 	mls	r3, r2, r3, r5
 80145b4:	b2db      	uxtb	r3, r3
 80145b6:	3304      	adds	r3, #4
 80145b8:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 80145bc:	3001      	adds	r0, #1
 80145be:	f9b3 4502 	ldrsh.w	r4, [r3, #1282]	; 0x502
 80145c2:	ee05 4a10 	vmov	s10, r4
 80145c6:	f9b3 4504 	ldrsh.w	r4, [r3, #1284]	; 0x504
 80145ca:	f9b3 3506 	ldrsh.w	r3, [r3, #1286]	; 0x506
 80145ce:	ee05 4a90 	vmov	s11, r4
 80145d2:	ee06 3a10 	vmov	s12, r3
 80145d6:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 80145da:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80145de:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80145e2:	ee76 6a85 	vadd.f32	s13, s13, s10
 80145e6:	ee37 7a25 	vadd.f32	s14, s14, s11
 80145ea:	ee77 7a86 	vadd.f32	s15, s15, s12
 80145ee:	2401      	movs	r4, #1
 80145f0:	e7d6      	b.n	80145a0 <MEMS_runMagCal.constprop.14+0x12b0>
 80145f2:	4bcb      	ldr	r3, [pc, #812]	; (8014920 <MEMS_runMagCal.constprop.14+0x1630>)
 80145f4:	ed9f 4ad0 	vldr	s8, [pc, #832]	; 8014938 <MEMS_runMagCal.constprop.14+0x1648>
 80145f8:	edd3 4a23 	vldr	s9, [r3, #140]	; 0x8c
 80145fc:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8014600:	edd3 5a27 	vldr	s11, [r3, #156]	; 0x9c
 8014604:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8014608:	eef7 4a02 	vmov.f32	s9, #114	; 0x3f900000  1.125
 801460c:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8014610:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8014614:	ee67 7a84 	vmul.f32	s15, s15, s8
 8014618:	eef4 7ae4 	vcmpe.f32	s15, s9
 801461c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014620:	bf88      	it	hi
 8014622:	eef0 7a64 	vmovhi.f32	s15, s9
 8014626:	eef4 7ae5 	vcmpe.f32	s15, s11
 801462a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801462e:	bfb8      	it	lt
 8014630:	eef0 7a65 	vmovlt.f32	s15, s11
 8014634:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014638:	eeb4 5ac7 	vcmpe.f32	s10, s14
 801463c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014640:	f77f aedd 	ble.w	80143fe <MEMS_runMagCal.constprop.14+0x110e>
 8014644:	2300      	movs	r3, #0
 8014646:	f88b 3474 	strb.w	r3, [fp, #1140]	; 0x474
 801464a:	f7ff b8ea 	b.w	8013822 <MEMS_runMagCal.constprop.14+0x532>
 801464e:	f1ba 0f00 	cmp.w	sl, #0
 8014652:	f040 80b5 	bne.w	80147c0 <MEMS_runMagCal.constprop.14+0x14d0>
 8014656:	2300      	movs	r3, #0
 8014658:	9303      	str	r3, [sp, #12]
 801465a:	f7ff bba5 	b.w	8013da8 <MEMS_runMagCal.constprop.14+0xab8>
 801465e:	fb93 fef8 	sdiv	lr, r3, r8
 8014662:	fb08 3e1e 	mls	lr, r8, lr, r3
 8014666:	fa0f fe8e 	sxth.w	lr, lr
 801466a:	f7ff bb0c 	b.w	8013c86 <MEMS_runMagCal.constprop.14+0x996>
 801466e:	f8db 2514 	ldr.w	r2, [fp, #1300]	; 0x514
 8014672:	2101      	movs	r1, #1
 8014674:	fa01 f303 	lsl.w	r3, r1, r3
 8014678:	ea23 0302 	bic.w	r3, r3, r2
 801467c:	4053      	eors	r3, r2
 801467e:	f8cb 3514 	str.w	r3, [fp, #1300]	; 0x514
 8014682:	e54a      	b.n	801411a <MEMS_runMagCal.constprop.14+0xe2a>
 8014684:	f8db 250c 	ldr.w	r2, [fp, #1292]	; 0x50c
 8014688:	2301      	movs	r3, #1
 801468a:	fa03 f30a 	lsl.w	r3, r3, sl
 801468e:	ea23 0302 	bic.w	r3, r3, r2
 8014692:	4053      	eors	r3, r2
 8014694:	f8cb 350c 	str.w	r3, [fp, #1292]	; 0x50c
 8014698:	e530      	b.n	80140fc <MEMS_runMagCal.constprop.14+0xe0c>
 801469a:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
 801469e:	f8db 251c 	ldr.w	r2, [fp, #1308]	; 0x51c
 80146a2:	9101      	str	r1, [sp, #4]
 80146a4:	3b20      	subs	r3, #32
 80146a6:	e54c      	b.n	8014142 <MEMS_runMagCal.constprop.14+0xe52>
 80146a8:	fb92 f6f5 	sdiv	r6, r2, r5
 80146ac:	fb05 2216 	mls	r2, r5, r6, r2
 80146b0:	b216      	sxth	r6, r2
 80146b2:	f7ff b964 	b.w	801397e <MEMS_runMagCal.constprop.14+0x68e>
 80146b6:	eddf 6aa2 	vldr	s13, [pc, #648]	; 8014940 <MEMS_runMagCal.constprop.14+0x1650>
 80146ba:	3401      	adds	r4, #1
 80146bc:	f10d 0938 	add.w	r9, sp, #56	; 0x38
 80146c0:	fb94 fef7 	sdiv	lr, r4, r7
 80146c4:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 80146c8:	fb07 441e 	mls	r4, r7, lr, r4
 80146cc:	edc9 6a00 	vstr	s13, [r9]
 80146d0:	2f00      	cmp	r7, #0
 80146d2:	f000 80cb 	beq.w	801486c <MEMS_runMagCal.constprop.14+0x157c>
 80146d6:	fa1f fe84 	uxth.w	lr, r4
 80146da:	1e79      	subs	r1, r7, #1
 80146dc:	2000      	movs	r0, #0
 80146de:	1c72      	adds	r2, r6, #1
 80146e0:	fa12 f881 	uxtah	r8, r2, r1
 80146e4:	9301      	str	r3, [sp, #4]
 80146e6:	eeb0 6a66 	vmov.f32	s12, s13
 80146ea:	ebae 0e06 	sub.w	lr, lr, r6
 80146ee:	4604      	mov	r4, r0
 80146f0:	4631      	mov	r1, r6
 80146f2:	f241 2c5c 	movw	ip, #4700	; 0x125c
 80146f6:	4603      	mov	r3, r0
 80146f8:	428e      	cmp	r6, r1
 80146fa:	eb0e 0201 	add.w	r2, lr, r1
 80146fe:	dc21      	bgt.n	8014744 <MEMS_runMagCal.constprop.14+0x1454>
 8014700:	fb92 f0f7 	sdiv	r0, r2, r7
 8014704:	fb07 2210 	mls	r2, r7, r0, r2
 8014708:	eb0b 0242 	add.w	r2, fp, r2, lsl #1
 801470c:	2301      	movs	r3, #1
 801470e:	f8b2 0488 	ldrh.w	r0, [r2, #1160]	; 0x488
 8014712:	f5a0 5292 	sub.w	r2, r0, #4672	; 0x1240
 8014716:	4560      	cmp	r0, ip
 8014718:	f1a2 021c 	sub.w	r2, r2, #28
 801471c:	bf98      	it	ls
 801471e:	ebac 0200 	subls.w	r2, ip, r0
 8014722:	b292      	uxth	r2, r2
 8014724:	fb02 f202 	mul.w	r2, r2, r2
 8014728:	ee07 2a90 	vmov	s15, r2
 801472c:	ee07 0a10 	vmov	s14, r0
 8014730:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014734:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014738:	441c      	add	r4, r3
 801473a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 801473e:	ee36 6a07 	vadd.f32	s12, s12, s14
 8014742:	b2a4      	uxth	r4, r4
 8014744:	3101      	adds	r1, #1
 8014746:	4588      	cmp	r8, r1
 8014748:	d1d6      	bne.n	80146f8 <MEMS_runMagCal.constprop.14+0x1408>
 801474a:	461a      	mov	r2, r3
 801474c:	9b01      	ldr	r3, [sp, #4]
 801474e:	2a00      	cmp	r2, #0
 8014750:	f040 815d 	bne.w	8014a0e <MEMS_runMagCal.constprop.14+0x171e>
 8014754:	ed99 7a00 	vldr	s14, [r9]
 8014758:	b1ac      	cbz	r4, 8014786 <MEMS_runMagCal.constprop.14+0x1496>
 801475a:	ee07 4a90 	vmov	s15, r4
 801475e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014762:	ed9d 5a0d 	vldr	s10, [sp, #52]	; 0x34
 8014766:	ed9f 6a6f 	vldr	s12, [pc, #444]	; 8014924 <MEMS_runMagCal.constprop.14+0x1634>
 801476a:	eec7 5a27 	vdiv.f32	s11, s14, s15
 801476e:	eec5 6a27 	vdiv.f32	s13, s10, s15
 8014772:	eeb1 7ae5 	vsqrt.f32	s14, s11
 8014776:	ee66 7a86 	vmul.f32	s15, s13, s12
 801477a:	ee27 7a06 	vmul.f32	s14, s14, s12
 801477e:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 8014782:	ed89 7a00 	vstr	s14, [r9]
 8014786:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 801478a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801478e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014792:	dd1b      	ble.n	80147cc <MEMS_runMagCal.constprop.14+0x14dc>
 8014794:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 8014798:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801479c:	2302      	movs	r3, #2
 801479e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147a2:	f88b 34cc 	strb.w	r3, [fp, #1228]	; 0x4cc
 80147a6:	f77f a8a9 	ble.w	80138fc <MEMS_runMagCal.constprop.14+0x60c>
 80147aa:	2301      	movs	r3, #1
 80147ac:	f88b 3475 	strb.w	r3, [fp, #1141]	; 0x475
 80147b0:	f7ff b8a4 	b.w	80138fc <MEMS_runMagCal.constprop.14+0x60c>
 80147b4:	eeb0 0a49 	vmov.f32	s0, s18
 80147b8:	4648      	mov	r0, r9
 80147ba:	f7fd ff5f 	bl	801267c <MEMS_updateMagBufferIndex.constprop.24>
 80147be:	e48d      	b.n	80140dc <MEMS_runMagCal.constprop.14+0xdec>
 80147c0:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 80147c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80147c8:	f7ff badc 	b.w	8013d84 <MEMS_runMagCal.constprop.14+0xa94>
 80147cc:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80147d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80147d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147d8:	f8db 247c 	ldr.w	r2, [fp, #1148]	; 0x47c
 80147dc:	d42d      	bmi.n	801483a <MEMS_runMagCal.constprop.14+0x154a>
 80147de:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 80147e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80147e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147ea:	bfc4      	itt	gt
 80147ec:	2101      	movgt	r1, #1
 80147ee:	f88b 1475 	strbgt.w	r1, [fp, #1141]	; 0x475
 80147f2:	f7ff bbeb 	b.w	8013fcc <MEMS_runMagCal.constprop.14+0xcdc>
 80147f6:	eb0b 03ca 	add.w	r3, fp, sl, lsl #3
 80147fa:	f8db 2504 	ldr.w	r2, [fp, #1284]	; 0x504
 80147fe:	f9b3 3520 	ldrsh.w	r3, [r3, #1312]	; 0x520
 8014802:	f8db 1480 	ldr.w	r1, [fp, #1152]	; 0x480
 8014806:	4413      	add	r3, r2
 8014808:	4299      	cmp	r1, r3
 801480a:	f4bf af1b 	bcs.w	8014644 <MEMS_runMagCal.constprop.14+0x1354>
 801480e:	9902      	ldr	r1, [sp, #8]
 8014810:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8014814:	fb03 f301 	mul.w	r3, r3, r1
 8014818:	3364      	adds	r3, #100	; 0x64
 801481a:	4293      	cmp	r3, r2
 801481c:	bf38      	it	cc
 801481e:	4613      	movcc	r3, r2
 8014820:	2200      	movs	r2, #0
 8014822:	f8cb 3480 	str.w	r3, [fp, #1152]	; 0x480
 8014826:	f88b 2474 	strb.w	r2, [fp, #1140]	; 0x474
 801482a:	f7fe bffa 	b.w	8013822 <MEMS_runMagCal.constprop.14+0x532>
 801482e:	2400      	movs	r4, #0
 8014830:	9404      	str	r4, [sp, #16]
 8014832:	e54d      	b.n	80142d0 <MEMS_runMagCal.constprop.14+0xfe0>
 8014834:	4622      	mov	r2, r4
 8014836:	2500      	movs	r5, #0
 8014838:	e58a      	b.n	8014350 <MEMS_runMagCal.constprop.14+0x1060>
 801483a:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 801483e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014842:	2003      	movs	r0, #3
 8014844:	2100      	movs	r1, #0
 8014846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801484a:	f88b 04cc 	strb.w	r0, [fp, #1228]	; 0x4cc
 801484e:	f88b 1475 	strb.w	r1, [fp, #1141]	; 0x475
 8014852:	f77f abbe 	ble.w	8013fd2 <MEMS_runMagCal.constprop.14+0xce2>
 8014856:	2101      	movs	r1, #1
 8014858:	f88b 1475 	strb.w	r1, [fp, #1141]	; 0x475
 801485c:	f7ff bbb9 	b.w	8013fd2 <MEMS_runMagCal.constprop.14+0xce2>
 8014860:	fb93 f1f2 	sdiv	r1, r3, r2
 8014864:	fb02 3311 	mls	r3, r2, r1, r3
 8014868:	b219      	sxth	r1, r3
 801486a:	e49c      	b.n	80141a6 <MEMS_runMagCal.constprop.14+0xeb6>
 801486c:	2203      	movs	r2, #3
 801486e:	f88b 24cc 	strb.w	r2, [fp, #1228]	; 0x4cc
 8014872:	f88b 8475 	strb.w	r8, [fp, #1141]	; 0x475
 8014876:	f8db 247c 	ldr.w	r2, [fp, #1148]	; 0x47c
 801487a:	f7ff bbaa 	b.w	8013fd2 <MEMS_runMagCal.constprop.14+0xce2>
 801487e:	4613      	mov	r3, r2
 8014880:	2d00      	cmp	r5, #0
 8014882:	f43f ad70 	beq.w	8014366 <MEMS_runMagCal.constprop.14+0x1076>
 8014886:	e56c      	b.n	8014362 <MEMS_runMagCal.constprop.14+0x1072>
 8014888:	4284      	cmp	r4, r0
 801488a:	f6bf ad64 	bge.w	8014356 <MEMS_runMagCal.constprop.14+0x1066>
 801488e:	4553      	cmp	r3, sl
 8014890:	da07      	bge.n	80148a2 <MEMS_runMagCal.constprop.14+0x15b2>
 8014892:	4602      	mov	r2, r0
 8014894:	2501      	movs	r5, #1
 8014896:	e561      	b.n	801435c <MEMS_runMagCal.constprop.14+0x106c>
 8014898:	f88b c500 	strb.w	ip, [fp, #1280]	; 0x500
 801489c:	4665      	mov	r5, ip
 801489e:	f7ff b8c6 	b.w	8013a2e <MEMS_runMagCal.constprop.14+0x73e>
 80148a2:	4603      	mov	r3, r0
 80148a4:	e55d      	b.n	8014362 <MEMS_runMagCal.constprop.14+0x1072>
 80148a6:	f8ad e04e 	strh.w	lr, [sp, #78]	; 0x4e
 80148aa:	e4d8      	b.n	801425e <MEMS_runMagCal.constprop.14+0xf6e>
 80148ac:	4e1e      	ldr	r6, [pc, #120]	; (8014928 <MEMS_runMagCal.constprop.14+0x1638>)
 80148ae:	9c03      	ldr	r4, [sp, #12]
 80148b0:	ad15      	add	r5, sp, #84	; 0x54
 80148b2:	f856 0b04 	ldr.w	r0, [r6], #4
 80148b6:	f00c fb91 	bl	8020fdc <roundf>
 80148ba:	ee07 0a90 	vmov	s15, r0
 80148be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80148c2:	ee17 0a90 	vmov	r0, s15
 80148c6:	f825 0014 	strh.w	r0, [r5, r4, lsl #1]
 80148ca:	3401      	adds	r4, #1
 80148cc:	2c03      	cmp	r4, #3
 80148ce:	d1f0      	bne.n	80148b2 <MEMS_runMagCal.constprop.14+0x15c2>
 80148d0:	ab0f      	add	r3, sp, #60	; 0x3c
 80148d2:	aa10      	add	r2, sp, #64	; 0x40
 80148d4:	eeb0 0a68 	vmov.f32	s0, s17
 80148d8:	4914      	ldr	r1, [pc, #80]	; (801492c <MEMS_runMagCal.constprop.14+0x163c>)
 80148da:	4628      	mov	r0, r5
 80148dc:	f7fd fddc 	bl	8012498 <getMagStats.constprop.26>
 80148e0:	ed9d 7a0f 	vldr	s14, [sp, #60]	; 0x3c
 80148e4:	eddf 7a12 	vldr	s15, [pc, #72]	; 8014930 <MEMS_runMagCal.constprop.14+0x1640>
 80148e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80148ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148f0:	d511      	bpl.n	8014916 <MEMS_runMagCal.constprop.14+0x1626>
 80148f2:	b980      	cbnz	r0, 8014916 <MEMS_runMagCal.constprop.14+0x1626>
 80148f4:	f89b 34b4 	ldrb.w	r3, [fp, #1204]	; 0x4b4
 80148f8:	2b00      	cmp	r3, #0
 80148fa:	f000 8093 	beq.w	8014a24 <MEMS_runMagCal.constprop.14+0x1734>
 80148fe:	f89b 34bd 	ldrb.w	r3, [fp, #1213]	; 0x4bd
 8014902:	ee07 3a90 	vmov	s15, r3
 8014906:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801490a:	eeb4 9ae7 	vcmpe.f32	s18, s15
 801490e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014912:	f300 8087 	bgt.w	8014a24 <MEMS_runMagCal.constprop.14+0x1734>
 8014916:	2300      	movs	r3, #0
 8014918:	602b      	str	r3, [r5, #0]
 801491a:	80ab      	strh	r3, [r5, #4]
 801491c:	e619      	b.n	8014552 <MEMS_runMagCal.constprop.14+0x1262>
 801491e:	bf00      	nop
 8014920:	20004fa0 	.word	0x20004fa0
 8014924:	3c23d70a 	.word	0x3c23d70a
 8014928:	20005010 	.word	0x20005010
 801492c:	2000501c 	.word	0x2000501c
 8014930:	3ff4cccd 	.word	0x3ff4cccd
 8014934:	358637bd 	.word	0x358637bd
 8014938:	3eaaaaab 	.word	0x3eaaaaab
 801493c:	3e2aaaab 	.word	0x3e2aaaab
 8014940:	00000000 	.word	0x00000000
 8014944:	40060a92 	.word	0x40060a92
 8014948:	42960000 	.word	0x42960000
 801494c:	3a83126f 	.word	0x3a83126f
 8014950:	430d0000 	.word	0x430d0000
 8014954:	b12c      	cbz	r4, 8014962 <MEMS_runMagCal.constprop.14+0x1672>
 8014956:	edcd 6a1a 	vstr	s13, [sp, #104]	; 0x68
 801495a:	ed8d 7a1b 	vstr	s14, [sp, #108]	; 0x6c
 801495e:	edcd 7a1c 	vstr	s15, [sp, #112]	; 0x70
 8014962:	ee07 8a90 	vmov	s15, r8
 8014966:	eeb8 bae7 	vcvt.f32.s32	s22, s15
 801496a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801496e:	eec7 9a8b 	vdiv.f32	s19, s15, s22
 8014972:	2000      	movs	r0, #0
 8014974:	4604      	mov	r4, r0
 8014976:	eddd aa1a 	vldr	s21, [sp, #104]	; 0x68
 801497a:	ed9d aa1b 	vldr	s20, [sp, #108]	; 0x6c
 801497e:	ed9d 7a1c 	vldr	s14, [sp, #112]	; 0x70
 8014982:	ed5f 7a11 	vldr	s15, [pc, #-68]	; 8014940 <MEMS_runMagCal.constprop.14+0x1650>
 8014986:	ee69 aaaa 	vmul.f32	s21, s19, s21
 801498a:	ee29 aa8a 	vmul.f32	s20, s19, s20
 801498e:	ee69 9a87 	vmul.f32	s19, s19, s14
 8014992:	eef0 5a67 	vmov.f32	s11, s15
 8014996:	eeb0 5a67 	vmov.f32	s10, s15
 801499a:	eef0 4a67 	vmov.f32	s9, s15
 801499e:	eeb0 4a67 	vmov.f32	s8, s15
 80149a2:	eef0 3a67 	vmov.f32	s7, s15
 80149a6:	b2c3      	uxtb	r3, r0
 80149a8:	4598      	cmp	r8, r3
 80149aa:	eb01 0500 	add.w	r5, r1, r0
 80149ae:	d959      	bls.n	8014a64 <MEMS_runMagCal.constprop.14+0x1774>
 80149b0:	fb95 f3f2 	sdiv	r3, r5, r2
 80149b4:	fb02 5313 	mls	r3, r2, r3, r5
 80149b8:	b2db      	uxtb	r3, r3
 80149ba:	3304      	adds	r3, #4
 80149bc:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 80149c0:	3001      	adds	r0, #1
 80149c2:	f9b3 4502 	ldrsh.w	r4, [r3, #1282]	; 0x502
 80149c6:	ee06 4a10 	vmov	s12, r4
 80149ca:	f9b3 4504 	ldrsh.w	r4, [r3, #1284]	; 0x504
 80149ce:	f9b3 3506 	ldrsh.w	r3, [r3, #1286]	; 0x506
 80149d2:	ee06 4a90 	vmov	s13, r4
 80149d6:	ee07 3a10 	vmov	s14, r3
 80149da:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80149de:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80149e2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80149e6:	ee36 6a6a 	vsub.f32	s12, s12, s21
 80149ea:	ee76 6aca 	vsub.f32	s13, s13, s20
 80149ee:	ee37 7a69 	vsub.f32	s14, s14, s19
 80149f2:	eea6 4a06 	vfma.f32	s8, s12, s12
 80149f6:	2401      	movs	r4, #1
 80149f8:	eee6 4a26 	vfma.f32	s9, s12, s13
 80149fc:	eee6 3aa6 	vfma.f32	s7, s13, s13
 8014a00:	eea6 5a07 	vfma.f32	s10, s12, s14
 8014a04:	eee6 5a87 	vfma.f32	s11, s13, s14
 8014a08:	eee7 7a07 	vfma.f32	s15, s14, s14
 8014a0c:	e7cb      	b.n	80149a6 <MEMS_runMagCal.constprop.14+0x16b6>
 8014a0e:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8014a12:	edc9 6a00 	vstr	s13, [r9]
 8014a16:	e69d      	b.n	8014754 <MEMS_runMagCal.constprop.14+0x1464>
 8014a18:	fb93 f1f8 	sdiv	r1, r3, r8
 8014a1c:	fb08 3311 	mls	r3, r8, r1, r3
 8014a20:	b219      	sxth	r1, r3
 8014a22:	e5b5      	b.n	8014590 <MEMS_runMagCal.constprop.14+0x12a0>
 8014a24:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 8014a28:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8014a2c:	ed5f 7a39 	vldr	s15, [pc, #-228]	; 801494c <MEMS_runMagCal.constprop.14+0x165c>
 8014a30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014a34:	2303      	movs	r3, #3
 8014a36:	ee17 0a90 	vmov	r0, s15
 8014a3a:	f88b 34cc 	strb.w	r3, [fp, #1228]	; 0x4cc
 8014a3e:	f00c facd 	bl	8020fdc <roundf>
 8014a42:	ee07 0a90 	vmov	s15, r0
 8014a46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014a4a:	2300      	movs	r3, #0
 8014a4c:	ee17 0a90 	vmov	r0, s15
 8014a50:	f88b 3474 	strb.w	r3, [fp, #1140]	; 0x474
 8014a54:	f8cb 0478 	str.w	r0, [fp, #1144]	; 0x478
 8014a58:	f7fe bee3 	b.w	8013822 <MEMS_runMagCal.constprop.14+0x532>
 8014a5c:	f8ad 70d8 	strh.w	r7, [sp, #216]	; 0xd8
 8014a60:	f7fe be03 	b.w	801366a <MEMS_runMagCal.constprop.14+0x37a>
 8014a64:	b15c      	cbz	r4, 8014a7e <MEMS_runMagCal.constprop.14+0x178e>
 8014a66:	edcd 3a31 	vstr	s7, [sp, #196]	; 0xc4
 8014a6a:	ed8d 4a2e 	vstr	s8, [sp, #184]	; 0xb8
 8014a6e:	edcd 4a2f 	vstr	s9, [sp, #188]	; 0xbc
 8014a72:	ed8d 5a30 	vstr	s10, [sp, #192]	; 0xc0
 8014a76:	edcd 5a32 	vstr	s11, [sp, #200]	; 0xc8
 8014a7a:	edcd 7a33 	vstr	s15, [sp, #204]	; 0xcc
 8014a7e:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8014a82:	eddd 5a2f 	vldr	s11, [sp, #188]	; 0xbc
 8014a86:	ed9d 6a32 	vldr	s12, [sp, #200]	; 0xc8
 8014a8a:	ed1f 5a56 	vldr	s10, [pc, #-344]	; 8014934 <MEMS_runMagCal.constprop.14+0x1644>
 8014a8e:	eddd ba2e 	vldr	s23, [sp, #184]	; 0xb8
 8014a92:	eddd 7a31 	vldr	s15, [sp, #196]	; 0xc4
 8014a96:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8014a9a:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8014a9e:	eee5 6aa5 	vfma.f32	s13, s11, s11
 8014aa2:	eee6 6a06 	vfma.f32	s13, s12, s12
 8014aa6:	eef4 6ac5 	vcmpe.f32	s13, s10
 8014aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014aae:	f100 80be 	bmi.w	8014c2e <MEMS_runMagCal.constprop.14+0x193e>
 8014ab2:	ee3b daa7 	vadd.f32	s26, s23, s15
 8014ab6:	ed1f 6a60 	vldr	s12, [pc, #-384]	; 8014938 <MEMS_runMagCal.constprop.14+0x1648>
 8014aba:	ed5f 5a60 	vldr	s11, [pc, #-384]	; 801493c <MEMS_runMagCal.constprop.14+0x164c>
 8014abe:	ee3d da07 	vadd.f32	s26, s26, s14
 8014ac2:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 8014ac6:	ee2d da06 	vmul.f32	s26, s26, s12
 8014aca:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8014ace:	ee77 7acd 	vsub.f32	s15, s15, s26
 8014ad2:	ee7b bacd 	vsub.f32	s23, s23, s26
 8014ad6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8014ada:	ee37 7a4d 	vsub.f32	s14, s14, s26
 8014ade:	eeeb 7aab 	vfma.f32	s15, s23, s23
 8014ae2:	f04f 0900 	mov.w	r9, #0
 8014ae6:	4649      	mov	r1, r9
 8014ae8:	f04f 0e02 	mov.w	lr, #2
 8014aec:	eee6 7a85 	vfma.f32	s15, s13, s10
 8014af0:	eee7 7a07 	vfma.f32	s15, s14, s14
 8014af4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8014af8:	eeb1 cae7 	vsqrt.f32	s24, s15
 8014afc:	ee86 7a0c 	vdiv.f32	s14, s12, s24
 8014b00:	1c4c      	adds	r4, r1, #1
 8014b02:	fb01 f304 	mul.w	r3, r1, r4
 8014b06:	fb93 f3fe 	sdiv	r3, r3, lr
 8014b0a:	eba9 0303 	sub.w	r3, r9, r3
 8014b0e:	b2c8      	uxtb	r0, r1
 8014b10:	aa46      	add	r2, sp, #280	; 0x118
 8014b12:	b2dd      	uxtb	r5, r3
 8014b14:	230c      	movs	r3, #12
 8014b16:	fb03 2101 	mla	r1, r3, r1, r2
 8014b1a:	4606      	mov	r6, r0
 8014b1c:	2200      	movs	r2, #0
 8014b1e:	9001      	str	r0, [sp, #4]
 8014b20:	fa5f fc82 	uxtb.w	ip, r2
 8014b24:	9801      	ldr	r0, [sp, #4]
 8014b26:	eb05 030c 	add.w	r3, r5, ip
 8014b2a:	4560      	cmp	r0, ip
 8014b2c:	b2db      	uxtb	r3, r3
 8014b2e:	f102 0701 	add.w	r7, r2, #1
 8014b32:	a82e      	add	r0, sp, #184	; 0xb8
 8014b34:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8014b38:	fb02 fc07 	mul.w	ip, r2, r7
 8014b3c:	f200 80db 	bhi.w	8014cf6 <MEMS_runMagCal.constprop.14+0x1a06>
 8014b40:	edd0 7a00 	vldr	s15, [r0]
 8014b44:	f000 80cf 	beq.w	8014ce6 <MEMS_runMagCal.constprop.14+0x19f6>
 8014b48:	aa2e      	add	r2, sp, #184	; 0xb8
 8014b4a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014b4e:	edd3 7a00 	vldr	s15, [r3]
 8014b52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014b56:	edc1 7a00 	vstr	s15, [r1]
 8014b5a:	3603      	adds	r6, #3
 8014b5c:	2f03      	cmp	r7, #3
 8014b5e:	b2f6      	uxtb	r6, r6
 8014b60:	f101 0104 	add.w	r1, r1, #4
 8014b64:	463a      	mov	r2, r7
 8014b66:	d1db      	bne.n	8014b20 <MEMS_runMagCal.constprop.14+0x1830>
 8014b68:	f109 0903 	add.w	r9, r9, #3
 8014b6c:	2c03      	cmp	r4, #3
 8014b6e:	fa5f f989 	uxtb.w	r9, r9
 8014b72:	4621      	mov	r1, r4
 8014b74:	d1c4      	bne.n	8014b00 <MEMS_runMagCal.constprop.14+0x1810>
 8014b76:	eddd 4a4e 	vldr	s9, [sp, #312]	; 0x138
 8014b7a:	ed9d 6a49 	vldr	s12, [sp, #292]	; 0x124
 8014b7e:	ed9d 4a4b 	vldr	s8, [sp, #300]	; 0x12c
 8014b82:	eddd 5a4d 	vldr	s11, [sp, #308]	; 0x134
 8014b86:	ed9d 7a4c 	vldr	s14, [sp, #304]	; 0x130
 8014b8a:	ed9d 5a4a 	vldr	s10, [sp, #296]	; 0x128
 8014b8e:	eddd 3a47 	vldr	s7, [sp, #284]	; 0x11c
 8014b92:	ee66 7a64 	vnmul.f32	s15, s12, s9
 8014b96:	ee65 6ac4 	vnmul.f32	s13, s11, s8
 8014b9a:	eee4 7a07 	vfma.f32	s15, s8, s14
 8014b9e:	eee5 6a24 	vfma.f32	s13, s10, s9
 8014ba2:	ee27 7a45 	vnmul.f32	s14, s14, s10
 8014ba6:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8014baa:	eddd 4a46 	vldr	s9, [sp, #280]	; 0x118
 8014bae:	ed9d 5a48 	vldr	s10, [sp, #288]	; 0x120
 8014bb2:	eea5 7a86 	vfma.f32	s14, s11, s12
 8014bb6:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8014bba:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8014bbe:	eee5 7a07 	vfma.f32	s15, s10, s14
 8014bc2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8014bc6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014bca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014bd2:	f240 8172 	bls.w	8014eba <MEMS_runMagCal.constprop.14+0x1bca>
 8014bd6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014bda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014be2:	f2c0 815f 	blt.w	8014ea4 <MEMS_runMagCal.constprop.14+0x1bb4>
 8014be6:	ed5f caaa 	vldr	s25, [pc, #-680]	; 8014940 <MEMS_runMagCal.constprop.14+0x1650>
 8014bea:	ee1c 0a90 	vmov	r0, s25
 8014bee:	f00c f9b9 	bl	8020f64 <cosf>
 8014bf2:	ed5f 7aac 	vldr	s15, [pc, #-688]	; 8014944 <MEMS_runMagCal.constprop.14+0x1654>
 8014bf6:	ee7c 7aa7 	vadd.f32	s15, s25, s15
 8014bfa:	ee07 0a10 	vmov	s14, r0
 8014bfe:	ee3c ca0c 	vadd.f32	s24, s24, s24
 8014c02:	ee17 0a90 	vmov	r0, s15
 8014c06:	eef0 ba4d 	vmov.f32	s23, s26
 8014c0a:	eee7 ba0c 	vfma.f32	s23, s14, s24
 8014c0e:	f00c f9a9 	bl	8020f64 <cosf>
 8014c12:	ee06 0a90 	vmov	s13, r0
 8014c16:	eeb0 7a4d 	vmov.f32	s14, s26
 8014c1a:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8014c1e:	eea6 7a8c 	vfma.f32	s14, s13, s24
 8014c22:	eef0 6a6b 	vmov.f32	s13, s23
 8014c26:	eedd 6a27 	vfnms.f32	s13, s26, s15
 8014c2a:	ee76 7ac7 	vsub.f32	s15, s13, s14
 8014c2e:	ee77 6a27 	vadd.f32	s13, s14, s15
 8014c32:	eef0 7ae7 	vabs.f32	s15, s15
 8014c36:	ee76 6aab 	vadd.f32	s13, s13, s23
 8014c3a:	eef0 baeb 	vabs.f32	s23, s23
 8014c3e:	eec6 5a8b 	vdiv.f32	s11, s13, s22
 8014c42:	eef4 7aeb 	vcmpe.f32	s15, s23
 8014c46:	eeb1 6ae5 	vsqrt.f32	s12, s11
 8014c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c4e:	eeb0 7ac7 	vabs.f32	s14, s14
 8014c52:	bf8c      	ite	hi
 8014c54:	eef0 6a6b 	vmovhi.f32	s13, s23
 8014c58:	eef0 6a67 	vmovls.f32	s13, s15
 8014c5c:	eef4 6ac7 	vcmpe.f32	s13, s14
 8014c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c64:	eef4 7aeb 	vcmpe.f32	s15, s23
 8014c68:	bf88      	it	hi
 8014c6a:	eef0 6a47 	vmovhi.f32	s13, s14
 8014c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c72:	bfb8      	it	lt
 8014c74:	eef0 7a6b 	vmovlt.f32	s15, s23
 8014c78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014c7c:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
 8014c80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c84:	ee66 5aa5 	vmul.f32	s11, s13, s11
 8014c88:	bfa8      	it	ge
 8014c8a:	eef0 7a47 	vmovge.f32	s15, s14
 8014c8e:	eef4 7ae5 	vcmpe.f32	s15, s11
 8014c92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c96:	ee28 7a86 	vmul.f32	s14, s17, s12
 8014c9a:	dc19      	bgt.n	8014cd0 <MEMS_runMagCal.constprop.14+0x19e0>
 8014c9c:	eeb3 6a04 	vmov.f32	s12, #52	; 0x41a00000  20.0
 8014ca0:	ee66 6a86 	vmul.f32	s13, s13, s12
 8014ca4:	eef4 7ae6 	vcmpe.f32	s15, s13
 8014ca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014cac:	dd02      	ble.n	8014cb4 <MEMS_runMagCal.constprop.14+0x19c4>
 8014cae:	f1b8 0f22 	cmp.w	r8, #34	; 0x22
 8014cb2:	d90d      	bls.n	8014cd0 <MEMS_runMagCal.constprop.14+0x19e0>
 8014cb4:	ed5f 7adc 	vldr	s15, [pc, #-880]	; 8014948 <MEMS_runMagCal.constprop.14+0x1658>
 8014cb8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014cc0:	dc06      	bgt.n	8014cd0 <MEMS_runMagCal.constprop.14+0x19e0>
 8014cc2:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8014cc6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014cce:	d517      	bpl.n	8014d00 <MEMS_runMagCal.constprop.14+0x1a10>
 8014cd0:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 8014cd4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8014cd8:	ed5f 7ae4 	vldr	s15, [pc, #-912]	; 801494c <MEMS_runMagCal.constprop.14+0x165c>
 8014cdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014ce0:	ee17 0a90 	vmov	r0, s15
 8014ce4:	e6ab      	b.n	8014a3e <MEMS_runMagCal.constprop.14+0x174e>
 8014ce6:	ee77 7acd 	vsub.f32	s15, s15, s26
 8014cea:	1c57      	adds	r7, r2, #1
 8014cec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014cf0:	edc1 7a00 	vstr	s15, [r1]
 8014cf4:	e731      	b.n	8014b5a <MEMS_runMagCal.constprop.14+0x186a>
 8014cf6:	fb9c f3fe 	sdiv	r3, ip, lr
 8014cfa:	1af3      	subs	r3, r6, r3
 8014cfc:	b2db      	uxtb	r3, r3
 8014cfe:	e723      	b.n	8014b48 <MEMS_runMagCal.constprop.14+0x1858>
 8014d00:	ed1f 7aed 	vldr	s14, [pc, #-948]	; 8014950 <MEMS_runMagCal.constprop.14+0x1660>
 8014d04:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8014d08:	2300      	movs	r3, #0
 8014d0a:	e9cd 3332 	strd	r3, r3, [sp, #200]	; 0xc8
 8014d0e:	9335      	str	r3, [sp, #212]	; 0xd4
 8014d10:	ee07 aa10 	vmov	s14, sl
 8014d14:	eeb8 8ac7 	vcvt.f32.s32	s16, s14
 8014d18:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8014d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d20:	d409      	bmi.n	8014d36 <MEMS_runMagCal.constprop.14+0x1a46>
 8014d22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014d26:	ee17 3a90 	vmov	r3, s15
 8014d2a:	fa0f fa83 	sxth.w	sl, r3
 8014d2e:	ee07 aa90 	vmov	s15, sl
 8014d32:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8014d36:	ed9f 7ace 	vldr	s14, [pc, #824]	; 8015070 <MEMS_runMagCal.constprop.14+0x1d80>
 8014d3a:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8014d3e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8014d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d46:	dc09      	bgt.n	8014d5c <MEMS_runMagCal.constprop.14+0x1a6c>
 8014d48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014d4c:	ee17 3a90 	vmov	r3, s15
 8014d50:	fa0f fa83 	sxth.w	sl, r3
 8014d54:	ee07 aa90 	vmov	s15, sl
 8014d58:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8014d5c:	eddf 7ac5 	vldr	s15, [pc, #788]	; 8015074 <MEMS_runMagCal.constprop.14+0x1d84>
 8014d60:	ed9f 7ac5 	vldr	s14, [pc, #788]	; 8015078 <MEMS_runMagCal.constprop.14+0x1d88>
 8014d64:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8014d68:	ee28 8a27 	vmul.f32	s16, s16, s15
 8014d6c:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8014d70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d74:	f340 850a 	ble.w	801578c <MEMS_runMagCal.constprop.14+0x249c>
 8014d78:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8014d7c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8014d80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d84:	f140 8502 	bpl.w	801578c <MEMS_runMagCal.constprop.14+0x249c>
 8014d88:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8014d8c:	ee48 7a27 	vmla.f32	s15, s16, s15
 8014d90:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 8015070 <MEMS_runMagCal.constprop.14+0x1d80>
 8014d94:	ed9f bab9 	vldr	s22, [pc, #740]	; 801507c <MEMS_runMagCal.constprop.14+0x1d8c>
 8014d98:	ed9f 8ab9 	vldr	s16, [pc, #740]	; 8015080 <MEMS_runMagCal.constprop.14+0x1d90>
 8014d9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014da0:	ee68 aaaa 	vmul.f32	s21, s17, s21
 8014da4:	ee28 aa8a 	vmul.f32	s20, s17, s20
 8014da8:	ee68 9aa9 	vmul.f32	s19, s17, s19
 8014dac:	edcd aa2e 	vstr	s21, [sp, #184]	; 0xb8
 8014db0:	ed8d aa2f 	vstr	s20, [sp, #188]	; 0xbc
 8014db4:	edcd 9a30 	vstr	s19, [sp, #192]	; 0xc0
 8014db8:	edcd 7a31 	vstr	s15, [sp, #196]	; 0xc4
 8014dbc:	edcd 7a34 	vstr	s15, [sp, #208]	; 0xd0
 8014dc0:	2400      	movs	r4, #0
 8014dc2:	4621      	mov	r1, r4
 8014dc4:	2240      	movs	r2, #64	; 0x40
 8014dc6:	a836      	add	r0, sp, #216	; 0xd8
 8014dc8:	e9cd 4421 	strd	r4, r4, [sp, #132]	; 0x84
 8014dcc:	e9cd 4423 	strd	r4, r4, [sp, #140]	; 0x8c
 8014dd0:	e9cd 441d 	strd	r4, r4, [sp, #116]	; 0x74
 8014dd4:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
 8014dd8:	f00d fd5e 	bl	8022898 <memset>
 8014ddc:	4621      	mov	r1, r4
 8014dde:	2240      	movs	r2, #64	; 0x40
 8014de0:	a846      	add	r0, sp, #280	; 0x118
 8014de2:	f00d fd59 	bl	8022898 <memset>
 8014de6:	eddd 4a31 	vldr	s9, [sp, #196]	; 0xc4
 8014dea:	eddf 7aa6 	vldr	s15, [pc, #664]	; 8015084 <MEMS_runMagCal.constprop.14+0x1d94>
 8014dee:	eef4 4ae7 	vcmpe.f32	s9, s15
 8014df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014df6:	f100 80a6 	bmi.w	8014f46 <MEMS_runMagCal.constprop.14+0x1c56>
 8014dfa:	f89b 4500 	ldrb.w	r4, [fp, #1280]	; 0x500
 8014dfe:	f89b 0501 	ldrb.w	r0, [fp, #1281]	; 0x501
 8014e02:	f99b 3502 	ldrsb.w	r3, [fp, #1282]	; 0x502
 8014e06:	4284      	cmp	r4, r0
 8014e08:	f103 0301 	add.w	r3, r3, #1
 8014e0c:	f000 84b7 	beq.w	801577e <MEMS_runMagCal.constprop.14+0x248e>
 8014e10:	1b1b      	subs	r3, r3, r4
 8014e12:	fb93 f2f0 	sdiv	r2, r3, r0
 8014e16:	fb00 3312 	mls	r3, r0, r2, r3
 8014e1a:	2b00      	cmp	r3, #0
 8014e1c:	b219      	sxth	r1, r3
 8014e1e:	bfbc      	itt	lt
 8014e20:	181b      	addlt	r3, r3, r0
 8014e22:	b219      	sxthlt	r1, r3
 8014e24:	f8df 928c 	ldr.w	r9, [pc, #652]	; 80150b4 <MEMS_runMagCal.constprop.14+0x1dc4>
 8014e28:	2500      	movs	r5, #0
 8014e2a:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 8014e2e:	af29      	add	r7, sp, #164	; 0xa4
 8014e30:	2614      	movs	r6, #20
 8014e32:	b2eb      	uxtb	r3, r5
 8014e34:	429c      	cmp	r4, r3
 8014e36:	d976      	bls.n	8014f26 <MEMS_runMagCal.constprop.14+0x1c36>
 8014e38:	194a      	adds	r2, r1, r5
 8014e3a:	fb92 f3f0 	sdiv	r3, r2, r0
 8014e3e:	fb00 2313 	mls	r3, r0, r3, r2
 8014e42:	b2db      	uxtb	r3, r3
 8014e44:	3304      	adds	r3, #4
 8014e46:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8014e4a:	eddd 6a2f 	vldr	s13, [sp, #188]	; 0xbc
 8014e4e:	f9b3 2504 	ldrsh.w	r2, [r3, #1284]	; 0x504
 8014e52:	ed9d 6a2e 	vldr	s12, [sp, #184]	; 0xb8
 8014e56:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8014e5a:	ee05 2a10 	vmov	s10, r2
 8014e5e:	f9b3 2502 	ldrsh.w	r2, [r3, #1282]	; 0x502
 8014e62:	f9b3 3506 	ldrsh.w	r3, [r3, #1286]	; 0x506
 8014e66:	ee07 2a10 	vmov	s14, r2
 8014e6a:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8014e6e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014e72:	eed8 6a85 	vfnms.f32	s13, s17, s10
 8014e76:	ee98 6a87 	vfnms.f32	s12, s17, s14
 8014e7a:	ee05 3a90 	vmov	s11, r3
 8014e7e:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8014e82:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8014e86:	eea6 7a06 	vfma.f32	s14, s12, s12
 8014e8a:	eed8 7aa5 	vfnms.f32	s15, s17, s11
 8014e8e:	eea7 7aa7 	vfma.f32	s14, s15, s15
 8014e92:	eeb4 7acb 	vcmpe.f32	s14, s22
 8014e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e9a:	eef1 5ac7 	vsqrt.f32	s11, s14
 8014e9e:	d50f      	bpl.n	8014ec0 <MEMS_runMagCal.constprop.14+0x1bd0>
 8014ea0:	3501      	adds	r5, #1
 8014ea2:	e7c6      	b.n	8014e32 <MEMS_runMagCal.constprop.14+0x1b42>
 8014ea4:	ee17 0a90 	vmov	r0, s15
 8014ea8:	f00c f9ca 	bl	8021240 <acosf>
 8014eac:	eddf ca76 	vldr	s25, [pc, #472]	; 8015088 <MEMS_runMagCal.constprop.14+0x1d98>
 8014eb0:	ee07 0a90 	vmov	s15, r0
 8014eb4:	ee67 caac 	vmul.f32	s25, s15, s25
 8014eb8:	e697      	b.n	8014bea <MEMS_runMagCal.constprop.14+0x18fa>
 8014eba:	eddf ca74 	vldr	s25, [pc, #464]	; 801508c <MEMS_runMagCal.constprop.14+0x1d9c>
 8014ebe:	e694      	b.n	8014bea <MEMS_runMagCal.constprop.14+0x18fa>
 8014ec0:	ee84 7a25 	vdiv.f32	s14, s8, s11
 8014ec4:	f10d 0c84 	add.w	ip, sp, #132	; 0x84
 8014ec8:	aa25      	add	r2, sp, #148	; 0x94
 8014eca:	2300      	movs	r3, #0
 8014ecc:	f8cd 90a0 	str.w	r9, [sp, #160]	; 0xa0
 8014ed0:	ee74 5ae5 	vsub.f32	s11, s9, s11
 8014ed4:	ee27 6a46 	vnmul.f32	s12, s14, s12
 8014ed8:	ee67 6a66 	vnmul.f32	s13, s14, s13
 8014edc:	ee67 7a67 	vnmul.f32	s15, s14, s15
 8014ee0:	ed8d 6a25 	vstr	s12, [sp, #148]	; 0x94
 8014ee4:	edcd 6a26 	vstr	s13, [sp, #152]	; 0x98
 8014ee8:	edcd 7a27 	vstr	s15, [sp, #156]	; 0x9c
 8014eec:	eddc 7a00 	vldr	s15, [ip]
 8014ef0:	ed92 7a00 	vldr	s14, [r2]
 8014ef4:	eee5 7a87 	vfma.f32	s15, s11, s14
 8014ef8:	f10d 0ed8 	add.w	lr, sp, #216	; 0xd8
 8014efc:	fb06 e803 	mla	r8, r6, r3, lr
 8014f00:	4696      	mov	lr, r2
 8014f02:	ecec 7a01 	vstmia	ip!, {s15}
 8014f06:	edd8 7a00 	vldr	s15, [r8]
 8014f0a:	ecfe 6a01 	vldmia	lr!, {s13}
 8014f0e:	eee7 7a26 	vfma.f32	s15, s14, s13
 8014f12:	4577      	cmp	r7, lr
 8014f14:	ece8 7a01 	vstmia	r8!, {s15}
 8014f18:	d1f5      	bne.n	8014f06 <MEMS_runMagCal.constprop.14+0x1c16>
 8014f1a:	3301      	adds	r3, #1
 8014f1c:	2b04      	cmp	r3, #4
 8014f1e:	f102 0204 	add.w	r2, r2, #4
 8014f22:	d1e3      	bne.n	8014eec <MEMS_runMagCal.constprop.14+0x1bfc>
 8014f24:	e7bc      	b.n	8014ea0 <MEMS_runMagCal.constprop.14+0x1bb0>
 8014f26:	a937      	add	r1, sp, #220	; 0xdc
 8014f28:	2203      	movs	r2, #3
 8014f2a:	2300      	movs	r3, #0
 8014f2c:	f101 000c 	add.w	r0, r1, #12
 8014f30:	429a      	cmp	r2, r3
 8014f32:	eb01 0483 	add.w	r4, r1, r3, lsl #2
 8014f36:	f000 842d 	beq.w	8015794 <MEMS_runMagCal.constprop.14+0x24a4>
 8014f3a:	6825      	ldr	r5, [r4, #0]
 8014f3c:	eb00 1403 	add.w	r4, r0, r3, lsl #4
 8014f40:	3301      	adds	r3, #1
 8014f42:	6025      	str	r5, [r4, #0]
 8014f44:	e7f4      	b.n	8014f30 <MEMS_runMagCal.constprop.14+0x1c40>
 8014f46:	eddf 9a52 	vldr	s19, [pc, #328]	; 8015090 <MEMS_runMagCal.constprop.14+0x1da0>
 8014f4a:	eddf 7a52 	vldr	s15, [pc, #328]	; 8015094 <MEMS_runMagCal.constprop.14+0x1da4>
 8014f4e:	eeb0 7a69 	vmov.f32	s14, s19
 8014f52:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 8014f56:	eddd 6a31 	vldr	s13, [sp, #196]	; 0xc4
 8014f5a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8015070 <MEMS_runMagCal.constprop.14+0x1d80>
 8014f5e:	eef4 7ac6 	vcmpe.f32	s15, s12
 8014f62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f66:	ee85 8aa6 	vdiv.f32	s16, s11, s13
 8014f6a:	dc0e      	bgt.n	8014f8a <MEMS_runMagCal.constprop.14+0x1c9a>
 8014f6c:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8015098 <MEMS_runMagCal.constprop.14+0x1da8>
 8014f70:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f78:	dc07      	bgt.n	8014f8a <MEMS_runMagCal.constprop.14+0x1c9a>
 8014f7a:	eddf 7a42 	vldr	s15, [pc, #264]	; 8015084 <MEMS_runMagCal.constprop.14+0x1d94>
 8014f7e:	eef4 6ae7 	vcmpe.f32	s13, s15
 8014f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f86:	f200 809f 	bhi.w	80150c8 <MEMS_runMagCal.constprop.14+0x1dd8>
 8014f8a:	4b44      	ldr	r3, [pc, #272]	; (801509c <MEMS_runMagCal.constprop.14+0x1dac>)
 8014f8c:	ed9f 8a41 	vldr	s16, [pc, #260]	; 8015094 <MEMS_runMagCal.constprop.14+0x1da4>
 8014f90:	9325      	str	r3, [sp, #148]	; 0x94
 8014f92:	9334      	str	r3, [sp, #208]	; 0xd0
 8014f94:	ed9f 5a36 	vldr	s10, [pc, #216]	; 8015070 <MEMS_runMagCal.constprop.14+0x1d80>
 8014f98:	eddd 5a31 	vldr	s11, [sp, #196]	; 0xc4
 8014f9c:	ed9d 7a34 	vldr	s14, [sp, #208]	; 0xd0
 8014fa0:	ed9d 6a2e 	vldr	s12, [sp, #184]	; 0xb8
 8014fa4:	eddd aa2f 	vldr	s21, [sp, #188]	; 0xbc
 8014fa8:	ed9d aa30 	vldr	s20, [sp, #192]	; 0xc0
 8014fac:	eddd 6a25 	vldr	s13, [sp, #148]	; 0x94
 8014fb0:	eec5 7a25 	vdiv.f32	s15, s10, s11
 8014fb4:	2300      	movs	r3, #0
 8014fb6:	9347      	str	r3, [sp, #284]	; 0x11c
 8014fb8:	9348      	str	r3, [sp, #288]	; 0x120
 8014fba:	9349      	str	r3, [sp, #292]	; 0x124
 8014fbc:	934b      	str	r3, [sp, #300]	; 0x12c
 8014fbe:	934c      	str	r3, [sp, #304]	; 0x130
 8014fc0:	934d      	str	r3, [sp, #308]	; 0x134
 8014fc2:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8014fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fca:	ee29 6a06 	vmul.f32	s12, s18, s12
 8014fce:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 8014fd2:	edcd 7a4a 	vstr	s15, [sp, #296]	; 0x128
 8014fd6:	edcd 7a4e 	vstr	s15, [sp, #312]	; 0x138
 8014fda:	ee69 aa2a 	vmul.f32	s21, s18, s21
 8014fde:	ee29 aa0a 	vmul.f32	s20, s18, s20
 8014fe2:	d441      	bmi.n	8015068 <MEMS_runMagCal.constprop.14+0x1d78>
 8014fe4:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8014fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fec:	d43c      	bmi.n	8015068 <MEMS_runMagCal.constprop.14+0x1d78>
 8014fee:	eec6 5a87 	vdiv.f32	s11, s13, s14
 8014ff2:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
 8014ff6:	ee79 9ae5 	vsub.f32	s19, s19, s11
 8014ffa:	eddf 6a29 	vldr	s13, [pc, #164]	; 80150a0 <MEMS_runMagCal.constprop.14+0x1db0>
 8014ffe:	eddf 5a29 	vldr	s11, [pc, #164]	; 80150a4 <MEMS_runMagCal.constprop.14+0x1db4>
 8015002:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015006:	ee77 6ae6 	vsub.f32	s13, s15, s13
 801500a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 801500e:	eef4 7ae5 	vcmpe.f32	s15, s11
 8015012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015016:	eef0 6ae6 	vabs.f32	s13, s13
 801501a:	eeb0 7ac7 	vabs.f32	s14, s14
 801501e:	dd06      	ble.n	801502e <MEMS_runMagCal.constprop.14+0x1d3e>
 8015020:	eddf 7a21 	vldr	s15, [pc, #132]	; 80150a8 <MEMS_runMagCal.constprop.14+0x1db8>
 8015024:	eef4 6ae7 	vcmpe.f32	s13, s15
 8015028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801502c:	d47d      	bmi.n	801512a <MEMS_runMagCal.constprop.14+0x1e3a>
 801502e:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80150ac <MEMS_runMagCal.constprop.14+0x1dbc>
 8015032:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801503a:	db76      	blt.n	801512a <MEMS_runMagCal.constprop.14+0x1e3a>
 801503c:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80150b0 <MEMS_runMagCal.constprop.14+0x1dc0>
 8015040:	f89b 3500 	ldrb.w	r3, [fp, #1280]	; 0x500
 8015044:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8015048:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 801504c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015050:	ee87 0a28 	vdiv.f32	s0, s14, s17
 8015054:	ee17 2a90 	vmov	r2, s15
 8015058:	b290      	uxth	r0, r2
 801505a:	b113      	cbz	r3, 8015062 <MEMS_runMagCal.constprop.14+0x1d72>
 801505c:	3b01      	subs	r3, #1
 801505e:	f88b 3500 	strb.w	r3, [fp, #1280]	; 0x500
 8015062:	f7fd fb0b 	bl	801267c <MEMS_updateMagBufferIndex.constprop.24>
 8015066:	e633      	b.n	8014cd0 <MEMS_runMagCal.constprop.14+0x19e0>
 8015068:	eddf 9a09 	vldr	s19, [pc, #36]	; 8015090 <MEMS_runMagCal.constprop.14+0x1da0>
 801506c:	e7c5      	b.n	8014ffa <MEMS_runMagCal.constprop.14+0x1d0a>
 801506e:	bf00      	nop
 8015070:	423c0000 	.word	0x423c0000
 8015074:	3c2e4c41 	.word	0x3c2e4c41
 8015078:	3e4ccccd 	.word	0x3e4ccccd
 801507c:	2b8cbccc 	.word	0x2b8cbccc
 8015080:	358637bd 	.word	0x358637bd
 8015084:	3dcccccd 	.word	0x3dcccccd
 8015088:	3eaaaaab 	.word	0x3eaaaaab
 801508c:	3f860a92 	.word	0x3f860a92
 8015090:	00000000 	.word	0x00000000
 8015094:	41f00001 	.word	0x41f00001
 8015098:	400ccccd 	.word	0x400ccccd
 801509c:	423c0000 	.word	0x423c0000
 80150a0:	3f8ccccd 	.word	0x3f8ccccd
 80150a4:	3ee66666 	.word	0x3ee66666
 80150a8:	3f266666 	.word	0x3f266666
 80150ac:	3eb33333 	.word	0x3eb33333
 80150b0:	433d0000 	.word	0x433d0000
 80150b4:	bf800000 	.word	0xbf800000
 80150b8:	3f19999a 	.word	0x3f19999a
 80150bc:	3a83126f 	.word	0x3a83126f
 80150c0:	3c23d70a 	.word	0x3c23d70a
 80150c4:	447a0000 	.word	0x447a0000
 80150c8:	2224      	movs	r2, #36	; 0x24
 80150ca:	2100      	movs	r1, #0
 80150cc:	a846      	add	r0, sp, #280	; 0x118
 80150ce:	f00d fbe3 	bl	8022898 <memset>
 80150d2:	ad2e      	add	r5, sp, #184	; 0xb8
 80150d4:	2400      	movs	r4, #0
 80150d6:	ecf5 7a01 	vldmia	r5!, {s15}
 80150da:	ee69 7a27 	vmul.f32	s15, s18, s15
 80150de:	ee17 0a90 	vmov	r0, s15
 80150e2:	f00b ff7b 	bl	8020fdc <roundf>
 80150e6:	ee07 0a90 	vmov	s15, r0
 80150ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80150ee:	aa36      	add	r2, sp, #216	; 0xd8
 80150f0:	ee17 0a90 	vmov	r0, s15
 80150f4:	ab46      	add	r3, sp, #280	; 0x118
 80150f6:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80150fa:	f822 0014 	strh.w	r0, [r2, r4, lsl #1]
 80150fe:	3401      	adds	r4, #1
 8015100:	2c03      	cmp	r4, #3
 8015102:	ed83 8a00 	vstr	s16, [r3]
 8015106:	d1e6      	bne.n	80150d6 <MEMS_runMagCal.constprop.14+0x1de6>
 8015108:	ab25      	add	r3, sp, #148	; 0x94
 801510a:	aa34      	add	r2, sp, #208	; 0xd0
 801510c:	eeb0 0a68 	vmov.f32	s0, s17
 8015110:	a946      	add	r1, sp, #280	; 0x118
 8015112:	a836      	add	r0, sp, #216	; 0xd8
 8015114:	f7fd f9c0 	bl	8012498 <getMagStats.constprop.26>
 8015118:	ed9d 8a25 	vldr	s16, [sp, #148]	; 0x94
 801511c:	ee78 7a08 	vadd.f32	s15, s16, s16
 8015120:	ee28 8a29 	vmul.f32	s16, s16, s19
 8015124:	edcd 7a25 	vstr	s15, [sp, #148]	; 0x94
 8015128:	e734      	b.n	8014f94 <MEMS_runMagCal.constprop.14+0x1ca4>
 801512a:	ed5f 7a1d 	vldr	s15, [pc, #-116]	; 80150b8 <MEMS_runMagCal.constprop.14+0x1dc8>
 801512e:	eef4 9ae7 	vcmpe.f32	s19, s15
 8015132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015136:	d481      	bmi.n	801503c <MEMS_runMagCal.constprop.14+0x1d4c>
 8015138:	ee16 0a10 	vmov	r0, s12
 801513c:	f00b ff4e 	bl	8020fdc <roundf>
 8015140:	ee07 0a90 	vmov	s15, r0
 8015144:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015148:	ad15      	add	r5, sp, #84	; 0x54
 801514a:	ee17 3a90 	vmov	r3, s15
 801514e:	ee1a 0a90 	vmov	r0, s21
 8015152:	802b      	strh	r3, [r5, #0]
 8015154:	f00b ff42 	bl	8020fdc <roundf>
 8015158:	ee07 0a90 	vmov	s15, r0
 801515c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015160:	ee1a 0a10 	vmov	r0, s20
 8015164:	ee17 3a90 	vmov	r3, s15
 8015168:	806b      	strh	r3, [r5, #2]
 801516a:	f00b ff37 	bl	8020fdc <roundf>
 801516e:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 8015172:	ee06 0a90 	vmov	s13, r0
 8015176:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801517a:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 801517e:	ed5f 7a31 	vldr	s15, [pc, #-196]	; 80150bc <MEMS_runMagCal.constprop.14+0x1dcc>
 8015182:	ee16 3a90 	vmov	r3, s13
 8015186:	ee67 7a27 	vmul.f32	s15, s14, s15
 801518a:	80ab      	strh	r3, [r5, #4]
 801518c:	ee17 0a90 	vmov	r0, s15
 8015190:	f00b ff24 	bl	8020fdc <roundf>
 8015194:	ee07 0a90 	vmov	s15, r0
 8015198:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801519c:	ab0f      	add	r3, sp, #60	; 0x3c
 801519e:	ee17 4a90 	vmov	r4, s15
 80151a2:	eeb0 0a68 	vmov.f32	s0, s17
 80151a6:	4628      	mov	r0, r5
 80151a8:	aa10      	add	r2, sp, #64	; 0x40
 80151aa:	a946      	add	r1, sp, #280	; 0x118
 80151ac:	f8cb 4478 	str.w	r4, [fp, #1144]	; 0x478
 80151b0:	f7fd f972 	bl	8012498 <getMagStats.constprop.26>
 80151b4:	f89b 4500 	ldrb.w	r4, [fp, #1280]	; 0x500
 80151b8:	ed5f 6a3f 	vldr	s13, [pc, #-252]	; 80150c0 <MEMS_runMagCal.constprop.14+0x1dd0>
 80151bc:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 80151c0:	005b      	lsls	r3, r3, #1
 80151c2:	ee07 3a90 	vmov	s15, r3
 80151c6:	ee07 0a10 	vmov	s14, r0
 80151ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80151ce:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80151d2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80151d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80151da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80151de:	f300 82cb 	bgt.w	8015778 <MEMS_runMagCal.constprop.14+0x2488>
 80151e2:	ed9d 7a0f 	vldr	s14, [sp, #60]	; 0x3c
 80151e6:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80151ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80151ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80151f2:	f340 82be 	ble.w	8015772 <MEMS_runMagCal.constprop.14+0x2482>
 80151f6:	f89b 84b4 	ldrb.w	r8, [fp, #1204]	; 0x4b4
 80151fa:	fab8 f888 	clz	r8, r8
 80151fe:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8015202:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 8015206:	f8db 7478 	ldr.w	r7, [fp, #1144]	; 0x478
 801520a:	9729      	str	r7, [sp, #164]	; 0xa4
 801520c:	ee69 7a27 	vmul.f32	s15, s18, s15
 8015210:	eec7 7aa9 	vdiv.f32	s15, s15, s19
 8015214:	ee17 0a90 	vmov	r0, s15
 8015218:	f00b fee0 	bl	8020fdc <roundf>
 801521c:	ee07 0a90 	vmov	s15, r0
 8015220:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015224:	ee17 3a90 	vmov	r3, s15
 8015228:	ee69 7a08 	vmul.f32	s15, s18, s16
 801522c:	f88d 30a8 	strb.w	r3, [sp, #168]	; 0xa8
 8015230:	ee17 0a90 	vmov	r0, s15
 8015234:	f00b fed2 	bl	8020fdc <roundf>
 8015238:	ee07 0a90 	vmov	s15, r0
 801523c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015240:	ed1f 7a60 	vldr	s14, [pc, #-384]	; 80150c4 <MEMS_runMagCal.constprop.14+0x1dd4>
 8015244:	ee17 0a90 	vmov	r0, s15
 8015248:	f10d 02ae 	add.w	r2, sp, #174	; 0xae
 801524c:	f88d 00a9 	strb.w	r0, [sp, #169]	; 0xa9
 8015250:	2300      	movs	r3, #0
 8015252:	a946      	add	r1, sp, #280	; 0x118
 8015254:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 8015258:	edd1 7a00 	vldr	s15, [r1]
 801525c:	f835 1013 	ldrh.w	r1, [r5, r3, lsl #1]
 8015260:	f822 1c04 	strh.w	r1, [r2, #-4]
 8015264:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015268:	3301      	adds	r3, #1
 801526a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801526e:	2b03      	cmp	r3, #3
 8015270:	ee17 1a90 	vmov	r1, s15
 8015274:	f822 1f02 	strh.w	r1, [r2, #2]!
 8015278:	d1eb      	bne.n	8015252 <MEMS_runMagCal.constprop.14+0x1f62>
 801527a:	9b04      	ldr	r3, [sp, #16]
 801527c:	b113      	cbz	r3, 8015284 <MEMS_runMagCal.constprop.14+0x1f94>
 801527e:	23ff      	movs	r3, #255	; 0xff
 8015280:	f88d 30a8 	strb.w	r3, [sp, #168]	; 0xa8
 8015284:	2600      	movs	r6, #0
 8015286:	f88b 6474 	strb.w	r6, [fp, #1140]	; 0x474
 801528a:	f1b8 0f00 	cmp.w	r8, #0
 801528e:	f43e aac8 	beq.w	8013822 <MEMS_runMagCal.constprop.14+0x532>
 8015292:	f89b 34b4 	ldrb.w	r3, [fp, #1204]	; 0x4b4
 8015296:	f88b 6475 	strb.w	r6, [fp, #1141]	; 0x475
 801529a:	2b00      	cmp	r3, #0
 801529c:	f040 80f0 	bne.w	8015480 <MEMS_runMagCal.constprop.14+0x2190>
 80152a0:	4d72      	ldr	r5, [pc, #456]	; (801546c <MEMS_runMagCal.constprop.14+0x217c>)
 80152a2:	f10d 0938 	add.w	r9, sp, #56	; 0x38
 80152a6:	f10d 06aa 	add.w	r6, sp, #170	; 0xaa
 80152aa:	f10d 08a4 	add.w	r8, sp, #164	; 0xa4
 80152ae:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 80152b2:	f8df e1c4 	ldr.w	lr, [pc, #452]	; 8015478 <MEMS_runMagCal.constprop.14+0x2188>
 80152b6:	f8cb 747c 	str.w	r7, [fp, #1148]	; 0x47c
 80152ba:	ed1e 0a15 	vldr	s0, [lr, #-84]	; 0xffffffac
 80152be:	f8bd a0b0 	ldrh.w	sl, [sp, #176]	; 0xb0
 80152c2:	f8bd c0b2 	ldrh.w	ip, [sp, #178]	; 0xb2
 80152c6:	eddf 7a6d 	vldr	s15, [pc, #436]	; 801547c <MEMS_runMagCal.constprop.14+0x218c>
 80152ca:	f8d8 8000 	ldr.w	r8, [r8]
 80152ce:	f1ae 0758 	sub.w	r7, lr, #88	; 0x58
 80152d2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80152d6:	f9bd 30aa 	ldrsh.w	r3, [sp, #170]	; 0xaa
 80152da:	f8bd 20b4 	ldrh.w	r2, [sp, #180]	; 0xb4
 80152de:	f8ce 8000 	str.w	r8, [lr]
 80152e2:	ee03 3a90 	vmov	s7, r3
 80152e6:	f9bd 30ac 	ldrsh.w	r3, [sp, #172]	; 0xac
 80152ea:	f89b 0485 	ldrb.w	r0, [fp, #1157]	; 0x485
 80152ee:	ee04 3a10 	vmov	s8, r3
 80152f2:	f9bd 30ae 	ldrsh.w	r3, [sp, #174]	; 0xae
 80152f6:	ee04 3a90 	vmov	s9, r3
 80152fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80152fe:	fb03 f10a 	mul.w	r1, r3, sl
 8015302:	ee05 1a10 	vmov	s10, r1
 8015306:	fb03 f10c 	mul.w	r1, r3, ip
 801530a:	fb03 f302 	mul.w	r3, r3, r2
 801530e:	ee05 1a90 	vmov	s11, r1
 8015312:	ee06 3a10 	vmov	s12, r3
 8015316:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 801531a:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 801531e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8015322:	ee25 5a27 	vmul.f32	s10, s10, s15
 8015326:	ee65 5aa7 	vmul.f32	s11, s11, s15
 801532a:	ee26 6a27 	vmul.f32	s12, s12, s15
 801532e:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 8015332:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 8015336:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 801533a:	2301      	movs	r3, #1
 801533c:	2100      	movs	r1, #0
 801533e:	22ff      	movs	r2, #255	; 0xff
 8015340:	ed87 5a1f 	vstr	s10, [r7, #124]	; 0x7c
 8015344:	edc7 5a23 	vstr	s11, [r7, #140]	; 0x8c
 8015348:	ed87 6a27 	vstr	s12, [r7, #156]	; 0x9c
 801534c:	edc7 3a1c 	vstr	s7, [r7, #112]	; 0x70
 8015350:	ed87 4a1d 	vstr	s8, [r7, #116]	; 0x74
 8015354:	edc7 4a1e 	vstr	s9, [r7, #120]	; 0x78
 8015358:	f88b 34b4 	strb.w	r3, [fp, #1204]	; 0x4b4
 801535c:	f88b 34cd 	strb.w	r3, [fp, #1229]	; 0x4cd
 8015360:	f88b 1484 	strb.w	r1, [fp, #1156]	; 0x484
 8015364:	f88b 2486 	strb.w	r2, [fp, #1158]	; 0x486
 8015368:	2c00      	cmp	r4, #0
 801536a:	d04e      	beq.n	801540a <MEMS_runMagCal.constprop.14+0x211a>
 801536c:	ed9f 3a40 	vldr	s6, [pc, #256]	; 8015470 <MEMS_runMagCal.constprop.14+0x2180>
 8015370:	f89b 7501 	ldrb.w	r7, [fp, #1281]	; 0x501
 8015374:	ee20 3a03 	vmul.f32	s6, s0, s6
 8015378:	f04f 32ff 	mov.w	r2, #4294967295
 801537c:	468c      	mov	ip, r1
 801537e:	fb9c f3f7 	sdiv	r3, ip, r7
 8015382:	fb07 c313 	mls	r3, r7, r3, ip
 8015386:	b2db      	uxtb	r3, r3
 8015388:	3315      	adds	r3, #21
 801538a:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 801538e:	f102 0c01 	add.w	ip, r2, #1
 8015392:	f9b3 247c 	ldrsh.w	r2, [r3, #1148]	; 0x47c
 8015396:	ee07 2a90 	vmov	s15, r2
 801539a:	f9b3 247a 	ldrsh.w	r2, [r3, #1146]	; 0x47a
 801539e:	f9b3 347e 	ldrsh.w	r3, [r3, #1150]	; 0x47e
 80153a2:	ee06 2a90 	vmov	s13, r2
 80153a6:	fb9c f2f0 	sdiv	r2, ip, r0
 80153aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80153ae:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80153b2:	ee77 7ac4 	vsub.f32	s15, s15, s8
 80153b6:	ee07 3a10 	vmov	s14, r3
 80153ba:	ee76 6ae3 	vsub.f32	s13, s13, s7
 80153be:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80153c2:	ee66 6a85 	vmul.f32	s13, s13, s10
 80153c6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80153ca:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80153ce:	eee6 7aa6 	vfma.f32	s15, s13, s13
 80153d2:	fb00 c212 	mls	r2, r0, r2, ip
 80153d6:	b252      	sxtb	r2, r2
 80153d8:	ee37 7a64 	vsub.f32	s14, s14, s9
 80153dc:	3101      	adds	r1, #1
 80153de:	ee27 7a06 	vmul.f32	s14, s14, s12
 80153e2:	b209      	sxth	r1, r1
 80153e4:	eee7 7a07 	vfma.f32	s15, s14, s14
 80153e8:	eb0b 0342 	add.w	r3, fp, r2, lsl #1
 80153ec:	42a1      	cmp	r1, r4
 80153ee:	468c      	mov	ip, r1
 80153f0:	eeb1 7ae7 	vsqrt.f32	s14, s15
 80153f4:	ee67 7a03 	vmul.f32	s15, s14, s6
 80153f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80153fc:	ee17 ea90 	vmov	lr, s15
 8015400:	f8a3 e488 	strh.w	lr, [r3, #1160]	; 0x488
 8015404:	dbbb      	blt.n	801537e <MEMS_runMagCal.constprop.14+0x208e>
 8015406:	f88b 2486 	strb.w	r2, [fp, #1158]	; 0x486
 801540a:	4284      	cmp	r4, r0
 801540c:	bf28      	it	cs
 801540e:	4604      	movcs	r4, r0
 8015410:	4629      	mov	r1, r5
 8015412:	4630      	mov	r0, r6
 8015414:	464b      	mov	r3, r9
 8015416:	aa0d      	add	r2, sp, #52	; 0x34
 8015418:	f88b 4484 	strb.w	r4, [fp, #1156]	; 0x484
 801541c:	f7fd f83c 	bl	8012498 <getMagStats.constprop.26>
 8015420:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8015474 <MEMS_runMagCal.constprop.14+0x2184>
 8015424:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 8015428:	edd9 6a00 	vldr	s13, [r9]
 801542c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015430:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8015434:	eef0 7ae7 	vabs.f32	s15, s15
 8015438:	eef4 7ac7 	vcmpe.f32	s15, s14
 801543c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015440:	f140 8175 	bpl.w	801572e <MEMS_runMagCal.constprop.14+0x243e>
 8015444:	eef4 6ac7 	vcmpe.f32	s13, s14
 8015448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801544c:	f140 816f 	bpl.w	801572e <MEMS_runMagCal.constprop.14+0x243e>
 8015450:	2303      	movs	r3, #3
 8015452:	f89d 20a8 	ldrb.w	r2, [sp, #168]	; 0xa8
 8015456:	f88b 34cc 	strb.w	r3, [fp, #1228]	; 0x4cc
 801545a:	2ac8      	cmp	r2, #200	; 0xc8
 801545c:	f67e a9e1 	bls.w	8013822 <MEMS_runMagCal.constprop.14+0x532>
 8015460:	2302      	movs	r3, #2
 8015462:	f88b 34cc 	strb.w	r3, [fp, #1228]	; 0x4cc
 8015466:	f7fe b9dc 	b.w	8013822 <MEMS_runMagCal.constprop.14+0x532>
 801546a:	bf00      	nop
 801546c:	2000501c 	.word	0x2000501c
 8015470:	42c80000 	.word	0x42c80000
 8015474:	423c0000 	.word	0x423c0000
 8015478:	20004ff8 	.word	0x20004ff8
 801547c:	358637bd 	.word	0x358637bd
 8015480:	f8bd 00b4 	ldrh.w	r0, [sp, #180]	; 0xb4
 8015484:	f8bd 10b0 	ldrh.w	r1, [sp, #176]	; 0xb0
 8015488:	f8bd 20b2 	ldrh.w	r2, [sp, #178]	; 0xb2
 801548c:	ed1f 6a05 	vldr	s12, [pc, #-20]	; 801547c <MEMS_runMagCal.constprop.14+0x218c>
 8015490:	4dd2      	ldr	r5, [pc, #840]	; (80157dc <MEMS_runMagCal.constprop.14+0x24ec>)
 8015492:	9647      	str	r6, [sp, #284]	; 0x11c
 8015494:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8015498:	fb03 f101 	mul.w	r1, r3, r1
 801549c:	fb03 f202 	mul.w	r2, r3, r2
 80154a0:	fb03 f300 	mul.w	r3, r3, r0
 80154a4:	ee06 1a90 	vmov	s13, r1
 80154a8:	ee07 2a10 	vmov	s14, r2
 80154ac:	ee07 3a90 	vmov	s15, r3
 80154b0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80154b4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80154b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80154bc:	ee66 6a86 	vmul.f32	s13, s13, s12
 80154c0:	ee27 7a06 	vmul.f32	s14, s14, s12
 80154c4:	ee67 7a86 	vmul.f32	s15, s15, s12
 80154c8:	ed15 0a1e 	vldr	s0, [r5, #-120]	; 0xffffff88
 80154cc:	9648      	str	r6, [sp, #288]	; 0x120
 80154ce:	4629      	mov	r1, r5
 80154d0:	ab36      	add	r3, sp, #216	; 0xd8
 80154d2:	aa0d      	add	r2, sp, #52	; 0x34
 80154d4:	9649      	str	r6, [sp, #292]	; 0x124
 80154d6:	964b      	str	r6, [sp, #300]	; 0x12c
 80154d8:	964c      	str	r6, [sp, #304]	; 0x130
 80154da:	964d      	str	r6, [sp, #308]	; 0x134
 80154dc:	f10d 0938 	add.w	r9, sp, #56	; 0x38
 80154e0:	f1a5 001e 	sub.w	r0, r5, #30
 80154e4:	f10d 06aa 	add.w	r6, sp, #170	; 0xaa
 80154e8:	edcd 6a46 	vstr	s13, [sp, #280]	; 0x118
 80154ec:	ed8d 7a4a 	vstr	s14, [sp, #296]	; 0x128
 80154f0:	edcd 7a4e 	vstr	s15, [sp, #312]	; 0x138
 80154f4:	f7fc ffd0 	bl	8012498 <getMagStats.constprop.26>
 80154f8:	a946      	add	r1, sp, #280	; 0x118
 80154fa:	464b      	mov	r3, r9
 80154fc:	4630      	mov	r0, r6
 80154fe:	aa0d      	add	r2, sp, #52	; 0x34
 8015500:	ed15 0a1e 	vldr	s0, [r5, #-120]	; 0xffffff88
 8015504:	f7fc ffc8 	bl	8012498 <getMagStats.constprop.26>
 8015508:	eddf 6ab5 	vldr	s13, [pc, #724]	; 80157e0 <MEMS_runMagCal.constprop.14+0x24f0>
 801550c:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 8015510:	ed99 7a00 	vldr	s14, [r9]
 8015514:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8015518:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 801551c:	eef0 7ae7 	vabs.f32	s15, s15
 8015520:	eef4 7ae6 	vcmpe.f32	s15, s13
 8015524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015528:	f140 8110 	bpl.w	801574c <MEMS_runMagCal.constprop.14+0x245c>
 801552c:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8015530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015534:	f140 810a 	bpl.w	801574c <MEMS_runMagCal.constprop.14+0x245c>
 8015538:	2303      	movs	r3, #3
 801553a:	eddd 6a36 	vldr	s13, [sp, #216]	; 0xd8
 801553e:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8015542:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015546:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801554a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801554e:	f57e a968 	bpl.w	8013822 <MEMS_runMagCal.constprop.14+0x532>
 8015552:	f89b 24cc 	ldrb.w	r2, [fp, #1228]	; 0x4cc
 8015556:	429a      	cmp	r2, r3
 8015558:	f63e a963 	bhi.w	8013822 <MEMS_runMagCal.constprop.14+0x532>
 801555c:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8015560:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015564:	eef4 6ae7 	vcmpe.f32	s13, s15
 8015568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801556c:	d40e      	bmi.n	801558c <MEMS_runMagCal.constprop.14+0x229c>
 801556e:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 8015572:	eef4 6ae7 	vcmpe.f32	s13, s15
 8015576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801557a:	f140 80d4 	bpl.w	8015726 <MEMS_runMagCal.constprop.14+0x2436>
 801557e:	f89b 24bc 	ldrb.w	r2, [fp, #1212]	; 0x4bc
 8015582:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 8015586:	429a      	cmp	r2, r3
 8015588:	f080 80cd 	bcs.w	8015726 <MEMS_runMagCal.constprop.14+0x2436>
 801558c:	4b95      	ldr	r3, [pc, #596]	; (80157e4 <MEMS_runMagCal.constprop.14+0x24f4>)
 801558e:	f9bb 14c0 	ldrsh.w	r1, [fp, #1216]	; 0x4c0
 8015592:	f9bd 70ac 	ldrsh.w	r7, [sp, #172]	; 0xac
 8015596:	f9bb 04be 	ldrsh.w	r0, [fp, #1214]	; 0x4be
 801559a:	f9bd e0aa 	ldrsh.w	lr, [sp, #170]	; 0xaa
 801559e:	edd3 5a01 	vldr	s11, [r3, #4]
 80155a2:	f9bb 24c2 	ldrsh.w	r2, [fp, #1218]	; 0x4c2
 80155a6:	f9bd 40ae 	ldrsh.w	r4, [sp, #174]	; 0xae
 80155aa:	1bcb      	subs	r3, r1, r7
 80155ac:	eba0 0c0e 	sub.w	ip, r0, lr
 80155b0:	2b00      	cmp	r3, #0
 80155b2:	bfb8      	it	lt
 80155b4:	425b      	neglt	r3, r3
 80155b6:	f1bc 0f00 	cmp.w	ip, #0
 80155ba:	bfb8      	it	lt
 80155bc:	f1cc 0c00 	rsblt	ip, ip, #0
 80155c0:	4563      	cmp	r3, ip
 80155c2:	bfb8      	it	lt
 80155c4:	4663      	movlt	r3, ip
 80155c6:	eba2 0c04 	sub.w	ip, r2, r4
 80155ca:	f1bc 0f00 	cmp.w	ip, #0
 80155ce:	b21b      	sxth	r3, r3
 80155d0:	bfb8      	it	lt
 80155d2:	f1cc 0c00 	rsblt	ip, ip, #0
 80155d6:	4563      	cmp	r3, ip
 80155d8:	bfb8      	it	lt
 80155da:	4663      	movlt	r3, ip
 80155dc:	b21b      	sxth	r3, r3
 80155de:	ee07 3a90 	vmov	s15, r3
 80155e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80155e6:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 80155ea:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80155ee:	eef4 7ac6 	vcmpe.f32	s15, s12
 80155f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80155f6:	f140 8096 	bpl.w	8015726 <MEMS_runMagCal.constprop.14+0x2436>
 80155fa:	ee37 7a26 	vadd.f32	s14, s14, s13
 80155fe:	f8bb 34c4 	ldrh.w	r3, [fp, #1220]	; 0x4c4
 8015602:	eec6 3a87 	vdiv.f32	s7, s13, s14
 8015606:	ee04 3a90 	vmov	s9, r3
 801560a:	f8bb 34c6 	ldrh.w	r3, [fp, #1222]	; 0x4c6
 801560e:	ee05 3a10 	vmov	s10, r3
 8015612:	f8bb 34c8 	ldrh.w	r3, [fp, #1224]	; 0x4c8
 8015616:	ee07 0a90 	vmov	s15, r0
 801561a:	ee05 3a90 	vmov	s11, r3
 801561e:	f89b 34bc 	ldrb.w	r3, [fp, #1212]	; 0x4bc
 8015622:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8015626:	ee36 4a63 	vsub.f32	s8, s12, s7
 801562a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801562e:	ee06 3a10 	vmov	s12, r3
 8015632:	ee03 ea10 	vmov	s6, lr
 8015636:	f8bd 30b0 	ldrh.w	r3, [sp, #176]	; 0xb0
 801563a:	ee07 1a90 	vmov	s15, r1
 801563e:	ee00 3a90 	vmov	s1, r3
 8015642:	ee66 6a84 	vmul.f32	s13, s13, s8
 8015646:	eeb8 2ac3 	vcvt.f32.s32	s4, s6
 801564a:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 801564e:	f8bd 30b2 	ldrh.w	r3, [sp, #178]	; 0xb2
 8015652:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8015656:	ee64 4a84 	vmul.f32	s9, s9, s8
 801565a:	ee03 7a10 	vmov	s6, r7
 801565e:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8015662:	eee3 6a82 	vfma.f32	s13, s7, s4
 8015666:	ee07 2a90 	vmov	s15, r2
 801566a:	ee01 3a10 	vmov	s2, r3
 801566e:	ee27 7a04 	vmul.f32	s14, s14, s8
 8015672:	f8bd 30b4 	ldrh.w	r3, [sp, #180]	; 0xb4
 8015676:	eef8 2ac3 	vcvt.f32.s32	s5, s6
 801567a:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 801567e:	eee3 4aa0 	vfma.f32	s9, s7, s1
 8015682:	ee01 3a90 	vmov	s3, r3
 8015686:	ee25 5a04 	vmul.f32	s10, s10, s8
 801568a:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 801568e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015692:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8015696:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 801569a:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 801569e:	ee03 4a10 	vmov	s6, r4
 80156a2:	eea3 7aa2 	vfma.f32	s14, s7, s5
 80156a6:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 80156aa:	ee67 7a84 	vmul.f32	s15, s15, s8
 80156ae:	ee65 5a84 	vmul.f32	s11, s11, s8
 80156b2:	ee26 6a04 	vmul.f32	s12, s12, s8
 80156b6:	ee16 2a90 	vmov	r2, s13
 80156ba:	ee04 3a10 	vmov	s8, r3
 80156be:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 80156c2:	eea3 5a81 	vfma.f32	s10, s7, s2
 80156c6:	f8ad 20aa 	strh.w	r2, [sp, #170]	; 0xaa
 80156ca:	eefc 4ae4 	vcvt.u32.f32	s9, s9
 80156ce:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 80156d2:	ee14 2a90 	vmov	r2, s9
 80156d6:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 80156da:	eee3 7a83 	vfma.f32	s15, s7, s6
 80156de:	f8ad 20b0 	strh.w	r2, [sp, #176]	; 0xb0
 80156e2:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80156e6:	eee3 5aa1 	vfma.f32	s11, s7, s3
 80156ea:	ee17 2a10 	vmov	r2, s14
 80156ee:	eea3 6a84 	vfma.f32	s12, s7, s8
 80156f2:	f8ad 20ac 	strh.w	r2, [sp, #172]	; 0xac
 80156f6:	eebc 5ac5 	vcvt.u32.f32	s10, s10
 80156fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80156fe:	ee15 2a10 	vmov	r2, s10
 8015702:	eefc 5ae5 	vcvt.u32.f32	s11, s11
 8015706:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 801570a:	f8ad 20b2 	strh.w	r2, [sp, #178]	; 0xb2
 801570e:	ee17 2a90 	vmov	r2, s15
 8015712:	ee16 3a10 	vmov	r3, s12
 8015716:	f8ad 20ae 	strh.w	r2, [sp, #174]	; 0xae
 801571a:	ee15 2a90 	vmov	r2, s11
 801571e:	f88d 30a8 	strb.w	r3, [sp, #168]	; 0xa8
 8015722:	f8ad 20b4 	strh.w	r2, [sp, #180]	; 0xb4
 8015726:	9f29      	ldr	r7, [sp, #164]	; 0xa4
 8015728:	f89b 4500 	ldrb.w	r4, [fp, #1280]	; 0x500
 801572c:	e5bd      	b.n	80152aa <MEMS_runMagCal.constprop.14+0x1fba>
 801572e:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8015732:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801573a:	d516      	bpl.n	801576a <MEMS_runMagCal.constprop.14+0x247a>
 801573c:	eef4 6ac7 	vcmpe.f32	s13, s14
 8015740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015744:	bf4c      	ite	mi
 8015746:	2302      	movmi	r3, #2
 8015748:	2301      	movpl	r3, #1
 801574a:	e682      	b.n	8015452 <MEMS_runMagCal.constprop.14+0x2162>
 801574c:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8015750:	eef4 7ae6 	vcmpe.f32	s15, s13
 8015754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015758:	d509      	bpl.n	801576e <MEMS_runMagCal.constprop.14+0x247e>
 801575a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801575e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015762:	bf4c      	ite	mi
 8015764:	2302      	movmi	r3, #2
 8015766:	2301      	movpl	r3, #1
 8015768:	e6e7      	b.n	801553a <MEMS_runMagCal.constprop.14+0x224a>
 801576a:	2301      	movs	r3, #1
 801576c:	e671      	b.n	8015452 <MEMS_runMagCal.constprop.14+0x2162>
 801576e:	2301      	movs	r3, #1
 8015770:	e6e3      	b.n	801553a <MEMS_runMagCal.constprop.14+0x224a>
 8015772:	f04f 0801 	mov.w	r8, #1
 8015776:	e544      	b.n	8015202 <MEMS_runMagCal.constprop.14+0x1f12>
 8015778:	f04f 0800 	mov.w	r8, #0
 801577c:	e541      	b.n	8015202 <MEMS_runMagCal.constprop.14+0x1f12>
 801577e:	fb93 f1f4 	sdiv	r1, r3, r4
 8015782:	fb04 3311 	mls	r3, r4, r1, r3
 8015786:	b219      	sxth	r1, r3
 8015788:	f7ff bb4c 	b.w	8014e24 <MEMS_runMagCal.constprop.14+0x1b34>
 801578c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015790:	f7ff bafe 	b.w	8014d90 <MEMS_runMagCal.constprop.14+0x1aa0>
 8015794:	3a01      	subs	r2, #1
 8015796:	1c53      	adds	r3, r2, #1
 8015798:	f101 0114 	add.w	r1, r1, #20
 801579c:	f47f abc5 	bne.w	8014f2a <MEMS_runMagCal.constprop.14+0x1c3a>
 80157a0:	2240      	movs	r2, #64	; 0x40
 80157a2:	2100      	movs	r1, #0
 80157a4:	a846      	add	r0, sp, #280	; 0x118
 80157a6:	f00d f877 	bl	8022898 <memset>
 80157aa:	a946      	add	r1, sp, #280	; 0x118
 80157ac:	2200      	movs	r2, #0
 80157ae:	f04f 0e14 	mov.w	lr, #20
 80157b2:	ac36      	add	r4, sp, #216	; 0xd8
 80157b4:	b256      	sxtb	r6, r2
 80157b6:	2000      	movs	r0, #0
 80157b8:	eb01 0986 	add.w	r9, r1, r6, lsl #2
 80157bc:	4603      	mov	r3, r0
 80157be:	eb04 1802 	add.w	r8, r4, r2, lsl #4
 80157c2:	fb0e 4c02 	mla	ip, lr, r2, r4
 80157c6:	ac46      	add	r4, sp, #280	; 0x118
 80157c8:	eb04 1503 	add.w	r5, r4, r3, lsl #4
 80157cc:	b2c4      	uxtb	r4, r0
 80157ce:	462f      	mov	r7, r5
 80157d0:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 80157d4:	468a      	mov	sl, r1
 80157d6:	eddf 7a05 	vldr	s15, [pc, #20]	; 80157ec <MEMS_runMagCal.constprop.14+0x24fc>
 80157da:	e013      	b.n	8015804 <MEMS_runMagCal.constprop.14+0x2514>
 80157dc:	2000501c 	.word	0x2000501c
 80157e0:	423c0000 	.word	0x423c0000
 80157e4:	20004fa0 	.word	0x20004fa0
 80157e8:	3dcccccd 	.word	0x3dcccccd
 80157ec:	00000000 	.word	0x00000000
 80157f0:	3e99999a 	.word	0x3e99999a
 80157f4:	3f666666 	.word	0x3f666666
 80157f8:	ecfa 6a01 	vldmia	sl!, {s13}
 80157fc:	ecb7 7a01 	vldmia	r7!, {s14}
 8015800:	eee6 7a87 	vfma.f32	s15, s13, s14
 8015804:	45a2      	cmp	sl, r4
 8015806:	d1f7      	bne.n	80157f8 <MEMS_runMagCal.constprop.14+0x2508>
 8015808:	429e      	cmp	r6, r3
 801580a:	f000 80b5 	beq.w	8015978 <MEMS_runMagCal.constprop.14+0x2688>
 801580e:	009b      	lsls	r3, r3, #2
 8015810:	441d      	add	r5, r3
 8015812:	edd5 6a00 	vldr	s13, [r5]
 8015816:	eeb0 7ae6 	vabs.f32	s14, s13
 801581a:	eeb4 7ac8 	vcmpe.f32	s14, s16
 801581e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015822:	f53f ab90 	bmi.w	8014f46 <MEMS_runMagCal.constprop.14+0x1c56>
 8015826:	eb08 0403 	add.w	r4, r8, r3
 801582a:	ed94 7a00 	vldr	s14, [r4]
 801582e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015832:	440b      	add	r3, r1
 8015834:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8015838:	ed83 7a00 	vstr	s14, [r3]
 801583c:	3001      	adds	r0, #1
 801583e:	b243      	sxtb	r3, r0
 8015840:	42b3      	cmp	r3, r6
 8015842:	ddc0      	ble.n	80157c6 <MEMS_runMagCal.constprop.14+0x24d6>
 8015844:	3201      	adds	r2, #1
 8015846:	2a04      	cmp	r2, #4
 8015848:	f101 0110 	add.w	r1, r1, #16
 801584c:	d1b1      	bne.n	80157b2 <MEMS_runMagCal.constprop.14+0x24c2>
 801584e:	aa21      	add	r2, sp, #132	; 0x84
 8015850:	a91d      	add	r1, sp, #116	; 0x74
 8015852:	a846      	add	r0, sp, #280	; 0x118
 8015854:	f7fc fa1a 	bl	8011c8c <llEvaluate.constprop.23>
 8015858:	ed5f 9a1d 	vldr	s19, [pc, #-116]	; 80157e8 <MEMS_runMagCal.constprop.14+0x24f8>
 801585c:	ad21      	add	r5, sp, #132	; 0x84
 801585e:	ae25      	add	r6, sp, #148	; 0x94
 8015860:	f10d 0890 	add.w	r8, sp, #144	; 0x90
 8015864:	2400      	movs	r4, #0
 8015866:	f04f 577e 	mov.w	r7, #1065353216	; 0x3f800000
 801586a:	e9cd 4421 	strd	r4, r4, [sp, #132]	; 0x84
 801586e:	e9cd 4423 	strd	r4, r4, [sp, #140]	; 0x8c
 8015872:	aa21      	add	r2, sp, #132	; 0x84
 8015874:	a925      	add	r1, sp, #148	; 0x94
 8015876:	a846      	add	r0, sp, #280	; 0x118
 8015878:	f845 7b04 	str.w	r7, [r5], #4
 801587c:	f7fc fa06 	bl	8011c8c <llEvaluate.constprop.23>
 8015880:	ecb6 7a01 	vldmia	r6!, {s14}
 8015884:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8015888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801588c:	f340 8083 	ble.w	8015996 <MEMS_runMagCal.constprop.14+0x26a6>
 8015890:	eef1 7ac7 	vsqrt.f32	s15, s14
 8015894:	eef4 9ae7 	vcmpe.f32	s19, s15
 8015898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801589c:	bfb8      	it	lt
 801589e:	eef0 9a67 	vmovlt.f32	s19, s15
 80158a2:	45a8      	cmp	r8, r5
 80158a4:	d1e1      	bne.n	801586a <MEMS_runMagCal.constprop.14+0x257a>
 80158a6:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 80158aa:	eddd 6a20 	vldr	s13, [sp, #128]	; 0x80
 80158ae:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 80158b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80158b6:	eef4 6ae7 	vcmpe.f32	s13, s15
 80158ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80158be:	d501      	bpl.n	80158c4 <MEMS_runMagCal.constprop.14+0x25d4>
 80158c0:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 80158c4:	ed9d 4a1d 	vldr	s8, [sp, #116]	; 0x74
 80158c8:	ed9d 5a1e 	vldr	s10, [sp, #120]	; 0x78
 80158cc:	ed1f 2a39 	vldr	s4, [pc, #-228]	; 80157ec <MEMS_runMagCal.constprop.14+0x24fc>
 80158d0:	ed9d 6a1f 	vldr	s12, [sp, #124]	; 0x7c
 80158d4:	eddd 5a30 	vldr	s11, [sp, #192]	; 0xc0
 80158d8:	eddd 3a2e 	vldr	s7, [sp, #184]	; 0xb8
 80158dc:	eddd 4a2f 	vldr	s9, [sp, #188]	; 0xbc
 80158e0:	eddd 6a20 	vldr	s13, [sp, #128]	; 0x80
 80158e4:	ed9d 3a31 	vldr	s6, [sp, #196]	; 0xc4
 80158e8:	ed5f 2a3f 	vldr	s5, [pc, #-252]	; 80157f0 <MEMS_runMagCal.constprop.14+0x2500>
 80158ec:	eeb0 7ac4 	vabs.f32	s14, s8
 80158f0:	eef0 7ac5 	vabs.f32	s15, s10
 80158f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80158f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80158fc:	bfa8      	it	ge
 80158fe:	eef0 7a47 	vmovge.f32	s15, s14
 8015902:	eef4 7ac2 	vcmpe.f32	s15, s4
 8015906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801590a:	eeb0 7ac6 	vabs.f32	s14, s12
 801590e:	bfb8      	it	lt
 8015910:	eef0 7a42 	vmovlt.f32	s15, s4
 8015914:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801591c:	bfa8      	it	ge
 801591e:	eef0 7a47 	vmovge.f32	s15, s14
 8015922:	ee35 6a86 	vadd.f32	s12, s11, s12
 8015926:	ee33 4a84 	vadd.f32	s8, s7, s8
 801592a:	ee34 5a85 	vadd.f32	s10, s9, s10
 801592e:	ee73 5a26 	vadd.f32	s11, s6, s13
 8015932:	eef4 7ae2 	vcmpe.f32	s15, s5
 8015936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801593a:	ed8d 4a2e 	vstr	s8, [sp, #184]	; 0xb8
 801593e:	ed8d 5a2f 	vstr	s10, [sp, #188]	; 0xbc
 8015942:	ed8d 6a30 	vstr	s12, [sp, #192]	; 0xc0
 8015946:	edcd 5a31 	vstr	s11, [sp, #196]	; 0xc4
 801594a:	eeb0 7ae6 	vabs.f32	s14, s13
 801594e:	d50a      	bpl.n	8015966 <MEMS_runMagCal.constprop.14+0x2676>
 8015950:	ed5f 6a58 	vldr	s13, [pc, #-352]	; 80157f4 <MEMS_runMagCal.constprop.14+0x2504>
 8015954:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8015958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801595c:	d503      	bpl.n	8015966 <MEMS_runMagCal.constprop.14+0x2676>
 801595e:	9b00      	ldr	r3, [sp, #0]
 8015960:	2b01      	cmp	r3, #1
 8015962:	f63f aaf6 	bhi.w	8014f52 <MEMS_runMagCal.constprop.14+0x1c62>
 8015966:	9b00      	ldr	r3, [sp, #0]
 8015968:	3301      	adds	r3, #1
 801596a:	b2db      	uxtb	r3, r3
 801596c:	2b05      	cmp	r3, #5
 801596e:	9300      	str	r3, [sp, #0]
 8015970:	f47f aa26 	bne.w	8014dc0 <MEMS_runMagCal.constprop.14+0x1ad0>
 8015974:	f7ff baed 	b.w	8014f52 <MEMS_runMagCal.constprop.14+0x1c62>
 8015978:	ed9c 7a00 	vldr	s14, [ip]
 801597c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015984:	f57f aadf 	bpl.w	8014f46 <MEMS_runMagCal.constprop.14+0x1c56>
 8015988:	ee77 7a67 	vsub.f32	s15, s14, s15
 801598c:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8015990:	ed89 7a00 	vstr	s14, [r9]
 8015994:	e752      	b.n	801583c <MEMS_runMagCal.constprop.14+0x254c>
 8015996:	eef2 9a04 	vmov.f32	s19, #36	; 0x41200000  10.0
 801599a:	e782      	b.n	80158a2 <MEMS_runMagCal.constprop.14+0x25b2>
 801599c:	0000      	movs	r0, r0
	...

080159a0 <m_kalman_3gyro.isra.6.constprop.36>:
 80159a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159a4:	ed2d 8b10 	vpush	{d8-d15}
 80159a8:	4ccb      	ldr	r4, [pc, #812]	; (8015cd8 <m_kalman_3gyro.isra.6.constprop.36+0x338>)
 80159aa:	f2ad 6d34 	subw	sp, sp, #1588	; 0x634
 80159ae:	468e      	mov	lr, r1
 80159b0:	4690      	mov	r8, r2
 80159b2:	9001      	str	r0, [sp, #4]
 80159b4:	9127      	str	r1, [sp, #156]	; 0x9c
 80159b6:	920b      	str	r2, [sp, #44]	; 0x2c
 80159b8:	9308      	str	r3, [sp, #32]
 80159ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80159bc:	aeb6      	add	r6, sp, #728	; 0x2d8
 80159be:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80159c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80159c2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80159c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80159c6:	f89d 56a0 	ldrb.w	r5, [sp, #1696]	; 0x6a0
 80159ca:	9528      	str	r5, [sp, #160]	; 0xa0
 80159cc:	f89d 56a4 	ldrb.w	r5, [sp, #1700]	; 0x6a4
 80159d0:	f8dd a6e0 	ldr.w	sl, [sp, #1760]	; 0x6e0
 80159d4:	950c      	str	r5, [sp, #48]	; 0x30
 80159d6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80159d8:	4625      	mov	r5, r4
 80159da:	afc3      	add	r7, sp, #780	; 0x30c
 80159dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80159e0:	6033      	str	r3, [r6, #0]
 80159e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80159e4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80159e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80159e8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80159ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80159ec:	f104 0c38 	add.w	ip, r4, #56	; 0x38
 80159f0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80159f2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80159f6:	aed0      	add	r6, sp, #832	; 0x340
 80159f8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80159fa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80159fe:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8015a00:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015a04:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8015a06:	682a      	ldr	r2, [r5, #0]
 8015a08:	f8dc 3000 	ldr.w	r3, [ip]
 8015a0c:	603a      	str	r2, [r7, #0]
 8015a0e:	f104 076c 	add.w	r7, r4, #108	; 0x6c
 8015a12:	6033      	str	r3, [r6, #0]
 8015a14:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8015a16:	addd      	add	r5, sp, #884	; 0x374
 8015a18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015a1a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8015a1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015a1e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8015a20:	f104 06a0 	add.w	r6, r4, #160	; 0xa0
 8015a24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015a26:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8015a28:	683f      	ldr	r7, [r7, #0]
 8015a2a:	602f      	str	r7, [r5, #0]
 8015a2c:	ad98      	add	r5, sp, #608	; 0x260
 8015a2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015a30:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8015a32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015a34:	e896 0003 	ldmia.w	r6, {r0, r1}
 8015a38:	f104 06c8 	add.w	r6, r4, #200	; 0xc8
 8015a3c:	e885 0003 	stmia.w	r5, {r0, r1}
 8015a40:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8015a42:	ada2      	add	r5, sp, #648	; 0x288
 8015a44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015a46:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8015a48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015a4a:	e896 0003 	ldmia.w	r6, {r0, r1}
 8015a4e:	f104 06f0 	add.w	r6, r4, #240	; 0xf0
 8015a52:	e885 0003 	stmia.w	r5, {r0, r1}
 8015a56:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8015a58:	adac      	add	r5, sp, #688	; 0x2b0
 8015a5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015a5c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8015a5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015a60:	e896 0003 	ldmia.w	r6, {r0, r1}
 8015a64:	f504 768c 	add.w	r6, r4, #280	; 0x118
 8015a68:	e885 0003 	stmia.w	r5, {r0, r1}
 8015a6c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8015a6e:	ad5d      	add	r5, sp, #372	; 0x174
 8015a70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015a72:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8015a76:	f8dd 66d4 	ldr.w	r6, [sp, #1748]	; 0x6d4
 8015a7a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8015a7e:	f504 749a 	add.w	r4, r4, #308	; 0x134
 8015a82:	2500      	movs	r5, #0
 8015a84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015a86:	7035      	strb	r5, [r6, #0]
 8015a88:	f8dd 66d8 	ldr.w	r6, [sp, #1752]	; 0x6d8
 8015a8c:	edcd 1a02 	vstr	s3, [sp, #8]
 8015a90:	7035      	strb	r5, [r6, #0]
 8015a92:	f8dd 66dc 	ldr.w	r6, [sp, #1756]	; 0x6dc
 8015a96:	7035      	strb	r5, [r6, #0]
 8015a98:	edde da01 	vldr	s27, [lr, #4]
 8015a9c:	edde 8a00 	vldr	s17, [lr]
 8015aa0:	ed9e 8a02 	vldr	s16, [lr, #8]
 8015aa4:	ee6d 7aad 	vmul.f32	s15, s27, s27
 8015aa8:	ad64      	add	r5, sp, #400	; 0x190
 8015aaa:	eee8 7aa8 	vfma.f32	s15, s17, s17
 8015aae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015ab0:	eee8 7a08 	vfma.f32	s15, s16, s16
 8015ab4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8015ab8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8015abc:	ee17 0a90 	vmov	r0, s15
 8015ac0:	eeb0 ea40 	vmov.f32	s28, s0
 8015ac4:	eef0 ea60 	vmov.f32	s29, s1
 8015ac8:	eeb0 fa41 	vmov.f32	s30, s2
 8015acc:	eef0 fa42 	vmov.f32	s31, s4
 8015ad0:	f7ea fcba 	bl	8000448 <__aeabi_f2d>
 8015ad4:	f00b fb60 	bl	8021198 <sqrt>
 8015ad8:	f7eb f806 	bl	8000ae8 <__aeabi_d2f>
 8015adc:	edd8 aa01 	vldr	s21, [r8, #4]
 8015ae0:	ed98 ba00 	vldr	s22, [r8]
 8015ae4:	ed98 aa02 	vldr	s20, [r8, #8]
 8015ae8:	4b7c      	ldr	r3, [pc, #496]	; (8015cdc <m_kalman_3gyro.isra.6.constprop.36+0x33c>)
 8015aea:	ee6a 7aaa 	vmul.f32	s15, s21, s21
 8015aee:	ee09 0a90 	vmov	s19, r0
 8015af2:	eeeb 7a0b 	vfma.f32	s15, s22, s22
 8015af6:	6018      	str	r0, [r3, #0]
 8015af8:	f50a 7317 	add.w	r3, sl, #604	; 0x25c
 8015afc:	930a      	str	r3, [sp, #40]	; 0x28
 8015afe:	eeea 7a0a 	vfma.f32	s15, s20, s20
 8015b02:	eef7 ca00 	vmov.f32	s25, #112	; 0x3f800000  1.0
 8015b06:	ee17 0a90 	vmov	r0, s15
 8015b0a:	f7ea fc9d 	bl	8000448 <__aeabi_f2d>
 8015b0e:	f00b fb43 	bl	8021198 <sqrt>
 8015b12:	f7ea ffe9 	bl	8000ae8 <__aeabi_d2f>
 8015b16:	ee09 0a10 	vmov	s18, r0
 8015b1a:	ee8c caa9 	vdiv.f32	s24, s25, s19
 8015b1e:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8015b22:	ab5a      	add	r3, sp, #360	; 0x168
 8015b24:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8015b28:	f50a 638c 	add.w	r3, sl, #1120	; 0x460
 8015b2c:	9319      	str	r3, [sp, #100]	; 0x64
 8015b2e:	f50d 63d7 	add.w	r3, sp, #1720	; 0x6b8
 8015b32:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015b36:	eecc 7a89 	vdiv.f32	s15, s25, s18
 8015b3a:	ee6c ba2d 	vmul.f32	s23, s24, s27
 8015b3e:	ee67 aaaa 	vmul.f32	s21, s15, s21
 8015b42:	ee68 9a8c 	vmul.f32	s19, s17, s24
 8015b46:	ee27 ba8b 	vmul.f32	s22, s15, s22
 8015b4a:	ee2c ca08 	vmul.f32	s24, s24, s16
 8015b4e:	ee2a aa27 	vmul.f32	s20, s20, s15
 8015b52:	ee2a daab 	vmul.f32	s26, s21, s23
 8015b56:	edcd 8a57 	vstr	s17, [sp, #348]	; 0x15c
 8015b5a:	ed8d 8a59 	vstr	s16, [sp, #356]	; 0x164
 8015b5e:	edcd da58 	vstr	s27, [sp, #352]	; 0x160
 8015b62:	edcd 9a3e 	vstr	s19, [sp, #248]	; 0xf8
 8015b66:	edcd ba3f 	vstr	s23, [sp, #252]	; 0xfc
 8015b6a:	ed8d ba41 	vstr	s22, [sp, #260]	; 0x104
 8015b6e:	edcd aa42 	vstr	s21, [sp, #264]	; 0x108
 8015b72:	ed8d ca40 	vstr	s24, [sp, #256]	; 0x100
 8015b76:	ed8d aa43 	vstr	s20, [sp, #268]	; 0x10c
 8015b7a:	f7ea ffb5 	bl	8000ae8 <__aeabi_d2f>
 8015b7e:	eeab da29 	vfma.f32	s26, s22, s19
 8015b82:	f89a 48cd 	ldrb.w	r4, [sl, #2253]	; 0x8cd
 8015b86:	ee08 0a90 	vmov	s17, r0
 8015b8a:	ed9f 8a55 	vldr	s16, [pc, #340]	; 8015ce0 <m_kalman_3gyro.isra.6.constprop.36+0x340>
 8015b8e:	eeac da0a 	vfma.f32	s26, s24, s20
 8015b92:	ee28 8a88 	vmul.f32	s16, s17, s16
 8015b96:	2c00      	cmp	r4, #0
 8015b98:	f000 85be 	beq.w	8016718 <m_kalman_3gyro.isra.6.constprop.36+0xd78>
 8015b9c:	ab47      	add	r3, sp, #284	; 0x11c
 8015b9e:	9309      	str	r3, [sp, #36]	; 0x24
 8015ba0:	f50a 7375 	add.w	r3, sl, #980	; 0x3d4
 8015ba4:	9312      	str	r3, [sp, #72]	; 0x48
 8015ba6:	f20a 4304 	addw	r3, sl, #1028	; 0x404
 8015baa:	9313      	str	r3, [sp, #76]	; 0x4c
 8015bac:	f50a 6382 	add.w	r3, sl, #1040	; 0x410
 8015bb0:	9314      	str	r3, [sp, #80]	; 0x50
 8015bb2:	f20a 4314 	addw	r3, sl, #1044	; 0x414
 8015bb6:	9315      	str	r3, [sp, #84]	; 0x54
 8015bb8:	f50a 6383 	add.w	r3, sl, #1048	; 0x418
 8015bbc:	9316      	str	r3, [sp, #88]	; 0x58
 8015bbe:	f20a 431c 	addw	r3, sl, #1052	; 0x41c
 8015bc2:	931b      	str	r3, [sp, #108]	; 0x6c
 8015bc4:	f20a 4324 	addw	r3, sl, #1060	; 0x424
 8015bc8:	931c      	str	r3, [sp, #112]	; 0x70
 8015bca:	f50a 6385 	add.w	r3, sl, #1064	; 0x428
 8015bce:	931d      	str	r3, [sp, #116]	; 0x74
 8015bd0:	f20a 432c 	addw	r3, sl, #1068	; 0x42c
 8015bd4:	931e      	str	r3, [sp, #120]	; 0x78
 8015bd6:	f50a 6386 	add.w	r3, sl, #1072	; 0x430
 8015bda:	9317      	str	r3, [sp, #92]	; 0x5c
 8015bdc:	f20a 4334 	addw	r3, sl, #1076	; 0x434
 8015be0:	9310      	str	r3, [sp, #64]	; 0x40
 8015be2:	f50a 6387 	add.w	r3, sl, #1080	; 0x438
 8015be6:	931f      	str	r3, [sp, #124]	; 0x7c
 8015be8:	f20a 433c 	addw	r3, sl, #1084	; 0x43c
 8015bec:	9311      	str	r3, [sp, #68]	; 0x44
 8015bee:	f50a 6388 	add.w	r3, sl, #1088	; 0x440
 8015bf2:	930d      	str	r3, [sp, #52]	; 0x34
 8015bf4:	f20a 4344 	addw	r3, sl, #1092	; 0x444
 8015bf8:	930e      	str	r3, [sp, #56]	; 0x38
 8015bfa:	f50a 6389 	add.w	r3, sl, #1096	; 0x448
 8015bfe:	9318      	str	r3, [sp, #96]	; 0x60
 8015c00:	f20a 434c 	addw	r3, sl, #1100	; 0x44c
 8015c04:	930f      	str	r3, [sp, #60]	; 0x3c
 8015c06:	f60a 0398 	addw	r3, sl, #2200	; 0x898
 8015c0a:	f50a 6881 	add.w	r8, sl, #1032	; 0x408
 8015c0e:	f20a 490c 	addw	r9, sl, #1036	; 0x40c
 8015c12:	9335      	str	r3, [sp, #212]	; 0xd4
 8015c14:	f20a 4384 	addw	r3, sl, #1156	; 0x484
 8015c18:	eddf 4a32 	vldr	s9, [pc, #200]	; 8015ce4 <m_kalman_3gyro.isra.6.constprop.36+0x344>
 8015c1c:	edd3 6a00 	vldr	s13, [r3]
 8015c20:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015c22:	ed9f 5a31 	vldr	s10, [pc, #196]	; 8015ce8 <m_kalman_3gyro.isra.6.constprop.36+0x348>
 8015c26:	edd3 7a00 	vldr	s15, [r3]
 8015c2a:	eddf 5a30 	vldr	s11, [pc, #192]	; 8015cec <m_kalman_3gyro.isra.6.constprop.36+0x34c>
 8015c2e:	ed9f 6a30 	vldr	s12, [pc, #192]	; 8015cf0 <m_kalman_3gyro.isra.6.constprop.36+0x350>
 8015c32:	9b01      	ldr	r3, [sp, #4]
 8015c34:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8015c38:	f20a 45cc 	addw	r5, sl, #1228	; 0x4cc
 8015c3c:	eee7 6a85 	vfma.f32	s13, s15, s10
 8015c40:	f50a 649e 	add.w	r4, sl, #1264	; 0x4f0
 8015c44:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015c46:	ed95 7a00 	vldr	s14, [r5]
 8015c4a:	edd4 7a00 	vldr	s15, [r4]
 8015c4e:	eee7 6a25 	vfma.f32	s13, s14, s11
 8015c52:	f50d 64d7 	add.w	r4, sp, #1720	; 0x6b8
 8015c56:	f50a 6691 	add.w	r6, sl, #1160	; 0x488
 8015c5a:	ed94 3b00 	vldr	d3, [r4]
 8015c5e:	eee7 6a86 	vfma.f32	s13, s15, s12
 8015c62:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8015c64:	ed8a 3b0e 	vstr	d3, [sl, #56]	; 0x38
 8015c68:	ed84 8a00 	vstr	s16, [r4]
 8015c6c:	edca 6af8 	vstr	s13, [sl, #992]	; 0x3e0
 8015c70:	edd6 7a00 	vldr	s15, [r6]
 8015c74:	f20a 4764 	addw	r7, sl, #1124	; 0x464
 8015c78:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8015c7c:	edd7 3a00 	vldr	s7, [r7]
 8015c80:	973a      	str	r7, [sp, #232]	; 0xe8
 8015c82:	eee3 7a85 	vfma.f32	s15, s7, s10
 8015c86:	f50a 659a 	add.w	r5, sl, #1232	; 0x4d0
 8015c8a:	f20a 4cf4 	addw	ip, sl, #1268	; 0x4f4
 8015c8e:	ed95 4a00 	vldr	s8, [r5]
 8015c92:	ed9c 7a00 	vldr	s14, [ip]
 8015c96:	eee4 7a25 	vfma.f32	s15, s8, s11
 8015c9a:	f20a 458c 	addw	r5, sl, #1164	; 0x48c
 8015c9e:	f50a 678d 	add.w	r7, sl, #1128	; 0x468
 8015ca2:	f20a 44d4 	addw	r4, sl, #1236	; 0x4d4
 8015ca6:	eee7 7a06 	vfma.f32	s15, s14, s12
 8015caa:	9401      	str	r4, [sp, #4]
 8015cac:	f20a 446c 	addw	r4, sl, #1132	; 0x46c
 8015cb0:	942b      	str	r4, [sp, #172]	; 0xac
 8015cb2:	edca 7af9 	vstr	s15, [sl, #996]	; 0x3e4
 8015cb6:	ed95 7a00 	vldr	s14, [r5]
 8015cba:	edd7 3a00 	vldr	s7, [r7]
 8015cbe:	973b      	str	r7, [sp, #236]	; 0xec
 8015cc0:	ee27 7a24 	vmul.f32	s14, s14, s9
 8015cc4:	f50a 648e 	add.w	r4, sl, #1136	; 0x470
 8015cc8:	eea3 7a85 	vfma.f32	s14, s7, s10
 8015ccc:	942c      	str	r4, [sp, #176]	; 0xb0
 8015cce:	9c01      	ldr	r4, [sp, #4]
 8015cd0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8015cd2:	ed94 4a00 	vldr	s8, [r4]
 8015cd6:	e00d      	b.n	8015cf4 <m_kalman_3gyro.isra.6.constprop.36+0x354>
 8015cd8:	08022d6c 	.word	0x08022d6c
 8015cdc:	20005364 	.word	0x20005364
 8015ce0:	3ca3d70a 	.word	0x3ca3d70a
 8015ce4:	bdcccccd 	.word	0xbdcccccd
 8015ce8:	be4ccccd 	.word	0xbe4ccccd
 8015cec:	3dcccccd 	.word	0x3dcccccd
 8015cf0:	3e4ccccd 	.word	0x3e4ccccd
 8015cf4:	eea4 7a25 	vfma.f32	s14, s8, s11
 8015cf8:	f50a 669f 	add.w	r6, sl, #1272	; 0x4f8
 8015cfc:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8015d00:	ed96 4a00 	vldr	s8, [r6]
 8015d04:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 8015d06:	eea4 7a06 	vfma.f32	s14, s8, s12
 8015d0a:	f50a 6c92 	add.w	ip, sl, #1168	; 0x490
 8015d0e:	f50a 6e9b 	add.w	lr, sl, #1240	; 0x4d8
 8015d12:	f20a 4b94 	addw	fp, sl, #1172	; 0x494
 8015d16:	ed8a 7afa 	vstr	s14, [sl, #1000]	; 0x3e8
 8015d1a:	ed9c 4a00 	vldr	s8, [ip]
 8015d1e:	edd5 3a00 	vldr	s7, [r5]
 8015d22:	ee24 4a24 	vmul.f32	s8, s8, s9
 8015d26:	f50a 658f 	add.w	r5, sl, #1144	; 0x478
 8015d2a:	eea3 4a85 	vfma.f32	s8, s7, s10
 8015d2e:	9520      	str	r5, [sp, #128]	; 0x80
 8015d30:	f20a 45fc 	addw	r5, sl, #1276	; 0x4fc
 8015d34:	edde 3a00 	vldr	s7, [lr]
 8015d38:	eea3 4aa5 	vfma.f32	s8, s7, s11
 8015d3c:	f20a 44dc 	addw	r4, sl, #1244	; 0x4dc
 8015d40:	f50a 62a0 	add.w	r2, sl, #1280	; 0x500
 8015d44:	edd5 3a00 	vldr	s7, [r5]
 8015d48:	9d2c      	ldr	r5, [sp, #176]	; 0xb0
 8015d4a:	eea3 4a86 	vfma.f32	s8, s7, s12
 8015d4e:	f50a 6393 	add.w	r3, sl, #1176	; 0x498
 8015d52:	f20a 4674 	addw	r6, sl, #1140	; 0x474
 8015d56:	f20a 4ce4 	addw	ip, sl, #1252	; 0x4e4
 8015d5a:	ed8a 4afb 	vstr	s8, [sl, #1004]	; 0x3ec
 8015d5e:	ed9b 4a00 	vldr	s8, [fp]
 8015d62:	edd5 3a00 	vldr	s7, [r5]
 8015d66:	f8cd c0bc 	str.w	ip, [sp, #188]	; 0xbc
 8015d6a:	ee24 4a24 	vmul.f32	s8, s8, s9
 8015d6e:	f50a 6ca1 	add.w	ip, sl, #1288	; 0x508
 8015d72:	eea3 4a85 	vfma.f32	s8, s7, s10
 8015d76:	f8cd c0c8 	str.w	ip, [sp, #200]	; 0xc8
 8015d7a:	f50a 6c94 	add.w	ip, sl, #1184	; 0x4a0
 8015d7e:	edd4 3a00 	vldr	s7, [r4]
 8015d82:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
 8015d86:	eea3 4aa5 	vfma.f32	s8, s7, s11
 8015d8a:	f20a 4c7c 	addw	ip, sl, #1148	; 0x47c
 8015d8e:	f50a 619c 	add.w	r1, sl, #1248	; 0x4e0
 8015d92:	edd2 3a00 	vldr	s7, [r2]
 8015d96:	f8cd c084 	str.w	ip, [sp, #132]	; 0x84
 8015d9a:	eea3 4a86 	vfma.f32	s8, s7, s12
 8015d9e:	f50a 6c9d 	add.w	ip, sl, #1256	; 0x4e8
 8015da2:	f8cd c0c0 	str.w	ip, [sp, #192]	; 0xc0
 8015da6:	ee67 3aa7 	vmul.f32	s7, s15, s15
 8015daa:	ed8a 4afc 	vstr	s8, [sl, #1008]	; 0x3f0
 8015dae:	edd3 7a00 	vldr	s15, [r3]
 8015db2:	ed96 4a00 	vldr	s8, [r6]
 8015db6:	963c      	str	r6, [sp, #240]	; 0xf0
 8015db8:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8015dbc:	eee6 3aa6 	vfma.f32	s7, s13, s13
 8015dc0:	f20a 5c0c 	addw	ip, sl, #1292	; 0x50c
 8015dc4:	f8cd c0cc 	str.w	ip, [sp, #204]	; 0xcc
 8015dc8:	eee4 7a05 	vfma.f32	s15, s8, s10
 8015dcc:	f20a 4ca4 	addw	ip, sl, #1188	; 0x4a4
 8015dd0:	f8cd c0b8 	str.w	ip, [sp, #184]	; 0xb8
 8015dd4:	eef0 6a63 	vmov.f32	s13, s7
 8015dd8:	edd1 3a00 	vldr	s7, [r1]
 8015ddc:	f50a 6c90 	add.w	ip, sl, #1152	; 0x480
 8015de0:	eee3 7aa5 	vfma.f32	s15, s7, s11
 8015de4:	f20a 479c 	addw	r7, sl, #1180	; 0x49c
 8015de8:	f20a 5004 	addw	r0, sl, #1284	; 0x504
 8015dec:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
 8015df0:	f50a 64a2 	add.w	r4, sl, #1296	; 0x510
 8015df4:	f20a 4cec 	addw	ip, sl, #1260	; 0x4ec
 8015df8:	f50a 760e 	add.w	r6, sl, #568	; 0x238
 8015dfc:	f8cd c0c4 	str.w	ip, [sp, #196]	; 0xc4
 8015e00:	973d      	str	r7, [sp, #244]	; 0xf4
 8015e02:	9434      	str	r4, [sp, #208]	; 0xd0
 8015e04:	962a      	str	r6, [sp, #168]	; 0xa8
 8015e06:	ed90 4a00 	vldr	s8, [r0]
 8015e0a:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8015e0c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8015e0e:	eee4 7a06 	vfma.f32	s15, s8, s12
 8015e12:	f50a 6480 	add.w	r4, sl, #1024	; 0x400
 8015e16:	f50a 7105 	add.w	r1, sl, #532	; 0x214
 8015e1a:	eee7 6a07 	vfma.f32	s13, s14, s14
 8015e1e:	9129      	str	r1, [sp, #164]	; 0xa4
 8015e20:	edca 7afd 	vstr	s15, [sl, #1012]	; 0x3f4
 8015e24:	edd7 7a00 	vldr	s15, [r7]
 8015e28:	ed95 4a00 	vldr	s8, [r5]
 8015e2c:	9d2f      	ldr	r5, [sp, #188]	; 0xbc
 8015e2e:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8015e32:	ee16 0a90 	vmov	r0, s13
 8015e36:	eee4 7a05 	vfma.f32	s15, s8, s10
 8015e3a:	edd5 6a00 	vldr	s13, [r5]
 8015e3e:	9d32      	ldr	r5, [sp, #200]	; 0xc8
 8015e40:	eee6 7aa5 	vfma.f32	s15, s13, s11
 8015e44:	ed95 7a00 	vldr	s14, [r5]
 8015e48:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 8015e4a:	eee7 7a06 	vfma.f32	s15, s14, s12
 8015e4e:	edca 7afe 	vstr	s15, [sl, #1016]	; 0x3f8
 8015e52:	edd5 7a00 	vldr	s15, [r5]
 8015e56:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8015e58:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8015e5c:	ed95 4a00 	vldr	s8, [r5]
 8015e60:	9d30      	ldr	r5, [sp, #192]	; 0xc0
 8015e62:	eee4 7a05 	vfma.f32	s15, s8, s10
 8015e66:	edd5 6a00 	vldr	s13, [r5]
 8015e6a:	9d33      	ldr	r5, [sp, #204]	; 0xcc
 8015e6c:	eee6 7aa5 	vfma.f32	s15, s13, s11
 8015e70:	ed95 7a00 	vldr	s14, [r5]
 8015e74:	9d2e      	ldr	r5, [sp, #184]	; 0xb8
 8015e76:	eee7 7a06 	vfma.f32	s15, s14, s12
 8015e7a:	edca 7aff 	vstr	s15, [sl, #1020]	; 0x3fc
 8015e7e:	ed95 8a00 	vldr	s16, [r5]
 8015e82:	9d22      	ldr	r5, [sp, #136]	; 0x88
 8015e84:	ed9c 7a00 	vldr	s14, [ip]
 8015e88:	edd5 6a00 	vldr	s13, [r5]
 8015e8c:	edd3 7a00 	vldr	s15, [r3]
 8015e90:	ee28 8a24 	vmul.f32	s16, s16, s9
 8015e94:	eea6 8a85 	vfma.f32	s16, s13, s10
 8015e98:	eea7 8a25 	vfma.f32	s16, s14, s11
 8015e9c:	eea7 8a86 	vfma.f32	s16, s15, s12
 8015ea0:	ed84 8a00 	vstr	s16, [r4]
 8015ea4:	f7ea fad0 	bl	8000448 <__aeabi_f2d>
 8015ea8:	f00b f976 	bl	8021198 <sqrt>
 8015eac:	f7ea fe1c 	bl	8000ae8 <__aeabi_d2f>
 8015eb0:	edda 7afc 	vldr	s15, [sl, #1008]	; 0x3f0
 8015eb4:	edda 6afb 	vldr	s13, [sl, #1004]	; 0x3ec
 8015eb8:	ed9a 7afd 	vldr	s14, [sl, #1012]	; 0x3f4
 8015ebc:	49a1      	ldr	r1, [pc, #644]	; (8016144 <m_kalman_3gyro.isra.6.constprop.36+0x7a4>)
 8015ebe:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8015ec2:	ee0d 0a90 	vmov	s27, r0
 8015ec6:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8015eca:	6008      	str	r0, [r1, #0]
 8015ecc:	eee7 7a07 	vfma.f32	s15, s14, s14
 8015ed0:	ee17 0a90 	vmov	r0, s15
 8015ed4:	f7ea fab8 	bl	8000448 <__aeabi_f2d>
 8015ed8:	f00b f95e 	bl	8021198 <sqrt>
 8015edc:	f7ea fe04 	bl	8000ae8 <__aeabi_d2f>
 8015ee0:	edda 7aff 	vldr	s15, [sl, #1020]	; 0x3fc
 8015ee4:	ed9a 7afe 	vldr	s14, [sl, #1016]	; 0x3f8
 8015ee8:	4b96      	ldr	r3, [pc, #600]	; (8016144 <m_kalman_3gyro.isra.6.constprop.36+0x7a4>)
 8015eea:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8015eee:	f843 0f04 	str.w	r0, [r3, #4]!
 8015ef2:	eee7 7a07 	vfma.f32	s15, s14, s14
 8015ef6:	9339      	str	r3, [sp, #228]	; 0xe4
 8015ef8:	ee0c 0a90 	vmov	s25, r0
 8015efc:	eee8 7a08 	vfma.f32	s15, s16, s16
 8015f00:	ee17 0a90 	vmov	r0, s15
 8015f04:	f7ea faa0 	bl	8000448 <__aeabi_f2d>
 8015f08:	f00b f946 	bl	8021198 <sqrt>
 8015f0c:	f7ea fdec 	bl	8000ae8 <__aeabi_d2f>
 8015f10:	ee6b 7a4c 	vnmul.f32	s15, s22, s24
 8015f14:	ee2a 7a6b 	vnmul.f32	s14, s20, s23
 8015f18:	eee9 7a8a 	vfma.f32	s15, s19, s20
 8015f1c:	4b89      	ldr	r3, [pc, #548]	; (8016144 <m_kalman_3gyro.isra.6.constprop.36+0x7a4>)
 8015f1e:	eeac 7a2a 	vfma.f32	s14, s24, s21
 8015f22:	f843 0f08 	str.w	r0, [r3, #8]!
 8015f26:	ee6a 9ae9 	vnmul.f32	s19, s21, s19
 8015f2a:	eeb0 ca47 	vmov.f32	s24, s14
 8015f2e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8015f32:	eeeb 9a8b 	vfma.f32	s19, s23, s22
 8015f36:	931a      	str	r3, [sp, #104]	; 0x68
 8015f38:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015f3a:	edcd 7a01 	vstr	s15, [sp, #4]
 8015f3e:	eeac 7a0c 	vfma.f32	s14, s24, s24
 8015f42:	ee08 0a10 	vmov	s16, r0
 8015f46:	eea9 7aa9 	vfma.f32	s14, s19, s19
 8015f4a:	edc3 da00 	vstr	s27, [r3]
 8015f4e:	ee17 0a10 	vmov	r0, s14
 8015f52:	edc8 ca00 	vstr	s25, [r8]
 8015f56:	ed89 8a00 	vstr	s16, [r9]
 8015f5a:	ed8a ba90 	vstr	s22, [sl, #576]	; 0x240
 8015f5e:	edca aa93 	vstr	s21, [sl, #588]	; 0x24c
 8015f62:	ed8a aa96 	vstr	s20, [sl, #600]	; 0x258
 8015f66:	f7ea fa6f 	bl	8000448 <__aeabi_f2d>
 8015f6a:	f00b f915 	bl	8021198 <sqrt>
 8015f6e:	f7ea fdbb 	bl	8000ae8 <__aeabi_d2f>
 8015f72:	ee07 0a90 	vmov	s15, r0
 8015f76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015f7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015f7e:	ab7d      	add	r3, sp, #500	; 0x1f4
 8015f80:	461a      	mov	r2, r3
 8015f82:	4631      	mov	r1, r6
 8015f84:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8015f86:	eddd 7a01 	vldr	s15, [sp, #4]
 8015f8a:	ee69 9a87 	vmul.f32	s19, s19, s14
 8015f8e:	ee67 ba87 	vmul.f32	s23, s15, s14
 8015f92:	ee2c ca07 	vmul.f32	s24, s24, s14
 8015f96:	ee6a 6ae9 	vnmul.f32	s13, s21, s19
 8015f9a:	ee2a 7a4c 	vnmul.f32	s14, s20, s24
 8015f9e:	ee6b 7a6b 	vnmul.f32	s15, s22, s23
 8015fa2:	eeeb 6a8a 	vfma.f32	s13, s23, s20
 8015fa6:	eea9 7a8b 	vfma.f32	s14, s19, s22
 8015faa:	eeec 7a2a 	vfma.f32	s15, s24, s21
 8015fae:	edca 6a8e 	vstr	s13, [sl, #568]	; 0x238
 8015fb2:	ed8a 7a91 	vstr	s14, [sl, #580]	; 0x244
 8015fb6:	edca 7a94 	vstr	s15, [sl, #592]	; 0x250
 8015fba:	ed8a ca8f 	vstr	s24, [sl, #572]	; 0x23c
 8015fbe:	edca ba92 	vstr	s23, [sl, #584]	; 0x248
 8015fc2:	edca 9a95 	vstr	s19, [sl, #596]	; 0x254
 8015fc6:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8015fca:	ed8d 7a24 	vstr	s14, [sp, #144]	; 0x90
 8015fce:	edcd 7a25 	vstr	s15, [sp, #148]	; 0x94
 8015fd2:	f7fb f803 	bl	8010fdc <m_mldivide>
 8015fd6:	a87d      	add	r0, sp, #500	; 0x1f4
 8015fd8:	a94b      	add	r1, sp, #300	; 0x12c
 8015fda:	f7fb fb7d 	bl	80116d8 <m_dcm2q_eml>
 8015fde:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8015fe0:	f5aa 70ae 	sub.w	r0, sl, #348	; 0x15c
 8015fe4:	4653      	mov	r3, sl
 8015fe6:	f8d3 23ac 	ldr.w	r2, [r3, #940]	; 0x3ac
 8015fea:	f8d3 13b0 	ldr.w	r1, [r3, #944]	; 0x3b0
 8015fee:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
 8015ff2:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 8015ff6:	f8c3 13bc 	str.w	r1, [r3, #956]	; 0x3bc
 8015ffa:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
 8015ffe:	3b0c      	subs	r3, #12
 8016000:	4298      	cmp	r0, r3
 8016002:	d1f0      	bne.n	8015fe6 <m_kalman_3gyro.isra.6.constprop.36+0x646>
 8016004:	ed9d 7a02 	vldr	s14, [sp, #8]
 8016008:	eddd 6a4b 	vldr	s13, [sp, #300]	; 0x12c
 801600c:	eddf 5a4e 	vldr	s11, [pc, #312]	; 8016148 <m_kalman_3gyro.isra.6.constprop.36+0x7a8>
 8016010:	9738      	str	r7, [sp, #224]	; 0xe0
 8016012:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8016016:	ee87 6a87 	vdiv.f32	s12, s15, s14
 801601a:	ac44      	add	r4, sp, #272	; 0x110
 801601c:	f507 71ae 	add.w	r1, r7, #348	; 0x15c
 8016020:	f107 050c 	add.w	r5, r7, #12
 8016024:	4638      	mov	r0, r7
 8016026:	ed9d 7a4c 	vldr	s14, [sp, #304]	; 0x130
 801602a:	eddd 7a4d 	vldr	s15, [sp, #308]	; 0x134
 801602e:	ee76 6aa6 	vadd.f32	s13, s13, s13
 8016032:	ee37 7a07 	vadd.f32	s14, s14, s14
 8016036:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801603a:	ee66 6a86 	vmul.f32	s13, s13, s12
 801603e:	ee27 7a06 	vmul.f32	s14, s14, s12
 8016042:	ee67 7a86 	vmul.f32	s15, s15, s12
 8016046:	ed9f 6a41 	vldr	s12, [pc, #260]	; 801614c <m_kalman_3gyro.isra.6.constprop.36+0x7ac>
 801604a:	edca 6a97 	vstr	s13, [sl, #604]	; 0x25c
 801604e:	ed8a 7a98 	vstr	s14, [sl, #608]	; 0x260
 8016052:	edca 7a99 	vstr	s15, [sl, #612]	; 0x264
 8016056:	edd0 6a00 	vldr	s13, [r0]
 801605a:	4603      	mov	r3, r0
 801605c:	eef0 7a66 	vmov.f32	s15, s13
 8016060:	330c      	adds	r3, #12
 8016062:	ed93 7a00 	vldr	s14, [r3]
 8016066:	428b      	cmp	r3, r1
 8016068:	ee77 7a87 	vadd.f32	s15, s15, s14
 801606c:	d1f8      	bne.n	8016060 <m_kalman_3gyro.isra.6.constprop.36+0x6c0>
 801606e:	ee27 7aa5 	vmul.f32	s14, s15, s11
 8016072:	4602      	mov	r2, r0
 8016074:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8016078:	ee66 6aa6 	vmul.f32	s13, s13, s13
 801607c:	320c      	adds	r2, #12
 801607e:	edd2 7a00 	vldr	s15, [r2]
 8016082:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016086:	4293      	cmp	r3, r2
 8016088:	eee7 6aa7 	vfma.f32	s13, s15, s15
 801608c:	d1f6      	bne.n	801607c <m_kalman_3gyro.isra.6.constprop.36+0x6dc>
 801608e:	ee66 6a86 	vmul.f32	s13, s13, s12
 8016092:	3004      	adds	r0, #4
 8016094:	42a8      	cmp	r0, r5
 8016096:	ece4 6a01 	vstmia	r4!, {s13}
 801609a:	f101 0104 	add.w	r1, r1, #4
 801609e:	d1da      	bne.n	8016056 <m_kalman_3gyro.isra.6.constprop.36+0x6b6>
 80160a0:	9844      	ldr	r0, [sp, #272]	; 0x110
 80160a2:	970a      	str	r7, [sp, #40]	; 0x28
 80160a4:	f7ea f9d0 	bl	8000448 <__aeabi_f2d>
 80160a8:	f00b f876 	bl	8021198 <sqrt>
 80160ac:	f7ea fd1c 	bl	8000ae8 <__aeabi_d2f>
 80160b0:	ee06 0a90 	vmov	s13, r0
 80160b4:	9845      	ldr	r0, [sp, #276]	; 0x114
 80160b6:	edcd 6a44 	vstr	s13, [sp, #272]	; 0x110
 80160ba:	edcd 6a02 	vstr	s13, [sp, #8]
 80160be:	f7ea f9c3 	bl	8000448 <__aeabi_f2d>
 80160c2:	f00b f869 	bl	8021198 <sqrt>
 80160c6:	f7ea fd0f 	bl	8000ae8 <__aeabi_d2f>
 80160ca:	ee07 0a90 	vmov	s15, r0
 80160ce:	9846      	ldr	r0, [sp, #280]	; 0x118
 80160d0:	edcd 7a45 	vstr	s15, [sp, #276]	; 0x114
 80160d4:	edcd 7a01 	vstr	s15, [sp, #4]
 80160d8:	f7ea f9b6 	bl	8000448 <__aeabi_f2d>
 80160dc:	f00b f85c 	bl	8021198 <sqrt>
 80160e0:	f7ea fd02 	bl	8000ae8 <__aeabi_d2f>
 80160e4:	eddd 7a01 	vldr	s15, [sp, #4]
 80160e8:	eddd 6a02 	vldr	s13, [sp, #8]
 80160ec:	9046      	str	r0, [sp, #280]	; 0x118
 80160ee:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80160f2:	ee07 0a10 	vmov	s14, r0
 80160f6:	eee6 7aa6 	vfma.f32	s15, s13, s13
 80160fa:	f50a 7372 	add.w	r3, sl, #968	; 0x3c8
 80160fe:	9326      	str	r3, [sp, #152]	; 0x98
 8016100:	f20d 48ec 	addw	r8, sp, #1260	; 0x4ec
 8016104:	eee7 7a07 	vfma.f32	s15, s14, s14
 8016108:	f50d 7b6a 	add.w	fp, sp, #936	; 0x3a8
 801610c:	ee17 0a90 	vmov	r0, s15
 8016110:	f7ea f99a 	bl	8000448 <__aeabi_f2d>
 8016114:	f00b f840 	bl	8021198 <sqrt>
 8016118:	f7ea fce6 	bl	8000ae8 <__aeabi_d2f>
 801611c:	4b0c      	ldr	r3, [pc, #48]	; (8016150 <m_kalman_3gyro.isra.6.constprop.36+0x7b0>)
 801611e:	f8ca 03c4 	str.w	r0, [sl, #964]	; 0x3c4
 8016122:	ecf3 7a01 	vldmia	r3!, {s15}
 8016126:	f8cd a6e0 	str.w	sl, [sp, #1760]	; 0x6e0
 801612a:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 801612e:	edd3 7a00 	vldr	s15, [r3]
 8016132:	edcd 7a37 	vstr	s15, [sp, #220]	; 0xdc
 8016136:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016138:	4640      	mov	r0, r8
 801613a:	f20d 31a7 	addw	r1, sp, #935	; 0x3a7
 801613e:	2301      	movs	r3, #1
 8016140:	e00c      	b.n	801615c <m_kalman_3gyro.isra.6.constprop.36+0x7bc>
 8016142:	bf00      	nop
 8016144:	20005368 	.word	0x20005368
 8016148:	3d088889 	.word	0x3d088889
 801614c:	3d0d3dcb 	.word	0x3d0d3dcb
 8016150:	20004f50 	.word	0x20004f50
 8016154:	3f333333 	.word	0x3f333333
 8016158:	3f4ccccd 	.word	0x3f4ccccd
 801615c:	f801 3f01 	strb.w	r3, [r1, #1]!
 8016160:	3301      	adds	r3, #1
 8016162:	f852 4b0c 	ldr.w	r4, [r2], #12
 8016166:	f840 4b04 	str.w	r4, [r0], #4
 801616a:	2b1f      	cmp	r3, #31
 801616c:	d1f6      	bne.n	801615c <m_kalman_3gyro.isra.6.constprop.36+0x7bc>
 801616e:	221e      	movs	r2, #30
 8016170:	2101      	movs	r1, #1
 8016172:	a88f      	add	r0, sp, #572	; 0x23c
 8016174:	f00c fb90 	bl	8022898 <memset>
 8016178:	ed98 7a00 	vldr	s14, [r8]
 801617c:	edd8 7a01 	vldr	s15, [r8, #4]
 8016180:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016184:	ed98 7a02 	vldr	s14, [r8, #8]
 8016188:	edd8 7a03 	vldr	s15, [r8, #12]
 801618c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016190:	bf88      	it	hi
 8016192:	f44f 7381 	movhi.w	r3, #258	; 0x102
 8016196:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801619a:	ed98 7a04 	vldr	s14, [r8, #16]
 801619e:	edd8 7a05 	vldr	s15, [r8, #20]
 80161a2:	bf88      	it	hi
 80161a4:	f8ab 3000 	strhhi.w	r3, [fp]
 80161a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80161ac:	bf88      	it	hi
 80161ae:	f44f 7341 	movhi.w	r3, #772	; 0x304
 80161b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80161b6:	ed98 7a06 	vldr	s14, [r8, #24]
 80161ba:	edd8 7a07 	vldr	s15, [r8, #28]
 80161be:	bf88      	it	hi
 80161c0:	f8ab 3002 	strhhi.w	r3, [fp, #2]
 80161c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80161c8:	bf88      	it	hi
 80161ca:	f240 5306 	movwhi	r3, #1286	; 0x506
 80161ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80161d2:	ed98 7a08 	vldr	s14, [r8, #32]
 80161d6:	edd8 7a09 	vldr	s15, [r8, #36]	; 0x24
 80161da:	bf88      	it	hi
 80161dc:	f8ab 3004 	strhhi.w	r3, [fp, #4]
 80161e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80161e4:	bf88      	it	hi
 80161e6:	f44f 63e1 	movhi.w	r3, #1800	; 0x708
 80161ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80161ee:	ed98 7a0a 	vldr	s14, [r8, #40]	; 0x28
 80161f2:	edd8 7a0b 	vldr	s15, [r8, #44]	; 0x2c
 80161f6:	bf88      	it	hi
 80161f8:	f8ab 3006 	strhhi.w	r3, [fp, #6]
 80161fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016200:	bf88      	it	hi
 8016202:	f640 130a 	movwhi	r3, #2314	; 0x90a
 8016206:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801620a:	ed98 7a0c 	vldr	s14, [r8, #48]	; 0x30
 801620e:	edd8 7a0d 	vldr	s15, [r8, #52]	; 0x34
 8016212:	bf88      	it	hi
 8016214:	f8ab 3008 	strhhi.w	r3, [fp, #8]
 8016218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801621c:	bf88      	it	hi
 801621e:	f640 330c 	movwhi	r3, #2828	; 0xb0c
 8016222:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016226:	ed98 7a0e 	vldr	s14, [r8, #56]	; 0x38
 801622a:	edd8 7a0f 	vldr	s15, [r8, #60]	; 0x3c
 801622e:	bf88      	it	hi
 8016230:	f8ab 300a 	strhhi.w	r3, [fp, #10]
 8016234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016238:	bf88      	it	hi
 801623a:	f640 530e 	movwhi	r3, #3342	; 0xd0e
 801623e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016242:	ed98 7a10 	vldr	s14, [r8, #64]	; 0x40
 8016246:	edd8 7a11 	vldr	s15, [r8, #68]	; 0x44
 801624a:	bf88      	it	hi
 801624c:	f8ab 300c 	strhhi.w	r3, [fp, #12]
 8016250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016254:	bf88      	it	hi
 8016256:	f44f 6371 	movhi.w	r3, #3856	; 0xf10
 801625a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801625e:	ed98 7a12 	vldr	s14, [r8, #72]	; 0x48
 8016262:	edd8 7a13 	vldr	s15, [r8, #76]	; 0x4c
 8016266:	bf88      	it	hi
 8016268:	f8ab 300e 	strhhi.w	r3, [fp, #14]
 801626c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016270:	bf88      	it	hi
 8016272:	f241 1312 	movwhi	r3, #4370	; 0x1112
 8016276:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801627a:	ed98 7a14 	vldr	s14, [r8, #80]	; 0x50
 801627e:	edd8 7a15 	vldr	s15, [r8, #84]	; 0x54
 8016282:	bf88      	it	hi
 8016284:	f8ab 3010 	strhhi.w	r3, [fp, #16]
 8016288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801628c:	bf88      	it	hi
 801628e:	f241 3314 	movwhi	r3, #4884	; 0x1314
 8016292:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016296:	bf88      	it	hi
 8016298:	f8ab 3012 	strhhi.w	r3, [fp, #18]
 801629c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80162a0:	bf84      	itt	hi
 80162a2:	f241 5316 	movwhi	r3, #5398	; 0x1516
 80162a6:	f8ab 3014 	strhhi.w	r3, [fp, #20]
 80162aa:	ed98 7a16 	vldr	s14, [r8, #88]	; 0x58
 80162ae:	edd8 7a17 	vldr	s15, [r8, #92]	; 0x5c
 80162b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80162b6:	ed98 7a18 	vldr	s14, [r8, #96]	; 0x60
 80162ba:	edd8 7a19 	vldr	s15, [r8, #100]	; 0x64
 80162be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80162c2:	bf88      	it	hi
 80162c4:	f241 7318 	movwhi	r3, #5912	; 0x1718
 80162c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80162cc:	ed98 7a1a 	vldr	s14, [r8, #104]	; 0x68
 80162d0:	edd8 7a1b 	vldr	s15, [r8, #108]	; 0x6c
 80162d4:	bf88      	it	hi
 80162d6:	f8ab 3016 	strhhi.w	r3, [fp, #22]
 80162da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80162de:	bf88      	it	hi
 80162e0:	f641 131a 	movwhi	r3, #6426	; 0x191a
 80162e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80162e8:	ed98 7a1c 	vldr	s14, [r8, #112]	; 0x70
 80162ec:	edd8 7a1d 	vldr	s15, [r8, #116]	; 0x74
 80162f0:	bf88      	it	hi
 80162f2:	f8ab 3018 	strhhi.w	r3, [fp, #24]
 80162f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80162fa:	bf88      	it	hi
 80162fc:	f641 331c 	movwhi	r3, #6940	; 0x1b1c
 8016300:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016304:	bf88      	it	hi
 8016306:	f8ab 301a 	strhhi.w	r3, [fp, #26]
 801630a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801630e:	bf84      	itt	hi
 8016310:	f641 531e 	movwhi	r3, #7454	; 0x1d1e
 8016314:	f8ab 301c 	strhhi.w	r3, [fp, #28]
 8016318:	2304      	movs	r3, #4
 801631a:	9306      	str	r3, [sp, #24]
 801631c:	2302      	movs	r3, #2
 801631e:	9302      	str	r3, [sp, #8]
 8016320:	9b02      	ldr	r3, [sp, #8]
 8016322:	f103 0901 	add.w	r9, r3, #1
 8016326:	f1b9 0f1f 	cmp.w	r9, #31
 801632a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801632e:	9304      	str	r3, [sp, #16]
 8016330:	d055      	beq.n	80163de <m_kalman_3gyro.isra.6.constprop.36+0xa3e>
 8016332:	2301      	movs	r3, #1
 8016334:	9301      	str	r3, [sp, #4]
 8016336:	9b01      	ldr	r3, [sp, #4]
 8016338:	9a04      	ldr	r2, [sp, #16]
 801633a:	18d7      	adds	r7, r2, r3
 801633c:	2f1f      	cmp	r7, #31
 801633e:	bfa8      	it	ge
 8016340:	271f      	movge	r7, #31
 8016342:	eba7 0a03 	sub.w	sl, r7, r3
 8016346:	f1ba 0f00 	cmp.w	sl, #0
 801634a:	dd40      	ble.n	80163ce <m_kalman_3gyro.isra.6.constprop.36+0xa2e>
 801634c:	461d      	mov	r5, r3
 801634e:	464e      	mov	r6, r9
 8016350:	2401      	movs	r4, #1
 8016352:	e008      	b.n	8016366 <m_kalman_3gyro.isra.6.constprop.36+0x9c6>
 8016354:	3601      	adds	r6, #1
 8016356:	ab8f      	add	r3, sp, #572	; 0x23c
 8016358:	42be      	cmp	r6, r7
 801635a:	541a      	strb	r2, [r3, r0]
 801635c:	f000 81a6 	beq.w	80166ac <m_kalman_3gyro.isra.6.constprop.36+0xd0c>
 8016360:	3401      	adds	r4, #1
 8016362:	45a2      	cmp	sl, r4
 8016364:	db2c      	blt.n	80163c0 <m_kalman_3gyro.isra.6.constprop.36+0xa20>
 8016366:	f105 3cff 	add.w	ip, r5, #4294967295
 801636a:	1e71      	subs	r1, r6, #1
 801636c:	f91b 300c 	ldrsb.w	r3, [fp, ip]
 8016370:	f91b 2001 	ldrsb.w	r2, [fp, r1]
 8016374:	eb08 0e83 	add.w	lr, r8, r3, lsl #2
 8016378:	eb08 0082 	add.w	r0, r8, r2, lsl #2
 801637c:	ed50 7a01 	vldr	s15, [r0, #-4]
 8016380:	ed1e 7a01 	vldr	s14, [lr, #-4]
 8016384:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801638c:	f104 30ff 	add.w	r0, r4, #4294967295
 8016390:	d8e0      	bhi.n	8016354 <m_kalman_3gyro.isra.6.constprop.36+0x9b4>
 8016392:	3501      	adds	r5, #1
 8016394:	aa8f      	add	r2, sp, #572	; 0x23c
 8016396:	45a9      	cmp	r9, r5
 8016398:	5413      	strb	r3, [r2, r0]
 801639a:	d1e1      	bne.n	8016360 <m_kalman_3gyro.isra.6.constprop.36+0x9c0>
 801639c:	ab8f      	add	r3, sp, #572	; 0x23c
 801639e:	42be      	cmp	r6, r7
 80163a0:	eba7 0206 	sub.w	r2, r7, r6
 80163a4:	eb03 0004 	add.w	r0, r3, r4
 80163a8:	4459      	add	r1, fp
 80163aa:	f280 818e 	bge.w	80166ca <m_kalman_3gyro.isra.6.constprop.36+0xd2a>
 80163ae:	443c      	add	r4, r7
 80163b0:	1ba4      	subs	r4, r4, r6
 80163b2:	3401      	adds	r4, #1
 80163b4:	f00c fa4c 	bl	8022850 <memcpy>
 80163b8:	45a2      	cmp	sl, r4
 80163ba:	464d      	mov	r5, r9
 80163bc:	463e      	mov	r6, r7
 80163be:	dad2      	bge.n	8016366 <m_kalman_3gyro.isra.6.constprop.36+0x9c6>
 80163c0:	9b01      	ldr	r3, [sp, #4]
 80163c2:	1e58      	subs	r0, r3, #1
 80163c4:	4458      	add	r0, fp
 80163c6:	4652      	mov	r2, sl
 80163c8:	a98f      	add	r1, sp, #572	; 0x23c
 80163ca:	f00c fa41 	bl	8022850 <memcpy>
 80163ce:	9b02      	ldr	r3, [sp, #8]
 80163d0:	9701      	str	r7, [sp, #4]
 80163d2:	eb03 0907 	add.w	r9, r3, r7
 80163d6:	f1b9 0f1e 	cmp.w	r9, #30
 80163da:	ddac      	ble.n	8016336 <m_kalman_3gyro.isra.6.constprop.36+0x996>
 80163dc:	9b04      	ldr	r3, [sp, #16]
 80163de:	9302      	str	r3, [sp, #8]
 80163e0:	9b06      	ldr	r3, [sp, #24]
 80163e2:	3b01      	subs	r3, #1
 80163e4:	9306      	str	r3, [sp, #24]
 80163e6:	d19b      	bne.n	8016320 <m_kalman_3gyro.isra.6.constprop.36+0x980>
 80163e8:	f99b 200e 	ldrsb.w	r2, [fp, #14]
 80163ec:	f99b 300f 	ldrsb.w	r3, [fp, #15]
 80163f0:	eb08 0282 	add.w	r2, r8, r2, lsl #2
 80163f4:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 80163f8:	ed52 7a01 	vldr	s15, [r2, #-4]
 80163fc:	ed13 7a01 	vldr	s14, [r3, #-4]
 8016400:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016408:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801640c:	bf4c      	ite	mi
 801640e:	2201      	movmi	r2, #1
 8016410:	2200      	movpl	r2, #0
 8016412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016416:	bf4c      	ite	mi
 8016418:	2301      	movmi	r3, #1
 801641a:	2300      	movpl	r3, #0
 801641c:	429a      	cmp	r2, r3
 801641e:	f000 8156 	beq.w	80166ce <m_kalman_3gyro.isra.6.constprop.36+0xd2e>
 8016422:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016426:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801642a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801642e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016430:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8016432:	3204      	adds	r2, #4
 8016434:	920a      	str	r2, [sp, #40]	; 0x28
 8016436:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016438:	ece3 7a01 	vstmia	r3!, {s15}
 801643c:	4293      	cmp	r3, r2
 801643e:	9326      	str	r3, [sp, #152]	; 0x98
 8016440:	f47f ae79 	bne.w	8016136 <m_kalman_3gyro.isra.6.constprop.36+0x796>
 8016444:	f8dd a6e0 	ldr.w	sl, [sp, #1760]	; 0x6e0
 8016448:	edda 7af3 	vldr	s15, [sl, #972]	; 0x3cc
 801644c:	edda 6af2 	vldr	s13, [sl, #968]	; 0x3c8
 8016450:	ed9a 7af4 	vldr	s14, [sl, #976]	; 0x3d0
 8016454:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8016458:	eee6 7aa6 	vfma.f32	s15, s13, s13
 801645c:	eee7 7a07 	vfma.f32	s15, s14, s14
 8016460:	ee17 0a90 	vmov	r0, s15
 8016464:	f7e9 fff0 	bl	8000448 <__aeabi_f2d>
 8016468:	f00a fe96 	bl	8021198 <sqrt>
 801646c:	f7ea fb3c 	bl	8000ae8 <__aeabi_d2f>
 8016470:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8016474:	ee2e 6a07 	vmul.f32	s12, s28, s14
 8016478:	ee6e 6a87 	vmul.f32	s13, s29, s14
 801647c:	eecd 7a86 	vdiv.f32	s15, s27, s12
 8016480:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8016482:	9002      	str	r0, [sp, #8]
 8016484:	ee8c 6aa6 	vdiv.f32	s12, s25, s13
 8016488:	ee2f 7a07 	vmul.f32	s14, s30, s14
 801648c:	edc3 7a00 	vstr	s15, [r3]
 8016490:	eec8 6a07 	vdiv.f32	s13, s16, s14
 8016494:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016496:	ed1f 7ad1 	vldr	s14, [pc, #-836]	; 8016154 <m_kalman_3gyro.isra.6.constprop.36+0x7b4>
 801649a:	ed83 6a00 	vstr	s12, [r3]
 801649e:	ee77 7a86 	vadd.f32	s15, s15, s12
 80164a2:	ee28 8a07 	vmul.f32	s16, s16, s14
 80164a6:	ee05 0a90 	vmov	s11, r0
 80164aa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80164ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80164b2:	eeac 8a87 	vfma.f32	s16, s25, s14
 80164b6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80164b8:	ee25 7a87 	vmul.f32	s14, s11, s14
 80164bc:	edc3 6a00 	vstr	s13, [r3]
 80164c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80164c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80164c6:	ed1f 6adc 	vldr	s12, [pc, #-880]	; 8016158 <m_kalman_3gyro.isra.6.constprop.36+0x7b8>
 80164ca:	ed83 7a00 	vstr	s14, [r3]
 80164ce:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 80164d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80164d4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80164d8:	ee28 8a06 	vmul.f32	s16, s16, s12
 80164dc:	edc3 7a00 	vstr	s15, [r3]
 80164e0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80164e2:	ed83 8a00 	vstr	s16, [r3]
 80164e6:	f89a 38ce 	ldrb.w	r3, [sl, #2254]	; 0x8ce
 80164ea:	2b00      	cmp	r3, #0
 80164ec:	f000 829e 	beq.w	8016a2c <m_kalman_3gyro.isra.6.constprop.36+0x108c>
 80164f0:	f60a 03c8 	addw	r3, sl, #2248	; 0x8c8
 80164f4:	9304      	str	r3, [sp, #16]
 80164f6:	f50a 630c 	add.w	r3, sl, #2240	; 0x8c0
 80164fa:	f60a 09c4 	addw	r9, sl, #2244	; 0x8c4
 80164fe:	9301      	str	r3, [sp, #4]
 8016500:	f60a 07bc 	addw	r7, sl, #2236	; 0x8bc
 8016504:	f60a 06b8 	addw	r6, sl, #2232	; 0x8b8
 8016508:	461c      	mov	r4, r3
 801650a:	ed99 7a00 	vldr	s14, [r9]
 801650e:	9b04      	ldr	r3, [sp, #16]
 8016510:	ed8d 7a12 	vstr	s14, [sp, #72]	; 0x48
 8016514:	ed83 7a00 	vstr	s14, [r3]
 8016518:	e9da 010a 	ldrd	r0, r1, [sl, #40]	; 0x28
 801651c:	f7ea fae4 	bl	8000ae8 <__aeabi_d2f>
 8016520:	ed94 6a00 	vldr	s12, [r4]
 8016524:	9004      	str	r0, [sp, #16]
 8016526:	ed89 6a00 	vstr	s12, [r9]
 801652a:	e9da 0108 	ldrd	r0, r1, [sl, #32]
 801652e:	ed8d 6a0a 	vstr	s12, [sp, #40]	; 0x28
 8016532:	f7ea fad9 	bl	8000ae8 <__aeabi_d2f>
 8016536:	edd7 7a00 	vldr	s15, [r7]
 801653a:	9001      	str	r0, [sp, #4]
 801653c:	edc4 7a00 	vstr	s15, [r4]
 8016540:	e9da 0106 	ldrd	r0, r1, [sl, #24]
 8016544:	edcd 7a06 	vstr	s15, [sp, #24]
 8016548:	f7ea face 	bl	8000ae8 <__aeabi_d2f>
 801654c:	eddd 7a06 	vldr	s15, [sp, #24]
 8016550:	ed9d 6a0a 	vldr	s12, [sp, #40]	; 0x28
 8016554:	edd6 6a00 	vldr	s13, [r6]
 8016558:	ee07 0a10 	vmov	s14, r0
 801655c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016560:	ed9d 7a01 	vldr	s14, [sp, #4]
 8016564:	edc7 6a00 	vstr	s13, [r7]
 8016568:	eee7 7a06 	vfma.f32	s15, s14, s12
 801656c:	e9da 0104 	ldrd	r0, r1, [sl, #16]
 8016570:	edcd 6a06 	vstr	s13, [sp, #24]
 8016574:	edcd 7a01 	vstr	s15, [sp, #4]
 8016578:	f7ea fab6 	bl	8000ae8 <__aeabi_d2f>
 801657c:	eddd 7a01 	vldr	s15, [sp, #4]
 8016580:	eddd 6a06 	vldr	s13, [sp, #24]
 8016584:	ee07 0a10 	vmov	s14, r0
 8016588:	eee6 7a87 	vfma.f32	s15, s13, s14
 801658c:	e9da 0102 	ldrd	r0, r1, [sl, #8]
 8016590:	ed9d 7a12 	vldr	s14, [sp, #72]	; 0x48
 8016594:	eddd 6a04 	vldr	s13, [sp, #16]
 8016598:	ed86 8a00 	vstr	s16, [r6]
 801659c:	eee6 7a87 	vfma.f32	s15, s13, s14
 80165a0:	edcd 7a01 	vstr	s15, [sp, #4]
 80165a4:	f7ea faa0 	bl	8000ae8 <__aeabi_d2f>
 80165a8:	eddd 7a01 	vldr	s15, [sp, #4]
 80165ac:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80165ae:	ee07 0a10 	vmov	s14, r0
 80165b2:	eee8 7a07 	vfma.f32	s15, s16, s14
 80165b6:	2200      	movs	r2, #0
 80165b8:	2300      	movs	r3, #0
 80165ba:	edc1 7a00 	vstr	s15, [r1]
 80165be:	f50d 61d7 	add.w	r1, sp, #1720	; 0x6b8
 80165c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80165c6:	eeb0 8a67 	vmov.f32	s16, s15
 80165ca:	f7ea fa11 	bl	80009f0 <__aeabi_dcmple>
 80165ce:	2800      	cmp	r0, #0
 80165d0:	f040 834a 	bne.w	8016c68 <m_kalman_3gyro.isra.6.constprop.36+0x12c8>
 80165d4:	f50d 61d7 	add.w	r1, sp, #1720	; 0x6b8
 80165d8:	2200      	movs	r2, #0
 80165da:	4b4e      	ldr	r3, [pc, #312]	; (8016714 <m_kalman_3gyro.isra.6.constprop.36+0xd74>)
 80165dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80165e0:	f7ea f9f2 	bl	80009c8 <__aeabi_dcmpeq>
 80165e4:	2800      	cmp	r0, #0
 80165e6:	f000 8284 	beq.w	8016af2 <m_kalman_3gyro.isra.6.constprop.36+0x1152>
 80165ea:	eddd 7ab6 	vldr	s15, [sp, #728]	; 0x2d8
 80165ee:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80165f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80165f6:	f302 83c0 	bgt.w	8018d7a <m_kalman_3gyro.isra.6.constprop.36+0x33da>
 80165fa:	eddd 7ac3 	vldr	s15, [sp, #780]	; 0x30c
 80165fe:	ed9d 7ad0 	vldr	s14, [sp, #832]	; 0x340
 8016602:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016604:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8016608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801660c:	edc3 7a00 	vstr	s15, [r3]
 8016610:	f142 83bf 	bpl.w	8018d92 <m_kalman_3gyro.isra.6.constprop.36+0x33f2>
 8016614:	ed9d 7adc 	vldr	s14, [sp, #880]	; 0x370
 8016618:	eeb4 7ac8 	vcmpe.f32	s14, s16
 801661c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016620:	f340 831a 	ble.w	8016c58 <m_kalman_3gyro.isra.6.constprop.36+0x12b8>
 8016624:	200d      	movs	r0, #13
 8016626:	2402      	movs	r4, #2
 8016628:	2101      	movs	r1, #1
 801662a:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
 801662e:	180b      	adds	r3, r1, r0
 8016630:	085b      	lsrs	r3, r3, #1
 8016632:	199a      	adds	r2, r3, r6
 8016634:	f50d 65c6 	add.w	r5, sp, #1584	; 0x630
 8016638:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 801663c:	f5a5 753c 	sub.w	r5, r5, #752	; 0x2f0
 8016640:	e00e      	b.n	8016660 <m_kalman_3gyro.isra.6.constprop.36+0xcc0>
 8016642:	18ca      	adds	r2, r1, r3
 8016644:	4618      	mov	r0, r3
 8016646:	429c      	cmp	r4, r3
 8016648:	ea4f 0352 	mov.w	r3, r2, lsr #1
 801664c:	eb03 0206 	add.w	r2, r3, r6
 8016650:	f50d 65c6 	add.w	r5, sp, #1584	; 0x630
 8016654:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 8016658:	f5a5 753c 	sub.w	r5, r5, #752	; 0x2f0
 801665c:	f083 810b 	bcs.w	8019876 <m_kalman_3gyro.isra.6.constprop.36+0x3ed6>
 8016660:	ed95 7a00 	vldr	s14, [r5]
 8016664:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8016668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801666c:	dbe9      	blt.n	8016642 <m_kalman_3gyro.isra.6.constprop.36+0xca2>
 801666e:	1c5c      	adds	r4, r3, #1
 8016670:	42a0      	cmp	r0, r4
 8016672:	4619      	mov	r1, r3
 8016674:	d8db      	bhi.n	801662e <m_kalman_3gyro.isra.6.constprop.36+0xc8e>
 8016676:	0092      	lsls	r2, r2, #2
 8016678:	009b      	lsls	r3, r3, #2
 801667a:	a9d0      	add	r1, sp, #832	; 0x340
 801667c:	1888      	adds	r0, r1, r2
 801667e:	4419      	add	r1, r3
 8016680:	edd0 6a00 	vldr	s13, [r0]
 8016684:	ed91 7a00 	vldr	s14, [r1]
 8016688:	ee78 5a66 	vsub.f32	s11, s16, s13
 801668c:	ee37 7a66 	vsub.f32	s14, s14, s13
 8016690:	a9dd      	add	r1, sp, #884	; 0x374
 8016692:	ee85 6a87 	vdiv.f32	s12, s11, s14
 8016696:	440a      	add	r2, r1
 8016698:	440b      	add	r3, r1
 801669a:	ed92 7a00 	vldr	s14, [r2]
 801669e:	edd3 6a00 	vldr	s13, [r3]
 80166a2:	ee76 6ac7 	vsub.f32	s13, s13, s14
 80166a6:	eea6 7a26 	vfma.f32	s14, s12, s13
 80166aa:	e2d7      	b.n	8016c5c <m_kalman_3gyro.isra.6.constprop.36+0x12bc>
 80166ac:	45a9      	cmp	r9, r5
 80166ae:	eba9 0205 	sub.w	r2, r9, r5
 80166b2:	eb03 0004 	add.w	r0, r3, r4
 80166b6:	eb0b 010c 	add.w	r1, fp, ip
 80166ba:	f77f ae51 	ble.w	8016360 <m_kalman_3gyro.isra.6.constprop.36+0x9c0>
 80166be:	444c      	add	r4, r9
 80166c0:	1b64      	subs	r4, r4, r5
 80166c2:	f00c f8c5 	bl	8022850 <memcpy>
 80166c6:	464d      	mov	r5, r9
 80166c8:	e64a      	b.n	8016360 <m_kalman_3gyro.isra.6.constprop.36+0x9c0>
 80166ca:	464d      	mov	r5, r9
 80166cc:	e648      	b.n	8016360 <m_kalman_3gyro.isra.6.constprop.36+0x9c0>
 80166ce:	eddd 6a36 	vldr	s13, [sp, #216]	; 0xd8
 80166d2:	eef4 7a66 	vcmp.f32	s15, s13
 80166d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166da:	f43f aea2 	beq.w	8016422 <m_kalman_3gyro.isra.6.constprop.36+0xa82>
 80166de:	ed9d 6a37 	vldr	s12, [sp, #220]	; 0xdc
 80166e2:	eef4 7a46 	vcmp.f32	s15, s12
 80166e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166ea:	f43f ae9a 	beq.w	8016422 <m_kalman_3gyro.isra.6.constprop.36+0xa82>
 80166ee:	eeb4 7a66 	vcmp.f32	s14, s13
 80166f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166f6:	f43f ae94 	beq.w	8016422 <m_kalman_3gyro.isra.6.constprop.36+0xa82>
 80166fa:	eeb4 7a46 	vcmp.f32	s14, s12
 80166fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016702:	f43f ae8e 	beq.w	8016422 <m_kalman_3gyro.isra.6.constprop.36+0xa82>
 8016706:	ee37 7a67 	vsub.f32	s14, s14, s15
 801670a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801670e:	eee7 7a26 	vfma.f32	s15, s14, s13
 8016712:	e68c      	b.n	801642e <m_kalman_3gyro.isra.6.constprop.36+0xa8e>
 8016714:	3ff00000 	.word	0x3ff00000
 8016718:	f50d 60d7 	add.w	r0, sp, #1720	; 0x6b8
 801671c:	ed90 7b00 	vldr	d7, [r0]
 8016720:	ae47      	add	r6, sp, #284	; 0x11c
 8016722:	2101      	movs	r1, #1
 8016724:	f44f 7280 	mov.w	r2, #256	; 0x100
 8016728:	2500      	movs	r5, #0
 801672a:	ed8a 7b0e 	vstr	d7, [sl, #56]	; 0x38
 801672e:	f8ca 4044 	str.w	r4, [sl, #68]	; 0x44
 8016732:	f88a 18cd 	strb.w	r1, [sl, #2253]	; 0x8cd
 8016736:	f8aa 2030 	strh.w	r2, [sl, #48]	; 0x30
 801673a:	4621      	mov	r1, r4
 801673c:	e9ca 4412 	strd	r4, r4, [sl, #72]	; 0x48
 8016740:	e9ca 4415 	strd	r4, r4, [sl, #84]	; 0x54
 8016744:	f8ca 405c 	str.w	r4, [sl, #92]	; 0x5c
 8016748:	2230      	movs	r2, #48	; 0x30
 801674a:	edca ca18 	vstr	s25, [sl, #96]	; 0x60
 801674e:	edca ca14 	vstr	s25, [sl, #80]	; 0x50
 8016752:	edca ca10 	vstr	s25, [sl, #64]	; 0x40
 8016756:	f10a 0064 	add.w	r0, sl, #100	; 0x64
 801675a:	6035      	str	r5, [r6, #0]
 801675c:	6075      	str	r5, [r6, #4]
 801675e:	60b5      	str	r5, [r6, #8]
 8016760:	60f5      	str	r5, [r6, #12]
 8016762:	9609      	str	r6, [sp, #36]	; 0x24
 8016764:	f00c f898 	bl	8022898 <memset>
 8016768:	4bae      	ldr	r3, [pc, #696]	; (8016a24 <m_kalman_3gyro.isra.6.constprop.36+0x1084>)
 801676a:	f8ca 5094 	str.w	r5, [sl, #148]	; 0x94
 801676e:	4621      	mov	r1, r4
 8016770:	f8ca 5098 	str.w	r5, [sl, #152]	; 0x98
 8016774:	f8ca 509c 	str.w	r5, [sl, #156]	; 0x9c
 8016778:	f8ca 30ac 	str.w	r3, [sl, #172]	; 0xac
 801677c:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8016780:	edca ca2c 	vstr	s25, [sl, #176]	; 0xb0
 8016784:	edca ca2d 	vstr	s25, [sl, #180]	; 0xb4
 8016788:	f10a 00b8 	add.w	r0, sl, #184	; 0xb8
 801678c:	f00c f884 	bl	8022898 <memset>
 8016790:	2400      	movs	r4, #0
 8016792:	4ba5      	ldr	r3, [pc, #660]	; (8016a28 <m_kalman_3gyro.isra.6.constprop.36+0x1088>)
 8016794:	f8ca 30b8 	str.w	r3, [sl, #184]	; 0xb8
 8016798:	f04f 5b7e 	mov.w	fp, #1065353216	; 0x3f800000
 801679c:	f04f 3001 	mov.w	r0, #16843009	; 0x1010101
 80167a0:	4621      	mov	r1, r4
 80167a2:	f8ca 30e0 	str.w	r3, [sl, #224]	; 0xe0
 80167a6:	f8ca 3108 	str.w	r3, [sl, #264]	; 0x108
 80167aa:	f8ca 3130 	str.w	r3, [sl, #304]	; 0x130
 80167ae:	f8ca 3158 	str.w	r3, [sl, #344]	; 0x158
 80167b2:	f8ca 3180 	str.w	r3, [sl, #384]	; 0x180
 80167b6:	f8ca 31a8 	str.w	r3, [sl, #424]	; 0x1a8
 80167ba:	f8ca 31d0 	str.w	r3, [sl, #464]	; 0x1d0
 80167be:	f8ca 31f8 	str.w	r3, [sl, #504]	; 0x1f8
 80167c2:	f8ca 01fc 	str.w	r0, [sl, #508]	; 0x1fc
 80167c6:	f8ca 0200 	str.w	r0, [sl, #512]	; 0x200
 80167ca:	f8ca 0204 	str.w	r0, [sl, #516]	; 0x204
 80167ce:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80167d2:	f8ca 4218 	str.w	r4, [sl, #536]	; 0x218
 80167d6:	f8ca 421c 	str.w	r4, [sl, #540]	; 0x21c
 80167da:	f8ca 4220 	str.w	r4, [sl, #544]	; 0x220
 80167de:	f8ca 4228 	str.w	r4, [sl, #552]	; 0x228
 80167e2:	f8ca 422c 	str.w	r4, [sl, #556]	; 0x22c
 80167e6:	f8ca 4230 	str.w	r4, [sl, #560]	; 0x230
 80167ea:	f8ca 423c 	str.w	r4, [sl, #572]	; 0x23c
 80167ee:	f8ca b234 	str.w	fp, [sl, #564]	; 0x234
 80167f2:	f8ca b224 	str.w	fp, [sl, #548]	; 0x224
 80167f6:	f8ca b214 	str.w	fp, [sl, #532]	; 0x214
 80167fa:	f8ca 4240 	str.w	r4, [sl, #576]	; 0x240
 80167fe:	f8ca 4244 	str.w	r4, [sl, #580]	; 0x244
 8016802:	f8ca 424c 	str.w	r4, [sl, #588]	; 0x24c
 8016806:	f8ca 4250 	str.w	r4, [sl, #592]	; 0x250
 801680a:	f8ca 4254 	str.w	r4, [sl, #596]	; 0x254
 801680e:	f8ca b258 	str.w	fp, [sl, #600]	; 0x258
 8016812:	f8ca b248 	str.w	fp, [sl, #584]	; 0x248
 8016816:	f8ca b238 	str.w	fp, [sl, #568]	; 0x238
 801681a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801681c:	f00c f83c 	bl	8022898 <memset>
 8016820:	f20a 4e24 	addw	lr, sl, #1060	; 0x424
 8016824:	f8cd e070 	str.w	lr, [sp, #112]	; 0x70
 8016828:	f50a 6e85 	add.w	lr, sl, #1064	; 0x428
 801682c:	f8cd e074 	str.w	lr, [sp, #116]	; 0x74
 8016830:	f20a 4e2c 	addw	lr, sl, #1068	; 0x42c
 8016834:	f8cd e078 	str.w	lr, [sp, #120]	; 0x78
 8016838:	f50a 6e86 	add.w	lr, sl, #1072	; 0x430
 801683c:	f8cd e05c 	str.w	lr, [sp, #92]	; 0x5c
 8016840:	f20a 4e34 	addw	lr, sl, #1076	; 0x434
 8016844:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
 8016848:	f50a 6e87 	add.w	lr, sl, #1080	; 0x438
 801684c:	f8cd e07c 	str.w	lr, [sp, #124]	; 0x7c
 8016850:	f20a 4e3c 	addw	lr, sl, #1084	; 0x43c
 8016854:	f50a 7375 	add.w	r3, sl, #980	; 0x3d4
 8016858:	f8cd e044 	str.w	lr, [sp, #68]	; 0x44
 801685c:	f50a 6e88 	add.w	lr, sl, #1088	; 0x440
 8016860:	9312      	str	r3, [sp, #72]	; 0x48
 8016862:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 8016866:	f20a 4e44 	addw	lr, sl, #1092	; 0x444
 801686a:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801686c:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 8016870:	f20a 4004 	addw	r0, sl, #1028	; 0x404
 8016874:	f50a 6582 	add.w	r5, sl, #1040	; 0x410
 8016878:	f50a 6e89 	add.w	lr, sl, #1096	; 0x448
 801687c:	2600      	movs	r6, #0
 801687e:	9013      	str	r0, [sp, #76]	; 0x4c
 8016880:	9514      	str	r5, [sp, #80]	; 0x50
 8016882:	f20a 4014 	addw	r0, sl, #1044	; 0x414
 8016886:	f50a 6583 	add.w	r5, sl, #1048	; 0x418
 801688a:	f20a 4c1c 	addw	ip, sl, #1052	; 0x41c
 801688e:	f8cd e060 	str.w	lr, [sp, #96]	; 0x60
 8016892:	f20a 4e4c 	addw	lr, sl, #1100	; 0x44c
 8016896:	f8ca 43d4 	str.w	r4, [sl, #980]	; 0x3d4
 801689a:	f8ca 63c4 	str.w	r6, [sl, #964]	; 0x3c4
 801689e:	f8ca 63c8 	str.w	r6, [sl, #968]	; 0x3c8
 80168a2:	f8ca 63cc 	str.w	r6, [sl, #972]	; 0x3cc
 80168a6:	f8ca 63d0 	str.w	r6, [sl, #976]	; 0x3d0
 80168aa:	9015      	str	r0, [sp, #84]	; 0x54
 80168ac:	607c      	str	r4, [r7, #4]
 80168ae:	60bc      	str	r4, [r7, #8]
 80168b0:	9516      	str	r5, [sp, #88]	; 0x58
 80168b2:	f8cd c06c 	str.w	ip, [sp, #108]	; 0x6c
 80168b6:	f8cd e03c 	str.w	lr, [sp, #60]	; 0x3c
 80168ba:	f8ca 43e0 	str.w	r4, [sl, #992]	; 0x3e0
 80168be:	f8ca 43e4 	str.w	r4, [sl, #996]	; 0x3e4
 80168c2:	f8ca 43e8 	str.w	r4, [sl, #1000]	; 0x3e8
 80168c6:	f8ca 43ec 	str.w	r4, [sl, #1004]	; 0x3ec
 80168ca:	f8ca 43f0 	str.w	r4, [sl, #1008]	; 0x3f0
 80168ce:	f8ca 43f4 	str.w	r4, [sl, #1012]	; 0x3f4
 80168d2:	f8ca 43f8 	str.w	r4, [sl, #1016]	; 0x3f8
 80168d6:	f8ca 43fc 	str.w	r4, [sl, #1020]	; 0x3fc
 80168da:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80168dc:	f8ca 4400 	str.w	r4, [sl, #1024]	; 0x400
 80168e0:	f50a 6881 	add.w	r8, sl, #1032	; 0x408
 80168e4:	601e      	str	r6, [r3, #0]
 80168e6:	f20a 490c 	addw	r9, sl, #1036	; 0x40c
 80168ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80168ec:	f8c8 6000 	str.w	r6, [r8]
 80168f0:	f8c9 6000 	str.w	r6, [r9]
 80168f4:	601e      	str	r6, [r3, #0]
 80168f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80168f8:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 80168fa:	601e      	str	r6, [r3, #0]
 80168fc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80168fe:	601e      	str	r6, [r3, #0]
 8016900:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016902:	f50a 6084 	add.w	r0, sl, #1056	; 0x420
 8016906:	601e      	str	r6, [r3, #0]
 8016908:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801690a:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
 801690e:	f8c0 c000 	str.w	ip, [r0]
 8016912:	601e      	str	r6, [r3, #0]
 8016914:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8016916:	603e      	str	r6, [r7, #0]
 8016918:	601e      	str	r6, [r3, #0]
 801691a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801691c:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801691e:	601e      	str	r6, [r3, #0]
 8016920:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8016922:	603e      	str	r6, [r7, #0]
 8016924:	601e      	str	r6, [r3, #0]
 8016926:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016928:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801692a:	f8c3 b000 	str.w	fp, [r3]
 801692e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016930:	ed87 8a00 	vstr	s16, [r7]
 8016934:	601e      	str	r6, [r3, #0]
 8016936:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8016938:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801693a:	f8c3 b000 	str.w	fp, [r3]
 801693e:	2532      	movs	r5, #50	; 0x32
 8016940:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8016942:	603e      	str	r6, [r7, #0]
 8016944:	f8ca 4450 	str.w	r4, [sl, #1104]	; 0x450
 8016948:	f8ca 4454 	str.w	r4, [sl, #1108]	; 0x454
 801694c:	f8ca 445c 	str.w	r4, [sl, #1116]	; 0x45c
 8016950:	f8ca 5458 	str.w	r5, [sl, #1112]	; 0x458
 8016954:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016958:	ab74      	add	r3, sp, #464	; 0x1d0
 801695a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801695e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016960:	f8d3 b000 	ldr.w	fp, [r3]
 8016964:	f8d3 e004 	ldr.w	lr, [r3, #4]
 8016968:	f8d3 c008 	ldr.w	ip, [r3, #8]
 801696c:	ca07      	ldmia	r2, {r0, r1, r2}
 801696e:	ac77      	add	r4, sp, #476	; 0x1dc
 8016970:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8016974:	9a08      	ldr	r2, [sp, #32]
 8016976:	ca07      	ldmia	r2, {r0, r1, r2}
 8016978:	ac7a      	add	r4, sp, #488	; 0x1e8
 801697a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801697e:	68de      	ldr	r6, [r3, #12]
 8016980:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8016982:	691d      	ldr	r5, [r3, #16]
 8016984:	695c      	ldr	r4, [r3, #20]
 8016986:	6998      	ldr	r0, [r3, #24]
 8016988:	69d9      	ldr	r1, [r3, #28]
 801698a:	6a1a      	ldr	r2, [r3, #32]
 801698c:	f8cd 9010 	str.w	r9, [sp, #16]
 8016990:	463b      	mov	r3, r7
 8016992:	46c1      	mov	r9, r8
 8016994:	f507 6787 	add.w	r7, r7, #1080	; 0x438
 8016998:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 801699c:	9735      	str	r7, [sp, #212]	; 0xd4
 801699e:	f8c3 b000 	str.w	fp, [r3]
 80169a2:	f8c3 e004 	str.w	lr, [r3, #4]
 80169a6:	f8c3 c008 	str.w	ip, [r3, #8]
 80169aa:	60de      	str	r6, [r3, #12]
 80169ac:	611d      	str	r5, [r3, #16]
 80169ae:	615c      	str	r4, [r3, #20]
 80169b0:	6198      	str	r0, [r3, #24]
 80169b2:	61d9      	str	r1, [r3, #28]
 80169b4:	621a      	str	r2, [r3, #32]
 80169b6:	3324      	adds	r3, #36	; 0x24
 80169b8:	42bb      	cmp	r3, r7
 80169ba:	d1f0      	bne.n	801699e <m_kalman_3gyro.isra.6.constprop.36+0xffe>
 80169bc:	f8dd 36c0 	ldr.w	r3, [sp, #1728]	; 0x6c0
 80169c0:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80169c4:	681a      	ldr	r2, [r3, #0]
 80169c6:	ed9d ca40 	vldr	s24, [sp, #256]	; 0x100
 80169ca:	eddd ba3f 	vldr	s23, [sp, #252]	; 0xfc
 80169ce:	eddd 9a3e 	vldr	s19, [sp, #248]	; 0xf8
 80169d2:	ed9d ba41 	vldr	s22, [sp, #260]	; 0x104
 80169d6:	eddd aa42 	vldr	s21, [sp, #264]	; 0x108
 80169da:	ed9d aa43 	vldr	s20, [sp, #268]	; 0x10c
 80169de:	f60a 0398 	addw	r3, sl, #2200	; 0x898
 80169e2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80169e6:	601a      	str	r2, [r3, #0]
 80169e8:	f8dd 36c0 	ldr.w	r3, [sp, #1728]	; 0x6c0
 80169ec:	685a      	ldr	r2, [r3, #4]
 80169ee:	f60a 039c 	addw	r3, sl, #2204	; 0x89c
 80169f2:	46c8      	mov	r8, r9
 80169f4:	601a      	str	r2, [r3, #0]
 80169f6:	f8dd 36c0 	ldr.w	r3, [sp, #1728]	; 0x6c0
 80169fa:	f8dd 9010 	ldr.w	r9, [sp, #16]
 80169fe:	6898      	ldr	r0, [r3, #8]
 8016a00:	f50a 620a 	add.w	r2, sl, #2208	; 0x8a0
 8016a04:	2300      	movs	r3, #0
 8016a06:	6010      	str	r0, [r2, #0]
 8016a08:	f88a 38a4 	strb.w	r3, [sl, #2212]	; 0x8a4
 8016a0c:	f8ca 38a6 	str.w	r3, [sl, #2214]	; 0x8a6
 8016a10:	f88a 38ad 	strb.w	r3, [sl, #2221]	; 0x8ad
 8016a14:	f88a 38ae 	strb.w	r3, [sl, #2222]	; 0x8ae
 8016a18:	f8ca 38b0 	str.w	r3, [sl, #2224]	; 0x8b0
 8016a1c:	f8aa 18aa 	strh.w	r1, [sl, #2218]	; 0x8aa
 8016a20:	f7ff b8f8 	b.w	8015c14 <m_kalman_3gyro.isra.6.constprop.36+0x274>
 8016a24:	3f666666 	.word	0x3f666666
 8016a28:	40a00000 	.word	0x40a00000
 8016a2c:	ed9a 7b02 	vldr	d7, [sl, #8]
 8016a30:	f50a 620c 	add.w	r2, sl, #2240	; 0x8c0
 8016a34:	4614      	mov	r4, r2
 8016a36:	2301      	movs	r3, #1
 8016a38:	f60a 06b8 	addw	r6, sl, #2232	; 0x8b8
 8016a3c:	f60a 07bc 	addw	r7, sl, #2236	; 0x8bc
 8016a40:	e9da 0104 	ldrd	r0, r1, [sl, #16]
 8016a44:	f88a 38ce 	strb.w	r3, [sl, #2254]	; 0x8ce
 8016a48:	9201      	str	r2, [sp, #4]
 8016a4a:	ed86 8a00 	vstr	s16, [r6]
 8016a4e:	e9da 2306 	ldrd	r2, r3, [sl, #24]
 8016a52:	ed87 8a00 	vstr	s16, [r7]
 8016a56:	ed84 8a00 	vstr	s16, [r4]
 8016a5a:	ed8d 7b06 	vstr	d7, [sp, #24]
 8016a5e:	f60a 09c4 	addw	r9, sl, #2244	; 0x8c4
 8016a62:	f7e9 fb93 	bl	800018c <__adddf3>
 8016a66:	f60a 03c8 	addw	r3, sl, #2248	; 0x8c8
 8016a6a:	461c      	mov	r4, r3
 8016a6c:	9304      	str	r3, [sp, #16]
 8016a6e:	ed89 8a00 	vstr	s16, [r9]
 8016a72:	e9da 2308 	ldrd	r2, r3, [sl, #32]
 8016a76:	f7e9 fb89 	bl	800018c <__adddf3>
 8016a7a:	e9da 230a 	ldrd	r2, r3, [sl, #40]	; 0x28
 8016a7e:	ed84 8a00 	vstr	s16, [r4]
 8016a82:	f7e9 fb83 	bl	800018c <__adddf3>
 8016a86:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016a8a:	f7e9 fb7f 	bl	800018c <__adddf3>
 8016a8e:	4602      	mov	r2, r0
 8016a90:	460b      	mov	r3, r1
 8016a92:	2000      	movs	r0, #0
 8016a94:	4973      	ldr	r1, [pc, #460]	; (8016c64 <m_kalman_3gyro.isra.6.constprop.36+0x12c4>)
 8016a96:	f7e9 fe59 	bl	800074c <__aeabi_ddiv>
 8016a9a:	4604      	mov	r4, r0
 8016a9c:	460d      	mov	r5, r1
 8016a9e:	4602      	mov	r2, r0
 8016aa0:	460b      	mov	r3, r1
 8016aa2:	e9da 0102 	ldrd	r0, r1, [sl, #8]
 8016aa6:	f7e9 fd27 	bl	80004f8 <__aeabi_dmul>
 8016aaa:	4622      	mov	r2, r4
 8016aac:	462b      	mov	r3, r5
 8016aae:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8016ab2:	e9da 0104 	ldrd	r0, r1, [sl, #16]
 8016ab6:	f7e9 fd1f 	bl	80004f8 <__aeabi_dmul>
 8016aba:	4622      	mov	r2, r4
 8016abc:	462b      	mov	r3, r5
 8016abe:	e9ca 0104 	strd	r0, r1, [sl, #16]
 8016ac2:	e9da 0106 	ldrd	r0, r1, [sl, #24]
 8016ac6:	f7e9 fd17 	bl	80004f8 <__aeabi_dmul>
 8016aca:	4622      	mov	r2, r4
 8016acc:	462b      	mov	r3, r5
 8016ace:	e9ca 0106 	strd	r0, r1, [sl, #24]
 8016ad2:	e9da 0108 	ldrd	r0, r1, [sl, #32]
 8016ad6:	f7e9 fd0f 	bl	80004f8 <__aeabi_dmul>
 8016ada:	4622      	mov	r2, r4
 8016adc:	e9ca 0108 	strd	r0, r1, [sl, #32]
 8016ae0:	462b      	mov	r3, r5
 8016ae2:	e9da 010a 	ldrd	r0, r1, [sl, #40]	; 0x28
 8016ae6:	f7e9 fd07 	bl	80004f8 <__aeabi_dmul>
 8016aea:	9c01      	ldr	r4, [sp, #4]
 8016aec:	e9ca 010a 	strd	r0, r1, [sl, #40]	; 0x28
 8016af0:	e50b      	b.n	801650a <m_kalman_3gyro.isra.6.constprop.36+0xb6a>
 8016af2:	eddd 5ad1 	vldr	s11, [sp, #836]	; 0x344
 8016af6:	ed9d 6ab8 	vldr	s12, [sp, #736]	; 0x2e0
 8016afa:	eddd 7ad2 	vldr	s15, [sp, #840]	; 0x348
 8016afe:	eddd 4ab9 	vldr	s9, [sp, #740]	; 0x2e4
 8016b02:	ed9d 5ad3 	vldr	s10, [sp, #844]	; 0x34c
 8016b06:	eddd 6ab6 	vldr	s13, [sp, #728]	; 0x2d8
 8016b0a:	ed9d 7ad0 	vldr	s14, [sp, #832]	; 0x340
 8016b0e:	ed9d 4ab7 	vldr	s8, [sp, #732]	; 0x2dc
 8016b12:	ee65 5aa8 	vmul.f32	s11, s11, s17
 8016b16:	ee26 6a28 	vmul.f32	s12, s12, s17
 8016b1a:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8016b1e:	edcd 5ad1 	vstr	s11, [sp, #836]	; 0x344
 8016b22:	ed8d 6ab8 	vstr	s12, [sp, #736]	; 0x2e0
 8016b26:	eddd 5aba 	vldr	s11, [sp, #744]	; 0x2e8
 8016b2a:	ed9d 6ad4 	vldr	s12, [sp, #848]	; 0x350
 8016b2e:	edcd 7ad2 	vstr	s15, [sp, #840]	; 0x348
 8016b32:	eddd 7abb 	vldr	s15, [sp, #748]	; 0x2ec
 8016b36:	ee64 4aa8 	vmul.f32	s9, s9, s17
 8016b3a:	ee25 5a28 	vmul.f32	s10, s10, s17
 8016b3e:	ee65 5aa8 	vmul.f32	s11, s11, s17
 8016b42:	ee26 6a28 	vmul.f32	s12, s12, s17
 8016b46:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8016b4a:	edcd 4ab9 	vstr	s9, [sp, #740]	; 0x2e4
 8016b4e:	ed8d 5ad3 	vstr	s10, [sp, #844]	; 0x34c
 8016b52:	eddd 4ad5 	vldr	s9, [sp, #852]	; 0x354
 8016b56:	ed9d 5abc 	vldr	s10, [sp, #752]	; 0x2f0
 8016b5a:	edcd 5aba 	vstr	s11, [sp, #744]	; 0x2e8
 8016b5e:	ed8d 6ad4 	vstr	s12, [sp, #848]	; 0x350
 8016b62:	eddd 5ad6 	vldr	s11, [sp, #856]	; 0x358
 8016b66:	ed9d 6abd 	vldr	s12, [sp, #756]	; 0x2f4
 8016b6a:	edcd 7abb 	vstr	s15, [sp, #748]	; 0x2ec
 8016b6e:	eddd 7ad7 	vldr	s15, [sp, #860]	; 0x35c
 8016b72:	ee68 6aa6 	vmul.f32	s13, s17, s13
 8016b76:	ee24 4a28 	vmul.f32	s8, s8, s17
 8016b7a:	ee64 4aa8 	vmul.f32	s9, s9, s17
 8016b7e:	ee25 5a28 	vmul.f32	s10, s10, s17
 8016b82:	ee65 5aa8 	vmul.f32	s11, s11, s17
 8016b86:	ee26 6a28 	vmul.f32	s12, s12, s17
 8016b8a:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8016b8e:	ee28 7a87 	vmul.f32	s14, s17, s14
 8016b92:	edcd 4ad5 	vstr	s9, [sp, #852]	; 0x354
 8016b96:	ed8d 5abc 	vstr	s10, [sp, #752]	; 0x2f0
 8016b9a:	edcd 5ad6 	vstr	s11, [sp, #856]	; 0x358
 8016b9e:	ed8d 6abd 	vstr	s12, [sp, #756]	; 0x2f4
 8016ba2:	edcd 7ad7 	vstr	s15, [sp, #860]	; 0x35c
 8016ba6:	edcd 6ab6 	vstr	s13, [sp, #728]	; 0x2d8
 8016baa:	ed8d 7ad0 	vstr	s14, [sp, #832]	; 0x340
 8016bae:	ed8d 4ab7 	vstr	s8, [sp, #732]	; 0x2dc
 8016bb2:	ed9d 4abe 	vldr	s8, [sp, #760]	; 0x2f8
 8016bb6:	eddd 5ad8 	vldr	s11, [sp, #864]	; 0x360
 8016bba:	ed9d 6abf 	vldr	s12, [sp, #764]	; 0x2fc
 8016bbe:	eddd 7ad9 	vldr	s15, [sp, #868]	; 0x364
 8016bc2:	eddd 4ac0 	vldr	s9, [sp, #768]	; 0x300
 8016bc6:	ed9d 5ada 	vldr	s10, [sp, #872]	; 0x368
 8016bca:	ee65 5aa8 	vmul.f32	s11, s11, s17
 8016bce:	ee26 6a28 	vmul.f32	s12, s12, s17
 8016bd2:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8016bd6:	ee64 4aa8 	vmul.f32	s9, s9, s17
 8016bda:	edcd 5ad8 	vstr	s11, [sp, #864]	; 0x360
 8016bde:	ed8d 6abf 	vstr	s12, [sp, #764]	; 0x2fc
 8016be2:	eddd 5ac1 	vldr	s11, [sp, #772]	; 0x304
 8016be6:	ed9d 6adb 	vldr	s12, [sp, #876]	; 0x36c
 8016bea:	edcd 7ad9 	vstr	s15, [sp, #868]	; 0x364
 8016bee:	edcd 4ac0 	vstr	s9, [sp, #768]	; 0x300
 8016bf2:	eddd 7ac2 	vldr	s15, [sp, #776]	; 0x308
 8016bf6:	eddd 4adc 	vldr	s9, [sp, #880]	; 0x370
 8016bfa:	ee24 4a28 	vmul.f32	s8, s8, s17
 8016bfe:	ee25 5a28 	vmul.f32	s10, s10, s17
 8016c02:	ee65 5aa8 	vmul.f32	s11, s11, s17
 8016c06:	ee26 6a28 	vmul.f32	s12, s12, s17
 8016c0a:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8016c0e:	eeb4 8ae6 	vcmpe.f32	s16, s13
 8016c12:	ee68 8aa4 	vmul.f32	s17, s17, s9
 8016c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c1a:	ed8d 4abe 	vstr	s8, [sp, #760]	; 0x2f8
 8016c1e:	ed8d 5ada 	vstr	s10, [sp, #872]	; 0x368
 8016c22:	edcd 5ac1 	vstr	s11, [sp, #772]	; 0x304
 8016c26:	ed8d 6adb 	vstr	s12, [sp, #876]	; 0x36c
 8016c2a:	edcd 7ac2 	vstr	s15, [sp, #776]	; 0x308
 8016c2e:	edcd 8adc 	vstr	s17, [sp, #880]	; 0x370
 8016c32:	f302 8098 	bgt.w	8018d66 <m_kalman_3gyro.isra.6.constprop.36+0x33c6>
 8016c36:	eddd 7ac3 	vldr	s15, [sp, #780]	; 0x30c
 8016c3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016c3c:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8016c40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c44:	edc3 7a00 	vstr	s15, [r3]
 8016c48:	f342 80a3 	ble.w	8018d92 <m_kalman_3gyro.isra.6.constprop.36+0x33f2>
 8016c4c:	eef4 8ac8 	vcmpe.f32	s17, s16
 8016c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c54:	f302 8471 	bgt.w	801953a <m_kalman_3gyro.isra.6.constprop.36+0x3b9a>
 8016c58:	ed9d 7ae9 	vldr	s14, [sp, #932]	; 0x3a4
 8016c5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016c5e:	ed83 7a00 	vstr	s14, [r3]
 8016c62:	e009      	b.n	8016c78 <m_kalman_3gyro.isra.6.constprop.36+0x12d8>
 8016c64:	3ff00000 	.word	0x3ff00000
 8016c68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016c6a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8016c6e:	edc3 7a00 	vstr	s15, [r3]
 8016c72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016c74:	edc3 7a00 	vstr	s15, [r3]
 8016c78:	4bd1      	ldr	r3, [pc, #836]	; (8016fc0 <m_kalman_3gyro.isra.6.constprop.36+0x1620>)
 8016c7a:	ed9a 7a2d 	vldr	s14, [sl, #180]	; 0xb4
 8016c7e:	edd3 8a00 	vldr	s17, [r3]
 8016c82:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8016c84:	f8df 934c 	ldr.w	r9, [pc, #844]	; 8016fd4 <m_kalman_3gyro.isra.6.constprop.36+0x1634>
 8016c88:	edc3 7a00 	vstr	s15, [r3]
 8016c8c:	ee78 7ac7 	vsub.f32	s15, s17, s14
 8016c90:	eef0 7ae7 	vabs.f32	s15, s15
 8016c94:	ee17 0a90 	vmov	r0, s15
 8016c98:	f7e9 fbd6 	bl	8000448 <__aeabi_f2d>
 8016c9c:	f009 ffd8 	bl	8020c50 <floor>
 8016ca0:	f7e9 feda 	bl	8000a58 <__aeabi_d2iz>
 8016ca4:	f8dd 36d4 	ldr.w	r3, [sp, #1748]	; 0x6d4
 8016ca8:	7018      	strb	r0, [r3, #0]
 8016caa:	ed9a 7a2d 	vldr	s14, [sl, #180]	; 0xb4
 8016cae:	edda 7a2b 	vldr	s15, [sl, #172]	; 0xac
 8016cb2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8016cb4:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8016cb8:	ee7d 7a67 	vsub.f32	s15, s26, s15
 8016cbc:	eeb0 7ac7 	vabs.f32	s14, s14
 8016cc0:	eef0 7ae7 	vabs.f32	s15, s15
 8016cc4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016cc8:	ed89 7a00 	vstr	s14, [r9]
 8016ccc:	edc3 7a00 	vstr	s15, [r3]
 8016cd0:	ee17 0a90 	vmov	r0, s15
 8016cd4:	edcd 7a01 	vstr	s15, [sp, #4]
 8016cd8:	f7e9 fbb6 	bl	8000448 <__aeabi_f2d>
 8016cdc:	a3b6      	add	r3, pc, #728	; (adr r3, 8016fb8 <m_kalman_3gyro.isra.6.constprop.36+0x1618>)
 8016cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ce2:	f7e9 fe99 	bl	8000a18 <__aeabi_dcmpgt>
 8016ce6:	2800      	cmp	r0, #0
 8016ce8:	f001 82ae 	beq.w	8018248 <m_kalman_3gyro.isra.6.constprop.36+0x28a8>
 8016cec:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8016fc4 <m_kalman_3gyro.isra.6.constprop.36+0x1624>
 8016cf0:	eddd 7a01 	vldr	s15, [sp, #4]
 8016cf4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016cf8:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8016cfc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016d00:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8016d04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d0c:	f301 86af 	bgt.w	8018a6e <m_kalman_3gyro.isra.6.constprop.36+0x30ce>
 8016d10:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016d14:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016d18:	ee17 0a90 	vmov	r0, s15
 8016d1c:	f7e9 fb94 	bl	8000448 <__aeabi_f2d>
 8016d20:	4604      	mov	r4, r0
 8016d22:	460d      	mov	r5, r1
 8016d24:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8016d28:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8016d2c:	eef0 7ae7 	vabs.f32	s15, s15
 8016d30:	ee17 0a90 	vmov	r0, s15
 8016d34:	f7e9 fb88 	bl	8000448 <__aeabi_f2d>
 8016d38:	2200      	movs	r2, #0
 8016d3a:	4ba3      	ldr	r3, [pc, #652]	; (8016fc8 <m_kalman_3gyro.isra.6.constprop.36+0x1628>)
 8016d3c:	f7e9 fa24 	bl	8000188 <__aeabi_dsub>
 8016d40:	4622      	mov	r2, r4
 8016d42:	462b      	mov	r3, r5
 8016d44:	4606      	mov	r6, r0
 8016d46:	460f      	mov	r7, r1
 8016d48:	f7e9 fe5c 	bl	8000a04 <__aeabi_dcmpge>
 8016d4c:	b908      	cbnz	r0, 8016d52 <m_kalman_3gyro.isra.6.constprop.36+0x13b2>
 8016d4e:	4626      	mov	r6, r4
 8016d50:	462f      	mov	r7, r5
 8016d52:	4630      	mov	r0, r6
 8016d54:	4639      	mov	r1, r7
 8016d56:	f7e9 fec7 	bl	8000ae8 <__aeabi_d2f>
 8016d5a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016d5c:	6018      	str	r0, [r3, #0]
 8016d5e:	f89a 3031 	ldrb.w	r3, [sl, #49]	; 0x31
 8016d62:	f10a 0040 	add.w	r0, sl, #64	; 0x40
 8016d66:	9001      	str	r0, [sp, #4]
 8016d68:	b17b      	cbz	r3, 8016d8a <m_kalman_3gyro.isra.6.constprop.36+0x13ea>
 8016d6a:	f89a 3030 	ldrb.w	r3, [sl, #48]	; 0x30
 8016d6e:	b963      	cbnz	r3, 8016d8a <m_kalman_3gyro.isra.6.constprop.36+0x13ea>
 8016d70:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016d72:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8016d76:	ee6f 7aa7 	vmul.f32	s15, s31, s15
 8016d7a:	ed93 7a00 	vldr	s14, [r3]
 8016d7e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d86:	f101 879b 	bmi.w	8018cc0 <m_kalman_3gyro.isra.6.constprop.36+0x3320>
 8016d8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016d8c:	edd3 7a00 	vldr	s15, [r3]
 8016d90:	eef5 7a40 	vcmp.f32	s15, #0.0
 8016d94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d98:	f04f 0400 	mov.w	r4, #0
 8016d9c:	d10f      	bne.n	8016dbe <m_kalman_3gyro.isra.6.constprop.36+0x141e>
 8016d9e:	edd3 7a01 	vldr	s15, [r3, #4]
 8016da2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8016da6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016daa:	4619      	mov	r1, r3
 8016dac:	d107      	bne.n	8016dbe <m_kalman_3gyro.isra.6.constprop.36+0x141e>
 8016dae:	edd3 7a02 	vldr	s15, [r3, #8]
 8016db2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8016db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016dba:	f001 872a 	beq.w	8018c12 <m_kalman_3gyro.isra.6.constprop.36+0x3272>
 8016dbe:	f50d 61d6 	add.w	r1, sp, #1712	; 0x6b0
 8016dc2:	2200      	movs	r2, #0
 8016dc4:	2300      	movs	r3, #0
 8016dc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016dca:	f7e9 fdfd 	bl	80009c8 <__aeabi_dcmpeq>
 8016dce:	2800      	cmp	r0, #0
 8016dd0:	d144      	bne.n	8016e5c <m_kalman_3gyro.isra.6.constprop.36+0x14bc>
 8016dd2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016dd4:	ee7f faaf 	vadd.f32	s31, s31, s31
 8016dd8:	edd3 7a00 	vldr	s15, [r3]
 8016ddc:	eef4 7aef 	vcmpe.f32	s15, s31
 8016de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016de4:	d53a      	bpl.n	8016e5c <m_kalman_3gyro.isra.6.constprop.36+0x14bc>
 8016de6:	eddd 7a23 	vldr	s15, [sp, #140]	; 0x8c
 8016dea:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016dec:	edca 7a10 	vstr	s15, [sl, #64]	; 0x40
 8016df0:	eddd 7a24 	vldr	s15, [sp, #144]	; 0x90
 8016df4:	ed8a ba12 	vstr	s22, [sl, #72]	; 0x48
 8016df8:	edca 7a13 	vstr	s15, [sl, #76]	; 0x4c
 8016dfc:	eddd 7a25 	vldr	s15, [sp, #148]	; 0x94
 8016e00:	edca aa15 	vstr	s21, [sl, #84]	; 0x54
 8016e04:	ed8a aa18 	vstr	s20, [sl, #96]	; 0x60
 8016e08:	ed8a ca11 	vstr	s24, [sl, #68]	; 0x44
 8016e0c:	edca ba14 	vstr	s23, [sl, #80]	; 0x50
 8016e10:	edca 9a17 	vstr	s19, [sl, #92]	; 0x5c
 8016e14:	edca 7a16 	vstr	s15, [sl, #88]	; 0x58
 8016e18:	9801      	ldr	r0, [sp, #4]
 8016e1a:	f7fa fc5d 	bl	80116d8 <m_dcm2q_eml>
 8016e1e:	f8dd 16dc 	ldr.w	r1, [sp, #1756]	; 0x6dc
 8016e22:	2300      	movs	r3, #0
 8016e24:	2201      	movs	r2, #1
 8016e26:	700a      	strb	r2, [r1, #0]
 8016e28:	ed8a da2b 	vstr	s26, [sl, #172]	; 0xac
 8016e2c:	edca 8a2d 	vstr	s17, [sl, #180]	; 0xb4
 8016e30:	f8ca 30b8 	str.w	r3, [sl, #184]	; 0xb8
 8016e34:	f8ca 30bc 	str.w	r3, [sl, #188]	; 0xbc
 8016e38:	f8ca 30c0 	str.w	r3, [sl, #192]	; 0xc0
 8016e3c:	f8ca 30dc 	str.w	r3, [sl, #220]	; 0xdc
 8016e40:	f8ca 30e0 	str.w	r3, [sl, #224]	; 0xe0
 8016e44:	f8ca 30e4 	str.w	r3, [sl, #228]	; 0xe4
 8016e48:	f8ca 3100 	str.w	r3, [sl, #256]	; 0x100
 8016e4c:	f8ca 3104 	str.w	r3, [sl, #260]	; 0x104
 8016e50:	f8ca 3108 	str.w	r3, [sl, #264]	; 0x108
 8016e54:	f8ca 31a8 	str.w	r3, [sl, #424]	; 0x1a8
 8016e58:	f8ca 31f8 	str.w	r3, [sl, #504]	; 0x1f8
 8016e5c:	2300      	movs	r3, #0
 8016e5e:	f8ca 3094 	str.w	r3, [sl, #148]	; 0x94
 8016e62:	f8ca 3098 	str.w	r3, [sl, #152]	; 0x98
 8016e66:	f8ca 309c 	str.w	r3, [sl, #156]	; 0x9c
 8016e6a:	9901      	ldr	r1, [sp, #4]
 8016e6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016e6e:	f7fa fab3 	bl	80113d8 <m_q2dcm_eml>
 8016e72:	edda 9a2b 	vldr	s19, [sl, #172]	; 0xac
 8016e76:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8016e7a:	eee9 7ae9 	vfms.f32	s15, s19, s19
 8016e7e:	ee17 0a90 	vmov	r0, s15
 8016e82:	f7e9 fae1 	bl	8000448 <__aeabi_f2d>
 8016e86:	f00a f987 	bl	8021198 <sqrt>
 8016e8a:	f7e9 fe2d 	bl	8000ae8 <__aeabi_d2f>
 8016e8e:	ed9a 3a12 	vldr	s6, [sl, #72]	; 0x48
 8016e92:	edda 7a10 	vldr	s15, [sl, #64]	; 0x40
 8016e96:	edda 5a15 	vldr	s11, [sl, #84]	; 0x54
 8016e9a:	edda 2a18 	vldr	s5, [sl, #96]	; 0x60
 8016e9e:	edda 4a13 	vldr	s9, [sl, #76]	; 0x4c
 8016ea2:	ed9a 5a16 	vldr	s10, [sl, #88]	; 0x58
 8016ea6:	eddd 3a57 	vldr	s7, [sp, #348]	; 0x15c
 8016eaa:	ed9d 4a58 	vldr	s8, [sp, #352]	; 0x160
 8016eae:	ed8a da22 	vstr	s26, [sl, #136]	; 0x88
 8016eb2:	ee06 0a10 	vmov	s12, r0
 8016eb6:	ee29 7a83 	vmul.f32	s14, s19, s6
 8016eba:	ee69 6aa5 	vmul.f32	s13, s19, s11
 8016ebe:	eea6 7a27 	vfma.f32	s14, s12, s15
 8016ec2:	ee69 7aa2 	vmul.f32	s15, s19, s5
 8016ec6:	eee6 6a24 	vfma.f32	s13, s12, s9
 8016eca:	eee6 7a05 	vfma.f32	s15, s12, s10
 8016ece:	ee73 3ac7 	vsub.f32	s7, s7, s14
 8016ed2:	ed9d 5a5b 	vldr	s10, [sp, #364]	; 0x16c
 8016ed6:	eddd 4a59 	vldr	s9, [sp, #356]	; 0x164
 8016eda:	ed8a 7a82 	vstr	s14, [sl, #520]	; 0x208
 8016ede:	ee35 5a65 	vsub.f32	s10, s10, s11
 8016ee2:	ed9d 6a5a 	vldr	s12, [sp, #360]	; 0x168
 8016ee6:	eddd 5a5c 	vldr	s11, [sp, #368]	; 0x170
 8016eea:	edca 3a19 	vstr	s7, [sl, #100]	; 0x64
 8016eee:	ed9a 7a2c 	vldr	s14, [sl, #176]	; 0xb0
 8016ef2:	eddf 3a36 	vldr	s7, [pc, #216]	; 8016fcc <m_kalman_3gyro.isra.6.constprop.36+0x162c>
 8016ef6:	ed8a 9a23 	vstr	s18, [sl, #140]	; 0x8c
 8016efa:	ee34 4a66 	vsub.f32	s8, s8, s13
 8016efe:	ee74 4ae7 	vsub.f32	s9, s9, s15
 8016f02:	ee75 5ae2 	vsub.f32	s11, s11, s5
 8016f06:	ee36 6a43 	vsub.f32	s12, s12, s6
 8016f0a:	eeb4 7ae3 	vcmpe.f32	s14, s7
 8016f0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f12:	edca 8a24 	vstr	s17, [sl, #144]	; 0x90
 8016f16:	edca 6a83 	vstr	s13, [sl, #524]	; 0x20c
 8016f1a:	ed8a 4a1a 	vstr	s8, [sl, #104]	; 0x68
 8016f1e:	edca 7a84 	vstr	s15, [sl, #528]	; 0x210
 8016f22:	edca 4a1b 	vstr	s9, [sl, #108]	; 0x6c
 8016f26:	ed8a 5a1d 	vstr	s10, [sl, #116]	; 0x74
 8016f2a:	edca 5a1e 	vstr	s11, [sl, #120]	; 0x78
 8016f2e:	ed8a 6a1c 	vstr	s12, [sl, #112]	; 0x70
 8016f32:	f141 8147 	bpl.w	80181c4 <m_kalman_3gyro.isra.6.constprop.36+0x2824>
 8016f36:	eddf 7a26 	vldr	s15, [pc, #152]	; 8016fd0 <m_kalman_3gyro.isra.6.constprop.36+0x1630>
 8016f3a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016f3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f42:	f341 813f 	ble.w	80181c4 <m_kalman_3gyro.isra.6.constprop.36+0x2824>
 8016f46:	ee79 7a47 	vsub.f32	s15, s18, s14
 8016f4a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016f4c:	eef0 7ae7 	vabs.f32	s15, s15
 8016f50:	edc3 7a00 	vstr	s15, [r3]
 8016f54:	ee7c 7aa7 	vadd.f32	s15, s25, s15
 8016f58:	ed9d 7a98 	vldr	s14, [sp, #608]	; 0x260
 8016f5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016f5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016f62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f66:	edc3 7a00 	vstr	s15, [r3]
 8016f6a:	f341 8167 	ble.w	801823c <m_kalman_3gyro.isra.6.constprop.36+0x289c>
 8016f6e:	ed9d 7aa1 	vldr	s14, [sp, #644]	; 0x284
 8016f72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016f76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f7a:	f102 813d 	bmi.w	80191f8 <m_kalman_3gyro.isra.6.constprop.36+0x3858>
 8016f7e:	eddd 8aab 	vldr	s17, [sp, #684]	; 0x2ac
 8016f82:	ed9d 9ab5 	vldr	s18, [sp, #724]	; 0x2d4
 8016f86:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016f88:	ed9d 7a5d 	vldr	s14, [sp, #372]	; 0x174
 8016f8c:	edd3 7a00 	vldr	s15, [r3]
 8016f90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016f94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f98:	f341 856d 	ble.w	8018a76 <m_kalman_3gyro.isra.6.constprop.36+0x30d6>
 8016f9c:	ed9d 7a63 	vldr	s14, [sp, #396]	; 0x18c
 8016fa0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016fa8:	f142 8150 	bpl.w	801924c <m_kalman_3gyro.isra.6.constprop.36+0x38ac>
 8016fac:	2007      	movs	r0, #7
 8016fae:	2402      	movs	r4, #2
 8016fb0:	2101      	movs	r1, #1
 8016fb2:	f06f 4540 	mvn.w	r5, #3221225472	; 0xc0000000
 8016fb6:	e021      	b.n	8016ffc <m_kalman_3gyro.isra.6.constprop.36+0x165c>
 8016fb8:	9999999a 	.word	0x9999999a
 8016fbc:	3fb99999 	.word	0x3fb99999
 8016fc0:	20005364 	.word	0x20005364
 8016fc4:	3dcccccd 	.word	0x3dcccccd
 8016fc8:	3fe00000 	.word	0x3fe00000
 8016fcc:	3f99999a 	.word	0x3f99999a
 8016fd0:	3f4ccccd 	.word	0x3f4ccccd
 8016fd4:	20005374 	.word	0x20005374
 8016fd8:	00000000 	.word	0x00000000
 8016fdc:	3d088889 	.word	0x3d088889
 8016fe0:	42480000 	.word	0x42480000
 8016fe4:	3c23d70a 	.word	0x3c23d70a
 8016fe8:	ed93 7a00 	vldr	s14, [r3]
 8016fec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ff4:	bfb8      	it	lt
 8016ff6:	4610      	movlt	r0, r2
 8016ff8:	f282 80fa 	bge.w	80191f0 <m_kalman_3gyro.isra.6.constprop.36+0x3850>
 8016ffc:	1842      	adds	r2, r0, r1
 8016ffe:	0852      	lsrs	r2, r2, #1
 8017000:	1953      	adds	r3, r2, r5
 8017002:	f50d 66c6 	add.w	r6, sp, #1584	; 0x630
 8017006:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801700a:	42a0      	cmp	r0, r4
 801700c:	f2a3 43bc 	subw	r3, r3, #1212	; 0x4bc
 8017010:	d8ea      	bhi.n	8016fe8 <m_kalman_3gyro.isra.6.constprop.36+0x1648>
 8017012:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 8017016:	3b01      	subs	r3, #1
 8017018:	009b      	lsls	r3, r3, #2
 801701a:	0089      	lsls	r1, r1, #2
 801701c:	aa5d      	add	r2, sp, #372	; 0x174
 801701e:	18d0      	adds	r0, r2, r3
 8017020:	440a      	add	r2, r1
 8017022:	edd0 6a00 	vldr	s13, [r0]
 8017026:	ed92 7a00 	vldr	s14, [r2]
 801702a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801702e:	ee37 7a66 	vsub.f32	s14, s14, s13
 8017032:	aa64      	add	r2, sp, #400	; 0x190
 8017034:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8017038:	4413      	add	r3, r2
 801703a:	4411      	add	r1, r2
 801703c:	edd3 9a00 	vldr	s19, [r3]
 8017040:	edd1 7a00 	vldr	s15, [r1]
 8017044:	ee77 7ae9 	vsub.f32	s15, s15, s19
 8017048:	eee6 9aa7 	vfma.f32	s19, s13, s15
 801704c:	9d19      	ldr	r5, [sp, #100]	; 0x64
 801704e:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8017050:	ed5f 7a1f 	vldr	s15, [pc, #-124]	; 8016fd8 <m_kalman_3gyro.isra.6.constprop.36+0x1638>
 8017054:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8017056:	edca 7af5 	vstr	s15, [sl, #980]	; 0x3d4
 801705a:	462e      	mov	r6, r5
 801705c:	eef0 6a67 	vmov.f32	s13, s15
 8017060:	eeb0 6a67 	vmov.f32	s12, s15
 8017064:	eef0 5a67 	vmov.f32	s11, s15
 8017068:	edca 7af6 	vstr	s15, [sl, #984]	; 0x3d8
 801706c:	edca 7af7 	vstr	s15, [sl, #988]	; 0x3dc
 8017070:	ed95 7a06 	vldr	s14, [r5, #24]
 8017074:	edd3 7a00 	vldr	s15, [r3]
 8017078:	ee77 7a67 	vsub.f32	s15, s14, s15
 801707c:	3524      	adds	r5, #36	; 0x24
 801707e:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8017082:	330c      	adds	r3, #12
 8017084:	edca 5af5 	vstr	s11, [sl, #980]	; 0x3d4
 8017088:	ed15 7a02 	vldr	s14, [r5, #-8]
 801708c:	ed53 7a02 	vldr	s15, [r3, #-8]
 8017090:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017094:	ee36 6a27 	vadd.f32	s12, s12, s15
 8017098:	ed8a 6af6 	vstr	s12, [sl, #984]	; 0x3d8
 801709c:	ed15 7a01 	vldr	s14, [r5, #-4]
 80170a0:	ed53 7a01 	vldr	s15, [r3, #-4]
 80170a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80170a8:	42aa      	cmp	r2, r5
 80170aa:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80170ae:	edca 6af7 	vstr	s13, [sl, #988]	; 0x3dc
 80170b2:	d1dd      	bne.n	8017070 <m_kalman_3gyro.isra.6.constprop.36+0x16d0>
 80170b4:	ed5f 7a37 	vldr	s15, [pc, #-220]	; 8016fdc <m_kalman_3gyro.isra.6.constprop.36+0x163c>
 80170b8:	9811      	ldr	r0, [sp, #68]	; 0x44
 80170ba:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80170be:	ee26 6a27 	vmul.f32	s12, s12, s15
 80170c2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80170c6:	edca 5af5 	vstr	s11, [sl, #980]	; 0x3d4
 80170ca:	ed8a 6af6 	vstr	s12, [sl, #984]	; 0x3d8
 80170ce:	edca 6af7 	vstr	s13, [sl, #988]	; 0x3dc
 80170d2:	f50a 6305 	add.w	r3, sl, #2128	; 0x850
 80170d6:	681a      	ldr	r2, [r3, #0]
 80170d8:	6859      	ldr	r1, [r3, #4]
 80170da:	625a      	str	r2, [r3, #36]	; 0x24
 80170dc:	689a      	ldr	r2, [r3, #8]
 80170de:	6299      	str	r1, [r3, #40]	; 0x28
 80170e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80170e2:	68d9      	ldr	r1, [r3, #12]
 80170e4:	691a      	ldr	r2, [r3, #16]
 80170e6:	6319      	str	r1, [r3, #48]	; 0x30
 80170e8:	635a      	str	r2, [r3, #52]	; 0x34
 80170ea:	6959      	ldr	r1, [r3, #20]
 80170ec:	699a      	ldr	r2, [r3, #24]
 80170ee:	6399      	str	r1, [r3, #56]	; 0x38
 80170f0:	63da      	str	r2, [r3, #60]	; 0x3c
 80170f2:	69d9      	ldr	r1, [r3, #28]
 80170f4:	6a1a      	ldr	r2, [r3, #32]
 80170f6:	6419      	str	r1, [r3, #64]	; 0x40
 80170f8:	645a      	str	r2, [r3, #68]	; 0x44
 80170fa:	3b24      	subs	r3, #36	; 0x24
 80170fc:	4298      	cmp	r0, r3
 80170fe:	d1ea      	bne.n	80170d6 <m_kalman_3gyro.isra.6.constprop.36+0x1736>
 8017100:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8017102:	9919      	ldr	r1, [sp, #100]	; 0x64
 8017104:	6813      	ldr	r3, [r2, #0]
 8017106:	600b      	str	r3, [r1, #0]
 8017108:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801710a:	982b      	ldr	r0, [sp, #172]	; 0xac
 801710c:	680b      	ldr	r3, [r1, #0]
 801710e:	6003      	str	r3, [r0, #0]
 8017110:	9808      	ldr	r0, [sp, #32]
 8017112:	9c20      	ldr	r4, [sp, #128]	; 0x80
 8017114:	6803      	ldr	r3, [r0, #0]
 8017116:	6023      	str	r3, [r4, #0]
 8017118:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 801711a:	6853      	ldr	r3, [r2, #4]
 801711c:	6023      	str	r3, [r4, #0]
 801711e:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8017120:	684b      	ldr	r3, [r1, #4]
 8017122:	6023      	str	r3, [r4, #0]
 8017124:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8017126:	6843      	ldr	r3, [r0, #4]
 8017128:	6023      	str	r3, [r4, #0]
 801712a:	6893      	ldr	r3, [r2, #8]
 801712c:	9a3b      	ldr	r2, [sp, #236]	; 0xec
 801712e:	6013      	str	r3, [r2, #0]
 8017130:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 8017132:	688b      	ldr	r3, [r1, #8]
 8017134:	6013      	str	r3, [r2, #0]
 8017136:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8017138:	6883      	ldr	r3, [r0, #8]
 801713a:	6013      	str	r3, [r2, #0]
 801713c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801713e:	2b02      	cmp	r3, #2
 8017140:	f001 808c 	beq.w	801825c <m_kalman_3gyro.isra.6.constprop.36+0x28bc>
 8017144:	eeb4 eaed 	vcmpe.f32	s28, s27
 8017148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801714c:	f301 815e 	bgt.w	801840c <m_kalman_3gyro.isra.6.constprop.36+0x2a6c>
 8017150:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017152:	2b00      	cmp	r3, #0
 8017154:	f041 8634 	bne.w	8018dc0 <m_kalman_3gyro.isra.6.constprop.36+0x3420>
 8017158:	f8da 20a4 	ldr.w	r2, [sl, #164]	; 0xa4
 801715c:	f8da 30a8 	ldr.w	r3, [sl, #168]	; 0xa8
 8017160:	f8ca 2080 	str.w	r2, [sl, #128]	; 0x80
 8017164:	f89a 2030 	ldrb.w	r2, [sl, #48]	; 0x30
 8017168:	f8da 10a0 	ldr.w	r1, [sl, #160]	; 0xa0
 801716c:	f8ca 3084 	str.w	r3, [sl, #132]	; 0x84
 8017170:	2300      	movs	r3, #0
 8017172:	f8ca 107c 	str.w	r1, [sl, #124]	; 0x7c
 8017176:	f8aa 3202 	strh.w	r3, [sl, #514]	; 0x202
 801717a:	f88a 3204 	strb.w	r3, [sl, #516]	; 0x204
 801717e:	f8ca 345c 	str.w	r3, [sl, #1116]	; 0x45c
 8017182:	2a00      	cmp	r2, #0
 8017184:	f001 8050 	beq.w	8018228 <m_kalman_3gyro.isra.6.constprop.36+0x2888>
 8017188:	f88a 3030 	strb.w	r3, [sl, #48]	; 0x30
 801718c:	ac86      	add	r4, sp, #536	; 0x218
 801718e:	ed5f 7a6c 	vldr	s15, [pc, #-432]	; 8016fe0 <m_kalman_3gyro.isra.6.constprop.36+0x1640>
 8017192:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8017196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801719a:	f2c1 801e 	blt.w	80181da <m_kalman_3gyro.isra.6.constprop.36+0x283a>
 801719e:	2300      	movs	r3, #0
 80171a0:	f8aa 3202 	strh.w	r3, [sl, #514]	; 0x202
 80171a4:	f88a 3204 	strb.w	r3, [sl, #516]	; 0x204
 80171a8:	f8ca 3458 	str.w	r3, [sl, #1112]	; 0x458
 80171ac:	f8dd 3698 	ldr.w	r3, [sp, #1688]	; 0x698
 80171b0:	990e      	ldr	r1, [sp, #56]	; 0x38
 80171b2:	ed93 5a08 	vldr	s10, [r3, #32]
 80171b6:	edd3 3a06 	vldr	s7, [r3, #24]
 80171ba:	ed93 4a07 	vldr	s8, [r3, #28]
 80171be:	edd3 4a00 	vldr	s9, [r3]
 80171c2:	edd3 5a01 	vldr	s11, [r3, #4]
 80171c6:	ed93 2a02 	vldr	s4, [r3, #8]
 80171ca:	edd3 6a03 	vldr	s13, [r3, #12]
 80171ce:	ed93 7a04 	vldr	s14, [r3, #16]
 80171d2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80171d6:	edd3 2a05 	vldr	s5, [r3, #20]
 80171da:	f8dd 2698 	ldr.w	r2, [sp, #1688]	; 0x698
 80171de:	ed1f 3a7f 	vldr	s6, [pc, #-508]	; 8016fe4 <m_kalman_3gyro.isra.6.constprop.36+0x1644>
 80171e2:	ee24 4a09 	vmul.f32	s8, s8, s18
 80171e6:	ee63 3a89 	vmul.f32	s7, s7, s18
 80171ea:	ee25 9a09 	vmul.f32	s18, s10, s18
 80171ee:	ed83 4a07 	vstr	s8, [r3, #28]
 80171f2:	edc3 3a06 	vstr	s7, [r3, #24]
 80171f6:	ed83 9a08 	vstr	s18, [r3, #32]
 80171fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80171fc:	ed91 6a00 	vldr	s12, [r1]
 8017200:	ed93 4a00 	vldr	s8, [r3]
 8017204:	ee24 4a06 	vmul.f32	s8, s8, s12
 8017208:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 801720c:	ee64 4a84 	vmul.f32	s9, s9, s8
 8017210:	ee38 5a85 	vadd.f32	s10, s17, s10
 8017214:	edc2 4a00 	vstr	s9, [r2]
 8017218:	edd3 4a00 	vldr	s9, [r3]
 801721c:	ed91 6a00 	vldr	s12, [r1]
 8017220:	ee64 4a86 	vmul.f32	s9, s9, s12
 8017224:	460a      	mov	r2, r1
 8017226:	ee65 5aa4 	vmul.f32	s11, s11, s9
 801722a:	f8dd 1698 	ldr.w	r1, [sp, #1688]	; 0x698
 801722e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8017232:	edc1 5a01 	vstr	s11, [r1, #4]
 8017236:	edd3 5a00 	vldr	s11, [r3]
 801723a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801723c:	eec6 4a05 	vdiv.f32	s9, s12, s10
 8017240:	ed92 6a00 	vldr	s12, [r2]
 8017244:	ee26 6a25 	vmul.f32	s12, s12, s11
 8017248:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801724c:	ee22 6a06 	vmul.f32	s12, s4, s12
 8017250:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8017254:	ed81 6a02 	vstr	s12, [r1, #8]
 8017258:	ed93 6a00 	vldr	s12, [r3]
 801725c:	ee66 6a86 	vmul.f32	s13, s13, s12
 8017260:	eef4 4ac3 	vcmpe.f32	s9, s6
 8017264:	edc1 6a03 	vstr	s13, [r1, #12]
 8017268:	edd3 6a00 	vldr	s13, [r3]
 801726c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8017270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017274:	ed81 7a04 	vstr	s14, [r1, #16]
 8017278:	ed93 7a00 	vldr	s14, [r3]
 801727c:	edc1 7a09 	vstr	s15, [r1, #36]	; 0x24
 8017280:	ee62 7a87 	vmul.f32	s15, s5, s14
 8017284:	f8dd 369c 	ldr.w	r3, [sp, #1692]	; 0x69c
 8017288:	edc1 7a05 	vstr	s15, [r1, #20]
 801728c:	edd3 7a06 	vldr	s15, [r3, #24]
 8017290:	bfb8      	it	lt
 8017292:	eef0 4a43 	vmovlt.f32	s9, s6
 8017296:	ee67 7aa4 	vmul.f32	s15, s15, s9
 801729a:	edc3 7a06 	vstr	s15, [r3, #24]
 801729e:	edd1 7a0a 	vldr	s15, [r1, #40]	; 0x28
 80172a2:	f8dd 369c 	ldr.w	r3, [sp, #1692]	; 0x69c
 80172a6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80172aa:	ee67 7aa8 	vmul.f32	s15, s15, s17
 80172ae:	edc1 7a0a 	vstr	s15, [r1, #40]	; 0x28
 80172b2:	edd3 7a07 	vldr	s15, [r3, #28]
 80172b6:	ee67 7aa4 	vmul.f32	s15, s15, s9
 80172ba:	edc3 7a07 	vstr	s15, [r3, #28]
 80172be:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80172c0:	edd1 7a0b 	vldr	s15, [r1, #44]	; 0x2c
 80172c4:	ed93 7a00 	vldr	s14, [r3]
 80172c8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80172ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80172ce:	edc1 7a0b 	vstr	s15, [r1, #44]	; 0x2c
 80172d2:	b3cb      	cbz	r3, 8017348 <m_kalman_3gyro.isra.6.constprop.36+0x19a8>
 80172d4:	edd1 7a03 	vldr	s15, [r1, #12]
 80172d8:	f8dd 369c 	ldr.w	r3, [sp, #1692]	; 0x69c
 80172dc:	ee67 7aa8 	vmul.f32	s15, s15, s17
 80172e0:	edc1 7a03 	vstr	s15, [r1, #12]
 80172e4:	edd3 7a00 	vldr	s15, [r3]
 80172e8:	ee67 7aa4 	vmul.f32	s15, s15, s9
 80172ec:	edc3 7a00 	vstr	s15, [r3]
 80172f0:	edd1 7a04 	vldr	s15, [r1, #16]
 80172f4:	f8dd 369c 	ldr.w	r3, [sp, #1692]	; 0x69c
 80172f8:	ee67 7aa8 	vmul.f32	s15, s15, s17
 80172fc:	edc1 7a04 	vstr	s15, [r1, #16]
 8017300:	edd3 7a01 	vldr	s15, [r3, #4]
 8017304:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8017308:	edc3 7a01 	vstr	s15, [r3, #4]
 801730c:	edd1 7a05 	vldr	s15, [r1, #20]
 8017310:	f8dd 369c 	ldr.w	r3, [sp, #1692]	; 0x69c
 8017314:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8017318:	edc1 7a05 	vstr	s15, [r1, #20]
 801731c:	edd3 7a02 	vldr	s15, [r3, #8]
 8017320:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8017324:	edc3 7a02 	vstr	s15, [r3, #8]
 8017328:	edd1 7a0a 	vldr	s15, [r1, #40]	; 0x28
 801732c:	f8dd 369c 	ldr.w	r3, [sp, #1692]	; 0x69c
 8017330:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8017334:	ee67 8aa8 	vmul.f32	s17, s15, s17
 8017338:	edc1 8a0a 	vstr	s17, [r1, #40]	; 0x28
 801733c:	edd3 7a07 	vldr	s15, [r3, #28]
 8017340:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8017344:	edc3 7a07 	vstr	s15, [r3, #28]
 8017348:	f8dd 369c 	ldr.w	r3, [sp, #1692]	; 0x69c
 801734c:	ed9a 3a2e 	vldr	s6, [sl, #184]	; 0xb8
 8017350:	edd3 2a00 	vldr	s5, [r3]
 8017354:	f8dd 269c 	ldr.w	r2, [sp, #1692]	; 0x69c
 8017358:	edda 3a38 	vldr	s7, [sl, #224]	; 0xe0
 801735c:	ed9a 4a42 	vldr	s8, [sl, #264]	; 0x108
 8017360:	edda 4a4c 	vldr	s9, [sl, #304]	; 0x130
 8017364:	ed9a 5a56 	vldr	s10, [sl, #344]	; 0x158
 8017368:	edda 5a60 	vldr	s11, [sl, #384]	; 0x180
 801736c:	ed9a 6a6a 	vldr	s12, [sl, #424]	; 0x1a8
 8017370:	edda 6a74 	vldr	s13, [sl, #464]	; 0x1d0
 8017374:	ed9d 2a59 	vldr	s4, [sp, #356]	; 0x164
 8017378:	eddd 7a58 	vldr	s15, [sp, #352]	; 0x160
 801737c:	ed9a 7a7e 	vldr	s14, [sl, #504]	; 0x1f8
 8017380:	edc4 7a06 	vstr	s15, [r4, #24]
 8017384:	eea2 3aa2 	vfma.f32	s6, s5, s5
 8017388:	2300      	movs	r3, #0
 801738a:	6023      	str	r3, [r4, #0]
 801738c:	eef1 2a42 	vneg.f32	s5, s4
 8017390:	ed8a 3a2e 	vstr	s6, [sl, #184]	; 0xb8
 8017394:	ed92 3a01 	vldr	s6, [r2, #4]
 8017398:	edc4 2a03 	vstr	s5, [r4, #12]
 801739c:	eee3 3a03 	vfma.f32	s7, s6, s6
 80173a0:	eef1 7a67 	vneg.f32	s15, s15
 80173a4:	edca 3a38 	vstr	s7, [sl, #224]	; 0xe0
 80173a8:	edd2 3a02 	vldr	s7, [r2, #8]
 80173ac:	eea3 4aa3 	vfma.f32	s8, s7, s7
 80173b0:	ed8a 4a42 	vstr	s8, [sl, #264]	; 0x108
 80173b4:	ed92 4a03 	vldr	s8, [r2, #12]
 80173b8:	eee4 4a04 	vfma.f32	s9, s8, s8
 80173bc:	edca 4a4c 	vstr	s9, [sl, #304]	; 0x130
 80173c0:	edd2 4a04 	vldr	s9, [r2, #16]
 80173c4:	eea4 5aa4 	vfma.f32	s10, s9, s9
 80173c8:	ed8a 5a56 	vstr	s10, [sl, #344]	; 0x158
 80173cc:	ed92 5a05 	vldr	s10, [r2, #20]
 80173d0:	eee5 5a05 	vfma.f32	s11, s10, s10
 80173d4:	edca 5a60 	vstr	s11, [sl, #384]	; 0x180
 80173d8:	edd2 5a06 	vldr	s11, [r2, #24]
 80173dc:	eea5 6aa5 	vfma.f32	s12, s11, s11
 80173e0:	ed8a 6a6a 	vstr	s12, [sl, #424]	; 0x1a8
 80173e4:	ed92 6a07 	vldr	s12, [r2, #28]
 80173e8:	eee6 6a06 	vfma.f32	s13, s12, s12
 80173ec:	edca 6a74 	vstr	s13, [sl, #464]	; 0x1d0
 80173f0:	edd2 6a08 	vldr	s13, [r2, #32]
 80173f4:	f8dd 26a8 	ldr.w	r2, [sp, #1704]	; 0x6a8
 80173f8:	eddd 5a57 	vldr	s11, [sp, #348]	; 0x15c
 80173fc:	ed9d 6a5c 	vldr	s12, [sp, #368]	; 0x170
 8017400:	edc4 7a02 	vstr	s15, [r4, #8]
 8017404:	eea6 7aa6 	vfma.f32	s14, s13, s13
 8017408:	6123      	str	r3, [r4, #16]
 801740a:	6223      	str	r3, [r4, #32]
 801740c:	eddd 6a5b 	vldr	s13, [sp, #364]	; 0x16c
 8017410:	ed8a 7a7e 	vstr	s14, [sl, #504]	; 0x1f8
 8017414:	7812      	ldrb	r2, [r2, #0]
 8017416:	f88a 21fc 	strb.w	r2, [sl, #508]	; 0x1fc
 801741a:	f8dd 26a8 	ldr.w	r2, [sp, #1704]	; 0x6a8
 801741e:	ed9d 7a5a 	vldr	s14, [sp, #360]	; 0x168
 8017422:	7812      	ldrb	r2, [r2, #0]
 8017424:	f88a 21fd 	strb.w	r2, [sl, #509]	; 0x1fd
 8017428:	f8dd 26a8 	ldr.w	r2, [sp, #1704]	; 0x6a8
 801742c:	938f      	str	r3, [sp, #572]	; 0x23c
 801742e:	7812      	ldrb	r2, [r2, #0]
 8017430:	f88a 21fe 	strb.w	r2, [sl, #510]	; 0x1fe
 8017434:	f8dd 26a8 	ldr.w	r2, [sp, #1704]	; 0x6a8
 8017438:	9393      	str	r3, [sp, #588]	; 0x24c
 801743a:	7852      	ldrb	r2, [r2, #1]
 801743c:	f88a 21ff 	strb.w	r2, [sl, #511]	; 0x1ff
 8017440:	f8dd 26a8 	ldr.w	r2, [sp, #1704]	; 0x6a8
 8017444:	9397      	str	r3, [sp, #604]	; 0x25c
 8017446:	7852      	ldrb	r2, [r2, #1]
 8017448:	f88a 2200 	strb.w	r2, [sl, #512]	; 0x200
 801744c:	f8dd 26a8 	ldr.w	r2, [sp, #1704]	; 0x6a8
 8017450:	ed84 2a01 	vstr	s4, [r4, #4]
 8017454:	7852      	ldrb	r2, [r2, #1]
 8017456:	f88a 2201 	strb.w	r2, [sl, #513]	; 0x201
 801745a:	eeb1 4a65 	vneg.f32	s8, s11
 801745e:	edc4 5a05 	vstr	s11, [r4, #20]
 8017462:	ed84 4a07 	vstr	s8, [r4, #28]
 8017466:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8017468:	ed8d 6a90 	vstr	s12, [sp, #576]	; 0x240
 801746c:	eef1 4a46 	vneg.f32	s9, s12
 8017470:	eeb1 5a66 	vneg.f32	s10, s13
 8017474:	eef1 7a47 	vneg.f32	s15, s14
 8017478:	edcd 4a92 	vstr	s9, [sp, #584]	; 0x248
 801747c:	edcd 6a95 	vstr	s13, [sp, #596]	; 0x254
 8017480:	ed8d 5a91 	vstr	s10, [sp, #580]	; 0x244
 8017484:	ed8d 7a94 	vstr	s14, [sp, #592]	; 0x250
 8017488:	edcd 7a96 	vstr	s15, [sp, #600]	; 0x258
 801748c:	b1ab      	cbz	r3, 80174ba <m_kalman_3gyro.isra.6.constprop.36+0x1b1a>
 801748e:	f8dd 36a8 	ldr.w	r3, [sp, #1704]	; 0x6a8
 8017492:	785b      	ldrb	r3, [r3, #1]
 8017494:	b18b      	cbz	r3, 80174ba <m_kalman_3gyro.isra.6.constprop.36+0x1b1a>
 8017496:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017498:	ed93 7a00 	vldr	s14, [r3]
 801749c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80174a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80174a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80174a8:	bfd4      	ite	le
 80174aa:	2301      	movle	r3, #1
 80174ac:	2300      	movgt	r3, #0
 80174ae:	f88a 31ff 	strb.w	r3, [sl, #511]	; 0x1ff
 80174b2:	f88a 3200 	strb.w	r3, [sl, #512]	; 0x200
 80174b6:	f88a 3201 	strb.w	r3, [sl, #513]	; 0x201
 80174ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80174bc:	edd3 7a00 	vldr	s15, [r3]
 80174c0:	eef4 7ac8 	vcmpe.f32	s15, s16
 80174c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80174c8:	f2c0 86b1 	blt.w	801822e <m_kalman_3gyro.isra.6.constprop.36+0x288e>
 80174cc:	f50d 63d7 	add.w	r3, sp, #1720	; 0x6b8
 80174d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80174d4:	2200      	movs	r2, #0
 80174d6:	2300      	movs	r3, #0
 80174d8:	f7e9 fa9e 	bl	8000a18 <__aeabi_dcmpgt>
 80174dc:	2800      	cmp	r0, #0
 80174de:	f000 86a6 	beq.w	801822e <m_kalman_3gyro.isra.6.constprop.36+0x288e>
 80174e2:	2300      	movs	r3, #0
 80174e4:	f8aa 31fc 	strh.w	r3, [sl, #508]	; 0x1fc
 80174e8:	f88a 31fe 	strb.w	r3, [sl, #510]	; 0x1fe
 80174ec:	f88a 3205 	strb.w	r3, [sl, #517]	; 0x205
 80174f0:	f88a 3207 	strb.w	r3, [sl, #519]	; 0x207
 80174f4:	edda 7a24 	vldr	s15, [sl, #144]	; 0x90
 80174f8:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80174fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8017500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017504:	dc06      	bgt.n	8017514 <m_kalman_3gyro.isra.6.constprop.36+0x1b74>
 8017506:	ed9f 7a59 	vldr	s14, [pc, #356]	; 801766c <m_kalman_3gyro.isra.6.constprop.36+0x1ccc>
 801750a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801750e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017512:	d508      	bpl.n	8017526 <m_kalman_3gyro.isra.6.constprop.36+0x1b86>
 8017514:	2300      	movs	r3, #0
 8017516:	f8aa 31fc 	strh.w	r3, [sl, #508]	; 0x1fc
 801751a:	f88a 31fe 	strb.w	r3, [sl, #510]	; 0x1fe
 801751e:	f88a 3205 	strb.w	r3, [sl, #517]	; 0x205
 8017522:	f88a 3207 	strb.w	r3, [sl, #519]	; 0x207
 8017526:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801752a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801752e:	eef0 7ae7 	vabs.f32	s15, s15
 8017532:	ee17 0a90 	vmov	r0, s15
 8017536:	f7e8 ff87 	bl	8000448 <__aeabi_f2d>
 801753a:	f8dd 3698 	ldr.w	r3, [sp, #1688]	; 0x698
 801753e:	4606      	mov	r6, r0
 8017540:	6818      	ldr	r0, [r3, #0]
 8017542:	460f      	mov	r7, r1
 8017544:	f7e8 ff80 	bl	8000448 <__aeabi_f2d>
 8017548:	4602      	mov	r2, r0
 801754a:	460b      	mov	r3, r1
 801754c:	4630      	mov	r0, r6
 801754e:	4639      	mov	r1, r7
 8017550:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8017554:	f7e9 fa56 	bl	8000a04 <__aeabi_dcmpge>
 8017558:	b908      	cbnz	r0, 801755e <m_kalman_3gyro.isra.6.constprop.36+0x1bbe>
 801755a:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801755e:	4630      	mov	r0, r6
 8017560:	4639      	mov	r1, r7
 8017562:	f7e9 fac1 	bl	8000ae8 <__aeabi_d2f>
 8017566:	f8dd 3698 	ldr.w	r3, [sp, #1688]	; 0x698
 801756a:	6018      	str	r0, [r3, #0]
 801756c:	6058      	str	r0, [r3, #4]
 801756e:	6098      	str	r0, [r3, #8]
 8017570:	edda 7a23 	vldr	s15, [sl, #140]	; 0x8c
 8017574:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8017578:	eef4 7ac7 	vcmpe.f32	s15, s14
 801757c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017580:	f300 8613 	bgt.w	80181aa <m_kalman_3gyro.isra.6.constprop.36+0x280a>
 8017584:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8017670 <m_kalman_3gyro.isra.6.constprop.36+0x1cd0>
 8017588:	eef4 7ac7 	vcmpe.f32	s15, s14
 801758c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017590:	f100 860b 	bmi.w	80181aa <m_kalman_3gyro.isra.6.constprop.36+0x280a>
 8017594:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8017598:	ee37 8ac8 	vsub.f32	s16, s15, s16
 801759c:	eef0 7ac8 	vabs.f32	s15, s16
 80175a0:	ee17 0a90 	vmov	r0, s15
 80175a4:	f7e8 ff50 	bl	8000448 <__aeabi_f2d>
 80175a8:	f8dd 3698 	ldr.w	r3, [sp, #1688]	; 0x698
 80175ac:	4606      	mov	r6, r0
 80175ae:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80175b0:	460f      	mov	r7, r1
 80175b2:	f7e8 ff49 	bl	8000448 <__aeabi_f2d>
 80175b6:	4602      	mov	r2, r0
 80175b8:	460b      	mov	r3, r1
 80175ba:	4630      	mov	r0, r6
 80175bc:	4639      	mov	r1, r7
 80175be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80175c2:	f7e9 fa1f 	bl	8000a04 <__aeabi_dcmpge>
 80175c6:	2800      	cmp	r0, #0
 80175c8:	f001 831f 	beq.w	8018c0a <m_kalman_3gyro.isra.6.constprop.36+0x326a>
 80175cc:	4630      	mov	r0, r6
 80175ce:	4639      	mov	r1, r7
 80175d0:	f7e9 fa8a 	bl	8000ae8 <__aeabi_d2f>
 80175d4:	f8dd 3698 	ldr.w	r3, [sp, #1688]	; 0x698
 80175d8:	ed93 7a03 	vldr	s14, [r3, #12]
 80175dc:	6298      	str	r0, [r3, #40]	; 0x28
 80175de:	ee68 7a08 	vmul.f32	s15, s16, s16
 80175e2:	ee67 6a07 	vmul.f32	s13, s14, s14
 80175e6:	eef4 7ae6 	vcmpe.f32	s15, s13
 80175ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175ee:	f301 82f2 	bgt.w	8018bd6 <m_kalman_3gyro.isra.6.constprop.36+0x3236>
 80175f2:	ed99 7a00 	vldr	s14, [r9]
 80175f6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80175fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80175fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017602:	f341 8211 	ble.w	8018a28 <m_kalman_3gyro.isra.6.constprop.36+0x3088>
 8017606:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801760a:	2300      	movs	r3, #0
 801760c:	f8dd 2698 	ldr.w	r2, [sp, #1688]	; 0x698
 8017610:	f8aa 31fc 	strh.w	r3, [sl, #508]	; 0x1fc
 8017614:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017618:	f88a 31fe 	strb.w	r3, [sl, #510]	; 0x1fe
 801761c:	edd2 6a0b 	vldr	s13, [r2, #44]	; 0x2c
 8017620:	ed92 6a09 	vldr	s12, [r2, #36]	; 0x24
 8017624:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8017628:	ee26 6a27 	vmul.f32	s12, s12, s15
 801762c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8017630:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8017634:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8017638:	ed82 6a09 	vstr	s12, [r2, #36]	; 0x24
 801763c:	edc2 7a0b 	vstr	s15, [r2, #44]	; 0x2c
 8017640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017644:	bfc4      	itt	gt
 8017646:	f88a 3205 	strbgt.w	r3, [sl, #517]	; 0x205
 801764a:	f88a 3207 	strbgt.w	r3, [sl, #519]	; 0x207
 801764e:	f89a 38ae 	ldrb.w	r3, [sl, #2222]	; 0x8ae
 8017652:	2b0e      	cmp	r3, #14
 8017654:	d802      	bhi.n	801765c <m_kalman_3gyro.isra.6.constprop.36+0x1cbc>
 8017656:	3305      	adds	r3, #5
 8017658:	f88a 38ae 	strb.w	r3, [sl, #2222]	; 0x8ae
 801765c:	4623      	mov	r3, r4
 801765e:	af8f      	add	r7, sp, #572	; 0x23c
 8017660:	f04f 0900 	mov.w	r9, #0
 8017664:	ed9f 8a03 	vldr	s16, [pc, #12]	; 8017674 <m_kalman_3gyro.isra.6.constprop.36+0x1cd4>
 8017668:	e027      	b.n	80176ba <m_kalman_3gyro.isra.6.constprop.36+0x1d1a>
 801766a:	bf00      	nop
 801766c:	3e4ccccd 	.word	0x3e4ccccd
 8017670:	3ecccccd 	.word	0x3ecccccd
 8017674:	00000000 	.word	0x00000000
 8017678:	ed57 6a03 	vldr	s13, [r7, #-12]
 801767c:	ed97 7a00 	vldr	s14, [r7]
 8017680:	edd7 7a03 	vldr	s15, [r7, #12]
 8017684:	eb0a 0009 	add.w	r0, sl, r9
 8017688:	ee76 6aa6 	vadd.f32	s13, s13, s13
 801768c:	ee37 7a07 	vadd.f32	s14, s14, s14
 8017690:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8017694:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8017698:	edcd 6a7d 	vstr	s13, [sp, #500]	; 0x1f4
 801769c:	ed8d 7a7e 	vstr	s14, [sp, #504]	; 0x1f8
 80176a0:	edcd 7a7f 	vstr	s15, [sp, #508]	; 0x1fc
 80176a4:	bb7a      	cbnz	r2, 8017706 <m_kalman_3gyro.isra.6.constprop.36+0x1d66>
 80176a6:	f109 0901 	add.w	r9, r9, #1
 80176aa:	f1b9 0f0c 	cmp.w	r9, #12
 80176ae:	f103 0304 	add.w	r3, r3, #4
 80176b2:	f107 0704 	add.w	r7, r7, #4
 80176b6:	f000 84c3 	beq.w	8018040 <m_kalman_3gyro.isra.6.constprop.36+0x26a0>
 80176ba:	f1b9 0f02 	cmp.w	r9, #2
 80176be:	ed8d 8a7d 	vstr	s16, [sp, #500]	; 0x1f4
 80176c2:	ed8d 8a7e 	vstr	s16, [sp, #504]	; 0x1f8
 80176c6:	ed8d 8a7f 	vstr	s16, [sp, #508]	; 0x1fc
 80176ca:	ed8d 8a80 	vstr	s16, [sp, #512]	; 0x200
 80176ce:	ed8d 8a81 	vstr	s16, [sp, #516]	; 0x204
 80176d2:	ed8d 8a82 	vstr	s16, [sp, #520]	; 0x208
 80176d6:	ed8d 8a83 	vstr	s16, [sp, #524]	; 0x20c
 80176da:	ed8d 8a84 	vstr	s16, [sp, #528]	; 0x210
 80176de:	ed8d 8a85 	vstr	s16, [sp, #532]	; 0x214
 80176e2:	f340 8413 	ble.w	8017f0c <m_kalman_3gyro.isra.6.constprop.36+0x256c>
 80176e6:	f1b9 0f05 	cmp.w	r9, #5
 80176ea:	ddc5      	ble.n	8017678 <m_kalman_3gyro.isra.6.constprop.36+0x1cd8>
 80176ec:	aa7d      	add	r2, sp, #500	; 0x1f4
 80176ee:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 80176f2:	eb0a 0009 	add.w	r0, sl, r9
 80176f6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80176fa:	f842 1c0c 	str.w	r1, [r2, #-12]
 80176fe:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8017702:	2a00      	cmp	r2, #0
 8017704:	d0cf      	beq.n	80176a6 <m_kalman_3gyro.isra.6.constprop.36+0x1d06>
 8017706:	ad74      	add	r5, sp, #464	; 0x1d0
 8017708:	f10a 02b8 	add.w	r2, sl, #184	; 0xb8
 801770c:	ed9d da7d 	vldr	s26, [sp, #500]	; 0x1f4
 8017710:	eddd da7e 	vldr	s27, [sp, #504]	; 0x1f8
 8017714:	ed9d ea7f 	vldr	s28, [sp, #508]	; 0x1fc
 8017718:	eddd ea80 	vldr	s29, [sp, #512]	; 0x200
 801771c:	ed9d fa81 	vldr	s30, [sp, #516]	; 0x204
 8017720:	eddd fa82 	vldr	s31, [sp, #520]	; 0x208
 8017724:	eddd 6a83 	vldr	s13, [sp, #524]	; 0x20c
 8017728:	ed9d 6a84 	vldr	s12, [sp, #528]	; 0x210
 801772c:	eddd 5a85 	vldr	s11, [sp, #532]	; 0x214
 8017730:	9204      	str	r2, [sp, #16]
 8017732:	ed85 8a00 	vstr	s16, [r5]
 8017736:	4616      	mov	r6, r2
 8017738:	ed85 8a01 	vstr	s16, [r5, #4]
 801773c:	ed85 8a02 	vstr	s16, [r5, #8]
 8017740:	ed85 8a03 	vstr	s16, [r5, #12]
 8017744:	ed85 8a04 	vstr	s16, [r5, #16]
 8017748:	ed85 8a05 	vstr	s16, [r5, #20]
 801774c:	ed85 8a06 	vstr	s16, [r5, #24]
 8017750:	ed85 8a07 	vstr	s16, [r5, #28]
 8017754:	ed85 8a08 	vstr	s16, [r5, #32]
 8017758:	4629      	mov	r1, r5
 801775a:	f10a 04dc 	add.w	r4, sl, #220	; 0xdc
 801775e:	ecb2 7a01 	vldmia	r2!, {s14}
 8017762:	ecf1 7a01 	vldmia	r1!, {s15}
 8017766:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801776a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801776e:	d006      	beq.n	801777e <m_kalman_3gyro.isra.6.constprop.36+0x1dde>
 8017770:	eeb5 da40 	vcmp.f32	s26, #0.0
 8017774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017778:	bf18      	it	ne
 801777a:	eeed 7a07 	vfmane.f32	s15, s26, s14
 801777e:	ed92 7a08 	vldr	s14, [r2, #32]
 8017782:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8017786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801778a:	d006      	beq.n	801779a <m_kalman_3gyro.isra.6.constprop.36+0x1dfa>
 801778c:	eef5 da40 	vcmp.f32	s27, #0.0
 8017790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017794:	bf18      	it	ne
 8017796:	eeed 7a87 	vfmane.f32	s15, s27, s14
 801779a:	ed92 7a11 	vldr	s14, [r2, #68]	; 0x44
 801779e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80177a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177a6:	d006      	beq.n	80177b6 <m_kalman_3gyro.isra.6.constprop.36+0x1e16>
 80177a8:	eeb5 ea40 	vcmp.f32	s28, #0.0
 80177ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177b0:	bf18      	it	ne
 80177b2:	eeee 7a07 	vfmane.f32	s15, s28, s14
 80177b6:	ed92 7a1a 	vldr	s14, [r2, #104]	; 0x68
 80177ba:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80177be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177c2:	d006      	beq.n	80177d2 <m_kalman_3gyro.isra.6.constprop.36+0x1e32>
 80177c4:	eef5 ea40 	vcmp.f32	s29, #0.0
 80177c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177cc:	bf18      	it	ne
 80177ce:	eeee 7a87 	vfmane.f32	s15, s29, s14
 80177d2:	ed92 7a23 	vldr	s14, [r2, #140]	; 0x8c
 80177d6:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80177da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177de:	d006      	beq.n	80177ee <m_kalman_3gyro.isra.6.constprop.36+0x1e4e>
 80177e0:	eeb5 fa40 	vcmp.f32	s30, #0.0
 80177e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177e8:	bf18      	it	ne
 80177ea:	eeef 7a07 	vfmane.f32	s15, s30, s14
 80177ee:	ed92 7a2c 	vldr	s14, [r2, #176]	; 0xb0
 80177f2:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80177f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177fa:	d006      	beq.n	801780a <m_kalman_3gyro.isra.6.constprop.36+0x1e6a>
 80177fc:	eef5 fa40 	vcmp.f32	s31, #0.0
 8017800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017804:	bf18      	it	ne
 8017806:	eeef 7a87 	vfmane.f32	s15, s31, s14
 801780a:	ed92 7a35 	vldr	s14, [r2, #212]	; 0xd4
 801780e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8017812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017816:	d006      	beq.n	8017826 <m_kalman_3gyro.isra.6.constprop.36+0x1e86>
 8017818:	eef5 6a40 	vcmp.f32	s13, #0.0
 801781c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017820:	bf18      	it	ne
 8017822:	eee6 7a87 	vfmane.f32	s15, s13, s14
 8017826:	ed92 7a3e 	vldr	s14, [r2, #248]	; 0xf8
 801782a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801782e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017832:	d006      	beq.n	8017842 <m_kalman_3gyro.isra.6.constprop.36+0x1ea2>
 8017834:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8017838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801783c:	bf18      	it	ne
 801783e:	eee6 7a07 	vfmane.f32	s15, s12, s14
 8017842:	ed92 7a47 	vldr	s14, [r2, #284]	; 0x11c
 8017846:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801784a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801784e:	d006      	beq.n	801785e <m_kalman_3gyro.isra.6.constprop.36+0x1ebe>
 8017850:	eef5 5a40 	vcmp.f32	s11, #0.0
 8017854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017858:	bf18      	it	ne
 801785a:	eee5 7a87 	vfmane.f32	s15, s11, s14
 801785e:	4294      	cmp	r4, r2
 8017860:	ed41 7a01 	vstr	s15, [r1, #-4]
 8017864:	f47f af7b 	bne.w	801775e <m_kalman_3gyro.isra.6.constprop.36+0x1dbe>
 8017868:	eeb5 da40 	vcmp.f32	s26, #0.0
 801786c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017870:	ed95 ca00 	vldr	s24, [r5]
 8017874:	f000 83af 	beq.w	8017fd6 <m_kalman_3gyro.isra.6.constprop.36+0x2636>
 8017878:	eeb5 ca40 	vcmp.f32	s24, #0.0
 801787c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017880:	f000 83a9 	beq.w	8017fd6 <m_kalman_3gyro.isra.6.constprop.36+0x2636>
 8017884:	ee6c 7a0d 	vmul.f32	s15, s24, s26
 8017888:	eef5 da40 	vcmp.f32	s27, #0.0
 801788c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017890:	ed95 9a01 	vldr	s18, [r5, #4]
 8017894:	d006      	beq.n	80178a4 <m_kalman_3gyro.isra.6.constprop.36+0x1f04>
 8017896:	eeb5 9a40 	vcmp.f32	s18, #0.0
 801789a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801789e:	bf18      	it	ne
 80178a0:	eee9 7a2d 	vfmane.f32	s15, s18, s27
 80178a4:	eeb5 ea40 	vcmp.f32	s28, #0.0
 80178a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80178ac:	edd5 ba02 	vldr	s23, [r5, #8]
 80178b0:	d006      	beq.n	80178c0 <m_kalman_3gyro.isra.6.constprop.36+0x1f20>
 80178b2:	eef5 ba40 	vcmp.f32	s23, #0.0
 80178b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80178ba:	bf18      	it	ne
 80178bc:	eeee 7a2b 	vfmane.f32	s15, s28, s23
 80178c0:	eef5 ea40 	vcmp.f32	s29, #0.0
 80178c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80178c8:	edd5 ca03 	vldr	s25, [r5, #12]
 80178cc:	d006      	beq.n	80178dc <m_kalman_3gyro.isra.6.constprop.36+0x1f3c>
 80178ce:	eef5 ca40 	vcmp.f32	s25, #0.0
 80178d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80178d6:	bf18      	it	ne
 80178d8:	eeee 7aac 	vfmane.f32	s15, s29, s25
 80178dc:	eeb5 fa40 	vcmp.f32	s30, #0.0
 80178e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80178e4:	ed95 ba04 	vldr	s22, [r5, #16]
 80178e8:	d006      	beq.n	80178f8 <m_kalman_3gyro.isra.6.constprop.36+0x1f58>
 80178ea:	eeb5 ba40 	vcmp.f32	s22, #0.0
 80178ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80178f2:	bf18      	it	ne
 80178f4:	eeef 7a0b 	vfmane.f32	s15, s30, s22
 80178f8:	eef5 fa40 	vcmp.f32	s31, #0.0
 80178fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017900:	ed95 aa05 	vldr	s20, [r5, #20]
 8017904:	d006      	beq.n	8017914 <m_kalman_3gyro.isra.6.constprop.36+0x1f74>
 8017906:	eeb5 aa40 	vcmp.f32	s20, #0.0
 801790a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801790e:	bf18      	it	ne
 8017910:	eeef 7a8a 	vfmane.f32	s15, s31, s20
 8017914:	eef5 6a40 	vcmp.f32	s13, #0.0
 8017918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801791c:	edd5 aa06 	vldr	s21, [r5, #24]
 8017920:	d006      	beq.n	8017930 <m_kalman_3gyro.isra.6.constprop.36+0x1f90>
 8017922:	eef5 aa40 	vcmp.f32	s21, #0.0
 8017926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801792a:	bf18      	it	ne
 801792c:	eeea 7aa6 	vfmane.f32	s15, s21, s13
 8017930:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8017934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017938:	edd5 9a07 	vldr	s19, [r5, #28]
 801793c:	d006      	beq.n	801794c <m_kalman_3gyro.isra.6.constprop.36+0x1fac>
 801793e:	eef5 9a40 	vcmp.f32	s19, #0.0
 8017942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017946:	bf18      	it	ne
 8017948:	eee9 7a86 	vfmane.f32	s15, s19, s12
 801794c:	eef5 5a40 	vcmp.f32	s11, #0.0
 8017950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017954:	edd5 8a08 	vldr	s17, [r5, #32]
 8017958:	d006      	beq.n	8017968 <m_kalman_3gyro.isra.6.constprop.36+0x1fc8>
 801795a:	eef5 8a40 	vcmp.f32	s17, #0.0
 801795e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017962:	bf18      	it	ne
 8017964:	eee8 7aa5 	vfmane.f32	s15, s17, s11
 8017968:	f8dd 2698 	ldr.w	r2, [sp, #1688]	; 0x698
 801796c:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 8017970:	ed92 7a00 	vldr	s14, [r2]
 8017974:	eee7 7a07 	vfma.f32	s15, s14, s14
 8017978:	eb09 0249 	add.w	r2, r9, r9, lsl #1
 801797c:	1882      	adds	r2, r0, r2
 801797e:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8017982:	ee85 7a27 	vdiv.f32	s14, s10, s15
 8017986:	f1b9 0f05 	cmp.w	r9, #5
 801798a:	9202      	str	r2, [sp, #8]
 801798c:	ee27 ca0c 	vmul.f32	s24, s14, s24
 8017990:	ee29 9a07 	vmul.f32	s18, s18, s14
 8017994:	ee67 ba2b 	vmul.f32	s23, s14, s23
 8017998:	ee67 ca2c 	vmul.f32	s25, s14, s25
 801799c:	ee27 ba0b 	vmul.f32	s22, s14, s22
 80179a0:	ee27 aa0a 	vmul.f32	s20, s14, s20
 80179a4:	ee67 aa2a 	vmul.f32	s21, s14, s21
 80179a8:	ee69 9a87 	vmul.f32	s19, s19, s14
 80179ac:	ee68 8a87 	vmul.f32	s17, s17, s14
 80179b0:	ed8d ca6b 	vstr	s24, [sp, #428]	; 0x1ac
 80179b4:	ed8d 9a6c 	vstr	s18, [sp, #432]	; 0x1b0
 80179b8:	edcd ba6d 	vstr	s23, [sp, #436]	; 0x1b4
 80179bc:	edcd ca6e 	vstr	s25, [sp, #440]	; 0x1b8
 80179c0:	ed8d ba6f 	vstr	s22, [sp, #444]	; 0x1bc
 80179c4:	ed8d aa70 	vstr	s20, [sp, #448]	; 0x1c0
 80179c8:	edcd aa71 	vstr	s21, [sp, #452]	; 0x1c4
 80179cc:	edcd 9a72 	vstr	s19, [sp, #456]	; 0x1c8
 80179d0:	edcd 8a73 	vstr	s17, [sp, #460]	; 0x1cc
 80179d4:	f340 8087 	ble.w	8017ae6 <m_kalman_3gyro.isra.6.constprop.36+0x2146>
 80179d8:	eeb5 da40 	vcmp.f32	s26, #0.0
 80179dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80179e0:	ed92 7a19 	vldr	s14, [r2, #100]	; 0x64
 80179e4:	f000 83cd 	beq.w	8018182 <m_kalman_3gyro.isra.6.constprop.36+0x27e2>
 80179e8:	edda 7a25 	vldr	s15, [sl, #148]	; 0x94
 80179ec:	eef5 7a40 	vcmp.f32	s15, #0.0
 80179f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80179f4:	f000 83c5 	beq.w	8018182 <m_kalman_3gyro.isra.6.constprop.36+0x27e2>
 80179f8:	ee67 7a8d 	vmul.f32	s15, s15, s26
 80179fc:	eef5 da40 	vcmp.f32	s27, #0.0
 8017a00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a04:	d008      	beq.n	8017a18 <m_kalman_3gyro.isra.6.constprop.36+0x2078>
 8017a06:	ed9a 5a26 	vldr	s10, [sl, #152]	; 0x98
 8017a0a:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8017a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a12:	bf18      	it	ne
 8017a14:	eee5 7a2d 	vfmane.f32	s15, s10, s27
 8017a18:	eeb5 ea40 	vcmp.f32	s28, #0.0
 8017a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a20:	d008      	beq.n	8017a34 <m_kalman_3gyro.isra.6.constprop.36+0x2094>
 8017a22:	ed9a 5a27 	vldr	s10, [sl, #156]	; 0x9c
 8017a26:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8017a2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a2e:	bf18      	it	ne
 8017a30:	eee5 7a0e 	vfmane.f32	s15, s10, s28
 8017a34:	eef5 ea40 	vcmp.f32	s29, #0.0
 8017a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a3c:	d008      	beq.n	8017a50 <m_kalman_3gyro.isra.6.constprop.36+0x20b0>
 8017a3e:	ed9a 5a28 	vldr	s10, [sl, #160]	; 0xa0
 8017a42:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8017a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a4a:	bf18      	it	ne
 8017a4c:	eee5 7a2e 	vfmane.f32	s15, s10, s29
 8017a50:	eeb5 fa40 	vcmp.f32	s30, #0.0
 8017a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a58:	d008      	beq.n	8017a6c <m_kalman_3gyro.isra.6.constprop.36+0x20cc>
 8017a5a:	ed9a 5a29 	vldr	s10, [sl, #164]	; 0xa4
 8017a5e:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8017a62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a66:	bf18      	it	ne
 8017a68:	eee5 7a0f 	vfmane.f32	s15, s10, s30
 8017a6c:	eef5 fa40 	vcmp.f32	s31, #0.0
 8017a70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a74:	d008      	beq.n	8017a88 <m_kalman_3gyro.isra.6.constprop.36+0x20e8>
 8017a76:	ed9a 5a2a 	vldr	s10, [sl, #168]	; 0xa8
 8017a7a:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8017a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a82:	bf18      	it	ne
 8017a84:	eee5 7a2f 	vfmane.f32	s15, s10, s31
 8017a88:	eef5 6a40 	vcmp.f32	s13, #0.0
 8017a8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a90:	d008      	beq.n	8017aa4 <m_kalman_3gyro.isra.6.constprop.36+0x2104>
 8017a92:	ed9a 5a2b 	vldr	s10, [sl, #172]	; 0xac
 8017a96:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8017a9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a9e:	bf18      	it	ne
 8017aa0:	eee5 7a26 	vfmane.f32	s15, s10, s13
 8017aa4:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8017aa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017aac:	d008      	beq.n	8017ac0 <m_kalman_3gyro.isra.6.constprop.36+0x2120>
 8017aae:	ed9a 5a2c 	vldr	s10, [sl, #176]	; 0xb0
 8017ab2:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8017ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017aba:	bf18      	it	ne
 8017abc:	eee5 7a06 	vfmane.f32	s15, s10, s12
 8017ac0:	eef5 5a40 	vcmp.f32	s11, #0.0
 8017ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ac8:	d008      	beq.n	8017adc <m_kalman_3gyro.isra.6.constprop.36+0x213c>
 8017aca:	ed9a 5a2d 	vldr	s10, [sl, #180]	; 0xb4
 8017ace:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8017ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ad6:	bf18      	it	ne
 8017ad8:	eee5 7a25 	vfmane.f32	s15, s10, s11
 8017adc:	9a02      	ldr	r2, [sp, #8]
 8017ade:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017ae2:	edc2 7a19 	vstr	s15, [r2, #100]	; 0x64
 8017ae6:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8017aea:	2100      	movs	r1, #0
 8017aec:	4658      	mov	r0, fp
 8017aee:	930b      	str	r3, [sp, #44]	; 0x2c
 8017af0:	edcd 5a0a 	vstr	s11, [sp, #40]	; 0x28
 8017af4:	ed8d 6a08 	vstr	s12, [sp, #32]
 8017af8:	edcd 6a06 	vstr	s13, [sp, #24]
 8017afc:	f00a fecc 	bl	8022898 <memset>
 8017b00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017b02:	eddd 5a0a 	vldr	s11, [sp, #40]	; 0x28
 8017b06:	ed9d 6a08 	vldr	s12, [sp, #32]
 8017b0a:	eddd 6a06 	vldr	s13, [sp, #24]
 8017b0e:	465c      	mov	r4, fp
 8017b10:	a96b      	add	r1, sp, #428	; 0x1ac
 8017b12:	465a      	mov	r2, fp
 8017b14:	ecf1 7a01 	vldmia	r1!, {s15}
 8017b18:	eef5 7a40 	vcmp.f32	s15, #0.0
 8017b1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b20:	d062      	beq.n	8017be8 <m_kalman_3gyro.isra.6.constprop.36+0x2248>
 8017b22:	eeb5 da40 	vcmp.f32	s26, #0.0
 8017b26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b2a:	d005      	beq.n	8017b38 <m_kalman_3gyro.isra.6.constprop.36+0x2198>
 8017b2c:	ed92 7a00 	vldr	s14, [r2]
 8017b30:	eea7 7a8d 	vfma.f32	s14, s15, s26
 8017b34:	ed82 7a00 	vstr	s14, [r2]
 8017b38:	eef5 da40 	vcmp.f32	s27, #0.0
 8017b3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b40:	d005      	beq.n	8017b4e <m_kalman_3gyro.isra.6.constprop.36+0x21ae>
 8017b42:	ed92 7a09 	vldr	s14, [r2, #36]	; 0x24
 8017b46:	eea7 7aad 	vfma.f32	s14, s15, s27
 8017b4a:	ed82 7a09 	vstr	s14, [r2, #36]	; 0x24
 8017b4e:	eeb5 ea40 	vcmp.f32	s28, #0.0
 8017b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b56:	d005      	beq.n	8017b64 <m_kalman_3gyro.isra.6.constprop.36+0x21c4>
 8017b58:	ed92 7a12 	vldr	s14, [r2, #72]	; 0x48
 8017b5c:	eea7 7a8e 	vfma.f32	s14, s15, s28
 8017b60:	ed82 7a12 	vstr	s14, [r2, #72]	; 0x48
 8017b64:	eef5 ea40 	vcmp.f32	s29, #0.0
 8017b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b6c:	d005      	beq.n	8017b7a <m_kalman_3gyro.isra.6.constprop.36+0x21da>
 8017b6e:	ed92 7a1b 	vldr	s14, [r2, #108]	; 0x6c
 8017b72:	eea7 7aae 	vfma.f32	s14, s15, s29
 8017b76:	ed82 7a1b 	vstr	s14, [r2, #108]	; 0x6c
 8017b7a:	eeb5 fa40 	vcmp.f32	s30, #0.0
 8017b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b82:	d005      	beq.n	8017b90 <m_kalman_3gyro.isra.6.constprop.36+0x21f0>
 8017b84:	ed92 7a24 	vldr	s14, [r2, #144]	; 0x90
 8017b88:	eea7 7a8f 	vfma.f32	s14, s15, s30
 8017b8c:	ed82 7a24 	vstr	s14, [r2, #144]	; 0x90
 8017b90:	eef5 fa40 	vcmp.f32	s31, #0.0
 8017b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b98:	d005      	beq.n	8017ba6 <m_kalman_3gyro.isra.6.constprop.36+0x2206>
 8017b9a:	ed92 7a2d 	vldr	s14, [r2, #180]	; 0xb4
 8017b9e:	eea7 7aaf 	vfma.f32	s14, s15, s31
 8017ba2:	ed82 7a2d 	vstr	s14, [r2, #180]	; 0xb4
 8017ba6:	eef5 6a40 	vcmp.f32	s13, #0.0
 8017baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017bae:	d005      	beq.n	8017bbc <m_kalman_3gyro.isra.6.constprop.36+0x221c>
 8017bb0:	ed92 7a36 	vldr	s14, [r2, #216]	; 0xd8
 8017bb4:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8017bb8:	ed82 7a36 	vstr	s14, [r2, #216]	; 0xd8
 8017bbc:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8017bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017bc4:	d005      	beq.n	8017bd2 <m_kalman_3gyro.isra.6.constprop.36+0x2232>
 8017bc6:	ed92 7a3f 	vldr	s14, [r2, #252]	; 0xfc
 8017bca:	eea7 7a86 	vfma.f32	s14, s15, s12
 8017bce:	ed82 7a3f 	vstr	s14, [r2, #252]	; 0xfc
 8017bd2:	eef5 5a40 	vcmp.f32	s11, #0.0
 8017bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017bda:	d005      	beq.n	8017be8 <m_kalman_3gyro.isra.6.constprop.36+0x2248>
 8017bdc:	ed92 7a48 	vldr	s14, [r2, #288]	; 0x120
 8017be0:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8017be4:	ed82 7a48 	vstr	s14, [r2, #288]	; 0x120
 8017be8:	42a9      	cmp	r1, r5
 8017bea:	f102 0204 	add.w	r2, r2, #4
 8017bee:	d191      	bne.n	8017b14 <m_kalman_3gyro.isra.6.constprop.36+0x2174>
 8017bf0:	f8df c664 	ldr.w	ip, [pc, #1636]	; 8018258 <m_kalman_3gyro.isra.6.constprop.36+0x28b8>
 8017bf4:	4658      	mov	r0, fp
 8017bf6:	2100      	movs	r1, #0
 8017bf8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8017bfc:	fbac e201 	umull	lr, r2, ip, r1
 8017c00:	edd0 7a00 	vldr	s15, [r0]
 8017c04:	08d2      	lsrs	r2, r2, #3
 8017c06:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8017c0a:	ebb1 0f42 	cmp.w	r1, r2, lsl #1
 8017c0e:	ee36 7ae7 	vsub.f32	s14, s13, s15
 8017c12:	f101 0101 	add.w	r1, r1, #1
 8017c16:	bf16      	itet	ne
 8017c18:	eef1 7a67 	vnegne.f32	s15, s15
 8017c1c:	ed80 7a00 	vstreq	s14, [r0]
 8017c20:	edc0 7a00 	vstrne	s15, [r0]
 8017c24:	2951      	cmp	r1, #81	; 0x51
 8017c26:	f100 0004 	add.w	r0, r0, #4
 8017c2a:	d1e7      	bne.n	8017bfc <m_kalman_3gyro.isra.6.constprop.36+0x225c>
 8017c2c:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8017c30:	9904      	ldr	r1, [sp, #16]
 8017c32:	9306      	str	r3, [sp, #24]
 8017c34:	4640      	mov	r0, r8
 8017c36:	f00a fe0b 	bl	8022850 <memcpy>
 8017c3a:	9804      	ldr	r0, [sp, #16]
 8017c3c:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8017c40:	2100      	movs	r1, #0
 8017c42:	f00a fe29 	bl	8022898 <memset>
 8017c46:	9b06      	ldr	r3, [sp, #24]
 8017c48:	f10b 0c24 	add.w	ip, fp, #36	; 0x24
 8017c4c:	f50d 60c6 	add.w	r0, sp, #1584	; 0x630
 8017c50:	ecf4 3a01 	vldmia	r4!, {s7}
 8017c54:	ed94 4a08 	vldr	s8, [r4, #32]
 8017c58:	edd4 4a11 	vldr	s9, [r4, #68]	; 0x44
 8017c5c:	ed94 5a1a 	vldr	s10, [r4, #104]	; 0x68
 8017c60:	edd4 5a23 	vldr	s11, [r4, #140]	; 0x8c
 8017c64:	ed94 6a2c 	vldr	s12, [r4, #176]	; 0xb0
 8017c68:	edd4 6a35 	vldr	s13, [r4, #212]	; 0xd4
 8017c6c:	ed94 7a3e 	vldr	s14, [r4, #248]	; 0xf8
 8017c70:	edd4 7a47 	vldr	s15, [r4, #284]	; 0x11c
 8017c74:	4642      	mov	r2, r8
 8017c76:	4631      	mov	r1, r6
 8017c78:	eef5 3a40 	vcmp.f32	s7, #0.0
 8017c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c80:	d00c      	beq.n	8017c9c <m_kalman_3gyro.isra.6.constprop.36+0x22fc>
 8017c82:	ed92 3a00 	vldr	s6, [r2]
 8017c86:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8017c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c8e:	d005      	beq.n	8017c9c <m_kalman_3gyro.isra.6.constprop.36+0x22fc>
 8017c90:	edd1 2a00 	vldr	s5, [r1]
 8017c94:	eee3 2a83 	vfma.f32	s5, s7, s6
 8017c98:	edc1 2a00 	vstr	s5, [r1]
 8017c9c:	eeb5 4a40 	vcmp.f32	s8, #0.0
 8017ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ca4:	d00c      	beq.n	8017cc0 <m_kalman_3gyro.isra.6.constprop.36+0x2320>
 8017ca6:	ed92 3a01 	vldr	s6, [r2, #4]
 8017caa:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8017cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017cb2:	d005      	beq.n	8017cc0 <m_kalman_3gyro.isra.6.constprop.36+0x2320>
 8017cb4:	edd1 2a00 	vldr	s5, [r1]
 8017cb8:	eee4 2a03 	vfma.f32	s5, s8, s6
 8017cbc:	edc1 2a00 	vstr	s5, [r1]
 8017cc0:	eef5 4a40 	vcmp.f32	s9, #0.0
 8017cc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017cc8:	d00c      	beq.n	8017ce4 <m_kalman_3gyro.isra.6.constprop.36+0x2344>
 8017cca:	ed92 3a02 	vldr	s6, [r2, #8]
 8017cce:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8017cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017cd6:	d005      	beq.n	8017ce4 <m_kalman_3gyro.isra.6.constprop.36+0x2344>
 8017cd8:	edd1 2a00 	vldr	s5, [r1]
 8017cdc:	eee4 2a83 	vfma.f32	s5, s9, s6
 8017ce0:	edc1 2a00 	vstr	s5, [r1]
 8017ce4:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8017ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017cec:	d00c      	beq.n	8017d08 <m_kalman_3gyro.isra.6.constprop.36+0x2368>
 8017cee:	ed92 3a03 	vldr	s6, [r2, #12]
 8017cf2:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8017cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017cfa:	d005      	beq.n	8017d08 <m_kalman_3gyro.isra.6.constprop.36+0x2368>
 8017cfc:	edd1 2a00 	vldr	s5, [r1]
 8017d00:	eee5 2a03 	vfma.f32	s5, s10, s6
 8017d04:	edc1 2a00 	vstr	s5, [r1]
 8017d08:	eef5 5a40 	vcmp.f32	s11, #0.0
 8017d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d10:	d00c      	beq.n	8017d2c <m_kalman_3gyro.isra.6.constprop.36+0x238c>
 8017d12:	ed92 3a04 	vldr	s6, [r2, #16]
 8017d16:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8017d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d1e:	d005      	beq.n	8017d2c <m_kalman_3gyro.isra.6.constprop.36+0x238c>
 8017d20:	edd1 2a00 	vldr	s5, [r1]
 8017d24:	eee5 2a83 	vfma.f32	s5, s11, s6
 8017d28:	edc1 2a00 	vstr	s5, [r1]
 8017d2c:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8017d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d34:	d00c      	beq.n	8017d50 <m_kalman_3gyro.isra.6.constprop.36+0x23b0>
 8017d36:	ed92 3a05 	vldr	s6, [r2, #20]
 8017d3a:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8017d3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d42:	d005      	beq.n	8017d50 <m_kalman_3gyro.isra.6.constprop.36+0x23b0>
 8017d44:	edd1 2a00 	vldr	s5, [r1]
 8017d48:	eee6 2a03 	vfma.f32	s5, s12, s6
 8017d4c:	edc1 2a00 	vstr	s5, [r1]
 8017d50:	eef5 6a40 	vcmp.f32	s13, #0.0
 8017d54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d58:	d00c      	beq.n	8017d74 <m_kalman_3gyro.isra.6.constprop.36+0x23d4>
 8017d5a:	ed92 3a06 	vldr	s6, [r2, #24]
 8017d5e:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8017d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d66:	d005      	beq.n	8017d74 <m_kalman_3gyro.isra.6.constprop.36+0x23d4>
 8017d68:	edd1 2a00 	vldr	s5, [r1]
 8017d6c:	eee6 2a83 	vfma.f32	s5, s13, s6
 8017d70:	edc1 2a00 	vstr	s5, [r1]
 8017d74:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8017d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d7c:	d00c      	beq.n	8017d98 <m_kalman_3gyro.isra.6.constprop.36+0x23f8>
 8017d7e:	ed92 3a07 	vldr	s6, [r2, #28]
 8017d82:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8017d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d8a:	d005      	beq.n	8017d98 <m_kalman_3gyro.isra.6.constprop.36+0x23f8>
 8017d8c:	edd1 2a00 	vldr	s5, [r1]
 8017d90:	eee7 2a03 	vfma.f32	s5, s14, s6
 8017d94:	edc1 2a00 	vstr	s5, [r1]
 8017d98:	eef5 7a40 	vcmp.f32	s15, #0.0
 8017d9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017da0:	d00c      	beq.n	8017dbc <m_kalman_3gyro.isra.6.constprop.36+0x241c>
 8017da2:	ed92 3a08 	vldr	s6, [r2, #32]
 8017da6:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8017daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017dae:	d005      	beq.n	8017dbc <m_kalman_3gyro.isra.6.constprop.36+0x241c>
 8017db0:	edd1 2a00 	vldr	s5, [r1]
 8017db4:	eee7 2a83 	vfma.f32	s5, s15, s6
 8017db8:	edc1 2a00 	vstr	s5, [r1]
 8017dbc:	3224      	adds	r2, #36	; 0x24
 8017dbe:	4282      	cmp	r2, r0
 8017dc0:	f101 0124 	add.w	r1, r1, #36	; 0x24
 8017dc4:	f47f af58 	bne.w	8017c78 <m_kalman_3gyro.isra.6.constprop.36+0x22d8>
 8017dc8:	45a4      	cmp	ip, r4
 8017dca:	f106 0604 	add.w	r6, r6, #4
 8017dce:	f47f af3f 	bne.w	8017c50 <m_kalman_3gyro.isra.6.constprop.36+0x22b0>
 8017dd2:	9a02      	ldr	r2, [sp, #8]
 8017dd4:	ed85 8a00 	vstr	s16, [r5]
 8017dd8:	eeb5 ca40 	vcmp.f32	s24, #0.0
 8017ddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017de0:	ed85 8a01 	vstr	s16, [r5, #4]
 8017de4:	edd2 7a19 	vldr	s15, [r2, #100]	; 0x64
 8017de8:	f000 8098 	beq.w	8017f1c <m_kalman_3gyro.isra.6.constprop.36+0x257c>
 8017dec:	eef5 7a40 	vcmp.f32	s15, #0.0
 8017df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017df4:	f000 8092 	beq.w	8017f1c <m_kalman_3gyro.isra.6.constprop.36+0x257c>
 8017df8:	ee27 ca8c 	vmul.f32	s24, s15, s24
 8017dfc:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8017e00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e04:	ed85 ca00 	vstr	s24, [r5]
 8017e08:	f040 85a1 	bne.w	801894e <m_kalman_3gyro.isra.6.constprop.36+0x2fae>
 8017e0c:	eef5 ba40 	vcmp.f32	s23, #0.0
 8017e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e14:	eeb0 9a48 	vmov.f32	s18, s16
 8017e18:	f000 8090 	beq.w	8017f3c <m_kalman_3gyro.isra.6.constprop.36+0x259c>
 8017e1c:	ee67 baab 	vmul.f32	s23, s15, s23
 8017e20:	eef5 ca40 	vcmp.f32	s25, #0.0
 8017e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e28:	edc5 ba02 	vstr	s23, [r5, #8]
 8017e2c:	f000 8095 	beq.w	8017f5a <m_kalman_3gyro.isra.6.constprop.36+0x25ba>
 8017e30:	ee67 caac 	vmul.f32	s25, s15, s25
 8017e34:	eeb5 ba40 	vcmp.f32	s22, #0.0
 8017e38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e3c:	edc5 ca03 	vstr	s25, [r5, #12]
 8017e40:	f000 80eb 	beq.w	801801a <m_kalman_3gyro.isra.6.constprop.36+0x267a>
 8017e44:	ee27 ba8b 	vmul.f32	s22, s15, s22
 8017e48:	eeb5 aa40 	vcmp.f32	s20, #0.0
 8017e4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e50:	ed85 ba04 	vstr	s22, [r5, #16]
 8017e54:	f000 8094 	beq.w	8017f80 <m_kalman_3gyro.isra.6.constprop.36+0x25e0>
 8017e58:	ee27 aa8a 	vmul.f32	s20, s15, s20
 8017e5c:	eef5 aa40 	vcmp.f32	s21, #0.0
 8017e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e64:	ed85 aa05 	vstr	s20, [r5, #20]
 8017e68:	f000 80ba 	beq.w	8017fe0 <m_kalman_3gyro.isra.6.constprop.36+0x2640>
 8017e6c:	ee67 aaaa 	vmul.f32	s21, s15, s21
 8017e70:	eef5 9a40 	vcmp.f32	s19, #0.0
 8017e74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e78:	edc5 aa06 	vstr	s21, [r5, #24]
 8017e7c:	f000 8098 	beq.w	8017fb0 <m_kalman_3gyro.isra.6.constprop.36+0x2610>
 8017e80:	ee67 9aa9 	vmul.f32	s19, s15, s19
 8017e84:	eef5 8a40 	vcmp.f32	s17, #0.0
 8017e88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e8c:	edc5 9a07 	vstr	s19, [r5, #28]
 8017e90:	f040 809e 	bne.w	8017fd0 <m_kalman_3gyro.isra.6.constprop.36+0x2630>
 8017e94:	eef0 7a48 	vmov.f32	s15, s16
 8017e98:	ed9a 4a25 	vldr	s8, [sl, #148]	; 0x94
 8017e9c:	edda 6a26 	vldr	s13, [sl, #152]	; 0x98
 8017ea0:	edda 4a27 	vldr	s9, [sl, #156]	; 0x9c
 8017ea4:	edda 3a28 	vldr	s7, [sl, #160]	; 0xa0
 8017ea8:	ed9a 5a29 	vldr	s10, [sl, #164]	; 0xa4
 8017eac:	ed9a 6a2a 	vldr	s12, [sl, #168]	; 0xa8
 8017eb0:	edda 5a2b 	vldr	s11, [sl, #172]	; 0xac
 8017eb4:	ed9a 3a2c 	vldr	s6, [sl, #176]	; 0xb0
 8017eb8:	ed9a 7a2d 	vldr	s14, [sl, #180]	; 0xb4
 8017ebc:	edc5 7a08 	vstr	s15, [r5, #32]
 8017ec0:	ee34 ca0c 	vadd.f32	s24, s8, s24
 8017ec4:	ee36 9a89 	vadd.f32	s18, s13, s18
 8017ec8:	ee74 baab 	vadd.f32	s23, s9, s23
 8017ecc:	ee73 caac 	vadd.f32	s25, s7, s25
 8017ed0:	ee35 ba0b 	vadd.f32	s22, s10, s22
 8017ed4:	ee36 aa0a 	vadd.f32	s20, s12, s20
 8017ed8:	ee75 aaaa 	vadd.f32	s21, s11, s21
 8017edc:	ee73 9a29 	vadd.f32	s19, s6, s19
 8017ee0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017ee4:	ed8a ca25 	vstr	s24, [sl, #148]	; 0x94
 8017ee8:	ed8a 9a26 	vstr	s18, [sl, #152]	; 0x98
 8017eec:	edca ba27 	vstr	s23, [sl, #156]	; 0x9c
 8017ef0:	edca ca28 	vstr	s25, [sl, #160]	; 0xa0
 8017ef4:	ed8a ba29 	vstr	s22, [sl, #164]	; 0xa4
 8017ef8:	ed8a aa2a 	vstr	s20, [sl, #168]	; 0xa8
 8017efc:	edca aa2b 	vstr	s21, [sl, #172]	; 0xac
 8017f00:	edca 9a2c 	vstr	s19, [sl, #176]	; 0xb0
 8017f04:	edca 7a2d 	vstr	s15, [sl, #180]	; 0xb4
 8017f08:	f7ff bbcd 	b.w	80176a6 <m_kalman_3gyro.isra.6.constprop.36+0x1d06>
 8017f0c:	edd3 6a00 	vldr	s13, [r3]
 8017f10:	ed93 7a03 	vldr	s14, [r3, #12]
 8017f14:	edd3 7a06 	vldr	s15, [r3, #24]
 8017f18:	f7ff bbb4 	b.w	8017684 <m_kalman_3gyro.isra.6.constprop.36+0x1ce4>
 8017f1c:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8017f20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f24:	f000 8130 	beq.w	8018188 <m_kalman_3gyro.isra.6.constprop.36+0x27e8>
 8017f28:	eef5 7a40 	vcmp.f32	s15, #0.0
 8017f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f30:	f040 850b 	bne.w	801894a <m_kalman_3gyro.isra.6.constprop.36+0x2faa>
 8017f34:	eeb0 9a48 	vmov.f32	s18, s16
 8017f38:	eeb0 ca48 	vmov.f32	s24, s16
 8017f3c:	eef5 ca40 	vcmp.f32	s25, #0.0
 8017f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f44:	ed85 8a02 	vstr	s16, [r5, #8]
 8017f48:	d077      	beq.n	801803a <m_kalman_3gyro.isra.6.constprop.36+0x269a>
 8017f4a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8017f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f52:	eef0 ba48 	vmov.f32	s23, s16
 8017f56:	f47f af6b 	bne.w	8017e30 <m_kalman_3gyro.isra.6.constprop.36+0x2490>
 8017f5a:	eeb5 ba40 	vcmp.f32	s22, #0.0
 8017f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f62:	ed85 8a03 	vstr	s16, [r5, #12]
 8017f66:	d056      	beq.n	8018016 <m_kalman_3gyro.isra.6.constprop.36+0x2676>
 8017f68:	eef5 7a40 	vcmp.f32	s15, #0.0
 8017f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f70:	f041 813a 	bne.w	80191e8 <m_kalman_3gyro.isra.6.constprop.36+0x3848>
 8017f74:	ed85 8a04 	vstr	s16, [r5, #16]
 8017f78:	eeb0 ba48 	vmov.f32	s22, s16
 8017f7c:	eef0 ca48 	vmov.f32	s25, s16
 8017f80:	eef5 aa40 	vcmp.f32	s21, #0.0
 8017f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f88:	ed85 8a05 	vstr	s16, [r5, #20]
 8017f8c:	d026      	beq.n	8017fdc <m_kalman_3gyro.isra.6.constprop.36+0x263c>
 8017f8e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8017f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f96:	f041 8123 	bne.w	80191e0 <m_kalman_3gyro.isra.6.constprop.36+0x3840>
 8017f9a:	eef5 9a40 	vcmp.f32	s19, #0.0
 8017f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017fa2:	ed85 8a06 	vstr	s16, [r5, #24]
 8017fa6:	d12b      	bne.n	8018000 <m_kalman_3gyro.isra.6.constprop.36+0x2660>
 8017fa8:	eef0 aa48 	vmov.f32	s21, s16
 8017fac:	eeb0 aa48 	vmov.f32	s20, s16
 8017fb0:	eef5 8a40 	vcmp.f32	s17, #0.0
 8017fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017fb8:	ed85 8a07 	vstr	s16, [r5, #28]
 8017fbc:	f000 84bf 	beq.w	801893e <m_kalman_3gyro.isra.6.constprop.36+0x2f9e>
 8017fc0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8017fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017fc8:	eef0 9a48 	vmov.f32	s19, s16
 8017fcc:	f43f af62 	beq.w	8017e94 <m_kalman_3gyro.isra.6.constprop.36+0x24f4>
 8017fd0:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8017fd4:	e760      	b.n	8017e98 <m_kalman_3gyro.isra.6.constprop.36+0x24f8>
 8017fd6:	eddf 7a9e 	vldr	s15, [pc, #632]	; 8018250 <m_kalman_3gyro.isra.6.constprop.36+0x28b0>
 8017fda:	e455      	b.n	8017888 <m_kalman_3gyro.isra.6.constprop.36+0x1ee8>
 8017fdc:	eeb0 aa48 	vmov.f32	s20, s16
 8017fe0:	eef5 9a40 	vcmp.f32	s19, #0.0
 8017fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017fe8:	ed85 8a06 	vstr	s16, [r5, #24]
 8017fec:	f000 849d 	beq.w	801892a <m_kalman_3gyro.isra.6.constprop.36+0x2f8a>
 8017ff0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8017ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ff8:	d004      	beq.n	8018004 <m_kalman_3gyro.isra.6.constprop.36+0x2664>
 8017ffa:	eef0 aa48 	vmov.f32	s21, s16
 8017ffe:	e73f      	b.n	8017e80 <m_kalman_3gyro.isra.6.constprop.36+0x24e0>
 8018000:	eeb0 aa48 	vmov.f32	s20, s16
 8018004:	ed85 8a07 	vstr	s16, [r5, #28]
 8018008:	eef0 9a48 	vmov.f32	s19, s16
 801800c:	eef0 aa48 	vmov.f32	s21, s16
 8018010:	eef0 7a48 	vmov.f32	s15, s16
 8018014:	e740      	b.n	8017e98 <m_kalman_3gyro.isra.6.constprop.36+0x24f8>
 8018016:	eef0 ca48 	vmov.f32	s25, s16
 801801a:	eeb5 aa40 	vcmp.f32	s20, #0.0
 801801e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018022:	ed85 8a04 	vstr	s16, [r5, #16]
 8018026:	f000 849e 	beq.w	8018966 <m_kalman_3gyro.isra.6.constprop.36+0x2fc6>
 801802a:	eef5 7a40 	vcmp.f32	s15, #0.0
 801802e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018032:	eeb0 ba48 	vmov.f32	s22, s16
 8018036:	d0a3      	beq.n	8017f80 <m_kalman_3gyro.isra.6.constprop.36+0x25e0>
 8018038:	e70e      	b.n	8017e58 <m_kalman_3gyro.isra.6.constprop.36+0x24b8>
 801803a:	eef0 ba48 	vmov.f32	s23, s16
 801803e:	e78c      	b.n	8017f5a <m_kalman_3gyro.isra.6.constprop.36+0x25ba>
 8018040:	edda 8a26 	vldr	s17, [sl, #152]	; 0x98
 8018044:	ed9a 9a25 	vldr	s18, [sl, #148]	; 0x94
 8018048:	ed9a 8a27 	vldr	s16, [sl, #156]	; 0x9c
 801804c:	ee28 aaa8 	vmul.f32	s20, s17, s17
 8018050:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8018054:	eea9 aa09 	vfma.f32	s20, s18, s18
 8018058:	eea8 aa08 	vfma.f32	s20, s16, s16
 801805c:	eeb4 aae7 	vcmpe.f32	s20, s15
 8018060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018064:	f100 84f3 	bmi.w	8018a4e <m_kalman_3gyro.isra.6.constprop.36+0x30ae>
 8018068:	eddf 9a79 	vldr	s19, [pc, #484]	; 8018250 <m_kalman_3gyro.isra.6.constprop.36+0x28b0>
 801806c:	f8ba 3030 	ldrh.w	r3, [sl, #48]	; 0x30
 8018070:	2b00      	cmp	r3, #0
 8018072:	f000 847c 	beq.w	801896e <m_kalman_3gyro.isra.6.constprop.36+0x2fce>
 8018076:	f8dd 06c8 	ldr.w	r0, [sp, #1736]	; 0x6c8
 801807a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801807c:	2300      	movs	r3, #0
 801807e:	6003      	str	r3, [r0, #0]
 8018080:	f8dd 06c8 	ldr.w	r0, [sp, #1736]	; 0x6c8
 8018084:	600b      	str	r3, [r1, #0]
 8018086:	6043      	str	r3, [r0, #4]
 8018088:	f8dd 06c8 	ldr.w	r0, [sp, #1736]	; 0x6c8
 801808c:	604b      	str	r3, [r1, #4]
 801808e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8018092:	608b      	str	r3, [r1, #8]
 8018094:	6083      	str	r3, [r0, #8]
 8018096:	60ca      	str	r2, [r1, #12]
 8018098:	60c2      	str	r2, [r0, #12]
 801809a:	460f      	mov	r7, r1
 801809c:	4638      	mov	r0, r7
 801809e:	9901      	ldr	r1, [sp, #4]
 80180a0:	f7f9 f99a 	bl	80113d8 <m_q2dcm_eml>
 80180a4:	ed97 9a01 	vldr	s18, [r7, #4]
 80180a8:	edd7 9a00 	vldr	s19, [r7]
 80180ac:	edd7 8a02 	vldr	s17, [r7, #8]
 80180b0:	ed97 8a03 	vldr	s16, [r7, #12]
 80180b4:	ee69 7a09 	vmul.f32	s15, s18, s18
 80180b8:	f50a 7616 	add.w	r6, sl, #600	; 0x258
 80180bc:	eee9 7aa9 	vfma.f32	s15, s19, s19
 80180c0:	eee8 7aa8 	vfma.f32	s15, s17, s17
 80180c4:	eee8 7a08 	vfma.f32	s15, s16, s16
 80180c8:	ee17 0a90 	vmov	r0, s15
 80180cc:	f7e8 f9bc 	bl	8000448 <__aeabi_f2d>
 80180d0:	f009 f862 	bl	8021198 <sqrt>
 80180d4:	f7e8 fd08 	bl	8000ae8 <__aeabi_d2f>
 80180d8:	ee07 0a90 	vmov	s15, r0
 80180dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80180e0:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80180e4:	e9dd 5429 	ldrd	r5, r4, [sp, #164]	; 0xa4
 80180e8:	ee69 9aa7 	vmul.f32	s19, s19, s15
 80180ec:	ee29 9a27 	vmul.f32	s18, s18, s15
 80180f0:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80180f4:	ee28 8a27 	vmul.f32	s16, s16, s15
 80180f8:	edc7 9a00 	vstr	s19, [r7]
 80180fc:	ed87 9a01 	vstr	s18, [r7, #4]
 8018100:	edc7 8a02 	vstr	s17, [r7, #8]
 8018104:	ed87 8a03 	vstr	s16, [r7, #12]
 8018108:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 801810c:	f8dd 76c4 	ldr.w	r7, [sp, #1732]	; 0x6c4
 8018110:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8018114:	6821      	ldr	r1, [r4, #0]
 8018116:	6862      	ldr	r2, [r4, #4]
 8018118:	68a3      	ldr	r3, [r4, #8]
 801811a:	68e0      	ldr	r0, [r4, #12]
 801811c:	60e8      	str	r0, [r5, #12]
 801811e:	3410      	adds	r4, #16
 8018120:	42b4      	cmp	r4, r6
 8018122:	6029      	str	r1, [r5, #0]
 8018124:	606a      	str	r2, [r5, #4]
 8018126:	60ab      	str	r3, [r5, #8]
 8018128:	f105 0510 	add.w	r5, r5, #16
 801812c:	d1f2      	bne.n	8018114 <m_kalman_3gyro.isra.6.constprop.36+0x2774>
 801812e:	6823      	ldr	r3, [r4, #0]
 8018130:	602b      	str	r3, [r5, #0]
 8018132:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 8018136:	f8da 3094 	ldr.w	r3, [sl, #148]	; 0x94
 801813a:	6013      	str	r3, [r2, #0]
 801813c:	f8da 3098 	ldr.w	r3, [sl, #152]	; 0x98
 8018140:	6053      	str	r3, [r2, #4]
 8018142:	f8da 309c 	ldr.w	r3, [sl, #156]	; 0x9c
 8018146:	6093      	str	r3, [r2, #8]
 8018148:	f8da 30a0 	ldr.w	r3, [sl, #160]	; 0xa0
 801814c:	60d3      	str	r3, [r2, #12]
 801814e:	f8da 30a4 	ldr.w	r3, [sl, #164]	; 0xa4
 8018152:	6113      	str	r3, [r2, #16]
 8018154:	f8da 30a8 	ldr.w	r3, [sl, #168]	; 0xa8
 8018158:	6153      	str	r3, [r2, #20]
 801815a:	f8da 30ac 	ldr.w	r3, [sl, #172]	; 0xac
 801815e:	6193      	str	r3, [r2, #24]
 8018160:	f8da 30b0 	ldr.w	r3, [sl, #176]	; 0xb0
 8018164:	61d3      	str	r3, [r2, #28]
 8018166:	f8da 30b4 	ldr.w	r3, [sl, #180]	; 0xb4
 801816a:	6213      	str	r3, [r2, #32]
 801816c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801816e:	f8dd 26cc 	ldr.w	r2, [sp, #1740]	; 0x6cc
 8018172:	681b      	ldr	r3, [r3, #0]
 8018174:	6013      	str	r3, [r2, #0]
 8018176:	f20d 6d34 	addw	sp, sp, #1588	; 0x634
 801817a:	ecbd 8b10 	vpop	{d8-d15}
 801817e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018182:	eddf 7a33 	vldr	s15, [pc, #204]	; 8018250 <m_kalman_3gyro.isra.6.constprop.36+0x28b0>
 8018186:	e439      	b.n	80179fc <m_kalman_3gyro.isra.6.constprop.36+0x205c>
 8018188:	eef5 ba40 	vcmp.f32	s23, #0.0
 801818c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018190:	f43f aed0 	beq.w	8017f34 <m_kalman_3gyro.isra.6.constprop.36+0x2594>
 8018194:	eef5 7a40 	vcmp.f32	s15, #0.0
 8018198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801819c:	eeb0 9a48 	vmov.f32	s18, s16
 80181a0:	eeb0 ca48 	vmov.f32	s24, s16
 80181a4:	f43f aeca 	beq.w	8017f3c <m_kalman_3gyro.isra.6.constprop.36+0x259c>
 80181a8:	e638      	b.n	8017e1c <m_kalman_3gyro.isra.6.constprop.36+0x247c>
 80181aa:	2300      	movs	r3, #0
 80181ac:	f88a 31ff 	strb.w	r3, [sl, #511]	; 0x1ff
 80181b0:	f88a 3200 	strb.w	r3, [sl, #512]	; 0x200
 80181b4:	f88a 3201 	strb.w	r3, [sl, #513]	; 0x201
 80181b8:	f88a 3205 	strb.w	r3, [sl, #517]	; 0x205
 80181bc:	f88a 3206 	strb.w	r3, [sl, #518]	; 0x206
 80181c0:	f7ff ba17 	b.w	80175f2 <m_kalman_3gyro.isra.6.constprop.36+0x1c52>
 80181c4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80181c8:	ee79 7a67 	vsub.f32	s15, s18, s15
 80181cc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80181ce:	eef0 7ae7 	vabs.f32	s15, s15
 80181d2:	edc3 7a00 	vstr	s15, [r3]
 80181d6:	f7fe bebd 	b.w	8016f54 <m_kalman_3gyro.isra.6.constprop.36+0x15b4>
 80181da:	f8da 2458 	ldr.w	r2, [sl, #1112]	; 0x458
 80181de:	2a31      	cmp	r2, #49	; 0x31
 80181e0:	f73e afe4 	bgt.w	80171ac <m_kalman_3gyro.isra.6.constprop.36+0x180c>
 80181e4:	2300      	movs	r3, #0
 80181e6:	2a00      	cmp	r2, #0
 80181e8:	f8aa 3202 	strh.w	r3, [sl, #514]	; 0x202
 80181ec:	f88a 3204 	strb.w	r3, [sl, #516]	; 0x204
 80181f0:	f102 0301 	add.w	r3, r2, #1
 80181f4:	dd03      	ble.n	80181fe <m_kalman_3gyro.isra.6.constprop.36+0x285e>
 80181f6:	2b00      	cmp	r3, #0
 80181f8:	bfd8      	it	le
 80181fa:	f06f 4300 	mvnle.w	r3, #2147483648	; 0x80000000
 80181fe:	f8ca 3458 	str.w	r3, [sl, #1112]	; 0x458
 8018202:	f7fe bfd3 	b.w	80171ac <m_kalman_3gyro.isra.6.constprop.36+0x180c>
 8018206:	f8da 20a4 	ldr.w	r2, [sl, #164]	; 0xa4
 801820a:	f8da 30a8 	ldr.w	r3, [sl, #168]	; 0xa8
 801820e:	f8ca 2080 	str.w	r2, [sl, #128]	; 0x80
 8018212:	f8ca 3084 	str.w	r3, [sl, #132]	; 0x84
 8018216:	f8da 20a0 	ldr.w	r2, [sl, #160]	; 0xa0
 801821a:	f8ca 207c 	str.w	r2, [sl, #124]	; 0x7c
 801821e:	2300      	movs	r3, #0
 8018220:	f8ca 3450 	str.w	r3, [sl, #1104]	; 0x450
 8018224:	f8ca 345c 	str.w	r3, [sl, #1116]	; 0x45c
 8018228:	ac86      	add	r4, sp, #536	; 0x218
 801822a:	f7fe bfb0 	b.w	801718e <m_kalman_3gyro.isra.6.constprop.36+0x17ee>
 801822e:	2301      	movs	r3, #1
 8018230:	f88a 3205 	strb.w	r3, [sl, #517]	; 0x205
 8018234:	f88a 3207 	strb.w	r3, [sl, #519]	; 0x207
 8018238:	f7ff b95c 	b.w	80174f4 <m_kalman_3gyro.isra.6.constprop.36+0x1b54>
 801823c:	eddd 8aa2 	vldr	s17, [sp, #648]	; 0x288
 8018240:	ed9d 9aac 	vldr	s18, [sp, #688]	; 0x2b0
 8018244:	f7fe be9f 	b.w	8016f86 <m_kalman_3gyro.isra.6.constprop.36+0x15e6>
 8018248:	2400      	movs	r4, #0
 801824a:	4d02      	ldr	r5, [pc, #8]	; (8018254 <m_kalman_3gyro.isra.6.constprop.36+0x28b4>)
 801824c:	f7fe bd6a 	b.w	8016d24 <m_kalman_3gyro.isra.6.constprop.36+0x1384>
 8018250:	00000000 	.word	0x00000000
 8018254:	3ff00000 	.word	0x3ff00000
 8018258:	cccccccd 	.word	0xcccccccd
 801825c:	f60a 0378 	addw	r3, sl, #2168	; 0x878
 8018260:	ed93 7a00 	vldr	s14, [r3]
 8018264:	f60a 0374 	addw	r3, sl, #2164	; 0x874
 8018268:	ee67 7a07 	vmul.f32	s15, s14, s14
 801826c:	ed93 aa00 	vldr	s20, [r3]
 8018270:	ed8d 7a06 	vstr	s14, [sp, #24]
 8018274:	eeea 7a0a 	vfma.f32	s15, s20, s20
 8018278:	f60a 037c 	addw	r3, sl, #2172	; 0x87c
 801827c:	ac86      	add	r4, sp, #536	; 0x218
 801827e:	edd3 aa00 	vldr	s21, [r3]
 8018282:	eeea 7aaa 	vfma.f32	s15, s21, s21
 8018286:	eef7 fa00 	vmov.f32	s31, #112	; 0x3f800000  1.0
 801828a:	ee17 0a90 	vmov	r0, s15
 801828e:	f7e8 f8db 	bl	8000448 <__aeabi_f2d>
 8018292:	f008 ff81 	bl	8021198 <sqrt>
 8018296:	f60a 0384 	addw	r3, sl, #2180	; 0x884
 801829a:	ed93 ba00 	vldr	s22, [r3]
 801829e:	f50a 6308 	add.w	r3, sl, #2176	; 0x880
 80182a2:	ed93 da00 	vldr	s26, [r3]
 80182a6:	ee6b 7a0b 	vmul.f32	s15, s22, s22
 80182aa:	f60a 0388 	addw	r3, sl, #2184	; 0x888
 80182ae:	eeed 7a0d 	vfma.f32	s15, s26, s26
 80182b2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80182b6:	edd3 ba00 	vldr	s23, [r3]
 80182ba:	eeeb 7aab 	vfma.f32	s15, s23, s23
 80182be:	ee17 0a90 	vmov	r0, s15
 80182c2:	f7e8 f8c1 	bl	8000448 <__aeabi_f2d>
 80182c6:	f008 ff67 	bl	8021198 <sqrt>
 80182ca:	f7e8 fc0d 	bl	8000ae8 <__aeabi_d2f>
 80182ce:	4bd2      	ldr	r3, [pc, #840]	; (8018618 <m_kalman_3gyro.isra.6.constprop.36+0x2c78>)
 80182d0:	ee07 0a90 	vmov	s15, r0
 80182d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80182d8:	edc3 7a00 	vstr	s15, [r3]
 80182dc:	ee8f caa7 	vdiv.f32	s24, s31, s15
 80182e0:	f7e8 fc02 	bl	8000ae8 <__aeabi_d2f>
 80182e4:	ee07 0a90 	vmov	s15, r0
 80182e8:	eecf 7aa7 	vdiv.f32	s15, s31, s15
 80182ec:	ee2c da0d 	vmul.f32	s26, s24, s26
 80182f0:	ee27 6aaa 	vmul.f32	s12, s15, s21
 80182f4:	ed9d 7a06 	vldr	s14, [sp, #24]
 80182f8:	ee6c ba2b 	vmul.f32	s23, s24, s23
 80182fc:	ee27 aa8a 	vmul.f32	s20, s15, s20
 8018300:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018304:	ee2d 7a46 	vnmul.f32	s14, s26, s12
 8018308:	ee2c ca0b 	vmul.f32	s24, s24, s22
 801830c:	eeab 7a8a 	vfma.f32	s14, s23, s20
 8018310:	ee67 6aeb 	vnmul.f32	s13, s15, s23
 8018314:	eef0 aa47 	vmov.f32	s21, s14
 8018318:	eee6 6a0c 	vfma.f32	s13, s12, s24
 801831c:	ee27 7a07 	vmul.f32	s14, s14, s14
 8018320:	ee2a aa4c 	vnmul.f32	s20, s20, s24
 8018324:	eeb0 ba66 	vmov.f32	s22, s13
 8018328:	eea7 aa8d 	vfma.f32	s20, s15, s26
 801832c:	eef0 7a47 	vmov.f32	s15, s14
 8018330:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8018334:	eeea 7a0a 	vfma.f32	s15, s20, s20
 8018338:	ee17 0a90 	vmov	r0, s15
 801833c:	f7e8 f884 	bl	8000448 <__aeabi_f2d>
 8018340:	f008 ff2a 	bl	8021198 <sqrt>
 8018344:	f7e8 fbd0 	bl	8000ae8 <__aeabi_d2f>
 8018348:	ee07 0a90 	vmov	s15, r0
 801834c:	eecf 7aa7 	vdiv.f32	s15, s31, s15
 8018350:	aa7d      	add	r2, sp, #500	; 0x1f4
 8018352:	4620      	mov	r0, r4
 8018354:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8018356:	ed84 da02 	vstr	s26, [r4, #8]
 801835a:	ee6b 6a27 	vmul.f32	s13, s22, s15
 801835e:	ee2a 7aa7 	vmul.f32	s14, s21, s15
 8018362:	ee6a 7a27 	vmul.f32	s15, s20, s15
 8018366:	ee6d 5a47 	vnmul.f32	s11, s26, s14
 801836a:	ee2c 5a67 	vnmul.f32	s10, s24, s15
 801836e:	ee26 6aeb 	vnmul.f32	s12, s13, s23
 8018372:	eeab 5a87 	vfma.f32	s10, s23, s14
 8018376:	eee6 5a8c 	vfma.f32	s11, s13, s24
 801837a:	eea7 6a8d 	vfma.f32	s12, s15, s26
 801837e:	edc4 6a01 	vstr	s13, [r4, #4]
 8018382:	ed84 7a04 	vstr	s14, [r4, #16]
 8018386:	edc4 7a07 	vstr	s15, [r4, #28]
 801838a:	ed84 5a00 	vstr	s10, [r4]
 801838e:	edc4 5a06 	vstr	s11, [r4, #24]
 8018392:	ed84 6a03 	vstr	s12, [r4, #12]
 8018396:	ed84 ca05 	vstr	s24, [r4, #20]
 801839a:	edc4 ba08 	vstr	s23, [r4, #32]
 801839e:	f7f8 fe1d 	bl	8010fdc <m_mldivide>
 80183a2:	a94b      	add	r1, sp, #300	; 0x12c
 80183a4:	a87d      	add	r0, sp, #500	; 0x1f4
 80183a6:	f7f9 f997 	bl	80116d8 <m_dcm2q_eml>
 80183aa:	eddf 7a9c 	vldr	s15, [pc, #624]	; 801861c <m_kalman_3gyro.isra.6.constprop.36+0x2c7c>
 80183ae:	984b      	ldr	r0, [sp, #300]	; 0x12c
 80183b0:	994c      	ldr	r1, [sp, #304]	; 0x130
 80183b2:	9a4d      	ldr	r2, [sp, #308]	; 0x134
 80183b4:	9b4e      	ldr	r3, [sp, #312]	; 0x138
 80183b6:	904f      	str	r0, [sp, #316]	; 0x13c
 80183b8:	eeb0 7a67 	vmov.f32	s14, s15
 80183bc:	eef0 6a67 	vmov.f32	s13, s15
 80183c0:	9150      	str	r1, [sp, #320]	; 0x140
 80183c2:	9251      	str	r2, [sp, #324]	; 0x144
 80183c4:	9352      	str	r3, [sp, #328]	; 0x148
 80183c6:	ed96 5a06 	vldr	s10, [r6, #24]
 80183ca:	edd6 5a07 	vldr	s11, [r6, #28]
 80183ce:	ed96 6a08 	vldr	s12, [r6, #32]
 80183d2:	3624      	adds	r6, #36	; 0x24
 80183d4:	42b5      	cmp	r5, r6
 80183d6:	ee76 6a85 	vadd.f32	s13, s13, s10
 80183da:	ee37 7a25 	vadd.f32	s14, s14, s11
 80183de:	ee77 7a86 	vadd.f32	s15, s15, s12
 80183e2:	d1f0      	bne.n	80183c6 <m_kalman_3gyro.isra.6.constprop.36+0x2a26>
 80183e4:	ed9f 6a8e 	vldr	s12, [pc, #568]	; 8018620 <m_kalman_3gyro.isra.6.constprop.36+0x2c80>
 80183e8:	eeb4 eaed 	vcmpe.f32	s28, s27
 80183ec:	ee66 6a86 	vmul.f32	s13, s13, s12
 80183f0:	ee27 7a06 	vmul.f32	s14, s14, s12
 80183f4:	ee67 7a86 	vmul.f32	s15, s15, s12
 80183f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80183fc:	edcd 6a3e 	vstr	s13, [sp, #248]	; 0xf8
 8018400:	ed8d 7a3f 	vstr	s14, [sp, #252]	; 0xfc
 8018404:	edcd 7a40 	vstr	s15, [sp, #256]	; 0x100
 8018408:	f340 8339 	ble.w	8018a7e <m_kalman_3gyro.isra.6.constprop.36+0x30de>
 801840c:	eef4 eaec 	vcmpe.f32	s29, s25
 8018410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018414:	f77e ae9c 	ble.w	8017150 <m_kalman_3gyro.isra.6.constprop.36+0x17b0>
 8018418:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801841a:	edd3 7a00 	vldr	s15, [r3]
 801841e:	eeb4 fae7 	vcmpe.f32	s30, s15
 8018422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018426:	f77e ae93 	ble.w	8017150 <m_kalman_3gyro.isra.6.constprop.36+0x17b0>
 801842a:	9b08      	ldr	r3, [sp, #32]
 801842c:	eddf 7a7d 	vldr	s15, [pc, #500]	; 8018624 <m_kalman_3gyro.isra.6.constprop.36+0x2c84>
 8018430:	ed93 7a00 	vldr	s14, [r3]
 8018434:	eeb0 7ac7 	vabs.f32	s14, s14
 8018438:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801843c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018440:	f57e ae86 	bpl.w	8017150 <m_kalman_3gyro.isra.6.constprop.36+0x17b0>
 8018444:	ed93 7a01 	vldr	s14, [r3, #4]
 8018448:	eeb0 7ac7 	vabs.f32	s14, s14
 801844c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018454:	f57e ae7c 	bpl.w	8017150 <m_kalman_3gyro.isra.6.constprop.36+0x17b0>
 8018458:	ed93 7a02 	vldr	s14, [r3, #8]
 801845c:	eeb0 7ac7 	vabs.f32	s14, s14
 8018460:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018468:	f57e ae72 	bpl.w	8017150 <m_kalman_3gyro.isra.6.constprop.36+0x17b0>
 801846c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801846e:	eddf 7a6e 	vldr	s15, [pc, #440]	; 8018628 <m_kalman_3gyro.isra.6.constprop.36+0x2c88>
 8018472:	ed93 7a00 	vldr	s14, [r3]
 8018476:	eeb0 7ac7 	vabs.f32	s14, s14
 801847a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801847e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018482:	f57e ae65 	bpl.w	8017150 <m_kalman_3gyro.isra.6.constprop.36+0x17b0>
 8018486:	ed93 7a01 	vldr	s14, [r3, #4]
 801848a:	eeb0 7ac7 	vabs.f32	s14, s14
 801848e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018496:	f57e ae5b 	bpl.w	8017150 <m_kalman_3gyro.isra.6.constprop.36+0x17b0>
 801849a:	ed93 7a02 	vldr	s14, [r3, #8]
 801849e:	eeb0 7ac7 	vabs.f32	s14, s14
 80184a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80184a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80184aa:	f57e ae51 	bpl.w	8017150 <m_kalman_3gyro.isra.6.constprop.36+0x17b0>
 80184ae:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80184b0:	f8da 2450 	ldr.w	r2, [sl, #1104]	; 0x450
 80184b4:	ed93 5a00 	vldr	s10, [r3]
 80184b8:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 80184ba:	edd3 5a00 	vldr	s11, [r3]
 80184be:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80184c0:	edd3 6a00 	vldr	s13, [r3]
 80184c4:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80184c6:	2a09      	cmp	r2, #9
 80184c8:	eef4 5ac5 	vcmpe.f32	s11, s10
 80184cc:	f50a 6198 	add.w	r1, sl, #1216	; 0x4c0
 80184d0:	ed93 7a00 	vldr	s14, [r3]
 80184d4:	ed91 6a00 	vldr	s12, [r1]
 80184d8:	bfcc      	ite	gt
 80184da:	230a      	movgt	r3, #10
 80184dc:	2305      	movle	r3, #5
 80184de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80184e2:	bfb4      	ite	lt
 80184e4:	eef0 7a45 	vmovlt.f32	s15, s10
 80184e8:	eef0 7a65 	vmovge.f32	s15, s11
 80184ec:	eeb4 6ae7 	vcmpe.f32	s12, s15
 80184f0:	bf88      	it	hi
 80184f2:	eef0 5a45 	vmovhi.f32	s11, s10
 80184f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80184fa:	eeb4 6ae5 	vcmpe.f32	s12, s11
 80184fe:	bfa8      	it	ge
 8018500:	eef0 7a46 	vmovge.f32	s15, s12
 8018504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018508:	bf88      	it	hi
 801850a:	eeb0 6a65 	vmovhi.f32	s12, s11
 801850e:	eef4 6ae7 	vcmpe.f32	s13, s15
 8018512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018516:	eef4 6ac6 	vcmpe.f32	s13, s12
 801851a:	bfa8      	it	ge
 801851c:	eef0 7a66 	vmovge.f32	s15, s13
 8018520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018524:	bf88      	it	hi
 8018526:	eef0 6a46 	vmovhi.f32	s13, s12
 801852a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801852e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018532:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8018536:	bfa8      	it	ge
 8018538:	eef0 7a47 	vmovge.f32	s15, s14
 801853c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018540:	bf88      	it	hi
 8018542:	eeb0 7a66 	vmovhi.f32	s14, s13
 8018546:	2b05      	cmp	r3, #5
 8018548:	d05b      	beq.n	8018602 <m_kalman_3gyro.isra.6.constprop.36+0x2c62>
 801854a:	f20a 512c 	addw	r1, sl, #1324	; 0x52c
 801854e:	edd1 6a00 	vldr	s13, [r1]
 8018552:	f50a 61aa 	add.w	r1, sl, #1360	; 0x550
 8018556:	eef4 6ae7 	vcmpe.f32	s13, s15
 801855a:	ed91 6a00 	vldr	s12, [r1]
 801855e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018562:	eef4 6ac7 	vcmpe.f32	s13, s14
 8018566:	bfa8      	it	ge
 8018568:	eef0 7a66 	vmovge.f32	s15, s13
 801856c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018570:	bf98      	it	ls
 8018572:	eeb0 7a66 	vmovls.f32	s14, s13
 8018576:	eeb4 6ae7 	vcmpe.f32	s12, s15
 801857a:	f20a 5174 	addw	r1, sl, #1396	; 0x574
 801857e:	edd1 6a00 	vldr	s13, [r1]
 8018582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018586:	eeb4 6ac7 	vcmpe.f32	s12, s14
 801858a:	bfa8      	it	ge
 801858c:	eef0 7a46 	vmovge.f32	s15, s12
 8018590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018594:	bf88      	it	hi
 8018596:	eeb0 6a47 	vmovhi.f32	s12, s14
 801859a:	eef4 6ae7 	vcmpe.f32	s13, s15
 801859e:	f50a 61b3 	add.w	r1, sl, #1432	; 0x598
 80185a2:	ed91 7a00 	vldr	s14, [r1]
 80185a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80185aa:	eef4 6ac6 	vcmpe.f32	s13, s12
 80185ae:	bfa8      	it	ge
 80185b0:	eef0 7a66 	vmovge.f32	s15, s13
 80185b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80185b8:	bf88      	it	hi
 80185ba:	eef0 6a46 	vmovhi.f32	s13, s12
 80185be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80185c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80185c6:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80185ca:	bfa8      	it	ge
 80185cc:	eef0 7a47 	vmovge.f32	s15, s14
 80185d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80185d4:	bf88      	it	hi
 80185d6:	eeb0 7a66 	vmovhi.f32	s14, s13
 80185da:	2b0a      	cmp	r3, #10
 80185dc:	d111      	bne.n	8018602 <m_kalman_3gyro.isra.6.constprop.36+0x2c62>
 80185de:	f20a 51bc 	addw	r1, sl, #1468	; 0x5bc
 80185e2:	edd1 6a00 	vldr	s13, [r1]
 80185e6:	eef4 7ae6 	vcmpe.f32	s15, s13
 80185ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80185ee:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80185f2:	bfb8      	it	lt
 80185f4:	eef0 7a66 	vmovlt.f32	s15, s13
 80185f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80185fc:	bf88      	it	hi
 80185fe:	eeb0 7a66 	vmovhi.f32	s14, s13
 8018602:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018606:	ed9f 7a09 	vldr	s14, [pc, #36]	; 801862c <m_kalman_3gyro.isra.6.constprop.36+0x2c8c>
 801860a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801860e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018612:	f73e ad9d 	bgt.w	8017150 <m_kalman_3gyro.isra.6.constprop.36+0x17b0>
 8018616:	e00b      	b.n	8018630 <m_kalman_3gyro.isra.6.constprop.36+0x2c90>
 8018618:	20005364 	.word	0x20005364
 801861c:	00000000 	.word	0x00000000
 8018620:	3d088889 	.word	0x3d088889
 8018624:	3e4ccccd 	.word	0x3e4ccccd
 8018628:	3f99999a 	.word	0x3f99999a
 801862c:	3be56042 	.word	0x3be56042
 8018630:	9921      	ldr	r1, [sp, #132]	; 0x84
 8018632:	ed91 5a00 	vldr	s10, [r1]
 8018636:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8018638:	edd1 5a00 	vldr	s11, [r1]
 801863c:	9930      	ldr	r1, [sp, #192]	; 0xc0
 801863e:	edd1 6a00 	vldr	s13, [r1]
 8018642:	9933      	ldr	r1, [sp, #204]	; 0xcc
 8018644:	eef4 5ac5 	vcmpe.f32	s11, s10
 8018648:	ed91 7a00 	vldr	s14, [r1]
 801864c:	f20a 41c4 	addw	r1, sl, #1220	; 0x4c4
 8018650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018654:	ed91 6a00 	vldr	s12, [r1]
 8018658:	bfb4      	ite	lt
 801865a:	eef0 7a45 	vmovlt.f32	s15, s10
 801865e:	eef0 7a65 	vmovge.f32	s15, s11
 8018662:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8018666:	bf88      	it	hi
 8018668:	eef0 5a45 	vmovhi.f32	s11, s10
 801866c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018670:	eeb4 6ae5 	vcmpe.f32	s12, s11
 8018674:	bfa8      	it	ge
 8018676:	eef0 7a46 	vmovge.f32	s15, s12
 801867a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801867e:	bf88      	it	hi
 8018680:	eeb0 6a65 	vmovhi.f32	s12, s11
 8018684:	eef4 6ae7 	vcmpe.f32	s13, s15
 8018688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801868c:	eef4 6ac6 	vcmpe.f32	s13, s12
 8018690:	bfa8      	it	ge
 8018692:	eef0 7a66 	vmovge.f32	s15, s13
 8018696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801869a:	bf88      	it	hi
 801869c:	eef0 6a46 	vmovhi.f32	s13, s12
 80186a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80186a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80186a8:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80186ac:	bfa8      	it	ge
 80186ae:	eef0 7a47 	vmovge.f32	s15, s14
 80186b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80186b6:	bf88      	it	hi
 80186b8:	eeb0 7a66 	vmovhi.f32	s14, s13
 80186bc:	2b05      	cmp	r3, #5
 80186be:	d05b      	beq.n	8018778 <m_kalman_3gyro.isra.6.constprop.36+0x2dd8>
 80186c0:	f50a 61a6 	add.w	r1, sl, #1328	; 0x530
 80186c4:	edd1 6a00 	vldr	s13, [r1]
 80186c8:	f20a 5154 	addw	r1, sl, #1364	; 0x554
 80186cc:	eef4 6ae7 	vcmpe.f32	s13, s15
 80186d0:	ed91 6a00 	vldr	s12, [r1]
 80186d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80186d8:	eef4 6ac7 	vcmpe.f32	s13, s14
 80186dc:	bfa8      	it	ge
 80186de:	eef0 7a66 	vmovge.f32	s15, s13
 80186e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80186e6:	bf98      	it	ls
 80186e8:	eeb0 7a66 	vmovls.f32	s14, s13
 80186ec:	eeb4 6ae7 	vcmpe.f32	s12, s15
 80186f0:	f50a 61af 	add.w	r1, sl, #1400	; 0x578
 80186f4:	edd1 6a00 	vldr	s13, [r1]
 80186f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80186fc:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8018700:	bfa8      	it	ge
 8018702:	eef0 7a46 	vmovge.f32	s15, s12
 8018706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801870a:	bf88      	it	hi
 801870c:	eeb0 6a47 	vmovhi.f32	s12, s14
 8018710:	eef4 6ae7 	vcmpe.f32	s13, s15
 8018714:	f20a 519c 	addw	r1, sl, #1436	; 0x59c
 8018718:	ed91 7a00 	vldr	s14, [r1]
 801871c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018720:	eef4 6ac6 	vcmpe.f32	s13, s12
 8018724:	bfa8      	it	ge
 8018726:	eef0 7a66 	vmovge.f32	s15, s13
 801872a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801872e:	bf88      	it	hi
 8018730:	eef0 6a46 	vmovhi.f32	s13, s12
 8018734:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801873c:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8018740:	bfa8      	it	ge
 8018742:	eef0 7a47 	vmovge.f32	s15, s14
 8018746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801874a:	bf88      	it	hi
 801874c:	eeb0 7a66 	vmovhi.f32	s14, s13
 8018750:	2b0a      	cmp	r3, #10
 8018752:	d111      	bne.n	8018778 <m_kalman_3gyro.isra.6.constprop.36+0x2dd8>
 8018754:	f50a 61b8 	add.w	r1, sl, #1472	; 0x5c0
 8018758:	edd1 6a00 	vldr	s13, [r1]
 801875c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8018760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018764:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8018768:	bfb8      	it	lt
 801876a:	eef0 7a66 	vmovlt.f32	s15, s13
 801876e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018772:	bf88      	it	hi
 8018774:	eeb0 7a66 	vmovhi.f32	s14, s13
 8018778:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801877c:	ed1f 7a55 	vldr	s14, [pc, #-340]	; 801862c <m_kalman_3gyro.isra.6.constprop.36+0x2c8c>
 8018780:	eef4 7ac7 	vcmpe.f32	s15, s14
 8018784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018788:	f73e ace2 	bgt.w	8017150 <m_kalman_3gyro.isra.6.constprop.36+0x17b0>
 801878c:	9922      	ldr	r1, [sp, #136]	; 0x88
 801878e:	edd1 6a00 	vldr	s13, [r1]
 8018792:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8018794:	ed91 5a00 	vldr	s10, [r1]
 8018798:	9931      	ldr	r1, [sp, #196]	; 0xc4
 801879a:	edd1 5a00 	vldr	s11, [r1]
 801879e:	9934      	ldr	r1, [sp, #208]	; 0xd0
 80187a0:	eef4 6ac5 	vcmpe.f32	s13, s10
 80187a4:	ed91 6a00 	vldr	s12, [r1]
 80187a8:	f50a 6199 	add.w	r1, sl, #1224	; 0x4c8
 80187ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187b0:	ed91 7a00 	vldr	s14, [r1]
 80187b4:	bfb4      	ite	lt
 80187b6:	eef0 7a45 	vmovlt.f32	s15, s10
 80187ba:	eef0 7a66 	vmovge.f32	s15, s13
 80187be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80187c2:	bf88      	it	hi
 80187c4:	eef0 6a45 	vmovhi.f32	s13, s10
 80187c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187cc:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80187d0:	bfa8      	it	ge
 80187d2:	eef0 7a47 	vmovge.f32	s15, s14
 80187d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187da:	bf88      	it	hi
 80187dc:	eeb0 7a66 	vmovhi.f32	s14, s13
 80187e0:	eef4 7ae5 	vcmpe.f32	s15, s11
 80187e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187e8:	eeb4 7ae5 	vcmpe.f32	s14, s11
 80187ec:	bfb8      	it	lt
 80187ee:	eef0 7a65 	vmovlt.f32	s15, s11
 80187f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187f6:	bf88      	it	hi
 80187f8:	eeb0 7a65 	vmovhi.f32	s14, s11
 80187fc:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8018800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018804:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8018808:	bfa8      	it	ge
 801880a:	eef0 7a46 	vmovge.f32	s15, s12
 801880e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018812:	bf88      	it	hi
 8018814:	eeb0 7a46 	vmovhi.f32	s14, s12
 8018818:	2b05      	cmp	r3, #5
 801881a:	d05b      	beq.n	80188d4 <m_kalman_3gyro.isra.6.constprop.36+0x2f34>
 801881c:	f20a 5134 	addw	r1, sl, #1332	; 0x534
 8018820:	ed91 6a00 	vldr	s12, [r1]
 8018824:	f50a 61ab 	add.w	r1, sl, #1368	; 0x558
 8018828:	eeb4 6ae7 	vcmpe.f32	s12, s15
 801882c:	edd1 6a00 	vldr	s13, [r1]
 8018830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018834:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8018838:	bfa8      	it	ge
 801883a:	eef0 7a46 	vmovge.f32	s15, s12
 801883e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018842:	bf88      	it	hi
 8018844:	eeb0 6a47 	vmovhi.f32	s12, s14
 8018848:	eef4 6ae7 	vcmpe.f32	s13, s15
 801884c:	f20a 517c 	addw	r1, sl, #1404	; 0x57c
 8018850:	ed91 7a00 	vldr	s14, [r1]
 8018854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018858:	eef4 6ac6 	vcmpe.f32	s13, s12
 801885c:	bfa8      	it	ge
 801885e:	eef0 7a66 	vmovge.f32	s15, s13
 8018862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018866:	bf88      	it	hi
 8018868:	eef0 6a46 	vmovhi.f32	s13, s12
 801886c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018870:	f50a 61b4 	add.w	r1, sl, #1440	; 0x5a0
 8018874:	ed91 6a00 	vldr	s12, [r1]
 8018878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801887c:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8018880:	bfa8      	it	ge
 8018882:	eef0 7a47 	vmovge.f32	s15, s14
 8018886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801888a:	bf88      	it	hi
 801888c:	eeb0 7a66 	vmovhi.f32	s14, s13
 8018890:	eef4 7ac6 	vcmpe.f32	s15, s12
 8018894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018898:	eeb4 7ac6 	vcmpe.f32	s14, s12
 801889c:	bfb8      	it	lt
 801889e:	eef0 7a46 	vmovlt.f32	s15, s12
 80188a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188a6:	bf88      	it	hi
 80188a8:	eeb0 7a46 	vmovhi.f32	s14, s12
 80188ac:	2b0a      	cmp	r3, #10
 80188ae:	d111      	bne.n	80188d4 <m_kalman_3gyro.isra.6.constprop.36+0x2f34>
 80188b0:	f20a 53c4 	addw	r3, sl, #1476	; 0x5c4
 80188b4:	edd3 6a00 	vldr	s13, [r3]
 80188b8:	eef4 7ae6 	vcmpe.f32	s15, s13
 80188bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188c0:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80188c4:	bfb8      	it	lt
 80188c6:	eef0 7a66 	vmovlt.f32	s15, s13
 80188ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188ce:	bf88      	it	hi
 80188d0:	eeb0 7a66 	vmovhi.f32	s14, s13
 80188d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80188d8:	ed1f 7aac 	vldr	s14, [pc, #-688]	; 801862c <m_kalman_3gyro.isra.6.constprop.36+0x2c8c>
 80188dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80188e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188e4:	f73e ac34 	bgt.w	8017150 <m_kalman_3gyro.isra.6.constprop.36+0x17b0>
 80188e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80188ea:	2b00      	cmp	r3, #0
 80188ec:	f43e ac34 	beq.w	8017158 <m_kalman_3gyro.isra.6.constprop.36+0x17b8>
 80188f0:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 80188f4:	2b01      	cmp	r3, #1
 80188f6:	f040 8268 	bne.w	8018dca <m_kalman_3gyro.isra.6.constprop.36+0x342a>
 80188fa:	2a0a      	cmp	r2, #10
 80188fc:	f000 85dc 	beq.w	80194b8 <m_kalman_3gyro.isra.6.constprop.36+0x3b18>
 8018900:	2300      	movs	r3, #0
 8018902:	2a00      	cmp	r2, #0
 8018904:	f8aa 3202 	strh.w	r3, [sl, #514]	; 0x202
 8018908:	f88a 3204 	strb.w	r3, [sl, #516]	; 0x204
 801890c:	f102 0301 	add.w	r3, r2, #1
 8018910:	dd03      	ble.n	801891a <m_kalman_3gyro.isra.6.constprop.36+0x2f7a>
 8018912:	2b00      	cmp	r3, #0
 8018914:	bfd8      	it	le
 8018916:	f06f 4300 	mvnle.w	r3, #2147483648	; 0x80000000
 801891a:	2200      	movs	r2, #0
 801891c:	f8ca 3450 	str.w	r3, [sl, #1104]	; 0x450
 8018920:	f8ca 245c 	str.w	r2, [sl, #1116]	; 0x45c
 8018924:	ac86      	add	r4, sp, #536	; 0x218
 8018926:	f7fe bc32 	b.w	801718e <m_kalman_3gyro.isra.6.constprop.36+0x17ee>
 801892a:	eef5 8a40 	vcmp.f32	s17, #0.0
 801892e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018932:	eef0 aa48 	vmov.f32	s21, s16
 8018936:	ed85 8a07 	vstr	s16, [r5, #28]
 801893a:	f47f ab41 	bne.w	8017fc0 <m_kalman_3gyro.isra.6.constprop.36+0x2620>
 801893e:	eef0 9a48 	vmov.f32	s19, s16
 8018942:	eef0 7a48 	vmov.f32	s15, s16
 8018946:	f7ff baa7 	b.w	8017e98 <m_kalman_3gyro.isra.6.constprop.36+0x24f8>
 801894a:	eeb0 ca48 	vmov.f32	s24, s16
 801894e:	ee27 9a89 	vmul.f32	s18, s15, s18
 8018952:	eef5 ba40 	vcmp.f32	s23, #0.0
 8018956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801895a:	ed85 9a01 	vstr	s18, [r5, #4]
 801895e:	f47f aa5d 	bne.w	8017e1c <m_kalman_3gyro.isra.6.constprop.36+0x247c>
 8018962:	f7ff baeb 	b.w	8017f3c <m_kalman_3gyro.isra.6.constprop.36+0x259c>
 8018966:	eeb0 ba48 	vmov.f32	s22, s16
 801896a:	f7ff bb09 	b.w	8017f80 <m_kalman_3gyro.isra.6.constprop.36+0x25e0>
 801896e:	eea9 aaa9 	vfma.f32	s20, s19, s19
 8018972:	eeb1 9a49 	vneg.f32	s18, s18
 8018976:	ee1a 0a10 	vmov	r0, s20
 801897a:	f7e7 fd65 	bl	8000448 <__aeabi_f2d>
 801897e:	f008 fc0b 	bl	8021198 <sqrt>
 8018982:	f7e8 f8b1 	bl	8000ae8 <__aeabi_d2f>
 8018986:	ee07 0a90 	vmov	s15, r0
 801898a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801898e:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8018992:	f8dd 36a8 	ldr.w	r3, [sp, #1704]	; 0x6a8
 8018996:	789c      	ldrb	r4, [r3, #2]
 8018998:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801899a:	6818      	ldr	r0, [r3, #0]
 801899c:	685a      	ldr	r2, [r3, #4]
 801899e:	6899      	ldr	r1, [r3, #8]
 80189a0:	904b      	str	r0, [sp, #300]	; 0x12c
 80189a2:	461d      	mov	r5, r3
 80189a4:	a853      	add	r0, sp, #332	; 0x14c
 80189a6:	68db      	ldr	r3, [r3, #12]
 80189a8:	924c      	str	r2, [sp, #304]	; 0x130
 80189aa:	eeb1 0a48 	vneg.f32	s0, s16
 80189ae:	eef1 8a68 	vneg.f32	s17, s17
 80189b2:	ee29 ba27 	vmul.f32	s22, s18, s15
 80189b6:	ee68 aaa7 	vmul.f32	s21, s17, s15
 80189ba:	ee20 aa27 	vmul.f32	s20, s0, s15
 80189be:	ee29 8aa7 	vmul.f32	s16, s19, s15
 80189c2:	2c00      	cmp	r4, #0
 80189c4:	d051      	beq.n	8018a6a <m_kalman_3gyro.isra.6.constprop.36+0x30ca>
 80189c6:	462a      	mov	r2, r5
 80189c8:	914d      	str	r1, [sp, #308]	; 0x134
 80189ca:	a94b      	add	r1, sp, #300	; 0x12c
 80189cc:	934e      	str	r3, [sp, #312]	; 0x138
 80189ce:	ed8d 9a53 	vstr	s18, [sp, #332]	; 0x14c
 80189d2:	edcd 8a54 	vstr	s17, [sp, #336]	; 0x150
 80189d6:	ed8d 0a55 	vstr	s0, [sp, #340]	; 0x154
 80189da:	edcd 9a56 	vstr	s19, [sp, #344]	; 0x158
 80189de:	ac4f      	add	r4, sp, #316	; 0x13c
 80189e0:	f7f8 fcba 	bl	8011358 <m_qmult_eml>
 80189e4:	ed8d ba4f 	vstr	s22, [sp, #316]	; 0x13c
 80189e8:	edcd aa50 	vstr	s21, [sp, #320]	; 0x140
 80189ec:	ed8d aa51 	vstr	s20, [sp, #324]	; 0x144
 80189f0:	ed8d 8a52 	vstr	s16, [sp, #328]	; 0x148
 80189f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80189f6:	f8dd 46c8 	ldr.w	r4, [sp, #1736]	; 0x6c8
 80189fa:	ed8d 9a53 	vstr	s18, [sp, #332]	; 0x14c
 80189fe:	edcd 8a54 	vstr	s17, [sp, #336]	; 0x150
 8018a02:	ed8d 0a55 	vstr	s0, [sp, #340]	; 0x154
 8018a06:	edcd 9a56 	vstr	s19, [sp, #344]	; 0x158
 8018a0a:	ed8d 9a4b 	vstr	s18, [sp, #300]	; 0x12c
 8018a0e:	edcd 8a4c 	vstr	s17, [sp, #304]	; 0x130
 8018a12:	ed8d 0a4d 	vstr	s0, [sp, #308]	; 0x134
 8018a16:	edcd 9a4e 	vstr	s19, [sp, #312]	; 0x138
 8018a1a:	6020      	str	r0, [r4, #0]
 8018a1c:	6061      	str	r1, [r4, #4]
 8018a1e:	60a2      	str	r2, [r4, #8]
 8018a20:	60e3      	str	r3, [r4, #12]
 8018a22:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8018a24:	f7ff bb3a 	b.w	801809c <m_kalman_3gyro.isra.6.constprop.36+0x26fc>
 8018a28:	f89a 28ae 	ldrb.w	r2, [sl, #2222]	; 0x8ae
 8018a2c:	2a00      	cmp	r2, #0
 8018a2e:	f000 8357 	beq.w	80190e0 <m_kalman_3gyro.isra.6.constprop.36+0x3740>
 8018a32:	2300      	movs	r3, #0
 8018a34:	3a01      	subs	r2, #1
 8018a36:	f88a 28ae 	strb.w	r2, [sl, #2222]	; 0x8ae
 8018a3a:	f8aa 31fc 	strh.w	r3, [sl, #508]	; 0x1fc
 8018a3e:	f88a 31fe 	strb.w	r3, [sl, #510]	; 0x1fe
 8018a42:	f88a 3205 	strb.w	r3, [sl, #517]	; 0x205
 8018a46:	f88a 3207 	strb.w	r3, [sl, #519]	; 0x207
 8018a4a:	f7fe be07 	b.w	801765c <m_kalman_3gyro.isra.6.constprop.36+0x1cbc>
 8018a4e:	ee77 7aca 	vsub.f32	s15, s15, s20
 8018a52:	ee17 0a90 	vmov	r0, s15
 8018a56:	f7e7 fcf7 	bl	8000448 <__aeabi_f2d>
 8018a5a:	f008 fb9d 	bl	8021198 <sqrt>
 8018a5e:	f7e8 f843 	bl	8000ae8 <__aeabi_d2f>
 8018a62:	ee09 0a90 	vmov	s19, r0
 8018a66:	f7ff bb01 	b.w	801806c <m_kalman_3gyro.isra.6.constprop.36+0x26cc>
 8018a6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018a6c:	e7ac      	b.n	80189c8 <m_kalman_3gyro.isra.6.constprop.36+0x3028>
 8018a6e:	2400      	movs	r4, #0
 8018a70:	4dcd      	ldr	r5, [pc, #820]	; (8018da8 <m_kalman_3gyro.isra.6.constprop.36+0x3408>)
 8018a72:	f7fe b957 	b.w	8016d24 <m_kalman_3gyro.isra.6.constprop.36+0x1384>
 8018a76:	eddd 9a64 	vldr	s19, [sp, #400]	; 0x190
 8018a7a:	f7fe bae7 	b.w	801704c <m_kalman_3gyro.isra.6.constprop.36+0x16ac>
 8018a7e:	2301      	movs	r3, #1
 8018a80:	f88a 3204 	strb.w	r3, [sl, #516]	; 0x204
 8018a84:	f240 1201 	movw	r2, #257	; 0x101
 8018a88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018a8a:	f8aa 2202 	strh.w	r2, [sl, #514]	; 0x202
 8018a8e:	edd3 7a00 	vldr	s15, [r3]
 8018a92:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8018a96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018a9a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8018a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018aa2:	f200 844a 	bhi.w	801933a <m_kalman_3gyro.isra.6.constprop.36+0x399a>
 8018aa6:	f8dd 2698 	ldr.w	r2, [sp, #1688]	; 0x698
 8018aaa:	f89a 38a4 	ldrb.w	r3, [sl, #2212]	; 0x8a4
 8018aae:	edd2 6a06 	vldr	s13, [r2, #24]
 8018ab2:	ed92 7a07 	vldr	s14, [r2, #28]
 8018ab6:	edd2 7a08 	vldr	s15, [r2, #32]
 8018aba:	2b00      	cmp	r3, #0
 8018abc:	f000 86e1 	beq.w	8019882 <m_kalman_3gyro.isra.6.constprop.36+0x3ee2>
 8018ac0:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8018ac4:	ee66 6a86 	vmul.f32	s13, s13, s12
 8018ac8:	ee27 7a06 	vmul.f32	s14, s14, s12
 8018acc:	ee67 7a86 	vmul.f32	s15, s15, s12
 8018ad0:	edc2 6a06 	vstr	s13, [r2, #24]
 8018ad4:	ed82 7a07 	vstr	s14, [r2, #28]
 8018ad8:	edc2 7a08 	vstr	s15, [r2, #32]
 8018adc:	f8ba 38a6 	ldrh.w	r3, [sl, #2214]	; 0x8a6
 8018ae0:	3301      	adds	r3, #1
 8018ae2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018ae6:	f000 859e 	beq.w	8019626 <m_kalman_3gyro.isra.6.constprop.36+0x3c86>
 8018aea:	2b31      	cmp	r3, #49	; 0x31
 8018aec:	f8aa 38a6 	strh.w	r3, [sl, #2214]	; 0x8a6
 8018af0:	d918      	bls.n	8018b24 <m_kalman_3gyro.isra.6.constprop.36+0x3184>
 8018af2:	f89a 38a4 	ldrb.w	r3, [sl, #2212]	; 0x8a4
 8018af6:	b9ab      	cbnz	r3, 8018b24 <m_kalman_3gyro.isra.6.constprop.36+0x3184>
 8018af8:	f8dd 3698 	ldr.w	r3, [sp, #1688]	; 0x698
 8018afc:	ed9f 6aab 	vldr	s12, [pc, #684]	; 8018dac <m_kalman_3gyro.isra.6.constprop.36+0x340c>
 8018b00:	edd3 6a06 	vldr	s13, [r3, #24]
 8018b04:	ed93 7a07 	vldr	s14, [r3, #28]
 8018b08:	edd3 7a08 	vldr	s15, [r3, #32]
 8018b0c:	ee66 6a86 	vmul.f32	s13, s13, s12
 8018b10:	ee27 7a06 	vmul.f32	s14, s14, s12
 8018b14:	ee67 7a86 	vmul.f32	s15, s15, s12
 8018b18:	edc3 6a06 	vstr	s13, [r3, #24]
 8018b1c:	ed83 7a07 	vstr	s14, [r3, #28]
 8018b20:	edc3 7a08 	vstr	s15, [r3, #32]
 8018b24:	f8da 38a4 	ldr.w	r3, [sl, #2212]	; 0x8a4
 8018b28:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8018b2c:	f5b3 0f8c 	cmp.w	r3, #4587520	; 0x460000
 8018b30:	f000 857f 	beq.w	8019632 <m_kalman_3gyro.isra.6.constprop.36+0x3c92>
 8018b34:	f5b3 0fc8 	cmp.w	r3, #6553600	; 0x640000
 8018b38:	f040 8418 	bne.w	801936c <m_kalman_3gyro.isra.6.constprop.36+0x39cc>
 8018b3c:	2301      	movs	r3, #1
 8018b3e:	f88a 38a4 	strb.w	r3, [sl, #2212]	; 0x8a4
 8018b42:	f60a 0398 	addw	r3, sl, #2200	; 0x898
 8018b46:	f8da 00a0 	ldr.w	r0, [sl, #160]	; 0xa0
 8018b4a:	f8da 10a4 	ldr.w	r1, [sl, #164]	; 0xa4
 8018b4e:	f8da 20a8 	ldr.w	r2, [sl, #168]	; 0xa8
 8018b52:	6018      	str	r0, [r3, #0]
 8018b54:	f60a 039c 	addw	r3, sl, #2204	; 0x89c
 8018b58:	6019      	str	r1, [r3, #0]
 8018b5a:	f50a 630a 	add.w	r3, sl, #2208	; 0x8a0
 8018b5e:	601a      	str	r2, [r3, #0]
 8018b60:	eddd 7a50 	vldr	s15, [sp, #320]	; 0x140
 8018b64:	eddd 6a4f 	vldr	s13, [sp, #316]	; 0x13c
 8018b68:	ed9d 7a51 	vldr	s14, [sp, #324]	; 0x144
 8018b6c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8018b70:	ee76 6aa6 	vadd.f32	s13, s13, s13
 8018b74:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8018b78:	ee37 7a07 	vadd.f32	s14, s14, s14
 8018b7c:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8018b80:	eee7 7a07 	vfma.f32	s15, s14, s14
 8018b84:	ee17 0a90 	vmov	r0, s15
 8018b88:	f7e7 fc5e 	bl	8000448 <__aeabi_f2d>
 8018b8c:	f008 fb04 	bl	8021198 <sqrt>
 8018b90:	f7e7 ffaa 	bl	8000ae8 <__aeabi_d2f>
 8018b94:	f7e7 fc58 	bl	8000448 <__aeabi_f2d>
 8018b98:	a381      	add	r3, pc, #516	; (adr r3, 8018da0 <m_kalman_3gyro.isra.6.constprop.36+0x3400>)
 8018b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b9e:	f7e7 ff1d 	bl	80009dc <__aeabi_dcmplt>
 8018ba2:	2800      	cmp	r0, #0
 8018ba4:	f000 854e 	beq.w	8019644 <m_kalman_3gyro.isra.6.constprop.36+0x3ca4>
 8018ba8:	f50d 61d6 	add.w	r1, sp, #1712	; 0x6b0
 8018bac:	2200      	movs	r2, #0
 8018bae:	2300      	movs	r3, #0
 8018bb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018bb4:	f7e7 ff08 	bl	80009c8 <__aeabi_dcmpeq>
 8018bb8:	2800      	cmp	r0, #0
 8018bba:	f040 843d 	bne.w	8019438 <m_kalman_3gyro.isra.6.constprop.36+0x3a98>
 8018bbe:	f8aa 0202 	strh.w	r0, [sl, #514]	; 0x202
 8018bc2:	f88a 0204 	strb.w	r0, [sl, #516]	; 0x204
 8018bc6:	2301      	movs	r3, #1
 8018bc8:	2200      	movs	r2, #0
 8018bca:	f8ca 3450 	str.w	r3, [sl, #1104]	; 0x450
 8018bce:	f8ca 245c 	str.w	r2, [sl, #1116]	; 0x45c
 8018bd2:	f7fe badc 	b.w	801718e <m_kalman_3gyro.isra.6.constprop.36+0x17ee>
 8018bd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8018bda:	eef4 7ae6 	vcmpe.f32	s15, s13
 8018bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018be2:	f77e ad06 	ble.w	80175f2 <m_kalman_3gyro.isra.6.constprop.36+0x1c52>
 8018be6:	ed93 6a04 	vldr	s12, [r3, #16]
 8018bea:	edd3 6a05 	vldr	s13, [r3, #20]
 8018bee:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018bf2:	ee26 6a27 	vmul.f32	s12, s12, s15
 8018bf6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8018bfa:	ed83 7a03 	vstr	s14, [r3, #12]
 8018bfe:	ed83 6a04 	vstr	s12, [r3, #16]
 8018c02:	edc3 7a05 	vstr	s15, [r3, #20]
 8018c06:	f7fe bcf4 	b.w	80175f2 <m_kalman_3gyro.isra.6.constprop.36+0x1c52>
 8018c0a:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8018c0e:	f7fe bcdd 	b.w	80175cc <m_kalman_3gyro.isra.6.constprop.36+0x1c2c>
 8018c12:	edd3 7a03 	vldr	s15, [r3, #12]
 8018c16:	eef5 7a40 	vcmp.f32	s15, #0.0
 8018c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c1e:	f47e a8ce 	bne.w	8016dbe <m_kalman_3gyro.isra.6.constprop.36+0x141e>
 8018c22:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
 8018c26:	9801      	ldr	r0, [sp, #4]
 8018c28:	f8ca 4044 	str.w	r4, [sl, #68]	; 0x44
 8018c2c:	f8ca 4048 	str.w	r4, [sl, #72]	; 0x48
 8018c30:	f8ca 404c 	str.w	r4, [sl, #76]	; 0x4c
 8018c34:	f8ca 4054 	str.w	r4, [sl, #84]	; 0x54
 8018c38:	f8ca 4058 	str.w	r4, [sl, #88]	; 0x58
 8018c3c:	f8ca 405c 	str.w	r4, [sl, #92]	; 0x5c
 8018c40:	f8ca 5040 	str.w	r5, [sl, #64]	; 0x40
 8018c44:	f8ca 5050 	str.w	r5, [sl, #80]	; 0x50
 8018c48:	f8ca 5060 	str.w	r5, [sl, #96]	; 0x60
 8018c4c:	f7f8 fd44 	bl	80116d8 <m_dcm2q_eml>
 8018c50:	f8dd 36c0 	ldr.w	r3, [sp, #1728]	; 0x6c0
 8018c54:	f8ca 4094 	str.w	r4, [sl, #148]	; 0x94
 8018c58:	f8ca 4098 	str.w	r4, [sl, #152]	; 0x98
 8018c5c:	f8ca 409c 	str.w	r4, [sl, #156]	; 0x9c
 8018c60:	681a      	ldr	r2, [r3, #0]
 8018c62:	f8ca 20a0 	str.w	r2, [sl, #160]	; 0xa0
 8018c66:	f8dd 26c0 	ldr.w	r2, [sp, #1728]	; 0x6c0
 8018c6a:	4b51      	ldr	r3, [pc, #324]	; (8018db0 <m_kalman_3gyro.isra.6.constprop.36+0x3410>)
 8018c6c:	6852      	ldr	r2, [r2, #4]
 8018c6e:	f8ca 20a4 	str.w	r2, [sl, #164]	; 0xa4
 8018c72:	f8dd 26c0 	ldr.w	r2, [sp, #1728]	; 0x6c0
 8018c76:	6892      	ldr	r2, [r2, #8]
 8018c78:	f8ca 20a8 	str.w	r2, [sl, #168]	; 0xa8
 8018c7c:	f8ca 30ac 	str.w	r3, [sl, #172]	; 0xac
 8018c80:	f8ca 50b0 	str.w	r5, [sl, #176]	; 0xb0
 8018c84:	f8ca 50b4 	str.w	r5, [sl, #180]	; 0xb4
 8018c88:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8018c8c:	2100      	movs	r1, #0
 8018c8e:	f10a 00b8 	add.w	r0, sl, #184	; 0xb8
 8018c92:	f009 fe01 	bl	8022898 <memset>
 8018c96:	4b47      	ldr	r3, [pc, #284]	; (8018db4 <m_kalman_3gyro.isra.6.constprop.36+0x3414>)
 8018c98:	f8ca 30b8 	str.w	r3, [sl, #184]	; 0xb8
 8018c9c:	f8ca 30e0 	str.w	r3, [sl, #224]	; 0xe0
 8018ca0:	f8ca 3108 	str.w	r3, [sl, #264]	; 0x108
 8018ca4:	f8ca 3130 	str.w	r3, [sl, #304]	; 0x130
 8018ca8:	f8ca 3158 	str.w	r3, [sl, #344]	; 0x158
 8018cac:	f8ca 3180 	str.w	r3, [sl, #384]	; 0x180
 8018cb0:	f8ca 31a8 	str.w	r3, [sl, #424]	; 0x1a8
 8018cb4:	f8ca 31d0 	str.w	r3, [sl, #464]	; 0x1d0
 8018cb8:	f8ca 31f8 	str.w	r3, [sl, #504]	; 0x1f8
 8018cbc:	f7fe b87f 	b.w	8016dbe <m_kalman_3gyro.isra.6.constprop.36+0x141e>
 8018cc0:	eddd 7a23 	vldr	s15, [sp, #140]	; 0x8c
 8018cc4:	ed8a ba12 	vstr	s22, [sl, #72]	; 0x48
 8018cc8:	edca 7a10 	vstr	s15, [sl, #64]	; 0x40
 8018ccc:	eddd 7a24 	vldr	s15, [sp, #144]	; 0x90
 8018cd0:	edca aa15 	vstr	s21, [sl, #84]	; 0x54
 8018cd4:	edca 7a13 	vstr	s15, [sl, #76]	; 0x4c
 8018cd8:	eddd 7a25 	vldr	s15, [sp, #148]	; 0x94
 8018cdc:	ed8a aa18 	vstr	s20, [sl, #96]	; 0x60
 8018ce0:	edca 7a16 	vstr	s15, [sl, #88]	; 0x58
 8018ce4:	ed8a ca11 	vstr	s24, [sl, #68]	; 0x44
 8018ce8:	edca ba14 	vstr	s23, [sl, #80]	; 0x50
 8018cec:	edca 9a17 	vstr	s19, [sl, #92]	; 0x5c
 8018cf0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8018cf2:	f7f8 fcf1 	bl	80116d8 <m_dcm2q_eml>
 8018cf6:	eddf 7a30 	vldr	s15, [pc, #192]	; 8018db8 <m_kalman_3gyro.isra.6.constprop.36+0x3418>
 8018cfa:	ed8a da2b 	vstr	s26, [sl, #172]	; 0xac
 8018cfe:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8018d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d06:	d507      	bpl.n	8018d18 <m_kalman_3gyro.isra.6.constprop.36+0x3378>
 8018d08:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8018dbc <m_kalman_3gyro.isra.6.constprop.36+0x341c>
 8018d0c:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8018d10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d14:	f300 85ab 	bgt.w	801986e <m_kalman_3gyro.isra.6.constprop.36+0x3ece>
 8018d18:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8018d1c:	f8ca 30b0 	str.w	r3, [sl, #176]	; 0xb0
 8018d20:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8018d24:	2100      	movs	r1, #0
 8018d26:	f10a 00b8 	add.w	r0, sl, #184	; 0xb8
 8018d2a:	f009 fdb5 	bl	8022898 <memset>
 8018d2e:	4b21      	ldr	r3, [pc, #132]	; (8018db4 <m_kalman_3gyro.isra.6.constprop.36+0x3414>)
 8018d30:	f8ca 30b8 	str.w	r3, [sl, #184]	; 0xb8
 8018d34:	f8ca 30e0 	str.w	r3, [sl, #224]	; 0xe0
 8018d38:	f8ca 3108 	str.w	r3, [sl, #264]	; 0x108
 8018d3c:	f8ca 3130 	str.w	r3, [sl, #304]	; 0x130
 8018d40:	f8ca 3158 	str.w	r3, [sl, #344]	; 0x158
 8018d44:	f8ca 3180 	str.w	r3, [sl, #384]	; 0x180
 8018d48:	f8ca 31a8 	str.w	r3, [sl, #424]	; 0x1a8
 8018d4c:	f8ca 31d0 	str.w	r3, [sl, #464]	; 0x1d0
 8018d50:	f8ca 31f8 	str.w	r3, [sl, #504]	; 0x1f8
 8018d54:	f8dd 36dc 	ldr.w	r3, [sp, #1756]	; 0x6dc
 8018d58:	2100      	movs	r1, #0
 8018d5a:	2201      	movs	r2, #1
 8018d5c:	f88a 1031 	strb.w	r1, [sl, #49]	; 0x31
 8018d60:	701a      	strb	r2, [r3, #0]
 8018d62:	f7fe b812 	b.w	8016d8a <m_kalman_3gyro.isra.6.constprop.36+0x13ea>
 8018d66:	eef4 7ac8 	vcmpe.f32	s15, s16
 8018d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d6e:	f300 840f 	bgt.w	8019590 <m_kalman_3gyro.isra.6.constprop.36+0x3bf0>
 8018d72:	eddd 7acf 	vldr	s15, [sp, #828]	; 0x33c
 8018d76:	f7fd bf60 	b.w	8016c3a <m_kalman_3gyro.isra.6.constprop.36+0x129a>
 8018d7a:	eddd 7ac2 	vldr	s15, [sp, #776]	; 0x308
 8018d7e:	eef4 7ac8 	vcmpe.f32	s15, s16
 8018d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d86:	f300 84d7 	bgt.w	8019738 <m_kalman_3gyro.isra.6.constprop.36+0x3d98>
 8018d8a:	eddd 7acf 	vldr	s15, [sp, #828]	; 0x33c
 8018d8e:	f7fd bc36 	b.w	80165fe <m_kalman_3gyro.isra.6.constprop.36+0xc5e>
 8018d92:	ed9d 7add 	vldr	s14, [sp, #884]	; 0x374
 8018d96:	f7fd bf61 	b.w	8016c5c <m_kalman_3gyro.isra.6.constprop.36+0x12bc>
 8018d9a:	bf00      	nop
 8018d9c:	f3af 8000 	nop.w
 8018da0:	47ae147b 	.word	0x47ae147b
 8018da4:	3f747ae1 	.word	0x3f747ae1
 8018da8:	40140000 	.word	0x40140000
 8018dac:	3f19999a 	.word	0x3f19999a
 8018db0:	3f666666 	.word	0x3f666666
 8018db4:	40a00000 	.word	0x40a00000
 8018db8:	3f99999a 	.word	0x3f99999a
 8018dbc:	3f4ccccd 	.word	0x3f4ccccd
 8018dc0:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8018dc4:	2b01      	cmp	r3, #1
 8018dc6:	f43f aa1e 	beq.w	8018206 <m_kalman_3gyro.isra.6.constprop.36+0x2866>
 8018dca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018dcc:	2b02      	cmp	r3, #2
 8018dce:	f000 8348 	beq.w	8019462 <m_kalman_3gyro.isra.6.constprop.36+0x3ac2>
 8018dd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018dd4:	2b04      	cmp	r3, #4
 8018dd6:	f47f aa16 	bne.w	8018206 <m_kalman_3gyro.isra.6.constprop.36+0x2866>
 8018dda:	49cf      	ldr	r1, [pc, #828]	; (8019118 <m_kalman_3gyro.isra.6.constprop.36+0x3778>)
 8018ddc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018dde:	f891 0838 	ldrb.w	r0, [r1, #2104]	; 0x838
 8018de2:	edd3 3a00 	vldr	s7, [r3]
 8018de6:	edd3 0a01 	vldr	s1, [r3, #4]
 8018dea:	ed93 4a02 	vldr	s8, [r3, #8]
 8018dee:	9b08      	ldr	r3, [sp, #32]
 8018df0:	2804      	cmp	r0, #4
 8018df2:	edd3 4a00 	vldr	s9, [r3]
 8018df6:	ed93 5a01 	vldr	s10, [r3, #4]
 8018dfa:	edd3 5a02 	vldr	s11, [r3, #8]
 8018dfe:	f240 847d 	bls.w	80196fc <m_kalman_3gyro.isra.6.constprop.36+0x3d5c>
 8018e02:	f601 023c 	addw	r2, r1, #2108	; 0x83c
 8018e06:	edd2 2a07 	vldr	s5, [r2, #28]
 8018e0a:	ed9f aac4 	vldr	s20, [pc, #784]	; 801911c <m_kalman_3gyro.isra.6.constprop.36+0x377c>
 8018e0e:	ed92 3a04 	vldr	s6, [r2, #16]
 8018e12:	ed9f 1ac3 	vldr	s2, [pc, #780]	; 8019120 <m_kalman_3gyro.isra.6.constprop.36+0x3780>
 8018e16:	ed92 7a06 	vldr	s14, [r2, #24]
 8018e1a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8018e1c:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8018e1e:	6193      	str	r3, [r2, #24]
 8018e20:	ee62 7a8a 	vmul.f32	s15, s5, s20
 8018e24:	f601 0378 	addw	r3, r1, #2168	; 0x878
 8018e28:	eee3 7a01 	vfma.f32	s15, s6, s2
 8018e2c:	61d0      	str	r0, [r2, #28]
 8018e2e:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8018e30:	ed92 6a08 	vldr	s12, [r2, #32]
 8018e34:	ed92 2a03 	vldr	s4, [r2, #12]
 8018e38:	edd3 aa03 	vldr	s21, [r3, #12]
 8018e3c:	edd2 ba05 	vldr	s23, [r2, #20]
 8018e40:	ed93 ba04 	vldr	s22, [r3, #16]
 8018e44:	ed93 0a05 	vldr	s0, [r3, #20]
 8018e48:	ed82 7a03 	vstr	s14, [r2, #12]
 8018e4c:	edc2 2a04 	vstr	s5, [r2, #16]
 8018e50:	eef0 1a67 	vmov.f32	s3, s15
 8018e54:	edd3 2a07 	vldr	s5, [r3, #28]
 8018e58:	edd3 7a08 	vldr	s15, [r3, #32]
 8018e5c:	6210      	str	r0, [r2, #32]
 8018e5e:	ee67 6a0a 	vmul.f32	s13, s14, s20
 8018e62:	ed93 7a06 	vldr	s14, [r3, #24]
 8018e66:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8018e68:	ed82 2a00 	vstr	s4, [r2]
 8018e6c:	ed82 3a01 	vstr	s6, [r2, #4]
 8018e70:	ed82 6a05 	vstr	s12, [r2, #20]
 8018e74:	ed83 7a03 	vstr	s14, [r3, #12]
 8018e78:	edc3 aa00 	vstr	s21, [r3]
 8018e7c:	edc3 2a04 	vstr	s5, [r3, #16]
 8018e80:	edc3 7a05 	vstr	s15, [r3, #20]
 8018e84:	edc2 ba02 	vstr	s23, [r2, #8]
 8018e88:	6198      	str	r0, [r3, #24]
 8018e8a:	ed83 ba01 	vstr	s22, [r3, #4]
 8018e8e:	ed83 0a02 	vstr	s0, [r3, #8]
 8018e92:	eee2 6a01 	vfma.f32	s13, s4, s2
 8018e96:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8018e98:	61d8      	str	r0, [r3, #28]
 8018e9a:	ed9f 2aa2 	vldr	s4, [pc, #648]	; 8019124 <m_kalman_3gyro.isra.6.constprop.36+0x3784>
 8018e9e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8018ea0:	6218      	str	r0, [r3, #32]
 8018ea2:	ee62 9a8a 	vmul.f32	s19, s5, s20
 8018ea6:	edd2 2a0d 	vldr	s5, [r2, #52]	; 0x34
 8018eaa:	edc2 0a0d 	vstr	s1, [r2, #52]	; 0x34
 8018eae:	ee26 3a0a 	vmul.f32	s6, s12, s20
 8018eb2:	ee27 6a0a 	vmul.f32	s12, s14, s20
 8018eb6:	ee27 aa8a 	vmul.f32	s20, s15, s20
 8018eba:	eef0 7a61 	vmov.f32	s15, s3
 8018ebe:	eee2 7a82 	vfma.f32	s15, s5, s4
 8018ec2:	f601 04b4 	addw	r4, r1, #2228	; 0x8b4
 8018ec6:	f501 610c 	add.w	r1, r1, #2240	; 0x8c0
 8018eca:	edc2 2a0a 	vstr	s5, [r2, #40]	; 0x28
 8018ece:	edd2 2a0c 	vldr	s5, [r2, #48]	; 0x30
 8018ed2:	eddf 1a95 	vldr	s3, [pc, #596]	; 8019128 <m_kalman_3gyro.isra.6.constprop.36+0x3788>
 8018ed6:	edc2 2a09 	vstr	s5, [r2, #36]	; 0x24
 8018eda:	eeb0 7a43 	vmov.f32	s14, s6
 8018ede:	eee2 6a82 	vfma.f32	s13, s5, s4
 8018ee2:	eeab 7a81 	vfma.f32	s14, s23, s2
 8018ee6:	eee0 7aa1 	vfma.f32	s15, s1, s3
 8018eea:	eea0 aa01 	vfma.f32	s20, s0, s2
 8018eee:	eeaa 6a81 	vfma.f32	s12, s21, s2
 8018ef2:	eeeb 9a01 	vfma.f32	s19, s22, s2
 8018ef6:	ed92 1a0e 	vldr	s2, [r2, #56]	; 0x38
 8018efa:	edd3 0a0c 	vldr	s1, [r3, #48]	; 0x30
 8018efe:	ed93 3a0d 	vldr	s6, [r3, #52]	; 0x34
 8018f02:	edc4 7a01 	vstr	s15, [r4, #4]
 8018f06:	eee3 6aa1 	vfma.f32	s13, s7, s3
 8018f0a:	eea1 7a02 	vfma.f32	s14, s2, s4
 8018f0e:	eef0 aa46 	vmov.f32	s21, s12
 8018f12:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8018f16:	ed93 6a0e 	vldr	s12, [r3, #56]	; 0x38
 8018f1a:	edc4 6a00 	vstr	s13, [r4]
 8018f1e:	eea4 7a21 	vfma.f32	s14, s8, s3
 8018f22:	eee0 aa82 	vfma.f32	s21, s1, s4
 8018f26:	eee3 9a02 	vfma.f32	s19, s6, s4
 8018f2a:	eea6 aa02 	vfma.f32	s20, s12, s4
 8018f2e:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8018f32:	eee4 aaa1 	vfma.f32	s21, s9, s3
 8018f36:	eee5 9a21 	vfma.f32	s19, s10, s3
 8018f3a:	eea5 aaa1 	vfma.f32	s20, s11, s3
 8018f3e:	eee7 7a07 	vfma.f32	s15, s14, s14
 8018f42:	ed84 7a02 	vstr	s14, [r4, #8]
 8018f46:	edc2 3a0c 	vstr	s7, [r2, #48]	; 0x30
 8018f4a:	ed82 1a0b 	vstr	s2, [r2, #44]	; 0x2c
 8018f4e:	ed82 4a0e 	vstr	s8, [r2, #56]	; 0x38
 8018f52:	edc3 0a09 	vstr	s1, [r3, #36]	; 0x24
 8018f56:	edc3 4a0c 	vstr	s9, [r3, #48]	; 0x30
 8018f5a:	ed83 3a0a 	vstr	s6, [r3, #40]	; 0x28
 8018f5e:	ed83 5a0d 	vstr	s10, [r3, #52]	; 0x34
 8018f62:	ed83 6a0b 	vstr	s12, [r3, #44]	; 0x2c
 8018f66:	edc3 5a0e 	vstr	s11, [r3, #56]	; 0x38
 8018f6a:	ee17 0a90 	vmov	r0, s15
 8018f6e:	edc1 9a01 	vstr	s19, [r1, #4]
 8018f72:	edc1 aa00 	vstr	s21, [r1]
 8018f76:	ee69 9aa9 	vmul.f32	s19, s19, s19
 8018f7a:	ed81 aa02 	vstr	s20, [r1, #8]
 8018f7e:	f7e7 fa63 	bl	8000448 <__aeabi_f2d>
 8018f82:	f008 f909 	bl	8021198 <sqrt>
 8018f86:	eef0 7a69 	vmov.f32	s15, s19
 8018f8a:	eeea 7aaa 	vfma.f32	s15, s21, s21
 8018f8e:	4604      	mov	r4, r0
 8018f90:	460d      	mov	r5, r1
 8018f92:	eeea 7a0a 	vfma.f32	s15, s20, s20
 8018f96:	ee17 0a90 	vmov	r0, s15
 8018f9a:	f7e7 fa55 	bl	8000448 <__aeabi_f2d>
 8018f9e:	f008 f8fb 	bl	8021198 <sqrt>
 8018fa2:	f7e7 fda1 	bl	8000ae8 <__aeabi_d2f>
 8018fa6:	4629      	mov	r1, r5
 8018fa8:	ee09 0a90 	vmov	s19, r0
 8018fac:	4620      	mov	r0, r4
 8018fae:	f7e7 fd9b 	bl	8000ae8 <__aeabi_d2f>
 8018fb2:	ee07 0a90 	vmov	s15, r0
 8018fb6:	eef4 eae7 	vcmpe.f32	s29, s15
 8018fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018fbe:	f77f a933 	ble.w	8018228 <m_kalman_3gyro.isra.6.constprop.36+0x2888>
 8018fc2:	eeb4 fae9 	vcmpe.f32	s30, s19
 8018fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018fca:	f77f a92d 	ble.w	8018228 <m_kalman_3gyro.isra.6.constprop.36+0x2888>
 8018fce:	9b08      	ldr	r3, [sp, #32]
 8018fd0:	ed93 7a00 	vldr	s14, [r3]
 8018fd4:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
 8018fd8:	eeb0 7ac7 	vabs.f32	s14, s14
 8018fdc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018fe4:	f57f a920 	bpl.w	8018228 <m_kalman_3gyro.isra.6.constprop.36+0x2888>
 8018fe8:	9b08      	ldr	r3, [sp, #32]
 8018fea:	ed93 7a01 	vldr	s14, [r3, #4]
 8018fee:	eeb0 7ac7 	vabs.f32	s14, s14
 8018ff2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ffa:	f57f a915 	bpl.w	8018228 <m_kalman_3gyro.isra.6.constprop.36+0x2888>
 8018ffe:	9b08      	ldr	r3, [sp, #32]
 8019000:	ed93 7a02 	vldr	s14, [r3, #8]
 8019004:	eeb0 7ac7 	vabs.f32	s14, s14
 8019008:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801900c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019010:	f57f a90a 	bpl.w	8018228 <m_kalman_3gyro.isra.6.constprop.36+0x2888>
 8019014:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019016:	edd3 7a00 	vldr	s15, [r3]
 801901a:	eef0 7ae7 	vabs.f32	s15, s15
 801901e:	ee17 0a90 	vmov	r0, s15
 8019022:	f7e7 fa11 	bl	8000448 <__aeabi_f2d>
 8019026:	a338      	add	r3, pc, #224	; (adr r3, 8019108 <m_kalman_3gyro.isra.6.constprop.36+0x3768>)
 8019028:	e9d3 2300 	ldrd	r2, r3, [r3]
 801902c:	f7e7 fcd6 	bl	80009dc <__aeabi_dcmplt>
 8019030:	2800      	cmp	r0, #0
 8019032:	f43f a8f9 	beq.w	8018228 <m_kalman_3gyro.isra.6.constprop.36+0x2888>
 8019036:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019038:	edd3 7a01 	vldr	s15, [r3, #4]
 801903c:	eef0 7ae7 	vabs.f32	s15, s15
 8019040:	ee17 0a90 	vmov	r0, s15
 8019044:	f7e7 fa00 	bl	8000448 <__aeabi_f2d>
 8019048:	a32f      	add	r3, pc, #188	; (adr r3, 8019108 <m_kalman_3gyro.isra.6.constprop.36+0x3768>)
 801904a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801904e:	f7e7 fcc5 	bl	80009dc <__aeabi_dcmplt>
 8019052:	2800      	cmp	r0, #0
 8019054:	f43f a8e8 	beq.w	8018228 <m_kalman_3gyro.isra.6.constprop.36+0x2888>
 8019058:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801905a:	edd3 7a02 	vldr	s15, [r3, #8]
 801905e:	eef0 7ae7 	vabs.f32	s15, s15
 8019062:	ee17 0a90 	vmov	r0, s15
 8019066:	f7e7 f9ef 	bl	8000448 <__aeabi_f2d>
 801906a:	a327      	add	r3, pc, #156	; (adr r3, 8019108 <m_kalman_3gyro.isra.6.constprop.36+0x3768>)
 801906c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019070:	f7e7 fcb4 	bl	80009dc <__aeabi_dcmplt>
 8019074:	2800      	cmp	r0, #0
 8019076:	f43f a8d7 	beq.w	8018228 <m_kalman_3gyro.isra.6.constprop.36+0x2888>
 801907a:	f8da 2450 	ldr.w	r2, [sl, #1104]	; 0x450
 801907e:	2a0a      	cmp	r2, #10
 8019080:	f47f ac3e 	bne.w	8018900 <m_kalman_3gyro.isra.6.constprop.36+0x2f60>
 8019084:	2301      	movs	r3, #1
 8019086:	9908      	ldr	r1, [sp, #32]
 8019088:	f88a 3204 	strb.w	r3, [sl, #516]	; 0x204
 801908c:	f240 1201 	movw	r2, #257	; 0x101
 8019090:	f8aa 2202 	strh.w	r2, [sl, #514]	; 0x202
 8019094:	680a      	ldr	r2, [r1, #0]
 8019096:	f8ca 207c 	str.w	r2, [sl, #124]	; 0x7c
 801909a:	684a      	ldr	r2, [r1, #4]
 801909c:	f8ca 2080 	str.w	r2, [sl, #128]	; 0x80
 80190a0:	688a      	ldr	r2, [r1, #8]
 80190a2:	f8ca 2084 	str.w	r2, [sl, #132]	; 0x84
 80190a6:	f8dd 26d8 	ldr.w	r2, [sp, #1752]	; 0x6d8
 80190aa:	7013      	strb	r3, [r2, #0]
 80190ac:	f8da 345c 	ldr.w	r3, [sl, #1116]	; 0x45c
 80190b0:	f89a 2030 	ldrb.w	r2, [sl, #48]	; 0x30
 80190b4:	3301      	adds	r3, #1
 80190b6:	f8ca 345c 	str.w	r3, [sl, #1116]	; 0x45c
 80190ba:	2a00      	cmp	r2, #0
 80190bc:	f000 8226 	beq.w	801950c <m_kalman_3gyro.isra.6.constprop.36+0x3b6c>
 80190c0:	f8da 1080 	ldr.w	r1, [sl, #128]	; 0x80
 80190c4:	f8da 2084 	ldr.w	r2, [sl, #132]	; 0x84
 80190c8:	f8ca 10a4 	str.w	r1, [sl, #164]	; 0xa4
 80190cc:	f8ca 20a8 	str.w	r2, [sl, #168]	; 0xa8
 80190d0:	f8da 107c 	ldr.w	r1, [sl, #124]	; 0x7c
 80190d4:	f8ca 10a0 	str.w	r1, [sl, #160]	; 0xa0
 80190d8:	2200      	movs	r2, #0
 80190da:	f88a 2030 	strb.w	r2, [sl, #48]	; 0x30
 80190de:	e215      	b.n	801950c <m_kalman_3gyro.isra.6.constprop.36+0x3b6c>
 80190e0:	f8da 68b0 	ldr.w	r6, [sl, #2224]	; 0x8b0
 80190e4:	b316      	cbz	r6, 801912c <m_kalman_3gyro.isra.6.constprop.36+0x378c>
 80190e6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80190e8:	6818      	ldr	r0, [r3, #0]
 80190ea:	f7e7 f9ad 	bl	8000448 <__aeabi_f2d>
 80190ee:	a308      	add	r3, pc, #32	; (adr r3, 8019110 <m_kalman_3gyro.isra.6.constprop.36+0x3770>)
 80190f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80190f4:	f7e7 fc90 	bl	8000a18 <__aeabi_dcmpgt>
 80190f8:	b1c0      	cbz	r0, 801912c <m_kalman_3gyro.isra.6.constprop.36+0x378c>
 80190fa:	3e01      	subs	r6, #1
 80190fc:	f8ca 68b0 	str.w	r6, [sl, #2224]	; 0x8b0
 8019100:	f7fe baac 	b.w	801765c <m_kalman_3gyro.isra.6.constprop.36+0x1cbc>
 8019104:	f3af 8000 	nop.w
 8019108:	66666666 	.word	0x66666666
 801910c:	3ff66666 	.word	0x3ff66666
 8019110:	33333333 	.word	0x33333333
 8019114:	3fd33333 	.word	0x3fd33333
 8019118:	20004b40 	.word	0x20004b40
 801911c:	bdcccccd 	.word	0xbdcccccd
 8019120:	be4ccccd 	.word	0xbe4ccccd
 8019124:	3dcccccd 	.word	0x3dcccccd
 8019128:	3e4ccccd 	.word	0x3e4ccccd
 801912c:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 801912e:	6818      	ldr	r0, [r3, #0]
 8019130:	f7e7 f98a 	bl	8000448 <__aeabi_f2d>
 8019134:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019138:	ee1e 0a90 	vmov	r0, s29
 801913c:	f7e7 f984 	bl	8000448 <__aeabi_f2d>
 8019140:	2200      	movs	r2, #0
 8019142:	4bda      	ldr	r3, [pc, #872]	; (80194ac <m_kalman_3gyro.isra.6.constprop.36+0x3b0c>)
 8019144:	f7e7 f9d8 	bl	80004f8 <__aeabi_dmul>
 8019148:	4602      	mov	r2, r0
 801914a:	460b      	mov	r3, r1
 801914c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019150:	f7e7 fc44 	bl	80009dc <__aeabi_dcmplt>
 8019154:	2800      	cmp	r0, #0
 8019156:	f43e aa81 	beq.w	801765c <m_kalman_3gyro.isra.6.constprop.36+0x1cbc>
 801915a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801915c:	6818      	ldr	r0, [r3, #0]
 801915e:	f7e7 f973 	bl	8000448 <__aeabi_f2d>
 8019162:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019166:	ee1f 0a10 	vmov	r0, s30
 801916a:	f7e7 f96d 	bl	8000448 <__aeabi_f2d>
 801916e:	2200      	movs	r2, #0
 8019170:	4bce      	ldr	r3, [pc, #824]	; (80194ac <m_kalman_3gyro.isra.6.constprop.36+0x3b0c>)
 8019172:	f7e7 f9c1 	bl	80004f8 <__aeabi_dmul>
 8019176:	4602      	mov	r2, r0
 8019178:	460b      	mov	r3, r1
 801917a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801917e:	f7e7 fc2d 	bl	80009dc <__aeabi_dcmplt>
 8019182:	2800      	cmp	r0, #0
 8019184:	f43e aa6a 	beq.w	801765c <m_kalman_3gyro.isra.6.constprop.36+0x1cbc>
 8019188:	4bc9      	ldr	r3, [pc, #804]	; (80194b0 <m_kalman_3gyro.isra.6.constprop.36+0x3b10>)
 801918a:	f89a 58ad 	ldrb.w	r5, [sl, #2221]	; 0x8ad
 801918e:	6818      	ldr	r0, [r3, #0]
 8019190:	f7e7 f95a 	bl	8000448 <__aeabi_f2d>
 8019194:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019198:	ee1e 0a10 	vmov	r0, s28
 801919c:	f7e7 f954 	bl	8000448 <__aeabi_f2d>
 80191a0:	4602      	mov	r2, r0
 80191a2:	460b      	mov	r3, r1
 80191a4:	f7e6 fff2 	bl	800018c <__adddf3>
 80191a8:	4602      	mov	r2, r0
 80191aa:	460b      	mov	r3, r1
 80191ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80191b0:	f7e7 fc32 	bl	8000a18 <__aeabi_dcmpgt>
 80191b4:	2800      	cmp	r0, #0
 80191b6:	f000 8376 	beq.w	80198a6 <m_kalman_3gyro.isra.6.constprop.36+0x3f06>
 80191ba:	2300      	movs	r3, #0
 80191bc:	2d0e      	cmp	r5, #14
 80191be:	f8aa 31fc 	strh.w	r3, [sl, #508]	; 0x1fc
 80191c2:	f88a 31fe 	strb.w	r3, [sl, #510]	; 0x1fe
 80191c6:	f88a 3205 	strb.w	r3, [sl, #517]	; 0x205
 80191ca:	f88a 3207 	strb.w	r3, [sl, #519]	; 0x207
 80191ce:	bf95      	itete	ls
 80191d0:	3503      	addls	r5, #3
 80191d2:	2364      	movhi	r3, #100	; 0x64
 80191d4:	f88a 58ad 	strbls.w	r5, [sl, #2221]	; 0x8ad
 80191d8:	f8ca 38b0 	strhi.w	r3, [sl, #2224]	; 0x8b0
 80191dc:	f7fe ba3e 	b.w	801765c <m_kalman_3gyro.isra.6.constprop.36+0x1cbc>
 80191e0:	eeb0 aa48 	vmov.f32	s20, s16
 80191e4:	f7fe be42 	b.w	8017e6c <m_kalman_3gyro.isra.6.constprop.36+0x24cc>
 80191e8:	eef0 ca48 	vmov.f32	s25, s16
 80191ec:	f7fe be2a 	b.w	8017e44 <m_kalman_3gyro.isra.6.constprop.36+0x24a4>
 80191f0:	1c54      	adds	r4, r2, #1
 80191f2:	4611      	mov	r1, r2
 80191f4:	f7fd bf02 	b.w	8016ffc <m_kalman_3gyro.isra.6.constprop.36+0x165c>
 80191f8:	240a      	movs	r4, #10
 80191fa:	2002      	movs	r0, #2
 80191fc:	2101      	movs	r1, #1
 80191fe:	f06f 4540 	mvn.w	r5, #3221225472	; 0xc0000000
 8019202:	190a      	adds	r2, r1, r4
 8019204:	0852      	lsrs	r2, r2, #1
 8019206:	1953      	adds	r3, r2, r5
 8019208:	f50d 66c6 	add.w	r6, sp, #1584	; 0x630
 801920c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8019210:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 8019214:	ed93 7a00 	vldr	s14, [r3]
 8019218:	eef4 7ac7 	vcmpe.f32	s15, s14
 801921c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019220:	f280 8189 	bge.w	8019536 <m_kalman_3gyro.isra.6.constprop.36+0x3b96>
 8019224:	188b      	adds	r3, r1, r2
 8019226:	085b      	lsrs	r3, r3, #1
 8019228:	195c      	adds	r4, r3, r5
 801922a:	f50d 66c6 	add.w	r6, sp, #1584	; 0x630
 801922e:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8019232:	4290      	cmp	r0, r2
 8019234:	f5a4 7474 	sub.w	r4, r4, #976	; 0x3d0
 8019238:	d212      	bcs.n	8019260 <m_kalman_3gyro.isra.6.constprop.36+0x38c0>
 801923a:	ed94 7a00 	vldr	s14, [r4]
 801923e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8019242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019246:	da05      	bge.n	8019254 <m_kalman_3gyro.isra.6.constprop.36+0x38b4>
 8019248:	461a      	mov	r2, r3
 801924a:	e7eb      	b.n	8019224 <m_kalman_3gyro.isra.6.constprop.36+0x3884>
 801924c:	eddd 9a6a 	vldr	s19, [sp, #424]	; 0x1a8
 8019250:	f7fd befc 	b.w	801704c <m_kalman_3gyro.isra.6.constprop.36+0x16ac>
 8019254:	4614      	mov	r4, r2
 8019256:	1c58      	adds	r0, r3, #1
 8019258:	4284      	cmp	r4, r0
 801925a:	4619      	mov	r1, r3
 801925c:	d8d1      	bhi.n	8019202 <m_kalman_3gyro.isra.6.constprop.36+0x3862>
 801925e:	e000      	b.n	8019262 <m_kalman_3gyro.isra.6.constprop.36+0x38c2>
 8019260:	460b      	mov	r3, r1
 8019262:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
 8019266:	185a      	adds	r2, r3, r1
 8019268:	0092      	lsls	r2, r2, #2
 801926a:	009b      	lsls	r3, r3, #2
 801926c:	a898      	add	r0, sp, #608	; 0x260
 801926e:	1884      	adds	r4, r0, r2
 8019270:	4418      	add	r0, r3
 8019272:	edd4 6a00 	vldr	s13, [r4]
 8019276:	ed90 7a00 	vldr	s14, [r0]
 801927a:	ee37 6ae6 	vsub.f32	s12, s15, s13
 801927e:	ee37 7a66 	vsub.f32	s14, s14, s13
 8019282:	a8a2      	add	r0, sp, #648	; 0x288
 8019284:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8019288:	4402      	add	r2, r0
 801928a:	4403      	add	r3, r0
 801928c:	250a      	movs	r5, #10
 801928e:	2402      	movs	r4, #2
 8019290:	2001      	movs	r0, #1
 8019292:	edd2 8a00 	vldr	s17, [r2]
 8019296:	ed93 7a00 	vldr	s14, [r3]
 801929a:	ee37 7a68 	vsub.f32	s14, s14, s17
 801929e:	eee6 8a87 	vfma.f32	s17, s13, s14
 80192a2:	182a      	adds	r2, r5, r0
 80192a4:	0852      	lsrs	r2, r2, #1
 80192a6:	1853      	adds	r3, r2, r1
 80192a8:	f50d 66c6 	add.w	r6, sp, #1584	; 0x630
 80192ac:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80192b0:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 80192b4:	ed93 7a00 	vldr	s14, [r3]
 80192b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80192bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80192c0:	f280 81d9 	bge.w	8019676 <m_kalman_3gyro.isra.6.constprop.36+0x3cd6>
 80192c4:	1813      	adds	r3, r2, r0
 80192c6:	085b      	lsrs	r3, r3, #1
 80192c8:	185d      	adds	r5, r3, r1
 80192ca:	f50d 66c6 	add.w	r6, sp, #1584	; 0x630
 80192ce:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 80192d2:	42a2      	cmp	r2, r4
 80192d4:	f5a5 7574 	sub.w	r5, r5, #976	; 0x3d0
 80192d8:	d908      	bls.n	80192ec <m_kalman_3gyro.isra.6.constprop.36+0x394c>
 80192da:	ed95 7a00 	vldr	s14, [r5]
 80192de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80192e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80192e6:	da22      	bge.n	801932e <m_kalman_3gyro.isra.6.constprop.36+0x398e>
 80192e8:	461a      	mov	r2, r3
 80192ea:	e7eb      	b.n	80192c4 <m_kalman_3gyro.isra.6.constprop.36+0x3924>
 80192ec:	4603      	mov	r3, r0
 80192ee:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 80192f2:	3a01      	subs	r2, #1
 80192f4:	0091      	lsls	r1, r2, #2
 80192f6:	009b      	lsls	r3, r3, #2
 80192f8:	aa98      	add	r2, sp, #608	; 0x260
 80192fa:	1850      	adds	r0, r2, r1
 80192fc:	441a      	add	r2, r3
 80192fe:	edd0 6a00 	vldr	s13, [r0]
 8019302:	ed92 7a00 	vldr	s14, [r2]
 8019306:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801930a:	ee37 7a66 	vsub.f32	s14, s14, s13
 801930e:	aaac      	add	r2, sp, #688	; 0x2b0
 8019310:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8019314:	440a      	add	r2, r1
 8019316:	a9ac      	add	r1, sp, #688	; 0x2b0
 8019318:	440b      	add	r3, r1
 801931a:	ed92 9a00 	vldr	s18, [r2]
 801931e:	edd3 7a00 	vldr	s15, [r3]
 8019322:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8019326:	eea6 9aa7 	vfma.f32	s18, s13, s15
 801932a:	f7fd be2c 	b.w	8016f86 <m_kalman_3gyro.isra.6.constprop.36+0x15e6>
 801932e:	4615      	mov	r5, r2
 8019330:	1c5c      	adds	r4, r3, #1
 8019332:	42ac      	cmp	r4, r5
 8019334:	4618      	mov	r0, r3
 8019336:	d3b4      	bcc.n	80192a2 <m_kalman_3gyro.isra.6.constprop.36+0x3902>
 8019338:	e7d9      	b.n	80192ee <m_kalman_3gyro.isra.6.constprop.36+0x394e>
 801933a:	f8dd 3698 	ldr.w	r3, [sp, #1688]	; 0x698
 801933e:	edd3 6a06 	vldr	s13, [r3, #24]
 8019342:	ed93 7a07 	vldr	s14, [r3, #28]
 8019346:	edd3 7a08 	vldr	s15, [r3, #32]
 801934a:	f8dd 2698 	ldr.w	r2, [sp, #1688]	; 0x698
 801934e:	ee69 6aa6 	vmul.f32	s13, s19, s13
 8019352:	ee29 7a87 	vmul.f32	s14, s19, s14
 8019356:	ee69 7aa7 	vmul.f32	s15, s19, s15
 801935a:	2300      	movs	r3, #0
 801935c:	edc2 6a06 	vstr	s13, [r2, #24]
 8019360:	ed82 7a07 	vstr	s14, [r2, #28]
 8019364:	edc2 7a08 	vstr	s15, [r2, #32]
 8019368:	f8aa 38a6 	strh.w	r3, [sl, #2214]	; 0x8a6
 801936c:	f89a 38a4 	ldrb.w	r3, [sl, #2212]	; 0x8a4
 8019370:	2b00      	cmp	r3, #0
 8019372:	f47f abf5 	bne.w	8018b60 <m_kalman_3gyro.isra.6.constprop.36+0x31c0>
 8019376:	f89a 2030 	ldrb.w	r2, [sl, #48]	; 0x30
 801937a:	b32a      	cbz	r2, 80193c8 <m_kalman_3gyro.isra.6.constprop.36+0x3a28>
 801937c:	ed9d 7a02 	vldr	s14, [sp, #8]
 8019380:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8019384:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8019388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801938c:	d51c      	bpl.n	80193c8 <m_kalman_3gyro.isra.6.constprop.36+0x3a28>
 801938e:	ed9a 7af1 	vldr	s14, [sl, #964]	; 0x3c4
 8019392:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 8019396:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801939a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801939e:	d513      	bpl.n	80193c8 <m_kalman_3gyro.isra.6.constprop.36+0x3a28>
 80193a0:	f8da 13d8 	ldr.w	r1, [sl, #984]	; 0x3d8
 80193a4:	f8ca 1080 	str.w	r1, [sl, #128]	; 0x80
 80193a8:	f8da 13d4 	ldr.w	r1, [sl, #980]	; 0x3d4
 80193ac:	f8da 23dc 	ldr.w	r2, [sl, #988]	; 0x3dc
 80193b0:	f8ca 107c 	str.w	r1, [sl, #124]	; 0x7c
 80193b4:	f8dd 16d8 	ldr.w	r1, [sp, #1752]	; 0x6d8
 80193b8:	f8ca 2084 	str.w	r2, [sl, #132]	; 0x84
 80193bc:	2201      	movs	r2, #1
 80193be:	700a      	strb	r2, [r1, #0]
 80193c0:	f88a 3030 	strb.w	r3, [sl, #48]	; 0x30
 80193c4:	f7fd bee3 	b.w	801718e <m_kalman_3gyro.isra.6.constprop.36+0x17ee>
 80193c8:	f8da 2454 	ldr.w	r2, [sl, #1108]	; 0x454
 80193cc:	2a1e      	cmp	r2, #30
 80193ce:	d00e      	beq.n	80193ee <m_kalman_3gyro.isra.6.constprop.36+0x3a4e>
 80193d0:	2a00      	cmp	r2, #0
 80193d2:	f102 0301 	add.w	r3, r2, #1
 80193d6:	dd03      	ble.n	80193e0 <m_kalman_3gyro.isra.6.constprop.36+0x3a40>
 80193d8:	2b00      	cmp	r3, #0
 80193da:	bfd8      	it	le
 80193dc:	f06f 4300 	mvnle.w	r3, #2147483648	; 0x80000000
 80193e0:	2200      	movs	r2, #0
 80193e2:	f8ca 3454 	str.w	r3, [sl, #1108]	; 0x454
 80193e6:	f8ca 245c 	str.w	r2, [sl, #1116]	; 0x45c
 80193ea:	f7fd bed0 	b.w	801718e <m_kalman_3gyro.isra.6.constprop.36+0x17ee>
 80193ee:	f8ba 38a6 	ldrh.w	r3, [sl, #2214]	; 0x8a6
 80193f2:	2b27      	cmp	r3, #39	; 0x27
 80193f4:	f200 8130 	bhi.w	8019658 <m_kalman_3gyro.isra.6.constprop.36+0x3cb8>
 80193f8:	f8da 23d8 	ldr.w	r2, [sl, #984]	; 0x3d8
 80193fc:	f8ca 2080 	str.w	r2, [sl, #128]	; 0x80
 8019400:	f8da 23d4 	ldr.w	r2, [sl, #980]	; 0x3d4
 8019404:	f8da 33dc 	ldr.w	r3, [sl, #988]	; 0x3dc
 8019408:	f8ca 207c 	str.w	r2, [sl, #124]	; 0x7c
 801940c:	f8dd 26d8 	ldr.w	r2, [sp, #1752]	; 0x6d8
 8019410:	f8ca 3084 	str.w	r3, [sl, #132]	; 0x84
 8019414:	2301      	movs	r3, #1
 8019416:	7013      	strb	r3, [r2, #0]
 8019418:	f8ba 38a8 	ldrh.w	r3, [sl, #2216]	; 0x8a8
 801941c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019420:	3301      	adds	r3, #1
 8019422:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019426:	bf08      	it	eq
 8019428:	4613      	moveq	r3, r2
 801942a:	2201      	movs	r2, #1
 801942c:	f8aa 38a8 	strh.w	r3, [sl, #2216]	; 0x8a8
 8019430:	f8ca 245c 	str.w	r2, [sl, #1116]	; 0x45c
 8019434:	f7fd beab 	b.w	801718e <m_kalman_3gyro.isra.6.constprop.36+0x17ee>
 8019438:	f8da 2450 	ldr.w	r2, [sl, #1104]	; 0x450
 801943c:	2a32      	cmp	r2, #50	; 0x32
 801943e:	f000 81a5 	beq.w	801978c <m_kalman_3gyro.isra.6.constprop.36+0x3dec>
 8019442:	2300      	movs	r3, #0
 8019444:	2a00      	cmp	r2, #0
 8019446:	f8aa 3202 	strh.w	r3, [sl, #514]	; 0x202
 801944a:	f88a 3204 	strb.w	r3, [sl, #516]	; 0x204
 801944e:	f102 0301 	add.w	r3, r2, #1
 8019452:	f77f abb9 	ble.w	8018bc8 <m_kalman_3gyro.isra.6.constprop.36+0x3228>
 8019456:	2b00      	cmp	r3, #0
 8019458:	bfd8      	it	le
 801945a:	f06f 4300 	mvnle.w	r3, #2147483648	; 0x80000000
 801945e:	f7ff bbb3 	b.w	8018bc8 <m_kalman_3gyro.isra.6.constprop.36+0x3228>
 8019462:	2301      	movs	r3, #1
 8019464:	f88a 3204 	strb.w	r3, [sl, #516]	; 0x204
 8019468:	f240 1201 	movw	r2, #257	; 0x101
 801946c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801946e:	f8aa 2202 	strh.w	r2, [sl, #514]	; 0x202
 8019472:	edd3 7a00 	vldr	s15, [r3]
 8019476:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 801947a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801947e:	eef4 7ac8 	vcmpe.f32	s15, s16
 8019482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019486:	f280 8136 	bge.w	80196f6 <m_kalman_3gyro.isra.6.constprop.36+0x3d56>
 801948a:	f8dd 3698 	ldr.w	r3, [sp, #1688]	; 0x698
 801948e:	eeb4 eaed 	vcmpe.f32	s28, s27
 8019492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019496:	edd3 6a06 	vldr	s13, [r3, #24]
 801949a:	ed93 7a07 	vldr	s14, [r3, #28]
 801949e:	edd3 7a08 	vldr	s15, [r3, #32]
 80194a2:	f300 80ea 	bgt.w	801967a <m_kalman_3gyro.isra.6.constprop.36+0x3cda>
 80194a6:	ac86      	add	r4, sp, #536	; 0x218
 80194a8:	e74f      	b.n	801934a <m_kalman_3gyro.isra.6.constprop.36+0x39aa>
 80194aa:	bf00      	nop
 80194ac:	3ff80000 	.word	0x3ff80000
 80194b0:	20005368 	.word	0x20005368
 80194b4:	3e4ccccd 	.word	0x3e4ccccd
 80194b8:	9908      	ldr	r1, [sp, #32]
 80194ba:	f88a 3204 	strb.w	r3, [sl, #516]	; 0x204
 80194be:	f240 1201 	movw	r2, #257	; 0x101
 80194c2:	f8aa 2202 	strh.w	r2, [sl, #514]	; 0x202
 80194c6:	680a      	ldr	r2, [r1, #0]
 80194c8:	f8ca 207c 	str.w	r2, [sl, #124]	; 0x7c
 80194cc:	684a      	ldr	r2, [r1, #4]
 80194ce:	f8ca 2080 	str.w	r2, [sl, #128]	; 0x80
 80194d2:	688a      	ldr	r2, [r1, #8]
 80194d4:	f8ca 2084 	str.w	r2, [sl, #132]	; 0x84
 80194d8:	f8dd 26d8 	ldr.w	r2, [sp, #1752]	; 0x6d8
 80194dc:	7013      	strb	r3, [r2, #0]
 80194de:	f8da 345c 	ldr.w	r3, [sl, #1116]	; 0x45c
 80194e2:	f89a 2030 	ldrb.w	r2, [sl, #48]	; 0x30
 80194e6:	3301      	adds	r3, #1
 80194e8:	f8ca 345c 	str.w	r3, [sl, #1116]	; 0x45c
 80194ec:	b172      	cbz	r2, 801950c <m_kalman_3gyro.isra.6.constprop.36+0x3b6c>
 80194ee:	f8da 107c 	ldr.w	r1, [sl, #124]	; 0x7c
 80194f2:	f8da 2080 	ldr.w	r2, [sl, #128]	; 0x80
 80194f6:	f8ca 10a0 	str.w	r1, [sl, #160]	; 0xa0
 80194fa:	f8ca 20a4 	str.w	r2, [sl, #164]	; 0xa4
 80194fe:	f8da 1084 	ldr.w	r1, [sl, #132]	; 0x84
 8019502:	f8ca 10a8 	str.w	r1, [sl, #168]	; 0xa8
 8019506:	2200      	movs	r2, #0
 8019508:	f88a 2030 	strb.w	r2, [sl, #48]	; 0x30
 801950c:	2b1e      	cmp	r3, #30
 801950e:	f47e ae8b 	bne.w	8018228 <m_kalman_3gyro.isra.6.constprop.36+0x2888>
 8019512:	f60a 0398 	addw	r3, sl, #2200	; 0x898
 8019516:	f8da 00a0 	ldr.w	r0, [sl, #160]	; 0xa0
 801951a:	f8da 10a4 	ldr.w	r1, [sl, #164]	; 0xa4
 801951e:	f8da 20a8 	ldr.w	r2, [sl, #168]	; 0xa8
 8019522:	6018      	str	r0, [r3, #0]
 8019524:	f60a 039c 	addw	r3, sl, #2204	; 0x89c
 8019528:	ac86      	add	r4, sp, #536	; 0x218
 801952a:	6019      	str	r1, [r3, #0]
 801952c:	f50a 630a 	add.w	r3, sl, #2208	; 0x8a0
 8019530:	601a      	str	r2, [r3, #0]
 8019532:	f7fd be2c 	b.w	801718e <m_kalman_3gyro.isra.6.constprop.36+0x17ee>
 8019536:	4613      	mov	r3, r2
 8019538:	e68d      	b.n	8019256 <m_kalman_3gyro.isra.6.constprop.36+0x38b6>
 801953a:	200d      	movs	r0, #13
 801953c:	2402      	movs	r4, #2
 801953e:	2101      	movs	r1, #1
 8019540:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
 8019544:	1843      	adds	r3, r0, r1
 8019546:	085b      	lsrs	r3, r3, #1
 8019548:	199a      	adds	r2, r3, r6
 801954a:	f50d 65c6 	add.w	r5, sp, #1584	; 0x630
 801954e:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 8019552:	f5a5 753c 	sub.w	r5, r5, #752	; 0x2f0
 8019556:	e00e      	b.n	8019576 <m_kalman_3gyro.isra.6.constprop.36+0x3bd6>
 8019558:	18ca      	adds	r2, r1, r3
 801955a:	4618      	mov	r0, r3
 801955c:	429c      	cmp	r4, r3
 801955e:	ea4f 0352 	mov.w	r3, r2, lsr #1
 8019562:	eb03 0206 	add.w	r2, r3, r6
 8019566:	f50d 65c6 	add.w	r5, sp, #1584	; 0x630
 801956a:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 801956e:	f5a5 753c 	sub.w	r5, r5, #752	; 0x2f0
 8019572:	f080 8180 	bcs.w	8019876 <m_kalman_3gyro.isra.6.constprop.36+0x3ed6>
 8019576:	ed95 7a00 	vldr	s14, [r5]
 801957a:	eeb4 8ac7 	vcmpe.f32	s16, s14
 801957e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019582:	dbe9      	blt.n	8019558 <m_kalman_3gyro.isra.6.constprop.36+0x3bb8>
 8019584:	1c5c      	adds	r4, r3, #1
 8019586:	42a0      	cmp	r0, r4
 8019588:	4619      	mov	r1, r3
 801958a:	d8db      	bhi.n	8019544 <m_kalman_3gyro.isra.6.constprop.36+0x3ba4>
 801958c:	f7fd b873 	b.w	8016676 <m_kalman_3gyro.isra.6.constprop.36+0xcd6>
 8019590:	200d      	movs	r0, #13
 8019592:	2402      	movs	r4, #2
 8019594:	2101      	movs	r1, #1
 8019596:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
 801959a:	180b      	adds	r3, r1, r0
 801959c:	085b      	lsrs	r3, r3, #1
 801959e:	199a      	adds	r2, r3, r6
 80195a0:	f50d 65c6 	add.w	r5, sp, #1584	; 0x630
 80195a4:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 80195a8:	f5a5 7556 	sub.w	r5, r5, #856	; 0x358
 80195ac:	edd5 7a00 	vldr	s15, [r5]
 80195b0:	eef4 7ac8 	vcmpe.f32	s15, s16
 80195b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80195b8:	d915      	bls.n	80195e6 <m_kalman_3gyro.isra.6.constprop.36+0x3c46>
 80195ba:	18ca      	adds	r2, r1, r3
 80195bc:	4618      	mov	r0, r3
 80195be:	429c      	cmp	r4, r3
 80195c0:	ea4f 0352 	mov.w	r3, r2, lsr #1
 80195c4:	eb03 0206 	add.w	r2, r3, r6
 80195c8:	f50d 65c6 	add.w	r5, sp, #1584	; 0x630
 80195cc:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 80195d0:	f5a5 7556 	sub.w	r5, r5, #856	; 0x358
 80195d4:	f080 8177 	bcs.w	80198c6 <m_kalman_3gyro.isra.6.constprop.36+0x3f26>
 80195d8:	edd5 7a00 	vldr	s15, [r5]
 80195dc:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80195e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80195e4:	dbe9      	blt.n	80195ba <m_kalman_3gyro.isra.6.constprop.36+0x3c1a>
 80195e6:	1c5c      	adds	r4, r3, #1
 80195e8:	42a0      	cmp	r0, r4
 80195ea:	4619      	mov	r1, r3
 80195ec:	d8d5      	bhi.n	801959a <m_kalman_3gyro.isra.6.constprop.36+0x3bfa>
 80195ee:	0092      	lsls	r2, r2, #2
 80195f0:	009b      	lsls	r3, r3, #2
 80195f2:	a9b6      	add	r1, sp, #728	; 0x2d8
 80195f4:	1888      	adds	r0, r1, r2
 80195f6:	4419      	add	r1, r3
 80195f8:	edd0 6a00 	vldr	s13, [r0]
 80195fc:	edd1 7a00 	vldr	s15, [r1]
 8019600:	ee78 5a66 	vsub.f32	s11, s16, s13
 8019604:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8019608:	a9c3      	add	r1, sp, #780	; 0x30c
 801960a:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 801960e:	440a      	add	r2, r1
 8019610:	440b      	add	r3, r1
 8019612:	edd2 7a00 	vldr	s15, [r2]
 8019616:	edd3 6a00 	vldr	s13, [r3]
 801961a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 801961e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8019622:	f7fd bb0a 	b.w	8016c3a <m_kalman_3gyro.isra.6.constprop.36+0x129a>
 8019626:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801962a:	f8aa 38a6 	strh.w	r3, [sl, #2214]	; 0x8a6
 801962e:	f7ff ba60 	b.w	8018af2 <m_kalman_3gyro.isra.6.constprop.36+0x3152>
 8019632:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8019636:	f8ca 3130 	str.w	r3, [sl, #304]	; 0x130
 801963a:	f8ca 3158 	str.w	r3, [sl, #344]	; 0x158
 801963e:	f8ca 3180 	str.w	r3, [sl, #384]	; 0x180
 8019642:	e693      	b.n	801936c <m_kalman_3gyro.isra.6.constprop.36+0x39cc>
 8019644:	f8ca 0450 	str.w	r0, [sl, #1104]	; 0x450
 8019648:	f8aa 0202 	strh.w	r0, [sl, #514]	; 0x202
 801964c:	f88a 0204 	strb.w	r0, [sl, #516]	; 0x204
 8019650:	f8ca 045c 	str.w	r0, [sl, #1116]	; 0x45c
 8019654:	f7fd bd9b 	b.w	801718e <m_kalman_3gyro.isra.6.constprop.36+0x17ee>
 8019658:	9a08      	ldr	r2, [sp, #32]
 801965a:	6813      	ldr	r3, [r2, #0]
 801965c:	f8ca 307c 	str.w	r3, [sl, #124]	; 0x7c
 8019660:	6853      	ldr	r3, [r2, #4]
 8019662:	f8ca 3080 	str.w	r3, [sl, #128]	; 0x80
 8019666:	6892      	ldr	r2, [r2, #8]
 8019668:	f8ca 2084 	str.w	r2, [sl, #132]	; 0x84
 801966c:	f8dd 26d8 	ldr.w	r2, [sp, #1752]	; 0x6d8
 8019670:	2301      	movs	r3, #1
 8019672:	7013      	strb	r3, [r2, #0]
 8019674:	e6d0      	b.n	8019418 <m_kalman_3gyro.isra.6.constprop.36+0x3a78>
 8019676:	4613      	mov	r3, r2
 8019678:	e65a      	b.n	8019330 <m_kalman_3gyro.isra.6.constprop.36+0x3990>
 801967a:	eef4 eaec 	vcmpe.f32	s29, s25
 801967e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019682:	f77f af10 	ble.w	80194a6 <m_kalman_3gyro.isra.6.constprop.36+0x3b06>
 8019686:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8019688:	ed93 5a00 	vldr	s10, [r3]
 801968c:	eeb4 fac5 	vcmpe.f32	s30, s10
 8019690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019694:	f77f af07 	ble.w	80194a6 <m_kalman_3gyro.isra.6.constprop.36+0x3b06>
 8019698:	ed9d 6a02 	vldr	s12, [sp, #8]
 801969c:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 80196a0:	eeb4 6ae5 	vcmpe.f32	s12, s11
 80196a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80196a8:	f57f aefd 	bpl.w	80194a6 <m_kalman_3gyro.isra.6.constprop.36+0x3b06>
 80196ac:	ee8d 6a8e 	vdiv.f32	s12, s27, s28
 80196b0:	ee8c 4aae 	vdiv.f32	s8, s25, s29
 80196b4:	eec5 4a0f 	vdiv.f32	s9, s10, s30
 80196b8:	ee36 6a04 	vadd.f32	s12, s12, s8
 80196bc:	eeb7 5a08 	vmov.f32	s10, #120	; 0x3fc00000  1.5
 80196c0:	ee36 6a24 	vadd.f32	s12, s12, s9
 80196c4:	eeb4 6ac5 	vcmpe.f32	s12, s10
 80196c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80196cc:	f57f aeeb 	bpl.w	80194a6 <m_kalman_3gyro.isra.6.constprop.36+0x3b06>
 80196d0:	f8dd 2698 	ldr.w	r2, [sp, #1688]	; 0x698
 80196d4:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80196d8:	ee27 7a25 	vmul.f32	s14, s14, s11
 80196dc:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80196e0:	2300      	movs	r3, #0
 80196e2:	edc2 6a06 	vstr	s13, [r2, #24]
 80196e6:	ed82 7a07 	vstr	s14, [r2, #28]
 80196ea:	edc2 7a08 	vstr	s15, [r2, #32]
 80196ee:	ac86      	add	r4, sp, #536	; 0x218
 80196f0:	f8aa 38a6 	strh.w	r3, [sl, #2214]	; 0x8a6
 80196f4:	e63a      	b.n	801936c <m_kalman_3gyro.isra.6.constprop.36+0x39cc>
 80196f6:	ac86      	add	r4, sp, #536	; 0x218
 80196f8:	f7ff b9d5 	b.w	8018aa6 <m_kalman_3gyro.isra.6.constprop.36+0x3106>
 80196fc:	230c      	movs	r3, #12
 80196fe:	fb03 f400 	mul.w	r4, r3, r0
 8019702:	f601 0378 	addw	r3, r1, #2168	; 0x878
 8019706:	4423      	add	r3, r4
 8019708:	edc3 4a00 	vstr	s9, [r3]
 801970c:	f601 023c 	addw	r2, r1, #2108	; 0x83c
 8019710:	ed83 5a01 	vstr	s10, [r3, #4]
 8019714:	edc3 5a02 	vstr	s11, [r3, #8]
 8019718:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 801971c:	4422      	add	r2, r4
 801971e:	3001      	adds	r0, #1
 8019720:	2400      	movs	r4, #0
 8019722:	f881 0838 	strb.w	r0, [r1, #2104]	; 0x838
 8019726:	edc2 3a00 	vstr	s7, [r2]
 801972a:	edc2 0a01 	vstr	s1, [r2, #4]
 801972e:	ed82 4a02 	vstr	s8, [r2, #8]
 8019732:	701c      	strb	r4, [r3, #0]
 8019734:	f7fe bd1f 	b.w	8018176 <m_kalman_3gyro.isra.6.constprop.36+0x27d6>
 8019738:	240d      	movs	r4, #13
 801973a:	2002      	movs	r0, #2
 801973c:	2101      	movs	r1, #1
 801973e:	f06f 4540 	mvn.w	r5, #3221225472	; 0xc0000000
 8019742:	1862      	adds	r2, r4, r1
 8019744:	0852      	lsrs	r2, r2, #1
 8019746:	1953      	adds	r3, r2, r5
 8019748:	f50d 66c6 	add.w	r6, sp, #1584	; 0x630
 801974c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8019750:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 8019754:	edd3 7a00 	vldr	s15, [r3]
 8019758:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801975c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019760:	f280 80af 	bge.w	80198c2 <m_kalman_3gyro.isra.6.constprop.36+0x3f22>
 8019764:	188b      	adds	r3, r1, r2
 8019766:	085b      	lsrs	r3, r3, #1
 8019768:	195c      	adds	r4, r3, r5
 801976a:	f50d 66c6 	add.w	r6, sp, #1584	; 0x630
 801976e:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8019772:	4290      	cmp	r0, r2
 8019774:	f5a4 7456 	sub.w	r4, r4, #856	; 0x358
 8019778:	d259      	bcs.n	801982e <m_kalman_3gyro.isra.6.constprop.36+0x3e8e>
 801977a:	edd4 7a00 	vldr	s15, [r4]
 801977e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8019782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019786:	da4c      	bge.n	8019822 <m_kalman_3gyro.isra.6.constprop.36+0x3e82>
 8019788:	461a      	mov	r2, r3
 801978a:	e7eb      	b.n	8019764 <m_kalman_3gyro.isra.6.constprop.36+0x3dc4>
 801978c:	f8dd 3698 	ldr.w	r3, [sp, #1688]	; 0x698
 8019790:	ed1f 7ab8 	vldr	s14, [pc, #-736]	; 80194b4 <m_kalman_3gyro.isra.6.constprop.36+0x3b14>
 8019794:	edd3 7a06 	vldr	s15, [r3, #24]
 8019798:	f8dd 1698 	ldr.w	r1, [sp, #1688]	; 0x698
 801979c:	f8da 245c 	ldr.w	r2, [sl, #1116]	; 0x45c
 80197a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80197a4:	2301      	movs	r3, #1
 80197a6:	edc1 7a06 	vstr	s15, [r1, #24]
 80197aa:	f88a 3202 	strb.w	r3, [sl, #514]	; 0x202
 80197ae:	edd1 7a07 	vldr	s15, [r1, #28]
 80197b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80197b6:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 80197ba:	edc1 7a07 	vstr	s15, [r1, #28]
 80197be:	f88a 3203 	strb.w	r3, [sl, #515]	; 0x203
 80197c2:	edd1 7a08 	vldr	s15, [r1, #32]
 80197c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80197ca:	edc1 7a08 	vstr	s15, [r1, #32]
 80197ce:	f88a 3204 	strb.w	r3, [sl, #516]	; 0x204
 80197d2:	d014      	beq.n	80197fe <m_kalman_3gyro.isra.6.constprop.36+0x3e5e>
 80197d4:	2a00      	cmp	r2, #0
 80197d6:	f102 0301 	add.w	r3, r2, #1
 80197da:	dd03      	ble.n	80197e4 <m_kalman_3gyro.isra.6.constprop.36+0x3e44>
 80197dc:	2b00      	cmp	r3, #0
 80197de:	bfd8      	it	le
 80197e0:	f06f 4300 	mvnle.w	r3, #2147483648	; 0x80000000
 80197e4:	993e      	ldr	r1, [sp, #248]	; 0xf8
 80197e6:	f8ca 345c 	str.w	r3, [sl, #1116]	; 0x45c
 80197ea:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 80197ec:	9b40      	ldr	r3, [sp, #256]	; 0x100
 80197ee:	f8ca 10a0 	str.w	r1, [sl, #160]	; 0xa0
 80197f2:	f8ca 20a4 	str.w	r2, [sl, #164]	; 0xa4
 80197f6:	f8ca 30a8 	str.w	r3, [sl, #168]	; 0xa8
 80197fa:	f7fd bcc8 	b.w	801718e <m_kalman_3gyro.isra.6.constprop.36+0x17ee>
 80197fe:	f60a 0398 	addw	r3, sl, #2200	; 0x898
 8019802:	f8da 00a0 	ldr.w	r0, [sl, #160]	; 0xa0
 8019806:	f8da 10a4 	ldr.w	r1, [sl, #164]	; 0xa4
 801980a:	f8da 20a8 	ldr.w	r2, [sl, #168]	; 0xa8
 801980e:	6018      	str	r0, [r3, #0]
 8019810:	f60a 039c 	addw	r3, sl, #2204	; 0x89c
 8019814:	6019      	str	r1, [r3, #0]
 8019816:	f50a 630a 	add.w	r3, sl, #2208	; 0x8a0
 801981a:	601a      	str	r2, [r3, #0]
 801981c:	f240 33e9 	movw	r3, #1001	; 0x3e9
 8019820:	e7e0      	b.n	80197e4 <m_kalman_3gyro.isra.6.constprop.36+0x3e44>
 8019822:	4614      	mov	r4, r2
 8019824:	1c58      	adds	r0, r3, #1
 8019826:	42a0      	cmp	r0, r4
 8019828:	4619      	mov	r1, r3
 801982a:	d38a      	bcc.n	8019742 <m_kalman_3gyro.isra.6.constprop.36+0x3da2>
 801982c:	e000      	b.n	8019830 <m_kalman_3gyro.isra.6.constprop.36+0x3e90>
 801982e:	460b      	mov	r3, r1
 8019830:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 8019834:	3a01      	subs	r2, #1
 8019836:	0092      	lsls	r2, r2, #2
 8019838:	009b      	lsls	r3, r3, #2
 801983a:	a9b6      	add	r1, sp, #728	; 0x2d8
 801983c:	1888      	adds	r0, r1, r2
 801983e:	4419      	add	r1, r3
 8019840:	ed90 7a00 	vldr	s14, [r0]
 8019844:	edd1 7a00 	vldr	s15, [r1]
 8019848:	ee38 6a47 	vsub.f32	s12, s16, s14
 801984c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019850:	a9c3      	add	r1, sp, #780	; 0x30c
 8019852:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8019856:	440a      	add	r2, r1
 8019858:	440b      	add	r3, r1
 801985a:	edd2 7a00 	vldr	s15, [r2]
 801985e:	ed93 7a00 	vldr	s14, [r3]
 8019862:	ee37 7a67 	vsub.f32	s14, s14, s15
 8019866:	eee6 7a87 	vfma.f32	s15, s13, s14
 801986a:	f7fc bec8 	b.w	80165fe <m_kalman_3gyro.isra.6.constprop.36+0xc5e>
 801986e:	ed8a 9a2c 	vstr	s18, [sl, #176]	; 0xb0
 8019872:	f7ff ba55 	b.w	8018d20 <m_kalman_3gyro.isra.6.constprop.36+0x3380>
 8019876:	f101 4280 	add.w	r2, r1, #1073741824	; 0x40000000
 801987a:	460b      	mov	r3, r1
 801987c:	3a01      	subs	r2, #1
 801987e:	f7fc befa 	b.w	8016676 <m_kalman_3gyro.isra.6.constprop.36+0xcd6>
 8019882:	ed9f 6a25 	vldr	s12, [pc, #148]	; 8019918 <m_kalman_3gyro.isra.6.constprop.36+0x3f78>
 8019886:	f8dd 3698 	ldr.w	r3, [sp, #1688]	; 0x698
 801988a:	ee66 6a86 	vmul.f32	s13, s13, s12
 801988e:	ee27 7a06 	vmul.f32	s14, s14, s12
 8019892:	ee67 7a86 	vmul.f32	s15, s15, s12
 8019896:	edc3 6a06 	vstr	s13, [r3, #24]
 801989a:	ed83 7a07 	vstr	s14, [r3, #28]
 801989e:	edc3 7a08 	vstr	s15, [r3, #32]
 80198a2:	f7ff b91b 	b.w	8018adc <m_kalman_3gyro.isra.6.constprop.36+0x313c>
 80198a6:	b19d      	cbz	r5, 80198d0 <m_kalman_3gyro.isra.6.constprop.36+0x3f30>
 80198a8:	3d01      	subs	r5, #1
 80198aa:	f88a 58ad 	strb.w	r5, [sl, #2221]	; 0x8ad
 80198ae:	f8aa 01fc 	strh.w	r0, [sl, #508]	; 0x1fc
 80198b2:	f88a 01fe 	strb.w	r0, [sl, #510]	; 0x1fe
 80198b6:	f88a 0205 	strb.w	r0, [sl, #517]	; 0x205
 80198ba:	f88a 0207 	strb.w	r0, [sl, #519]	; 0x207
 80198be:	f7fd becd 	b.w	801765c <m_kalman_3gyro.isra.6.constprop.36+0x1cbc>
 80198c2:	4613      	mov	r3, r2
 80198c4:	e7ae      	b.n	8019824 <m_kalman_3gyro.isra.6.constprop.36+0x3e84>
 80198c6:	f101 4280 	add.w	r2, r1, #1073741824	; 0x40000000
 80198ca:	460b      	mov	r3, r1
 80198cc:	3a01      	subs	r2, #1
 80198ce:	e68e      	b.n	80195ee <m_kalman_3gyro.isra.6.constprop.36+0x3c4e>
 80198d0:	b14e      	cbz	r6, 80198e6 <m_kalman_3gyro.isra.6.constprop.36+0x3f46>
 80198d2:	f8aa 51fc 	strh.w	r5, [sl, #508]	; 0x1fc
 80198d6:	f88a 51fe 	strb.w	r5, [sl, #510]	; 0x1fe
 80198da:	f88a 5205 	strb.w	r5, [sl, #517]	; 0x205
 80198de:	f88a 5207 	strb.w	r5, [sl, #519]	; 0x207
 80198e2:	f7fd bebb 	b.w	801765c <m_kalman_3gyro.isra.6.constprop.36+0x1cbc>
 80198e6:	f8dd 3698 	ldr.w	r3, [sp, #1688]	; 0x698
 80198ea:	edd3 6a00 	vldr	s13, [r3]
 80198ee:	ed93 7a01 	vldr	s14, [r3, #4]
 80198f2:	edd3 7a02 	vldr	s15, [r3, #8]
 80198f6:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 80198fa:	ee66 6a86 	vmul.f32	s13, s13, s12
 80198fe:	ee27 7a06 	vmul.f32	s14, s14, s12
 8019902:	ee67 7a86 	vmul.f32	s15, s15, s12
 8019906:	edc3 6a00 	vstr	s13, [r3]
 801990a:	ed83 7a01 	vstr	s14, [r3, #4]
 801990e:	edc3 7a02 	vstr	s15, [r3, #8]
 8019912:	f7fd bea3 	b.w	801765c <m_kalman_3gyro.isra.6.constprop.36+0x1cbc>
 8019916:	bf00      	nop
 8019918:	3eaaaaab 	.word	0x3eaaaaab

0801991c <SpacePointAlgorithm.isra.7>:
 801991c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019920:	ed2d 8b10 	vpush	{d8-d15}
 8019924:	b0bb      	sub	sp, #236	; 0xec
 8019926:	f8df e3cc 	ldr.w	lr, [pc, #972]	; 8019cf4 <SpacePointAlgorithm.isra.7+0x3d8>
 801992a:	f89d 5160 	ldrb.w	r5, [sp, #352]	; 0x160
 801992e:	9514      	str	r5, [sp, #80]	; 0x50
 8019930:	f89d 5168 	ldrb.w	r5, [sp, #360]	; 0x168
 8019934:	9515      	str	r5, [sp, #84]	; 0x54
 8019936:	f89d 516c 	ldrb.w	r5, [sp, #364]	; 0x16c
 801993a:	9516      	str	r5, [sp, #88]	; 0x58
 801993c:	f89d 5170 	ldrb.w	r5, [sp, #368]	; 0x170
 8019940:	9517      	str	r5, [sp, #92]	; 0x5c
 8019942:	4682      	mov	sl, r0
 8019944:	4688      	mov	r8, r1
 8019946:	4693      	mov	fp, r2
 8019948:	461d      	mov	r5, r3
 801994a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801994e:	f10d 0c7c 	add.w	ip, sp, #124	; 0x7c
 8019952:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019956:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801995a:	9e69      	ldr	r6, [sp, #420]	; 0x1a4
 801995c:	edcd 0a18 	vstr	s1, [sp, #96]	; 0x60
 8019960:	e88c 0003 	stmia.w	ip, {r0, r1}
 8019964:	e9dd 0156 	ldrd	r0, r1, [sp, #344]	; 0x158
 8019968:	eef0 ba40 	vmov.f32	s23, s0
 801996c:	ed8d 1a19 	vstr	s2, [sp, #100]	; 0x64
 8019970:	eeb0 ea61 	vmov.f32	s28, s3
 8019974:	eeb0 ba42 	vmov.f32	s22, s4
 8019978:	eef0 9a62 	vmov.f32	s19, s5
 801997c:	eeb0 aa43 	vmov.f32	s20, s6
 8019980:	eef0 aa63 	vmov.f32	s21, s7
 8019984:	f7e7 f8b0 	bl	8000ae8 <__aeabi_d2f>
 8019988:	f896 38cc 	ldrb.w	r3, [r6, #2252]	; 0x8cc
 801998c:	9c54      	ldr	r4, [sp, #336]	; 0x150
 801998e:	f89d 9164 	ldrb.w	r9, [sp, #356]	; 0x164
 8019992:	9f64      	ldr	r7, [sp, #400]	; 0x190
 8019994:	ee0c 0a10 	vmov	s24, r0
 8019998:	b923      	cbnz	r3, 80199a4 <SpacePointAlgorithm.isra.7+0x88>
 801999a:	2200      	movs	r2, #0
 801999c:	2301      	movs	r3, #1
 801999e:	6032      	str	r2, [r6, #0]
 80199a0:	f886 38cc 	strb.w	r3, [r6, #2252]	; 0x8cc
 80199a4:	eddf 7ac7 	vldr	s15, [pc, #796]	; 8019cc4 <SpacePointAlgorithm.isra.7+0x3a8>
 80199a8:	eec7 7aab 	vdiv.f32	s15, s15, s23
 80199ac:	ee17 0a90 	vmov	r0, s15
 80199b0:	f7e6 fd4a 	bl	8000448 <__aeabi_f2d>
 80199b4:	f007 fbf0 	bl	8021198 <sqrt>
 80199b8:	f7e7 f896 	bl	8000ae8 <__aeabi_d2f>
 80199bc:	ed9f 5ac2 	vldr	s10, [pc, #776]	; 8019cc8 <SpacePointAlgorithm.isra.7+0x3ac>
 80199c0:	ed95 6a01 	vldr	s12, [r5, #4]
 80199c4:	edd5 7a00 	vldr	s15, [r5]
 80199c8:	edd5 6a02 	vldr	s13, [r5, #8]
 80199cc:	ed9f 4abf 	vldr	s8, [pc, #764]	; 8019ccc <SpacePointAlgorithm.isra.7+0x3b0>
 80199d0:	ed9d 1a20 	vldr	s2, [sp, #128]	; 0x80
 80199d4:	eddd 0a21 	vldr	s1, [sp, #132]	; 0x84
 80199d8:	eddd 5a22 	vldr	s11, [sp, #136]	; 0x88
 80199dc:	eddd 4a23 	vldr	s9, [sp, #140]	; 0x8c
 80199e0:	ee26 6a05 	vmul.f32	s12, s12, s10
 80199e4:	ee07 0a10 	vmov	s14, r0
 80199e8:	ee67 7a85 	vmul.f32	s15, s15, s10
 80199ec:	ee66 6a85 	vmul.f32	s13, s13, s10
 80199f0:	ed85 6a01 	vstr	s12, [r5, #4]
 80199f4:	ed9d 6a24 	vldr	s12, [sp, #144]	; 0x90
 80199f8:	edc5 7a00 	vstr	s15, [r5]
 80199fc:	edc5 6a02 	vstr	s13, [r5, #8]
 8019a00:	ee84 8a07 	vdiv.f32	s16, s8, s14
 8019a04:	ee27 fa01 	vmul.f32	s30, s14, s2
 8019a08:	ee67 ea20 	vmul.f32	s29, s14, s1
 8019a0c:	ee67 8a25 	vmul.f32	s17, s14, s11
 8019a10:	ee67 fa24 	vmul.f32	s31, s14, s9
 8019a14:	ee27 da06 	vmul.f32	s26, s14, s12
 8019a18:	f1b9 0f04 	cmp.w	r9, #4
 8019a1c:	d806      	bhi.n	8019a2c <SpacePointAlgorithm.isra.7+0x110>
 8019a1e:	e8df f019 	tbh	[pc, r9, lsl #1]
 8019a22:	0139      	.short	0x0139
 8019a24:	012e0146 	.word	0x012e0146
 8019a28:	01100005 	.word	0x01100005
 8019a2c:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8019cd0 <SpacePointAlgorithm.isra.7+0x3b4>
 8019a30:	eddf caa8 	vldr	s25, [pc, #672]	; 8019cd4 <SpacePointAlgorithm.isra.7+0x3b8>
 8019a34:	ee69 9aa7 	vmul.f32	s19, s19, s15
 8019a38:	ee2a aa27 	vmul.f32	s20, s20, s15
 8019a3c:	ee6a aaa7 	vmul.f32	s21, s21, s15
 8019a40:	ee69 9a8c 	vmul.f32	s19, s19, s24
 8019a44:	ee2a aa0c 	vmul.f32	s20, s20, s24
 8019a48:	ee6a aa8c 	vmul.f32	s21, s21, s24
 8019a4c:	eef6 da00 	vmov.f32	s27, #96	; 0x3f000000  0.5
 8019a50:	2200      	movs	r2, #0
 8019a52:	2300      	movs	r3, #0
 8019a54:	e9dd 015e 	ldrd	r0, r1, [sp, #376]	; 0x178
 8019a58:	ed96 9a00 	vldr	s18, [r6]
 8019a5c:	f7e6 ffb4 	bl	80009c8 <__aeabi_dcmpeq>
 8019a60:	b168      	cbz	r0, 8019a7e <SpacePointAlgorithm.isra.7+0x162>
 8019a62:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 8019a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a6a:	f340 80ef 	ble.w	8019c4c <SpacePointAlgorithm.isra.7+0x330>
 8019a6e:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8019a72:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8019a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a7a:	f140 80e7 	bpl.w	8019c4c <SpacePointAlgorithm.isra.7+0x330>
 8019a7e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8019a82:	ee79 7a27 	vadd.f32	s15, s18, s15
 8019a86:	ed9f 9a94 	vldr	s18, [pc, #592]	; 8019cd8 <SpacePointAlgorithm.isra.7+0x3bc>
 8019a8a:	ed9f 7a94 	vldr	s14, [pc, #592]	; 8019cdc <SpacePointAlgorithm.isra.7+0x3c0>
 8019a8e:	edc6 7a00 	vstr	s15, [r6]
 8019a92:	ee67 7a89 	vmul.f32	s15, s15, s18
 8019a96:	ee6b 4a2f 	vmul.f32	s9, s22, s31
 8019a9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8019a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019aa2:	bfb8      	it	lt
 8019aa4:	eef0 7a47 	vmovlt.f32	s15, s14
 8019aa8:	ee88 5a27 	vdiv.f32	s10, s16, s15
 8019aac:	ed9f 6a8c 	vldr	s12, [pc, #560]	; 8019ce0 <SpacePointAlgorithm.isra.7+0x3c4>
 8019ab0:	ee6d 5aa8 	vmul.f32	s11, s27, s17
 8019ab4:	ee27 1a8f 	vmul.f32	s2, s15, s30
 8019ab8:	ee67 0aae 	vmul.f32	s1, s15, s29
 8019abc:	ee64 4aa7 	vmul.f32	s9, s9, s15
 8019ac0:	ee2d 6a06 	vmul.f32	s12, s26, s12
 8019ac4:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8019ac8:	edd8 7a01 	vldr	s15, [r8, #4]
 8019acc:	ed94 3a09 	vldr	s6, [r4, #36]	; 0x24
 8019ad0:	ed94 4a05 	vldr	s8, [r4, #20]
 8019ad4:	edd4 6a03 	vldr	s13, [r4, #12]
 8019ad8:	edd8 3a00 	vldr	s7, [r8]
 8019adc:	edd4 2a02 	vldr	s5, [r4, #8]
 8019ae0:	edcd 4a37 	vstr	s9, [sp, #220]	; 0xdc
 8019ae4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019ae8:	ed94 7a04 	vldr	s14, [r4, #16]
 8019aec:	edd4 4a07 	vldr	s9, [r4, #28]
 8019af0:	ed8d 6a38 	vstr	s12, [sp, #224]	; 0xe0
 8019af4:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8019af8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8019afc:	ed94 3a00 	vldr	s6, [r4]
 8019b00:	edcd 5a34 	vstr	s11, [sp, #208]	; 0xd0
 8019b04:	ee27 7a87 	vmul.f32	s14, s15, s14
 8019b08:	ee67 7a84 	vmul.f32	s15, s15, s8
 8019b0c:	ed94 4a01 	vldr	s8, [r4, #4]
 8019b10:	edcd 5a35 	vstr	s11, [sp, #212]	; 0xd4
 8019b14:	eee3 6a23 	vfma.f32	s13, s6, s7
 8019b18:	462b      	mov	r3, r5
 8019b1a:	ad1a      	add	r5, sp, #104	; 0x68
 8019b1c:	ed94 3a0b 	vldr	s6, [r4, #44]	; 0x2c
 8019b20:	edcd 5a36 	vstr	s11, [sp, #216]	; 0xd8
 8019b24:	eea3 7a84 	vfma.f32	s14, s7, s8
 8019b28:	4650      	mov	r0, sl
 8019b2a:	f10d 0ab8 	add.w	sl, sp, #184	; 0xb8
 8019b2e:	ed98 4a02 	vldr	s8, [r8, #8]
 8019b32:	edd4 5a08 	vldr	s11, [r4, #32]
 8019b36:	ed8d 5a25 	vstr	s10, [sp, #148]	; 0x94
 8019b3a:	ee34 6a43 	vsub.f32	s12, s8, s6
 8019b3e:	eee2 7aa3 	vfma.f32	s15, s5, s7
 8019b42:	f8df e1b4 	ldr.w	lr, [pc, #436]	; 8019cf8 <SpacePointAlgorithm.isra.7+0x3dc>
 8019b46:	f8df c1b4 	ldr.w	ip, [pc, #436]	; 8019cfc <SpacePointAlgorithm.isra.7+0x3e0>
 8019b4a:	ed94 4a06 	vldr	s8, [r4, #24]
 8019b4e:	ed8d 5a26 	vstr	s10, [sp, #152]	; 0x98
 8019b52:	eea4 7a86 	vfma.f32	s14, s9, s12
 8019b56:	ac25      	add	r4, sp, #148	; 0x94
 8019b58:	465a      	mov	r2, fp
 8019b5a:	eee5 7a86 	vfma.f32	s15, s11, s12
 8019b5e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8019d00 <SpacePointAlgorithm.isra.7+0x3e4>
 8019b62:	eee6 6a04 	vfma.f32	s13, s12, s8
 8019b66:	ed8d 7a1d 	vstr	s14, [sp, #116]	; 0x74
 8019b6a:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8019b6e:	ee2b ba07 	vmul.f32	s22, s22, s14
 8019b72:	edcd 6a1c 	vstr	s13, [sp, #112]	; 0x70
 8019b76:	ed8d 1a2e 	vstr	s2, [sp, #184]	; 0xb8
 8019b7a:	ed8d 1a2f 	vstr	s2, [sp, #188]	; 0xbc
 8019b7e:	ed8d 1a30 	vstr	s2, [sp, #192]	; 0xc0
 8019b82:	edcd 0a31 	vstr	s1, [sp, #196]	; 0xc4
 8019b86:	edcd 0a32 	vstr	s1, [sp, #200]	; 0xc8
 8019b8a:	edcd 0a33 	vstr	s1, [sp, #204]	; 0xcc
 8019b8e:	edcd 7a1e 	vstr	s15, [sp, #120]	; 0x78
 8019b92:	ed8d ba39 	vstr	s22, [sp, #228]	; 0xe4
 8019b96:	ed8d 5a27 	vstr	s10, [sp, #156]	; 0x9c
 8019b9a:	9612      	str	r6, [sp, #72]	; 0x48
 8019b9c:	9e68      	ldr	r6, [sp, #416]	; 0x1a0
 8019b9e:	9611      	str	r6, [sp, #68]	; 0x44
 8019ba0:	ed9d 7b60 	vldr	d7, [sp, #384]	; 0x180
 8019ba4:	9e67      	ldr	r6, [sp, #412]	; 0x19c
 8019ba6:	9610      	str	r6, [sp, #64]	; 0x40
 8019ba8:	9e66      	ldr	r6, [sp, #408]	; 0x198
 8019baa:	f8cd 900c 	str.w	r9, [sp, #12]
 8019bae:	ed8d 7b08 	vstr	d7, [sp, #32]
 8019bb2:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
 8019bb6:	f88d 9068 	strb.w	r9, [sp, #104]	; 0x68
 8019bba:	ed9d 7b5e 	vldr	d7, [sp, #376]	; 0x178
 8019bbe:	e9cd 760e 	strd	r7, r6, [sp, #56]	; 0x38
 8019bc2:	9e63      	ldr	r6, [sp, #396]	; 0x18c
 8019bc4:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 8019bc8:	960c      	str	r6, [sp, #48]	; 0x30
 8019bca:	9e62      	ldr	r6, [sp, #392]	; 0x188
 8019bcc:	9914      	ldr	r1, [sp, #80]	; 0x50
 8019bce:	9504      	str	r5, [sp, #16]
 8019bd0:	f88d 9069 	strb.w	r9, [sp, #105]	; 0x69
 8019bd4:	960b      	str	r6, [sp, #44]	; 0x2c
 8019bd6:	f89d 905c 	ldrb.w	r9, [sp, #92]	; 0x5c
 8019bda:	9e55      	ldr	r6, [sp, #340]	; 0x154
 8019bdc:	9102      	str	r1, [sp, #8]
 8019bde:	ad1b      	add	r5, sp, #108	; 0x6c
 8019be0:	ed8d 7b06 	vstr	d7, [sp, #24]
 8019be4:	eeb0 2a4c 	vmov.f32	s4, s24
 8019be8:	eef0 1a6b 	vmov.f32	s3, s23
 8019bec:	eeb0 1a6a 	vmov.f32	s2, s21
 8019bf0:	eef0 0a4a 	vmov.f32	s1, s20
 8019bf4:	eeb0 0a69 	vmov.f32	s0, s19
 8019bf8:	a91c      	add	r1, sp, #112	; 0x70
 8019bfa:	e9cd a400 	strd	sl, r4, [sp]
 8019bfe:	edcd ca28 	vstr	s25, [sp, #160]	; 0xa0
 8019c02:	edcd ca29 	vstr	s25, [sp, #164]	; 0xa4
 8019c06:	edcd ca2a 	vstr	s25, [sp, #168]	; 0xa8
 8019c0a:	f88d 906a 	strb.w	r9, [sp, #106]	; 0x6a
 8019c0e:	960a      	str	r6, [sp, #40]	; 0x28
 8019c10:	950d      	str	r5, [sp, #52]	; 0x34
 8019c12:	f8cd e0ac 	str.w	lr, [sp, #172]	; 0xac
 8019c16:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
 8019c1a:	f8cd 80b0 	str.w	r8, [sp, #176]	; 0xb0
 8019c1e:	f7fb febf 	bl	80159a0 <m_kalman_3gyro.isra.6.constprop.36>
 8019c22:	4621      	mov	r1, r4
 8019c24:	9862      	ldr	r0, [sp, #392]	; 0x188
 8019c26:	f7f7 fbd7 	bl	80113d8 <m_q2dcm_eml>
 8019c2a:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8019c2c:	68fb      	ldr	r3, [r7, #12]
 8019c2e:	6013      	str	r3, [r2, #0]
 8019c30:	693b      	ldr	r3, [r7, #16]
 8019c32:	6053      	str	r3, [r2, #4]
 8019c34:	697b      	ldr	r3, [r7, #20]
 8019c36:	6093      	str	r3, [r2, #8]
 8019c38:	b03b      	add	sp, #236	; 0xec
 8019c3a:	ecbd 8b10 	vpop	{d8-d15}
 8019c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019c42:	eddf ca28 	vldr	s25, [pc, #160]	; 8019ce4 <SpacePointAlgorithm.isra.7+0x3c8>
 8019c46:	eef7 da00 	vmov.f32	s27, #112	; 0x3f800000  1.0
 8019c4a:	e701      	b.n	8019a50 <SpacePointAlgorithm.isra.7+0x134>
 8019c4c:	eddf 7a26 	vldr	s15, [pc, #152]	; 8019ce8 <SpacePointAlgorithm.isra.7+0x3cc>
 8019c50:	ed9f 6a23 	vldr	s12, [pc, #140]	; 8019ce0 <SpacePointAlgorithm.isra.7+0x3c4>
 8019c54:	ee3e ea27 	vadd.f32	s28, s28, s15
 8019c58:	eddd 7a19 	vldr	s15, [sp, #100]	; 0x64
 8019c5c:	ee27 1a8f 	vmul.f32	s2, s15, s30
 8019c60:	eddd 7a18 	vldr	s15, [sp, #96]	; 0x60
 8019c64:	2300      	movs	r3, #0
 8019c66:	6033      	str	r3, [r6, #0]
 8019c68:	ee67 0aae 	vmul.f32	s1, s15, s29
 8019c6c:	ee6d 5aa8 	vmul.f32	s11, s27, s17
 8019c70:	ee6b 4a2f 	vmul.f32	s9, s22, s31
 8019c74:	ee88 5a0e 	vdiv.f32	s10, s16, s28
 8019c78:	ee2d 6a06 	vmul.f32	s12, s26, s12
 8019c7c:	e722      	b.n	8019ac4 <SpacePointAlgorithm.isra.7+0x1a8>
 8019c7e:	ee69 9a8c 	vmul.f32	s19, s19, s24
 8019c82:	ee2a aa0c 	vmul.f32	s20, s20, s24
 8019c86:	ee6a aa8c 	vmul.f32	s21, s21, s24
 8019c8a:	eddf ca18 	vldr	s25, [pc, #96]	; 8019cec <SpacePointAlgorithm.isra.7+0x3d0>
 8019c8e:	eef1 da04 	vmov.f32	s27, #20	; 0x40a00000  5.0
 8019c92:	e6dd      	b.n	8019a50 <SpacePointAlgorithm.isra.7+0x134>
 8019c94:	eddf 7a16 	vldr	s15, [pc, #88]	; 8019cf0 <SpacePointAlgorithm.isra.7+0x3d4>
 8019c98:	eddf ca0e 	vldr	s25, [pc, #56]	; 8019cd4 <SpacePointAlgorithm.isra.7+0x3b8>
 8019c9c:	ee69 9aa7 	vmul.f32	s19, s19, s15
 8019ca0:	ee2a aa27 	vmul.f32	s20, s20, s15
 8019ca4:	ee6a aaa7 	vmul.f32	s21, s21, s15
 8019ca8:	eef7 da00 	vmov.f32	s27, #112	; 0x3f800000  1.0
 8019cac:	e6d0      	b.n	8019a50 <SpacePointAlgorithm.isra.7+0x134>
 8019cae:	ee69 9a8c 	vmul.f32	s19, s19, s24
 8019cb2:	ee2a aa0c 	vmul.f32	s20, s20, s24
 8019cb6:	ee6a aa8c 	vmul.f32	s21, s21, s24
 8019cba:	eddf ca0a 	vldr	s25, [pc, #40]	; 8019ce4 <SpacePointAlgorithm.isra.7+0x3c8>
 8019cbe:	eef7 da00 	vmov.f32	s27, #112	; 0x3f800000  1.0
 8019cc2:	e6c5      	b.n	8019a50 <SpacePointAlgorithm.isra.7+0x134>
 8019cc4:	3c03126f 	.word	0x3c03126f
 8019cc8:	3c8efa35 	.word	0x3c8efa35
 8019ccc:	3b656042 	.word	0x3b656042
 8019cd0:	42c80000 	.word	0x42c80000
 8019cd4:	3a83126f 	.word	0x3a83126f
 8019cd8:	3d4ccccd 	.word	0x3d4ccccd
 8019cdc:	3e4ccccd 	.word	0x3e4ccccd
 8019ce0:	3f333333 	.word	0x3f333333
 8019ce4:	3ac49ba6 	.word	0x3ac49ba6
 8019ce8:	358637bd 	.word	0x358637bd
 8019cec:	3727c5ac 	.word	0x3727c5ac
 8019cf0:	3dcccccd 	.word	0x3dcccccd
 8019cf4:	08022eec 	.word	0x08022eec
 8019cf8:	3b449ba6 	.word	0x3b449ba6
 8019cfc:	3a9d4952 	.word	0x3a9d4952
 8019d00:	3c23d70a 	.word	0x3c23d70a

08019d04 <iNemo_update_6X.constprop.34>:
 8019d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d08:	4ce6      	ldr	r4, [pc, #920]	; (801a0a4 <iNemo_update_6X.constprop.34+0x3a0>)
 8019d0a:	4fe7      	ldr	r7, [pc, #924]	; (801a0a8 <iNemo_update_6X.constprop.34+0x3a4>)
 8019d0c:	f994 343d 	ldrsb.w	r3, [r4, #1085]	; 0x43d
 8019d10:	ee07 3a90 	vmov	s15, r3
 8019d14:	f994 3440 	ldrsb.w	r3, [r4, #1088]	; 0x440
 8019d18:	ee06 3a90 	vmov	s13, r3
 8019d1c:	f994 3458 	ldrsb.w	r3, [r4, #1112]	; 0x458
 8019d20:	ee07 3a10 	vmov	s14, r3
 8019d24:	f994 3455 	ldrsb.w	r3, [r4, #1109]	; 0x455
 8019d28:	ed2d 8b08 	vpush	{d8-d11}
 8019d2c:	ee09 3a90 	vmov	s19, r3
 8019d30:	f994 343c 	ldrsb.w	r3, [r4, #1084]	; 0x43c
 8019d34:	7b3a      	ldrb	r2, [r7, #12]
 8019d36:	ee01 3a90 	vmov	s3, r3
 8019d3a:	f994 343f 	ldrsb.w	r3, [r4, #1087]	; 0x43f
 8019d3e:	ee02 3a10 	vmov	s4, r3
 8019d42:	f994 3457 	ldrsb.w	r3, [r4, #1111]	; 0x457
 8019d46:	ee02 3a90 	vmov	s5, r3
 8019d4a:	f994 3454 	ldrsb.w	r3, [r4, #1108]	; 0x454
 8019d4e:	ee03 3a90 	vmov	s7, r3
 8019d52:	f994 3443 	ldrsb.w	r3, [r4, #1091]	; 0x443
 8019d56:	ee08 3a10 	vmov	s16, r3
 8019d5a:	f994 345b 	ldrsb.w	r3, [r4, #1115]	; 0x45b
 8019d5e:	ee08 3a90 	vmov	s17, r3
 8019d62:	f994 343e 	ldrsb.w	r3, [r4, #1086]	; 0x43e
 8019d66:	f604 05cc 	addw	r5, r4, #2252	; 0x8cc
 8019d6a:	edd5 4a07 	vldr	s9, [r5, #28]
 8019d6e:	ed95 3a06 	vldr	s6, [r5, #24]
 8019d72:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 8019d76:	ed95 4a09 	vldr	s8, [r5, #36]	; 0x24
 8019d7a:	ed95 5a08 	vldr	s10, [r5, #32]
 8019d7e:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 8019d82:	ee00 3a90 	vmov	s1, r3
 8019d86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019d8a:	f994 3441 	ldrsb.w	r3, [r4, #1089]	; 0x441
 8019d8e:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8019d92:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8019d96:	ee01 3a10 	vmov	s2, r3
 8019d9a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8019d9e:	f994 3442 	ldrsb.w	r3, [r4, #1090]	; 0x442
 8019da2:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8019da6:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 8019daa:	eee1 7a83 	vfma.f32	s15, s3, s6
 8019dae:	b0e5      	sub	sp, #404	; 0x194
 8019db0:	f10d 0958 	add.w	r9, sp, #88	; 0x58
 8019db4:	ee01 3a90 	vmov	s3, r3
 8019db8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019dbc:	f994 3459 	ldrsb.w	r3, [r4, #1113]	; 0x459
 8019dc0:	ee27 7a06 	vmul.f32	s14, s14, s12
 8019dc4:	eef8 2ae2 	vcvt.f32.s32	s5, s5
 8019dc8:	eee3 6a02 	vfma.f32	s13, s6, s4
 8019dcc:	4680      	mov	r8, r0
 8019dce:	ee02 3a10 	vmov	s4, r3
 8019dd2:	eef8 9ae9 	vcvt.f32.s32	s19, s19
 8019dd6:	f994 3456 	ldrsb.w	r3, [r4, #1110]	; 0x456
 8019dda:	ee69 9a86 	vmul.f32	s19, s19, s12
 8019dde:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 8019de2:	eea4 7a22 	vfma.f32	s14, s8, s5
 8019de6:	ee02 3a90 	vmov	s5, r3
 8019dea:	f994 345a 	ldrsb.w	r3, [r4, #1114]	; 0x45a
 8019dee:	eee3 9a84 	vfma.f32	s19, s7, s8
 8019df2:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8019df6:	ee03 3a90 	vmov	s7, r3
 8019dfa:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 8019dfe:	f994 3444 	ldrsb.w	r3, [r4, #1092]	; 0x444
 8019e02:	ee28 8a24 	vmul.f32	s16, s16, s9
 8019e06:	ee68 8a86 	vmul.f32	s17, s17, s12
 8019e0a:	ee04 3a90 	vmov	s9, r3
 8019e0e:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8019e12:	f994 345c 	ldrsb.w	r3, [r4, #1116]	; 0x45c
 8019e16:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8019e1a:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8019e1e:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 8019e22:	eef8 2ae2 	vcvt.f32.s32	s5, s5
 8019e26:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 8019e2a:	ee06 3a10 	vmov	s12, r3
 8019e2e:	eee0 7a85 	vfma.f32	s15, s1, s10
 8019e32:	2300      	movs	r3, #0
 8019e34:	e9c9 3300 	strd	r3, r3, [r9]
 8019e38:	eee5 6a01 	vfma.f32	s13, s10, s2
 8019e3c:	f8c9 3008 	str.w	r3, [r9, #8]
 8019e40:	eea3 8a21 	vfma.f32	s16, s6, s3
 8019e44:	eea5 7a82 	vfma.f32	s14, s11, s4
 8019e48:	eee2 9aa5 	vfma.f32	s19, s5, s11
 8019e4c:	eee4 8a23 	vfma.f32	s17, s8, s7
 8019e50:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8019e54:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8019e58:	eef0 ba40 	vmov.f32	s23, s0
 8019e5c:	eea5 8a24 	vfma.f32	s16, s10, s9
 8019e60:	eeb1 ba66 	vneg.f32	s22, s13
 8019e64:	eef1 aa67 	vneg.f32	s21, s15
 8019e68:	eeb1 aa47 	vneg.f32	s20, s14
 8019e6c:	eef1 9a69 	vneg.f32	s19, s19
 8019e70:	eee5 8a86 	vfma.f32	s17, s11, s12
 8019e74:	2a00      	cmp	r2, #0
 8019e76:	f000 8125 	beq.w	801a0c4 <iNemo_update_6X.constprop.34+0x3c0>
 8019e7a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8019e7e:	f8df a23c 	ldr.w	sl, [pc, #572]	; 801a0bc <iNemo_update_6X.constprop.34+0x3b8>
 8019e82:	f8df b23c 	ldr.w	fp, [pc, #572]	; 801a0c0 <iNemo_update_6X.constprop.34+0x3bc>
 8019e86:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8019e8a:	eee8 7a08 	vfma.f32	s15, s16, s16
 8019e8e:	ee17 0a90 	vmov	r0, s15
 8019e92:	f7e6 fad9 	bl	8000448 <__aeabi_f2d>
 8019e96:	f007 f97f 	bl	8021198 <sqrt>
 8019e9a:	f7e6 fe25 	bl	8000ae8 <__aeabi_d2f>
 8019e9e:	ee07 0a90 	vmov	s15, r0
 8019ea2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019ea6:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8019eaa:	ee2b ba27 	vmul.f32	s22, s22, s15
 8019eae:	ee6a aaa7 	vmul.f32	s21, s21, s15
 8019eb2:	ee28 8a27 	vmul.f32	s16, s16, s15
 8019eb6:	f894 29fd 	ldrb.w	r2, [r4, #2557]	; 0x9fd
 8019eba:	f894 39fc 	ldrb.w	r3, [r4, #2556]	; 0x9fc
 8019ebe:	6fa9      	ldr	r1, [r5, #120]	; 0x78
 8019ec0:	f8c5 1088 	str.w	r1, [r5, #136]	; 0x88
 8019ec4:	ee09 2a10 	vmov	s18, r2
 8019ec8:	4978      	ldr	r1, [pc, #480]	; (801a0ac <iNemo_update_6X.constprop.34+0x3a8>)
 8019eca:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 8019ecc:	f8d5 6080 	ldr.w	r6, [r5, #128]	; 0x80
 8019ed0:	f8c5 208c 	str.w	r2, [r5, #140]	; 0x8c
 8019ed4:	f043 0302 	orr.w	r3, r3, #2
 8019ed8:	22f8      	movs	r2, #248	; 0xf8
 8019eda:	f8d5 c084 	ldr.w	ip, [r5, #132]	; 0x84
 8019ede:	f8c5 6090 	str.w	r6, [r5, #144]	; 0x90
 8019ee2:	f083 0301 	eor.w	r3, r3, #1
 8019ee6:	188e      	adds	r6, r1, r2
 8019ee8:	a826      	add	r0, sp, #152	; 0x98
 8019eea:	f884 39fc 	strb.w	r3, [r4, #2556]	; 0x9fc
 8019eee:	f8c5 c094 	str.w	ip, [r5, #148]	; 0x94
 8019ef2:	f008 fcad 	bl	8022850 <memcpy>
 8019ef6:	f506 7c9b 	add.w	ip, r6, #310	; 0x136
 8019efa:	6a30      	ldr	r0, [r6, #32]
 8019efc:	f8cd c050 	str.w	ip, [sp, #80]	; 0x50
 8019f00:	2300      	movs	r3, #0
 8019f02:	f506 7e9a 	add.w	lr, r6, #308	; 0x134
 8019f06:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
 8019f0a:	f206 1235 	addw	r2, r6, #309	; 0x135
 8019f0e:	f8cd e048 	str.w	lr, [sp, #72]	; 0x48
 8019f12:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8019f16:	9213      	str	r2, [sp, #76]	; 0x4c
 8019f18:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
 8019f1c:	aa1d      	add	r2, sp, #116	; 0x74
 8019f1e:	632b      	str	r3, [r5, #48]	; 0x30
 8019f20:	636b      	str	r3, [r5, #52]	; 0x34
 8019f22:	63ab      	str	r3, [r5, #56]	; 0x38
 8019f24:	4962      	ldr	r1, [pc, #392]	; (801a0b0 <iNemo_update_6X.constprop.34+0x3ac>)
 8019f26:	f8cd a0ac 	str.w	sl, [sp, #172]	; 0xac
 8019f2a:	f10d 0a64 	add.w	sl, sp, #100	; 0x64
 8019f2e:	932a      	str	r3, [sp, #168]	; 0xa8
 8019f30:	9210      	str	r2, [sp, #64]	; 0x40
 8019f32:	ed8d ba2c 	vstr	s22, [sp, #176]	; 0xb0
 8019f36:	edcd aa2d 	vstr	s21, [sp, #180]	; 0xb4
 8019f3a:	ed8d 8a2e 	vstr	s16, [sp, #184]	; 0xb8
 8019f3e:	ed8d aa2f 	vstr	s20, [sp, #188]	; 0xbc
 8019f42:	edcd 9a30 	vstr	s19, [sp, #192]	; 0xc0
 8019f46:	edcd 8a31 	vstr	s17, [sp, #196]	; 0xc4
 8019f4a:	f8cd b0a4 	str.w	fp, [sp, #164]	; 0xa4
 8019f4e:	9115      	str	r1, [sp, #84]	; 0x54
 8019f50:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8019f54:	f7e6 fa78 	bl	8000448 <__aeabi_f2d>
 8019f58:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8019f5c:	f894 09de 	ldrb.w	r0, [r4, #2526]	; 0x9de
 8019f60:	ed96 ba0b 	vldr	s22, [r6, #44]	; 0x2c
 8019f64:	edd6 aa0a 	vldr	s21, [r6, #40]	; 0x28
 8019f68:	ed96 aa03 	vldr	s20, [r6, #12]
 8019f6c:	edd6 9a02 	vldr	s19, [r6, #8]
 8019f70:	edd6 8a01 	vldr	s17, [r6, #4]
 8019f74:	ed96 8a00 	vldr	s16, [r6]
 8019f78:	f7e6 fa44 	bl	8000404 <__aeabi_ui2d>
 8019f7c:	eeb8 9a49 	vcvt.f32.u32	s18, s18
 8019f80:	f894 39dc 	ldrb.w	r3, [r4, #2524]	; 0x9dc
 8019f84:	f894 c9da 	ldrb.w	ip, [r4, #2522]	; 0x9da
 8019f88:	f894 29d9 	ldrb.w	r2, [r4, #2521]	; 0x9d9
 8019f8c:	f894 e9db 	ldrb.w	lr, [r4, #2523]	; 0x9db
 8019f90:	ee29 9a2b 	vmul.f32	s18, s18, s23
 8019f94:	edd6 ba0c 	vldr	s23, [r6, #48]	; 0x30
 8019f98:	9308      	str	r3, [sp, #32]
 8019f9a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8019f9e:	f894 39d8 	ldrb.w	r3, [r4, #2520]	; 0x9d8
 8019fa2:	6930      	ldr	r0, [r6, #16]
 8019fa4:	e9cd 3204 	strd	r3, r2, [sp, #16]
 8019fa8:	e9cd ce06 	strd	ip, lr, [sp, #24]
 8019fac:	f7e6 fa4c 	bl	8000448 <__aeabi_f2d>
 8019fb0:	ae35      	add	r6, sp, #212	; 0xd4
 8019fb2:	f50d 7c82 	add.w	ip, sp, #260	; 0x104
 8019fb6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019fba:	eeb0 0a49 	vmov.f32	s0, s18
 8019fbe:	eef0 3a6b 	vmov.f32	s7, s23
 8019fc2:	eeb0 3a4b 	vmov.f32	s6, s22
 8019fc6:	eef0 2a6a 	vmov.f32	s5, s21
 8019fca:	eeb0 2a4a 	vmov.f32	s4, s20
 8019fce:	eef0 1a69 	vmov.f32	s3, s19
 8019fd2:	eeb0 1a68 	vmov.f32	s2, s17
 8019fd6:	eef0 0a48 	vmov.f32	s1, s16
 8019fda:	ab32      	add	r3, sp, #200	; 0xc8
 8019fdc:	aa2c      	add	r2, sp, #176	; 0xb0
 8019fde:	a929      	add	r1, sp, #164	; 0xa4
 8019fe0:	a848      	add	r0, sp, #288	; 0x120
 8019fe2:	e9cd 6c00 	strd	r6, ip, [sp]
 8019fe6:	f7ff fc99 	bl	801991c <SpacePointAlgorithm.isra.7>
 8019fea:	f1b8 0f00 	cmp.w	r8, #0
 8019fee:	d00f      	beq.n	801a010 <iNemo_update_6X.constprop.34+0x30c>
 8019ff0:	f8da 2000 	ldr.w	r2, [sl]
 8019ff4:	f8da 3004 	ldr.w	r3, [sl, #4]
 8019ff8:	f8c8 2000 	str.w	r2, [r8]
 8019ffc:	f8c8 3004 	str.w	r3, [r8, #4]
 801a000:	f8da 2008 	ldr.w	r2, [sl, #8]
 801a004:	f8da 300c 	ldr.w	r3, [sl, #12]
 801a008:	f8c8 2008 	str.w	r2, [r8, #8]
 801a00c:	f8c8 300c 	str.w	r3, [r8, #12]
 801a010:	4b28      	ldr	r3, [pc, #160]	; (801a0b4 <iNemo_update_6X.constprop.34+0x3b0>)
 801a012:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 801a016:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 801a01a:	f894 2afa 	ldrb.w	r2, [r4, #2810]	; 0xafa
 801a01e:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 801a022:	f8c3 10fc 	str.w	r1, [r3, #252]	; 0xfc
 801a026:	2a01      	cmp	r2, #1
 801a028:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 801a02c:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
 801a030:	d119      	bne.n	801a066 <iNemo_update_6X.constprop.34+0x362>
 801a032:	f8da 2004 	ldr.w	r2, [sl, #4]
 801a036:	f8da 6000 	ldr.w	r6, [sl]
 801a03a:	f8da 0008 	ldr.w	r0, [sl, #8]
 801a03e:	f8da 100c 	ldr.w	r1, [sl, #12]
 801a042:	67ea      	str	r2, [r5, #124]	; 0x7c
 801a044:	f8c5 208c 	str.w	r2, [r5, #140]	; 0x8c
 801a048:	2200      	movs	r2, #0
 801a04a:	67ae      	str	r6, [r5, #120]	; 0x78
 801a04c:	f8c5 6088 	str.w	r6, [r5, #136]	; 0x88
 801a050:	f8c5 0080 	str.w	r0, [r5, #128]	; 0x80
 801a054:	f8c5 0090 	str.w	r0, [r5, #144]	; 0x90
 801a058:	f8c5 1084 	str.w	r1, [r5, #132]	; 0x84
 801a05c:	f8c5 1094 	str.w	r1, [r5, #148]	; 0x94
 801a060:	f884 29e8 	strb.w	r2, [r4, #2536]	; 0x9e8
 801a064:	733a      	strb	r2, [r7, #12]
 801a066:	eddf 7a14 	vldr	s15, [pc, #80]	; 801a0b8 <iNemo_update_6X.constprop.34+0x3b4>
 801a06a:	ed99 6a00 	vldr	s12, [r9]
 801a06e:	edd9 6a01 	vldr	s13, [r9, #4]
 801a072:	ed99 7a02 	vldr	s14, [r9, #8]
 801a076:	f894 2af9 	ldrb.w	r2, [r4, #2809]	; 0xaf9
 801a07a:	ee26 5a27 	vmul.f32	s10, s12, s15
 801a07e:	ee66 5aa7 	vmul.f32	s11, s13, s15
 801a082:	ee67 7a27 	vmul.f32	s15, s14, s15
 801a086:	ed85 5a1b 	vstr	s10, [r5, #108]	; 0x6c
 801a08a:	edc5 5a1c 	vstr	s11, [r5, #112]	; 0x70
 801a08e:	edc5 7a1d 	vstr	s15, [r5, #116]	; 0x74
 801a092:	b1e2      	cbz	r2, 801a0ce <iNemo_update_6X.constprop.34+0x3ca>
 801a094:	f894 2b08 	ldrb.w	r2, [r4, #2824]	; 0xb08
 801a098:	2a09      	cmp	r2, #9
 801a09a:	d825      	bhi.n	801a0e8 <iNemo_update_6X.constprop.34+0x3e4>
 801a09c:	3201      	adds	r2, #1
 801a09e:	f884 2b08 	strb.w	r2, [r4, #2824]	; 0xb08
 801a0a2:	e016      	b.n	801a0d2 <iNemo_update_6X.constprop.34+0x3ce>
 801a0a4:	20004b40 	.word	0x20004b40
 801a0a8:	20000358 	.word	0x20000358
 801a0ac:	2000540c 	.word	0x2000540c
 801a0b0:	20000368 	.word	0x20000368
 801a0b4:	20005540 	.word	0x20005540
 801a0b8:	42652ee1 	.word	0x42652ee1
 801a0bc:	bf3504f3 	.word	0xbf3504f3
 801a0c0:	3f3504f3 	.word	0x3f3504f3
 801a0c4:	f8df a030 	ldr.w	sl, [pc, #48]	; 801a0f8 <iNemo_update_6X.constprop.34+0x3f4>
 801a0c8:	f8df b030 	ldr.w	fp, [pc, #48]	; 801a0fc <iNemo_update_6X.constprop.34+0x3f8>
 801a0cc:	e6f3      	b.n	8019eb6 <iNemo_update_6X.constprop.34+0x1b2>
 801a0ce:	f884 2b08 	strb.w	r2, [r4, #2824]	; 0xb08
 801a0d2:	f894 39fc 	ldrb.w	r3, [r4, #2556]	; 0x9fc
 801a0d6:	f083 0302 	eor.w	r3, r3, #2
 801a0da:	f884 39fc 	strb.w	r3, [r4, #2556]	; 0x9fc
 801a0de:	b065      	add	sp, #404	; 0x194
 801a0e0:	ecbd 8b08 	vpop	{d8-d11}
 801a0e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a0e8:	ed83 6a22 	vstr	s12, [r3, #136]	; 0x88
 801a0ec:	edc3 6a23 	vstr	s13, [r3, #140]	; 0x8c
 801a0f0:	ed83 7a24 	vstr	s14, [r3, #144]	; 0x90
 801a0f4:	e7ed      	b.n	801a0d2 <iNemo_update_6X.constprop.34+0x3ce>
 801a0f6:	bf00      	nop
 801a0f8:	bf333333 	.word	0xbf333333
 801a0fc:	3f333333 	.word	0x3f333333

0801a100 <iNemo_update.constprop.35>:
 801a100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a104:	4cf0      	ldr	r4, [pc, #960]	; (801a4c8 <iNemo_update.constprop.35+0x3c8>)
 801a106:	f994 3418 	ldrsb.w	r3, [r4, #1048]	; 0x418
 801a10a:	f994 2437 	ldrsb.w	r2, [r4, #1079]	; 0x437
 801a10e:	f994 a41a 	ldrsb.w	sl, [r4, #1050]	; 0x41a
 801a112:	f994 7420 	ldrsb.w	r7, [r4, #1056]	; 0x420
 801a116:	f994 9436 	ldrsb.w	r9, [r4, #1078]	; 0x436
 801a11a:	f994 6438 	ldrsb.w	r6, [r4, #1080]	; 0x438
 801a11e:	f994 1426 	ldrsb.w	r1, [r4, #1062]	; 0x426
 801a122:	f994 e424 	ldrsb.w	lr, [r4, #1060]	; 0x424
 801a126:	f994 c427 	ldrsb.w	ip, [r4, #1063]	; 0x427
 801a12a:	ed2d 8b0c 	vpush	{d8-d13}
 801a12e:	ee0c 3a10 	vmov	s24, r3
 801a132:	f994 3419 	ldrsb.w	r3, [r4, #1049]	; 0x419
 801a136:	ee07 3a90 	vmov	s15, r3
 801a13a:	f994 341b 	ldrsb.w	r3, [r4, #1051]	; 0x41b
 801a13e:	ee0b 3a90 	vmov	s23, r3
 801a142:	f994 341c 	ldrsb.w	r3, [r4, #1052]	; 0x41c
 801a146:	ee06 3a10 	vmov	s12, r3
 801a14a:	f994 341d 	ldrsb.w	r3, [r4, #1053]	; 0x41d
 801a14e:	ee00 3a90 	vmov	s1, r3
 801a152:	f994 341f 	ldrsb.w	r3, [r4, #1055]	; 0x41f
 801a156:	ee0c 3a90 	vmov	s25, r3
 801a15a:	f994 341e 	ldrsb.w	r3, [r4, #1054]	; 0x41e
 801a15e:	b0e7      	sub	sp, #412	; 0x19c
 801a160:	ee01 3a90 	vmov	s3, r3
 801a164:	f994 3425 	ldrsb.w	r3, [r4, #1061]	; 0x425
 801a168:	f10d 0860 	add.w	r8, sp, #96	; 0x60
 801a16c:	ee08 3a10 	vmov	s16, r3
 801a170:	2300      	movs	r3, #0
 801a172:	e9c8 3300 	strd	r3, r3, [r8]
 801a176:	f8c8 3008 	str.w	r3, [r8, #8]
 801a17a:	f994 3428 	ldrsb.w	r3, [r4, #1064]	; 0x428
 801a17e:	ee08 3a90 	vmov	s17, r3
 801a182:	f994 3429 	ldrsb.w	r3, [r4, #1065]	; 0x429
 801a186:	f604 350c 	addw	r5, r4, #2828	; 0xb0c
 801a18a:	edd5 2a09 	vldr	s5, [r5, #36]	; 0x24
 801a18e:	ed95 3a03 	vldr	s6, [r5, #12]
 801a192:	ed95 1a06 	vldr	s2, [r5, #24]
 801a196:	ed95 aa07 	vldr	s20, [r5, #28]
 801a19a:	edd5 3a08 	vldr	s7, [r5, #32]
 801a19e:	edd5 9a0a 	vldr	s19, [r5, #40]	; 0x28
 801a1a2:	ed95 4a0b 	vldr	s8, [r5, #44]	; 0x2c
 801a1a6:	ed95 9a04 	vldr	s18, [r5, #16]
 801a1aa:	edd5 4a05 	vldr	s9, [r5, #20]
 801a1ae:	ee06 3a90 	vmov	s13, r3
 801a1b2:	f994 342b 	ldrsb.w	r3, [r4, #1067]	; 0x42b
 801a1b6:	ee05 3a10 	vmov	s10, r3
 801a1ba:	f994 342a 	ldrsb.w	r3, [r4, #1066]	; 0x42a
 801a1be:	ee0a 3a90 	vmov	s21, r3
 801a1c2:	f994 342c 	ldrsb.w	r3, [r4, #1068]	; 0x42c
 801a1c6:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 801a1ca:	ee02 3a10 	vmov	s4, r3
 801a1ce:	f994 3434 	ldrsb.w	r3, [r4, #1076]	; 0x434
 801a1d2:	eef8 aaea 	vcvt.f32.s32	s21, s21
 801a1d6:	ee05 3a90 	vmov	s11, r3
 801a1da:	ee25 5a09 	vmul.f32	s10, s10, s18
 801a1de:	f994 3431 	ldrsb.w	r3, [r4, #1073]	; 0x431
 801a1e2:	eea3 5a2a 	vfma.f32	s10, s6, s21
 801a1e6:	4683      	mov	fp, r0
 801a1e8:	f994 0430 	ldrsb.w	r0, [r4, #1072]	; 0x430
 801a1ec:	ee07 3a10 	vmov	s14, r3
 801a1f0:	ee0a 0a90 	vmov	s21, r0
 801a1f4:	f994 3433 	ldrsb.w	r3, [r4, #1075]	; 0x433
 801a1f8:	48b4      	ldr	r0, [pc, #720]	; (801a4cc <iNemo_update.constprop.35+0x3cc>)
 801a1fa:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 801a1fe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a202:	eea4 5a82 	vfma.f32	s10, s9, s4
 801a206:	f890 08e0 	ldrb.w	r0, [r0, #2272]	; 0x8e0
 801a20a:	9017      	str	r0, [sp, #92]	; 0x5c
 801a20c:	ee0b 3a10 	vmov	s22, r3
 801a210:	ee27 7a29 	vmul.f32	s14, s14, s19
 801a214:	eef8 aaea 	vcvt.f32.s32	s21, s21
 801a218:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 801a21c:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 801a220:	eeaa 7aa2 	vfma.f32	s14, s21, s5
 801a224:	f994 3432 	ldrsb.w	r3, [r4, #1074]	; 0x432
 801a228:	ee0a 2a90 	vmov	s21, r2
 801a22c:	ee26 6a0a 	vmul.f32	s12, s12, s20
 801a230:	eef8 baeb 	vcvt.f32.s32	s23, s23
 801a234:	ee65 5aa9 	vmul.f32	s11, s11, s19
 801a238:	eeb8 bacb 	vcvt.f32.s32	s22, s22
 801a23c:	eea1 6a2b 	vfma.f32	s12, s2, s23
 801a240:	f994 2435 	ldrsb.w	r2, [r4, #1077]	; 0x435
 801a244:	eee2 5a8b 	vfma.f32	s11, s5, s22
 801a248:	eef8 baec 	vcvt.f32.s32	s23, s25
 801a24c:	eeb8 baea 	vcvt.f32.s32	s22, s21
 801a250:	eef0 ca45 	vmov.f32	s25, s10
 801a254:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a258:	ee05 9a10 	vmov	s10, r9
 801a25c:	ee67 7a8a 	vmul.f32	s15, s15, s20
 801a260:	ee6b 9a29 	vmul.f32	s19, s22, s19
 801a264:	ee2b aa8a 	vmul.f32	s20, s23, s20
 801a268:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801a26c:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 801a270:	eea1 aa21 	vfma.f32	s20, s2, s3
 801a274:	eee2 9a85 	vfma.f32	s19, s5, s10
 801a278:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 801a27c:	ee01 2a90 	vmov	s3, r2
 801a280:	ee05 ca10 	vmov	s10, ip
 801a284:	eeb8 cacc 	vcvt.f32.s32	s24, s24
 801a288:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801a28c:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 801a290:	ee68 8a89 	vmul.f32	s17, s17, s18
 801a294:	eeec 7a01 	vfma.f32	s15, s24, s2
 801a298:	eee3 8a05 	vfma.f32	s17, s6, s10
 801a29c:	eee4 5a21 	vfma.f32	s11, s8, s3
 801a2a0:	ee05 7a10 	vmov	s10, r7
 801a2a4:	ee0a aa90 	vmov	s21, sl
 801a2a8:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 801a2ac:	ee01 3a90 	vmov	s3, r3
 801a2b0:	ee02 ea10 	vmov	s4, lr
 801a2b4:	eef8 aaea 	vcvt.f32.s32	s21, s21
 801a2b8:	eef8 2ac5 	vcvt.f32.s32	s5, s10
 801a2bc:	ee28 8a09 	vmul.f32	s16, s16, s18
 801a2c0:	ee05 6a10 	vmov	s10, r6
 801a2c4:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801a2c8:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801a2cc:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 801a2d0:	eeea 7aa3 	vfma.f32	s15, s21, s7
 801a2d4:	eea2 8a03 	vfma.f32	s16, s4, s6
 801a2d8:	eea3 6aa0 	vfma.f32	s12, s7, s1
 801a2dc:	eeb8 3ac5 	vcvt.f32.s32	s6, s10
 801a2e0:	eea1 7a84 	vfma.f32	s14, s3, s8
 801a2e4:	ee05 1a10 	vmov	s10, r1
 801a2e8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801a2ec:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 801a2f0:	eef0 da40 	vmov.f32	s27, s0
 801a2f4:	eea3 aaa2 	vfma.f32	s20, s7, s5
 801a2f8:	eeb1 ba65 	vneg.f32	s22, s11
 801a2fc:	eef1 aa47 	vneg.f32	s21, s14
 801a300:	eee4 9a03 	vfma.f32	s19, s8, s6
 801a304:	eea5 8a24 	vfma.f32	s16, s10, s9
 801a308:	eee4 8aa6 	vfma.f32	s17, s9, s13
 801a30c:	eeb1 ca46 	vneg.f32	s24, s12
 801a310:	eef1 ba67 	vneg.f32	s23, s15
 801a314:	eeb1 da6c 	vneg.f32	s26, s25
 801a318:	b388      	cbz	r0, 801a37e <iNemo_update.constprop.35+0x27e>
 801a31a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801a31e:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 801a322:	eee6 7a06 	vfma.f32	s15, s12, s12
 801a326:	eeea 7a0a 	vfma.f32	s15, s20, s20
 801a32a:	ee17 0a90 	vmov	r0, s15
 801a32e:	f7e6 f88b 	bl	8000448 <__aeabi_f2d>
 801a332:	f006 ff31 	bl	8021198 <sqrt>
 801a336:	f7e6 fbd7 	bl	8000ae8 <__aeabi_d2f>
 801a33a:	ee07 0a90 	vmov	s15, r0
 801a33e:	eec9 7a27 	vdiv.f32	s15, s18, s15
 801a342:	ee28 7a08 	vmul.f32	s14, s16, s16
 801a346:	ee2c ca27 	vmul.f32	s24, s24, s15
 801a34a:	eea8 7aa8 	vfma.f32	s14, s17, s17
 801a34e:	ee6b baa7 	vmul.f32	s23, s23, s15
 801a352:	eeac 7aac 	vfma.f32	s14, s25, s25
 801a356:	ee2a aa27 	vmul.f32	s20, s20, s15
 801a35a:	ee17 0a10 	vmov	r0, s14
 801a35e:	f7e6 f873 	bl	8000448 <__aeabi_f2d>
 801a362:	f006 ff19 	bl	8021198 <sqrt>
 801a366:	f7e6 fbbf 	bl	8000ae8 <__aeabi_d2f>
 801a36a:	ee07 0a90 	vmov	s15, r0
 801a36e:	eec9 7a27 	vdiv.f32	s15, s18, s15
 801a372:	ee68 8aa7 	vmul.f32	s17, s17, s15
 801a376:	ee28 8a27 	vmul.f32	s16, s16, s15
 801a37a:	ee2d da27 	vmul.f32	s26, s26, s15
 801a37e:	f894 3c3c 	ldrb.w	r3, [r4, #3132]	; 0xc3c
 801a382:	f894 2c3d 	ldrb.w	r2, [r4, #3133]	; 0xc3d
 801a386:	4e52      	ldr	r6, [pc, #328]	; (801a4d0 <iNemo_update.constprop.35+0x3d0>)
 801a388:	4f52      	ldr	r7, [pc, #328]	; (801a4d4 <iNemo_update.constprop.35+0x3d4>)
 801a38a:	f8d5 c084 	ldr.w	ip, [r5, #132]	; 0x84
 801a38e:	f8d5 907c 	ldr.w	r9, [r5, #124]	; 0x7c
 801a392:	f8d5 e080 	ldr.w	lr, [r5, #128]	; 0x80
 801a396:	f8c5 c094 	str.w	ip, [r5, #148]	; 0x94
 801a39a:	ee09 2a10 	vmov	s18, r2
 801a39e:	f043 0302 	orr.w	r3, r3, #2
 801a3a2:	6faa      	ldr	r2, [r5, #120]	; 0x78
 801a3a4:	f8c5 2088 	str.w	r2, [r5, #136]	; 0x88
 801a3a8:	f083 0301 	eor.w	r3, r3, #1
 801a3ac:	22f8      	movs	r2, #248	; 0xf8
 801a3ae:	f5a6 719a 	sub.w	r1, r6, #308	; 0x134
 801a3b2:	a828      	add	r0, sp, #160	; 0xa0
 801a3b4:	f884 3c3c 	strb.w	r3, [r4, #3132]	; 0xc3c
 801a3b8:	f8c5 908c 	str.w	r9, [r5, #140]	; 0x8c
 801a3bc:	f8c5 e090 	str.w	lr, [r5, #144]	; 0x90
 801a3c0:	f008 fa46 	bl	8022850 <memcpy>
 801a3c4:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 801a3c8:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 801a3cc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801a3d0:	eddf 7a41 	vldr	s15, [pc, #260]	; 801a4d8 <iNemo_update.constprop.35+0x3d8>
 801a3d4:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
 801a3d8:	9715      	str	r7, [sp, #84]	; 0x54
 801a3da:	f106 0efa 	add.w	lr, r6, #250	; 0xfa
 801a3de:	64f0      	str	r0, [r6, #76]	; 0x4c
 801a3e0:	6531      	str	r1, [r6, #80]	; 0x50
 801a3e2:	6572      	str	r2, [r6, #84]	; 0x54
 801a3e4:	f106 03f9 	add.w	r3, r6, #249	; 0xf9
 801a3e8:	aa1f      	add	r2, sp, #124	; 0x7c
 801a3ea:	f106 00f8 	add.w	r0, r6, #248	; 0xf8
 801a3ee:	f1a6 016c 	sub.w	r1, r6, #108	; 0x6c
 801a3f2:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
 801a3f6:	edcd ba2f 	vstr	s23, [sp, #188]	; 0xbc
 801a3fa:	ed8d aa30 	vstr	s20, [sp, #192]	; 0xc0
 801a3fe:	ed56 ba03 	vldr	s23, [r6, #-12]
 801a402:	ed16 aa0c 	vldr	s20, [r6, #-48]	; 0xffffffd0
 801a406:	edcd 8a2b 	vstr	s17, [sp, #172]	; 0xac
 801a40a:	ed8d 8a2c 	vstr	s16, [sp, #176]	; 0xb0
 801a40e:	ed56 8a0e 	vldr	s17, [r6, #-56]	; 0xffffffc8
 801a412:	ed16 8a0f 	vldr	s16, [r6, #-60]	; 0xffffffc4
 801a416:	ed8d ba31 	vstr	s22, [sp, #196]	; 0xc4
 801a41a:	edcd aa32 	vstr	s21, [sp, #200]	; 0xc8
 801a41e:	ed16 ba04 	vldr	s22, [r6, #-16]
 801a422:	ed56 aa05 	vldr	s21, [r6, #-20]	; 0xffffffec
 801a426:	edcd 9a33 	vstr	s19, [sp, #204]	; 0xcc
 801a42a:	ed8d ca2e 	vstr	s24, [sp, #184]	; 0xb8
 801a42e:	ed56 9a0d 	vldr	s19, [r6, #-52]	; 0xffffffcc
 801a432:	ed8d da2d 	vstr	s26, [sp, #180]	; 0xb4
 801a436:	f8cd e050 	str.w	lr, [sp, #80]	; 0x50
 801a43a:	e9cd 0312 	strd	r0, r3, [sp, #72]	; 0x48
 801a43e:	910f      	str	r1, [sp, #60]	; 0x3c
 801a440:	edc5 7a0c 	vstr	s15, [r5, #48]	; 0x30
 801a444:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801a448:	edc5 7a0e 	vstr	s15, [r5, #56]	; 0x38
 801a44c:	9210      	str	r2, [sp, #64]	; 0x40
 801a44e:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801a452:	f856 0c1c 	ldr.w	r0, [r6, #-28]
 801a456:	f7e5 fff7 	bl	8000448 <__aeabi_f2d>
 801a45a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801a45e:	f894 0c1e 	ldrb.w	r0, [r4, #3102]	; 0xc1e
 801a462:	f7e5 ffcf 	bl	8000404 <__aeabi_ui2d>
 801a466:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801a46a:	f894 3c1c 	ldrb.w	r3, [r4, #3100]	; 0xc1c
 801a46e:	f894 cc1b 	ldrb.w	ip, [r4, #3099]	; 0xc1b
 801a472:	f894 2c1a 	ldrb.w	r2, [r4, #3098]	; 0xc1a
 801a476:	9308      	str	r3, [sp, #32]
 801a478:	f894 1c19 	ldrb.w	r1, [r4, #3097]	; 0xc19
 801a47c:	f894 3c18 	ldrb.w	r3, [r4, #3096]	; 0xc18
 801a480:	f856 0c2c 	ldr.w	r0, [r6, #-44]
 801a484:	eeb8 9a49 	vcvt.f32.u32	s18, s18
 801a488:	e9cd 2c06 	strd	r2, ip, [sp, #24]
 801a48c:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801a490:	f7e5 ffda 	bl	8000448 <__aeabi_f2d>
 801a494:	ee29 9a2d 	vmul.f32	s18, s18, s27
 801a498:	f50d 7e86 	add.w	lr, sp, #268	; 0x10c
 801a49c:	f10d 0cdc 	add.w	ip, sp, #220	; 0xdc
 801a4a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a4a4:	eef0 3a6b 	vmov.f32	s7, s23
 801a4a8:	eeb0 3a4b 	vmov.f32	s6, s22
 801a4ac:	eef0 2a6a 	vmov.f32	s5, s21
 801a4b0:	eeb0 2a4a 	vmov.f32	s4, s20
 801a4b4:	eef0 1a69 	vmov.f32	s3, s19
 801a4b8:	eeb0 1a68 	vmov.f32	s2, s17
 801a4bc:	eef0 0a48 	vmov.f32	s1, s16
 801a4c0:	eeb0 0a49 	vmov.f32	s0, s18
 801a4c4:	ab34      	add	r3, sp, #208	; 0xd0
 801a4c6:	e009      	b.n	801a4dc <iNemo_update.constprop.35+0x3dc>
 801a4c8:	20004b40 	.word	0x20004b40
 801a4cc:	20000358 	.word	0x20000358
 801a4d0:	20005780 	.word	0x20005780
 801a4d4:	20000c40 	.word	0x20000c40
 801a4d8:	00000000 	.word	0x00000000
 801a4dc:	aa2e      	add	r2, sp, #184	; 0xb8
 801a4de:	a92b      	add	r1, sp, #172	; 0xac
 801a4e0:	a84a      	add	r0, sp, #296	; 0x128
 801a4e2:	e9cd ce00 	strd	ip, lr, [sp]
 801a4e6:	f7ff fa19 	bl	801991c <SpacePointAlgorithm.isra.7>
 801a4ea:	f1bb 0f00 	cmp.w	fp, #0
 801a4ee:	d00f      	beq.n	801a510 <iNemo_update.constprop.35+0x410>
 801a4f0:	f8d9 2000 	ldr.w	r2, [r9]
 801a4f4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801a4f8:	f8cb 2000 	str.w	r2, [fp]
 801a4fc:	f8cb 3004 	str.w	r3, [fp, #4]
 801a500:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801a504:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801a508:	f8cb 2008 	str.w	r2, [fp, #8]
 801a50c:	f8cb 300c 	str.w	r3, [fp, #12]
 801a510:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801a514:	f8c6 3100 	str.w	r3, [r6, #256]	; 0x100
 801a518:	f894 3d3a 	ldrb.w	r3, [r4, #3386]	; 0xd3a
 801a51c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 801a520:	f8c6 20fc 	str.w	r2, [r6, #252]	; 0xfc
 801a524:	2b01      	cmp	r3, #1
 801a526:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 801a52a:	f8c6 2104 	str.w	r2, [r6, #260]	; 0x104
 801a52e:	d055      	beq.n	801a5dc <iNemo_update.constprop.35+0x4dc>
 801a530:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a532:	f103 3aff 	add.w	sl, r3, #4294967295
 801a536:	fa5f fa8a 	uxtb.w	sl, sl
 801a53a:	f1ba 0f08 	cmp.w	sl, #8
 801a53e:	bf9c      	itt	ls
 801a540:	4b35      	ldrls	r3, [pc, #212]	; (801a618 <iNemo_update.constprop.35+0x518>)
 801a542:	f883 a8e0 	strbls.w	sl, [r3, #2272]	; 0x8e0
 801a546:	eddf 7a35 	vldr	s15, [pc, #212]	; 801a61c <iNemo_update.constprop.35+0x51c>
 801a54a:	ed98 6a00 	vldr	s12, [r8]
 801a54e:	edd8 6a01 	vldr	s13, [r8, #4]
 801a552:	ed98 7a02 	vldr	s14, [r8, #8]
 801a556:	f894 3d39 	ldrb.w	r3, [r4, #3385]	; 0xd39
 801a55a:	ee26 5a27 	vmul.f32	s10, s12, s15
 801a55e:	ee66 5aa7 	vmul.f32	s11, s13, s15
 801a562:	ee67 7a27 	vmul.f32	s15, s14, s15
 801a566:	ed85 5a1b 	vstr	s10, [r5, #108]	; 0x6c
 801a56a:	edc5 5a1c 	vstr	s11, [r5, #112]	; 0x70
 801a56e:	edc5 7a1d 	vstr	s15, [r5, #116]	; 0x74
 801a572:	b13b      	cbz	r3, 801a584 <iNemo_update.constprop.35+0x484>
 801a574:	f894 3d48 	ldrb.w	r3, [r4, #3400]	; 0xd48
 801a578:	2b09      	cmp	r3, #9
 801a57a:	d828      	bhi.n	801a5ce <iNemo_update.constprop.35+0x4ce>
 801a57c:	3301      	adds	r3, #1
 801a57e:	f884 3d48 	strb.w	r3, [r4, #3400]	; 0xd48
 801a582:	e001      	b.n	801a588 <iNemo_update.constprop.35+0x488>
 801a584:	f884 3d48 	strb.w	r3, [r4, #3400]	; 0xd48
 801a588:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801a58c:	f894 3c3c 	ldrb.w	r3, [r4, #3132]	; 0xc3c
 801a590:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 801a594:	f8c6 20ac 	str.w	r2, [r6, #172]	; 0xac
 801a598:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801a59c:	f8c6 10b0 	str.w	r1, [r6, #176]	; 0xb0
 801a5a0:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 801a5a4:	f8c6 20b4 	str.w	r2, [r6, #180]	; 0xb4
 801a5a8:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 801a5ac:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801a5b0:	f8c6 00c4 	str.w	r0, [r6, #196]	; 0xc4
 801a5b4:	f083 0302 	eor.w	r3, r3, #2
 801a5b8:	f884 3c3c 	strb.w	r3, [r4, #3132]	; 0xc3c
 801a5bc:	f8c6 10c8 	str.w	r1, [r6, #200]	; 0xc8
 801a5c0:	f8c6 20cc 	str.w	r2, [r6, #204]	; 0xcc
 801a5c4:	b067      	add	sp, #412	; 0x19c
 801a5c6:	ecbd 8b0c 	vpop	{d8-d13}
 801a5ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a5ce:	ed86 6a22 	vstr	s12, [r6, #136]	; 0x88
 801a5d2:	edc6 6a23 	vstr	s13, [r6, #140]	; 0x8c
 801a5d6:	ed86 7a24 	vstr	s14, [r6, #144]	; 0x90
 801a5da:	e7d5      	b.n	801a588 <iNemo_update.constprop.35+0x488>
 801a5dc:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801a5e0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801a5e4:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
 801a5e8:	f8c5 2094 	str.w	r2, [r5, #148]	; 0x94
 801a5ec:	4a0a      	ldr	r2, [pc, #40]	; (801a618 <iNemo_update.constprop.35+0x518>)
 801a5ee:	f8d9 0000 	ldr.w	r0, [r9]
 801a5f2:	f8d9 1008 	ldr.w	r1, [r9, #8]
 801a5f6:	67eb      	str	r3, [r5, #124]	; 0x7c
 801a5f8:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
 801a5fc:	2300      	movs	r3, #0
 801a5fe:	67a8      	str	r0, [r5, #120]	; 0x78
 801a600:	f8c5 0088 	str.w	r0, [r5, #136]	; 0x88
 801a604:	f8c5 1080 	str.w	r1, [r5, #128]	; 0x80
 801a608:	f8c5 1090 	str.w	r1, [r5, #144]	; 0x90
 801a60c:	f884 3c28 	strb.w	r3, [r4, #3112]	; 0xc28
 801a610:	f882 38e0 	strb.w	r3, [r2, #2272]	; 0x8e0
 801a614:	e797      	b.n	801a546 <iNemo_update.constprop.35+0x446>
 801a616:	bf00      	nop
 801a618:	20000358 	.word	0x20000358
 801a61c:	42652ee1 	.word	0x42652ee1

0801a620 <MotionFX_initialize>:
 801a620:	490a      	ldr	r1, [pc, #40]	; (801a64c <MotionFX_initialize+0x2c>)
 801a622:	4a0b      	ldr	r2, [pc, #44]	; (801a650 <MotionFX_initialize+0x30>)
 801a624:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a628:	680b      	ldr	r3, [r1, #0]
 801a62a:	2001      	movs	r0, #1
 801a62c:	f023 0301 	bic.w	r3, r3, #1
 801a630:	600b      	str	r3, [r1, #0]
 801a632:	4613      	mov	r3, r2
 801a634:	6010      	str	r0, [r2, #0]
 801a636:	681d      	ldr	r5, [r3, #0]
 801a638:	2d00      	cmp	r5, #0
 801a63a:	d1fc      	bne.n	801a636 <MotionFX_initialize+0x16>
 801a63c:	4b05      	ldr	r3, [pc, #20]	; (801a654 <MotionFX_initialize+0x34>)
 801a63e:	4a06      	ldr	r2, [pc, #24]	; (801a658 <MotionFX_initialize+0x38>)
 801a640:	601a      	str	r2, [r3, #0]
 801a642:	681a      	ldr	r2, [r3, #0]
 801a644:	4b05      	ldr	r3, [pc, #20]	; (801a65c <MotionFX_initialize+0x3c>)
 801a646:	429a      	cmp	r2, r3
 801a648:	d00a      	beq.n	801a660 <MotionFX_initialize+0x40>
 801a64a:	e7fe      	b.n	801a64a <MotionFX_initialize+0x2a>
 801a64c:	e0002000 	.word	0xe0002000
 801a650:	40023008 	.word	0x40023008
 801a654:	40023000 	.word	0x40023000
 801a658:	f407a5c2 	.word	0xf407a5c2
 801a65c:	b5e8b5cd 	.word	0xb5e8b5cd
 801a660:	4cef      	ldr	r4, [pc, #956]	; (801aa20 <MotionFX_initialize+0x400>)
 801a662:	eddf 7af0 	vldr	s15, [pc, #960]	; 801aa24 <MotionFX_initialize+0x404>
 801a666:	4ef0      	ldr	r6, [pc, #960]	; (801aa28 <MotionFX_initialize+0x408>)
 801a668:	eddf 6af0 	vldr	s13, [pc, #960]	; 801aa2c <MotionFX_initialize+0x40c>
 801a66c:	f8c4 5d4c 	str.w	r5, [r4, #3404]	; 0xd4c
 801a670:	f04f 0901 	mov.w	r9, #1
 801a674:	ed9f 5be0 	vldr	d5, [pc, #896]	; 801a9f8 <MotionFX_initialize+0x3d8>
 801a678:	ed9f 1be1 	vldr	d1, [pc, #900]	; 801aa00 <MotionFX_initialize+0x3e0>
 801a67c:	ed9f 2be2 	vldr	d2, [pc, #904]	; 801aa08 <MotionFX_initialize+0x3e8>
 801a680:	ed9f 3be3 	vldr	d3, [pc, #908]	; 801aa10 <MotionFX_initialize+0x3f0>
 801a684:	f20f 3b90 	addw	fp, pc, #912	; 0x390
 801a688:	e9db ab00 	ldrd	sl, fp, [fp]
 801a68c:	f8c4 5d50 	str.w	r5, [r4, #3408]	; 0xd50
 801a690:	f884 9d49 	strb.w	r9, [r4, #3401]	; 0xd49
 801a694:	f7f7 fa7c 	bl	8011b90 <rt_InitInfAndNaN.isra.3>
 801a698:	f241 10b4 	movw	r0, #4532	; 0x11b4
 801a69c:	f241 11b6 	movw	r1, #4534	; 0x11b6
 801a6a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a6a4:	f606 08e8 	addw	r8, r6, #2280	; 0x8e8
 801a6a8:	220a      	movs	r2, #10
 801a6aa:	5235      	strh	r5, [r6, r0]
 801a6ac:	5475      	strb	r5, [r6, r1]
 801a6ae:	ed88 5b02 	vstr	d5, [r8, #8]
 801a6b2:	ed88 1b04 	vstr	d1, [r8, #16]
 801a6b6:	ed88 2b06 	vstr	d2, [r8, #24]
 801a6ba:	e9c8 ab08 	strd	sl, fp, [r8, #32]
 801a6be:	ed88 3b0a 	vstr	d3, [r8, #40]	; 0x28
 801a6c2:	ed88 7a82 	vstr	s14, [r8, #520]	; 0x208
 801a6c6:	f886 28e0 	strb.w	r2, [r6, #2272]	; 0x8e0
 801a6ca:	edc8 7a83 	vstr	s15, [r8, #524]	; 0x20c
 801a6ce:	edc8 7a84 	vstr	s15, [r8, #528]	; 0x210
 801a6d2:	f8c4 5418 	str.w	r5, [r4, #1048]	; 0x418
 801a6d6:	f8c4 5424 	str.w	r5, [r4, #1060]	; 0x424
 801a6da:	f8c4 5430 	str.w	r5, [r4, #1072]	; 0x430
 801a6de:	f8c4 541c 	str.w	r5, [r4, #1052]	; 0x41c
 801a6e2:	f884 5420 	strb.w	r5, [r4, #1056]	; 0x420
 801a6e6:	f8c4 5428 	str.w	r5, [r4, #1064]	; 0x428
 801a6ea:	f884 542c 	strb.w	r5, [r4, #1068]	; 0x42c
 801a6ee:	f8c4 5434 	str.w	r5, [r4, #1076]	; 0x434
 801a6f2:	f884 5438 	strb.w	r5, [r4, #1080]	; 0x438
 801a6f6:	f7f7 fa4b 	bl	8011b90 <rt_InitInfAndNaN.isra.3>
 801a6fa:	f604 330c 	addw	r3, r4, #2828	; 0xb0c
 801a6fe:	ed86 5b06 	vstr	d5, [r6, #24]
 801a702:	eddf 4acb 	vldr	s9, [pc, #812]	; 801aa30 <MotionFX_initialize+0x410>
 801a706:	ed9f 5acb 	vldr	s10, [pc, #812]	; 801aa34 <MotionFX_initialize+0x414>
 801a70a:	eddf 5acb 	vldr	s11, [pc, #812]	; 801aa38 <MotionFX_initialize+0x418>
 801a70e:	f8df c348 	ldr.w	ip, [pc, #840]	; 801aa58 <MotionFX_initialize+0x438>
 801a712:	48ca      	ldr	r0, [pc, #808]	; (801aa3c <MotionFX_initialize+0x41c>)
 801a714:	49ca      	ldr	r1, [pc, #808]	; (801aa40 <MotionFX_initialize+0x420>)
 801a716:	4acb      	ldr	r2, [pc, #812]	; (801aa44 <MotionFX_initialize+0x424>)
 801a718:	ed86 7a86 	vstr	s14, [r6, #536]	; 0x218
 801a71c:	f604 0ecc 	addw	lr, r4, #2252	; 0x8cc
 801a720:	f604 4704 	addw	r7, r4, #3076	; 0xc04
 801a724:	ed86 1b08 	vstr	d1, [r6, #32]
 801a728:	ed86 2b0a 	vstr	d2, [r6, #40]	; 0x28
 801a72c:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 801a730:	e9c6 ab0c 	strd	sl, fp, [r6, #48]	; 0x30
 801a734:	ed86 3b0e 	vstr	d3, [r6, #56]	; 0x38
 801a738:	f04f 0a02 	mov.w	sl, #2
 801a73c:	ed83 7a21 	vstr	s14, [r3, #132]	; 0x84
 801a740:	ed83 7a25 	vstr	s14, [r3, #148]	; 0x94
 801a744:	ed83 7a29 	vstr	s14, [r3, #164]	; 0xa4
 801a748:	edc6 7a87 	vstr	s15, [r6, #540]	; 0x21c
 801a74c:	edc6 7a88 	vstr	s15, [r6, #544]	; 0x220
 801a750:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
 801a754:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
 801a758:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
 801a75c:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
 801a760:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
 801a764:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
 801a768:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
 801a76c:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
 801a770:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
 801a774:	f8a6 58dc 	strh.w	r5, [r6, #2268]	; 0x8dc
 801a778:	f886 58de 	strb.w	r5, [r6, #2270]	; 0x8de
 801a77c:	f886 900c 	strb.w	r9, [r6, #12]
 801a780:	f04f 3b01 	mov.w	fp, #16843009	; 0x1010101
 801a784:	f8c4 543c 	str.w	r5, [r4, #1084]	; 0x43c
 801a788:	f8c4 5448 	str.w	r5, [r4, #1096]	; 0x448
 801a78c:	f8c4 5454 	str.w	r5, [r4, #1108]	; 0x454
 801a790:	f8c4 5440 	str.w	r5, [r4, #1088]	; 0x440
 801a794:	f884 5444 	strb.w	r5, [r4, #1092]	; 0x444
 801a798:	f8c4 544c 	str.w	r5, [r4, #1100]	; 0x44c
 801a79c:	f884 5450 	strb.w	r5, [r4, #1104]	; 0x450
 801a7a0:	f8c4 5458 	str.w	r5, [r4, #1112]	; 0x458
 801a7a4:	f884 545c 	strb.w	r5, [r4, #1116]	; 0x45c
 801a7a8:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
 801a7ac:	ed83 7a2d 	vstr	s14, [r3, #180]	; 0xb4
 801a7b0:	ed83 7a31 	vstr	s14, [r3, #196]	; 0xc4
 801a7b4:	ed83 7a35 	vstr	s14, [r3, #212]	; 0xd4
 801a7b8:	ed83 7a39 	vstr	s14, [r3, #228]	; 0xe4
 801a7bc:	ed83 7a3d 	vstr	s14, [r3, #244]	; 0xf4
 801a7c0:	ed83 7a0f 	vstr	s14, [r3, #60]	; 0x3c
 801a7c4:	ed83 7a13 	vstr	s14, [r3, #76]	; 0x4c
 801a7c8:	ed83 7a17 	vstr	s14, [r3, #92]	; 0x5c
 801a7cc:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
 801a7d0:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
 801a7d4:	edc3 7a2e 	vstr	s15, [r3, #184]	; 0xb8
 801a7d8:	edc3 7a2f 	vstr	s15, [r3, #188]	; 0xbc
 801a7dc:	edc3 7a30 	vstr	s15, [r3, #192]	; 0xc0
 801a7e0:	edc3 7a32 	vstr	s15, [r3, #200]	; 0xc8
 801a7e4:	edc3 7a33 	vstr	s15, [r3, #204]	; 0xcc
 801a7e8:	edc3 7a34 	vstr	s15, [r3, #208]	; 0xd0
 801a7ec:	edc3 7a36 	vstr	s15, [r3, #216]	; 0xd8
 801a7f0:	edc3 7a37 	vstr	s15, [r3, #220]	; 0xdc
 801a7f4:	edc3 7a38 	vstr	s15, [r3, #224]	; 0xe0
 801a7f8:	edc3 7a3a 	vstr	s15, [r3, #232]	; 0xe8
 801a7fc:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
 801a800:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
 801a804:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
 801a808:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
 801a80c:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
 801a810:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
 801a814:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
 801a818:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
 801a81c:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
 801a820:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
 801a824:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
 801a828:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
 801a82c:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
 801a830:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
 801a834:	f44f 7300 	mov.w	r3, #512	; 0x200
 801a838:	f8c4 cc2c 	str.w	ip, [r4, #3116]	; 0xc2c
 801a83c:	f8c4 0c30 	str.w	r0, [r4, #3120]	; 0xc30
 801a840:	f8c4 1c34 	str.w	r1, [r4, #3124]	; 0xc34
 801a844:	f8c4 2c38 	str.w	r2, [r4, #3128]	; 0xc38
 801a848:	edc8 7a28 	vstr	s15, [r8, #160]	; 0xa0
 801a84c:	edc8 7a29 	vstr	s15, [r8, #164]	; 0xa4
 801a850:	edc8 7a2a 	vstr	s15, [r8, #168]	; 0xa8
 801a854:	ed87 7a08 	vstr	s14, [r7, #32]
 801a858:	f604 18c4 	addw	r8, r4, #2500	; 0x9c4
 801a85c:	edc7 4a00 	vstr	s9, [r7]
 801a860:	ed87 5a01 	vstr	s10, [r7, #4]
 801a864:	edc7 5a02 	vstr	s11, [r7, #8]
 801a868:	edc7 6a03 	vstr	s13, [r7, #12]
 801a86c:	ed87 6a04 	vstr	s12, [r7, #16]
 801a870:	ed8e 7a21 	vstr	s14, [lr, #132]	; 0x84
 801a874:	ed8e 7a25 	vstr	s14, [lr, #148]	; 0x94
 801a878:	ed8e 7a29 	vstr	s14, [lr, #164]	; 0xa4
 801a87c:	edce 7a1e 	vstr	s15, [lr, #120]	; 0x78
 801a880:	edce 7a1f 	vstr	s15, [lr, #124]	; 0x7c
 801a884:	edce 7a20 	vstr	s15, [lr, #128]	; 0x80
 801a888:	edce 7a22 	vstr	s15, [lr, #136]	; 0x88
 801a88c:	edce 7a23 	vstr	s15, [lr, #140]	; 0x8c
 801a890:	edce 7a24 	vstr	s15, [lr, #144]	; 0x90
 801a894:	edce 7a26 	vstr	s15, [lr, #152]	; 0x98
 801a898:	edce 7a27 	vstr	s15, [lr, #156]	; 0x9c
 801a89c:	edce 7a28 	vstr	s15, [lr, #160]	; 0xa0
 801a8a0:	f8a4 3c3c 	strh.w	r3, [r4, #3132]	; 0xc3c
 801a8a4:	f8c4 9c1c 	str.w	r9, [r4, #3100]	; 0xc1c
 801a8a8:	f884 9c28 	strb.w	r9, [r4, #3112]	; 0xc28
 801a8ac:	f884 5c3e 	strb.w	r5, [r4, #3134]	; 0xc3e
 801a8b0:	f8c4 bc18 	str.w	fp, [r4, #3096]	; 0xc18
 801a8b4:	f884 ac20 	strb.w	sl, [r4, #3104]	; 0xc20
 801a8b8:	edce 7a2a 	vstr	s15, [lr, #168]	; 0xa8
 801a8bc:	ed8e 7a2d 	vstr	s14, [lr, #180]	; 0xb4
 801a8c0:	ed8e 7a31 	vstr	s14, [lr, #196]	; 0xc4
 801a8c4:	ed8e 7a35 	vstr	s14, [lr, #212]	; 0xd4
 801a8c8:	ed8e 7a39 	vstr	s14, [lr, #228]	; 0xe4
 801a8cc:	ed8e 7a3d 	vstr	s14, [lr, #244]	; 0xf4
 801a8d0:	ed8e 7a0f 	vstr	s14, [lr, #60]	; 0x3c
 801a8d4:	ed8e 7a13 	vstr	s14, [lr, #76]	; 0x4c
 801a8d8:	ed8e 7a17 	vstr	s14, [lr, #92]	; 0x5c
 801a8dc:	edce 7a2b 	vstr	s15, [lr, #172]	; 0xac
 801a8e0:	edce 7a2c 	vstr	s15, [lr, #176]	; 0xb0
 801a8e4:	edce 7a2e 	vstr	s15, [lr, #184]	; 0xb8
 801a8e8:	edce 7a2f 	vstr	s15, [lr, #188]	; 0xbc
 801a8ec:	edce 7a30 	vstr	s15, [lr, #192]	; 0xc0
 801a8f0:	edce 7a32 	vstr	s15, [lr, #200]	; 0xc8
 801a8f4:	edce 7a33 	vstr	s15, [lr, #204]	; 0xcc
 801a8f8:	edce 7a34 	vstr	s15, [lr, #208]	; 0xd0
 801a8fc:	edce 7a36 	vstr	s15, [lr, #216]	; 0xd8
 801a900:	edce 7a37 	vstr	s15, [lr, #220]	; 0xdc
 801a904:	edce 7a38 	vstr	s15, [lr, #224]	; 0xe0
 801a908:	edce 7a3a 	vstr	s15, [lr, #232]	; 0xe8
 801a90c:	edce 7a3b 	vstr	s15, [lr, #236]	; 0xec
 801a910:	edce 7a3c 	vstr	s15, [lr, #240]	; 0xf0
 801a914:	edce 7a10 	vstr	s15, [lr, #64]	; 0x40
 801a918:	edce 7a11 	vstr	s15, [lr, #68]	; 0x44
 801a91c:	edce 7a12 	vstr	s15, [lr, #72]	; 0x48
 801a920:	edce 7a14 	vstr	s15, [lr, #80]	; 0x50
 801a924:	edce 7a15 	vstr	s15, [lr, #84]	; 0x54
 801a928:	edce 7a16 	vstr	s15, [lr, #88]	; 0x58
 801a92c:	edce 7a18 	vstr	s15, [lr, #96]	; 0x60
 801a930:	edce 7a19 	vstr	s15, [lr, #100]	; 0x64
 801a934:	edce 7a1a 	vstr	s15, [lr, #104]	; 0x68
 801a938:	edce 7a1b 	vstr	s15, [lr, #108]	; 0x6c
 801a93c:	edce 7a1c 	vstr	s15, [lr, #112]	; 0x70
 801a940:	f8a4 39fc 	strh.w	r3, [r4, #2556]	; 0x9fc
 801a944:	4b40      	ldr	r3, [pc, #256]	; (801aa48 <MotionFX_initialize+0x428>)
 801a946:	f8c4 c9ec 	str.w	ip, [r4, #2540]	; 0x9ec
 801a94a:	f8c4 09f0 	str.w	r0, [r4, #2544]	; 0x9f0
 801a94e:	f8c4 19f4 	str.w	r1, [r4, #2548]	; 0x9f4
 801a952:	f8c4 29f8 	str.w	r2, [r4, #2552]	; 0x9f8
 801a956:	f8c4 39d8 	str.w	r3, [r4, #2520]	; 0x9d8
 801a95a:	edc6 7a2c 	vstr	s15, [r6, #176]	; 0xb0
 801a95e:	edc6 7a2d 	vstr	s15, [r6, #180]	; 0xb4
 801a962:	edc6 7a2e 	vstr	s15, [r6, #184]	; 0xb8
 801a966:	edc8 4a00 	vstr	s9, [r8]
 801a96a:	ed88 5a01 	vstr	s10, [r8, #4]
 801a96e:	edc8 5a02 	vstr	s11, [r8, #8]
 801a972:	edc8 6a03 	vstr	s13, [r8, #12]
 801a976:	ed88 6a04 	vstr	s12, [r8, #16]
 801a97a:	ed88 7a08 	vstr	s14, [r8, #32]
 801a97e:	edce 7a1d 	vstr	s15, [lr, #116]	; 0x74
 801a982:	f8c4 99dc 	str.w	r9, [r4, #2524]	; 0x9dc
 801a986:	f884 99e8 	strb.w	r9, [r4, #2536]	; 0x9e8
 801a98a:	f884 a9e0 	strb.w	sl, [r4, #2528]	; 0x9e0
 801a98e:	f884 59fe 	strb.w	r5, [r4, #2558]	; 0x9fe
 801a992:	f7f7 f9d1 	bl	8011d38 <iNemo_setOrientation.constprop.40>
 801a996:	f7f7 fba7 	bl	80120e8 <iNemo_setOrientation_6X.constprop.41>
 801a99a:	f04f 567f 	mov.w	r6, #1069547520	; 0x3fc00000
 801a99e:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 801aa5c <MotionFX_initialize+0x43c>
 801a9a2:	482a      	ldr	r0, [pc, #168]	; (801aa4c <MotionFX_initialize+0x42c>)
 801a9a4:	492a      	ldr	r1, [pc, #168]	; (801aa50 <MotionFX_initialize+0x430>)
 801a9a6:	4a2b      	ldr	r2, [pc, #172]	; (801aa54 <MotionFX_initialize+0x434>)
 801a9a8:	4b26      	ldr	r3, [pc, #152]	; (801aa44 <MotionFX_initialize+0x424>)
 801a9aa:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 801aa60 <MotionFX_initialize+0x440>
 801a9ae:	edc8 6a03 	vstr	s13, [r8, #12]
 801a9b2:	edc7 6a03 	vstr	s13, [r7, #12]
 801a9b6:	f884 a9fd 	strb.w	sl, [r4, #2557]	; 0x9fd
 801a9ba:	f884 59fe 	strb.w	r5, [r4, #2558]	; 0x9fe
 801a9be:	f884 ac3d 	strb.w	sl, [r4, #3133]	; 0xc3d
 801a9c2:	f884 5c3e 	strb.w	r5, [r4, #3134]	; 0xc3e
 801a9c6:	f8c4 bc19 	str.w	fp, [r4, #3097]	; 0xc19
 801a9ca:	f8c4 e9d9 	str.w	lr, [r4, #2521]	; 0x9d9
 801a9ce:	f8c8 c000 	str.w	ip, [r8]
 801a9d2:	f8c7 c000 	str.w	ip, [r7]
 801a9d6:	f8c8 6004 	str.w	r6, [r8, #4]
 801a9da:	607e      	str	r6, [r7, #4]
 801a9dc:	f8c8 0028 	str.w	r0, [r8, #40]	; 0x28
 801a9e0:	62b8      	str	r0, [r7, #40]	; 0x28
 801a9e2:	f8c8 102c 	str.w	r1, [r8, #44]	; 0x2c
 801a9e6:	62f9      	str	r1, [r7, #44]	; 0x2c
 801a9e8:	f8c8 2030 	str.w	r2, [r8, #48]	; 0x30
 801a9ec:	633a      	str	r2, [r7, #48]	; 0x30
 801a9ee:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
 801a9f2:	637b      	str	r3, [r7, #52]	; 0x34
 801a9f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a9f8:	60000000 	.word	0x60000000
 801a9fc:	3fc76cab 	.word	0x3fc76cab
 801aa00:	20000000 	.word	0x20000000
 801aa04:	3fc55a40 	.word	0x3fc55a40
 801aa08:	00000000 	.word	0x00000000
 801aa0c:	3fbfdfb7 	.word	0x3fbfdfb7
 801aa10:	60000000 	.word	0x60000000
 801aa14:	3f9f1fed 	.word	0x3f9f1fed
 801aa18:	c0000000 	.word	0xc0000000
 801aa1c:	3fb2875e 	.word	0x3fb2875e
 801aa20:	20004b40 	.word	0x20004b40
 801aa24:	00000000 	.word	0x00000000
 801aa28:	20000358 	.word	0x20000358
 801aa2c:	3f2ac083 	.word	0x3f2ac083
 801aa30:	3f639581 	.word	0x3f639581
 801aa34:	402ab021 	.word	0x402ab021
 801aa38:	3f13f7cf 	.word	0x3f13f7cf
 801aa3c:	3a09a027 	.word	0x3a09a027
 801aa40:	39b24207 	.word	0x39b24207
 801aa44:	3dcccccd 	.word	0x3dcccccd
 801aa48:	01000101 	.word	0x01000101
 801aa4c:	3a51b717 	.word	0x3a51b717
 801aa50:	3a378034 	.word	0x3a378034
 801aa54:	3b378034 	.word	0x3b378034
 801aa58:	39712c28 	.word	0x39712c28
 801aa5c:	3f666666 	.word	0x3f666666
 801aa60:	01010001 	.word	0x01010001

0801aa64 <MotionFX_setKnobs>:
 801aa64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aa66:	4b2f      	ldr	r3, [pc, #188]	; (801ab24 <MotionFX_setKnobs+0xc0>)
 801aa68:	f893 2d49 	ldrb.w	r2, [r3, #3401]	; 0xd49
 801aa6c:	b902      	cbnz	r2, 801aa70 <MotionFX_setKnobs+0xc>
 801aa6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801aa70:	2800      	cmp	r0, #0
 801aa72:	d0fc      	beq.n	801aa6e <MotionFX_setKnobs+0xa>
 801aa74:	f603 12c4 	addw	r2, r3, #2500	; 0x9c4
 801aa78:	6884      	ldr	r4, [r0, #8]
 801aa7a:	6806      	ldr	r6, [r0, #0]
 801aa7c:	6845      	ldr	r5, [r0, #4]
 801aa7e:	60d4      	str	r4, [r2, #12]
 801aa80:	7b01      	ldrb	r1, [r0, #12]
 801aa82:	f883 19d9 	strb.w	r1, [r3, #2521]	; 0x9d9
 801aa86:	f8d0 e010 	ldr.w	lr, [r0, #16]
 801aa8a:	f8d0 c014 	ldr.w	ip, [r0, #20]
 801aa8e:	6987      	ldr	r7, [r0, #24]
 801aa90:	6317      	str	r7, [r2, #48]	; 0x30
 801aa92:	f8c2 e028 	str.w	lr, [r2, #40]	; 0x28
 801aa96:	f8c2 c02c 	str.w	ip, [r2, #44]	; 0x2c
 801aa9a:	f890 7028 	ldrb.w	r7, [r0, #40]	; 0x28
 801aa9e:	f883 79fd 	strb.w	r7, [r3, #2557]	; 0x9fd
 801aaa2:	f890 c035 	ldrb.w	ip, [r0, #53]	; 0x35
 801aaa6:	f883 c9fe 	strb.w	ip, [r3, #2558]	; 0x9fe
 801aaaa:	f883 1c19 	strb.w	r1, [r3, #3097]	; 0xc19
 801aaae:	f603 4104 	addw	r1, r3, #3076	; 0xc04
 801aab2:	6016      	str	r6, [r2, #0]
 801aab4:	6055      	str	r5, [r2, #4]
 801aab6:	6a02      	ldr	r2, [r0, #32]
 801aab8:	f8d0 e01c 	ldr.w	lr, [r0, #28]
 801aabc:	62ca      	str	r2, [r1, #44]	; 0x2c
 801aabe:	6a42      	ldr	r2, [r0, #36]	; 0x24
 801aac0:	f883 cc3e 	strb.w	ip, [r3, #3134]	; 0xc3e
 801aac4:	f883 7c3d 	strb.w	r7, [r3, #3133]	; 0xc3d
 801aac8:	6b87      	ldr	r7, [r0, #56]	; 0x38
 801aaca:	f8c1 e028 	str.w	lr, [r1, #40]	; 0x28
 801aace:	630a      	str	r2, [r1, #48]	; 0x30
 801aad0:	4a15      	ldr	r2, [pc, #84]	; (801ab28 <MotionFX_setKnobs+0xc4>)
 801aad2:	600e      	str	r6, [r1, #0]
 801aad4:	604d      	str	r5, [r1, #4]
 801aad6:	60cc      	str	r4, [r1, #12]
 801aad8:	f8c3 7d54 	str.w	r7, [r3, #3412]	; 0xd54
 801aadc:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 801aae0:	7013      	strb	r3, [r2, #0]
 801aae2:	f890 e02d 	ldrb.w	lr, [r0, #45]	; 0x2d
 801aae6:	f890 702a 	ldrb.w	r7, [r0, #42]	; 0x2a
 801aaea:	f890 602e 	ldrb.w	r6, [r0, #46]	; 0x2e
 801aaee:	f890 5032 	ldrb.w	r5, [r0, #50]	; 0x32
 801aaf2:	f890 402b 	ldrb.w	r4, [r0, #43]	; 0x2b
 801aaf6:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
 801aafa:	f890 c031 	ldrb.w	ip, [r0, #49]	; 0x31
 801aafe:	f890 102f 	ldrb.w	r1, [r0, #47]	; 0x2f
 801ab02:	f882 e004 	strb.w	lr, [r2, #4]
 801ab06:	7057      	strb	r7, [r2, #1]
 801ab08:	7156      	strb	r6, [r2, #5]
 801ab0a:	7255      	strb	r5, [r2, #9]
 801ab0c:	7094      	strb	r4, [r2, #2]
 801ab0e:	7293      	strb	r3, [r2, #10]
 801ab10:	f882 c008 	strb.w	ip, [r2, #8]
 801ab14:	7191      	strb	r1, [r2, #6]
 801ab16:	f7f7 f90f 	bl	8011d38 <iNemo_setOrientation.constprop.40>
 801ab1a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801ab1e:	f7f7 bae3 	b.w	80120e8 <iNemo_setOrientation_6X.constprop.41>
 801ab22:	bf00      	nop
 801ab24:	20004b40 	.word	0x20004b40
 801ab28:	20000358 	.word	0x20000358

0801ab2c <MotionFX_getKnobs>:
 801ab2c:	4b28      	ldr	r3, [pc, #160]	; (801abd0 <MotionFX_getKnobs+0xa4>)
 801ab2e:	f893 2d49 	ldrb.w	r2, [r3, #3401]	; 0xd49
 801ab32:	b902      	cbnz	r2, 801ab36 <MotionFX_getKnobs+0xa>
 801ab34:	4770      	bx	lr
 801ab36:	2800      	cmp	r0, #0
 801ab38:	d0fc      	beq.n	801ab34 <MotionFX_getKnobs+0x8>
 801ab3a:	b470      	push	{r4, r5, r6}
 801ab3c:	f603 4204 	addw	r2, r3, #3076	; 0xc04
 801ab40:	68d1      	ldr	r1, [r2, #12]
 801ab42:	6854      	ldr	r4, [r2, #4]
 801ab44:	6815      	ldr	r5, [r2, #0]
 801ab46:	6005      	str	r5, [r0, #0]
 801ab48:	6044      	str	r4, [r0, #4]
 801ab4a:	6081      	str	r1, [r0, #8]
 801ab4c:	f893 1c19 	ldrb.w	r1, [r3, #3097]	; 0xc19
 801ab50:	7301      	strb	r1, [r0, #12]
 801ab52:	f603 11c4 	addw	r1, r3, #2500	; 0x9c4
 801ab56:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801ab58:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 801ab5a:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 801ab5c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 801ab5e:	6104      	str	r4, [r0, #16]
 801ab60:	6a94      	ldr	r4, [r2, #40]	; 0x28
 801ab62:	6b12      	ldr	r2, [r2, #48]	; 0x30
 801ab64:	6242      	str	r2, [r0, #36]	; 0x24
 801ab66:	6185      	str	r5, [r0, #24]
 801ab68:	61c4      	str	r4, [r0, #28]
 801ab6a:	6146      	str	r6, [r0, #20]
 801ab6c:	6201      	str	r1, [r0, #32]
 801ab6e:	4a19      	ldr	r2, [pc, #100]	; (801abd4 <MotionFX_getKnobs+0xa8>)
 801ab70:	f893 1c3d 	ldrb.w	r1, [r3, #3133]	; 0xc3d
 801ab74:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
 801ab78:	f893 6c3e 	ldrb.w	r6, [r3, #3134]	; 0xc3e
 801ab7c:	f8d3 5d54 	ldr.w	r5, [r3, #3412]	; 0xd54
 801ab80:	7814      	ldrb	r4, [r2, #0]
 801ab82:	7911      	ldrb	r1, [r2, #4]
 801ab84:	7a13      	ldrb	r3, [r2, #8]
 801ab86:	f880 6035 	strb.w	r6, [r0, #53]	; 0x35
 801ab8a:	6385      	str	r5, [r0, #56]	; 0x38
 801ab8c:	f880 4029 	strb.w	r4, [r0, #41]	; 0x29
 801ab90:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d
 801ab94:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
 801ab98:	7854      	ldrb	r4, [r2, #1]
 801ab9a:	7951      	ldrb	r1, [r2, #5]
 801ab9c:	7a55      	ldrb	r5, [r2, #9]
 801ab9e:	f880 402a 	strb.w	r4, [r0, #42]	; 0x2a
 801aba2:	2300      	movs	r3, #0
 801aba4:	7894      	ldrb	r4, [r2, #2]
 801aba6:	f880 102e 	strb.w	r1, [r0, #46]	; 0x2e
 801abaa:	7991      	ldrb	r1, [r2, #6]
 801abac:	7a92      	ldrb	r2, [r2, #10]
 801abae:	f880 5032 	strb.w	r5, [r0, #50]	; 0x32
 801abb2:	f880 402b 	strb.w	r4, [r0, #43]	; 0x2b
 801abb6:	f880 102f 	strb.w	r1, [r0, #47]	; 0x2f
 801abba:	f880 2033 	strb.w	r2, [r0, #51]	; 0x33
 801abbe:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 801abc2:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
 801abc6:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
 801abca:	bc70      	pop	{r4, r5, r6}
 801abcc:	4770      	bx	lr
 801abce:	bf00      	nop
 801abd0:	20004b40 	.word	0x20004b40
 801abd4:	20000358 	.word	0x20000358

0801abd8 <MotionFX_enable_6X>:
 801abd8:	4b0c      	ldr	r3, [pc, #48]	; (801ac0c <MotionFX_enable_6X+0x34>)
 801abda:	f893 2d49 	ldrb.w	r2, [r3, #3401]	; 0xd49
 801abde:	b112      	cbz	r2, 801abe6 <MotionFX_enable_6X+0xe>
 801abe0:	f8c3 0d4c 	str.w	r0, [r3, #3404]	; 0xd4c
 801abe4:	b900      	cbnz	r0, 801abe8 <MotionFX_enable_6X+0x10>
 801abe6:	4770      	bx	lr
 801abe8:	b430      	push	{r4, r5}
 801abea:	4a09      	ldr	r2, [pc, #36]	; (801ac10 <MotionFX_enable_6X+0x38>)
 801abec:	4809      	ldr	r0, [pc, #36]	; (801ac14 <MotionFX_enable_6X+0x3c>)
 801abee:	f503 6482 	add.w	r4, r3, #1040	; 0x410
 801abf2:	2100      	movs	r1, #0
 801abf4:	f203 4314 	addw	r3, r3, #1044	; 0x414
 801abf8:	f04f 45ff 	mov.w	r5, #2139095040	; 0x7f800000
 801abfc:	f8a2 18dc 	strh.w	r1, [r2, #2268]	; 0x8dc
 801ac00:	f882 18de 	strb.w	r1, [r2, #2270]	; 0x8de
 801ac04:	6025      	str	r5, [r4, #0]
 801ac06:	6018      	str	r0, [r3, #0]
 801ac08:	bc30      	pop	{r4, r5}
 801ac0a:	4770      	bx	lr
 801ac0c:	20004b40 	.word	0x20004b40
 801ac10:	20000358 	.word	0x20000358
 801ac14:	ff800000 	.word	0xff800000

0801ac18 <MotionFX_enable_9X>:
 801ac18:	4b0d      	ldr	r3, [pc, #52]	; (801ac50 <MotionFX_enable_9X+0x38>)
 801ac1a:	f893 2d49 	ldrb.w	r2, [r3, #3401]	; 0xd49
 801ac1e:	b112      	cbz	r2, 801ac26 <MotionFX_enable_9X+0xe>
 801ac20:	f8c3 0d50 	str.w	r0, [r3, #3408]	; 0xd50
 801ac24:	b900      	cbnz	r0, 801ac28 <MotionFX_enable_9X+0x10>
 801ac26:	4770      	bx	lr
 801ac28:	b430      	push	{r4, r5}
 801ac2a:	4a0a      	ldr	r2, [pc, #40]	; (801ac54 <MotionFX_enable_9X+0x3c>)
 801ac2c:	480a      	ldr	r0, [pc, #40]	; (801ac58 <MotionFX_enable_9X+0x40>)
 801ac2e:	f241 15b4 	movw	r5, #4532	; 0x11b4
 801ac32:	2100      	movs	r1, #0
 801ac34:	5351      	strh	r1, [r2, r5]
 801ac36:	f241 15b6 	movw	r5, #4534	; 0x11b6
 801ac3a:	f04f 44ff 	mov.w	r4, #2139095040	; 0x7f800000
 801ac3e:	5551      	strb	r1, [r2, r5]
 801ac40:	f503 6282 	add.w	r2, r3, #1040	; 0x410
 801ac44:	f203 4314 	addw	r3, r3, #1044	; 0x414
 801ac48:	6014      	str	r4, [r2, #0]
 801ac4a:	6018      	str	r0, [r3, #0]
 801ac4c:	bc30      	pop	{r4, r5}
 801ac4e:	4770      	bx	lr
 801ac50:	20004b40 	.word	0x20004b40
 801ac54:	20000358 	.word	0x20000358
 801ac58:	ff800000 	.word	0xff800000

0801ac5c <MotionFX_update>:
 801ac5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ac60:	4ec1      	ldr	r6, [pc, #772]	; (801af68 <MotionFX_update+0x30c>)
 801ac62:	ed2d 8b02 	vpush	{d8}
 801ac66:	f896 5d49 	ldrb.w	r5, [r6, #3401]	; 0xd49
 801ac6a:	b08b      	sub	sp, #44	; 0x2c
 801ac6c:	b925      	cbnz	r5, 801ac78 <MotionFX_update+0x1c>
 801ac6e:	b00b      	add	sp, #44	; 0x2c
 801ac70:	ecbd 8b02 	vpop	{d8}
 801ac74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ac78:	4604      	mov	r4, r0
 801ac7a:	ed92 8a00 	vldr	s16, [r2]
 801ac7e:	2b00      	cmp	r3, #0
 801ac80:	f000 80d7 	beq.w	801ae32 <MotionFX_update+0x1d6>
 801ac84:	4ab9      	ldr	r2, [pc, #740]	; (801af6c <MotionFX_update+0x310>)
 801ac86:	68cf      	ldr	r7, [r1, #12]
 801ac88:	f8d1 e000 	ldr.w	lr, [r1]
 801ac8c:	690d      	ldr	r5, [r1, #16]
 801ac8e:	f8d1 c018 	ldr.w	ip, [r1, #24]
 801ac92:	6197      	str	r7, [r2, #24]
 801ac94:	f5a2 7010 	sub.w	r0, r2, #576	; 0x240
 801ac98:	f8c2 e00c 	str.w	lr, [r2, #12]
 801ac9c:	6187      	str	r7, [r0, #24]
 801ac9e:	684f      	ldr	r7, [r1, #4]
 801aca0:	f8c0 e00c 	str.w	lr, [r0, #12]
 801aca4:	f8d1 e01c 	ldr.w	lr, [r1, #28]
 801aca8:	f8c2 c024 	str.w	ip, [r2, #36]	; 0x24
 801acac:	f8c0 c024 	str.w	ip, [r0, #36]	; 0x24
 801acb0:	f8d1 c014 	ldr.w	ip, [r1, #20]
 801acb4:	6117      	str	r7, [r2, #16]
 801acb6:	6107      	str	r7, [r0, #16]
 801acb8:	f8d6 7d54 	ldr.w	r7, [r6, #3412]	; 0xd54
 801acbc:	61d5      	str	r5, [r2, #28]
 801acbe:	61c5      	str	r5, [r0, #28]
 801acc0:	688d      	ldr	r5, [r1, #8]
 801acc2:	6a09      	ldr	r1, [r1, #32]
 801acc4:	6155      	str	r5, [r2, #20]
 801acc6:	f8c2 e028 	str.w	lr, [r2, #40]	; 0x28
 801acca:	f8c2 c020 	str.w	ip, [r2, #32]
 801acce:	62d1      	str	r1, [r2, #44]	; 0x2c
 801acd0:	f8c0 e028 	str.w	lr, [r0, #40]	; 0x28
 801acd4:	f8c0 c020 	str.w	ip, [r0, #32]
 801acd8:	6145      	str	r5, [r0, #20]
 801acda:	62c1      	str	r1, [r0, #44]	; 0x2c
 801acdc:	f8d6 2d4c 	ldr.w	r2, [r6, #3404]	; 0xd4c
 801ace0:	b187      	cbz	r7, 801ad04 <MotionFX_update+0xa8>
 801ace2:	f896 1c3c 	ldrb.w	r1, [r6, #3132]	; 0xc3c
 801ace6:	07cd      	lsls	r5, r1, #31
 801ace8:	d403      	bmi.n	801acf2 <MotionFX_update+0x96>
 801acea:	f896 19fc 	ldrb.w	r1, [r6, #2556]	; 0x9fc
 801acee:	07c8      	lsls	r0, r1, #31
 801acf0:	d523      	bpl.n	801ad3a <MotionFX_update+0xde>
 801acf2:	489f      	ldr	r0, [pc, #636]	; (801af70 <MotionFX_update+0x314>)
 801acf4:	f8d0 10c0 	ldr.w	r1, [r0, #192]	; 0xc0
 801acf8:	2900      	cmp	r1, #0
 801acfa:	f340 809c 	ble.w	801ae36 <MotionFX_update+0x1da>
 801acfe:	3901      	subs	r1, #1
 801ad00:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
 801ad04:	2a00      	cmp	r2, #0
 801ad06:	f000 808e 	beq.w	801ae26 <MotionFX_update+0x1ca>
 801ad0a:	f896 29fc 	ldrb.w	r2, [r6, #2556]	; 0x9fc
 801ad0e:	07d1      	lsls	r1, r2, #31
 801ad10:	f140 8089 	bpl.w	801ae26 <MotionFX_update+0x1ca>
 801ad14:	4618      	mov	r0, r3
 801ad16:	eeb0 0a48 	vmov.f32	s0, s16
 801ad1a:	9301      	str	r3, [sp, #4]
 801ad1c:	f7fe fff2 	bl	8019d04 <iNemo_update_6X.constprop.34>
 801ad20:	f8d6 1d50 	ldr.w	r1, [r6, #3408]	; 0xd50
 801ad24:	9b01      	ldr	r3, [sp, #4]
 801ad26:	b141      	cbz	r1, 801ad3a <MotionFX_update+0xde>
 801ad28:	f896 2c3c 	ldrb.w	r2, [r6, #3132]	; 0xc3c
 801ad2c:	07d2      	lsls	r2, r2, #31
 801ad2e:	d504      	bpl.n	801ad3a <MotionFX_update+0xde>
 801ad30:	4618      	mov	r0, r3
 801ad32:	eeb0 0a48 	vmov.f32	s0, s16
 801ad36:	f7ff f9e3 	bl	801a100 <iNemo_update.constprop.35>
 801ad3a:	4d8e      	ldr	r5, [pc, #568]	; (801af74 <MotionFX_update+0x318>)
 801ad3c:	69ea      	ldr	r2, [r5, #28]
 801ad3e:	69af      	ldr	r7, [r5, #24]
 801ad40:	f8d5 025c 	ldr.w	r0, [r5, #604]	; 0x25c
 801ad44:	f8d5 1258 	ldr.w	r1, [r5, #600]	; 0x258
 801ad48:	60e1      	str	r1, [r4, #12]
 801ad4a:	64a7      	str	r7, [r4, #72]	; 0x48
 801ad4c:	f8d5 1260 	ldr.w	r1, [r5, #608]	; 0x260
 801ad50:	6a2f      	ldr	r7, [r5, #32]
 801ad52:	64e2      	str	r2, [r4, #76]	; 0x4c
 801ad54:	6120      	str	r0, [r4, #16]
 801ad56:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 801ad58:	f8d5 0264 	ldr.w	r0, [r5, #612]	; 0x264
 801ad5c:	6527      	str	r7, [r4, #80]	; 0x50
 801ad5e:	6161      	str	r1, [r4, #20]
 801ad60:	68ef      	ldr	r7, [r5, #12]
 801ad62:	f8d5 124c 	ldr.w	r1, [r5, #588]	; 0x24c
 801ad66:	61a0      	str	r0, [r4, #24]
 801ad68:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
 801ad6c:	6562      	str	r2, [r4, #84]	; 0x54
 801ad6e:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
 801ad72:	63e7      	str	r7, [r4, #60]	; 0x3c
 801ad74:	f8d5 72d4 	ldr.w	r7, [r5, #724]	; 0x2d4
 801ad78:	65a0      	str	r0, [r4, #88]	; 0x58
 801ad7a:	f8d5 02e0 	ldr.w	r0, [r5, #736]	; 0x2e0
 801ad7e:	6021      	str	r1, [r4, #0]
 801ad80:	6662      	str	r2, [r4, #100]	; 0x64
 801ad82:	6929      	ldr	r1, [r5, #16]
 801ad84:	f8d5 2098 	ldr.w	r2, [r5, #152]	; 0x98
 801ad88:	65e2      	str	r2, [r4, #92]	; 0x5c
 801ad8a:	61e7      	str	r7, [r4, #28]
 801ad8c:	6421      	str	r1, [r4, #64]	; 0x40
 801ad8e:	62a0      	str	r0, [r4, #40]	; 0x28
 801ad90:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
 801ad94:	f8d5 2250 	ldr.w	r2, [r5, #592]	; 0x250
 801ad98:	f8d5 72d8 	ldr.w	r7, [r5, #728]	; 0x2d8
 801ad9c:	f8d5 12e4 	ldr.w	r1, [r5, #740]	; 0x2e4
 801ada0:	66a0      	str	r0, [r4, #104]	; 0x68
 801ada2:	f8d5 0254 	ldr.w	r0, [r5, #596]	; 0x254
 801ada6:	6062      	str	r2, [r4, #4]
 801ada8:	696a      	ldr	r2, [r5, #20]
 801adaa:	f8d5 32e8 	ldr.w	r3, [r5, #744]	; 0x2e8
 801adae:	6227      	str	r7, [r4, #32]
 801adb0:	f8d5 709c 	ldr.w	r7, [r5, #156]	; 0x9c
 801adb4:	62e1      	str	r1, [r4, #44]	; 0x2c
 801adb6:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
 801adba:	6462      	str	r2, [r4, #68]	; 0x44
 801adbc:	f8d5 22dc 	ldr.w	r2, [r5, #732]	; 0x2dc
 801adc0:	6262      	str	r2, [r4, #36]	; 0x24
 801adc2:	60a0      	str	r0, [r4, #8]
 801adc4:	66e1      	str	r1, [r4, #108]	; 0x6c
 801adc6:	6323      	str	r3, [r4, #48]	; 0x30
 801adc8:	f505 714f 	add.w	r1, r5, #828	; 0x33c
 801adcc:	f505 7013 	add.w	r0, r5, #588	; 0x24c
 801add0:	aa03      	add	r2, sp, #12
 801add2:	6627      	str	r7, [r4, #96]	; 0x60
 801add4:	f7f6 fde0 	bl	8011998 <quatErr2EulerErr>
 801add8:	9b03      	ldr	r3, [sp, #12]
 801adda:	63a3      	str	r3, [r4, #56]	; 0x38
 801addc:	aa03      	add	r2, sp, #12
 801adde:	f105 01fc 	add.w	r1, r5, #252	; 0xfc
 801ade2:	f105 000c 	add.w	r0, r5, #12
 801ade6:	f7f6 fdd7 	bl	8011998 <quatErr2EulerErr>
 801adea:	9a03      	ldr	r2, [sp, #12]
 801adec:	f896 39fe 	ldrb.w	r3, [r6, #2558]	; 0x9fe
 801adf0:	6762      	str	r2, [r4, #116]	; 0x74
 801adf2:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 801adf6:	f104 0258 	add.w	r2, r4, #88	; 0x58
 801adfa:	f104 0048 	add.w	r0, r4, #72	; 0x48
 801adfe:	f7f7 fd73 	bl	80128e8 <iNemo_quat2heading>
 801ae02:	f896 3c3e 	ldrb.w	r3, [r6, #3134]	; 0xc3e
 801ae06:	ed84 0a1c 	vstr	s0, [r4, #112]	; 0x70
 801ae0a:	f104 021c 	add.w	r2, r4, #28
 801ae0e:	4621      	mov	r1, r4
 801ae10:	f104 000c 	add.w	r0, r4, #12
 801ae14:	f7f7 fd68 	bl	80128e8 <iNemo_quat2heading>
 801ae18:	ed84 0a0d 	vstr	s0, [r4, #52]	; 0x34
 801ae1c:	b00b      	add	sp, #44	; 0x2c
 801ae1e:	ecbd 8b02 	vpop	{d8}
 801ae22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ae26:	f8d6 1d50 	ldr.w	r1, [r6, #3408]	; 0xd50
 801ae2a:	2900      	cmp	r1, #0
 801ae2c:	f47f af7c 	bne.w	801ad28 <MotionFX_update+0xcc>
 801ae30:	e783      	b.n	801ad3a <MotionFX_update+0xde>
 801ae32:	ab06      	add	r3, sp, #24
 801ae34:	e726      	b.n	801ac84 <MotionFX_update+0x28>
 801ae36:	f8d6 cd58 	ldr.w	ip, [r6, #3416]	; 0xd58
 801ae3a:	f8d6 1d50 	ldr.w	r1, [r6, #3408]	; 0xd50
 801ae3e:	f10c 0e01 	add.w	lr, ip, #1
 801ae42:	b369      	cbz	r1, 801aea0 <MotionFX_update+0x244>
 801ae44:	ee07 ea90 	vmov	s15, lr
 801ae48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ae4c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ae50:	ee87 6a27 	vdiv.f32	s12, s14, s15
 801ae54:	f8df 9128 	ldr.w	r9, [pc, #296]	; 801af80 <MotionFX_update+0x324>
 801ae58:	4847      	ldr	r0, [pc, #284]	; (801af78 <MotionFX_update+0x31c>)
 801ae5a:	46c8      	mov	r8, r9
 801ae5c:	ecb8 7a01 	vldmia	r8!, {s14}
 801ae60:	edd0 4a01 	vldr	s9, [r0, #4]
 801ae64:	ed90 5a02 	vldr	s10, [r0, #8]
 801ae68:	ed90 4a00 	vldr	s8, [r0]
 801ae6c:	edd8 6a00 	vldr	s13, [r8]
 801ae70:	edd9 7a02 	vldr	s15, [r9, #8]
 801ae74:	ee05 ca90 	vmov	s11, ip
 801ae78:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 801ae7c:	eea5 7a84 	vfma.f32	s14, s11, s8
 801ae80:	eee5 6aa4 	vfma.f32	s13, s11, s9
 801ae84:	eee5 7a85 	vfma.f32	s15, s11, s10
 801ae88:	ee66 6a86 	vmul.f32	s13, s13, s12
 801ae8c:	ee27 7a06 	vmul.f32	s14, s14, s12
 801ae90:	ee67 7a86 	vmul.f32	s15, s15, s12
 801ae94:	edc0 6a01 	vstr	s13, [r0, #4]
 801ae98:	ed80 7a00 	vstr	s14, [r0]
 801ae9c:	edc0 7a02 	vstr	s15, [r0, #8]
 801aea0:	2a00      	cmp	r2, #0
 801aea2:	d071      	beq.n	801af88 <MotionFX_update+0x32c>
 801aea4:	ee07 ea90 	vmov	s15, lr
 801aea8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801aeac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801aeb0:	eec7 5a27 	vdiv.f32	s11, s14, s15
 801aeb4:	4830      	ldr	r0, [pc, #192]	; (801af78 <MotionFX_update+0x31c>)
 801aeb6:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 801af84 <MotionFX_update+0x328>
 801aeba:	f8c6 ed58 	str.w	lr, [r6, #3416]	; 0xd58
 801aebe:	4607      	mov	r7, r0
 801aec0:	46c8      	mov	r8, r9
 801aec2:	4605      	mov	r5, r0
 801aec4:	3708      	adds	r7, #8
 801aec6:	3504      	adds	r5, #4
 801aec8:	f5be 7ffa 	cmp.w	lr, #500	; 0x1f4
 801aecc:	ee07 ca90 	vmov	s15, ip
 801aed0:	ecf8 6a01 	vldmia	r8!, {s13}
 801aed4:	ed97 5a00 	vldr	s10, [r7]
 801aed8:	ed99 7a02 	vldr	s14, [r9, #8]
 801aedc:	edd5 4a00 	vldr	s9, [r5]
 801aee0:	ed90 4a00 	vldr	s8, [r0]
 801aee4:	ed98 6a00 	vldr	s12, [r8]
 801aee8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801aeec:	eea7 7a85 	vfma.f32	s14, s15, s10
 801aef0:	eee7 6a84 	vfma.f32	s13, s15, s8
 801aef4:	eea7 6aa4 	vfma.f32	s12, s15, s9
 801aef8:	eef0 7a47 	vmov.f32	s15, s14
 801aefc:	ee26 6a25 	vmul.f32	s12, s12, s11
 801af00:	ee26 7aa5 	vmul.f32	s14, s13, s11
 801af04:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801af08:	ed85 6a00 	vstr	s12, [r5]
 801af0c:	ed80 7a00 	vstr	s14, [r0]
 801af10:	edc7 7a00 	vstr	s15, [r7]
 801af14:	f47f aef9 	bne.w	801ad0a <MotionFX_update+0xae>
 801af18:	2900      	cmp	r1, #0
 801af1a:	d046      	beq.n	801afaa <MotionFX_update+0x34e>
 801af1c:	eef0 6a46 	vmov.f32	s13, s12
 801af20:	eeb0 7a67 	vmov.f32	s14, s15
 801af24:	edd0 7a00 	vldr	s15, [r0]
 801af28:	4914      	ldr	r1, [pc, #80]	; (801af7c <MotionFX_update+0x320>)
 801af2a:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801af2e:	ee66 6a86 	vmul.f32	s13, s13, s12
 801af32:	ee27 7a06 	vmul.f32	s14, s14, s12
 801af36:	ee67 7a86 	vmul.f32	s15, s15, s12
 801af3a:	edc1 6a0b 	vstr	s13, [r1, #44]	; 0x2c
 801af3e:	ed81 7a0c 	vstr	s14, [r1, #48]	; 0x30
 801af42:	edc1 7a0a 	vstr	s15, [r1, #40]	; 0x28
 801af46:	bb82      	cbnz	r2, 801afaa <MotionFX_update+0x34e>
 801af48:	2100      	movs	r1, #0
 801af4a:	f8d6 2d4c 	ldr.w	r2, [r6, #3404]	; 0xd4c
 801af4e:	6001      	str	r1, [r0, #0]
 801af50:	2000      	movs	r0, #0
 801af52:	6029      	str	r1, [r5, #0]
 801af54:	6039      	str	r1, [r7, #0]
 801af56:	f8c6 0d58 	str.w	r0, [r6, #3416]	; 0xd58
 801af5a:	f8c6 0d54 	str.w	r0, [r6, #3412]	; 0xd54
 801af5e:	2a00      	cmp	r2, #0
 801af60:	f47f aed3 	bne.w	801ad0a <MotionFX_update+0xae>
 801af64:	e75f      	b.n	801ae26 <MotionFX_update+0x1ca>
 801af66:	bf00      	nop
 801af68:	20004b40 	.word	0x20004b40
 801af6c:	2000564c 	.word	0x2000564c
 801af70:	20001450 	.word	0x20001450
 801af74:	20005540 	.word	0x20005540
 801af78:	2000589c 	.word	0x2000589c
 801af7c:	20005744 	.word	0x20005744
 801af80:	20001044 	.word	0x20001044
 801af84:	2000076c 	.word	0x2000076c
 801af88:	f5be 7ffa 	cmp.w	lr, #500	; 0x1f4
 801af8c:	f8c6 ed58 	str.w	lr, [r6, #3416]	; 0xd58
 801af90:	f47f aec9 	bne.w	801ad26 <MotionFX_update+0xca>
 801af94:	4810      	ldr	r0, [pc, #64]	; (801afd8 <MotionFX_update+0x37c>)
 801af96:	1d05      	adds	r5, r0, #4
 801af98:	f100 0708 	add.w	r7, r0, #8
 801af9c:	2900      	cmp	r1, #0
 801af9e:	d0d3      	beq.n	801af48 <MotionFX_update+0x2ec>
 801afa0:	edd5 6a00 	vldr	s13, [r5]
 801afa4:	ed97 7a00 	vldr	s14, [r7]
 801afa8:	e7bc      	b.n	801af24 <MotionFX_update+0x2c8>
 801afaa:	edd5 6a00 	vldr	s13, [r5]
 801afae:	ed97 7a00 	vldr	s14, [r7]
 801afb2:	edd0 7a00 	vldr	s15, [r0]
 801afb6:	4a09      	ldr	r2, [pc, #36]	; (801afdc <MotionFX_update+0x380>)
 801afb8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801afbc:	ee66 6a86 	vmul.f32	s13, s13, s12
 801afc0:	ee27 7a06 	vmul.f32	s14, s14, s12
 801afc4:	ee67 7a86 	vmul.f32	s15, s15, s12
 801afc8:	edc2 6a0b 	vstr	s13, [r2, #44]	; 0x2c
 801afcc:	ed82 7a0c 	vstr	s14, [r2, #48]	; 0x30
 801afd0:	edc2 7a0a 	vstr	s15, [r2, #40]	; 0x28
 801afd4:	e7b8      	b.n	801af48 <MotionFX_update+0x2ec>
 801afd6:	bf00      	nop
 801afd8:	2000589c 	.word	0x2000589c
 801afdc:	20005504 	.word	0x20005504

0801afe0 <MotionFX_propagate>:
 801afe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801afe4:	ed2d 8b0a 	vpush	{d8-d12}
 801afe8:	4d48      	ldr	r5, [pc, #288]	; (801b10c <MotionFX_propagate+0x12c>)
 801afea:	f895 3d49 	ldrb.w	r3, [r5, #3401]	; 0xd49
 801afee:	b095      	sub	sp, #84	; 0x54
 801aff0:	b923      	cbnz	r3, 801affc <MotionFX_propagate+0x1c>
 801aff2:	b015      	add	sp, #84	; 0x54
 801aff4:	ecbd 8b0a 	vpop	{d8-d12}
 801aff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801affc:	edd1 4a03 	vldr	s9, [r1, #12]
 801b000:	680f      	ldr	r7, [r1, #0]
 801b002:	edd1 7a04 	vldr	s15, [r1, #16]
 801b006:	edd1 5a05 	vldr	s11, [r1, #20]
 801b00a:	688b      	ldr	r3, [r1, #8]
 801b00c:	ed91 5a06 	vldr	s10, [r1, #24]
 801b010:	ed91 4a07 	vldr	s8, [r1, #28]
 801b014:	ed91 6a08 	vldr	s12, [r1, #32]
 801b018:	ed92 9a00 	vldr	s18, [r2]
 801b01c:	f605 360c 	addw	r6, r5, #2828	; 0xb0c
 801b020:	f605 08cc 	addw	r8, r5, #2252	; 0x8cc
 801b024:	4604      	mov	r4, r0
 801b026:	6848      	ldr	r0, [r1, #4]
 801b028:	f8d5 1d50 	ldr.w	r1, [r5, #3408]	; 0xd50
 801b02c:	edc6 4a06 	vstr	s9, [r6, #24]
 801b030:	60f7      	str	r7, [r6, #12]
 801b032:	f8c8 700c 	str.w	r7, [r8, #12]
 801b036:	ed86 5a09 	vstr	s10, [r6, #36]	; 0x24
 801b03a:	edc8 4a06 	vstr	s9, [r8, #24]
 801b03e:	ed88 5a09 	vstr	s10, [r8, #36]	; 0x24
 801b042:	edc6 7a07 	vstr	s15, [r6, #28]
 801b046:	6130      	str	r0, [r6, #16]
 801b048:	f8c8 0010 	str.w	r0, [r8, #16]
 801b04c:	ed86 4a0a 	vstr	s8, [r6, #40]	; 0x28
 801b050:	edc8 7a07 	vstr	s15, [r8, #28]
 801b054:	ed88 4a0a 	vstr	s8, [r8, #40]	; 0x28
 801b058:	edc6 5a08 	vstr	s11, [r6, #32]
 801b05c:	6173      	str	r3, [r6, #20]
 801b05e:	f8c8 3014 	str.w	r3, [r8, #20]
 801b062:	ed86 6a0b 	vstr	s12, [r6, #44]	; 0x2c
 801b066:	edc8 5a08 	vstr	s11, [r8, #32]
 801b06a:	ed88 6a0b 	vstr	s12, [r8, #44]	; 0x2c
 801b06e:	2900      	cmp	r1, #0
 801b070:	f040 81fa 	bne.w	801b468 <MotionFX_propagate+0x488>
 801b074:	f505 6744 	add.w	r7, r5, #3136	; 0xc40
 801b078:	f8d5 3d4c 	ldr.w	r3, [r5, #3404]	; 0xd4c
 801b07c:	2b00      	cmp	r3, #0
 801b07e:	d149      	bne.n	801b114 <MotionFX_propagate+0x134>
 801b080:	4e23      	ldr	r6, [pc, #140]	; (801b110 <MotionFX_propagate+0x130>)
 801b082:	69b3      	ldr	r3, [r6, #24]
 801b084:	69f2      	ldr	r2, [r6, #28]
 801b086:	69b9      	ldr	r1, [r7, #24]
 801b088:	64a3      	str	r3, [r4, #72]	; 0x48
 801b08a:	69fb      	ldr	r3, [r7, #28]
 801b08c:	64e2      	str	r2, [r4, #76]	; 0x4c
 801b08e:	60e1      	str	r1, [r4, #12]
 801b090:	6a3a      	ldr	r2, [r7, #32]
 801b092:	6a31      	ldr	r1, [r6, #32]
 801b094:	6123      	str	r3, [r4, #16]
 801b096:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801b098:	6521      	str	r1, [r4, #80]	; 0x50
 801b09a:	6563      	str	r3, [r4, #84]	; 0x54
 801b09c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801b09e:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 801b0a2:	6162      	str	r2, [r4, #20]
 801b0a4:	68f2      	ldr	r2, [r6, #12]
 801b0a6:	61a1      	str	r1, [r4, #24]
 801b0a8:	f8d6 10a0 	ldr.w	r1, [r6, #160]	; 0xa0
 801b0ac:	63e2      	str	r2, [r4, #60]	; 0x3c
 801b0ae:	65a3      	str	r3, [r4, #88]	; 0x58
 801b0b0:	68fa      	ldr	r2, [r7, #12]
 801b0b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801b0b6:	6661      	str	r1, [r4, #100]	; 0x64
 801b0b8:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 801b0bc:	6022      	str	r2, [r4, #0]
 801b0be:	61e3      	str	r3, [r4, #28]
 801b0c0:	6932      	ldr	r2, [r6, #16]
 801b0c2:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 801b0c6:	65e3      	str	r3, [r4, #92]	; 0x5c
 801b0c8:	62a1      	str	r1, [r4, #40]	; 0x28
 801b0ca:	6422      	str	r2, [r4, #64]	; 0x40
 801b0cc:	f8d6 20a4 	ldr.w	r2, [r6, #164]	; 0xa4
 801b0d0:	693b      	ldr	r3, [r7, #16]
 801b0d2:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 801b0d6:	66a2      	str	r2, [r4, #104]	; 0x68
 801b0d8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 801b0dc:	6063      	str	r3, [r4, #4]
 801b0de:	6973      	ldr	r3, [r6, #20]
 801b0e0:	f8d6 509c 	ldr.w	r5, [r6, #156]	; 0x9c
 801b0e4:	f8d6 00a8 	ldr.w	r0, [r6, #168]	; 0xa8
 801b0e8:	6221      	str	r1, [r4, #32]
 801b0ea:	62e2      	str	r2, [r4, #44]	; 0x2c
 801b0ec:	6979      	ldr	r1, [r7, #20]
 801b0ee:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801b0f2:	6463      	str	r3, [r4, #68]	; 0x44
 801b0f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801b0f8:	6323      	str	r3, [r4, #48]	; 0x30
 801b0fa:	6625      	str	r5, [r4, #96]	; 0x60
 801b0fc:	66e0      	str	r0, [r4, #108]	; 0x6c
 801b0fe:	60a1      	str	r1, [r4, #8]
 801b100:	6262      	str	r2, [r4, #36]	; 0x24
 801b102:	b015      	add	sp, #84	; 0x54
 801b104:	ecbd 8b0a 	vpop	{d8-d12}
 801b108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b10c:	20004b40 	.word	0x20004b40
 801b110:	20005540 	.word	0x20005540
 801b114:	f995 3443 	ldrsb.w	r3, [r5, #1091]	; 0x443
 801b118:	ed98 0a07 	vldr	s0, [r8, #28]
 801b11c:	f995 245b 	ldrsb.w	r2, [r5, #1115]	; 0x45b
 801b120:	ed98 3a06 	vldr	s6, [r8, #24]
 801b124:	ed98 6a08 	vldr	s12, [r8, #32]
 801b128:	edd8 6a0a 	vldr	s13, [r8, #40]	; 0x28
 801b12c:	ed98 2a09 	vldr	s4, [r8, #36]	; 0x24
 801b130:	f895 99fd 	ldrb.w	r9, [r5, #2557]	; 0x9fd
 801b134:	ee0a 3a10 	vmov	s20, r3
 801b138:	f995 3442 	ldrsb.w	r3, [r5, #1090]	; 0x442
 801b13c:	ee05 3a10 	vmov	s10, r3
 801b140:	f995 3444 	ldrsb.w	r3, [r5, #1092]	; 0x444
 801b144:	ee05 3a90 	vmov	s11, r3
 801b148:	f995 343d 	ldrsb.w	r3, [r5, #1085]	; 0x43d
 801b14c:	eeb8 aaca 	vcvt.f32.s32	s20, s20
 801b150:	ee07 3a90 	vmov	s15, r3
 801b154:	f995 3440 	ldrsb.w	r3, [r5, #1088]	; 0x440
 801b158:	ee09 2a90 	vmov	s19, r2
 801b15c:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 801b160:	f995 243c 	ldrsb.w	r2, [r5, #1084]	; 0x43c
 801b164:	ee2a aa00 	vmul.f32	s20, s20, s0
 801b168:	ee07 3a10 	vmov	s14, r3
 801b16c:	f995 3455 	ldrsb.w	r3, [r5, #1109]	; 0x455
 801b170:	eea3 aa05 	vfma.f32	s20, s6, s10
 801b174:	ee0b 2a10 	vmov	s22, r2
 801b178:	f995 243f 	ldrsb.w	r2, [r5, #1087]	; 0x43f
 801b17c:	ee08 3a10 	vmov	s16, r3
 801b180:	f995 3458 	ldrsb.w	r3, [r5, #1112]	; 0x458
 801b184:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 801b188:	ee00 2a90 	vmov	s1, r2
 801b18c:	f995 2454 	ldrsb.w	r2, [r5, #1108]	; 0x454
 801b190:	ee08 3a90 	vmov	s17, r3
 801b194:	2300      	movs	r3, #0
 801b196:	9308      	str	r3, [sp, #32]
 801b198:	ee01 2a10 	vmov	s2, r2
 801b19c:	9309      	str	r3, [sp, #36]	; 0x24
 801b19e:	f995 2457 	ldrsb.w	r2, [r5, #1111]	; 0x457
 801b1a2:	930a      	str	r3, [sp, #40]	; 0x28
 801b1a4:	eea6 aa25 	vfma.f32	s20, s12, s11
 801b1a8:	930c      	str	r3, [sp, #48]	; 0x30
 801b1aa:	930d      	str	r3, [sp, #52]	; 0x34
 801b1ac:	930e      	str	r3, [sp, #56]	; 0x38
 801b1ae:	f995 3456 	ldrsb.w	r3, [r5, #1110]	; 0x456
 801b1b2:	edd8 5a0b 	vldr	s11, [r8, #44]	; 0x2c
 801b1b6:	ed8d aa04 	vstr	s20, [sp, #16]
 801b1ba:	ee01 2a90 	vmov	s3, r2
 801b1be:	ee04 3a90 	vmov	s9, r3
 801b1c2:	f995 243e 	ldrsb.w	r2, [r5, #1086]	; 0x43e
 801b1c6:	f995 3459 	ldrsb.w	r3, [r5, #1113]	; 0x459
 801b1ca:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 801b1ce:	ee03 2a90 	vmov	s7, r2
 801b1d2:	ee05 3a10 	vmov	s10, r3
 801b1d6:	f995 2441 	ldrsb.w	r2, [r5, #1089]	; 0x441
 801b1da:	edcd aa0b 	vstr	s21, [sp, #44]	; 0x2c
 801b1de:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 801b1e2:	f995 345a 	ldrsb.w	r3, [r5, #1114]	; 0x45a
 801b1e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b1ea:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b1ee:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 801b1f2:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 801b1f6:	ee02 3a90 	vmov	s5, r3
 801b1fa:	eef8 9ae9 	vcvt.f32.s32	s19, s19
 801b1fe:	eeb8 bacb 	vcvt.f32.s32	s22, s22
 801b202:	ee28 8a26 	vmul.f32	s16, s16, s13
 801b206:	ee68 8aa6 	vmul.f32	s17, s17, s13
 801b20a:	ee67 7a80 	vmul.f32	s15, s15, s0
 801b20e:	ee27 7a00 	vmul.f32	s14, s14, s0
 801b212:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801b216:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 801b21a:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801b21e:	ee69 9aa6 	vmul.f32	s19, s19, s13
 801b222:	f995 345c 	ldrsb.w	r3, [r5, #1116]	; 0x45c
 801b226:	eef8 2ae2 	vcvt.f32.s32	s5, s5
 801b22a:	eeeb 7a03 	vfma.f32	s15, s22, s6
 801b22e:	ee04 2a10 	vmov	s8, r2
 801b232:	eea3 7a20 	vfma.f32	s14, s6, s1
 801b236:	eea1 8a02 	vfma.f32	s16, s2, s4
 801b23a:	eee2 8a21 	vfma.f32	s17, s4, s3
 801b23e:	ee06 3a90 	vmov	s13, r3
 801b242:	eee2 9a22 	vfma.f32	s19, s4, s5
 801b246:	4b84      	ldr	r3, [pc, #528]	; (801b458 <MotionFX_propagate+0x478>)
 801b248:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 801b24c:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 801b250:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 801b254:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 801b258:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801b25c:	eee3 7a86 	vfma.f32	s15, s7, s12
 801b260:	7b1b      	ldrb	r3, [r3, #12]
 801b262:	eea6 7a04 	vfma.f32	s14, s12, s8
 801b266:	eea4 8aa5 	vfma.f32	s16, s9, s11
 801b26a:	eee5 8a85 	vfma.f32	s17, s11, s10
 801b26e:	eee5 9aa6 	vfma.f32	s19, s11, s13
 801b272:	eef1 ba47 	vneg.f32	s23, s14
 801b276:	eeb1 8a48 	vneg.f32	s16, s16
 801b27a:	eef1 8a68 	vneg.f32	s17, s17
 801b27e:	eeb1 ba67 	vneg.f32	s22, s15
 801b282:	edcd ba02 	vstr	s23, [sp, #8]
 801b286:	ed8d 8a06 	vstr	s16, [sp, #24]
 801b28a:	edcd 8a05 	vstr	s17, [sp, #20]
 801b28e:	edcd 9a07 	vstr	s19, [sp, #28]
 801b292:	ed8d ba03 	vstr	s22, [sp, #12]
 801b296:	b1fb      	cbz	r3, 801b2d8 <MotionFX_propagate+0x2f8>
 801b298:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801b29c:	eee7 7a07 	vfma.f32	s15, s14, s14
 801b2a0:	eeea 7a0a 	vfma.f32	s15, s20, s20
 801b2a4:	ee17 0a90 	vmov	r0, s15
 801b2a8:	f7e5 f8ce 	bl	8000448 <__aeabi_f2d>
 801b2ac:	f005 ff74 	bl	8021198 <sqrt>
 801b2b0:	f7e5 fc1a 	bl	8000ae8 <__aeabi_d2f>
 801b2b4:	ee0c 0a10 	vmov	s24, r0
 801b2b8:	f7e5 f8c6 	bl	8000448 <__aeabi_f2d>
 801b2bc:	a364      	add	r3, pc, #400	; (adr r3, 801b450 <MotionFX_propagate+0x470>)
 801b2be:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b2c2:	f7e5 fb8b 	bl	80009dc <__aeabi_dcmplt>
 801b2c6:	2800      	cmp	r0, #0
 801b2c8:	f000 8269 	beq.w	801b79e <MotionFX_propagate+0x7be>
 801b2cc:	edcd ba02 	vstr	s23, [sp, #8]
 801b2d0:	ed8d ba03 	vstr	s22, [sp, #12]
 801b2d4:	ed8d aa04 	vstr	s20, [sp, #16]
 801b2d8:	f1b9 0f00 	cmp.w	r9, #0
 801b2dc:	f000 8257 	beq.w	801b78e <MotionFX_propagate+0x7ae>
 801b2e0:	ee07 9a90 	vmov	s15, r9
 801b2e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801b2e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b2ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801b2f0:	464a      	mov	r2, r9
 801b2f2:	ee68 8aa7 	vmul.f32	s17, s17, s15
 801b2f6:	ee28 8a27 	vmul.f32	s16, s16, s15
 801b2fa:	ee69 9aa7 	vmul.f32	s19, s19, s15
 801b2fe:	f895 39e0 	ldrb.w	r3, [r5, #2528]	; 0x9e0
 801b302:	edd8 6a0c 	vldr	s13, [r8, #48]	; 0x30
 801b306:	ed98 7a0d 	vldr	s14, [r8, #52]	; 0x34
 801b30a:	edd8 7a0e 	vldr	s15, [r8, #56]	; 0x38
 801b30e:	f895 09dc 	ldrb.w	r0, [r5, #2524]	; 0x9dc
 801b312:	3301      	adds	r3, #1
 801b314:	b2db      	uxtb	r3, r3
 801b316:	ee76 8aa8 	vadd.f32	s17, s13, s17
 801b31a:	ee37 8a08 	vadd.f32	s16, s14, s16
 801b31e:	ee77 9aa9 	vadd.f32	s19, s15, s19
 801b322:	fbb3 f1f2 	udiv	r1, r3, r2
 801b326:	fb02 3311 	mls	r3, r2, r1, r3
 801b32a:	f885 39e0 	strb.w	r3, [r5, #2528]	; 0x9e0
 801b32e:	edc8 8a0c 	vstr	s17, [r8, #48]	; 0x30
 801b332:	ed88 8a0d 	vstr	s16, [r8, #52]	; 0x34
 801b336:	edc8 9a0e 	vstr	s19, [r8, #56]	; 0x38
 801b33a:	2800      	cmp	r0, #0
 801b33c:	f040 8238 	bne.w	801b7b0 <MotionFX_propagate+0x7d0>
 801b340:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
 801b344:	4a45      	ldr	r2, [pc, #276]	; (801b45c <MotionFX_propagate+0x47c>)
 801b346:	f102 064c 	add.w	r6, r2, #76	; 0x4c
 801b34a:	4611      	mov	r1, r2
 801b34c:	f1a2 0010 	sub.w	r0, r2, #16
 801b350:	f7f6 f802 	bl	8011358 <m_qmult_eml>
 801b354:	f1a6 027c 	sub.w	r2, r6, #124	; 0x7c
 801b358:	4611      	mov	r1, r2
 801b35a:	4650      	mov	r0, sl
 801b35c:	f7f5 fffc 	bl	8011358 <m_qmult_eml>
 801b360:	f106 0218 	add.w	r2, r6, #24
 801b364:	f1a6 019c 	sub.w	r1, r6, #156	; 0x9c
 801b368:	f1a6 004c 	sub.w	r0, r6, #76	; 0x4c
 801b36c:	f7f5 fff4 	bl	8011358 <m_qmult_eml>
 801b370:	f106 0218 	add.w	r2, r6, #24
 801b374:	4611      	mov	r1, r2
 801b376:	f1a6 007c 	sub.w	r0, r6, #124	; 0x7c
 801b37a:	f7f5 ffed 	bl	8011358 <m_qmult_eml>
 801b37e:	edd6 8a07 	vldr	s17, [r6, #28]
 801b382:	ed96 9a06 	vldr	s18, [r6, #24]
 801b386:	ed96 8a08 	vldr	s16, [r6, #32]
 801b38a:	edd6 9a09 	vldr	s19, [r6, #36]	; 0x24
 801b38e:	ee28 7aa8 	vmul.f32	s14, s17, s17
 801b392:	eea9 7a09 	vfma.f32	s14, s18, s18
 801b396:	eea8 7a08 	vfma.f32	s14, s16, s16
 801b39a:	eea9 7aa9 	vfma.f32	s14, s19, s19
 801b39e:	ee17 0a10 	vmov	r0, s14
 801b3a2:	f7e5 f851 	bl	8000448 <__aeabi_f2d>
 801b3a6:	f005 fef7 	bl	8021198 <sqrt>
 801b3aa:	f7e5 fb9d 	bl	8000ae8 <__aeabi_d2f>
 801b3ae:	ee07 0a90 	vmov	s15, r0
 801b3b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b3b6:	eec7 7a27 	vdiv.f32	s15, s14, s15
 801b3ba:	f895 39e8 	ldrb.w	r3, [r5, #2536]	; 0x9e8
 801b3be:	2b01      	cmp	r3, #1
 801b3c0:	ee27 9a89 	vmul.f32	s18, s15, s18
 801b3c4:	ee67 8aa8 	vmul.f32	s17, s15, s17
 801b3c8:	ee27 8a88 	vmul.f32	s16, s15, s16
 801b3cc:	ee67 7aa9 	vmul.f32	s15, s15, s19
 801b3d0:	ed86 9a06 	vstr	s18, [r6, #24]
 801b3d4:	edc6 8a07 	vstr	s17, [r6, #28]
 801b3d8:	ed86 8a08 	vstr	s16, [r6, #32]
 801b3dc:	edc6 7a09 	vstr	s15, [r6, #36]	; 0x24
 801b3e0:	f000 82af 	beq.w	801b942 <MotionFX_propagate+0x962>
 801b3e4:	f8df b07c 	ldr.w	fp, [pc, #124]	; 801b464 <MotionFX_propagate+0x484>
 801b3e8:	f895 19fe 	ldrb.w	r1, [r5, #2558]	; 0x9fe
 801b3ec:	9101      	str	r1, [sp, #4]
 801b3ee:	f1ab 030c 	sub.w	r3, fp, #12
 801b3f2:	f1ab 0294 	sub.w	r2, fp, #148	; 0x94
 801b3f6:	f8cd b000 	str.w	fp, [sp]
 801b3fa:	f1ab 0088 	sub.w	r0, fp, #136	; 0x88
 801b3fe:	a902      	add	r1, sp, #8
 801b400:	f7f7 fd02 	bl	8012e08 <output_update>
 801b404:	f895 29fc 	ldrb.w	r2, [r5, #2556]	; 0x9fc
 801b408:	2300      	movs	r3, #0
 801b40a:	f885 39de 	strb.w	r3, [r5, #2526]	; 0x9de
 801b40e:	0793      	lsls	r3, r2, #30
 801b410:	d409      	bmi.n	801b426 <MotionFX_propagate+0x446>
 801b412:	f895 19e0 	ldrb.w	r1, [r5, #2528]	; 0x9e0
 801b416:	fbb1 f3f9 	udiv	r3, r1, r9
 801b41a:	fb09 1913 	mls	r9, r9, r3, r1
 801b41e:	f019 0fff 	tst.w	r9, #255	; 0xff
 801b422:	f000 81ed 	beq.w	801b800 <MotionFX_propagate+0x820>
 801b426:	4a0e      	ldr	r2, [pc, #56]	; (801b460 <MotionFX_propagate+0x480>)
 801b428:	4650      	mov	r0, sl
 801b42a:	4611      	mov	r1, r2
 801b42c:	f7f5 ff94 	bl	8011358 <m_qmult_eml>
 801b430:	f895 39fe 	ldrb.w	r3, [r5, #2558]	; 0x9fe
 801b434:	69b2      	ldr	r2, [r6, #24]
 801b436:	2b01      	cmp	r3, #1
 801b438:	f47f ae23 	bne.w	801b082 <MotionFX_propagate+0xa2>
 801b43c:	edd6 7a08 	vldr	s15, [r6, #32]
 801b440:	69f3      	ldr	r3, [r6, #28]
 801b442:	61b3      	str	r3, [r6, #24]
 801b444:	eef1 7a67 	vneg.f32	s15, s15
 801b448:	61f2      	str	r2, [r6, #28]
 801b44a:	edc6 7a08 	vstr	s15, [r6, #32]
 801b44e:	e618      	b.n	801b082 <MotionFX_propagate+0xa2>
 801b450:	a0b5ed8d 	.word	0xa0b5ed8d
 801b454:	3eb0c6f7 	.word	0x3eb0c6f7
 801b458:	20000358 	.word	0x20000358
 801b45c:	200054f4 	.word	0x200054f4
 801b460:	200054b4 	.word	0x200054b4
 801b464:	200055e0 	.word	0x200055e0
 801b468:	f995 3419 	ldrsb.w	r3, [r5, #1049]	; 0x419
 801b46c:	f995 2420 	ldrsb.w	r2, [r5, #1056]	; 0x420
 801b470:	f895 9c3d 	ldrb.w	r9, [r5, #3133]	; 0xc3d
 801b474:	ee06 3a90 	vmov	s13, r3
 801b478:	f995 341c 	ldrsb.w	r3, [r5, #1052]	; 0x41c
 801b47c:	ee07 3a10 	vmov	s14, r3
 801b480:	f995 3434 	ldrsb.w	r3, [r5, #1076]	; 0x434
 801b484:	ee08 3a90 	vmov	s17, r3
 801b488:	f995 3431 	ldrsb.w	r3, [r5, #1073]	; 0x431
 801b48c:	ee08 3a10 	vmov	s16, r3
 801b490:	f995 3418 	ldrsb.w	r3, [r5, #1048]	; 0x418
 801b494:	ee03 3a90 	vmov	s7, r3
 801b498:	f995 341f 	ldrsb.w	r3, [r5, #1055]	; 0x41f
 801b49c:	ee09 3a90 	vmov	s19, r3
 801b4a0:	f995 3437 	ldrsb.w	r3, [r5, #1079]	; 0x437
 801b4a4:	ee0a 3a10 	vmov	s20, r3
 801b4a8:	f995 341b 	ldrsb.w	r3, [r5, #1051]	; 0x41b
 801b4ac:	ee00 3a90 	vmov	s1, r3
 801b4b0:	f995 3433 	ldrsb.w	r3, [r5, #1075]	; 0x433
 801b4b4:	ee01 3a10 	vmov	s2, r3
 801b4b8:	f995 3430 	ldrsb.w	r3, [r5, #1072]	; 0x430
 801b4bc:	ee01 3a90 	vmov	s3, r3
 801b4c0:	f995 341a 	ldrsb.w	r3, [r5, #1050]	; 0x41a
 801b4c4:	ee03 3a10 	vmov	s6, r3
 801b4c8:	f995 341e 	ldrsb.w	r3, [r5, #1054]	; 0x41e
 801b4cc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801b4d0:	ee02 3a10 	vmov	s4, r3
 801b4d4:	f995 3436 	ldrsb.w	r3, [r5, #1078]	; 0x436
 801b4d8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801b4dc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b4e0:	eef8 9ae9 	vcvt.f32.s32	s19, s19
 801b4e4:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 801b4e8:	ee02 3a90 	vmov	s5, r3
 801b4ec:	f995 341d 	ldrsb.w	r3, [r5, #1053]	; 0x41d
 801b4f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 801b4f4:	ee69 9aa7 	vmul.f32	s19, s19, s15
 801b4f8:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 801b4fc:	eef0 7a66 	vmov.f32	s15, s13
 801b500:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 801b504:	eeb8 aaca 	vcvt.f32.s32	s20, s20
 801b508:	eee3 7aa4 	vfma.f32	s15, s7, s9
 801b50c:	ee03 3a90 	vmov	s7, r3
 801b510:	f995 3435 	ldrsb.w	r3, [r5, #1077]	; 0x435
 801b514:	ee68 8a84 	vmul.f32	s17, s17, s8
 801b518:	ee28 8a04 	vmul.f32	s16, s16, s8
 801b51c:	ee2a aa04 	vmul.f32	s20, s20, s8
 801b520:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 801b524:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801b528:	eef8 2ae2 	vcvt.f32.s32	s5, s5
 801b52c:	ee04 3a10 	vmov	s8, r3
 801b530:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801b534:	f995 3432 	ldrsb.w	r3, [r5, #1074]	; 0x432
 801b538:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 801b53c:	eee1 8a05 	vfma.f32	s17, s2, s10
 801b540:	eea1 8a85 	vfma.f32	s16, s3, s10
 801b544:	eea2 aa85 	vfma.f32	s20, s5, s10
 801b548:	ee05 2a10 	vmov	s10, r2
 801b54c:	f995 2438 	ldrsb.w	r2, [r5, #1080]	; 0x438
 801b550:	eea0 7aa4 	vfma.f32	s14, s1, s9
 801b554:	eee2 9a24 	vfma.f32	s19, s4, s9
 801b558:	ee04 3a90 	vmov	s9, r3
 801b55c:	ee06 2a90 	vmov	s13, r2
 801b560:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801b564:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 801b568:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 801b56c:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 801b570:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 801b574:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801b578:	eee5 7a83 	vfma.f32	s15, s11, s6
 801b57c:	4a9a      	ldr	r2, [pc, #616]	; (801b7e8 <MotionFX_propagate+0x808>)
 801b57e:	eea5 7aa3 	vfma.f32	s14, s11, s7
 801b582:	2300      	movs	r3, #0
 801b584:	9308      	str	r3, [sp, #32]
 801b586:	eee6 8a04 	vfma.f32	s17, s12, s8
 801b58a:	9309      	str	r3, [sp, #36]	; 0x24
 801b58c:	930a      	str	r3, [sp, #40]	; 0x28
 801b58e:	eea6 8a24 	vfma.f32	s16, s12, s9
 801b592:	930c      	str	r3, [sp, #48]	; 0x30
 801b594:	930d      	str	r3, [sp, #52]	; 0x34
 801b596:	eee5 9a85 	vfma.f32	s19, s11, s10
 801b59a:	930e      	str	r3, [sp, #56]	; 0x38
 801b59c:	eea6 aa26 	vfma.f32	s20, s12, s13
 801b5a0:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
 801b5a4:	eef1 aa67 	vneg.f32	s21, s15
 801b5a8:	eeb1 ba47 	vneg.f32	s22, s14
 801b5ac:	eef1 8a68 	vneg.f32	s17, s17
 801b5b0:	eeb1 8a48 	vneg.f32	s16, s16
 801b5b4:	edcd 9a04 	vstr	s19, [sp, #16]
 801b5b8:	edcd aa03 	vstr	s21, [sp, #12]
 801b5bc:	ed8d ba02 	vstr	s22, [sp, #8]
 801b5c0:	edcd 8a05 	vstr	s17, [sp, #20]
 801b5c4:	ed8d aa07 	vstr	s20, [sp, #28]
 801b5c8:	edcd ba0b 	vstr	s23, [sp, #44]	; 0x2c
 801b5cc:	edcd ba0f 	vstr	s23, [sp, #60]	; 0x3c
 801b5d0:	ed8d 8a06 	vstr	s16, [sp, #24]
 801b5d4:	f892 38e0 	ldrb.w	r3, [r2, #2272]	; 0x8e0
 801b5d8:	b1eb      	cbz	r3, 801b616 <MotionFX_propagate+0x636>
 801b5da:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801b5de:	eee7 7a07 	vfma.f32	s15, s14, s14
 801b5e2:	eee9 7aa9 	vfma.f32	s15, s19, s19
 801b5e6:	ee17 0a90 	vmov	r0, s15
 801b5ea:	f7e4 ff2d 	bl	8000448 <__aeabi_f2d>
 801b5ee:	f005 fdd3 	bl	8021198 <sqrt>
 801b5f2:	f7e5 fa79 	bl	8000ae8 <__aeabi_d2f>
 801b5f6:	ee07 0a90 	vmov	s15, r0
 801b5fa:	eecb 7aa7 	vdiv.f32	s15, s23, s15
 801b5fe:	ee2b ba27 	vmul.f32	s22, s22, s15
 801b602:	ee6a aaa7 	vmul.f32	s21, s21, s15
 801b606:	ee69 9aa7 	vmul.f32	s19, s19, s15
 801b60a:	ed8d ba02 	vstr	s22, [sp, #8]
 801b60e:	edcd aa03 	vstr	s21, [sp, #12]
 801b612:	edcd 9a04 	vstr	s19, [sp, #16]
 801b616:	f1b9 0f00 	cmp.w	r9, #0
 801b61a:	f000 80bc 	beq.w	801b796 <MotionFX_propagate+0x7b6>
 801b61e:	ee07 9a90 	vmov	s15, r9
 801b622:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801b626:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b62a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801b62e:	464a      	mov	r2, r9
 801b630:	ee68 8aa7 	vmul.f32	s17, s17, s15
 801b634:	ee28 8a27 	vmul.f32	s16, s16, s15
 801b638:	ee2a aa27 	vmul.f32	s20, s20, s15
 801b63c:	f895 3c20 	ldrb.w	r3, [r5, #3104]	; 0xc20
 801b640:	edd6 6a0c 	vldr	s13, [r6, #48]	; 0x30
 801b644:	ed96 7a0d 	vldr	s14, [r6, #52]	; 0x34
 801b648:	edd6 7a0e 	vldr	s15, [r6, #56]	; 0x38
 801b64c:	f895 0c1c 	ldrb.w	r0, [r5, #3100]	; 0xc1c
 801b650:	3301      	adds	r3, #1
 801b652:	b2db      	uxtb	r3, r3
 801b654:	ee76 8aa8 	vadd.f32	s17, s13, s17
 801b658:	ee37 8a08 	vadd.f32	s16, s14, s16
 801b65c:	ee37 aa8a 	vadd.f32	s20, s15, s20
 801b660:	fbb3 f1f2 	udiv	r1, r3, r2
 801b664:	fb02 3311 	mls	r3, r2, r1, r3
 801b668:	f885 3c20 	strb.w	r3, [r5, #3104]	; 0xc20
 801b66c:	edc6 8a0c 	vstr	s17, [r6, #48]	; 0x30
 801b670:	ed86 8a0d 	vstr	s16, [r6, #52]	; 0x34
 801b674:	ed86 aa0e 	vstr	s20, [r6, #56]	; 0x38
 801b678:	2800      	cmp	r0, #0
 801b67a:	f040 80a7 	bne.w	801b7cc <MotionFX_propagate+0x7ec>
 801b67e:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
 801b682:	4a5a      	ldr	r2, [pc, #360]	; (801b7ec <MotionFX_propagate+0x80c>)
 801b684:	f102 074c 	add.w	r7, r2, #76	; 0x4c
 801b688:	4611      	mov	r1, r2
 801b68a:	f1a2 0010 	sub.w	r0, r2, #16
 801b68e:	f7f5 fe63 	bl	8011358 <m_qmult_eml>
 801b692:	f1a7 027c 	sub.w	r2, r7, #124	; 0x7c
 801b696:	4611      	mov	r1, r2
 801b698:	4650      	mov	r0, sl
 801b69a:	f7f5 fe5d 	bl	8011358 <m_qmult_eml>
 801b69e:	f107 0218 	add.w	r2, r7, #24
 801b6a2:	f1a7 019c 	sub.w	r1, r7, #156	; 0x9c
 801b6a6:	f1a7 004c 	sub.w	r0, r7, #76	; 0x4c
 801b6aa:	f7f5 fe55 	bl	8011358 <m_qmult_eml>
 801b6ae:	f107 0218 	add.w	r2, r7, #24
 801b6b2:	4611      	mov	r1, r2
 801b6b4:	f1a7 007c 	sub.w	r0, r7, #124	; 0x7c
 801b6b8:	f7f5 fe4e 	bl	8011358 <m_qmult_eml>
 801b6bc:	edd7 8a07 	vldr	s17, [r7, #28]
 801b6c0:	edd7 9a06 	vldr	s19, [r7, #24]
 801b6c4:	ed97 8a08 	vldr	s16, [r7, #32]
 801b6c8:	ed97 aa09 	vldr	s20, [r7, #36]	; 0x24
 801b6cc:	ee28 7aa8 	vmul.f32	s14, s17, s17
 801b6d0:	eea9 7aa9 	vfma.f32	s14, s19, s19
 801b6d4:	eea8 7a08 	vfma.f32	s14, s16, s16
 801b6d8:	eeaa 7a0a 	vfma.f32	s14, s20, s20
 801b6dc:	ee17 0a10 	vmov	r0, s14
 801b6e0:	f7e4 feb2 	bl	8000448 <__aeabi_f2d>
 801b6e4:	f005 fd58 	bl	8021198 <sqrt>
 801b6e8:	f7e5 f9fe 	bl	8000ae8 <__aeabi_d2f>
 801b6ec:	ee07 0a90 	vmov	s15, r0
 801b6f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b6f4:	eec7 7a27 	vdiv.f32	s15, s14, s15
 801b6f8:	f895 3c28 	ldrb.w	r3, [r5, #3112]	; 0xc28
 801b6fc:	2b01      	cmp	r3, #1
 801b6fe:	ee67 9aa9 	vmul.f32	s19, s15, s19
 801b702:	ee67 8aa8 	vmul.f32	s17, s15, s17
 801b706:	ee27 8a88 	vmul.f32	s16, s15, s16
 801b70a:	ee67 7a8a 	vmul.f32	s15, s15, s20
 801b70e:	edc7 9a06 	vstr	s19, [r7, #24]
 801b712:	edc7 8a07 	vstr	s17, [r7, #28]
 801b716:	ed87 8a08 	vstr	s16, [r7, #32]
 801b71a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 801b71e:	f000 81b7 	beq.w	801ba90 <MotionFX_propagate+0xab0>
 801b722:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 801b7fc <MotionFX_propagate+0x81c>
 801b726:	f895 1c3e 	ldrb.w	r1, [r5, #3134]	; 0xc3e
 801b72a:	9101      	str	r1, [sp, #4]
 801b72c:	f1ab 030c 	sub.w	r3, fp, #12
 801b730:	f1ab 0294 	sub.w	r2, fp, #148	; 0x94
 801b734:	a902      	add	r1, sp, #8
 801b736:	f8cd b000 	str.w	fp, [sp]
 801b73a:	f1ab 0088 	sub.w	r0, fp, #136	; 0x88
 801b73e:	f7f7 fb63 	bl	8012e08 <output_update>
 801b742:	f895 2c3c 	ldrb.w	r2, [r5, #3132]	; 0xc3c
 801b746:	2300      	movs	r3, #0
 801b748:	0791      	lsls	r1, r2, #30
 801b74a:	f885 3c1e 	strb.w	r3, [r5, #3102]	; 0xc1e
 801b74e:	d409      	bmi.n	801b764 <MotionFX_propagate+0x784>
 801b750:	f895 1c20 	ldrb.w	r1, [r5, #3104]	; 0xc20
 801b754:	fbb1 f3f9 	udiv	r3, r1, r9
 801b758:	fb09 1913 	mls	r9, r9, r3, r1
 801b75c:	f019 0fff 	tst.w	r9, #255	; 0xff
 801b760:	f000 80f6 	beq.w	801b950 <MotionFX_propagate+0x970>
 801b764:	4a22      	ldr	r2, [pc, #136]	; (801b7f0 <MotionFX_propagate+0x810>)
 801b766:	4650      	mov	r0, sl
 801b768:	4611      	mov	r1, r2
 801b76a:	f7f5 fdf5 	bl	8011358 <m_qmult_eml>
 801b76e:	f895 3c3e 	ldrb.w	r3, [r5, #3134]	; 0xc3e
 801b772:	2b01      	cmp	r3, #1
 801b774:	f47f ac80 	bne.w	801b078 <MotionFX_propagate+0x98>
 801b778:	edd7 7a08 	vldr	s15, [r7, #32]
 801b77c:	69ba      	ldr	r2, [r7, #24]
 801b77e:	69fb      	ldr	r3, [r7, #28]
 801b780:	61bb      	str	r3, [r7, #24]
 801b782:	eef1 7a67 	vneg.f32	s15, s15
 801b786:	61fa      	str	r2, [r7, #28]
 801b788:	edc7 7a08 	vstr	s15, [r7, #32]
 801b78c:	e474      	b.n	801b078 <MotionFX_propagate+0x98>
 801b78e:	2201      	movs	r2, #1
 801b790:	f885 29fd 	strb.w	r2, [r5, #2557]	; 0x9fd
 801b794:	e5b3      	b.n	801b2fe <MotionFX_propagate+0x31e>
 801b796:	2201      	movs	r2, #1
 801b798:	f885 2c3d 	strb.w	r2, [r5, #3133]	; 0xc3d
 801b79c:	e74e      	b.n	801b63c <MotionFX_propagate+0x65c>
 801b79e:	eeca 7a8c 	vdiv.f32	s15, s21, s24
 801b7a2:	ee6b baa7 	vmul.f32	s23, s23, s15
 801b7a6:	ee2b ba27 	vmul.f32	s22, s22, s15
 801b7aa:	ee2a aa27 	vmul.f32	s20, s20, s15
 801b7ae:	e58d      	b.n	801b2cc <MotionFX_propagate+0x2ec>
 801b7b0:	4b10      	ldr	r3, [pc, #64]	; (801b7f4 <MotionFX_propagate+0x814>)
 801b7b2:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
 801b7b6:	eeb0 0a49 	vmov.f32	s0, s18
 801b7ba:	f1a3 020c 	sub.w	r2, r3, #12
 801b7be:	4618      	mov	r0, r3
 801b7c0:	f8cd a000 	str.w	sl, [sp]
 801b7c4:	a905      	add	r1, sp, #20
 801b7c6:	f7f6 f85f 	bl	8011888 <SpacePointGyroProp>
 801b7ca:	e5bb      	b.n	801b344 <MotionFX_propagate+0x364>
 801b7cc:	4b0a      	ldr	r3, [pc, #40]	; (801b7f8 <MotionFX_propagate+0x818>)
 801b7ce:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
 801b7d2:	f1a3 020c 	sub.w	r2, r3, #12
 801b7d6:	4618      	mov	r0, r3
 801b7d8:	f8cd a000 	str.w	sl, [sp]
 801b7dc:	eeb0 0a49 	vmov.f32	s0, s18
 801b7e0:	a905      	add	r1, sp, #20
 801b7e2:	f7f6 f851 	bl	8011888 <SpacePointGyroProp>
 801b7e6:	e74c      	b.n	801b682 <MotionFX_propagate+0x6a2>
 801b7e8:	20000358 	.word	0x20000358
 801b7ec:	20005734 	.word	0x20005734
 801b7f0:	200056f4 	.word	0x200056f4
 801b7f4:	20005484 	.word	0x20005484
 801b7f8:	200056c4 	.word	0x200056c4
 801b7fc:	20005820 	.word	0x20005820
 801b800:	f8d8 3088 	ldr.w	r3, [r8, #136]	; 0x88
 801b804:	f8d8 008c 	ldr.w	r0, [r8, #140]	; 0x8c
 801b808:	f8d8 1090 	ldr.w	r1, [r8, #144]	; 0x90
 801b80c:	f8c8 3098 	str.w	r3, [r8, #152]	; 0x98
 801b810:	f042 0201 	orr.w	r2, r2, #1
 801b814:	f8d8 3094 	ldr.w	r3, [r8, #148]	; 0x94
 801b818:	f8c8 009c 	str.w	r0, [r8, #156]	; 0x9c
 801b81c:	f885 29fc 	strb.w	r2, [r5, #2556]	; 0x9fc
 801b820:	4650      	mov	r0, sl
 801b822:	aa10      	add	r2, sp, #64	; 0x40
 801b824:	f8c8 10a0 	str.w	r1, [r8, #160]	; 0xa0
 801b828:	f5ab 7196 	sub.w	r1, fp, #300	; 0x12c
 801b82c:	f8c8 30a4 	str.w	r3, [r8, #164]	; 0xa4
 801b830:	f7f5 fd92 	bl	8011358 <m_qmult_eml>
 801b834:	aa08      	add	r2, sp, #32
 801b836:	f5ab 71a6 	sub.w	r1, fp, #332	; 0x14c
 801b83a:	f5ab 7086 	sub.w	r0, fp, #268	; 0x10c
 801b83e:	f7f5 fd8b 	bl	8011358 <m_qmult_eml>
 801b842:	aa08      	add	r2, sp, #32
 801b844:	4611      	mov	r1, r2
 801b846:	a810      	add	r0, sp, #64	; 0x40
 801b848:	f7f5 fd86 	bl	8011358 <m_qmult_eml>
 801b84c:	ed9d 9a09 	vldr	s18, [sp, #36]	; 0x24
 801b850:	eddd 9a08 	vldr	s19, [sp, #32]
 801b854:	eddd 8a0a 	vldr	s17, [sp, #40]	; 0x28
 801b858:	ed9d 8a0b 	vldr	s16, [sp, #44]	; 0x2c
 801b85c:	ee69 7a09 	vmul.f32	s15, s18, s18
 801b860:	eee9 7aa9 	vfma.f32	s15, s19, s19
 801b864:	eee8 7aa8 	vfma.f32	s15, s17, s17
 801b868:	eee8 7a08 	vfma.f32	s15, s16, s16
 801b86c:	ee17 0a90 	vmov	r0, s15
 801b870:	f7e4 fdea 	bl	8000448 <__aeabi_f2d>
 801b874:	f005 fc90 	bl	8021198 <sqrt>
 801b878:	f7e5 f936 	bl	8000ae8 <__aeabi_d2f>
 801b87c:	f895 39fd 	ldrb.w	r3, [r5, #2557]	; 0x9fd
 801b880:	ed98 6a33 	vldr	s12, [r8, #204]	; 0xcc
 801b884:	edd8 6a32 	vldr	s13, [r8, #200]	; 0xc8
 801b888:	edd8 4a34 	vldr	s9, [r8, #208]	; 0xd0
 801b88c:	f8d8 10ac 	ldr.w	r1, [r8, #172]	; 0xac
 801b890:	f8d8 20b0 	ldr.w	r2, [r8, #176]	; 0xb0
 801b894:	f8c8 10bc 	str.w	r1, [r8, #188]	; 0xbc
 801b898:	ee07 3a10 	vmov	s14, r3
 801b89c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801b8a0:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 801b8a4:	eec5 7a07 	vdiv.f32	s15, s10, s14
 801b8a8:	f8d8 30a8 	ldr.w	r3, [r8, #168]	; 0xa8
 801b8ac:	f8c8 30b8 	str.w	r3, [r8, #184]	; 0xb8
 801b8b0:	f8d8 30b4 	ldr.w	r3, [r8, #180]	; 0xb4
 801b8b4:	f8c8 20c0 	str.w	r2, [r8, #192]	; 0xc0
 801b8b8:	f8c8 30c4 	str.w	r3, [r8, #196]	; 0xc4
 801b8bc:	ee07 0a10 	vmov	s14, r0
 801b8c0:	eec5 5a07 	vdiv.f32	s11, s10, s14
 801b8c4:	ee27 6a86 	vmul.f32	s12, s15, s12
 801b8c8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 801b8cc:	ee26 7a06 	vmul.f32	s14, s12, s12
 801b8d0:	ee67 7aa4 	vmul.f32	s15, s15, s9
 801b8d4:	eea6 7aa6 	vfma.f32	s14, s13, s13
 801b8d8:	ee69 9aa5 	vmul.f32	s19, s19, s11
 801b8dc:	eea7 7aa7 	vfma.f32	s14, s15, s15
 801b8e0:	ee29 9a25 	vmul.f32	s18, s18, s11
 801b8e4:	ee68 8aa5 	vmul.f32	s17, s17, s11
 801b8e8:	ee28 8a25 	vmul.f32	s16, s16, s11
 801b8ec:	eeb4 7ac5 	vcmpe.f32	s14, s10
 801b8f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b8f4:	edc8 9a1e 	vstr	s19, [r8, #120]	; 0x78
 801b8f8:	ed88 9a1f 	vstr	s18, [r8, #124]	; 0x7c
 801b8fc:	edc8 8a20 	vstr	s17, [r8, #128]	; 0x80
 801b900:	ed88 8a21 	vstr	s16, [r8, #132]	; 0x84
 801b904:	ed88 6a37 	vstr	s12, [r8, #220]	; 0xdc
 801b908:	edc8 6a36 	vstr	s13, [r8, #216]	; 0xd8
 801b90c:	edc8 7a38 	vstr	s15, [r8, #224]	; 0xe0
 801b910:	f100 80c5 	bmi.w	801ba9e <MotionFX_propagate+0xabe>
 801b914:	2000      	movs	r0, #0
 801b916:	2300      	movs	r3, #0
 801b918:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801b91c:	f8c8 00e4 	str.w	r0, [r8, #228]	; 0xe4
 801b920:	f8c8 30a8 	str.w	r3, [r8, #168]	; 0xa8
 801b924:	f8c8 30ac 	str.w	r3, [r8, #172]	; 0xac
 801b928:	f8c8 30b0 	str.w	r3, [r8, #176]	; 0xb0
 801b92c:	f8c8 30e8 	str.w	r3, [r8, #232]	; 0xe8
 801b930:	f8c8 30ec 	str.w	r3, [r8, #236]	; 0xec
 801b934:	f8c8 30f0 	str.w	r3, [r8, #240]	; 0xf0
 801b938:	f8c8 20b4 	str.w	r2, [r8, #180]	; 0xb4
 801b93c:	f8c8 20f4 	str.w	r2, [r8, #244]	; 0xf4
 801b940:	e576      	b.n	801b430 <MotionFX_propagate+0x450>
 801b942:	2300      	movs	r3, #0
 801b944:	ed86 7a09 	vstr	s14, [r6, #36]	; 0x24
 801b948:	61b3      	str	r3, [r6, #24]
 801b94a:	61f3      	str	r3, [r6, #28]
 801b94c:	6233      	str	r3, [r6, #32]
 801b94e:	e549      	b.n	801b3e4 <MotionFX_propagate+0x404>
 801b950:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
 801b954:	f8d6 008c 	ldr.w	r0, [r6, #140]	; 0x8c
 801b958:	f8d6 1090 	ldr.w	r1, [r6, #144]	; 0x90
 801b95c:	f8c6 3098 	str.w	r3, [r6, #152]	; 0x98
 801b960:	f042 0201 	orr.w	r2, r2, #1
 801b964:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 801b968:	f8c6 009c 	str.w	r0, [r6, #156]	; 0x9c
 801b96c:	f885 2c3c 	strb.w	r2, [r5, #3132]	; 0xc3c
 801b970:	4650      	mov	r0, sl
 801b972:	aa10      	add	r2, sp, #64	; 0x40
 801b974:	f8c6 10a0 	str.w	r1, [r6, #160]	; 0xa0
 801b978:	f5ab 7196 	sub.w	r1, fp, #300	; 0x12c
 801b97c:	f8c6 30a4 	str.w	r3, [r6, #164]	; 0xa4
 801b980:	f7f5 fcea 	bl	8011358 <m_qmult_eml>
 801b984:	aa08      	add	r2, sp, #32
 801b986:	f5ab 71a6 	sub.w	r1, fp, #332	; 0x14c
 801b98a:	f5ab 7086 	sub.w	r0, fp, #268	; 0x10c
 801b98e:	f7f5 fce3 	bl	8011358 <m_qmult_eml>
 801b992:	aa08      	add	r2, sp, #32
 801b994:	4611      	mov	r1, r2
 801b996:	a810      	add	r0, sp, #64	; 0x40
 801b998:	f7f5 fcde 	bl	8011358 <m_qmult_eml>
 801b99c:	eddd 8a09 	vldr	s17, [sp, #36]	; 0x24
 801b9a0:	eddd 9a08 	vldr	s19, [sp, #32]
 801b9a4:	ed9d 8a0a 	vldr	s16, [sp, #40]	; 0x28
 801b9a8:	ed9d aa0b 	vldr	s20, [sp, #44]	; 0x2c
 801b9ac:	ee68 7aa8 	vmul.f32	s15, s17, s17
 801b9b0:	eee9 7aa9 	vfma.f32	s15, s19, s19
 801b9b4:	eee8 7a08 	vfma.f32	s15, s16, s16
 801b9b8:	eeea 7a0a 	vfma.f32	s15, s20, s20
 801b9bc:	ee17 0a90 	vmov	r0, s15
 801b9c0:	f7e4 fd42 	bl	8000448 <__aeabi_f2d>
 801b9c4:	f005 fbe8 	bl	8021198 <sqrt>
 801b9c8:	f7e5 f88e 	bl	8000ae8 <__aeabi_d2f>
 801b9cc:	f895 3c3d 	ldrb.w	r3, [r5, #3133]	; 0xc3d
 801b9d0:	edd6 5a33 	vldr	s11, [r6, #204]	; 0xcc
 801b9d4:	ed96 6a32 	vldr	s12, [r6, #200]	; 0xc8
 801b9d8:	edd6 4a34 	vldr	s9, [r6, #208]	; 0xd0
 801b9dc:	f8d6 10ac 	ldr.w	r1, [r6, #172]	; 0xac
 801b9e0:	f8d6 20b0 	ldr.w	r2, [r6, #176]	; 0xb0
 801b9e4:	f8c6 10bc 	str.w	r1, [r6, #188]	; 0xbc
 801b9e8:	ee07 3a10 	vmov	s14, r3
 801b9ec:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801b9f0:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 801b9f4:	eec5 7a07 	vdiv.f32	s15, s10, s14
 801b9f8:	f8d6 30a8 	ldr.w	r3, [r6, #168]	; 0xa8
 801b9fc:	f8c6 30b8 	str.w	r3, [r6, #184]	; 0xb8
 801ba00:	f8d6 30b4 	ldr.w	r3, [r6, #180]	; 0xb4
 801ba04:	f8c6 20c0 	str.w	r2, [r6, #192]	; 0xc0
 801ba08:	f8c6 30c4 	str.w	r3, [r6, #196]	; 0xc4
 801ba0c:	ee07 0a10 	vmov	s14, r0
 801ba10:	ee85 7a07 	vdiv.f32	s14, s10, s14
 801ba14:	ee67 5aa5 	vmul.f32	s11, s15, s11
 801ba18:	ee27 6a86 	vmul.f32	s12, s15, s12
 801ba1c:	ee65 6aa5 	vmul.f32	s13, s11, s11
 801ba20:	ee67 7aa4 	vmul.f32	s15, s15, s9
 801ba24:	eee6 6a06 	vfma.f32	s13, s12, s12
 801ba28:	ee67 9a29 	vmul.f32	s19, s14, s19
 801ba2c:	eee7 6aa7 	vfma.f32	s13, s15, s15
 801ba30:	ee67 8a28 	vmul.f32	s17, s14, s17
 801ba34:	ee27 8a08 	vmul.f32	s16, s14, s16
 801ba38:	eef4 6ac5 	vcmpe.f32	s13, s10
 801ba3c:	ee27 7a0a 	vmul.f32	s14, s14, s20
 801ba40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ba44:	edc6 9a1e 	vstr	s19, [r6, #120]	; 0x78
 801ba48:	edc6 8a1f 	vstr	s17, [r6, #124]	; 0x7c
 801ba4c:	ed86 8a20 	vstr	s16, [r6, #128]	; 0x80
 801ba50:	ed86 7a21 	vstr	s14, [r6, #132]	; 0x84
 801ba54:	edc6 5a37 	vstr	s11, [r6, #220]	; 0xdc
 801ba58:	ed86 6a36 	vstr	s12, [r6, #216]	; 0xd8
 801ba5c:	edc6 7a38 	vstr	s15, [r6, #224]	; 0xe0
 801ba60:	d428      	bmi.n	801bab4 <MotionFX_propagate+0xad4>
 801ba62:	2000      	movs	r0, #0
 801ba64:	2300      	movs	r3, #0
 801ba66:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801ba6a:	f8c6 00e4 	str.w	r0, [r6, #228]	; 0xe4
 801ba6e:	f8c6 30a8 	str.w	r3, [r6, #168]	; 0xa8
 801ba72:	f8c6 30ac 	str.w	r3, [r6, #172]	; 0xac
 801ba76:	f8c6 30b0 	str.w	r3, [r6, #176]	; 0xb0
 801ba7a:	f8c6 30e8 	str.w	r3, [r6, #232]	; 0xe8
 801ba7e:	f8c6 30ec 	str.w	r3, [r6, #236]	; 0xec
 801ba82:	f8c6 30f0 	str.w	r3, [r6, #240]	; 0xf0
 801ba86:	f8c6 20b4 	str.w	r2, [r6, #180]	; 0xb4
 801ba8a:	f8c6 20f4 	str.w	r2, [r6, #244]	; 0xf4
 801ba8e:	e66e      	b.n	801b76e <MotionFX_propagate+0x78e>
 801ba90:	2300      	movs	r3, #0
 801ba92:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 801ba96:	61bb      	str	r3, [r7, #24]
 801ba98:	61fb      	str	r3, [r7, #28]
 801ba9a:	623b      	str	r3, [r7, #32]
 801ba9c:	e641      	b.n	801b722 <MotionFX_propagate+0x742>
 801ba9e:	ee75 7a47 	vsub.f32	s15, s10, s14
 801baa2:	ee17 0a90 	vmov	r0, s15
 801baa6:	f7e4 fccf 	bl	8000448 <__aeabi_f2d>
 801baaa:	f005 fb75 	bl	8021198 <sqrt>
 801baae:	f7e5 f81b 	bl	8000ae8 <__aeabi_d2f>
 801bab2:	e730      	b.n	801b916 <MotionFX_propagate+0x936>
 801bab4:	ee75 7a66 	vsub.f32	s15, s10, s13
 801bab8:	ee17 0a90 	vmov	r0, s15
 801babc:	f7e4 fcc4 	bl	8000448 <__aeabi_f2d>
 801bac0:	f005 fb6a 	bl	8021198 <sqrt>
 801bac4:	f7e5 f810 	bl	8000ae8 <__aeabi_d2f>
 801bac8:	e7cc      	b.n	801ba64 <MotionFX_propagate+0xa84>
 801baca:	bf00      	nop

0801bacc <MotionFX_MagCal_init>:
 801bacc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bad0:	4c50      	ldr	r4, [pc, #320]	; (801bc14 <MotionFX_MagCal_init+0x148>)
 801bad2:	f894 3d49 	ldrb.w	r3, [r4, #3401]	; 0xd49
 801bad6:	b90b      	cbnz	r3, 801badc <MotionFX_MagCal_init+0x10>
 801bad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801badc:	1e43      	subs	r3, r0, #1
 801bade:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801bae2:	d2f9      	bcs.n	801bad8 <MotionFX_MagCal_init+0xc>
 801bae4:	460e      	mov	r6, r1
 801bae6:	4605      	mov	r5, r0
 801bae8:	b207      	sxth	r7, r0
 801baea:	2900      	cmp	r1, #0
 801baec:	f000 8089 	beq.w	801bc02 <MotionFX_MagCal_init+0x136>
 801baf0:	f504 688c 	add.w	r8, r4, #1120	; 0x460
 801baf4:	2600      	movs	r6, #0
 801baf6:	4640      	mov	r0, r8
 801baf8:	f7f5 fcdc 	bl	80114b4 <MEMS_DataBuffInit>
 801bafc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801bb00:	4631      	mov	r1, r6
 801bb02:	f44f 7248 	mov.w	r2, #800	; 0x320
 801bb06:	f504 60a0 	add.w	r0, r4, #1280	; 0x500
 801bb0a:	f8a4 34b0 	strh.w	r3, [r4, #1200]	; 0x4b0
 801bb0e:	f884 64a8 	strb.w	r6, [r4, #1192]	; 0x4a8
 801bb12:	f8c4 64ac 	str.w	r6, [r4, #1196]	; 0x4ac
 801bb16:	f884 6474 	strb.w	r6, [r4, #1140]	; 0x474
 801bb1a:	f884 6475 	strb.w	r6, [r4, #1141]	; 0x475
 801bb1e:	f006 febb 	bl	8022898 <memset>
 801bb22:	225f      	movs	r2, #95	; 0x5f
 801bb24:	f44f 7080 	mov.w	r0, #256	; 0x100
 801bb28:	23ff      	movs	r3, #255	; 0xff
 801bb2a:	4631      	mov	r1, r6
 801bb2c:	f884 2501 	strb.w	r2, [r4, #1281]	; 0x501
 801bb30:	f44f 6c70 	mov.w	ip, #3840	; 0xf00
 801bb34:	222e      	movs	r2, #46	; 0x2e
 801bb36:	f8a4 04b4 	strh.w	r0, [r4, #1204]	; 0x4b4
 801bb3a:	f204 40ce 	addw	r0, r4, #1230	; 0x4ce
 801bb3e:	f884 3502 	strb.w	r3, [r4, #1282]	; 0x502
 801bb42:	f884 3486 	strb.w	r3, [r4, #1158]	; 0x486
 801bb46:	f8c4 6478 	str.w	r6, [r4, #1144]	; 0x478
 801bb4a:	f8c4 647c 	str.w	r6, [r4, #1148]	; 0x47c
 801bb4e:	f8c4 6480 	str.w	r6, [r4, #1152]	; 0x480
 801bb52:	f8a4 c484 	strh.w	ip, [r4, #1156]	; 0x484
 801bb56:	f006 fe9f 	bl	8022898 <memset>
 801bb5a:	f1a5 030a 	sub.w	r3, r5, #10
 801bb5e:	b29b      	uxth	r3, r3
 801bb60:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801bb64:	2101      	movs	r1, #1
 801bb66:	2b32      	cmp	r3, #50	; 0x32
 801bb68:	f884 64cc 	strb.w	r6, [r4, #1228]	; 0x4cc
 801bb6c:	f8c8 207c 	str.w	r2, [r8, #124]	; 0x7c
 801bb70:	f8c8 208c 	str.w	r2, [r8, #140]	; 0x8c
 801bb74:	f8c8 209c 	str.w	r2, [r8, #156]	; 0x9c
 801bb78:	f884 14cd 	strb.w	r1, [r4, #1229]	; 0x4cd
 801bb7c:	d801      	bhi.n	801bb82 <MotionFX_MagCal_init+0xb6>
 801bb7e:	f884 14a8 	strb.w	r1, [r4, #1192]	; 0x4a8
 801bb82:	2100      	movs	r1, #0
 801bb84:	4824      	ldr	r0, [pc, #144]	; (801bc18 <MotionFX_MagCal_init+0x14c>)
 801bb86:	f7f6 f815 	bl	8011bb4 <MEMSLoadMagCalNVM>
 801bb8a:	f9b4 3462 	ldrsh.w	r3, [r4, #1122]	; 0x462
 801bb8e:	4a23      	ldr	r2, [pc, #140]	; (801bc1c <MotionFX_MagCal_init+0x150>)
 801bb90:	1b5b      	subs	r3, r3, r5
 801bb92:	ee07 3a90 	vmov	s15, r3
 801bb96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bb9a:	23c8      	movs	r3, #200	; 0xc8
 801bb9c:	eef0 7ae7 	vabs.f32	s15, s15
 801bba0:	fb93 f3f5 	sdiv	r3, r3, r5
 801bba4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801bba8:	b2db      	uxtb	r3, r3
 801bbaa:	2b0f      	cmp	r3, #15
 801bbac:	eef4 7ac7 	vcmpe.f32	s15, s14
 801bbb0:	bf28      	it	cs
 801bbb2:	230f      	movcs	r3, #15
 801bbb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bbb8:	f884 3d6e 	strb.w	r3, [r4, #3438]	; 0xd6e
 801bbbc:	f8c2 50c4 	str.w	r5, [r2, #196]	; 0xc4
 801bbc0:	dc0e      	bgt.n	801bbe0 <MotionFX_MagCal_init+0x114>
 801bbc2:	edd8 7a01 	vldr	s15, [r8, #4]
 801bbc6:	eddf 6a16 	vldr	s13, [pc, #88]	; 801bc20 <MotionFX_MagCal_init+0x154>
 801bbca:	ed9f 7a16 	vldr	s14, [pc, #88]	; 801bc24 <MotionFX_MagCal_init+0x158>
 801bbce:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801bbd2:	eef0 7ae7 	vabs.f32	s15, s15
 801bbd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 801bbda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bbde:	dd0b      	ble.n	801bbf8 <MotionFX_MagCal_init+0x12c>
 801bbe0:	480d      	ldr	r0, [pc, #52]	; (801bc18 <MotionFX_MagCal_init+0x14c>)
 801bbe2:	f7f5 fc63 	bl	80114ac <MEMS_EmptyDataFrame>
 801bbe6:	4a10      	ldr	r2, [pc, #64]	; (801bc28 <MotionFX_MagCal_init+0x15c>)
 801bbe8:	f8a4 7462 	strh.w	r7, [r4, #1122]	; 0x462
 801bbec:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 801bbf0:	f8c8 2004 	str.w	r2, [r8, #4]
 801bbf4:	f8a4 3460 	strh.w	r3, [r4, #1120]	; 0x460
 801bbf8:	2300      	movs	r3, #0
 801bbfa:	f884 3de8 	strb.w	r3, [r4, #3560]	; 0xde8
 801bbfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bc02:	f204 4074 	addw	r0, r4, #1140	; 0x474
 801bc06:	f7f6 f817 	bl	8011c38 <MEMSSaveMagCalNVM>
 801bc0a:	f504 688c 	add.w	r8, r4, #1120	; 0x460
 801bc0e:	f884 64a8 	strb.w	r6, [r4, #1192]	; 0x4a8
 801bc12:	e7ba      	b.n	801bb8a <MotionFX_MagCal_init+0xbe>
 801bc14:	20004b40 	.word	0x20004b40
 801bc18:	20004fa0 	.word	0x20004fa0
 801bc1c:	20001450 	.word	0x20001450
 801bc20:	3dcccccd 	.word	0x3dcccccd
 801bc24:	3c23d70a 	.word	0x3c23d70a
 801bc28:	3dcccccd 	.word	0x3dcccccd

0801bc2c <MotionFX_MagCal_run>:
 801bc2c:	4b4c      	ldr	r3, [pc, #304]	; (801bd60 <MotionFX_MagCal_run+0x134>)
 801bc2e:	f893 2d49 	ldrb.w	r2, [r3, #3401]	; 0xd49
 801bc32:	2a00      	cmp	r2, #0
 801bc34:	d07f      	beq.n	801bd36 <MotionFX_MagCal_run+0x10a>
 801bc36:	ed90 7a00 	vldr	s14, [r0]
 801bc3a:	eddf 7a4a 	vldr	s15, [pc, #296]	; 801bd64 <MotionFX_MagCal_run+0x138>
 801bc3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bc40:	ee67 7a27 	vmul.f32	s15, s14, s15
 801bc44:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801bc48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bc4c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801bc50:	bfac      	ite	ge
 801bc52:	ee77 7a87 	vaddge.f32	s15, s15, s14
 801bc56:	ee77 7ac7 	vsublt.f32	s15, s15, s14
 801bc5a:	b085      	sub	sp, #20
 801bc5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801bc60:	ed90 7a01 	vldr	s14, [r0, #4]
 801bc64:	edcd 7a01 	vstr	s15, [sp, #4]
 801bc68:	eddf 7a3e 	vldr	s15, [pc, #248]	; 801bd64 <MotionFX_MagCal_run+0x138>
 801bc6c:	f893 2de8 	ldrb.w	r2, [r3, #3560]	; 0xde8
 801bc70:	ee67 7a27 	vmul.f32	s15, s14, s15
 801bc74:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801bc78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bc7c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801bc80:	bfac      	ite	ge
 801bc82:	ee77 7a87 	vaddge.f32	s15, s15, s14
 801bc86:	ee77 7ac7 	vsublt.f32	s15, s15, s14
 801bc8a:	ed90 7a02 	vldr	s14, [r0, #8]
 801bc8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801bc92:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801bc96:	edcd 7a02 	vstr	s15, [sp, #8]
 801bc9a:	eddf 7a32 	vldr	s15, [pc, #200]	; 801bd64 <MotionFX_MagCal_run+0x138>
 801bc9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801bca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bca6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801bcaa:	bfac      	ite	ge
 801bcac:	ee77 7a87 	vaddge.f32	s15, s15, s14
 801bcb0:	ee77 7ac7 	vsublt.f32	s15, s15, s14
 801bcb4:	e9dd 4601 	ldrd	r4, r6, [sp, #4]
 801bcb8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801bcbc:	edcd 7a03 	vstr	s15, [sp, #12]
 801bcc0:	ee17 5a90 	vmov	r5, s15
 801bcc4:	b37a      	cbz	r2, 801bd26 <MotionFX_MagCal_run+0xfa>
 801bcc6:	4828      	ldr	r0, [pc, #160]	; (801bd68 <MotionFX_MagCal_run+0x13c>)
 801bcc8:	00d1      	lsls	r1, r2, #3
 801bcca:	f8d0 00c4 	ldr.w	r0, [r0, #196]	; 0xc4
 801bcce:	185f      	adds	r7, r3, r1
 801bcd0:	fb10 f002 	smulbb	r0, r0, r2
 801bcd4:	f8a7 0d70 	strh.w	r0, [r7, #3440]	; 0xd70
 801bcd8:	f647 70fe 	movw	r0, #32766	; 0x7ffe
 801bcdc:	4f23      	ldr	r7, [pc, #140]	; (801bd6c <MotionFX_MagCal_run+0x140>)
 801bcde:	4284      	cmp	r4, r0
 801bce0:	bfa8      	it	ge
 801bce2:	4604      	movge	r4, r0
 801bce4:	4285      	cmp	r5, r0
 801bce6:	bfa8      	it	ge
 801bce8:	4605      	movge	r5, r0
 801bcea:	42bc      	cmp	r4, r7
 801bcec:	bfb8      	it	lt
 801bcee:	463c      	movlt	r4, r7
 801bcf0:	42be      	cmp	r6, r7
 801bcf2:	db03      	blt.n	801bcfc <MotionFX_MagCal_run+0xd0>
 801bcf4:	42b0      	cmp	r0, r6
 801bcf6:	bfa8      	it	ge
 801bcf8:	4630      	movge	r0, r6
 801bcfa:	b200      	sxth	r0, r0
 801bcfc:	4f1b      	ldr	r7, [pc, #108]	; (801bd6c <MotionFX_MagCal_run+0x140>)
 801bcfe:	f893 6d6e 	ldrb.w	r6, [r3, #3438]	; 0xd6e
 801bd02:	3201      	adds	r2, #1
 801bd04:	4419      	add	r1, r3
 801bd06:	b2d2      	uxtb	r2, r2
 801bd08:	42bd      	cmp	r5, r7
 801bd0a:	bfb8      	it	lt
 801bd0c:	463d      	movlt	r5, r7
 801bd0e:	4296      	cmp	r6, r2
 801bd10:	f883 2de8 	strb.w	r2, [r3, #3560]	; 0xde8
 801bd14:	f8a1 4d72 	strh.w	r4, [r1, #3442]	; 0xd72
 801bd18:	f8a1 0d74 	strh.w	r0, [r1, #3444]	; 0xd74
 801bd1c:	f8a1 5d76 	strh.w	r5, [r1, #3446]	; 0xd76
 801bd20:	d00a      	beq.n	801bd38 <MotionFX_MagCal_run+0x10c>
 801bd22:	b005      	add	sp, #20
 801bd24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bd26:	68c1      	ldr	r1, [r0, #12]
 801bd28:	f8c3 1d68 	str.w	r1, [r3, #3432]	; 0xd68
 801bd2c:	2101      	movs	r1, #1
 801bd2e:	f883 1d6c 	strb.w	r1, [r3, #3436]	; 0xd6c
 801bd32:	4611      	mov	r1, r2
 801bd34:	e7d0      	b.n	801bcd8 <MotionFX_MagCal_run+0xac>
 801bd36:	4770      	bx	lr
 801bd38:	490d      	ldr	r1, [pc, #52]	; (801bd70 <MotionFX_MagCal_run+0x144>)
 801bd3a:	2200      	movs	r2, #0
 801bd3c:	f6a1 1008 	subw	r0, r1, #2312	; 0x908
 801bd40:	f883 2de8 	strb.w	r2, [r3, #3560]	; 0xde8
 801bd44:	f7f5 fbfc 	bl	8011540 <updateProcBuffer_Temp>
 801bd48:	490a      	ldr	r1, [pc, #40]	; (801bd74 <MotionFX_MagCal_run+0x148>)
 801bd4a:	f101 0048 	add.w	r0, r1, #72	; 0x48
 801bd4e:	f7f5 fbbd 	bl	80114cc <MEMS_checkTimeToRun>
 801bd52:	2801      	cmp	r0, #1
 801bd54:	d1e5      	bne.n	801bd22 <MotionFX_MagCal_run+0xf6>
 801bd56:	b005      	add	sp, #20
 801bd58:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801bd5c:	f7f7 bac8 	b.w	80132f0 <MEMS_runMagCal.constprop.14>
 801bd60:	20004b40 	.word	0x20004b40
 801bd64:	43fa0000 	.word	0x43fa0000
 801bd68:	20001450 	.word	0x20001450
 801bd6c:	ffff8002 	.word	0xffff8002
 801bd70:	200058a8 	.word	0x200058a8
 801bd74:	20004fa0 	.word	0x20004fa0

0801bd78 <MotionFX_MagCal_getParams>:
 801bd78:	4b15      	ldr	r3, [pc, #84]	; (801bdd0 <MotionFX_MagCal_getParams+0x58>)
 801bd7a:	f893 2d49 	ldrb.w	r2, [r3, #3401]	; 0xd49
 801bd7e:	b902      	cbnz	r2, 801bd82 <MotionFX_MagCal_getParams+0xa>
 801bd80:	4770      	bx	lr
 801bd82:	f503 628c 	add.w	r2, r3, #1120	; 0x460
 801bd86:	edd2 6a1c 	vldr	s13, [r2, #112]	; 0x70
 801bd8a:	ed92 7a1d 	vldr	s14, [r2, #116]	; 0x74
 801bd8e:	edd2 7a1e 	vldr	s15, [r2, #120]	; 0x78
 801bd92:	ed9f 6a10 	vldr	s12, [pc, #64]	; 801bdd4 <MotionFX_MagCal_getParams+0x5c>
 801bd96:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 801bd9a:	7303      	strb	r3, [r0, #12]
 801bd9c:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 801bda0:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801bda4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801bda8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801bdac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801bdb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bdb4:	ee66 6a86 	vmul.f32	s13, s13, s12
 801bdb8:	ee27 7a06 	vmul.f32	s14, s14, s12
 801bdbc:	ee67 7a86 	vmul.f32	s15, s15, s12
 801bdc0:	edc0 6a00 	vstr	s13, [r0]
 801bdc4:	ed80 7a01 	vstr	s14, [r0, #4]
 801bdc8:	edc0 7a02 	vstr	s15, [r0, #8]
 801bdcc:	4770      	bx	lr
 801bdce:	bf00      	nop
 801bdd0:	20004b40 	.word	0x20004b40
 801bdd4:	3b03126f 	.word	0x3b03126f

0801bdd8 <MotionGR_Initialize>:
 801bdd8:	490b      	ldr	r1, [pc, #44]	; (801be08 <MotionGR_Initialize+0x30>)
 801bdda:	4a0c      	ldr	r2, [pc, #48]	; (801be0c <MotionGR_Initialize+0x34>)
 801bddc:	680b      	ldr	r3, [r1, #0]
 801bdde:	2001      	movs	r0, #1
 801bde0:	f023 0301 	bic.w	r3, r3, #1
 801bde4:	600b      	str	r3, [r1, #0]
 801bde6:	4613      	mov	r3, r2
 801bde8:	6010      	str	r0, [r2, #0]
 801bdea:	681a      	ldr	r2, [r3, #0]
 801bdec:	2a00      	cmp	r2, #0
 801bdee:	d1fc      	bne.n	801bdea <MotionGR_Initialize+0x12>
 801bdf0:	4b07      	ldr	r3, [pc, #28]	; (801be10 <MotionGR_Initialize+0x38>)
 801bdf2:	4a08      	ldr	r2, [pc, #32]	; (801be14 <MotionGR_Initialize+0x3c>)
 801bdf4:	601a      	str	r2, [r3, #0]
 801bdf6:	681a      	ldr	r2, [r3, #0]
 801bdf8:	4b07      	ldr	r3, [pc, #28]	; (801be18 <MotionGR_Initialize+0x40>)
 801bdfa:	429a      	cmp	r2, r3
 801bdfc:	d000      	beq.n	801be00 <MotionGR_Initialize+0x28>
 801bdfe:	e7fe      	b.n	801bdfe <MotionGR_Initialize+0x26>
 801be00:	4b06      	ldr	r3, [pc, #24]	; (801be1c <MotionGR_Initialize+0x44>)
 801be02:	2201      	movs	r2, #1
 801be04:	701a      	strb	r2, [r3, #0]
 801be06:	4770      	bx	lr
 801be08:	e0002000 	.word	0xe0002000
 801be0c:	40023008 	.word	0x40023008
 801be10:	40023000 	.word	0x40023000
 801be14:	f407a5c2 	.word	0xf407a5c2
 801be18:	b5e8b5cd 	.word	0xb5e8b5cd
 801be1c:	20005930 	.word	0x20005930

0801be20 <MotionGR_SetOrientation_Acc>:
 801be20:	4b44      	ldr	r3, [pc, #272]	; (801bf34 <MotionGR_SetOrientation_Acc+0x114>)
 801be22:	781a      	ldrb	r2, [r3, #0]
 801be24:	b902      	cbnz	r2, 801be28 <MotionGR_SetOrientation_Acc+0x8>
 801be26:	4770      	bx	lr
 801be28:	2200      	movs	r2, #0
 801be2a:	e9c3 2201 	strd	r2, r2, [r3, #4]
 801be2e:	731a      	strb	r2, [r3, #12]
 801be30:	7802      	ldrb	r2, [r0, #0]
 801be32:	f1a2 0142 	sub.w	r1, r2, #66	; 0x42
 801be36:	b082      	sub	sp, #8
 801be38:	2917      	cmp	r1, #23
 801be3a:	bf98      	it	ls
 801be3c:	3220      	addls	r2, #32
 801be3e:	f88d 2004 	strb.w	r2, [sp, #4]
 801be42:	7842      	ldrb	r2, [r0, #1]
 801be44:	f1a2 0142 	sub.w	r1, r2, #66	; 0x42
 801be48:	2917      	cmp	r1, #23
 801be4a:	bf98      	it	ls
 801be4c:	3220      	addls	r2, #32
 801be4e:	f88d 2005 	strb.w	r2, [sp, #5]
 801be52:	7882      	ldrb	r2, [r0, #2]
 801be54:	f1a2 0142 	sub.w	r1, r2, #66	; 0x42
 801be58:	2917      	cmp	r1, #23
 801be5a:	bf98      	it	ls
 801be5c:	3220      	addls	r2, #32
 801be5e:	f88d 2006 	strb.w	r2, [sp, #6]
 801be62:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801be66:	3a64      	subs	r2, #100	; 0x64
 801be68:	2a13      	cmp	r2, #19
 801be6a:	d80d      	bhi.n	801be88 <MotionGR_SetOrientation_Acc+0x68>
 801be6c:	e8df f002 	tbb	[pc, r2]
 801be70:	0c0c5e0a 	.word	0x0c0c5e0a
 801be74:	0c0c0c0c 	.word	0x0c0c0c0c
 801be78:	0c5b0c0c 	.word	0x0c5b0c0c
 801be7c:	580c0c0c 	.word	0x580c0c0c
 801be80:	520c550c 	.word	0x520c550c
 801be84:	22ff      	movs	r2, #255	; 0xff
 801be86:	729a      	strb	r2, [r3, #10]
 801be88:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801be8c:	3a64      	subs	r2, #100	; 0x64
 801be8e:	2a13      	cmp	r2, #19
 801be90:	d80d      	bhi.n	801beae <MotionGR_SetOrientation_Acc+0x8e>
 801be92:	e8df f002 	tbb	[pc, r2]
 801be96:	3c0a      	.short	0x3c0a
 801be98:	0c0c0c0c 	.word	0x0c0c0c0c
 801be9c:	0c0c0c0c 	.word	0x0c0c0c0c
 801bea0:	0c0c0c39 	.word	0x0c0c0c39
 801bea4:	330c360c 	.word	0x330c360c
 801bea8:	300c      	.short	0x300c
 801beaa:	22ff      	movs	r2, #255	; 0xff
 801beac:	72da      	strb	r2, [r3, #11]
 801beae:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801beb2:	3a64      	subs	r2, #100	; 0x64
 801beb4:	2a13      	cmp	r2, #19
 801beb6:	d80d      	bhi.n	801bed4 <MotionGR_SetOrientation_Acc+0xb4>
 801beb8:	e8df f002 	tbb	[pc, r2]
 801bebc:	0c0c1a0a 	.word	0x0c0c1a0a
 801bec0:	0c0c0c0c 	.word	0x0c0c0c0c
 801bec4:	0c170c0c 	.word	0x0c170c0c
 801bec8:	140c0c0c 	.word	0x140c0c0c
 801becc:	0e0c110c 	.word	0x0e0c110c
 801bed0:	22ff      	movs	r2, #255	; 0xff
 801bed2:	731a      	strb	r2, [r3, #12]
 801bed4:	b002      	add	sp, #8
 801bed6:	4770      	bx	lr
 801bed8:	22ff      	movs	r2, #255	; 0xff
 801beda:	719a      	strb	r2, [r3, #6]
 801bedc:	e7fa      	b.n	801bed4 <MotionGR_SetOrientation_Acc+0xb4>
 801bede:	2201      	movs	r2, #1
 801bee0:	731a      	strb	r2, [r3, #12]
 801bee2:	e7f7      	b.n	801bed4 <MotionGR_SetOrientation_Acc+0xb4>
 801bee4:	22ff      	movs	r2, #255	; 0xff
 801bee6:	725a      	strb	r2, [r3, #9]
 801bee8:	e7f4      	b.n	801bed4 <MotionGR_SetOrientation_Acc+0xb4>
 801beea:	2201      	movs	r2, #1
 801beec:	725a      	strb	r2, [r3, #9]
 801beee:	e7f1      	b.n	801bed4 <MotionGR_SetOrientation_Acc+0xb4>
 801bef0:	2201      	movs	r2, #1
 801bef2:	719a      	strb	r2, [r3, #6]
 801bef4:	e7ee      	b.n	801bed4 <MotionGR_SetOrientation_Acc+0xb4>
 801bef6:	22ff      	movs	r2, #255	; 0xff
 801bef8:	715a      	strb	r2, [r3, #5]
 801befa:	e7d8      	b.n	801beae <MotionGR_SetOrientation_Acc+0x8e>
 801befc:	2201      	movs	r2, #1
 801befe:	72da      	strb	r2, [r3, #11]
 801bf00:	e7d5      	b.n	801beae <MotionGR_SetOrientation_Acc+0x8e>
 801bf02:	22ff      	movs	r2, #255	; 0xff
 801bf04:	721a      	strb	r2, [r3, #8]
 801bf06:	e7d2      	b.n	801beae <MotionGR_SetOrientation_Acc+0x8e>
 801bf08:	2201      	movs	r2, #1
 801bf0a:	721a      	strb	r2, [r3, #8]
 801bf0c:	e7cf      	b.n	801beae <MotionGR_SetOrientation_Acc+0x8e>
 801bf0e:	2201      	movs	r2, #1
 801bf10:	715a      	strb	r2, [r3, #5]
 801bf12:	e7cc      	b.n	801beae <MotionGR_SetOrientation_Acc+0x8e>
 801bf14:	22ff      	movs	r2, #255	; 0xff
 801bf16:	711a      	strb	r2, [r3, #4]
 801bf18:	e7b6      	b.n	801be88 <MotionGR_SetOrientation_Acc+0x68>
 801bf1a:	2201      	movs	r2, #1
 801bf1c:	729a      	strb	r2, [r3, #10]
 801bf1e:	e7b3      	b.n	801be88 <MotionGR_SetOrientation_Acc+0x68>
 801bf20:	22ff      	movs	r2, #255	; 0xff
 801bf22:	71da      	strb	r2, [r3, #7]
 801bf24:	e7b0      	b.n	801be88 <MotionGR_SetOrientation_Acc+0x68>
 801bf26:	2201      	movs	r2, #1
 801bf28:	71da      	strb	r2, [r3, #7]
 801bf2a:	e7ad      	b.n	801be88 <MotionGR_SetOrientation_Acc+0x68>
 801bf2c:	2201      	movs	r2, #1
 801bf2e:	711a      	strb	r2, [r3, #4]
 801bf30:	e7aa      	b.n	801be88 <MotionGR_SetOrientation_Acc+0x68>
 801bf32:	bf00      	nop
 801bf34:	20005930 	.word	0x20005930

0801bf38 <MotionGR_Update>:
 801bf38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bf3c:	ed2d 8b04 	vpush	{d8-d9}
 801bf40:	f8df b014 	ldr.w	fp, [pc, #20]	; 801bf58 <MotionGR_Update+0x20>
 801bf44:	f89b 3000 	ldrb.w	r3, [fp]
 801bf48:	b0cf      	sub	sp, #316	; 0x13c
 801bf4a:	b94b      	cbnz	r3, 801bf60 <MotionGR_Update+0x28>
 801bf4c:	b04f      	add	sp, #316	; 0x13c
 801bf4e:	ecbd 8b04 	vpop	{d8-d9}
 801bf52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bf56:	bf00      	nop
 801bf58:	20005930 	.word	0x20005930
 801bf5c:	411cf5c3 	.word	0x411cf5c3
 801bf60:	f99b 3005 	ldrsb.w	r3, [fp, #5]
 801bf64:	ed1f 6a03 	vldr	s12, [pc, #-12]	; 801bf5c <MotionGR_Update+0x24>
 801bf68:	ed90 9a01 	vldr	s18, [r0, #4]
 801bf6c:	edd0 8a00 	vldr	s17, [r0]
 801bf70:	ed90 8a02 	vldr	s16, [r0, #8]
 801bf74:	913b      	str	r1, [sp, #236]	; 0xec
 801bf76:	ee07 3a90 	vmov	s15, r3
 801bf7a:	f99b 3004 	ldrsb.w	r3, [fp, #4]
 801bf7e:	ee29 9a06 	vmul.f32	s18, s18, s12
 801bf82:	ee06 3a90 	vmov	s13, r3
 801bf86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bf8a:	ee68 8a86 	vmul.f32	s17, s17, s12
 801bf8e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801bf92:	f99b 3006 	ldrsb.w	r3, [fp, #6]
 801bf96:	ee67 7a89 	vmul.f32	s15, s15, s18
 801bf9a:	ee07 3a10 	vmov	s14, r3
 801bf9e:	eee8 7aa6 	vfma.f32	s15, s17, s13
 801bfa2:	ee28 8a06 	vmul.f32	s16, s16, s12
 801bfa6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801bfaa:	eee8 7a07 	vfma.f32	s15, s16, s14
 801bfae:	ee17 0a90 	vmov	r0, s15
 801bfb2:	f7e4 fa49 	bl	8000448 <__aeabi_f2d>
 801bfb6:	f20f 634c 	addw	r3, pc, #1612	; 0x64c
 801bfba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bfbe:	f7e4 fa9b 	bl	80004f8 <__aeabi_dmul>
 801bfc2:	f99b 3008 	ldrsb.w	r3, [fp, #8]
 801bfc6:	ee07 3a90 	vmov	s15, r3
 801bfca:	f99b 3007 	ldrsb.w	r3, [fp, #7]
 801bfce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bfd2:	ee06 3a90 	vmov	s13, r3
 801bfd6:	ee67 7a89 	vmul.f32	s15, s15, s18
 801bfda:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801bfde:	f99b 3009 	ldrsb.w	r3, [fp, #9]
 801bfe2:	eee8 7aa6 	vfma.f32	s15, s17, s13
 801bfe6:	e9cd 0100 	strd	r0, r1, [sp]
 801bfea:	ee07 3a10 	vmov	s14, r3
 801bfee:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801bff2:	eee8 7a07 	vfma.f32	s15, s16, s14
 801bff6:	ee17 0a90 	vmov	r0, s15
 801bffa:	f7e4 fa25 	bl	8000448 <__aeabi_f2d>
 801bffe:	f20f 6304 	addw	r3, pc, #1540	; 0x604
 801c002:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c006:	f7e4 fa77 	bl	80004f8 <__aeabi_dmul>
 801c00a:	f99b 300b 	ldrsb.w	r3, [fp, #11]
 801c00e:	ee07 3a90 	vmov	s15, r3
 801c012:	f99b 300a 	ldrsb.w	r3, [fp, #10]
 801c016:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c01a:	ee06 3a90 	vmov	s13, r3
 801c01e:	ee67 7a89 	vmul.f32	s15, s15, s18
 801c022:	f99b 300c 	ldrsb.w	r3, [fp, #12]
 801c026:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801c02a:	ee07 3a10 	vmov	s14, r3
 801c02e:	eee8 7aa6 	vfma.f32	s15, s17, s13
 801c032:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c036:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c03a:	eee8 7a07 	vfma.f32	s15, s16, s14
 801c03e:	ee17 0a90 	vmov	r0, s15
 801c042:	f7e4 fa01 	bl	8000448 <__aeabi_f2d>
 801c046:	f20f 53bc 	addw	r3, pc, #1468	; 0x5bc
 801c04a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c04e:	f7e4 fa53 	bl	80004f8 <__aeabi_dmul>
 801c052:	f8db 3010 	ldr.w	r3, [fp, #16]
 801c056:	3301      	adds	r3, #1
 801c058:	2b01      	cmp	r3, #1
 801c05a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801c05e:	930a      	str	r3, [sp, #40]	; 0x28
 801c060:	f8cb 3010 	str.w	r3, [fp, #16]
 801c064:	f000 8766 	beq.w	801cf34 <MotionGR_Update+0xffc>
 801c068:	f8db 7294 	ldr.w	r7, [fp, #660]	; 0x294
 801c06c:	f8db 6278 	ldr.w	r6, [fp, #632]	; 0x278
 801c070:	ed9b 7ba6 	vldr	d7, [fp, #664]	; 0x298
 801c074:	ed8d 7b04 	vstr	d7, [sp, #16]
 801c078:	ed9b 7bb2 	vldr	d7, [fp, #712]	; 0x2c8
 801c07c:	f20f 538c 	addw	r3, pc, #1420	; 0x58c
 801c080:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c084:	e9db 01aa 	ldrd	r0, r1, [fp, #680]	; 0x2a8
 801c088:	ed8d 7b08 	vstr	d7, [sp, #32]
 801c08c:	f7e4 fa34 	bl	80004f8 <__aeabi_dmul>
 801c090:	f20f 5380 	addw	r3, pc, #1408	; 0x580
 801c094:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c098:	4604      	mov	r4, r0
 801c09a:	460d      	mov	r5, r1
 801c09c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801c0a0:	f7e4 fa2a 	bl	80004f8 <__aeabi_dmul>
 801c0a4:	4602      	mov	r2, r0
 801c0a6:	460b      	mov	r3, r1
 801c0a8:	4620      	mov	r0, r4
 801c0aa:	4629      	mov	r1, r5
 801c0ac:	f7e4 f86e 	bl	800018c <__adddf3>
 801c0b0:	f20f 5368 	addw	r3, pc, #1384	; 0x568
 801c0b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c0b8:	4604      	mov	r4, r0
 801c0ba:	460d      	mov	r5, r1
 801c0bc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801c0c0:	f7e4 fa1a 	bl	80004f8 <__aeabi_dmul>
 801c0c4:	4602      	mov	r2, r0
 801c0c6:	460b      	mov	r3, r1
 801c0c8:	4620      	mov	r0, r4
 801c0ca:	4629      	mov	r1, r5
 801c0cc:	f7e4 f85c 	bl	8000188 <__aeabi_dsub>
 801c0d0:	f20f 5350 	addw	r3, pc, #1360	; 0x550
 801c0d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c0d8:	4604      	mov	r4, r0
 801c0da:	460d      	mov	r5, r1
 801c0dc:	e9db 01b6 	ldrd	r0, r1, [fp, #728]	; 0x2d8
 801c0e0:	f7e4 fa0a 	bl	80004f8 <__aeabi_dmul>
 801c0e4:	4602      	mov	r2, r0
 801c0e6:	460b      	mov	r3, r1
 801c0e8:	4620      	mov	r0, r4
 801c0ea:	4629      	mov	r1, r5
 801c0ec:	f7e4 f84c 	bl	8000188 <__aeabi_dsub>
 801c0f0:	f20f 5318 	addw	r3, pc, #1304	; 0x518
 801c0f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c0f8:	4604      	mov	r4, r0
 801c0fa:	460d      	mov	r5, r1
 801c0fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c100:	f7e4 f9fa 	bl	80004f8 <__aeabi_dmul>
 801c104:	4602      	mov	r2, r0
 801c106:	460b      	mov	r3, r1
 801c108:	4620      	mov	r0, r4
 801c10a:	4629      	mov	r1, r5
 801c10c:	f7e4 f83e 	bl	800018c <__adddf3>
 801c110:	ed9b 7ba8 	vldr	d7, [fp, #672]	; 0x2a0
 801c114:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801c118:	ed9b 7bb4 	vldr	d7, [fp, #720]	; 0x2d0
 801c11c:	4680      	mov	r8, r0
 801c11e:	4689      	mov	r9, r1
 801c120:	f20f 43e8 	addw	r3, pc, #1256	; 0x4e8
 801c124:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c128:	e9db 01ac 	ldrd	r0, r1, [fp, #688]	; 0x2b0
 801c12c:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 801c130:	f7e4 f9e2 	bl	80004f8 <__aeabi_dmul>
 801c134:	f20f 43dc 	addw	r3, pc, #1244	; 0x4dc
 801c138:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c13c:	4604      	mov	r4, r0
 801c13e:	460d      	mov	r5, r1
 801c140:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801c144:	f7e4 f9d8 	bl	80004f8 <__aeabi_dmul>
 801c148:	4602      	mov	r2, r0
 801c14a:	460b      	mov	r3, r1
 801c14c:	4620      	mov	r0, r4
 801c14e:	4629      	mov	r1, r5
 801c150:	f7e4 f81c 	bl	800018c <__adddf3>
 801c154:	f20f 43c4 	addw	r3, pc, #1220	; 0x4c4
 801c158:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c15c:	4604      	mov	r4, r0
 801c15e:	460d      	mov	r5, r1
 801c160:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801c164:	f7e4 f9c8 	bl	80004f8 <__aeabi_dmul>
 801c168:	4602      	mov	r2, r0
 801c16a:	460b      	mov	r3, r1
 801c16c:	4620      	mov	r0, r4
 801c16e:	4629      	mov	r1, r5
 801c170:	f7e4 f80a 	bl	8000188 <__aeabi_dsub>
 801c174:	f20f 43ac 	addw	r3, pc, #1196	; 0x4ac
 801c178:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c17c:	4604      	mov	r4, r0
 801c17e:	460d      	mov	r5, r1
 801c180:	e9db 01b8 	ldrd	r0, r1, [fp, #736]	; 0x2e0
 801c184:	f7e4 f9b8 	bl	80004f8 <__aeabi_dmul>
 801c188:	4602      	mov	r2, r0
 801c18a:	460b      	mov	r3, r1
 801c18c:	4620      	mov	r0, r4
 801c18e:	4629      	mov	r1, r5
 801c190:	f7e3 fffa 	bl	8000188 <__aeabi_dsub>
 801c194:	f20f 4374 	addw	r3, pc, #1140	; 0x474
 801c198:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c19c:	4604      	mov	r4, r0
 801c19e:	460d      	mov	r5, r1
 801c1a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801c1a4:	f7e4 f9a8 	bl	80004f8 <__aeabi_dmul>
 801c1a8:	4602      	mov	r2, r0
 801c1aa:	460b      	mov	r3, r1
 801c1ac:	4620      	mov	r0, r4
 801c1ae:	4629      	mov	r1, r5
 801c1b0:	f7e3 ffec 	bl	800018c <__adddf3>
 801c1b4:	ed9d 7b04 	vldr	d7, [sp, #16]
 801c1b8:	ed8b 7baa 	vstr	d7, [fp, #680]	; 0x2a8
 801c1bc:	ed9d 7b0c 	vldr	d7, [sp, #48]	; 0x30
 801c1c0:	ed8b 7bac 	vstr	d7, [fp, #688]	; 0x2b0
 801c1c4:	ed9d 7b08 	vldr	d7, [sp, #32]
 801c1c8:	ed8b 7bb6 	vstr	d7, [fp, #728]	; 0x2d8
 801c1cc:	ed9d 7b00 	vldr	d7, [sp]
 801c1d0:	ed8b 7ba6 	vstr	d7, [fp, #664]	; 0x298
 801c1d4:	ed9d 7b06 	vldr	d7, [sp, #24]
 801c1d8:	ed8b 7ba8 	vstr	d7, [fp, #672]	; 0x2a0
 801c1dc:	ed9d 7b0e 	vldr	d7, [sp, #56]	; 0x38
 801c1e0:	4604      	mov	r4, r0
 801c1e2:	460d      	mov	r5, r1
 801c1e4:	4640      	mov	r0, r8
 801c1e6:	4622      	mov	r2, r4
 801c1e8:	f029 4100 	bic.w	r1, r9, #2147483648	; 0x80000000
 801c1ec:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801c1f0:	e9cb 89b2 	strd	r8, r9, [fp, #712]	; 0x2c8
 801c1f4:	ed8b 7bb8 	vstr	d7, [fp, #736]	; 0x2e0
 801c1f8:	e9cb 45b4 	strd	r4, r5, [fp, #720]	; 0x2d0
 801c1fc:	f7e4 fc0c 	bl	8000a18 <__aeabi_dcmpgt>
 801c200:	b108      	cbz	r0, 801c206 <MotionGR_Update+0x2ce>
 801c202:	4644      	mov	r4, r8
 801c204:	464d      	mov	r5, r9
 801c206:	4629      	mov	r1, r5
 801c208:	4620      	mov	r0, r4
 801c20a:	f7e4 fc6d 	bl	8000ae8 <__aeabi_d2f>
 801c20e:	ee07 0a90 	vmov	s15, r0
 801c212:	eef0 7ae7 	vabs.f32	s15, s15
 801c216:	ee17 0a90 	vmov	r0, s15
 801c21a:	f7e4 f915 	bl	8000448 <__aeabi_f2d>
 801c21e:	f20f 430c 	addw	r3, pc, #1036	; 0x40c
 801c222:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c226:	4680      	mov	r8, r0
 801c228:	4689      	mov	r9, r1
 801c22a:	f7e4 fbeb 	bl	8000a04 <__aeabi_dcmpge>
 801c22e:	b110      	cbz	r0, 801c236 <MotionGR_Update+0x2fe>
 801c230:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c232:	f8cb 328c 	str.w	r3, [fp, #652]	; 0x28c
 801c236:	2f00      	cmp	r7, #0
 801c238:	f340 86b6 	ble.w	801cfa8 <MotionGR_Update+0x1070>
 801c23c:	3f01      	subs	r7, #1
 801c23e:	2e02      	cmp	r6, #2
 801c240:	f8cb 7294 	str.w	r7, [fp, #660]	; 0x294
 801c244:	f001 83d2 	beq.w	801d9ec <MotionGR_Update+0x1ab4>
 801c248:	2e01      	cmp	r6, #1
 801c24a:	f042 8017 	bne.w	801e27c <MotionGR_Update+0x2344>
 801c24e:	e9db 239c 	ldrd	r2, r3, [fp, #624]	; 0x270
 801c252:	4620      	mov	r0, r4
 801c254:	4629      	mov	r1, r5
 801c256:	f7e4 f94f 	bl	80004f8 <__aeabi_dmul>
 801c25a:	2200      	movs	r2, #0
 801c25c:	2300      	movs	r3, #0
 801c25e:	f7e4 fbbd 	bl	80009dc <__aeabi_dcmplt>
 801c262:	2800      	cmp	r0, #0
 801c264:	f041 87c1 	bne.w	801e1ea <MotionGR_Update+0x22b2>
 801c268:	f8db 6284 	ldr.w	r6, [fp, #644]	; 0x284
 801c26c:	f8db 0280 	ldr.w	r0, [fp, #640]	; 0x280
 801c270:	4622      	mov	r2, r4
 801c272:	f026 4100 	bic.w	r1, r6, #2147483648	; 0x80000000
 801c276:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801c27a:	f7e4 fbaf 	bl	80009dc <__aeabi_dcmplt>
 801c27e:	2800      	cmp	r0, #0
 801c280:	f001 85ec 	beq.w	801de5c <MotionGR_Update+0x1f24>
 801c284:	e9cb 45a0 	strd	r4, r5, [fp, #640]	; 0x280
 801c288:	2300      	movs	r3, #0
 801c28a:	9348      	str	r3, [sp, #288]	; 0x120
 801c28c:	2601      	movs	r6, #1
 801c28e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c290:	f8cb 6014 	str.w	r6, [fp, #20]
 801c294:	2b01      	cmp	r3, #1
 801c296:	e9cb 459c 	strd	r4, r5, [fp, #624]	; 0x270
 801c29a:	f001 81f4 	beq.w	801d686 <MotionGR_Update+0x174e>
 801c29e:	ed9b 7bc0 	vldr	d7, [fp, #768]	; 0x300
 801c2a2:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
 801c2a6:	ed9b 7bc2 	vldr	d7, [fp, #776]	; 0x308
 801c2aa:	ed8d 7b1e 	vstr	d7, [sp, #120]	; 0x78
 801c2ae:	ed9b 7bc4 	vldr	d7, [fp, #784]	; 0x310
 801c2b2:	ed8d 7b20 	vstr	d7, [sp, #128]	; 0x80
 801c2b6:	ed9b 7bc6 	vldr	d7, [fp, #792]	; 0x318
 801c2ba:	f8db 0330 	ldr.w	r0, [fp, #816]	; 0x330
 801c2be:	4bd0      	ldr	r3, [pc, #832]	; (801c600 <MotionGR_Update+0x6c8>)
 801c2c0:	f8db 92f8 	ldr.w	r9, [fp, #760]	; 0x2f8
 801c2c4:	9004      	str	r0, [sp, #16]
 801c2c6:	ed8d 7b22 	vstr	d7, [sp, #136]	; 0x88
 801c2ca:	ed9b 7bc8 	vldr	d7, [fp, #800]	; 0x320
 801c2ce:	1c42      	adds	r2, r0, #1
 801c2d0:	fb83 1302 	smull	r1, r3, r3, r2
 801c2d4:	17d1      	asrs	r1, r2, #31
 801c2d6:	ebc1 03e3 	rsb	r3, r1, r3, asr #3
 801c2da:	ed8d 7b24 	vstr	d7, [sp, #144]	; 0x90
 801c2de:	ed9b 7bca 	vldr	d7, [fp, #808]	; 0x328
 801c2e2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801c2e6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801c2ea:	1ad3      	subs	r3, r2, r3
 801c2ec:	ea4f 0a40 	mov.w	sl, r0, lsl #1
 801c2f0:	ed8d 7b1a 	vstr	d7, [sp, #104]	; 0x68
 801c2f4:	9327      	str	r3, [sp, #156]	; 0x9c
 801c2f6:	f10a 0301 	add.w	r3, sl, #1
 801c2fa:	9328      	str	r3, [sp, #160]	; 0xa0
 801c2fc:	f8df 8334 	ldr.w	r8, [pc, #820]	; 801c634 <MotionGR_Update+0x6fc>
 801c300:	a3b5      	add	r3, pc, #724	; (adr r3, 801c5d8 <MotionGR_Update+0x6a0>)
 801c302:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c306:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c30a:	f7e4 f8f5 	bl	80004f8 <__aeabi_dmul>
 801c30e:	ed98 7b00 	vldr	d7, [r8]
 801c312:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801c316:	ed98 7b0c 	vldr	d7, [r8, #48]	; 0x30
 801c31a:	e9cd 0134 	strd	r0, r1, [sp, #208]	; 0xd0
 801c31e:	a3ae      	add	r3, pc, #696	; (adr r3, 801c5d8 <MotionGR_Update+0x6a0>)
 801c320:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c324:	e9d8 0106 	ldrd	r0, r1, [r8, #24]
 801c328:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 801c32c:	f7e4 f8e4 	bl	80004f8 <__aeabi_dmul>
 801c330:	a3ab      	add	r3, pc, #684	; (adr r3, 801c5e0 <MotionGR_Update+0x6a8>)
 801c332:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c336:	4604      	mov	r4, r0
 801c338:	460d      	mov	r5, r1
 801c33a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801c33e:	f7e4 f8db 	bl	80004f8 <__aeabi_dmul>
 801c342:	4602      	mov	r2, r0
 801c344:	460b      	mov	r3, r1
 801c346:	4620      	mov	r0, r4
 801c348:	4629      	mov	r1, r5
 801c34a:	f7e3 ff1f 	bl	800018c <__adddf3>
 801c34e:	a3a6      	add	r3, pc, #664	; (adr r3, 801c5e8 <MotionGR_Update+0x6b0>)
 801c350:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c354:	4604      	mov	r4, r0
 801c356:	460d      	mov	r5, r1
 801c358:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801c35c:	f7e4 f8cc 	bl	80004f8 <__aeabi_dmul>
 801c360:	4602      	mov	r2, r0
 801c362:	460b      	mov	r3, r1
 801c364:	4620      	mov	r0, r4
 801c366:	4629      	mov	r1, r5
 801c368:	f7e3 ff0e 	bl	8000188 <__aeabi_dsub>
 801c36c:	a3a0      	add	r3, pc, #640	; (adr r3, 801c5f0 <MotionGR_Update+0x6b8>)
 801c36e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c372:	4604      	mov	r4, r0
 801c374:	460d      	mov	r5, r1
 801c376:	e9d8 0112 	ldrd	r0, r1, [r8, #72]	; 0x48
 801c37a:	f7e4 f8bd 	bl	80004f8 <__aeabi_dmul>
 801c37e:	4602      	mov	r2, r0
 801c380:	460b      	mov	r3, r1
 801c382:	4620      	mov	r0, r4
 801c384:	4629      	mov	r1, r5
 801c386:	f7e3 feff 	bl	8000188 <__aeabi_dsub>
 801c38a:	e9dd 2334 	ldrd	r2, r3, [sp, #208]	; 0xd0
 801c38e:	f7e3 fefd 	bl	800018c <__adddf3>
 801c392:	a391      	add	r3, pc, #580	; (adr r3, 801c5d8 <MotionGR_Update+0x6a0>)
 801c394:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c398:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801c39c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c3a0:	f7e4 f8aa 	bl	80004f8 <__aeabi_dmul>
 801c3a4:	ed98 7b02 	vldr	d7, [r8, #8]
 801c3a8:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 801c3ac:	ed98 7b0e 	vldr	d7, [r8, #56]	; 0x38
 801c3b0:	e9cd 0136 	strd	r0, r1, [sp, #216]	; 0xd8
 801c3b4:	a388      	add	r3, pc, #544	; (adr r3, 801c5d8 <MotionGR_Update+0x6a0>)
 801c3b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c3ba:	e9d8 0108 	ldrd	r0, r1, [r8, #32]
 801c3be:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 801c3c2:	f7e4 f899 	bl	80004f8 <__aeabi_dmul>
 801c3c6:	a386      	add	r3, pc, #536	; (adr r3, 801c5e0 <MotionGR_Update+0x6a8>)
 801c3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c3cc:	4604      	mov	r4, r0
 801c3ce:	460d      	mov	r5, r1
 801c3d0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801c3d4:	f7e4 f890 	bl	80004f8 <__aeabi_dmul>
 801c3d8:	4602      	mov	r2, r0
 801c3da:	460b      	mov	r3, r1
 801c3dc:	4620      	mov	r0, r4
 801c3de:	4629      	mov	r1, r5
 801c3e0:	f7e3 fed4 	bl	800018c <__adddf3>
 801c3e4:	a380      	add	r3, pc, #512	; (adr r3, 801c5e8 <MotionGR_Update+0x6b0>)
 801c3e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c3ea:	4604      	mov	r4, r0
 801c3ec:	460d      	mov	r5, r1
 801c3ee:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 801c3f2:	f7e4 f881 	bl	80004f8 <__aeabi_dmul>
 801c3f6:	4602      	mov	r2, r0
 801c3f8:	460b      	mov	r3, r1
 801c3fa:	4620      	mov	r0, r4
 801c3fc:	4629      	mov	r1, r5
 801c3fe:	f7e3 fec3 	bl	8000188 <__aeabi_dsub>
 801c402:	a37b      	add	r3, pc, #492	; (adr r3, 801c5f0 <MotionGR_Update+0x6b8>)
 801c404:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c408:	4604      	mov	r4, r0
 801c40a:	460d      	mov	r5, r1
 801c40c:	e9d8 0114 	ldrd	r0, r1, [r8, #80]	; 0x50
 801c410:	f7e4 f872 	bl	80004f8 <__aeabi_dmul>
 801c414:	4602      	mov	r2, r0
 801c416:	460b      	mov	r3, r1
 801c418:	4620      	mov	r0, r4
 801c41a:	4629      	mov	r1, r5
 801c41c:	f7e3 feb4 	bl	8000188 <__aeabi_dsub>
 801c420:	e9dd 2336 	ldrd	r2, r3, [sp, #216]	; 0xd8
 801c424:	f7e3 feb2 	bl	800018c <__adddf3>
 801c428:	a36b      	add	r3, pc, #428	; (adr r3, 801c5d8 <MotionGR_Update+0x6a0>)
 801c42a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c42e:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
 801c432:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801c436:	f7e4 f85f 	bl	80004f8 <__aeabi_dmul>
 801c43a:	ed98 7b04 	vldr	d7, [r8, #16]
 801c43e:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 801c442:	ed98 7b10 	vldr	d7, [r8, #64]	; 0x40
 801c446:	e9cd 0138 	strd	r0, r1, [sp, #224]	; 0xe0
 801c44a:	a363      	add	r3, pc, #396	; (adr r3, 801c5d8 <MotionGR_Update+0x6a0>)
 801c44c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c450:	e9d8 010a 	ldrd	r0, r1, [r8, #40]	; 0x28
 801c454:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
 801c458:	f7e4 f84e 	bl	80004f8 <__aeabi_dmul>
 801c45c:	a360      	add	r3, pc, #384	; (adr r3, 801c5e0 <MotionGR_Update+0x6a8>)
 801c45e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c462:	4604      	mov	r4, r0
 801c464:	460d      	mov	r5, r1
 801c466:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 801c46a:	f7e4 f845 	bl	80004f8 <__aeabi_dmul>
 801c46e:	4602      	mov	r2, r0
 801c470:	460b      	mov	r3, r1
 801c472:	4620      	mov	r0, r4
 801c474:	4629      	mov	r1, r5
 801c476:	f7e3 fe89 	bl	800018c <__adddf3>
 801c47a:	a35b      	add	r3, pc, #364	; (adr r3, 801c5e8 <MotionGR_Update+0x6b0>)
 801c47c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c480:	4604      	mov	r4, r0
 801c482:	460d      	mov	r5, r1
 801c484:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 801c488:	f7e4 f836 	bl	80004f8 <__aeabi_dmul>
 801c48c:	4602      	mov	r2, r0
 801c48e:	460b      	mov	r3, r1
 801c490:	4620      	mov	r0, r4
 801c492:	4629      	mov	r1, r5
 801c494:	f7e3 fe78 	bl	8000188 <__aeabi_dsub>
 801c498:	a355      	add	r3, pc, #340	; (adr r3, 801c5f0 <MotionGR_Update+0x6b8>)
 801c49a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c49e:	4604      	mov	r4, r0
 801c4a0:	460d      	mov	r5, r1
 801c4a2:	e9d8 0116 	ldrd	r0, r1, [r8, #88]	; 0x58
 801c4a6:	f7e4 f827 	bl	80004f8 <__aeabi_dmul>
 801c4aa:	4602      	mov	r2, r0
 801c4ac:	460b      	mov	r3, r1
 801c4ae:	4620      	mov	r0, r4
 801c4b0:	4629      	mov	r1, r5
 801c4b2:	f7e3 fe69 	bl	8000188 <__aeabi_dsub>
 801c4b6:	e9dd 2338 	ldrd	r2, r3, [sp, #224]	; 0xe0
 801c4ba:	f7e3 fe67 	bl	800018c <__adddf3>
 801c4be:	ed9d 7b0e 	vldr	d7, [sp, #56]	; 0x38
 801c4c2:	ed88 7b12 	vstr	d7, [r8, #72]	; 0x48
 801c4c6:	ed9d 7b12 	vldr	d7, [sp, #72]	; 0x48
 801c4ca:	ed88 7b14 	vstr	d7, [r8, #80]	; 0x50
 801c4ce:	ed9d 7b16 	vldr	d7, [sp, #88]	; 0x58
 801c4d2:	ed88 7b16 	vstr	d7, [r8, #88]	; 0x58
 801c4d6:	ed9d 7b0c 	vldr	d7, [sp, #48]	; 0x30
 801c4da:	ed88 7b06 	vstr	d7, [r8, #24]
 801c4de:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
 801c4e2:	4604      	mov	r4, r0
 801c4e4:	460d      	mov	r5, r1
 801c4e6:	ed88 7b08 	vstr	d7, [r8, #32]
 801c4ea:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801c4ee:	ed9d 7b18 	vldr	d7, [sp, #96]	; 0x60
 801c4f2:	e9c8 010c 	strd	r0, r1, [r8, #48]	; 0x30
 801c4f6:	ed88 7b0e 	vstr	d7, [r8, #56]	; 0x38
 801c4fa:	ed9d 7b14 	vldr	d7, [sp, #80]	; 0x50
 801c4fe:	ed88 7b0a 	vstr	d7, [r8, #40]	; 0x28
 801c502:	ed9d 7b00 	vldr	d7, [sp]
 801c506:	ed88 7b00 	vstr	d7, [r8]
 801c50a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801c50e:	ed88 7b02 	vstr	d7, [r8, #8]
 801c512:	ed9d 7b06 	vldr	d7, [sp, #24]
 801c516:	e9c8 4510 	strd	r4, r5, [r8, #64]	; 0x40
 801c51a:	ed88 7b04 	vstr	d7, [r8, #16]
 801c51e:	4602      	mov	r2, r0
 801c520:	460b      	mov	r3, r1
 801c522:	f7e3 ffe9 	bl	80004f8 <__aeabi_dmul>
 801c526:	4622      	mov	r2, r4
 801c528:	4606      	mov	r6, r0
 801c52a:	460f      	mov	r7, r1
 801c52c:	462b      	mov	r3, r5
 801c52e:	4620      	mov	r0, r4
 801c530:	4629      	mov	r1, r5
 801c532:	f7e3 ffe1 	bl	80004f8 <__aeabi_dmul>
 801c536:	4602      	mov	r2, r0
 801c538:	460b      	mov	r3, r1
 801c53a:	4630      	mov	r0, r6
 801c53c:	4639      	mov	r1, r7
 801c53e:	f7e3 fe25 	bl	800018c <__adddf3>
 801c542:	f004 fe29 	bl	8021198 <sqrt>
 801c546:	4602      	mov	r2, r0
 801c548:	460b      	mov	r3, r1
 801c54a:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 801c54e:	f7e4 f8fd 	bl	800074c <__aeabi_ddiv>
 801c552:	f7e4 fac9 	bl	8000ae8 <__aeabi_d2f>
 801c556:	f004 fc2f 	bl	8020db8 <atanf>
 801c55a:	f7e3 ff75 	bl	8000448 <__aeabi_f2d>
 801c55e:	a326      	add	r3, pc, #152	; (adr r3, 801c5f8 <MotionGR_Update+0x6c0>)
 801c560:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c564:	f7e3 ffc8 	bl	80004f8 <__aeabi_dmul>
 801c568:	4622      	mov	r2, r4
 801c56a:	462b      	mov	r3, r5
 801c56c:	4606      	mov	r6, r0
 801c56e:	460f      	mov	r7, r1
 801c570:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801c574:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
 801c578:	f7e4 f8e8 	bl	800074c <__aeabi_ddiv>
 801c57c:	f004 f9d4 	bl	8020928 <atan>
 801c580:	f7e4 fab2 	bl	8000ae8 <__aeabi_d2f>
 801c584:	ee07 0a90 	vmov	s15, r0
 801c588:	eef0 7ae7 	vabs.f32	s15, s15
 801c58c:	ee17 0a90 	vmov	r0, s15
 801c590:	f7e3 ff5a 	bl	8000448 <__aeabi_f2d>
 801c594:	a318      	add	r3, pc, #96	; (adr r3, 801c5f8 <MotionGR_Update+0x6c0>)
 801c596:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c59a:	f7e3 ffad 	bl	80004f8 <__aeabi_dmul>
 801c59e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801c5a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c5a6:	4602      	mov	r2, r0
 801c5a8:	460b      	mov	r3, r1
 801c5aa:	f7e3 ffa5 	bl	80004f8 <__aeabi_dmul>
 801c5ae:	4604      	mov	r4, r0
 801c5b0:	460d      	mov	r5, r1
 801c5b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c5b6:	4602      	mov	r2, r0
 801c5b8:	460b      	mov	r3, r1
 801c5ba:	f7e3 ff9d 	bl	80004f8 <__aeabi_dmul>
 801c5be:	4632      	mov	r2, r6
 801c5c0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801c5c4:	463b      	mov	r3, r7
 801c5c6:	4630      	mov	r0, r6
 801c5c8:	4639      	mov	r1, r7
 801c5ca:	f7e3 ff95 	bl	80004f8 <__aeabi_dmul>
 801c5ce:	f1b9 0f01 	cmp.w	r9, #1
 801c5d2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 801c5d6:	e02f      	b.n	801c638 <MotionGR_Update+0x700>
 801c5d8:	b18a26fa 	.word	0xb18a26fa
 801c5dc:	3f57ed02 	.word	0x3f57ed02
 801c5e0:	b18a26fa 	.word	0xb18a26fa
 801c5e4:	3f67ed02 	.word	0x3f67ed02
 801c5e8:	c010fc75 	.word	0xc010fc75
 801c5ec:	bffe397a 	.word	0xbffe397a
 801c5f0:	85850d65 	.word	0x85850d65
 801c5f4:	3feca2cf 	.word	0x3feca2cf
 801c5f8:	1a63c1f5 	.word	0x1a63c1f5
 801c5fc:	404ca5dc 	.word	0x404ca5dc
 801c600:	51eb851f 	.word	0x51eb851f
 801c604:	d0fac687 	.word	0xd0fac687
 801c608:	bfba1f58 	.word	0xbfba1f58
 801c60c:	9355de47 	.word	0x9355de47
 801c610:	3fef4c06 	.word	0x3fef4c06
 801c614:	9355de47 	.word	0x9355de47
 801c618:	bfff4c06 	.word	0xbfff4c06
 801c61c:	68aec1d8 	.word	0x68aec1d8
 801c620:	bfff4a0c 	.word	0xbfff4a0c
 801c624:	7bf9f584 	.word	0x7bf9f584
 801c628:	3fee9c01 	.word	0x3fee9c01
 801c62c:	9999999a 	.word	0x9999999a
 801c630:	3fd99999 	.word	0x3fd99999
 801c634:	20005e28 	.word	0x20005e28
 801c638:	f000 8616 	beq.w	801d268 <MotionGR_Update+0x1330>
 801c63c:	e9dd 8900 	ldrd	r8, r9, [sp]
 801c640:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 801c644:	4640      	mov	r0, r8
 801c646:	4649      	mov	r1, r9
 801c648:	f7e3 fda0 	bl	800018c <__adddf3>
 801c64c:	4606      	mov	r6, r0
 801c64e:	460f      	mov	r7, r1
 801c650:	ec47 6b17 	vmov	d7, r6, r7
 801c654:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
 801c658:	ed8b 7bc0 	vstr	d7, [fp, #768]	; 0x300
 801c65c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c660:	e9cd 6716 	strd	r6, r7, [sp, #88]	; 0x58
 801c664:	f7e3 fd92 	bl	800018c <__adddf3>
 801c668:	4606      	mov	r6, r0
 801c66a:	460f      	mov	r7, r1
 801c66c:	ec47 6b17 	vmov	d7, r6, r7
 801c670:	4622      	mov	r2, r4
 801c672:	462b      	mov	r3, r5
 801c674:	ed8b 7bc2 	vstr	d7, [fp, #776]	; 0x308
 801c678:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 801c67c:	e9cd 671c 	strd	r6, r7, [sp, #112]	; 0x70
 801c680:	f7e3 fd84 	bl	800018c <__adddf3>
 801c684:	4604      	mov	r4, r0
 801c686:	460d      	mov	r5, r1
 801c688:	ec45 4b17 	vmov	d7, r4, r5
 801c68c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801c690:	ed8b 7bc4 	vstr	d7, [fp, #784]	; 0x310
 801c694:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
 801c698:	e9cd 4518 	strd	r4, r5, [sp, #96]	; 0x60
 801c69c:	f7e3 fd76 	bl	800018c <__adddf3>
 801c6a0:	4604      	mov	r4, r0
 801c6a2:	460d      	mov	r5, r1
 801c6a4:	ec45 4b17 	vmov	d7, r4, r5
 801c6a8:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	; 0x90
 801c6ac:	ed8b 7bc6 	vstr	d7, [fp, #792]	; 0x318
 801c6b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801c6b4:	e9cd 4514 	strd	r4, r5, [sp, #80]	; 0x50
 801c6b8:	f7e3 fd68 	bl	800018c <__adddf3>
 801c6bc:	4604      	mov	r4, r0
 801c6be:	460d      	mov	r5, r1
 801c6c0:	ec45 4b17 	vmov	d7, r4, r5
 801c6c4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801c6c8:	ed8b 7bc8 	vstr	d7, [fp, #800]	; 0x320
 801c6cc:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 801c6d0:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
 801c6d4:	f7e3 fd5a 	bl	800018c <__adddf3>
 801c6d8:	f8db 34c8 	ldr.w	r3, [fp, #1224]	; 0x4c8
 801c6dc:	4604      	mov	r4, r0
 801c6de:	460d      	mov	r5, r1
 801c6e0:	ec45 4b17 	vmov	d7, r4, r5
 801c6e4:	eb0b 1303 	add.w	r3, fp, r3, lsl #4
 801c6e8:	e9d3 23ce 	ldrd	r2, r3, [r3, #824]	; 0x338
 801c6ec:	4640      	mov	r0, r8
 801c6ee:	4649      	mov	r1, r9
 801c6f0:	ed8b 7bca 	vstr	d7, [fp, #808]	; 0x328
 801c6f4:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
 801c6f8:	f7e4 f98e 	bl	8000a18 <__aeabi_dcmpgt>
 801c6fc:	b110      	cbz	r0, 801c704 <MotionGR_Update+0x7cc>
 801c6fe:	9b04      	ldr	r3, [sp, #16]
 801c700:	f8cb 34c8 	str.w	r3, [fp, #1224]	; 0x4c8
 801c704:	f8db 34cc 	ldr.w	r3, [fp, #1228]	; 0x4cc
 801c708:	eb0b 1303 	add.w	r3, fp, r3, lsl #4
 801c70c:	e9d3 23ce 	ldrd	r2, r3, [r3, #824]	; 0x338
 801c710:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c714:	f7e4 f962 	bl	80009dc <__aeabi_dcmplt>
 801c718:	b110      	cbz	r0, 801c720 <MotionGR_Update+0x7e8>
 801c71a:	9b04      	ldr	r3, [sp, #16]
 801c71c:	f8cb 34cc 	str.w	r3, [fp, #1228]	; 0x4cc
 801c720:	f8db 34d0 	ldr.w	r3, [fp, #1232]	; 0x4d0
 801c724:	eb0b 1303 	add.w	r3, fp, r3, lsl #4
 801c728:	e9d3 23d0 	ldrd	r2, r3, [r3, #832]	; 0x340
 801c72c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c730:	f7e4 f972 	bl	8000a18 <__aeabi_dcmpgt>
 801c734:	b110      	cbz	r0, 801c73c <MotionGR_Update+0x804>
 801c736:	9b04      	ldr	r3, [sp, #16]
 801c738:	f8cb 34d0 	str.w	r3, [fp, #1232]	; 0x4d0
 801c73c:	f8db 34d4 	ldr.w	r3, [fp, #1236]	; 0x4d4
 801c740:	eb0b 1303 	add.w	r3, fp, r3, lsl #4
 801c744:	e9d3 23d0 	ldrd	r2, r3, [r3, #832]	; 0x340
 801c748:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c74c:	f7e4 f946 	bl	80009dc <__aeabi_dcmplt>
 801c750:	b110      	cbz	r0, 801c758 <MotionGR_Update+0x820>
 801c752:	9b04      	ldr	r3, [sp, #16]
 801c754:	f8cb 34d4 	str.w	r3, [fp, #1236]	; 0x4d4
 801c758:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801c75a:	f8cb 3330 	str.w	r3, [fp, #816]	; 0x330
 801c75e:	ed9d 7b00 	vldr	d7, [sp]
 801c762:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801c766:	eb0b 0003 	add.w	r0, fp, r3
 801c76a:	49d1      	ldr	r1, [pc, #836]	; (801cab0 <MotionGR_Update+0xb78>)
 801c76c:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801c76e:	ed80 7bce 	vstr	d7, [r0, #824]	; 0x338
 801c772:	ed9d 7b0c 	vldr	d7, [sp, #48]	; 0x30
 801c776:	440b      	add	r3, r1
 801c778:	ed83 7b00 	vstr	d7, [r3]
 801c77c:	ed9d 7b02 	vldr	d7, [sp, #8]
 801c780:	00d2      	lsls	r2, r2, #3
 801c782:	4411      	add	r1, r2
 801c784:	445a      	add	r2, fp
 801c786:	ed82 7bce 	vstr	d7, [r2, #824]	; 0x338
 801c78a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c78c:	ed9d 7b0e 	vldr	d7, [sp, #56]	; 0x38
 801c790:	2b19      	cmp	r3, #25
 801c792:	ed81 7b00 	vstr	d7, [r1]
 801c796:	f001 8593 	beq.w	801e2c0 <MotionGR_Update+0x2388>
 801c79a:	2300      	movs	r3, #0
 801c79c:	9349      	str	r3, [sp, #292]	; 0x124
 801c79e:	f8db 3010 	ldr.w	r3, [fp, #16]
 801c7a2:	933a      	str	r3, [sp, #232]	; 0xe8
 801c7a4:	2b01      	cmp	r3, #1
 801c7a6:	f8df 930c 	ldr.w	r9, [pc, #780]	; 801cab4 <MotionGR_Update+0xb7c>
 801c7aa:	f001 80bd 	beq.w	801d928 <MotionGR_Update+0x19f0>
 801c7ae:	f109 0308 	add.w	r3, r9, #8
 801c7b2:	9316      	str	r3, [sp, #88]	; 0x58
 801c7b4:	f109 0310 	add.w	r3, r9, #16
 801c7b8:	9322      	str	r3, [sp, #136]	; 0x88
 801c7ba:	f109 0318 	add.w	r3, r9, #24
 801c7be:	9324      	str	r3, [sp, #144]	; 0x90
 801c7c0:	f109 0320 	add.w	r3, r9, #32
 801c7c4:	9327      	str	r3, [sp, #156]	; 0x9c
 801c7c6:	f109 0328 	add.w	r3, r9, #40	; 0x28
 801c7ca:	9328      	str	r3, [sp, #160]	; 0xa0
 801c7cc:	f109 0330 	add.w	r3, r9, #48	; 0x30
 801c7d0:	9329      	str	r3, [sp, #164]	; 0xa4
 801c7d2:	f109 0338 	add.w	r3, r9, #56	; 0x38
 801c7d6:	9318      	str	r3, [sp, #96]	; 0x60
 801c7d8:	f109 0340 	add.w	r3, r9, #64	; 0x40
 801c7dc:	931a      	str	r3, [sp, #104]	; 0x68
 801c7de:	f109 0348 	add.w	r3, r9, #72	; 0x48
 801c7e2:	931c      	str	r3, [sp, #112]	; 0x70
 801c7e4:	f109 0350 	add.w	r3, r9, #80	; 0x50
 801c7e8:	931e      	str	r3, [sp, #120]	; 0x78
 801c7ea:	f109 0358 	add.w	r3, r9, #88	; 0x58
 801c7ee:	9320      	str	r3, [sp, #128]	; 0x80
 801c7f0:	f8df 82c4 	ldr.w	r8, [pc, #708]	; 801cab8 <MotionGR_Update+0xb80>
 801c7f4:	ed98 7b00 	vldr	d7, [r8]
 801c7f8:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 801c7fc:	ed98 7b06 	vldr	d7, [r8, #24]
 801c800:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801c804:	ed98 7b0c 	vldr	d7, [r8, #48]	; 0x30
 801c808:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801c80c:	a398      	add	r3, pc, #608	; (adr r3, 801ca70 <MotionGR_Update+0xb38>)
 801c80e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c812:	ed8d 7b2a 	vstr	d7, [sp, #168]	; 0xa8
 801c816:	f7e3 fe6f 	bl	80004f8 <__aeabi_dmul>
 801c81a:	a397      	add	r3, pc, #604	; (adr r3, 801ca78 <MotionGR_Update+0xb40>)
 801c81c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c820:	4606      	mov	r6, r0
 801c822:	460f      	mov	r7, r1
 801c824:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801c828:	f7e3 fe66 	bl	80004f8 <__aeabi_dmul>
 801c82c:	4602      	mov	r2, r0
 801c82e:	460b      	mov	r3, r1
 801c830:	4630      	mov	r0, r6
 801c832:	4639      	mov	r1, r7
 801c834:	f7e3 fcaa 	bl	800018c <__adddf3>
 801c838:	a391      	add	r3, pc, #580	; (adr r3, 801ca80 <MotionGR_Update+0xb48>)
 801c83a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c83e:	4606      	mov	r6, r0
 801c840:	460f      	mov	r7, r1
 801c842:	e9dd 012a 	ldrd	r0, r1, [sp, #168]	; 0xa8
 801c846:	f7e3 fe57 	bl	80004f8 <__aeabi_dmul>
 801c84a:	4602      	mov	r2, r0
 801c84c:	460b      	mov	r3, r1
 801c84e:	4630      	mov	r0, r6
 801c850:	4639      	mov	r1, r7
 801c852:	f7e3 fc99 	bl	8000188 <__aeabi_dsub>
 801c856:	a38c      	add	r3, pc, #560	; (adr r3, 801ca88 <MotionGR_Update+0xb50>)
 801c858:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c85c:	4606      	mov	r6, r0
 801c85e:	460f      	mov	r7, r1
 801c860:	e9d8 0112 	ldrd	r0, r1, [r8, #72]	; 0x48
 801c864:	f7e3 fe48 	bl	80004f8 <__aeabi_dmul>
 801c868:	4602      	mov	r2, r0
 801c86a:	460b      	mov	r3, r1
 801c86c:	4630      	mov	r0, r6
 801c86e:	4639      	mov	r1, r7
 801c870:	f7e3 fc8a 	bl	8000188 <__aeabi_dsub>
 801c874:	a380      	add	r3, pc, #512	; (adr r3, 801ca78 <MotionGR_Update+0xb40>)
 801c876:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c87a:	4606      	mov	r6, r0
 801c87c:	460f      	mov	r7, r1
 801c87e:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c882:	f7e3 fe39 	bl	80004f8 <__aeabi_dmul>
 801c886:	4602      	mov	r2, r0
 801c888:	460b      	mov	r3, r1
 801c88a:	4630      	mov	r0, r6
 801c88c:	4639      	mov	r1, r7
 801c88e:	f7e3 fc7d 	bl	800018c <__adddf3>
 801c892:	ed98 7b02 	vldr	d7, [r8, #8]
 801c896:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 801c89a:	ed98 7b08 	vldr	d7, [r8, #32]
 801c89e:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 801c8a2:	ed98 7b0e 	vldr	d7, [r8, #56]	; 0x38
 801c8a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801c8aa:	a371      	add	r3, pc, #452	; (adr r3, 801ca70 <MotionGR_Update+0xb38>)
 801c8ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c8b0:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 801c8b4:	ed8d 7b2c 	vstr	d7, [sp, #176]	; 0xb0
 801c8b8:	f7e3 fe1e 	bl	80004f8 <__aeabi_dmul>
 801c8bc:	a36e      	add	r3, pc, #440	; (adr r3, 801ca78 <MotionGR_Update+0xb40>)
 801c8be:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c8c2:	4606      	mov	r6, r0
 801c8c4:	460f      	mov	r7, r1
 801c8c6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801c8ca:	f7e3 fe15 	bl	80004f8 <__aeabi_dmul>
 801c8ce:	4602      	mov	r2, r0
 801c8d0:	460b      	mov	r3, r1
 801c8d2:	4630      	mov	r0, r6
 801c8d4:	4639      	mov	r1, r7
 801c8d6:	f7e3 fc59 	bl	800018c <__adddf3>
 801c8da:	a369      	add	r3, pc, #420	; (adr r3, 801ca80 <MotionGR_Update+0xb48>)
 801c8dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c8e0:	4606      	mov	r6, r0
 801c8e2:	460f      	mov	r7, r1
 801c8e4:	e9dd 012c 	ldrd	r0, r1, [sp, #176]	; 0xb0
 801c8e8:	f7e3 fe06 	bl	80004f8 <__aeabi_dmul>
 801c8ec:	4602      	mov	r2, r0
 801c8ee:	460b      	mov	r3, r1
 801c8f0:	4630      	mov	r0, r6
 801c8f2:	4639      	mov	r1, r7
 801c8f4:	f7e3 fc48 	bl	8000188 <__aeabi_dsub>
 801c8f8:	a363      	add	r3, pc, #396	; (adr r3, 801ca88 <MotionGR_Update+0xb50>)
 801c8fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c8fe:	4606      	mov	r6, r0
 801c900:	460f      	mov	r7, r1
 801c902:	e9d8 0114 	ldrd	r0, r1, [r8, #80]	; 0x50
 801c906:	f7e3 fdf7 	bl	80004f8 <__aeabi_dmul>
 801c90a:	4602      	mov	r2, r0
 801c90c:	460b      	mov	r3, r1
 801c90e:	4630      	mov	r0, r6
 801c910:	4639      	mov	r1, r7
 801c912:	f7e3 fc39 	bl	8000188 <__aeabi_dsub>
 801c916:	a358      	add	r3, pc, #352	; (adr r3, 801ca78 <MotionGR_Update+0xb40>)
 801c918:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c91c:	4606      	mov	r6, r0
 801c91e:	460f      	mov	r7, r1
 801c920:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c924:	f7e3 fde8 	bl	80004f8 <__aeabi_dmul>
 801c928:	4602      	mov	r2, r0
 801c92a:	460b      	mov	r3, r1
 801c92c:	4630      	mov	r0, r6
 801c92e:	4639      	mov	r1, r7
 801c930:	f7e3 fc2c 	bl	800018c <__adddf3>
 801c934:	ed98 7b04 	vldr	d7, [r8, #16]
 801c938:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 801c93c:	ed98 7b0a 	vldr	d7, [r8, #40]	; 0x28
 801c940:	ed8d 7b2e 	vstr	d7, [sp, #184]	; 0xb8
 801c944:	ed98 7b10 	vldr	d7, [r8, #64]	; 0x40
 801c948:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801c94c:	a348      	add	r3, pc, #288	; (adr r3, 801ca70 <MotionGR_Update+0xb38>)
 801c94e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c952:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 801c956:	ed8d 7b30 	vstr	d7, [sp, #192]	; 0xc0
 801c95a:	f7e3 fdcd 	bl	80004f8 <__aeabi_dmul>
 801c95e:	a346      	add	r3, pc, #280	; (adr r3, 801ca78 <MotionGR_Update+0xb40>)
 801c960:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c964:	4606      	mov	r6, r0
 801c966:	460f      	mov	r7, r1
 801c968:	e9dd 012e 	ldrd	r0, r1, [sp, #184]	; 0xb8
 801c96c:	f7e3 fdc4 	bl	80004f8 <__aeabi_dmul>
 801c970:	4602      	mov	r2, r0
 801c972:	460b      	mov	r3, r1
 801c974:	4630      	mov	r0, r6
 801c976:	4639      	mov	r1, r7
 801c978:	f7e3 fc08 	bl	800018c <__adddf3>
 801c97c:	a340      	add	r3, pc, #256	; (adr r3, 801ca80 <MotionGR_Update+0xb48>)
 801c97e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c982:	4606      	mov	r6, r0
 801c984:	460f      	mov	r7, r1
 801c986:	e9dd 0130 	ldrd	r0, r1, [sp, #192]	; 0xc0
 801c98a:	f7e3 fdb5 	bl	80004f8 <__aeabi_dmul>
 801c98e:	4602      	mov	r2, r0
 801c990:	460b      	mov	r3, r1
 801c992:	4630      	mov	r0, r6
 801c994:	4639      	mov	r1, r7
 801c996:	f7e3 fbf7 	bl	8000188 <__aeabi_dsub>
 801c99a:	a33b      	add	r3, pc, #236	; (adr r3, 801ca88 <MotionGR_Update+0xb50>)
 801c99c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c9a0:	4606      	mov	r6, r0
 801c9a2:	460f      	mov	r7, r1
 801c9a4:	e9d8 0116 	ldrd	r0, r1, [r8, #88]	; 0x58
 801c9a8:	f7e3 fda6 	bl	80004f8 <__aeabi_dmul>
 801c9ac:	4602      	mov	r2, r0
 801c9ae:	460b      	mov	r3, r1
 801c9b0:	4630      	mov	r0, r6
 801c9b2:	4639      	mov	r1, r7
 801c9b4:	f7e3 fbe8 	bl	8000188 <__aeabi_dsub>
 801c9b8:	a32f      	add	r3, pc, #188	; (adr r3, 801ca78 <MotionGR_Update+0xb40>)
 801c9ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c9be:	4606      	mov	r6, r0
 801c9c0:	460f      	mov	r7, r1
 801c9c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801c9c6:	f7e3 fd97 	bl	80004f8 <__aeabi_dmul>
 801c9ca:	4602      	mov	r2, r0
 801c9cc:	460b      	mov	r3, r1
 801c9ce:	4630      	mov	r0, r6
 801c9d0:	4639      	mov	r1, r7
 801c9d2:	f7e3 fbdb 	bl	800018c <__adddf3>
 801c9d6:	ed98 7b18 	vldr	d7, [r8, #96]	; 0x60
 801c9da:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801c9de:	a32c      	add	r3, pc, #176	; (adr r3, 801ca90 <MotionGR_Update+0xb58>)
 801c9e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c9e4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801c9e8:	ed8d 7b32 	vstr	d7, [sp, #200]	; 0xc8
 801c9ec:	f7e3 fd84 	bl	80004f8 <__aeabi_dmul>
 801c9f0:	a329      	add	r3, pc, #164	; (adr r3, 801ca98 <MotionGR_Update+0xb60>)
 801c9f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c9f6:	4606      	mov	r6, r0
 801c9f8:	460f      	mov	r7, r1
 801c9fa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801c9fe:	f7e3 fd7b 	bl	80004f8 <__aeabi_dmul>
 801ca02:	4602      	mov	r2, r0
 801ca04:	460b      	mov	r3, r1
 801ca06:	4630      	mov	r0, r6
 801ca08:	4639      	mov	r1, r7
 801ca0a:	f7e3 fbbf 	bl	800018c <__adddf3>
 801ca0e:	a324      	add	r3, pc, #144	; (adr r3, 801caa0 <MotionGR_Update+0xb68>)
 801ca10:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca14:	4606      	mov	r6, r0
 801ca16:	460f      	mov	r7, r1
 801ca18:	e9dd 0132 	ldrd	r0, r1, [sp, #200]	; 0xc8
 801ca1c:	f7e3 fd6c 	bl	80004f8 <__aeabi_dmul>
 801ca20:	4602      	mov	r2, r0
 801ca22:	460b      	mov	r3, r1
 801ca24:	4630      	mov	r0, r6
 801ca26:	4639      	mov	r1, r7
 801ca28:	f7e3 fbae 	bl	8000188 <__aeabi_dsub>
 801ca2c:	a31e      	add	r3, pc, #120	; (adr r3, 801caa8 <MotionGR_Update+0xb70>)
 801ca2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca32:	4606      	mov	r6, r0
 801ca34:	460f      	mov	r7, r1
 801ca36:	e9d8 011e 	ldrd	r0, r1, [r8, #120]	; 0x78
 801ca3a:	f7e3 fd5d 	bl	80004f8 <__aeabi_dmul>
 801ca3e:	4602      	mov	r2, r0
 801ca40:	460b      	mov	r3, r1
 801ca42:	4630      	mov	r0, r6
 801ca44:	4639      	mov	r1, r7
 801ca46:	f7e3 fb9f 	bl	8000188 <__aeabi_dsub>
 801ca4a:	e9dd 2334 	ldrd	r2, r3, [sp, #208]	; 0xd0
 801ca4e:	f7e3 fb9d 	bl	800018c <__adddf3>
 801ca52:	ed98 7b1a 	vldr	d7, [r8, #104]	; 0x68
 801ca56:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801ca5a:	a30d      	add	r3, pc, #52	; (adr r3, 801ca90 <MotionGR_Update+0xb58>)
 801ca5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca60:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 801ca64:	ed8d 7b34 	vstr	d7, [sp, #208]	; 0xd0
 801ca68:	f7e3 fd46 	bl	80004f8 <__aeabi_dmul>
 801ca6c:	e026      	b.n	801cabc <MotionGR_Update+0xb84>
 801ca6e:	bf00      	nop
 801ca70:	2c844008 	.word	0x2c844008
 801ca74:	3f31e48a 	.word	0x3f31e48a
 801ca78:	2c843ff6 	.word	0x2c843ff6
 801ca7c:	3f21e48a 	.word	0x3f21e48a
 801ca80:	e675bd18 	.word	0xe675bd18
 801ca84:	bfff7786 	.word	0xbfff7786
 801ca88:	ef769b19 	.word	0xef769b19
 801ca8c:	3feef386 	.word	0x3feef386
 801ca90:	b18a26fa 	.word	0xb18a26fa
 801ca94:	3f67ed02 	.word	0x3f67ed02
 801ca98:	b18a26fa 	.word	0xb18a26fa
 801ca9c:	3f57ed02 	.word	0x3f57ed02
 801caa0:	c010fc75 	.word	0xc010fc75
 801caa4:	bffe397a 	.word	0xbffe397a
 801caa8:	85850d65 	.word	0x85850d65
 801caac:	3feca2cf 	.word	0x3feca2cf
 801cab0:	20005e88 	.word	0x20005e88
 801cab4:	20006020 	.word	0x20006020
 801cab8:	200060b8 	.word	0x200060b8
 801cabc:	f20f 5364 	addw	r3, pc, #1380	; 0x564
 801cac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cac4:	4606      	mov	r6, r0
 801cac6:	460f      	mov	r7, r1
 801cac8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801cacc:	f7e3 fd14 	bl	80004f8 <__aeabi_dmul>
 801cad0:	4602      	mov	r2, r0
 801cad2:	460b      	mov	r3, r1
 801cad4:	4630      	mov	r0, r6
 801cad6:	4639      	mov	r1, r7
 801cad8:	f7e3 fb58 	bl	800018c <__adddf3>
 801cadc:	f20f 534c 	addw	r3, pc, #1356	; 0x54c
 801cae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cae4:	4606      	mov	r6, r0
 801cae6:	460f      	mov	r7, r1
 801cae8:	e9dd 0134 	ldrd	r0, r1, [sp, #208]	; 0xd0
 801caec:	f7e3 fd04 	bl	80004f8 <__aeabi_dmul>
 801caf0:	4602      	mov	r2, r0
 801caf2:	460b      	mov	r3, r1
 801caf4:	4630      	mov	r0, r6
 801caf6:	4639      	mov	r1, r7
 801caf8:	f7e3 fb46 	bl	8000188 <__aeabi_dsub>
 801cafc:	f20f 5334 	addw	r3, pc, #1332	; 0x534
 801cb00:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cb04:	4606      	mov	r6, r0
 801cb06:	460f      	mov	r7, r1
 801cb08:	e9d8 0120 	ldrd	r0, r1, [r8, #128]	; 0x80
 801cb0c:	f7e3 fcf4 	bl	80004f8 <__aeabi_dmul>
 801cb10:	4602      	mov	r2, r0
 801cb12:	460b      	mov	r3, r1
 801cb14:	4630      	mov	r0, r6
 801cb16:	4639      	mov	r1, r7
 801cb18:	f7e3 fb36 	bl	8000188 <__aeabi_dsub>
 801cb1c:	e9dd 2336 	ldrd	r2, r3, [sp, #216]	; 0xd8
 801cb20:	f7e3 fb34 	bl	800018c <__adddf3>
 801cb24:	ed98 7b1c 	vldr	d7, [r8, #112]	; 0x70
 801cb28:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801cb2c:	f20f 530c 	addw	r3, pc, #1292	; 0x50c
 801cb30:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cb34:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 801cb38:	ed8d 7b36 	vstr	d7, [sp, #216]	; 0xd8
 801cb3c:	f7e3 fcdc 	bl	80004f8 <__aeabi_dmul>
 801cb40:	f20f 43e0 	addw	r3, pc, #1248	; 0x4e0
 801cb44:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cb48:	4606      	mov	r6, r0
 801cb4a:	460f      	mov	r7, r1
 801cb4c:	e9dd 012e 	ldrd	r0, r1, [sp, #184]	; 0xb8
 801cb50:	f7e3 fcd2 	bl	80004f8 <__aeabi_dmul>
 801cb54:	4602      	mov	r2, r0
 801cb56:	460b      	mov	r3, r1
 801cb58:	4630      	mov	r0, r6
 801cb5a:	4639      	mov	r1, r7
 801cb5c:	f7e3 fb16 	bl	800018c <__adddf3>
 801cb60:	f20f 43c8 	addw	r3, pc, #1224	; 0x4c8
 801cb64:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cb68:	4606      	mov	r6, r0
 801cb6a:	460f      	mov	r7, r1
 801cb6c:	e9dd 0136 	ldrd	r0, r1, [sp, #216]	; 0xd8
 801cb70:	f7e3 fcc2 	bl	80004f8 <__aeabi_dmul>
 801cb74:	4602      	mov	r2, r0
 801cb76:	460b      	mov	r3, r1
 801cb78:	4630      	mov	r0, r6
 801cb7a:	4639      	mov	r1, r7
 801cb7c:	f7e3 fb04 	bl	8000188 <__aeabi_dsub>
 801cb80:	f20f 43b0 	addw	r3, pc, #1200	; 0x4b0
 801cb84:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cb88:	4606      	mov	r6, r0
 801cb8a:	460f      	mov	r7, r1
 801cb8c:	e9d8 0122 	ldrd	r0, r1, [r8, #136]	; 0x88
 801cb90:	f7e3 fcb2 	bl	80004f8 <__aeabi_dmul>
 801cb94:	4602      	mov	r2, r0
 801cb96:	460b      	mov	r3, r1
 801cb98:	4630      	mov	r0, r6
 801cb9a:	4639      	mov	r1, r7
 801cb9c:	f7e3 faf4 	bl	8000188 <__aeabi_dsub>
 801cba0:	e9dd 2338 	ldrd	r2, r3, [sp, #224]	; 0xe0
 801cba4:	f7e3 faf2 	bl	800018c <__adddf3>
 801cba8:	ed9d 7b2a 	vldr	d7, [sp, #168]	; 0xa8
 801cbac:	4606      	mov	r6, r0
 801cbae:	460f      	mov	r7, r1
 801cbb0:	e9cd 672e 	strd	r6, r7, [sp, #184]	; 0xb8
 801cbb4:	ed88 7b12 	vstr	d7, [r8, #72]	; 0x48
 801cbb8:	ed9d 7b32 	vldr	d7, [sp, #200]	; 0xc8
 801cbbc:	ed88 7b1e 	vstr	d7, [r8, #120]	; 0x78
 801cbc0:	ed9d 7b2c 	vldr	d7, [sp, #176]	; 0xb0
 801cbc4:	ed88 7b14 	vstr	d7, [r8, #80]	; 0x50
 801cbc8:	ed9d 7b34 	vldr	d7, [sp, #208]	; 0xd0
 801cbcc:	ed88 7b20 	vstr	d7, [r8, #128]	; 0x80
 801cbd0:	ed9d 7b30 	vldr	d7, [sp, #192]	; 0xc0
 801cbd4:	ed88 7b16 	vstr	d7, [r8, #88]	; 0x58
 801cbd8:	ed9d 7b36 	vldr	d7, [sp, #216]	; 0xd8
 801cbdc:	ed88 7b22 	vstr	d7, [r8, #136]	; 0x88
 801cbe0:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
 801cbe4:	ed88 7b06 	vstr	d7, [r8, #24]
 801cbe8:	ed9d 7b04 	vldr	d7, [sp, #16]
 801cbec:	ed88 7b0c 	vstr	d7, [r8, #48]	; 0x30
 801cbf0:	ed9d 7b0c 	vldr	d7, [sp, #48]	; 0x30
 801cbf4:	ed88 7b18 	vstr	d7, [r8, #96]	; 0x60
 801cbf8:	ed9d 7b12 	vldr	d7, [sp, #72]	; 0x48
 801cbfc:	ed88 7b08 	vstr	d7, [r8, #32]
 801cc00:	ed9d 7b08 	vldr	d7, [sp, #32]
 801cc04:	ed88 7b0e 	vstr	d7, [r8, #56]	; 0x38
 801cc08:	ed9d 7b0e 	vldr	d7, [sp, #56]	; 0x38
 801cc0c:	ed88 7b1a 	vstr	d7, [r8, #104]	; 0x68
 801cc10:	ed9d 7b14 	vldr	d7, [sp, #80]	; 0x50
 801cc14:	ed88 7b0a 	vstr	d7, [r8, #40]	; 0x28
 801cc18:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 801cc1c:	ed88 7b10 	vstr	d7, [r8, #64]	; 0x40
 801cc20:	ed9d 7b00 	vldr	d7, [sp]
 801cc24:	ed88 7b00 	vstr	d7, [r8]
 801cc28:	ed9d 7b02 	vldr	d7, [sp, #8]
 801cc2c:	ed88 7b02 	vstr	d7, [r8, #8]
 801cc30:	ed9d 7b06 	vldr	d7, [sp, #24]
 801cc34:	ed88 7b04 	vstr	d7, [r8, #16]
 801cc38:	ec47 6b17 	vmov	d7, r6, r7
 801cc3c:	4602      	mov	r2, r0
 801cc3e:	460b      	mov	r3, r1
 801cc40:	ed88 7b1c 	vstr	d7, [r8, #112]	; 0x70
 801cc44:	f7e3 fc58 	bl	80004f8 <__aeabi_dmul>
 801cc48:	e9cd 0140 	strd	r0, r1, [sp, #256]	; 0x100
 801cc4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801cc50:	4602      	mov	r2, r0
 801cc52:	460b      	mov	r3, r1
 801cc54:	f7e3 fc50 	bl	80004f8 <__aeabi_dmul>
 801cc58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801cc5c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801cc60:	4602      	mov	r2, r0
 801cc62:	460b      	mov	r3, r1
 801cc64:	f7e3 fc48 	bl	80004f8 <__aeabi_dmul>
 801cc68:	e9cd 0142 	strd	r0, r1, [sp, #264]	; 0x108
 801cc6c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801cc70:	4602      	mov	r2, r0
 801cc72:	460b      	mov	r3, r1
 801cc74:	f7e3 fc40 	bl	80004f8 <__aeabi_dmul>
 801cc78:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 801cc7c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801cc80:	4602      	mov	r2, r0
 801cc82:	460b      	mov	r3, r1
 801cc84:	f7e3 fc38 	bl	80004f8 <__aeabi_dmul>
 801cc88:	e9cd 0144 	strd	r0, r1, [sp, #272]	; 0x110
 801cc8c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801cc90:	f8db 4750 	ldr.w	r4, [fp, #1872]	; 0x750
 801cc94:	9400      	str	r4, [sp, #0]
 801cc96:	4602      	mov	r2, r0
 801cc98:	460b      	mov	r3, r1
 801cc9a:	f7e3 fc2d 	bl	80004f8 <__aeabi_dmul>
 801cc9e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801cca0:	f8db 36e8 	ldr.w	r3, [fp, #1768]	; 0x6e8
 801cca4:	ed92 7b00 	vldr	d7, [r2]
 801cca8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801ccaa:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 801ccae:	ed92 7b00 	vldr	d7, [r2]
 801ccb2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801ccb4:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 801ccb8:	ed92 7b00 	vldr	d7, [r2]
 801ccbc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801ccbe:	ed8d 7b2a 	vstr	d7, [sp, #168]	; 0xa8
 801ccc2:	ed92 7b00 	vldr	d7, [r2]
 801ccc6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801ccc8:	ed8d 7b2c 	vstr	d7, [sp, #176]	; 0xb0
 801cccc:	ed92 7b00 	vldr	d7, [r2]
 801ccd0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801ccd2:	ed8d 7b30 	vstr	d7, [sp, #192]	; 0xc0
 801ccd6:	ed92 7b00 	vldr	d7, [r2]
 801ccda:	e9cd 0146 	strd	r0, r1, [sp, #280]	; 0x118
 801ccde:	e9d9 0100 	ldrd	r0, r1, [r9]
 801cce2:	ed8d 7b32 	vstr	d7, [sp, #200]	; 0xc8
 801cce6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801cce8:	ed92 7b00 	vldr	d7, [r2]
 801ccec:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801ccee:	ed8d 7b34 	vstr	d7, [sp, #208]	; 0xd0
 801ccf2:	ed92 7b00 	vldr	d7, [r2]
 801ccf6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801ccf8:	ed8d 7b36 	vstr	d7, [sp, #216]	; 0xd8
 801ccfc:	ed92 7b00 	vldr	d7, [r2]
 801cd00:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801cd02:	ed8d 7b38 	vstr	d7, [sp, #224]	; 0xe0
 801cd06:	ed92 7b00 	vldr	d7, [r2]
 801cd0a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801cd0c:	ed8d 7b3c 	vstr	d7, [sp, #240]	; 0xf0
 801cd10:	ed92 7b00 	vldr	d7, [r2]
 801cd14:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 801cd18:	2b01      	cmp	r3, #1
 801cd1a:	f105 0601 	add.w	r6, r5, #1
 801cd1e:	f105 0a02 	add.w	sl, r5, #2
 801cd22:	ed8d 7b3e 	vstr	d7, [sp, #248]	; 0xf8
 801cd26:	f000 8515 	beq.w	801d754 <MotionGR_Update+0x181c>
 801cd2a:	4602      	mov	r2, r0
 801cd2c:	460b      	mov	r3, r1
 801cd2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801cd32:	f7e3 fa2b 	bl	800018c <__adddf3>
 801cd36:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801cd3a:	e9c9 0100 	strd	r0, r1, [r9]
 801cd3e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801cd42:	f7e3 fa23 	bl	800018c <__adddf3>
 801cd46:	9f22      	ldr	r7, [sp, #136]	; 0x88
 801cd48:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801cd4c:	e9c7 0100 	strd	r0, r1, [r7]
 801cd50:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801cd54:	f7e3 fa1a 	bl	800018c <__adddf3>
 801cd58:	9f27      	ldr	r7, [sp, #156]	; 0x9c
 801cd5a:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
 801cd5e:	e9c7 0100 	strd	r0, r1, [r7]
 801cd62:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801cd66:	f7e3 fa11 	bl	800018c <__adddf3>
 801cd6a:	9f29      	ldr	r7, [sp, #164]	; 0xa4
 801cd6c:	e9dd 232c 	ldrd	r2, r3, [sp, #176]	; 0xb0
 801cd70:	e9c7 0100 	strd	r0, r1, [r7]
 801cd74:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801cd78:	f7e3 fa08 	bl	800018c <__adddf3>
 801cd7c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 801cd7e:	e9dd 2330 	ldrd	r2, r3, [sp, #192]	; 0xc0
 801cd82:	e9c7 0100 	strd	r0, r1, [r7]
 801cd86:	e9dd 012e 	ldrd	r0, r1, [sp, #184]	; 0xb8
 801cd8a:	f7e3 f9ff 	bl	800018c <__adddf3>
 801cd8e:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 801cd90:	e9dd 2332 	ldrd	r2, r3, [sp, #200]	; 0xc8
 801cd94:	e9c7 0100 	strd	r0, r1, [r7]
 801cd98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801cd9c:	f7e3 f9f6 	bl	800018c <__adddf3>
 801cda0:	9f16      	ldr	r7, [sp, #88]	; 0x58
 801cda2:	e9dd 2334 	ldrd	r2, r3, [sp, #208]	; 0xd0
 801cda6:	e9c7 0100 	strd	r0, r1, [r7]
 801cdaa:	e9dd 0142 	ldrd	r0, r1, [sp, #264]	; 0x108
 801cdae:	f7e3 f9ed 	bl	800018c <__adddf3>
 801cdb2:	9f24      	ldr	r7, [sp, #144]	; 0x90
 801cdb4:	e9dd 2336 	ldrd	r2, r3, [sp, #216]	; 0xd8
 801cdb8:	e9c7 0100 	strd	r0, r1, [r7]
 801cdbc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801cdc0:	f7e3 f9e4 	bl	800018c <__adddf3>
 801cdc4:	9f28      	ldr	r7, [sp, #160]	; 0xa0
 801cdc6:	e9dd 2344 	ldrd	r2, r3, [sp, #272]	; 0x110
 801cdca:	e9c7 0100 	strd	r0, r1, [r7]
 801cdce:	e9dd 0138 	ldrd	r0, r1, [sp, #224]	; 0xe0
 801cdd2:	f7e3 f9db 	bl	800018c <__adddf3>
 801cdd6:	9f18      	ldr	r7, [sp, #96]	; 0x60
 801cdd8:	e9dd 2346 	ldrd	r2, r3, [sp, #280]	; 0x118
 801cddc:	e9c7 0100 	strd	r0, r1, [r7]
 801cde0:	e9dd 013c 	ldrd	r0, r1, [sp, #240]	; 0xf0
 801cde4:	f7e3 f9d2 	bl	800018c <__adddf3>
 801cde8:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 801cdea:	e9dd 233e 	ldrd	r2, r3, [sp, #248]	; 0xf8
 801cdee:	e9c7 0100 	strd	r0, r1, [r7]
 801cdf2:	e9dd 0140 	ldrd	r0, r1, [sp, #256]	; 0x100
 801cdf6:	f7e3 f9c9 	bl	800018c <__adddf3>
 801cdfa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801cdfc:	f108 0790 	add.w	r7, r8, #144	; 0x90
 801ce00:	e9c3 0100 	strd	r0, r1, [r3]
 801ce04:	00ed      	lsls	r5, r5, #3
 801ce06:	00f6      	lsls	r6, r6, #3
 801ce08:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 801ce0c:	f508 783a 	add.w	r8, r8, #744	; 0x2e8
 801ce10:	4623      	mov	r3, r4
 801ce12:	4981      	ldr	r1, [pc, #516]	; (801d018 <MotionGR_Update+0x10e0>)
 801ce14:	3301      	adds	r3, #1
 801ce16:	ed9d 7b04 	vldr	d7, [sp, #16]
 801ce1a:	fb81 2103 	smull	r2, r1, r1, r3
 801ce1e:	17da      	asrs	r2, r3, #31
 801ce20:	ebc2 02e1 	rsb	r2, r2, r1, asr #3
 801ce24:	1979      	adds	r1, r7, r5
 801ce26:	ed81 7b00 	vstr	d7, [r1]
 801ce2a:	ed9d 7b0c 	vldr	d7, [sp, #48]	; 0x30
 801ce2e:	4445      	add	r5, r8
 801ce30:	ed85 7b00 	vstr	d7, [r5]
 801ce34:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801ce38:	ed9d 7b08 	vldr	d7, [sp, #32]
 801ce3c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801ce40:	1a9b      	subs	r3, r3, r2
 801ce42:	19ba      	adds	r2, r7, r6
 801ce44:	ed82 7b00 	vstr	d7, [r2]
 801ce48:	ed9d 7b0e 	vldr	d7, [sp, #56]	; 0x38
 801ce4c:	4446      	add	r6, r8
 801ce4e:	ed86 7b00 	vstr	d7, [r6]
 801ce52:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 801ce56:	f8cb 3750 	str.w	r3, [fp, #1872]	; 0x750
 801ce5a:	4457      	add	r7, sl
 801ce5c:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 801ce5e:	ed87 7b00 	vstr	d7, [r7]
 801ce62:	ed9d 7b2e 	vldr	d7, [sp, #184]	; 0xb8
 801ce66:	2b19      	cmp	r3, #25
 801ce68:	bf08      	it	eq
 801ce6a:	2301      	moveq	r3, #1
 801ce6c:	44d0      	add	r8, sl
 801ce6e:	ed88 7b00 	vstr	d7, [r8]
 801ce72:	bf08      	it	eq
 801ce74:	f8cb 36e8 	streq.w	r3, [fp, #1768]	; 0x6e8
 801ce78:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801ce7c:	f7e3 fe34 	bl	8000ae8 <__aeabi_d2f>
 801ce80:	ee07 0a90 	vmov	s15, r0
 801ce84:	eef0 7ae7 	vabs.f32	s15, s15
 801ce88:	ee17 0a90 	vmov	r0, s15
 801ce8c:	f7e3 fadc 	bl	8000448 <__aeabi_f2d>
 801ce90:	a35b      	add	r3, pc, #364	; (adr r3, 801d000 <MotionGR_Update+0x10c8>)
 801ce92:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce96:	f7e3 fdbf 	bl	8000a18 <__aeabi_dcmpgt>
 801ce9a:	f8db 6cd4 	ldr.w	r6, [fp, #3284]	; 0xcd4
 801ce9e:	4b5f      	ldr	r3, [pc, #380]	; (801d01c <MotionGR_Update+0x10e4>)
 801cea0:	2800      	cmp	r0, #0
 801cea2:	d066      	beq.n	801cf72 <MotionGR_Update+0x103a>
 801cea4:	f8db 1cd0 	ldr.w	r1, [fp, #3280]	; 0xcd0
 801cea8:	f8db 2ccc 	ldr.w	r2, [fp, #3276]	; 0xccc
 801ceac:	f8db 5cc8 	ldr.w	r5, [fp, #3272]	; 0xcc8
 801ceb0:	f8db 0cd8 	ldr.w	r0, [fp, #3288]	; 0xcd8
 801ceb4:	ea03 0446 	and.w	r4, r3, r6, lsl #1
 801ceb8:	eb04 7461 	add.w	r4, r4, r1, asr #29
 801cebc:	ea03 0141 	and.w	r1, r3, r1, lsl #1
 801cec0:	ea03 0040 	and.w	r0, r3, r0, lsl #1
 801cec4:	eb01 7162 	add.w	r1, r1, r2, asr #29
 801cec8:	ea03 0242 	and.w	r2, r3, r2, lsl #1
 801cecc:	ea03 0345 	and.w	r3, r3, r5, lsl #1
 801ced0:	eb00 7066 	add.w	r0, r0, r6, asr #29
 801ced4:	eb02 7265 	add.w	r2, r2, r5, asr #29
 801ced8:	3301      	adds	r3, #1
 801ceda:	f8cb 3cc8 	str.w	r3, [fp, #3272]	; 0xcc8
 801cede:	f8db 36e8 	ldr.w	r3, [fp, #1768]	; 0x6e8
 801cee2:	f8cb 2ccc 	str.w	r2, [fp, #3276]	; 0xccc
 801cee6:	2b01      	cmp	r3, #1
 801cee8:	f8db 2778 	ldr.w	r2, [fp, #1912]	; 0x778
 801ceec:	f8cb 0cd8 	str.w	r0, [fp, #3288]	; 0xcd8
 801cef0:	f8cb 4cd4 	str.w	r4, [fp, #3284]	; 0xcd4
 801cef4:	f8cb 1cd0 	str.w	r1, [fp, #3280]	; 0xcd0
 801cef8:	9206      	str	r2, [sp, #24]
 801cefa:	f000 80a3 	beq.w	801d044 <MotionGR_Update+0x110c>
 801cefe:	ed9f 7b42 	vldr	d7, [pc, #264]	; 801d008 <MotionGR_Update+0x10d0>
 801cf02:	ed8d 7b00 	vstr	d7, [sp]
 801cf06:	9b06      	ldr	r3, [sp, #24]
 801cf08:	2b01      	cmp	r3, #1
 801cf0a:	f000 857d 	beq.w	801da08 <MotionGR_Update+0x1ad0>
 801cf0e:	2400      	movs	r4, #0
 801cf10:	9b48      	ldr	r3, [sp, #288]	; 0x120
 801cf12:	bb63      	cbnz	r3, 801cf6e <MotionGR_Update+0x1036>
 801cf14:	9b49      	ldr	r3, [sp, #292]	; 0x124
 801cf16:	005b      	lsls	r3, r3, #1
 801cf18:	d129      	bne.n	801cf6e <MotionGR_Update+0x1036>
 801cf1a:	4941      	ldr	r1, [pc, #260]	; (801d020 <MotionGR_Update+0x10e8>)
 801cf1c:	f44f 7215 	mov.w	r2, #596	; 0x254
 801cf20:	1d08      	adds	r0, r1, #4
 801cf22:	f005 fca0 	bl	8022866 <memmove>
 801cf26:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 801cf28:	701c      	strb	r4, [r3, #0]
 801cf2a:	b04f      	add	sp, #316	; 0x13c
 801cf2c:	ecbd 8b04 	vpop	{d8-d9}
 801cf30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cf34:	f44f 7216 	mov.w	r2, #600	; 0x258
 801cf38:	2100      	movs	r1, #0
 801cf3a:	f10b 0014 	add.w	r0, fp, #20
 801cf3e:	f005 fcab 	bl	8022898 <memset>
 801cf42:	2300      	movs	r3, #0
 801cf44:	2000      	movs	r0, #0
 801cf46:	2100      	movs	r1, #0
 801cf48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801cf4a:	f8cb 228c 	str.w	r2, [fp, #652]	; 0x28c
 801cf4e:	461e      	mov	r6, r3
 801cf50:	f8cb 3278 	str.w	r3, [fp, #632]	; 0x278
 801cf54:	f8cb 3288 	str.w	r3, [fp, #648]	; 0x288
 801cf58:	f8cb 3290 	str.w	r3, [fp, #656]	; 0x290
 801cf5c:	f8cb 3294 	str.w	r3, [fp, #660]	; 0x294
 801cf60:	461f      	mov	r7, r3
 801cf62:	e9cb 019c 	strd	r0, r1, [fp, #624]	; 0x270
 801cf66:	e9cb 01a0 	strd	r0, r1, [fp, #640]	; 0x280
 801cf6a:	f7ff b881 	b.w	801c070 <MotionGR_Update+0x138>
 801cf6e:	b2dc      	uxtb	r4, r3
 801cf70:	e7d3      	b.n	801cf1a <MotionGR_Update+0xfe2>
 801cf72:	f8db 1cd0 	ldr.w	r1, [fp, #3280]	; 0xcd0
 801cf76:	f8db 2ccc 	ldr.w	r2, [fp, #3276]	; 0xccc
 801cf7a:	f8db 0cd8 	ldr.w	r0, [fp, #3288]	; 0xcd8
 801cf7e:	f8db 5cc8 	ldr.w	r5, [fp, #3272]	; 0xcc8
 801cf82:	ea03 0446 	and.w	r4, r3, r6, lsl #1
 801cf86:	eb04 7461 	add.w	r4, r4, r1, asr #29
 801cf8a:	ea03 0141 	and.w	r1, r3, r1, lsl #1
 801cf8e:	ea03 0040 	and.w	r0, r3, r0, lsl #1
 801cf92:	eb01 7162 	add.w	r1, r1, r2, asr #29
 801cf96:	ea03 0242 	and.w	r2, r3, r2, lsl #1
 801cf9a:	eb00 7066 	add.w	r0, r0, r6, asr #29
 801cf9e:	eb02 7265 	add.w	r2, r2, r5, asr #29
 801cfa2:	ea03 0345 	and.w	r3, r3, r5, lsl #1
 801cfa6:	e798      	b.n	801ceda <MotionGR_Update+0xfa2>
 801cfa8:	2e02      	cmp	r6, #2
 801cfaa:	f000 851f 	beq.w	801d9ec <MotionGR_Update+0x1ab4>
 801cfae:	2300      	movs	r3, #0
 801cfb0:	f8cb 3278 	str.w	r3, [fp, #632]	; 0x278
 801cfb4:	f8cb 3288 	str.w	r3, [fp, #648]	; 0x288
 801cfb8:	f8cb 3290 	str.w	r3, [fp, #656]	; 0x290
 801cfbc:	4640      	mov	r0, r8
 801cfbe:	4649      	mov	r1, r9
 801cfc0:	a313      	add	r3, pc, #76	; (adr r3, 801d010 <MotionGR_Update+0x10d8>)
 801cfc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cfc6:	f7e3 fd27 	bl	8000a18 <__aeabi_dcmpgt>
 801cfca:	2800      	cmp	r0, #0
 801cfcc:	f000 8657 	beq.w	801dc7e <MotionGR_Update+0x1d46>
 801cfd0:	2601      	movs	r6, #1
 801cfd2:	2732      	movs	r7, #50	; 0x32
 801cfd4:	2200      	movs	r2, #0
 801cfd6:	2300      	movs	r3, #0
 801cfd8:	4620      	mov	r0, r4
 801cfda:	4629      	mov	r1, r5
 801cfdc:	f8cb 6278 	str.w	r6, [fp, #632]	; 0x278
 801cfe0:	f8cb 7294 	str.w	r7, [fp, #660]	; 0x294
 801cfe4:	f7e3 fd18 	bl	8000a18 <__aeabi_dcmpgt>
 801cfe8:	2800      	cmp	r0, #0
 801cfea:	f001 8143 	beq.w	801e274 <MotionGR_Update+0x233c>
 801cfee:	f04f 33ff 	mov.w	r3, #4294967295
 801cff2:	f8cb 3288 	str.w	r3, [fp, #648]	; 0x288
 801cff6:	f7ff b937 	b.w	801c268 <MotionGR_Update+0x330>
 801cffa:	bf00      	nop
 801cffc:	f3af 8000 	nop.w
 801d000:	66666666 	.word	0x66666666
 801d004:	3fee6666 	.word	0x3fee6666
	...
 801d010:	33333333 	.word	0x33333333
 801d014:	3fe33333 	.word	0x3fe33333
 801d018:	51eb851f 	.word	0x51eb851f
 801d01c:	3ffffffe 	.word	0x3ffffffe
 801d020:	20005944 	.word	0x20005944
 801d024:	b18a26fa 	.word	0xb18a26fa
 801d028:	3f57ed02 	.word	0x3f57ed02
 801d02c:	c010fc75 	.word	0xc010fc75
 801d030:	bffe397a 	.word	0xbffe397a
 801d034:	85850d65 	.word	0x85850d65
 801d038:	3feca2cf 	.word	0x3feca2cf
 801d03c:	b18a26fa 	.word	0xb18a26fa
 801d040:	3f67ed02 	.word	0x3f67ed02
 801d044:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801d046:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d04a:	4610      	mov	r0, r2
 801d04c:	4619      	mov	r1, r3
 801d04e:	f7e3 fa53 	bl	80004f8 <__aeabi_dmul>
 801d052:	a37f      	add	r3, pc, #508	; (adr r3, 801d250 <MotionGR_Update+0x1318>)
 801d054:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d058:	f7e3 fa4e 	bl	80004f8 <__aeabi_dmul>
 801d05c:	460b      	mov	r3, r1
 801d05e:	9918      	ldr	r1, [sp, #96]	; 0x60
 801d060:	4602      	mov	r2, r0
 801d062:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d066:	f7e3 f88f 	bl	8000188 <__aeabi_dsub>
 801d06a:	a37b      	add	r3, pc, #492	; (adr r3, 801d258 <MotionGR_Update+0x1320>)
 801d06c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d070:	f7e3 fa42 	bl	80004f8 <__aeabi_dmul>
 801d074:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801d076:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d07a:	4606      	mov	r6, r0
 801d07c:	460f      	mov	r7, r1
 801d07e:	4610      	mov	r0, r2
 801d080:	4619      	mov	r1, r3
 801d082:	f7e3 fa39 	bl	80004f8 <__aeabi_dmul>
 801d086:	a372      	add	r3, pc, #456	; (adr r3, 801d250 <MotionGR_Update+0x1318>)
 801d088:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d08c:	f7e3 fa34 	bl	80004f8 <__aeabi_dmul>
 801d090:	460b      	mov	r3, r1
 801d092:	991c      	ldr	r1, [sp, #112]	; 0x70
 801d094:	4602      	mov	r2, r0
 801d096:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d09a:	f7e3 f875 	bl	8000188 <__aeabi_dsub>
 801d09e:	a36e      	add	r3, pc, #440	; (adr r3, 801d258 <MotionGR_Update+0x1320>)
 801d0a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d0a4:	f7e3 fa28 	bl	80004f8 <__aeabi_dmul>
 801d0a8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801d0aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d0ae:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801d0b2:	4610      	mov	r0, r2
 801d0b4:	4619      	mov	r1, r3
 801d0b6:	f7e3 fa1f 	bl	80004f8 <__aeabi_dmul>
 801d0ba:	a365      	add	r3, pc, #404	; (adr r3, 801d250 <MotionGR_Update+0x1318>)
 801d0bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d0c0:	f7e3 fa1a 	bl	80004f8 <__aeabi_dmul>
 801d0c4:	460b      	mov	r3, r1
 801d0c6:	9920      	ldr	r1, [sp, #128]	; 0x80
 801d0c8:	4602      	mov	r2, r0
 801d0ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d0ce:	f7e3 f85b 	bl	8000188 <__aeabi_dsub>
 801d0d2:	a361      	add	r3, pc, #388	; (adr r3, 801d258 <MotionGR_Update+0x1320>)
 801d0d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d0d8:	f7e3 fa0e 	bl	80004f8 <__aeabi_dmul>
 801d0dc:	e9d9 4500 	ldrd	r4, r5, [r9]
 801d0e0:	4680      	mov	r8, r0
 801d0e2:	4689      	mov	r9, r1
 801d0e4:	4622      	mov	r2, r4
 801d0e6:	462b      	mov	r3, r5
 801d0e8:	4620      	mov	r0, r4
 801d0ea:	4629      	mov	r1, r5
 801d0ec:	f7e3 fa04 	bl	80004f8 <__aeabi_dmul>
 801d0f0:	a357      	add	r3, pc, #348	; (adr r3, 801d250 <MotionGR_Update+0x1318>)
 801d0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d0f6:	f7e3 f9ff 	bl	80004f8 <__aeabi_dmul>
 801d0fa:	460b      	mov	r3, r1
 801d0fc:	9916      	ldr	r1, [sp, #88]	; 0x58
 801d0fe:	4602      	mov	r2, r0
 801d100:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d104:	f7e3 f840 	bl	8000188 <__aeabi_dsub>
 801d108:	a353      	add	r3, pc, #332	; (adr r3, 801d258 <MotionGR_Update+0x1320>)
 801d10a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d10e:	f7e3 f9f3 	bl	80004f8 <__aeabi_dmul>
 801d112:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
 801d116:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 801d118:	4632      	mov	r2, r6
 801d11a:	463b      	mov	r3, r7
 801d11c:	f7e3 f834 	bl	8000188 <__aeabi_dsub>
 801d120:	e9d4 4500 	ldrd	r4, r5, [r4]
 801d124:	4606      	mov	r6, r0
 801d126:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 801d12a:	4622      	mov	r2, r4
 801d12c:	462b      	mov	r3, r5
 801d12e:	4620      	mov	r0, r4
 801d130:	4629      	mov	r1, r5
 801d132:	f7e3 f9e1 	bl	80004f8 <__aeabi_dmul>
 801d136:	a346      	add	r3, pc, #280	; (adr r3, 801d250 <MotionGR_Update+0x1318>)
 801d138:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d13c:	f7e3 f9dc 	bl	80004f8 <__aeabi_dmul>
 801d140:	460b      	mov	r3, r1
 801d142:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801d144:	4602      	mov	r2, r0
 801d146:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d14a:	f7e3 f81d 	bl	8000188 <__aeabi_dsub>
 801d14e:	a342      	add	r3, pc, #264	; (adr r3, 801d258 <MotionGR_Update+0x1320>)
 801d150:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d154:	f7e3 f9d0 	bl	80004f8 <__aeabi_dmul>
 801d158:	9c22      	ldr	r4, [sp, #136]	; 0x88
 801d15a:	ed94 7b00 	vldr	d7, [r4]
 801d15e:	4642      	mov	r2, r8
 801d160:	464b      	mov	r3, r9
 801d162:	ed8d 7b00 	vstr	d7, [sp]
 801d166:	f7e3 f80f 	bl	8000188 <__aeabi_dsub>
 801d16a:	4602      	mov	r2, r0
 801d16c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801d170:	4630      	mov	r0, r6
 801d172:	4639      	mov	r1, r7
 801d174:	f7e3 f80a 	bl	800018c <__adddf3>
 801d178:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d17c:	4604      	mov	r4, r0
 801d17e:	460d      	mov	r5, r1
 801d180:	4610      	mov	r0, r2
 801d182:	4619      	mov	r1, r3
 801d184:	f7e3 f9b8 	bl	80004f8 <__aeabi_dmul>
 801d188:	a331      	add	r3, pc, #196	; (adr r3, 801d250 <MotionGR_Update+0x1318>)
 801d18a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d18e:	f7e3 f9b3 	bl	80004f8 <__aeabi_dmul>
 801d192:	460b      	mov	r3, r1
 801d194:	9924      	ldr	r1, [sp, #144]	; 0x90
 801d196:	4602      	mov	r2, r0
 801d198:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d19c:	f7e2 fff4 	bl	8000188 <__aeabi_dsub>
 801d1a0:	a32d      	add	r3, pc, #180	; (adr r3, 801d258 <MotionGR_Update+0x1320>)
 801d1a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d1a6:	f7e3 f9a7 	bl	80004f8 <__aeabi_dmul>
 801d1aa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801d1ae:	f7e2 ffeb 	bl	8000188 <__aeabi_dsub>
 801d1b2:	4602      	mov	r2, r0
 801d1b4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801d1b8:	4620      	mov	r0, r4
 801d1ba:	4629      	mov	r1, r5
 801d1bc:	f7e2 ffe6 	bl	800018c <__adddf3>
 801d1c0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801d1c4:	4606      	mov	r6, r0
 801d1c6:	460f      	mov	r7, r1
 801d1c8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801d1cc:	4d24      	ldr	r5, [pc, #144]	; (801d260 <MotionGR_Update+0x1328>)
 801d1ce:	e9cd 6700 	strd	r6, r7, [sp]
 801d1d2:	f7e2 ffdb 	bl	800018c <__adddf3>
 801d1d6:	4642      	mov	r2, r8
 801d1d8:	464b      	mov	r3, r9
 801d1da:	950c      	str	r5, [sp, #48]	; 0x30
 801d1dc:	f7e2 ffd6 	bl	800018c <__adddf3>
 801d1e0:	f8db 477c 	ldr.w	r4, [fp, #1916]	; 0x77c
 801d1e4:	940e      	str	r4, [sp, #56]	; 0x38
 801d1e6:	f105 0228 	add.w	r2, r5, #40	; 0x28
 801d1ea:	ec47 6b17 	vmov	d7, r6, r7
 801d1ee:	eb02 03c4 	add.w	r3, r2, r4, lsl #3
 801d1f2:	f8db a780 	ldr.w	sl, [fp, #1920]	; 0x780
 801d1f6:	e9c5 0100 	strd	r0, r1, [r5]
 801d1fa:	ed83 7b00 	vstr	d7, [r3]
 801d1fe:	9b06      	ldr	r3, [sp, #24]
 801d200:	2b00      	cmp	r3, #0
 801d202:	f040 85fe 	bne.w	801de02 <MotionGR_Update+0x1eca>
 801d206:	eb02 0aca 	add.w	sl, r2, sl, lsl #3
 801d20a:	4635      	mov	r5, r6
 801d20c:	463e      	mov	r6, r7
 801d20e:	e9da 7800 	ldrd	r7, r8, [sl]
 801d212:	4628      	mov	r0, r5
 801d214:	4631      	mov	r1, r6
 801d216:	463a      	mov	r2, r7
 801d218:	4643      	mov	r3, r8
 801d21a:	f7e3 fbdf 	bl	80009dc <__aeabi_dcmplt>
 801d21e:	b118      	cbz	r0, 801d228 <MotionGR_Update+0x12f0>
 801d220:	f8cb 4780 	str.w	r4, [fp, #1920]	; 0x780
 801d224:	462f      	mov	r7, r5
 801d226:	46b0      	mov	r8, r6
 801d228:	990e      	ldr	r1, [sp, #56]	; 0x38
 801d22a:	4a0e      	ldr	r2, [pc, #56]	; (801d264 <MotionGR_Update+0x132c>)
 801d22c:	3101      	adds	r1, #1
 801d22e:	fb82 3201 	smull	r3, r2, r2, r1
 801d232:	17cb      	asrs	r3, r1, #31
 801d234:	ebc3 1322 	rsb	r3, r3, r2, asr #4
 801d238:	2296      	movs	r2, #150	; 0x96
 801d23a:	fb02 1313 	mls	r3, r2, r3, r1
 801d23e:	f8cb 377c 	str.w	r3, [fp, #1916]	; 0x77c
 801d242:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 801d244:	2baf      	cmp	r3, #175	; 0xaf
 801d246:	f47f ae62 	bne.w	801cf0e <MotionGR_Update+0xfd6>
 801d24a:	f000 be03 	b.w	801de54 <MotionGR_Update+0x1f1c>
 801d24e:	bf00      	nop
 801d250:	47ae147b 	.word	0x47ae147b
 801d254:	3fa47ae1 	.word	0x3fa47ae1
 801d258:	55555555 	.word	0x55555555
 801d25c:	3fa55555 	.word	0x3fa55555
 801d260:	20006610 	.word	0x20006610
 801d264:	1b4e81b5 	.word	0x1b4e81b5
 801d268:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801d26c:	eb0b 0203 	add.w	r2, fp, r3
 801d270:	4611      	mov	r1, r2
 801d272:	ed91 7bce 	vldr	d7, [r1, #824]	; 0x338
 801d276:	9329      	str	r3, [sp, #164]	; 0xa4
 801d278:	912a      	str	r1, [sp, #168]	; 0xa8
 801d27a:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 801d27e:	e9dd 0100 	ldrd	r0, r1, [sp]
 801d282:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 801d286:	f7e2 ff81 	bl	800018c <__adddf3>
 801d28a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801d28e:	f7e2 ff7b 	bl	8000188 <__aeabi_dsub>
 801d292:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 801d294:	ea4f 09c6 	mov.w	r9, r6, lsl #3
 801d298:	4606      	mov	r6, r0
 801d29a:	eb0b 0009 	add.w	r0, fp, r9
 801d29e:	ed90 7bce 	vldr	d7, [r0, #824]	; 0x338
 801d2a2:	460f      	mov	r7, r1
 801d2a4:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 801d2a8:	ec47 6b17 	vmov	d7, r6, r7
 801d2ac:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
 801d2b0:	ed8b 7bc0 	vstr	d7, [fp, #768]	; 0x300
 801d2b4:	901e      	str	r0, [sp, #120]	; 0x78
 801d2b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d2ba:	e9cd 6716 	strd	r6, r7, [sp, #88]	; 0x58
 801d2be:	f7e2 ff65 	bl	800018c <__adddf3>
 801d2c2:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801d2c6:	f7e2 ff5f 	bl	8000188 <__aeabi_dsub>
 801d2ca:	4606      	mov	r6, r0
 801d2cc:	460f      	mov	r7, r1
 801d2ce:	ec47 6b17 	vmov	d7, r6, r7
 801d2d2:	4622      	mov	r2, r4
 801d2d4:	ed8b 7bc2 	vstr	d7, [fp, #776]	; 0x308
 801d2d8:	462b      	mov	r3, r5
 801d2da:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 801d2de:	e9cd 671c 	strd	r6, r7, [sp, #112]	; 0x70
 801d2e2:	f7e2 ff53 	bl	800018c <__adddf3>
 801d2e6:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801d2ea:	4604      	mov	r4, r0
 801d2ec:	460d      	mov	r5, r1
 801d2ee:	4610      	mov	r0, r2
 801d2f0:	4619      	mov	r1, r3
 801d2f2:	f7e3 f901 	bl	80004f8 <__aeabi_dmul>
 801d2f6:	4602      	mov	r2, r0
 801d2f8:	460b      	mov	r3, r1
 801d2fa:	4620      	mov	r0, r4
 801d2fc:	4629      	mov	r1, r5
 801d2fe:	f7e2 ff43 	bl	8000188 <__aeabi_dsub>
 801d302:	4605      	mov	r5, r0
 801d304:	460e      	mov	r6, r1
 801d306:	ec46 5b17 	vmov	d7, r5, r6
 801d30a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801d30e:	ed8b 7bc4 	vstr	d7, [fp, #784]	; 0x310
 801d312:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
 801d316:	e9cd 5618 	strd	r5, r6, [sp, #96]	; 0x60
 801d31a:	f7e2 ff37 	bl	800018c <__adddf3>
 801d31e:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801d322:	4604      	mov	r4, r0
 801d324:	460d      	mov	r5, r1
 801d326:	4610      	mov	r0, r2
 801d328:	4619      	mov	r1, r3
 801d32a:	f7e3 f8e5 	bl	80004f8 <__aeabi_dmul>
 801d32e:	4602      	mov	r2, r0
 801d330:	460b      	mov	r3, r1
 801d332:	4620      	mov	r0, r4
 801d334:	4629      	mov	r1, r5
 801d336:	f7e2 ff27 	bl	8000188 <__aeabi_dsub>
 801d33a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801d33c:	f108 0660 	add.w	r6, r8, #96	; 0x60
 801d340:	1937      	adds	r7, r6, r4
 801d342:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
 801d346:	e9d7 4500 	ldrd	r4, r5, [r7]
 801d34a:	ed9d 7b14 	vldr	d7, [sp, #80]	; 0x50
 801d34e:	462b      	mov	r3, r5
 801d350:	ed8b 7bc6 	vstr	d7, [fp, #792]	; 0x318
 801d354:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801d358:	4622      	mov	r2, r4
 801d35a:	f7e2 ff15 	bl	8000188 <__aeabi_dsub>
 801d35e:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	; 0x90
 801d362:	f7e2 ff13 	bl	800018c <__adddf3>
 801d366:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 801d36a:	ed9d 7b12 	vldr	d7, [sp, #72]	; 0x48
 801d36e:	462b      	mov	r3, r5
 801d370:	ed8b 7bc8 	vstr	d7, [fp, #800]	; 0x320
 801d374:	4622      	mov	r2, r4
 801d376:	4629      	mov	r1, r5
 801d378:	4620      	mov	r0, r4
 801d37a:	f7e3 f8bd 	bl	80004f8 <__aeabi_dmul>
 801d37e:	4602      	mov	r2, r0
 801d380:	460b      	mov	r3, r1
 801d382:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801d386:	f7e2 feff 	bl	8000188 <__aeabi_dsub>
 801d38a:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 801d38e:	f7e2 fefd 	bl	800018c <__adddf3>
 801d392:	ed9d 7b00 	vldr	d7, [sp]
 801d396:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801d398:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801d39a:	f8db 54c8 	ldr.w	r5, [fp, #1224]	; 0x4c8
 801d39e:	ed82 7bce 	vstr	d7, [r2, #824]	; 0x338
 801d3a2:	ed9d 7b0c 	vldr	d7, [sp, #48]	; 0x30
 801d3a6:	ed87 7b00 	vstr	d7, [r7]
 801d3aa:	ed9d 7b02 	vldr	d7, [sp, #8]
 801d3ae:	ed83 7bce 	vstr	d7, [r3, #824]	; 0x338
 801d3b2:	ed9d 7b0e 	vldr	d7, [sp, #56]	; 0x38
 801d3b6:	9b04      	ldr	r3, [sp, #16]
 801d3b8:	444e      	add	r6, r9
 801d3ba:	429d      	cmp	r5, r3
 801d3bc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 801d3c0:	ed86 7b00 	vstr	d7, [r6]
 801d3c4:	e9cb 01ca 	strd	r0, r1, [fp, #808]	; 0x328
 801d3c8:	f000 86e3 	beq.w	801e192 <MotionGR_Update+0x225a>
 801d3cc:	eb0b 1305 	add.w	r3, fp, r5, lsl #4
 801d3d0:	e9d3 23ce 	ldrd	r2, r3, [r3, #824]	; 0x338
 801d3d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 801d3d8:	f7e3 fb1e 	bl	8000a18 <__aeabi_dcmpgt>
 801d3dc:	2800      	cmp	r0, #0
 801d3de:	ea4f 0345 	mov.w	r3, r5, lsl #1
 801d3e2:	bf18      	it	ne
 801d3e4:	4653      	movne	r3, sl
 801d3e6:	931a      	str	r3, [sp, #104]	; 0x68
 801d3e8:	9b04      	ldr	r3, [sp, #16]
 801d3ea:	bf18      	it	ne
 801d3ec:	461d      	movne	r5, r3
 801d3ee:	f8db 84cc 	ldr.w	r8, [fp, #1228]	; 0x4cc
 801d3f2:	f8cb 54c8 	str.w	r5, [fp, #1224]	; 0x4c8
 801d3f6:	4598      	cmp	r8, r3
 801d3f8:	f000 86a4 	beq.w	801e144 <MotionGR_Update+0x220c>
 801d3fc:	eb0b 1308 	add.w	r3, fp, r8, lsl #4
 801d400:	e9d3 23ce 	ldrd	r2, r3, [r3, #824]	; 0x338
 801d404:	e9dd 0100 	ldrd	r0, r1, [sp]
 801d408:	f7e3 fae8 	bl	80009dc <__aeabi_dcmplt>
 801d40c:	2800      	cmp	r0, #0
 801d40e:	f000 852e 	beq.w	801de6e <MotionGR_Update+0x1f36>
 801d412:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801d416:	4643      	mov	r3, r8
 801d418:	f8db a4d0 	ldr.w	sl, [fp, #1232]	; 0x4d0
 801d41c:	f8cb 84cc 	str.w	r8, [fp, #1228]	; 0x4cc
 801d420:	459a      	cmp	sl, r3
 801d422:	f000 862e 	beq.w	801e082 <MotionGR_Update+0x214a>
 801d426:	eb0b 140a 	add.w	r4, fp, sl, lsl #4
 801d42a:	e9d4 23d0 	ldrd	r2, r3, [r4, #832]	; 0x340
 801d42e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d432:	3408      	adds	r4, #8
 801d434:	f7e3 faf0 	bl	8000a18 <__aeabi_dcmpgt>
 801d438:	2800      	cmp	r0, #0
 801d43a:	f040 8700 	bne.w	801e23e <MotionGR_Update+0x2306>
 801d43e:	ed94 7bce 	vldr	d7, [r4, #824]	; 0x338
 801d442:	ed8d 7b1e 	vstr	d7, [sp, #120]	; 0x78
 801d446:	9b04      	ldr	r3, [sp, #16]
 801d448:	f8db 54d4 	ldr.w	r5, [fp, #1236]	; 0x4d4
 801d44c:	f8cb a4d0 	str.w	sl, [fp, #1232]	; 0x4d0
 801d450:	429d      	cmp	r5, r3
 801d452:	f000 864a 	beq.w	801e0ea <MotionGR_Update+0x21b2>
 801d456:	eb0b 1405 	add.w	r4, fp, r5, lsl #4
 801d45a:	e9d4 23d0 	ldrd	r2, r3, [r4, #832]	; 0x340
 801d45e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d462:	3408      	adds	r4, #8
 801d464:	f7e3 faba 	bl	80009dc <__aeabi_dcmplt>
 801d468:	2800      	cmp	r0, #0
 801d46a:	f000 86fd 	beq.w	801e268 <MotionGR_Update+0x2330>
 801d46e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801d472:	9b04      	ldr	r3, [sp, #16]
 801d474:	f8cb 34d4 	str.w	r3, [fp, #1236]	; 0x4d4
 801d478:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801d47a:	f8cb 3330 	str.w	r3, [fp, #816]	; 0x330
 801d47e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d480:	2b19      	cmp	r3, #25
 801d482:	d102      	bne.n	801d48a <MotionGR_Update+0x1552>
 801d484:	2301      	movs	r3, #1
 801d486:	f8cb 32f8 	str.w	r3, [fp, #760]	; 0x2f8
 801d48a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801d48c:	eb0b 05c3 	add.w	r5, fp, r3, lsl #3
 801d490:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801d492:	ed95 7bce 	vldr	d7, [r5, #824]	; 0x338
 801d496:	445b      	add	r3, fp
 801d498:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 801d49c:	461c      	mov	r4, r3
 801d49e:	ed8d 7b04 	vstr	d7, [sp, #16]
 801d4a2:	ed94 7bce 	vldr	d7, [r4, #824]	; 0x338
 801d4a6:	4602      	mov	r2, r0
 801d4a8:	460b      	mov	r3, r1
 801d4aa:	ed8d 7b08 	vstr	d7, [sp, #32]
 801d4ae:	f7e3 f823 	bl	80004f8 <__aeabi_dmul>
 801d4b2:	a399      	add	r3, pc, #612	; (adr r3, 801d718 <MotionGR_Update+0x17e0>)
 801d4b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d4b8:	f7e3 f81e 	bl	80004f8 <__aeabi_dmul>
 801d4bc:	4602      	mov	r2, r0
 801d4be:	460b      	mov	r3, r1
 801d4c0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801d4c4:	f7e2 fe60 	bl	8000188 <__aeabi_dsub>
 801d4c8:	a395      	add	r3, pc, #596	; (adr r3, 801d720 <MotionGR_Update+0x17e8>)
 801d4ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d4ce:	f7e3 f813 	bl	80004f8 <__aeabi_dmul>
 801d4d2:	4d99      	ldr	r5, [pc, #612]	; (801d738 <MotionGR_Update+0x1800>)
 801d4d4:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 801d4d8:	460f      	mov	r7, r1
 801d4da:	f8db 14d8 	ldr.w	r1, [fp, #1240]	; 0x4d8
 801d4de:	ea05 0541 	and.w	r5, r5, r1, lsl #1
 801d4e2:	4606      	mov	r6, r0
 801d4e4:	4619      	mov	r1, r3
 801d4e6:	4610      	mov	r0, r2
 801d4e8:	f8cb 54d8 	str.w	r5, [fp, #1240]	; 0x4d8
 801d4ec:	f7e3 f804 	bl	80004f8 <__aeabi_dmul>
 801d4f0:	a389      	add	r3, pc, #548	; (adr r3, 801d718 <MotionGR_Update+0x17e0>)
 801d4f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d4f6:	f7e2 ffff 	bl	80004f8 <__aeabi_dmul>
 801d4fa:	4602      	mov	r2, r0
 801d4fc:	460b      	mov	r3, r1
 801d4fe:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 801d502:	f7e2 fe41 	bl	8000188 <__aeabi_dsub>
 801d506:	a386      	add	r3, pc, #536	; (adr r3, 801d720 <MotionGR_Update+0x17e8>)
 801d508:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d50c:	f7e2 fff4 	bl	80004f8 <__aeabi_dmul>
 801d510:	a385      	add	r3, pc, #532	; (adr r3, 801d728 <MotionGR_Update+0x17f0>)
 801d512:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d516:	f7e3 fa61 	bl	80009dc <__aeabi_dcmplt>
 801d51a:	2800      	cmp	r0, #0
 801d51c:	d036      	beq.n	801d58c <MotionGR_Update+0x1654>
 801d51e:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 801d522:	4610      	mov	r0, r2
 801d524:	4619      	mov	r1, r3
 801d526:	f7e2 ffe7 	bl	80004f8 <__aeabi_dmul>
 801d52a:	a37b      	add	r3, pc, #492	; (adr r3, 801d718 <MotionGR_Update+0x17e0>)
 801d52c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d530:	f7e2 ffe2 	bl	80004f8 <__aeabi_dmul>
 801d534:	4602      	mov	r2, r0
 801d536:	460b      	mov	r3, r1
 801d538:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 801d53c:	f7e2 fe24 	bl	8000188 <__aeabi_dsub>
 801d540:	a377      	add	r3, pc, #476	; (adr r3, 801d720 <MotionGR_Update+0x17e8>)
 801d542:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d546:	f7e2 ffd7 	bl	80004f8 <__aeabi_dmul>
 801d54a:	a377      	add	r3, pc, #476	; (adr r3, 801d728 <MotionGR_Update+0x17f0>)
 801d54c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d550:	f7e3 fa44 	bl	80009dc <__aeabi_dcmplt>
 801d554:	b1d0      	cbz	r0, 801d58c <MotionGR_Update+0x1654>
 801d556:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801d55a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801d55e:	f7e2 fe13 	bl	8000188 <__aeabi_dsub>
 801d562:	a373      	add	r3, pc, #460	; (adr r3, 801d730 <MotionGR_Update+0x17f8>)
 801d564:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d568:	f7e3 fa38 	bl	80009dc <__aeabi_dcmplt>
 801d56c:	b170      	cbz	r0, 801d58c <MotionGR_Update+0x1654>
 801d56e:	4642      	mov	r2, r8
 801d570:	464b      	mov	r3, r9
 801d572:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
 801d576:	f7e2 fe07 	bl	8000188 <__aeabi_dsub>
 801d57a:	a36d      	add	r3, pc, #436	; (adr r3, 801d730 <MotionGR_Update+0x17f8>)
 801d57c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d580:	f7e3 fa2c 	bl	80009dc <__aeabi_dcmplt>
 801d584:	b110      	cbz	r0, 801d58c <MotionGR_Update+0x1654>
 801d586:	3501      	adds	r5, #1
 801d588:	f8cb 54d8 	str.w	r5, [fp, #1240]	; 0x4d8
 801d58c:	4630      	mov	r0, r6
 801d58e:	4639      	mov	r1, r7
 801d590:	2200      	movs	r2, #0
 801d592:	4b6a      	ldr	r3, [pc, #424]	; (801d73c <MotionGR_Update+0x1804>)
 801d594:	f7e3 fa22 	bl	80009dc <__aeabi_dcmplt>
 801d598:	2800      	cmp	r0, #0
 801d59a:	f000 84e5 	beq.w	801df68 <MotionGR_Update+0x2030>
 801d59e:	a35e      	add	r3, pc, #376	; (adr r3, 801d718 <MotionGR_Update+0x17e0>)
 801d5a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d5a4:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 801d5a8:	f7e2 ffa6 	bl	80004f8 <__aeabi_dmul>
 801d5ac:	4b64      	ldr	r3, [pc, #400]	; (801d740 <MotionGR_Update+0x1808>)
 801d5ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d5b0:	f8cb 24e8 	str.w	r2, [fp, #1256]	; 0x4e8
 801d5b4:	e9c3 0100 	strd	r0, r1, [r3]
 801d5b8:	2000      	movs	r0, #0
 801d5ba:	f8db 34f0 	ldr.w	r3, [fp, #1264]	; 0x4f0
 801d5be:	f8db 44f4 	ldr.w	r4, [fp, #1268]	; 0x4f4
 801d5c2:	2b00      	cmp	r3, #0
 801d5c4:	bfc4      	itt	gt
 801d5c6:	f103 33ff 	addgt.w	r3, r3, #4294967295
 801d5ca:	f8cb 34f0 	strgt.w	r3, [fp, #1264]	; 0x4f0
 801d5ce:	2c00      	cmp	r4, #0
 801d5d0:	bfc4      	itt	gt
 801d5d2:	f104 34ff 	addgt.w	r4, r4, #4294967295
 801d5d6:	f8cb 44f4 	strgt.w	r4, [fp, #1268]	; 0x4f4
 801d5da:	2801      	cmp	r0, #1
 801d5dc:	f8db 34ec 	ldr.w	r3, [fp, #1260]	; 0x4ec
 801d5e0:	f000 853b 	beq.w	801e05a <MotionGR_Update+0x2122>
 801d5e4:	2b01      	cmp	r3, #1
 801d5e6:	f000 8633 	beq.w	801e250 <MotionGR_Update+0x2318>
 801d5ea:	2b02      	cmp	r3, #2
 801d5ec:	f000 8637 	beq.w	801e25e <MotionGR_Update+0x2326>
 801d5f0:	2b03      	cmp	r3, #3
 801d5f2:	f47f a8d2 	bne.w	801c79a <MotionGR_Update+0x862>
 801d5f6:	2200      	movs	r2, #0
 801d5f8:	4b52      	ldr	r3, [pc, #328]	; (801d744 <MotionGR_Update+0x180c>)
 801d5fa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801d5fe:	f7e3 f9ed 	bl	80009dc <__aeabi_dcmplt>
 801d602:	2800      	cmp	r0, #0
 801d604:	f000 8521 	beq.w	801e04a <MotionGR_Update+0x2112>
 801d608:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801d60c:	2200      	movs	r2, #0
 801d60e:	4b4e      	ldr	r3, [pc, #312]	; (801d748 <MotionGR_Update+0x1810>)
 801d610:	f7e3 fa02 	bl	8000a18 <__aeabi_dcmpgt>
 801d614:	2800      	cmp	r0, #0
 801d616:	f000 8518 	beq.w	801e04a <MotionGR_Update+0x2112>
 801d61a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801d61e:	2200      	movs	r2, #0
 801d620:	4b4a      	ldr	r3, [pc, #296]	; (801d74c <MotionGR_Update+0x1814>)
 801d622:	f7e3 f9db 	bl	80009dc <__aeabi_dcmplt>
 801d626:	2800      	cmp	r0, #0
 801d628:	f000 850f 	beq.w	801e04a <MotionGR_Update+0x2112>
 801d62c:	2c00      	cmp	r4, #0
 801d62e:	f040 850c 	bne.w	801e04a <MotionGR_Update+0x2112>
 801d632:	4b47      	ldr	r3, [pc, #284]	; (801d750 <MotionGR_Update+0x1818>)
 801d634:	f8db 0268 	ldr.w	r0, [fp, #616]	; 0x268
 801d638:	f8db 1264 	ldr.w	r1, [fp, #612]	; 0x264
 801d63c:	f8db 2260 	ldr.w	r2, [fp, #608]	; 0x260
 801d640:	f5a3 7713 	sub.w	r7, r3, #588	; 0x24c
 801d644:	e003      	b.n	801d64e <MotionGR_Update+0x1716>
 801d646:	429f      	cmp	r7, r3
 801d648:	4604      	mov	r4, r0
 801d64a:	d00b      	beq.n	801d664 <MotionGR_Update+0x172c>
 801d64c:	4628      	mov	r0, r5
 801d64e:	180d      	adds	r5, r1, r0
 801d650:	f853 6d04 	ldr.w	r6, [r3, #-4]!
 801d654:	4415      	add	r5, r2
 801d656:	42f5      	cmn	r5, r6
 801d658:	460d      	mov	r5, r1
 801d65a:	4611      	mov	r1, r2
 801d65c:	4632      	mov	r2, r6
 801d65e:	d1f2      	bne.n	801d646 <MotionGR_Update+0x170e>
 801d660:	2c00      	cmp	r4, #0
 801d662:	d0f0      	beq.n	801d646 <MotionGR_Update+0x170e>
 801d664:	1ea1      	subs	r1, r4, #2
 801d666:	f04f 0200 	mov.w	r2, #0
 801d66a:	f04f 03c8 	mov.w	r3, #200	; 0xc8
 801d66e:	bf18      	it	ne
 801d670:	2101      	movne	r1, #1
 801d672:	9149      	str	r1, [sp, #292]	; 0x124
 801d674:	f8cb 24f0 	str.w	r2, [fp, #1264]	; 0x4f0
 801d678:	f8cb 34f4 	str.w	r3, [fp, #1268]	; 0x4f4
 801d67c:	2300      	movs	r3, #0
 801d67e:	f8cb 34ec 	str.w	r3, [fp, #1260]	; 0x4ec
 801d682:	f7ff b88c 	b.w	801c79e <MotionGR_Update+0x866>
 801d686:	ed9d 7b00 	vldr	d7, [sp]
 801d68a:	492d      	ldr	r1, [pc, #180]	; (801d740 <MotionGR_Update+0x1808>)
 801d68c:	ed8b 7bce 	vstr	d7, [fp, #824]	; 0x338
 801d690:	ed9d 7b02 	vldr	d7, [sp, #8]
 801d694:	2300      	movs	r3, #0
 801d696:	2200      	movs	r2, #0
 801d698:	461d      	mov	r5, r3
 801d69a:	4614      	mov	r4, r2
 801d69c:	e9cb 23c0 	strd	r2, r3, [fp, #768]	; 0x300
 801d6a0:	e9cb 23c4 	strd	r2, r3, [fp, #784]	; 0x310
 801d6a4:	e9cb 23c2 	strd	r2, r3, [fp, #776]	; 0x308
 801d6a8:	e9cb 23c6 	strd	r2, r3, [fp, #792]	; 0x318
 801d6ac:	e9cb 23c8 	strd	r2, r3, [fp, #800]	; 0x320
 801d6b0:	e9cb 23ca 	strd	r2, r3, [fp, #808]	; 0x328
 801d6b4:	e9c1 2300 	strd	r2, r3, [r1]
 801d6b8:	2300      	movs	r3, #0
 801d6ba:	ed8b 7bd0 	vstr	d7, [fp, #832]	; 0x340
 801d6be:	469a      	mov	sl, r3
 801d6c0:	ec45 4b17 	vmov	d7, r4, r5
 801d6c4:	f8cb 32f8 	str.w	r3, [fp, #760]	; 0x2f8
 801d6c8:	f8cb 34c8 	str.w	r3, [fp, #1224]	; 0x4c8
 801d6cc:	f8cb 34cc 	str.w	r3, [fp, #1228]	; 0x4cc
 801d6d0:	f8cb 34d0 	str.w	r3, [fp, #1232]	; 0x4d0
 801d6d4:	f8cb 34d4 	str.w	r3, [fp, #1236]	; 0x4d4
 801d6d8:	f8cb 3330 	str.w	r3, [fp, #816]	; 0x330
 801d6dc:	f8cb 34d8 	str.w	r3, [fp, #1240]	; 0x4d8
 801d6e0:	f8cb 34e8 	str.w	r3, [fp, #1256]	; 0x4e8
 801d6e4:	f8cb 34ec 	str.w	r3, [fp, #1260]	; 0x4ec
 801d6e8:	f8cb 34f0 	str.w	r3, [fp, #1264]	; 0x4f0
 801d6ec:	f8cb 34f4 	str.w	r3, [fp, #1268]	; 0x4f4
 801d6f0:	9304      	str	r3, [sp, #16]
 801d6f2:	4699      	mov	r9, r3
 801d6f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d6f6:	e9cd 451a 	strd	r4, r5, [sp, #104]	; 0x68
 801d6fa:	ed8d 7b24 	vstr	d7, [sp, #144]	; 0x90
 801d6fe:	ed8d 7b22 	vstr	d7, [sp, #136]	; 0x88
 801d702:	ed8d 7b20 	vstr	d7, [sp, #128]	; 0x80
 801d706:	ed8d 7b1e 	vstr	d7, [sp, #120]	; 0x78
 801d70a:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
 801d70e:	e9cd 3327 	strd	r3, r3, [sp, #156]	; 0x9c
 801d712:	f7fe bdf3 	b.w	801c2fc <MotionGR_Update+0x3c4>
 801d716:	bf00      	nop
 801d718:	47ae147b 	.word	0x47ae147b
 801d71c:	3fa47ae1 	.word	0x3fa47ae1
 801d720:	55555555 	.word	0x55555555
 801d724:	3fa55555 	.word	0x3fa55555
 801d728:	47ae147b 	.word	0x47ae147b
 801d72c:	3f947ae1 	.word	0x3f947ae1
 801d730:	66666666 	.word	0x66666666
 801d734:	3fd66666 	.word	0x3fd66666
 801d738:	000ffffe 	.word	0x000ffffe
 801d73c:	402e0000 	.word	0x402e0000
 801d740:	20005e10 	.word	0x20005e10
 801d744:	c0240000 	.word	0xc0240000
 801d748:	c0538000 	.word	0xc0538000
 801d74c:	40478000 	.word	0x40478000
 801d750:	20005b90 	.word	0x20005b90
 801d754:	f108 0790 	add.w	r7, r8, #144	; 0x90
 801d758:	00ed      	lsls	r5, r5, #3
 801d75a:	197b      	adds	r3, r7, r5
 801d75c:	ed93 7b00 	vldr	d7, [r3]
 801d760:	ec53 2b17 	vmov	r2, r3, d7
 801d764:	ed8d 7b4a 	vstr	d7, [sp, #296]	; 0x128
 801d768:	00f6      	lsls	r6, r6, #3
 801d76a:	f7e2 fd0d 	bl	8000188 <__aeabi_dsub>
 801d76e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801d772:	f7e2 fd0b 	bl	800018c <__adddf3>
 801d776:	19bb      	adds	r3, r7, r6
 801d778:	ed93 7b00 	vldr	d7, [r3]
 801d77c:	e9c9 0100 	strd	r0, r1, [r9]
 801d780:	ec53 2b17 	vmov	r2, r3, d7
 801d784:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 801d788:	ed8d 7b4c 	vstr	d7, [sp, #304]	; 0x130
 801d78c:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 801d790:	f7e2 fcfa 	bl	8000188 <__aeabi_dsub>
 801d794:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801d798:	f7e2 fcf8 	bl	800018c <__adddf3>
 801d79c:	eb07 030a 	add.w	r3, r7, sl
 801d7a0:	ed93 7b00 	vldr	d7, [r3]
 801d7a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801d7a6:	e9c3 0100 	strd	r0, r1, [r3]
 801d7aa:	ec53 2b17 	vmov	r2, r3, d7
 801d7ae:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 801d7b2:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 801d7b6:	f508 783a 	add.w	r8, r8, #744	; 0x2e8
 801d7ba:	f7e2 fce5 	bl	8000188 <__aeabi_dsub>
 801d7be:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801d7c2:	f7e2 fce3 	bl	800018c <__adddf3>
 801d7c6:	eb08 0305 	add.w	r3, r8, r5
 801d7ca:	ed93 7b00 	vldr	d7, [r3]
 801d7ce:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801d7d0:	e9c3 0100 	strd	r0, r1, [r3]
 801d7d4:	ec53 2b17 	vmov	r2, r3, d7
 801d7d8:	e9dd 012a 	ldrd	r0, r1, [sp, #168]	; 0xa8
 801d7dc:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 801d7e0:	f7e2 fcd2 	bl	8000188 <__aeabi_dsub>
 801d7e4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801d7e8:	f7e2 fcd0 	bl	800018c <__adddf3>
 801d7ec:	eb08 0306 	add.w	r3, r8, r6
 801d7f0:	ed93 7b00 	vldr	d7, [r3]
 801d7f4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801d7f6:	e9c3 0100 	strd	r0, r1, [r3]
 801d7fa:	ec53 2b17 	vmov	r2, r3, d7
 801d7fe:	e9dd 012c 	ldrd	r0, r1, [sp, #176]	; 0xb0
 801d802:	ed8d 7b2a 	vstr	d7, [sp, #168]	; 0xa8
 801d806:	f7e2 fcbf 	bl	8000188 <__aeabi_dsub>
 801d80a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801d80e:	f7e2 fcbd 	bl	800018c <__adddf3>
 801d812:	eb08 030a 	add.w	r3, r8, sl
 801d816:	ed93 7b00 	vldr	d7, [r3]
 801d81a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801d81c:	e9c3 0100 	strd	r0, r1, [r3]
 801d820:	ec53 2b17 	vmov	r2, r3, d7
 801d824:	e9dd 0130 	ldrd	r0, r1, [sp, #192]	; 0xc0
 801d828:	ed8d 7b2c 	vstr	d7, [sp, #176]	; 0xb0
 801d82c:	f7e2 fcac 	bl	8000188 <__aeabi_dsub>
 801d830:	e9dd 232e 	ldrd	r2, r3, [sp, #184]	; 0xb8
 801d834:	f7e2 fcaa 	bl	800018c <__adddf3>
 801d838:	e9dd 234a 	ldrd	r2, r3, [sp, #296]	; 0x128
 801d83c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 801d83e:	e9c4 0100 	strd	r0, r1, [r4]
 801d842:	4610      	mov	r0, r2
 801d844:	4619      	mov	r1, r3
 801d846:	f7e2 fe57 	bl	80004f8 <__aeabi_dmul>
 801d84a:	4602      	mov	r2, r0
 801d84c:	460b      	mov	r3, r1
 801d84e:	e9dd 0132 	ldrd	r0, r1, [sp, #200]	; 0xc8
 801d852:	f7e2 fc99 	bl	8000188 <__aeabi_dsub>
 801d856:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801d85a:	f7e2 fc97 	bl	800018c <__adddf3>
 801d85e:	e9dd 234c 	ldrd	r2, r3, [sp, #304]	; 0x130
 801d862:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801d864:	e9c4 0100 	strd	r0, r1, [r4]
 801d868:	4610      	mov	r0, r2
 801d86a:	4619      	mov	r1, r3
 801d86c:	f7e2 fe44 	bl	80004f8 <__aeabi_dmul>
 801d870:	4602      	mov	r2, r0
 801d872:	460b      	mov	r3, r1
 801d874:	e9dd 0134 	ldrd	r0, r1, [sp, #208]	; 0xd0
 801d878:	f7e2 fc86 	bl	8000188 <__aeabi_dsub>
 801d87c:	e9dd 2342 	ldrd	r2, r3, [sp, #264]	; 0x108
 801d880:	f7e2 fc84 	bl	800018c <__adddf3>
 801d884:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801d888:	9c24      	ldr	r4, [sp, #144]	; 0x90
 801d88a:	e9c4 0100 	strd	r0, r1, [r4]
 801d88e:	4610      	mov	r0, r2
 801d890:	4619      	mov	r1, r3
 801d892:	f7e2 fe31 	bl	80004f8 <__aeabi_dmul>
 801d896:	4602      	mov	r2, r0
 801d898:	460b      	mov	r3, r1
 801d89a:	e9dd 0136 	ldrd	r0, r1, [sp, #216]	; 0xd8
 801d89e:	f7e2 fc73 	bl	8000188 <__aeabi_dsub>
 801d8a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801d8a6:	f7e2 fc71 	bl	800018c <__adddf3>
 801d8aa:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801d8ae:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 801d8b0:	e9c4 0100 	strd	r0, r1, [r4]
 801d8b4:	4610      	mov	r0, r2
 801d8b6:	4619      	mov	r1, r3
 801d8b8:	f7e2 fe1e 	bl	80004f8 <__aeabi_dmul>
 801d8bc:	4602      	mov	r2, r0
 801d8be:	460b      	mov	r3, r1
 801d8c0:	e9dd 0138 	ldrd	r0, r1, [sp, #224]	; 0xe0
 801d8c4:	f7e2 fc60 	bl	8000188 <__aeabi_dsub>
 801d8c8:	e9dd 2344 	ldrd	r2, r3, [sp, #272]	; 0x110
 801d8cc:	f7e2 fc5e 	bl	800018c <__adddf3>
 801d8d0:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
 801d8d4:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801d8d6:	e9c4 0100 	strd	r0, r1, [r4]
 801d8da:	4610      	mov	r0, r2
 801d8dc:	4619      	mov	r1, r3
 801d8de:	f7e2 fe0b 	bl	80004f8 <__aeabi_dmul>
 801d8e2:	4602      	mov	r2, r0
 801d8e4:	460b      	mov	r3, r1
 801d8e6:	e9dd 013c 	ldrd	r0, r1, [sp, #240]	; 0xf0
 801d8ea:	f7e2 fc4d 	bl	8000188 <__aeabi_dsub>
 801d8ee:	e9dd 2346 	ldrd	r2, r3, [sp, #280]	; 0x118
 801d8f2:	f7e2 fc4b 	bl	800018c <__adddf3>
 801d8f6:	e9dd 232c 	ldrd	r2, r3, [sp, #176]	; 0xb0
 801d8fa:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801d8fc:	e9c4 0100 	strd	r0, r1, [r4]
 801d900:	4610      	mov	r0, r2
 801d902:	4619      	mov	r1, r3
 801d904:	f7e2 fdf8 	bl	80004f8 <__aeabi_dmul>
 801d908:	4602      	mov	r2, r0
 801d90a:	460b      	mov	r3, r1
 801d90c:	e9dd 013e 	ldrd	r0, r1, [sp, #248]	; 0xf8
 801d910:	f7e2 fc3a 	bl	8000188 <__aeabi_dsub>
 801d914:	e9dd 2340 	ldrd	r2, r3, [sp, #256]	; 0x100
 801d918:	f7e2 fc38 	bl	800018c <__adddf3>
 801d91c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801d91e:	e9c3 0100 	strd	r0, r1, [r3]
 801d922:	9b00      	ldr	r3, [sp, #0]
 801d924:	f7ff ba75 	b.w	801ce12 <MotionGR_Update+0xeda>
 801d928:	f109 0108 	add.w	r1, r9, #8
 801d92c:	9116      	str	r1, [sp, #88]	; 0x58
 801d92e:	f109 0138 	add.w	r1, r9, #56	; 0x38
 801d932:	9118      	str	r1, [sp, #96]	; 0x60
 801d934:	9916      	ldr	r1, [sp, #88]	; 0x58
 801d936:	2300      	movs	r3, #0
 801d938:	2200      	movs	r2, #0
 801d93a:	e9c1 2300 	strd	r2, r3, [r1]
 801d93e:	f109 0c40 	add.w	ip, r9, #64	; 0x40
 801d942:	9918      	ldr	r1, [sp, #96]	; 0x60
 801d944:	f8cd c068 	str.w	ip, [sp, #104]	; 0x68
 801d948:	e9c1 2300 	strd	r2, r3, [r1]
 801d94c:	f109 0c48 	add.w	ip, r9, #72	; 0x48
 801d950:	991a      	ldr	r1, [sp, #104]	; 0x68
 801d952:	f8cd c070 	str.w	ip, [sp, #112]	; 0x70
 801d956:	e9c1 2300 	strd	r2, r3, [r1]
 801d95a:	f109 0c50 	add.w	ip, r9, #80	; 0x50
 801d95e:	991c      	ldr	r1, [sp, #112]	; 0x70
 801d960:	f8cd c078 	str.w	ip, [sp, #120]	; 0x78
 801d964:	e9c1 2300 	strd	r2, r3, [r1]
 801d968:	f109 0c58 	add.w	ip, r9, #88	; 0x58
 801d96c:	991e      	ldr	r1, [sp, #120]	; 0x78
 801d96e:	f8cd c080 	str.w	ip, [sp, #128]	; 0x80
 801d972:	e9c1 2300 	strd	r2, r3, [r1]
 801d976:	9920      	ldr	r1, [sp, #128]	; 0x80
 801d978:	e9c9 2300 	strd	r2, r3, [r9]
 801d97c:	e9c9 231a 	strd	r2, r3, [r9, #104]	; 0x68
 801d980:	e9c9 2304 	strd	r2, r3, [r9, #16]
 801d984:	e9c9 2306 	strd	r2, r3, [r9, #24]
 801d988:	e9c9 2308 	strd	r2, r3, [r9, #32]
 801d98c:	e9c9 230a 	strd	r2, r3, [r9, #40]	; 0x28
 801d990:	e9c9 230c 	strd	r2, r3, [r9, #48]	; 0x30
 801d994:	e9c1 2300 	strd	r2, r3, [r1]
 801d998:	f109 0010 	add.w	r0, r9, #16
 801d99c:	2300      	movs	r3, #0
 801d99e:	f109 0418 	add.w	r4, r9, #24
 801d9a2:	f109 0520 	add.w	r5, r9, #32
 801d9a6:	f109 0628 	add.w	r6, r9, #40	; 0x28
 801d9aa:	f109 0730 	add.w	r7, r9, #48	; 0x30
 801d9ae:	9022      	str	r0, [sp, #136]	; 0x88
 801d9b0:	9424      	str	r4, [sp, #144]	; 0x90
 801d9b2:	9527      	str	r5, [sp, #156]	; 0x9c
 801d9b4:	9628      	str	r6, [sp, #160]	; 0xa0
 801d9b6:	9729      	str	r7, [sp, #164]	; 0xa4
 801d9b8:	f8cb 36e8 	str.w	r3, [fp, #1768]	; 0x6e8
 801d9bc:	f8cb 3750 	str.w	r3, [fp, #1872]	; 0x750
 801d9c0:	f8cb 3760 	str.w	r3, [fp, #1888]	; 0x760
 801d9c4:	f8cb 3764 	str.w	r3, [fp, #1892]	; 0x764
 801d9c8:	f8cb 3768 	str.w	r3, [fp, #1896]	; 0x768
 801d9cc:	f8cb 376c 	str.w	r3, [fp, #1900]	; 0x76c
 801d9d0:	f8cb 3770 	str.w	r3, [fp, #1904]	; 0x770
 801d9d4:	f8cb 3774 	str.w	r3, [fp, #1908]	; 0x774
 801d9d8:	f8cb 3778 	str.w	r3, [fp, #1912]	; 0x778
 801d9dc:	f8cb 377c 	str.w	r3, [fp, #1916]	; 0x77c
 801d9e0:	f8cb 3780 	str.w	r3, [fp, #1920]	; 0x780
 801d9e4:	f8cb 3784 	str.w	r3, [fp, #1924]	; 0x784
 801d9e8:	f7fe bf02 	b.w	801c7f0 <MotionGR_Update+0x8b8>
 801d9ec:	f8db 328c 	ldr.w	r3, [fp, #652]	; 0x28c
 801d9f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d9f2:	1ad3      	subs	r3, r2, r3
 801d9f4:	2b09      	cmp	r3, #9
 801d9f6:	f73f aada 	bgt.w	801cfae <MotionGR_Update+0x1076>
 801d9fa:	2602      	movs	r6, #2
 801d9fc:	2300      	movs	r3, #0
 801d9fe:	9348      	str	r3, [sp, #288]	; 0x120
 801da00:	e9cb 45a0 	strd	r4, r5, [fp, #640]	; 0x280
 801da04:	f7fe bc43 	b.w	801c28e <MotionGR_Update+0x356>
 801da08:	4ab3      	ldr	r2, [pc, #716]	; (801dcd8 <MotionGR_Update+0x1da0>)
 801da0a:	f8db 3780 	ldr.w	r3, [fp, #1920]	; 0x780
 801da0e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801da12:	e9d3 7800 	ldrd	r7, r8, [r3]
 801da16:	f1a2 0328 	sub.w	r3, r2, #40	; 0x28
 801da1a:	930c      	str	r3, [sp, #48]	; 0x30
 801da1c:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 801dcf4 <MotionGR_Update+0x1dbc>
 801da20:	4cae      	ldr	r4, [pc, #696]	; (801dcdc <MotionGR_Update+0x1da4>)
 801da22:	f8d9 50c0 	ldr.w	r5, [r9, #192]	; 0xc0
 801da26:	e9d9 1331 	ldrd	r1, r3, [r9, #196]	; 0xc4
 801da2a:	ea04 0043 	and.w	r0, r4, r3, lsl #1
 801da2e:	ea04 0641 	and.w	r6, r4, r1, lsl #1
 801da32:	eb00 7a61 	add.w	sl, r0, r1, asr #29
 801da36:	a39a      	add	r3, pc, #616	; (adr r3, 801dca0 <MotionGR_Update+0x1d68>)
 801da38:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da3c:	4638      	mov	r0, r7
 801da3e:	4641      	mov	r1, r8
 801da40:	eb06 7665 	add.w	r6, r6, r5, asr #29
 801da44:	ea04 0545 	and.w	r5, r4, r5, lsl #1
 801da48:	f7e2 ffc8 	bl	80009dc <__aeabi_dcmplt>
 801da4c:	2800      	cmp	r0, #0
 801da4e:	f000 8119 	beq.w	801dc84 <MotionGR_Update+0x1d4c>
 801da52:	f8db 4cd8 	ldr.w	r4, [fp, #3288]	; 0xcd8
 801da56:	1764      	asrs	r4, r4, #29
 801da58:	2c01      	cmp	r4, #1
 801da5a:	f000 8105 	beq.w	801dc68 <MotionGR_Update+0x1d30>
 801da5e:	2302      	movs	r3, #2
 801da60:	f8cb 3764 	str.w	r3, [fp, #1892]	; 0x764
 801da64:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801da68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801da6c:	f7e2 fb8e 	bl	800018c <__adddf3>
 801da70:	f003 fb92 	bl	8021198 <sqrt>
 801da74:	4602      	mov	r2, r0
 801da76:	460b      	mov	r3, r1
 801da78:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801da7c:	f7e2 fe66 	bl	800074c <__aeabi_ddiv>
 801da80:	f7e3 f832 	bl	8000ae8 <__aeabi_d2f>
 801da84:	f003 f998 	bl	8020db8 <atanf>
 801da88:	f7e2 fcde 	bl	8000448 <__aeabi_f2d>
 801da8c:	a386      	add	r3, pc, #536	; (adr r3, 801dca8 <MotionGR_Update+0x1d70>)
 801da8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da92:	f7e2 fd31 	bl	80004f8 <__aeabi_dmul>
 801da96:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801da9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801da9e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801daa2:	f7e2 fe53 	bl	800074c <__aeabi_ddiv>
 801daa6:	f002 ff3f 	bl	8020928 <atan>
 801daaa:	2200      	movs	r2, #0
 801daac:	4607      	mov	r7, r0
 801daae:	4688      	mov	r8, r1
 801dab0:	4b8b      	ldr	r3, [pc, #556]	; (801dce0 <MotionGR_Update+0x1da8>)
 801dab2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801dab6:	f7e2 ff91 	bl	80009dc <__aeabi_dcmplt>
 801daba:	b140      	cbz	r0, 801dace <MotionGR_Update+0x1b96>
 801dabc:	2200      	movs	r2, #0
 801dabe:	4b89      	ldr	r3, [pc, #548]	; (801dce4 <MotionGR_Update+0x1dac>)
 801dac0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801dac4:	f7e2 ffa8 	bl	8000a18 <__aeabi_dcmpgt>
 801dac8:	2800      	cmp	r0, #0
 801daca:	f040 8202 	bne.w	801ded2 <MotionGR_Update+0x1f9a>
 801dace:	e9c9 6a31 	strd	r6, sl, [r9, #196]	; 0xc4
 801dad2:	f8db 4764 	ldr.w	r4, [fp, #1892]	; 0x764
 801dad6:	f8c9 50c0 	str.w	r5, [r9, #192]	; 0xc0
 801dada:	f8db 8774 	ldr.w	r8, [fp, #1908]	; 0x774
 801dade:	f1b8 0f00 	cmp.w	r8, #0
 801dae2:	dd09      	ble.n	801daf8 <MotionGR_Update+0x1bc0>
 801dae4:	a372      	add	r3, pc, #456	; (adr r3, 801dcb0 <MotionGR_Update+0x1d78>)
 801dae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801daea:	e9dd 0100 	ldrd	r0, r1, [sp]
 801daee:	f7e2 ff75 	bl	80009dc <__aeabi_dcmplt>
 801daf2:	2800      	cmp	r0, #0
 801daf4:	f040 81b6 	bne.w	801de64 <MotionGR_Update+0x1f2c>
 801daf8:	f8db 3770 	ldr.w	r3, [fp, #1904]	; 0x770
 801dafc:	2b00      	cmp	r3, #0
 801dafe:	bfc4      	itt	gt
 801db00:	f103 33ff 	addgt.w	r3, r3, #4294967295
 801db04:	f8cb 3770 	strgt.w	r3, [fp, #1904]	; 0x770
 801db08:	2c01      	cmp	r4, #1
 801db0a:	f000 827f 	beq.w	801e00c <MotionGR_Update+0x20d4>
 801db0e:	f8db 5768 	ldr.w	r5, [fp, #1896]	; 0x768
 801db12:	f8db 676c 	ldr.w	r6, [fp, #1900]	; 0x76c
 801db16:	2d00      	cmp	r5, #0
 801db18:	f040 80f5 	bne.w	801dd06 <MotionGR_Update+0x1dce>
 801db1c:	f1b8 0f00 	cmp.w	r8, #0
 801db20:	f040 81f7 	bne.w	801df12 <MotionGR_Update+0x1fda>
 801db24:	2c02      	cmp	r4, #2
 801db26:	f000 83e3 	beq.w	801e2f0 <MotionGR_Update+0x23b8>
 801db2a:	2c03      	cmp	r4, #3
 801db2c:	f040 8410 	bne.w	801e350 <MotionGR_Update+0x2418>
 801db30:	a35f      	add	r3, pc, #380	; (adr r3, 801dcb0 <MotionGR_Update+0x1d78>)
 801db32:	e9d3 2300 	ldrd	r2, r3, [r3]
 801db36:	e9dd 0100 	ldrd	r0, r1, [sp]
 801db3a:	f7e2 ff6d 	bl	8000a18 <__aeabi_dcmpgt>
 801db3e:	2800      	cmp	r0, #0
 801db40:	f000 83e0 	beq.w	801e304 <MotionGR_Update+0x23cc>
 801db44:	ed9d 7b02 	vldr	d7, [sp, #8]
 801db48:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
 801db4a:	4b67      	ldr	r3, [pc, #412]	; (801dce8 <MotionGR_Update+0x1db0>)
 801db4c:	f8cb 2760 	str.w	r2, [fp, #1888]	; 0x760
 801db50:	2201      	movs	r2, #1
 801db52:	ed83 7b00 	vstr	d7, [r3]
 801db56:	f8cb 2768 	str.w	r2, [fp, #1896]	; 0x768
 801db5a:	2e00      	cmp	r6, #0
 801db5c:	f000 8273 	beq.w	801e046 <MotionGR_Update+0x210e>
 801db60:	f8db 4760 	ldr.w	r4, [fp, #1888]	; 0x760
 801db64:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 801db66:	1b1f      	subs	r7, r3, r4
 801db68:	2fc8      	cmp	r7, #200	; 0xc8
 801db6a:	dd04      	ble.n	801db76 <MotionGR_Update+0x1c3e>
 801db6c:	2300      	movs	r3, #0
 801db6e:	f8db 676c 	ldr.w	r6, [fp, #1900]	; 0x76c
 801db72:	f8cb 3768 	str.w	r3, [fp, #1896]	; 0x768
 801db76:	2e01      	cmp	r6, #1
 801db78:	f000 8331 	beq.w	801e1de <MotionGR_Update+0x22a6>
 801db7c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801db7e:	e9dd 0100 	ldrd	r0, r1, [sp]
 801db82:	a34d      	add	r3, pc, #308	; (adr r3, 801dcb8 <MotionGR_Update+0x1d80>)
 801db84:	e9d3 2300 	ldrd	r2, r3, [r3]
 801db88:	e9d4 6706 	ldrd	r6, r7, [r4, #24]
 801db8c:	f7e2 ff44 	bl	8000a18 <__aeabi_dcmpgt>
 801db90:	2800      	cmp	r0, #0
 801db92:	f000 81de 	beq.w	801df52 <MotionGR_Update+0x201a>
 801db96:	f8db 3774 	ldr.w	r3, [fp, #1908]	; 0x774
 801db9a:	2b00      	cmp	r3, #0
 801db9c:	f040 81d9 	bne.w	801df52 <MotionGR_Update+0x201a>
 801dba0:	2364      	movs	r3, #100	; 0x64
 801dba2:	f8cb 3784 	str.w	r3, [fp, #1924]	; 0x784
 801dba6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801dba8:	e9d3 4500 	ldrd	r4, r5, [r3]
 801dbac:	4632      	mov	r2, r6
 801dbae:	463b      	mov	r3, r7
 801dbb0:	4620      	mov	r0, r4
 801dbb2:	4629      	mov	r1, r5
 801dbb4:	f7e2 ff26 	bl	8000a04 <__aeabi_dcmpge>
 801dbb8:	b908      	cbnz	r0, 801dbbe <MotionGR_Update+0x1c86>
 801dbba:	4634      	mov	r4, r6
 801dbbc:	463d      	mov	r5, r7
 801dbbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801dbc0:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
 801dbc4:	4620      	mov	r0, r4
 801dbc6:	4632      	mov	r2, r6
 801dbc8:	463b      	mov	r3, r7
 801dbca:	4629      	mov	r1, r5
 801dbcc:	f7e2 ff1a 	bl	8000a04 <__aeabi_dcmpge>
 801dbd0:	b908      	cbnz	r0, 801dbd6 <MotionGR_Update+0x1c9e>
 801dbd2:	4634      	mov	r4, r6
 801dbd4:	463d      	mov	r5, r7
 801dbd6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801dbd8:	e9d3 6704 	ldrd	r6, r7, [r3, #16]
 801dbdc:	4622      	mov	r2, r4
 801dbde:	462b      	mov	r3, r5
 801dbe0:	4630      	mov	r0, r6
 801dbe2:	4639      	mov	r1, r7
 801dbe4:	f7e2 ff0e 	bl	8000a04 <__aeabi_dcmpge>
 801dbe8:	b908      	cbnz	r0, 801dbee <MotionGR_Update+0x1cb6>
 801dbea:	4626      	mov	r6, r4
 801dbec:	462f      	mov	r7, r5
 801dbee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801dbf0:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 801dbf4:	4632      	mov	r2, r6
 801dbf6:	463b      	mov	r3, r7
 801dbf8:	4620      	mov	r0, r4
 801dbfa:	4629      	mov	r1, r5
 801dbfc:	f7e2 ff02 	bl	8000a04 <__aeabi_dcmpge>
 801dc00:	b908      	cbnz	r0, 801dc06 <MotionGR_Update+0x1cce>
 801dc02:	4634      	mov	r4, r6
 801dc04:	463d      	mov	r5, r7
 801dc06:	4620      	mov	r0, r4
 801dc08:	4629      	mov	r1, r5
 801dc0a:	a32d      	add	r3, pc, #180	; (adr r3, 801dcc0 <MotionGR_Update+0x1d88>)
 801dc0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dc10:	f7e2 fee4 	bl	80009dc <__aeabi_dcmplt>
 801dc14:	2800      	cmp	r0, #0
 801dc16:	f000 81a1 	beq.w	801df5c <MotionGR_Update+0x2024>
 801dc1a:	2300      	movs	r3, #0
 801dc1c:	f8cb 3784 	str.w	r3, [fp, #1924]	; 0x784
 801dc20:	4b32      	ldr	r3, [pc, #200]	; (801dcec <MotionGR_Update+0x1db4>)
 801dc22:	22c8      	movs	r2, #200	; 0xc8
 801dc24:	f1a3 00c4 	sub.w	r0, r3, #196	; 0xc4
 801dc28:	f8cb 2774 	str.w	r2, [fp, #1908]	; 0x774
 801dc2c:	2100      	movs	r1, #0
 801dc2e:	e002      	b.n	801dc36 <MotionGR_Update+0x1cfe>
 801dc30:	4283      	cmp	r3, r0
 801dc32:	4611      	mov	r1, r2
 801dc34:	d003      	beq.n	801dc3e <MotionGR_Update+0x1d06>
 801dc36:	f853 2904 	ldr.w	r2, [r3], #-4
 801dc3a:	2a00      	cmp	r2, #0
 801dc3c:	d1f8      	bne.n	801dc30 <MotionGR_Update+0x1cf8>
 801dc3e:	f8d9 30c8 	ldr.w	r3, [r9, #200]	; 0xc8
 801dc42:	175b      	asrs	r3, r3, #29
 801dc44:	2400      	movs	r4, #0
 801dc46:	2b01      	cmp	r3, #1
 801dc48:	f8cb 4768 	str.w	r4, [fp, #1896]	; 0x768
 801dc4c:	f8cb 476c 	str.w	r4, [fp, #1900]	; 0x76c
 801dc50:	d002      	beq.n	801dc58 <MotionGR_Update+0x1d20>
 801dc52:	1e8c      	subs	r4, r1, #2
 801dc54:	bf18      	it	ne
 801dc56:	2401      	movne	r4, #1
 801dc58:	4925      	ldr	r1, [pc, #148]	; (801dcf0 <MotionGR_Update+0x1db8>)
 801dc5a:	2220      	movs	r2, #32
 801dc5c:	f101 0008 	add.w	r0, r1, #8
 801dc60:	f004 fe01 	bl	8022866 <memmove>
 801dc64:	f7ff b954 	b.w	801cf10 <MotionGR_Update+0xfd8>
 801dc68:	ed9f 7b17 	vldr	d7, [pc, #92]	; 801dcc8 <MotionGR_Update+0x1d90>
 801dc6c:	f8cb 4764 	str.w	r4, [fp, #1892]	; 0x764
 801dc70:	e9c9 6a31 	strd	r6, sl, [r9, #196]	; 0xc4
 801dc74:	f8c9 50c0 	str.w	r5, [r9, #192]	; 0xc0
 801dc78:	ed8d 7b02 	vstr	d7, [sp, #8]
 801dc7c:	e72d      	b.n	801dada <MotionGR_Update+0x1ba2>
 801dc7e:	9048      	str	r0, [sp, #288]	; 0x120
 801dc80:	4606      	mov	r6, r0
 801dc82:	e6bd      	b.n	801da00 <MotionGR_Update+0x1ac8>
 801dc84:	4638      	mov	r0, r7
 801dc86:	4641      	mov	r1, r8
 801dc88:	a311      	add	r3, pc, #68	; (adr r3, 801dcd0 <MotionGR_Update+0x1d98>)
 801dc8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dc8e:	f7e2 fea5 	bl	80009dc <__aeabi_dcmplt>
 801dc92:	2800      	cmp	r0, #0
 801dc94:	f47f aee3 	bne.w	801da5e <MotionGR_Update+0x1b26>
 801dc98:	2303      	movs	r3, #3
 801dc9a:	f8cb 3764 	str.w	r3, [fp, #1892]	; 0x764
 801dc9e:	e6e1      	b.n	801da64 <MotionGR_Update+0x1b2c>
 801dca0:	9abcaf48 	.word	0x9abcaf48
 801dca4:	3e7ad7f2 	.word	0x3e7ad7f2
 801dca8:	1a63c1f5 	.word	0x1a63c1f5
 801dcac:	404ca5dc 	.word	0x404ca5dc
 801dcb0:	9999999a 	.word	0x9999999a
 801dcb4:	3fa99999 	.word	0x3fa99999
 801dcb8:	1eb851ec 	.word	0x1eb851ec
 801dcbc:	3fb1eb85 	.word	0x3fb1eb85
 801dcc0:	47ae147b 	.word	0x47ae147b
 801dcc4:	3fa47ae1 	.word	0x3fa47ae1
	...
 801dcd0:	eb1c432d 	.word	0xeb1c432d
 801dcd4:	3f1a36e2 	.word	0x3f1a36e2
 801dcd8:	20006638 	.word	0x20006638
 801dcdc:	3ffffffe 	.word	0x3ffffffe
 801dce0:	c0240000 	.word	0xc0240000
 801dce4:	c0538000 	.word	0xc0538000
 801dce8:	20006088 	.word	0x20006088
 801dcec:	20005a08 	.word	0x20005a08
 801dcf0:	20006610 	.word	0x20006610
 801dcf4:	20006a28 	.word	0x20006a28
 801dcf8:	f8db 5768 	ldr.w	r5, [fp, #1896]	; 0x768
 801dcfc:	f8db 676c 	ldr.w	r6, [fp, #1900]	; 0x76c
 801dd00:	2d00      	cmp	r5, #0
 801dd02:	f000 8106 	beq.w	801df12 <MotionGR_Update+0x1fda>
 801dd06:	2e00      	cmp	r6, #0
 801dd08:	f000 80b7 	beq.w	801de7a <MotionGR_Update+0x1f42>
 801dd0c:	f04f 0800 	mov.w	r8, #0
 801dd10:	2d01      	cmp	r5, #1
 801dd12:	f47f af30 	bne.w	801db76 <MotionGR_Update+0x1c3e>
 801dd16:	4bb6      	ldr	r3, [pc, #728]	; (801dff0 <MotionGR_Update+0x20b8>)
 801dd18:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dd1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801dd20:	f7e2 fa32 	bl	8000188 <__aeabi_dsub>
 801dd24:	460c      	mov	r4, r1
 801dd26:	4603      	mov	r3, r0
 801dd28:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801dd2c:	f8db 7760 	ldr.w	r7, [fp, #1888]	; 0x760
 801dd30:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 801dd32:	4bb0      	ldr	r3, [pc, #704]	; (801dff4 <MotionGR_Update+0x20bc>)
 801dd34:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801dd38:	2200      	movs	r2, #0
 801dd3a:	1be7      	subs	r7, r4, r7
 801dd3c:	f7e2 fe6c 	bl	8000a18 <__aeabi_dcmpgt>
 801dd40:	2800      	cmp	r0, #0
 801dd42:	f43f af11 	beq.w	801db68 <MotionGR_Update+0x1c30>
 801dd46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801dd4a:	f7e2 fecd 	bl	8000ae8 <__aeabi_d2f>
 801dd4e:	ee07 0a90 	vmov	s15, r0
 801dd52:	eeb0 7ae7 	vabs.f32	s14, s15
 801dd56:	ee07 7a90 	vmov	s15, r7
 801dd5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801dd5e:	eec7 7a27 	vdiv.f32	s15, s14, s15
 801dd62:	ee17 0a90 	vmov	r0, s15
 801dd66:	f7e2 fb6f 	bl	8000448 <__aeabi_f2d>
 801dd6a:	a395      	add	r3, pc, #596	; (adr r3, 801dfc0 <MotionGR_Update+0x2088>)
 801dd6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dd70:	f7e2 fe52 	bl	8000a18 <__aeabi_dcmpgt>
 801dd74:	2800      	cmp	r0, #0
 801dd76:	f43f aef7 	beq.w	801db68 <MotionGR_Update+0x1c30>
 801dd7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801dd7c:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 801dd80:	ed93 7b00 	vldr	d7, [r3]
 801dd84:	4620      	mov	r0, r4
 801dd86:	ec53 2b17 	vmov	r2, r3, d7
 801dd8a:	4629      	mov	r1, r5
 801dd8c:	ed8d 7b02 	vstr	d7, [sp, #8]
 801dd90:	f7e2 fe38 	bl	8000a04 <__aeabi_dcmpge>
 801dd94:	b908      	cbnz	r0, 801dd9a <MotionGR_Update+0x1e62>
 801dd96:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801dd9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801dd9c:	ed93 7b04 	vldr	d7, [r3, #16]
 801dda0:	4622      	mov	r2, r4
 801dda2:	462b      	mov	r3, r5
 801dda4:	ec51 0b17 	vmov	r0, r1, d7
 801dda8:	ed8d 7b02 	vstr	d7, [sp, #8]
 801ddac:	f7e2 fe2a 	bl	8000a04 <__aeabi_dcmpge>
 801ddb0:	b908      	cbnz	r0, 801ddb6 <MotionGR_Update+0x1e7e>
 801ddb2:	e9cd 4502 	strd	r4, r5, [sp, #8]
 801ddb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ddb8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 801ddbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801ddc0:	4620      	mov	r0, r4
 801ddc2:	4629      	mov	r1, r5
 801ddc4:	f7e2 fe1e 	bl	8000a04 <__aeabi_dcmpge>
 801ddc8:	b908      	cbnz	r0, 801ddce <MotionGR_Update+0x1e96>
 801ddca:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801ddce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ddd0:	ed93 7b08 	vldr	d7, [r3, #32]
 801ddd4:	4622      	mov	r2, r4
 801ddd6:	462b      	mov	r3, r5
 801ddd8:	ec51 0b17 	vmov	r0, r1, d7
 801dddc:	ed8d 7b02 	vstr	d7, [sp, #8]
 801dde0:	f7e2 fe10 	bl	8000a04 <__aeabi_dcmpge>
 801dde4:	b908      	cbnz	r0, 801ddea <MotionGR_Update+0x1eb2>
 801dde6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 801ddea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ddee:	a376      	add	r3, pc, #472	; (adr r3, 801dfc8 <MotionGR_Update+0x2090>)
 801ddf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ddf4:	f7e2 fdf2 	bl	80009dc <__aeabi_dcmplt>
 801ddf8:	2800      	cmp	r0, #0
 801ddfa:	bf18      	it	ne
 801ddfc:	f04f 0801 	movne.w	r8, #1
 801de00:	e6b2      	b.n	801db68 <MotionGR_Update+0x1c30>
 801de02:	4554      	cmp	r4, sl
 801de04:	f000 808b 	beq.w	801df1e <MotionGR_Update+0x1fe6>
 801de08:	eb0b 03ca 	add.w	r3, fp, sl, lsl #3
 801de0c:	f603 5308 	addw	r3, r3, #3336	; 0xd08
 801de10:	4639      	mov	r1, r7
 801de12:	e9d3 2300 	ldrd	r2, r3, [r3]
 801de16:	4630      	mov	r0, r6
 801de18:	f7e2 fde0 	bl	80009dc <__aeabi_dcmplt>
 801de1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801de1e:	2800      	cmp	r0, #0
 801de20:	bf18      	it	ne
 801de22:	469a      	movne	sl, r3
 801de24:	4619      	mov	r1, r3
 801de26:	4a74      	ldr	r2, [pc, #464]	; (801dff8 <MotionGR_Update+0x20c0>)
 801de28:	f8cb a780 	str.w	sl, [fp, #1920]	; 0x780
 801de2c:	3101      	adds	r1, #1
 801de2e:	fb82 3201 	smull	r3, r2, r2, r1
 801de32:	17cb      	asrs	r3, r1, #31
 801de34:	ebc3 1322 	rsb	r3, r3, r2, asr #4
 801de38:	2296      	movs	r2, #150	; 0x96
 801de3a:	fb02 1313 	mls	r3, r2, r3, r1
 801de3e:	f8cb 377c 	str.w	r3, [fp, #1916]	; 0x77c
 801de42:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 801de44:	2baf      	cmp	r3, #175	; 0xaf
 801de46:	f47f a85e 	bne.w	801cf06 <MotionGR_Update+0xfce>
 801de4a:	4b6c      	ldr	r3, [pc, #432]	; (801dffc <MotionGR_Update+0x20c4>)
 801de4c:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 801de50:	e9da 7800 	ldrd	r7, r8, [sl]
 801de54:	2301      	movs	r3, #1
 801de56:	f8cb 3778 	str.w	r3, [fp, #1912]	; 0x778
 801de5a:	e5df      	b.n	801da1c <MotionGR_Update+0x1ae4>
 801de5c:	9048      	str	r0, [sp, #288]	; 0x120
 801de5e:	2601      	movs	r6, #1
 801de60:	f7fe ba15 	b.w	801c28e <MotionGR_Update+0x356>
 801de64:	f108 38ff 	add.w	r8, r8, #4294967295
 801de68:	f8cb 8774 	str.w	r8, [fp, #1908]	; 0x774
 801de6c:	e644      	b.n	801daf8 <MotionGR_Update+0x1bc0>
 801de6e:	ea4f 1308 	mov.w	r3, r8, lsl #4
 801de72:	9329      	str	r3, [sp, #164]	; 0xa4
 801de74:	9b04      	ldr	r3, [sp, #16]
 801de76:	f7ff bacf 	b.w	801d418 <MotionGR_Update+0x14e0>
 801de7a:	f1b8 0f00 	cmp.w	r8, #0
 801de7e:	f040 8248 	bne.w	801e312 <MotionGR_Update+0x23da>
 801de82:	2c01      	cmp	r4, #1
 801de84:	f040 80db 	bne.w	801e03e <MotionGR_Update+0x2106>
 801de88:	a351      	add	r3, pc, #324	; (adr r3, 801dfd0 <MotionGR_Update+0x2098>)
 801de8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801de8e:	e9dd 0100 	ldrd	r0, r1, [sp]
 801de92:	f7e2 fdc1 	bl	8000a18 <__aeabi_dcmpgt>
 801de96:	2800      	cmp	r0, #0
 801de98:	f000 8270 	beq.w	801e37c <MotionGR_Update+0x2444>
 801de9c:	2201      	movs	r2, #1
 801de9e:	23c8      	movs	r3, #200	; 0xc8
 801dea0:	4295      	cmp	r5, r2
 801dea2:	f8cb 276c 	str.w	r2, [fp, #1900]	; 0x76c
 801dea6:	f8cb 3770 	str.w	r3, [fp, #1904]	; 0x770
 801deaa:	f000 8269 	beq.w	801e380 <MotionGR_Update+0x2448>
 801deae:	f04f 0800 	mov.w	r8, #0
 801deb2:	a349      	add	r3, pc, #292	; (adr r3, 801dfd8 <MotionGR_Update+0x20a0>)
 801deb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801deb8:	e9dd 0100 	ldrd	r0, r1, [sp]
 801debc:	f7e2 fd8e 	bl	80009dc <__aeabi_dcmplt>
 801dec0:	2800      	cmp	r0, #0
 801dec2:	f43f ae5b 	beq.w	801db7c <MotionGR_Update+0x1c44>
 801dec6:	2300      	movs	r3, #0
 801dec8:	f8cb 376c 	str.w	r3, [fp, #1900]	; 0x76c
 801decc:	f04f 0801 	mov.w	r8, #1
 801ded0:	e654      	b.n	801db7c <MotionGR_Update+0x1c44>
 801ded2:	4641      	mov	r1, r8
 801ded4:	4638      	mov	r0, r7
 801ded6:	f7e2 fe07 	bl	8000ae8 <__aeabi_d2f>
 801deda:	ee07 0a90 	vmov	s15, r0
 801dede:	eef0 7ae7 	vabs.f32	s15, s15
 801dee2:	ee17 0a90 	vmov	r0, s15
 801dee6:	f7e2 faaf 	bl	8000448 <__aeabi_f2d>
 801deea:	a33d      	add	r3, pc, #244	; (adr r3, 801dfe0 <MotionGR_Update+0x20a8>)
 801deec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801def0:	f7e2 fb02 	bl	80004f8 <__aeabi_dmul>
 801def4:	2200      	movs	r2, #0
 801def6:	4b42      	ldr	r3, [pc, #264]	; (801e000 <MotionGR_Update+0x20c8>)
 801def8:	f7e2 fd70 	bl	80009dc <__aeabi_dcmplt>
 801defc:	2800      	cmp	r0, #0
 801defe:	f43f ade6 	beq.w	801dace <MotionGR_Update+0x1b96>
 801df02:	3501      	adds	r5, #1
 801df04:	f8db 4764 	ldr.w	r4, [fp, #1892]	; 0x764
 801df08:	f8c9 50c0 	str.w	r5, [r9, #192]	; 0xc0
 801df0c:	e9c9 6a31 	strd	r6, sl, [r9, #196]	; 0xc4
 801df10:	e5e3      	b.n	801dada <MotionGR_Update+0x1ba2>
 801df12:	2e00      	cmp	r6, #0
 801df14:	f000 81d2 	beq.w	801e2bc <MotionGR_Update+0x2384>
 801df18:	f04f 0800 	mov.w	r8, #0
 801df1c:	e62b      	b.n	801db76 <MotionGR_Update+0x1c3e>
 801df1e:	4b37      	ldr	r3, [pc, #220]	; (801dffc <MotionGR_Update+0x20c4>)
 801df20:	e9d3 6700 	ldrd	r6, r7, [r3]
 801df24:	f04f 0a00 	mov.w	sl, #0
 801df28:	46d0      	mov	r8, sl
 801df2a:	4699      	mov	r9, r3
 801df2c:	e8f9 4502 	ldrd	r4, r5, [r9], #8
 801df30:	4632      	mov	r2, r6
 801df32:	463b      	mov	r3, r7
 801df34:	4620      	mov	r0, r4
 801df36:	4629      	mov	r1, r5
 801df38:	f7e2 fd50 	bl	80009dc <__aeabi_dcmplt>
 801df3c:	b110      	cbz	r0, 801df44 <MotionGR_Update+0x200c>
 801df3e:	4626      	mov	r6, r4
 801df40:	462f      	mov	r7, r5
 801df42:	46c2      	mov	sl, r8
 801df44:	f108 0801 	add.w	r8, r8, #1
 801df48:	f1b8 0f96 	cmp.w	r8, #150	; 0x96
 801df4c:	d1ee      	bne.n	801df2c <MotionGR_Update+0x1ff4>
 801df4e:	990e      	ldr	r1, [sp, #56]	; 0x38
 801df50:	e769      	b.n	801de26 <MotionGR_Update+0x1eee>
 801df52:	f8db 3784 	ldr.w	r3, [fp, #1924]	; 0x784
 801df56:	2b00      	cmp	r3, #0
 801df58:	f73f ae25 	bgt.w	801dba6 <MotionGR_Update+0x1c6e>
 801df5c:	f1b8 0f01 	cmp.w	r8, #1
 801df60:	f43f ae5e 	beq.w	801dc20 <MotionGR_Update+0x1ce8>
 801df64:	2400      	movs	r4, #0
 801df66:	e677      	b.n	801dc58 <MotionGR_Update+0x1d20>
 801df68:	4b26      	ldr	r3, [pc, #152]	; (801e004 <MotionGR_Update+0x20cc>)
 801df6a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801df6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801df72:	f7e2 f909 	bl	8000188 <__aeabi_dsub>
 801df76:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 801df7a:	4639      	mov	r1, r7
 801df7c:	2200      	movs	r2, #0
 801df7e:	4b22      	ldr	r3, [pc, #136]	; (801e008 <MotionGR_Update+0x20d0>)
 801df80:	4606      	mov	r6, r0
 801df82:	f7e2 fd49 	bl	8000a18 <__aeabi_dcmpgt>
 801df86:	2800      	cmp	r0, #0
 801df88:	f43f ab17 	beq.w	801d5ba <MotionGR_Update+0x1682>
 801df8c:	f8db 04e8 	ldr.w	r0, [fp, #1256]	; 0x4e8
 801df90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801df92:	1a18      	subs	r0, r3, r0
 801df94:	f43f ab11 	beq.w	801d5ba <MotionGR_Update+0x1682>
 801df98:	f7e2 fa44 	bl	8000424 <__aeabi_i2d>
 801df9c:	4602      	mov	r2, r0
 801df9e:	460b      	mov	r3, r1
 801dfa0:	4630      	mov	r0, r6
 801dfa2:	4639      	mov	r1, r7
 801dfa4:	f7e2 fbd2 	bl	800074c <__aeabi_ddiv>
 801dfa8:	a30f      	add	r3, pc, #60	; (adr r3, 801dfe8 <MotionGR_Update+0x20b0>)
 801dfaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dfae:	f7e2 fd33 	bl	8000a18 <__aeabi_dcmpgt>
 801dfb2:	3000      	adds	r0, #0
 801dfb4:	bf18      	it	ne
 801dfb6:	2001      	movne	r0, #1
 801dfb8:	f7ff baff 	b.w	801d5ba <MotionGR_Update+0x1682>
 801dfbc:	f3af 8000 	nop.w
 801dfc0:	47ae147b 	.word	0x47ae147b
 801dfc4:	3fb47ae1 	.word	0x3fb47ae1
 801dfc8:	47ae147b 	.word	0x47ae147b
 801dfcc:	3fa47ae1 	.word	0x3fa47ae1
 801dfd0:	bc6a7efa 	.word	0xbc6a7efa
 801dfd4:	3f689374 	.word	0x3f689374
 801dfd8:	eb1c432d 	.word	0xeb1c432d
 801dfdc:	3f1a36e2 	.word	0x3f1a36e2
 801dfe0:	1a63c1f5 	.word	0x1a63c1f5
 801dfe4:	404ca5dc 	.word	0x404ca5dc
 801dfe8:	9999999a 	.word	0x9999999a
 801dfec:	3fe99999 	.word	0x3fe99999
 801dff0:	20006088 	.word	0x20006088
 801dff4:	40240000 	.word	0x40240000
 801dff8:	1b4e81b5 	.word	0x1b4e81b5
 801dffc:	20006638 	.word	0x20006638
 801e000:	40478000 	.word	0x40478000
 801e004:	20005e10 	.word	0x20005e10
 801e008:	402e0000 	.word	0x402e0000
 801e00c:	a3ce      	add	r3, pc, #824	; (adr r3, 801e348 <MotionGR_Update+0x2410>)
 801e00e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e012:	e9dd 0100 	ldrd	r0, r1, [sp]
 801e016:	f7e2 fcff 	bl	8000a18 <__aeabi_dcmpgt>
 801e01a:	2800      	cmp	r0, #0
 801e01c:	f43f ad77 	beq.w	801db0e <MotionGR_Update+0x1bd6>
 801e020:	f1b8 0f00 	cmp.w	r8, #0
 801e024:	f47f ae68 	bne.w	801dcf8 <MotionGR_Update+0x1dc0>
 801e028:	f8db 676c 	ldr.w	r6, [fp, #1900]	; 0x76c
 801e02c:	f8db 5768 	ldr.w	r5, [fp, #1896]	; 0x768
 801e030:	23c8      	movs	r3, #200	; 0xc8
 801e032:	f8cb 3774 	str.w	r3, [fp, #1908]	; 0x774
 801e036:	46a0      	mov	r8, r4
 801e038:	2e00      	cmp	r6, #0
 801e03a:	f47f ae69 	bne.w	801dd10 <MotionGR_Update+0x1dd8>
 801e03e:	2d01      	cmp	r5, #1
 801e040:	f47f ad9c 	bne.w	801db7c <MotionGR_Update+0x1c44>
 801e044:	4bbc      	ldr	r3, [pc, #752]	; (801e338 <MotionGR_Update+0x2400>)
 801e046:	2600      	movs	r6, #0
 801e048:	e666      	b.n	801dd18 <MotionGR_Update+0x1de0>
 801e04a:	f8db 34f0 	ldr.w	r3, [fp, #1264]	; 0x4f0
 801e04e:	9349      	str	r3, [sp, #292]	; 0x124
 801e050:	2b00      	cmp	r3, #0
 801e052:	f43f ab13 	beq.w	801d67c <MotionGR_Update+0x1744>
 801e056:	f7fe bba0 	b.w	801c79a <MotionGR_Update+0x862>
 801e05a:	2b00      	cmp	r3, #0
 801e05c:	f040 8126 	bne.w	801e2ac <MotionGR_Update+0x2374>
 801e060:	2c00      	cmp	r4, #0
 801e062:	f47e ab9a 	bne.w	801c79a <MotionGR_Update+0x862>
 801e066:	4bb5      	ldr	r3, [pc, #724]	; (801e33c <MotionGR_Update+0x2404>)
 801e068:	f8cb 04ec 	str.w	r0, [fp, #1260]	; 0x4ec
 801e06c:	429d      	cmp	r5, r3
 801e06e:	f47e ab94 	bne.w	801c79a <MotionGR_Update+0x862>
 801e072:	2202      	movs	r2, #2
 801e074:	23c8      	movs	r3, #200	; 0xc8
 801e076:	f8cb 24ec 	str.w	r2, [fp, #1260]	; 0x4ec
 801e07a:	f8cb 34f0 	str.w	r3, [fp, #1264]	; 0x4f0
 801e07e:	f7fe bb8c 	b.w	801c79a <MotionGR_Update+0x862>
 801e082:	ed9b 7bd0 	vldr	d7, [fp, #832]	; 0x340
 801e086:	f04f 0a00 	mov.w	sl, #0
 801e08a:	ed8d 7b08 	vstr	d7, [sp, #32]
 801e08e:	4fac      	ldr	r7, [pc, #688]	; (801e340 <MotionGR_Update+0x2408>)
 801e090:	f8cd b078 	str.w	fp, [sp, #120]	; 0x78
 801e094:	4655      	mov	r5, sl
 801e096:	2601      	movs	r6, #1
 801e098:	46d1      	mov	r9, sl
 801e09a:	e007      	b.n	801e0ac <MotionGR_Update+0x2174>
 801e09c:	4644      	mov	r4, r8
 801e09e:	3501      	adds	r5, #1
 801e0a0:	2d19      	cmp	r5, #25
 801e0a2:	f107 0710 	add.w	r7, r7, #16
 801e0a6:	f106 0602 	add.w	r6, r6, #2
 801e0aa:	d012      	beq.n	801e0d2 <MotionGR_Update+0x219a>
 801e0ac:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 801e0b0:	ea4f 0849 	mov.w	r8, r9, lsl #1
 801e0b4:	4652      	mov	r2, sl
 801e0b6:	465b      	mov	r3, fp
 801e0b8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801e0bc:	f108 0801 	add.w	r8, r8, #1
 801e0c0:	4634      	mov	r4, r6
 801e0c2:	f7e2 fc8b 	bl	80009dc <__aeabi_dcmplt>
 801e0c6:	2800      	cmp	r0, #0
 801e0c8:	d0e8      	beq.n	801e09c <MotionGR_Update+0x2164>
 801e0ca:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801e0ce:	46a9      	mov	r9, r5
 801e0d0:	e7e5      	b.n	801e09e <MotionGR_Update+0x2166>
 801e0d2:	f8dd b078 	ldr.w	fp, [sp, #120]	; 0x78
 801e0d6:	eb0b 03c4 	add.w	r3, fp, r4, lsl #3
 801e0da:	ed93 7bce 	vldr	d7, [r3, #824]	; 0x338
 801e0de:	46ca      	mov	sl, r9
 801e0e0:	ed8d 7b1e 	vstr	d7, [sp, #120]	; 0x78
 801e0e4:	9b04      	ldr	r3, [sp, #16]
 801e0e6:	f7ff b9af 	b.w	801d448 <MotionGR_Update+0x1510>
 801e0ea:	ed9b 7bd0 	vldr	d7, [fp, #832]	; 0x340
 801e0ee:	2300      	movs	r3, #0
 801e0f0:	ed8d 7b08 	vstr	d7, [sp, #32]
 801e0f4:	9304      	str	r3, [sp, #16]
 801e0f6:	f8df 9248 	ldr.w	r9, [pc, #584]	; 801e340 <MotionGR_Update+0x2408>
 801e0fa:	461d      	mov	r5, r3
 801e0fc:	f04f 0801 	mov.w	r8, #1
 801e100:	e007      	b.n	801e112 <MotionGR_Update+0x21da>
 801e102:	46a2      	mov	sl, r4
 801e104:	3501      	adds	r5, #1
 801e106:	2d19      	cmp	r5, #25
 801e108:	f109 0910 	add.w	r9, r9, #16
 801e10c:	f108 0802 	add.w	r8, r8, #2
 801e110:	d011      	beq.n	801e136 <MotionGR_Update+0x21fe>
 801e112:	e9d9 6702 	ldrd	r6, r7, [r9, #8]
 801e116:	9b04      	ldr	r3, [sp, #16]
 801e118:	4632      	mov	r2, r6
 801e11a:	005c      	lsls	r4, r3, #1
 801e11c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801e120:	463b      	mov	r3, r7
 801e122:	3401      	adds	r4, #1
 801e124:	46c2      	mov	sl, r8
 801e126:	f7e2 fc77 	bl	8000a18 <__aeabi_dcmpgt>
 801e12a:	2800      	cmp	r0, #0
 801e12c:	d0e9      	beq.n	801e102 <MotionGR_Update+0x21ca>
 801e12e:	e9cd 6708 	strd	r6, r7, [sp, #32]
 801e132:	9504      	str	r5, [sp, #16]
 801e134:	e7e6      	b.n	801e104 <MotionGR_Update+0x21cc>
 801e136:	eb0b 0aca 	add.w	sl, fp, sl, lsl #3
 801e13a:	e9da 89ce 	ldrd	r8, r9, [sl, #824]	; 0x338
 801e13e:	9b04      	ldr	r3, [sp, #16]
 801e140:	f7ff b998 	b.w	801d474 <MotionGR_Update+0x153c>
 801e144:	ed9b 7bce 	vldr	d7, [fp, #824]	; 0x338
 801e148:	f04f 0800 	mov.w	r8, #0
 801e14c:	ed8d 7b08 	vstr	d7, [sp, #32]
 801e150:	4d7b      	ldr	r5, [pc, #492]	; (801e340 <MotionGR_Update+0x2408>)
 801e152:	4644      	mov	r4, r8
 801e154:	e005      	b.n	801e162 <MotionGR_Update+0x222a>
 801e156:	46ca      	mov	sl, r9
 801e158:	3401      	adds	r4, #1
 801e15a:	2c19      	cmp	r4, #25
 801e15c:	f105 0510 	add.w	r5, r5, #16
 801e160:	d011      	beq.n	801e186 <MotionGR_Update+0x224e>
 801e162:	e9d5 6700 	ldrd	r6, r7, [r5]
 801e166:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801e16a:	4632      	mov	r2, r6
 801e16c:	463b      	mov	r3, r7
 801e16e:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 801e172:	ea4f 0948 	mov.w	r9, r8, lsl #1
 801e176:	f7e2 fc4f 	bl	8000a18 <__aeabi_dcmpgt>
 801e17a:	2800      	cmp	r0, #0
 801e17c:	d0eb      	beq.n	801e156 <MotionGR_Update+0x221e>
 801e17e:	e9cd 6708 	strd	r6, r7, [sp, #32]
 801e182:	46a0      	mov	r8, r4
 801e184:	e7e8      	b.n	801e158 <MotionGR_Update+0x2220>
 801e186:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801e18a:	9329      	str	r3, [sp, #164]	; 0xa4
 801e18c:	9b04      	ldr	r3, [sp, #16]
 801e18e:	f7ff b943 	b.w	801d418 <MotionGR_Update+0x14e0>
 801e192:	ed9b 7bce 	vldr	d7, [fp, #824]	; 0x338
 801e196:	2500      	movs	r5, #0
 801e198:	ed8d 7b08 	vstr	d7, [sp, #32]
 801e19c:	f5a8 78e0 	sub.w	r8, r8, #448	; 0x1c0
 801e1a0:	462c      	mov	r4, r5
 801e1a2:	e005      	b.n	801e1b0 <MotionGR_Update+0x2278>
 801e1a4:	46d1      	mov	r9, sl
 801e1a6:	3401      	adds	r4, #1
 801e1a8:	2c19      	cmp	r4, #25
 801e1aa:	f108 0810 	add.w	r8, r8, #16
 801e1ae:	d011      	beq.n	801e1d4 <MotionGR_Update+0x229c>
 801e1b0:	e9d8 6700 	ldrd	r6, r7, [r8]
 801e1b4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801e1b8:	4630      	mov	r0, r6
 801e1ba:	4639      	mov	r1, r7
 801e1bc:	ea4f 0944 	mov.w	r9, r4, lsl #1
 801e1c0:	ea4f 0a45 	mov.w	sl, r5, lsl #1
 801e1c4:	f7e2 fc28 	bl	8000a18 <__aeabi_dcmpgt>
 801e1c8:	2800      	cmp	r0, #0
 801e1ca:	d0eb      	beq.n	801e1a4 <MotionGR_Update+0x226c>
 801e1cc:	e9cd 6708 	strd	r6, r7, [sp, #32]
 801e1d0:	4625      	mov	r5, r4
 801e1d2:	e7e8      	b.n	801e1a6 <MotionGR_Update+0x226e>
 801e1d4:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
 801e1d8:	9b04      	ldr	r3, [sp, #16]
 801e1da:	f7ff b908 	b.w	801d3ee <MotionGR_Update+0x14b6>
 801e1de:	f8db 3770 	ldr.w	r3, [fp, #1904]	; 0x770
 801e1e2:	2b00      	cmp	r3, #0
 801e1e4:	f43f acca 	beq.w	801db7c <MotionGR_Update+0x1c44>
 801e1e8:	e663      	b.n	801deb2 <MotionGR_Update+0x1f7a>
 801e1ea:	f8db 7290 	ldr.w	r7, [fp, #656]	; 0x290
 801e1ee:	3701      	adds	r7, #1
 801e1f0:	2332      	movs	r3, #50	; 0x32
 801e1f2:	2f01      	cmp	r7, #1
 801e1f4:	f8cb 7290 	str.w	r7, [fp, #656]	; 0x290
 801e1f8:	f8cb 3294 	str.w	r3, [fp, #660]	; 0x294
 801e1fc:	dd4a      	ble.n	801e294 <MotionGR_Update+0x235c>
 801e1fe:	f8db 6288 	ldr.w	r6, [fp, #648]	; 0x288
 801e202:	2e01      	cmp	r6, #1
 801e204:	e9db 23a0 	ldrd	r2, r3, [fp, #640]	; 0x280
 801e208:	f000 8085 	beq.w	801e316 <MotionGR_Update+0x23de>
 801e20c:	4630      	mov	r0, r6
 801e20e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801e212:	f7e2 f907 	bl	8000424 <__aeabi_i2d>
 801e216:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801e21a:	f7e2 fbdf 	bl	80009dc <__aeabi_dcmplt>
 801e21e:	bb90      	cbnz	r0, 801e286 <MotionGR_Update+0x234e>
 801e220:	4276      	negs	r6, r6
 801e222:	2f04      	cmp	r7, #4
 801e224:	f8cb 6288 	str.w	r6, [fp, #648]	; 0x288
 801e228:	d134      	bne.n	801e294 <MotionGR_Update+0x235c>
 801e22a:	2300      	movs	r3, #0
 801e22c:	2602      	movs	r6, #2
 801e22e:	f8cb 3290 	str.w	r3, [fp, #656]	; 0x290
 801e232:	2303      	movs	r3, #3
 801e234:	f8cb 6278 	str.w	r6, [fp, #632]	; 0x278
 801e238:	9348      	str	r3, [sp, #288]	; 0x120
 801e23a:	f7ff bbe1 	b.w	801da00 <MotionGR_Update+0x1ac8>
 801e23e:	ed9d 7b02 	vldr	d7, [sp, #8]
 801e242:	f8dd a010 	ldr.w	sl, [sp, #16]
 801e246:	ed8d 7b1e 	vstr	d7, [sp, #120]	; 0x78
 801e24a:	4653      	mov	r3, sl
 801e24c:	f7ff b8fc 	b.w	801d448 <MotionGR_Update+0x1510>
 801e250:	4b3a      	ldr	r3, [pc, #232]	; (801e33c <MotionGR_Update+0x2404>)
 801e252:	429d      	cmp	r5, r3
 801e254:	f47e aaa1 	bne.w	801c79a <MotionGR_Update+0x862>
 801e258:	23c8      	movs	r3, #200	; 0xc8
 801e25a:	f8cb 34f0 	str.w	r3, [fp, #1264]	; 0x4f0
 801e25e:	2303      	movs	r3, #3
 801e260:	f8cb 34ec 	str.w	r3, [fp, #1260]	; 0x4ec
 801e264:	f7ff b9c7 	b.w	801d5f6 <MotionGR_Update+0x16be>
 801e268:	9504      	str	r5, [sp, #16]
 801e26a:	e9d4 89ce 	ldrd	r8, r9, [r4, #824]	; 0x338
 801e26e:	462b      	mov	r3, r5
 801e270:	f7ff b900 	b.w	801d474 <MotionGR_Update+0x153c>
 801e274:	f8cb 6288 	str.w	r6, [fp, #648]	; 0x288
 801e278:	f7fd bff6 	b.w	801c268 <MotionGR_Update+0x330>
 801e27c:	2e00      	cmp	r6, #0
 801e27e:	f47f abbd 	bne.w	801d9fc <MotionGR_Update+0x1ac4>
 801e282:	f7fe be9b 	b.w	801cfbc <MotionGR_Update+0x1084>
 801e286:	2300      	movs	r3, #0
 801e288:	f8cb 3278 	str.w	r3, [fp, #632]	; 0x278
 801e28c:	f8cb 3290 	str.w	r3, [fp, #656]	; 0x290
 801e290:	f8cb 3288 	str.w	r3, [fp, #648]	; 0x288
 801e294:	f8db 6278 	ldr.w	r6, [fp, #632]	; 0x278
 801e298:	e9cb 45a0 	strd	r4, r5, [fp, #640]	; 0x280
 801e29c:	2e00      	cmp	r6, #0
 801e29e:	f43e ae8d 	beq.w	801cfbc <MotionGR_Update+0x1084>
 801e2a2:	2e01      	cmp	r6, #1
 801e2a4:	f47f abaa 	bne.w	801d9fc <MotionGR_Update+0x1ac4>
 801e2a8:	f7fd bfde 	b.w	801c268 <MotionGR_Update+0x330>
 801e2ac:	2b01      	cmp	r3, #1
 801e2ae:	f47f a99f 	bne.w	801d5f0 <MotionGR_Update+0x16b8>
 801e2b2:	4b22      	ldr	r3, [pc, #136]	; (801e33c <MotionGR_Update+0x2404>)
 801e2b4:	429d      	cmp	r5, r3
 801e2b6:	f47e aa70 	bne.w	801c79a <MotionGR_Update+0x862>
 801e2ba:	e6da      	b.n	801e072 <MotionGR_Update+0x213a>
 801e2bc:	46b0      	mov	r8, r6
 801e2be:	e45d      	b.n	801db7c <MotionGR_Update+0x1c44>
 801e2c0:	f8db 04d0 	ldr.w	r0, [fp, #1232]	; 0x4d0
 801e2c4:	f8db 34d4 	ldr.w	r3, [fp, #1236]	; 0x4d4
 801e2c8:	f8db 14c8 	ldr.w	r1, [fp, #1224]	; 0x4c8
 801e2cc:	f8db 24cc 	ldr.w	r2, [fp, #1228]	; 0x4cc
 801e2d0:	eb0b 1000 	add.w	r0, fp, r0, lsl #4
 801e2d4:	eb0b 1303 	add.w	r3, fp, r3, lsl #4
 801e2d8:	ed90 7bd0 	vldr	d7, [r0, #832]	; 0x340
 801e2dc:	e9d3 89d0 	ldrd	r8, r9, [r3, #832]	; 0x340
 801e2e0:	004b      	lsls	r3, r1, #1
 801e2e2:	931a      	str	r3, [sp, #104]	; 0x68
 801e2e4:	0113      	lsls	r3, r2, #4
 801e2e6:	ed8d 7b1e 	vstr	d7, [sp, #120]	; 0x78
 801e2ea:	9329      	str	r3, [sp, #164]	; 0xa4
 801e2ec:	f7ff b8ca 	b.w	801d484 <MotionGR_Update+0x154c>
 801e2f0:	a30f      	add	r3, pc, #60	; (adr r3, 801e330 <MotionGR_Update+0x23f8>)
 801e2f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e2f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 801e2fa:	f7e2 fb8d 	bl	8000a18 <__aeabi_dcmpgt>
 801e2fe:	2800      	cmp	r0, #0
 801e300:	f47f ac20 	bne.w	801db44 <MotionGR_Update+0x1c0c>
 801e304:	2e00      	cmp	r6, #0
 801e306:	f47f ac36 	bne.w	801db76 <MotionGR_Update+0x1c3e>
 801e30a:	2c01      	cmp	r4, #1
 801e30c:	d1d6      	bne.n	801e2bc <MotionGR_Update+0x2384>
 801e30e:	4635      	mov	r5, r6
 801e310:	e5ba      	b.n	801de88 <MotionGR_Update+0x1f50>
 801e312:	46b0      	mov	r8, r6
 801e314:	e693      	b.n	801e03e <MotionGR_Update+0x2106>
 801e316:	4610      	mov	r0, r2
 801e318:	4619      	mov	r1, r3
 801e31a:	2200      	movs	r2, #0
 801e31c:	4b09      	ldr	r3, [pc, #36]	; (801e344 <MotionGR_Update+0x240c>)
 801e31e:	f7e2 fb5d 	bl	80009dc <__aeabi_dcmplt>
 801e322:	2800      	cmp	r0, #0
 801e324:	d1af      	bne.n	801e286 <MotionGR_Update+0x234e>
 801e326:	f04f 36ff 	mov.w	r6, #4294967295
 801e32a:	e77a      	b.n	801e222 <MotionGR_Update+0x22ea>
 801e32c:	f3af 8000 	nop.w
 801e330:	47ae147b 	.word	0x47ae147b
 801e334:	3f847ae1 	.word	0x3f847ae1
 801e338:	20006088 	.word	0x20006088
 801e33c:	000fffff 	.word	0x000fffff
 801e340:	20005c68 	.word	0x20005c68
 801e344:	3ff00000 	.word	0x3ff00000
 801e348:	47ae147b 	.word	0x47ae147b
 801e34c:	3f947ae1 	.word	0x3f947ae1
 801e350:	2e00      	cmp	r6, #0
 801e352:	f47f ac10 	bne.w	801db76 <MotionGR_Update+0x1c3e>
 801e356:	2c01      	cmp	r4, #1
 801e358:	f47f ac10 	bne.w	801db7c <MotionGR_Update+0x1c44>
 801e35c:	a30a      	add	r3, pc, #40	; (adr r3, 801e388 <MotionGR_Update+0x2450>)
 801e35e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e362:	e9dd 0100 	ldrd	r0, r1, [sp]
 801e366:	f7e2 fb57 	bl	8000a18 <__aeabi_dcmpgt>
 801e36a:	2800      	cmp	r0, #0
 801e36c:	f43f ac06 	beq.w	801db7c <MotionGR_Update+0x1c44>
 801e370:	23c8      	movs	r3, #200	; 0xc8
 801e372:	f8cb 476c 	str.w	r4, [fp, #1900]	; 0x76c
 801e376:	f8cb 3770 	str.w	r3, [fp, #1904]	; 0x770
 801e37a:	e598      	b.n	801deae <MotionGR_Update+0x1f76>
 801e37c:	4680      	mov	r8, r0
 801e37e:	e65e      	b.n	801e03e <MotionGR_Update+0x2106>
 801e380:	462e      	mov	r6, r5
 801e382:	f04f 0800 	mov.w	r8, #0
 801e386:	e4c6      	b.n	801dd16 <MotionGR_Update+0x1dde>
 801e388:	bc6a7efa 	.word	0xbc6a7efa
 801e38c:	3f689374 	.word	0x3f689374

0801e390 <MotionID_Initialize>:
 801e390:	4911      	ldr	r1, [pc, #68]	; (801e3d8 <MotionID_Initialize+0x48>)
 801e392:	4a12      	ldr	r2, [pc, #72]	; (801e3dc <MotionID_Initialize+0x4c>)
 801e394:	680b      	ldr	r3, [r1, #0]
 801e396:	2001      	movs	r0, #1
 801e398:	f023 0301 	bic.w	r3, r3, #1
 801e39c:	600b      	str	r3, [r1, #0]
 801e39e:	4611      	mov	r1, r2
 801e3a0:	6010      	str	r0, [r2, #0]
 801e3a2:	2364      	movs	r3, #100	; 0x64
 801e3a4:	e001      	b.n	801e3aa <MotionID_Initialize+0x1a>
 801e3a6:	3b01      	subs	r3, #1
 801e3a8:	d009      	beq.n	801e3be <MotionID_Initialize+0x2e>
 801e3aa:	680a      	ldr	r2, [r1, #0]
 801e3ac:	2a00      	cmp	r2, #0
 801e3ae:	d1fa      	bne.n	801e3a6 <MotionID_Initialize+0x16>
 801e3b0:	4b0b      	ldr	r3, [pc, #44]	; (801e3e0 <MotionID_Initialize+0x50>)
 801e3b2:	4a0c      	ldr	r2, [pc, #48]	; (801e3e4 <MotionID_Initialize+0x54>)
 801e3b4:	601a      	str	r2, [r3, #0]
 801e3b6:	681a      	ldr	r2, [r3, #0]
 801e3b8:	4b0b      	ldr	r3, [pc, #44]	; (801e3e8 <MotionID_Initialize+0x58>)
 801e3ba:	429a      	cmp	r2, r3
 801e3bc:	d007      	beq.n	801e3ce <MotionID_Initialize+0x3e>
 801e3be:	4b0b      	ldr	r3, [pc, #44]	; (801e3ec <MotionID_Initialize+0x5c>)
 801e3c0:	4a0b      	ldr	r2, [pc, #44]	; (801e3f0 <MotionID_Initialize+0x60>)
 801e3c2:	681b      	ldr	r3, [r3, #0]
 801e3c4:	0c1b      	lsrs	r3, r3, #16
 801e3c6:	041b      	lsls	r3, r3, #16
 801e3c8:	4293      	cmp	r3, r2
 801e3ca:	d000      	beq.n	801e3ce <MotionID_Initialize+0x3e>
 801e3cc:	e7fe      	b.n	801e3cc <MotionID_Initialize+0x3c>
 801e3ce:	4b09      	ldr	r3, [pc, #36]	; (801e3f4 <MotionID_Initialize+0x64>)
 801e3d0:	2201      	movs	r2, #1
 801e3d2:	701a      	strb	r2, [r3, #0]
 801e3d4:	4770      	bx	lr
 801e3d6:	bf00      	nop
 801e3d8:	e0002000 	.word	0xe0002000
 801e3dc:	40023008 	.word	0x40023008
 801e3e0:	40023000 	.word	0x40023000
 801e3e4:	f407a5c2 	.word	0xf407a5c2
 801e3e8:	b5e8b5cd 	.word	0xb5e8b5cd
 801e3ec:	100007f8 	.word	0x100007f8
 801e3f0:	aa550000 	.word	0xaa550000
 801e3f4:	20006af4 	.word	0x20006af4

0801e3f8 <MotionID_Update>:
 801e3f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e3fc:	4cc4      	ldr	r4, [pc, #784]	; (801e710 <MotionID_Update+0x318>)
 801e3fe:	7823      	ldrb	r3, [r4, #0]
 801e400:	ed2d 8b06 	vpush	{d8-d10}
 801e404:	b923      	cbnz	r3, 801e410 <MotionID_Update+0x18>
 801e406:	ecbd 8b06 	vpop	{d8-d10}
 801e40a:	700b      	strb	r3, [r1, #0]
 801e40c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e410:	7866      	ldrb	r6, [r4, #1]
 801e412:	f8d0 a000 	ldr.w	sl, [r0]
 801e416:	f8d0 9004 	ldr.w	r9, [r0, #4]
 801e41a:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801e41e:	460d      	mov	r5, r1
 801e420:	2e00      	cmp	r6, #0
 801e422:	f040 8119 	bne.w	801e658 <MotionID_Update+0x260>
 801e426:	4631      	mov	r1, r6
 801e428:	22bc      	movs	r2, #188	; 0xbc
 801e42a:	f104 0008 	add.w	r0, r4, #8
 801e42e:	f004 fa33 	bl	8022898 <memset>
 801e432:	4631      	mov	r1, r6
 801e434:	22bc      	movs	r2, #188	; 0xbc
 801e436:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
 801e43a:	f004 fa2d 	bl	8022898 <memset>
 801e43e:	4631      	mov	r1, r6
 801e440:	22bc      	movs	r2, #188	; 0xbc
 801e442:	f504 70c4 	add.w	r0, r4, #392	; 0x188
 801e446:	f004 fa27 	bl	8022898 <memset>
 801e44a:	2301      	movs	r3, #1
 801e44c:	461f      	mov	r7, r3
 801e44e:	f8c4 a004 	str.w	sl, [r4, #4]
 801e452:	f8c4 90c4 	str.w	r9, [r4, #196]	; 0xc4
 801e456:	f8c4 8184 	str.w	r8, [r4, #388]	; 0x184
 801e45a:	7063      	strb	r3, [r4, #1]
 801e45c:	461e      	mov	r6, r3
 801e45e:	4bad      	ldr	r3, [pc, #692]	; (801e714 <MotionID_Update+0x31c>)
 801e460:	ed9f 8aad 	vldr	s16, [pc, #692]	; 801e718 <MotionID_Update+0x320>
 801e464:	f103 02c0 	add.w	r2, r3, #192	; 0xc0
 801e468:	eef0 8a48 	vmov.f32	s17, s16
 801e46c:	eeb0 9a48 	vmov.f32	s18, s16
 801e470:	eef0 9a48 	vmov.f32	s19, s16
 801e474:	eeb0 aa48 	vmov.f32	s20, s16
 801e478:	eeb0 6a48 	vmov.f32	s12, s16
 801e47c:	4610      	mov	r0, r2
 801e47e:	f503 71c0 	add.w	r1, r3, #384	; 0x180
 801e482:	ecf3 6a01 	vldmia	r3!, {s13}
 801e486:	ecb2 7a01 	vldmia	r2!, {s14}
 801e48a:	ecf1 7a01 	vldmia	r1!, {s15}
 801e48e:	4283      	cmp	r3, r0
 801e490:	ee36 6a26 	vadd.f32	s12, s12, s13
 801e494:	eea6 9aa6 	vfma.f32	s18, s13, s13
 801e498:	ee3a aa07 	vadd.f32	s20, s20, s14
 801e49c:	eee7 8a07 	vfma.f32	s17, s14, s14
 801e4a0:	ee79 9aa7 	vadd.f32	s19, s19, s15
 801e4a4:	eea7 8aa7 	vfma.f32	s16, s15, s15
 801e4a8:	d1eb      	bne.n	801e482 <MotionID_Update+0x8a>
 801e4aa:	ee16 0a10 	vmov	r0, s12
 801e4ae:	f7e1 ffcb 	bl	8000448 <__aeabi_f2d>
 801e4b2:	a387      	add	r3, pc, #540	; (adr r3, 801e6d0 <MotionID_Update+0x2d8>)
 801e4b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e4b8:	f7e2 f81e 	bl	80004f8 <__aeabi_dmul>
 801e4bc:	f7e2 fb14 	bl	8000ae8 <__aeabi_d2f>
 801e4c0:	ee0a 0a90 	vmov	s21, r0
 801e4c4:	ee1a 0a10 	vmov	r0, s20
 801e4c8:	f7e1 ffbe 	bl	8000448 <__aeabi_f2d>
 801e4cc:	a380      	add	r3, pc, #512	; (adr r3, 801e6d0 <MotionID_Update+0x2d8>)
 801e4ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e4d2:	f7e2 f811 	bl	80004f8 <__aeabi_dmul>
 801e4d6:	f7e2 fb07 	bl	8000ae8 <__aeabi_d2f>
 801e4da:	ee0a 0a10 	vmov	s20, r0
 801e4de:	ee19 0a90 	vmov	r0, s19
 801e4e2:	f7e1 ffb1 	bl	8000448 <__aeabi_f2d>
 801e4e6:	a37a      	add	r3, pc, #488	; (adr r3, 801e6d0 <MotionID_Update+0x2d8>)
 801e4e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e4ec:	f7e2 f804 	bl	80004f8 <__aeabi_dmul>
 801e4f0:	f7e2 fafa 	bl	8000ae8 <__aeabi_d2f>
 801e4f4:	ee09 0a90 	vmov	s19, r0
 801e4f8:	ee19 0a10 	vmov	r0, s18
 801e4fc:	f7e1 ffa4 	bl	8000448 <__aeabi_f2d>
 801e500:	a373      	add	r3, pc, #460	; (adr r3, 801e6d0 <MotionID_Update+0x2d8>)
 801e502:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e506:	f7e1 fff7 	bl	80004f8 <__aeabi_dmul>
 801e50a:	ee6a 7aaa 	vmul.f32	s15, s21, s21
 801e50e:	4680      	mov	r8, r0
 801e510:	ee17 0a90 	vmov	r0, s15
 801e514:	4689      	mov	r9, r1
 801e516:	f7e1 ff97 	bl	8000448 <__aeabi_f2d>
 801e51a:	4602      	mov	r2, r0
 801e51c:	460b      	mov	r3, r1
 801e51e:	4640      	mov	r0, r8
 801e520:	4649      	mov	r1, r9
 801e522:	f7e1 fe31 	bl	8000188 <__aeabi_dsub>
 801e526:	f7e2 fadf 	bl	8000ae8 <__aeabi_d2f>
 801e52a:	ee09 0a10 	vmov	s18, r0
 801e52e:	ee18 0a90 	vmov	r0, s17
 801e532:	f7e1 ff89 	bl	8000448 <__aeabi_f2d>
 801e536:	a366      	add	r3, pc, #408	; (adr r3, 801e6d0 <MotionID_Update+0x2d8>)
 801e538:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e53c:	f7e1 ffdc 	bl	80004f8 <__aeabi_dmul>
 801e540:	ee6a 7a0a 	vmul.f32	s15, s20, s20
 801e544:	4680      	mov	r8, r0
 801e546:	ee17 0a90 	vmov	r0, s15
 801e54a:	4689      	mov	r9, r1
 801e54c:	f7e1 ff7c 	bl	8000448 <__aeabi_f2d>
 801e550:	4602      	mov	r2, r0
 801e552:	460b      	mov	r3, r1
 801e554:	4640      	mov	r0, r8
 801e556:	4649      	mov	r1, r9
 801e558:	f7e1 fe16 	bl	8000188 <__aeabi_dsub>
 801e55c:	f7e2 fac4 	bl	8000ae8 <__aeabi_d2f>
 801e560:	ee07 0a90 	vmov	s15, r0
 801e564:	ee18 0a10 	vmov	r0, s16
 801e568:	ee39 9a27 	vadd.f32	s18, s18, s15
 801e56c:	f7e1 ff6c 	bl	8000448 <__aeabi_f2d>
 801e570:	a357      	add	r3, pc, #348	; (adr r3, 801e6d0 <MotionID_Update+0x2d8>)
 801e572:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e576:	f7e1 ffbf 	bl	80004f8 <__aeabi_dmul>
 801e57a:	ee69 7aa9 	vmul.f32	s15, s19, s19
 801e57e:	4680      	mov	r8, r0
 801e580:	ee17 0a90 	vmov	r0, s15
 801e584:	4689      	mov	r9, r1
 801e586:	f7e1 ff5f 	bl	8000448 <__aeabi_f2d>
 801e58a:	4602      	mov	r2, r0
 801e58c:	460b      	mov	r3, r1
 801e58e:	4640      	mov	r0, r8
 801e590:	4649      	mov	r1, r9
 801e592:	f7e1 fdf9 	bl	8000188 <__aeabi_dsub>
 801e596:	f7e2 faa7 	bl	8000ae8 <__aeabi_d2f>
 801e59a:	ee07 0a90 	vmov	s15, r0
 801e59e:	ee39 9a27 	vadd.f32	s18, s18, s15
 801e5a2:	ee19 0a10 	vmov	r0, s18
 801e5a6:	f7e1 ff4f 	bl	8000448 <__aeabi_f2d>
 801e5aa:	a34b      	add	r3, pc, #300	; (adr r3, 801e6d8 <MotionID_Update+0x2e0>)
 801e5ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e5b0:	4680      	mov	r8, r0
 801e5b2:	4689      	mov	r9, r1
 801e5b4:	f7e2 fa12 	bl	80009dc <__aeabi_dcmplt>
 801e5b8:	2800      	cmp	r0, #0
 801e5ba:	d172      	bne.n	801e6a2 <MotionID_Update+0x2aa>
 801e5bc:	a348      	add	r3, pc, #288	; (adr r3, 801e6e0 <MotionID_Update+0x2e8>)
 801e5be:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e5c2:	4640      	mov	r0, r8
 801e5c4:	4649      	mov	r1, r9
 801e5c6:	f7e2 fa09 	bl	80009dc <__aeabi_dcmplt>
 801e5ca:	2800      	cmp	r0, #0
 801e5cc:	d16d      	bne.n	801e6aa <MotionID_Update+0x2b2>
 801e5ce:	a346      	add	r3, pc, #280	; (adr r3, 801e6e8 <MotionID_Update+0x2f0>)
 801e5d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e5d4:	4640      	mov	r0, r8
 801e5d6:	4649      	mov	r1, r9
 801e5d8:	f7e2 fa00 	bl	80009dc <__aeabi_dcmplt>
 801e5dc:	2800      	cmp	r0, #0
 801e5de:	d166      	bne.n	801e6ae <MotionID_Update+0x2b6>
 801e5e0:	a343      	add	r3, pc, #268	; (adr r3, 801e6f0 <MotionID_Update+0x2f8>)
 801e5e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e5e6:	4640      	mov	r0, r8
 801e5e8:	4649      	mov	r1, r9
 801e5ea:	f7e2 f9f7 	bl	80009dc <__aeabi_dcmplt>
 801e5ee:	2800      	cmp	r0, #0
 801e5f0:	d15f      	bne.n	801e6b2 <MotionID_Update+0x2ba>
 801e5f2:	a341      	add	r3, pc, #260	; (adr r3, 801e6f8 <MotionID_Update+0x300>)
 801e5f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e5f8:	4640      	mov	r0, r8
 801e5fa:	4649      	mov	r1, r9
 801e5fc:	f7e2 f9ee 	bl	80009dc <__aeabi_dcmplt>
 801e600:	2800      	cmp	r0, #0
 801e602:	d158      	bne.n	801e6b6 <MotionID_Update+0x2be>
 801e604:	a33e      	add	r3, pc, #248	; (adr r3, 801e700 <MotionID_Update+0x308>)
 801e606:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e60a:	4640      	mov	r0, r8
 801e60c:	4649      	mov	r1, r9
 801e60e:	f7e2 f9e5 	bl	80009dc <__aeabi_dcmplt>
 801e612:	2800      	cmp	r0, #0
 801e614:	d151      	bne.n	801e6ba <MotionID_Update+0x2c2>
 801e616:	4640      	mov	r0, r8
 801e618:	4649      	mov	r1, r9
 801e61a:	a33b      	add	r3, pc, #236	; (adr r3, 801e708 <MotionID_Update+0x310>)
 801e61c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e620:	f7e2 f9dc 	bl	80009dc <__aeabi_dcmplt>
 801e624:	2800      	cmp	r0, #0
 801e626:	d14a      	bne.n	801e6be <MotionID_Update+0x2c6>
 801e628:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801e62c:	eeb4 9ae7 	vcmpe.f32	s18, s15
 801e630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e634:	d447      	bmi.n	801e6c6 <MotionID_Update+0x2ce>
 801e636:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 801e63a:	eeb4 9ae7 	vcmpe.f32	s18, s15
 801e63e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e642:	d43e      	bmi.n	801e6c2 <MotionID_Update+0x2ca>
 801e644:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
 801e648:	eeb4 9ae7 	vcmpe.f32	s18, s15
 801e64c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e650:	bf4c      	ite	mi
 801e652:	2309      	movmi	r3, #9
 801e654:	230a      	movpl	r3, #10
 801e656:	e025      	b.n	801e6a4 <MotionID_Update+0x2ac>
 801e658:	78a2      	ldrb	r2, [r4, #2]
 801e65a:	4b30      	ldr	r3, [pc, #192]	; (801e71c <MotionID_Update+0x324>)
 801e65c:	1c56      	adds	r6, r2, #1
 801e65e:	fba3 1306 	umull	r1, r3, r3, r6
 801e662:	095b      	lsrs	r3, r3, #5
 801e664:	78e1      	ldrb	r1, [r4, #3]
 801e666:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801e66a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e66e:	eba6 1303 	sub.w	r3, r6, r3, lsl #4
 801e672:	1c4f      	adds	r7, r1, #1
 801e674:	2001      	movs	r0, #1
 801e676:	f8c2 a004 	str.w	sl, [r2, #4]
 801e67a:	f8c2 90c4 	str.w	r9, [r2, #196]	; 0xc4
 801e67e:	f8c2 8184 	str.w	r8, [r2, #388]	; 0x184
 801e682:	b2de      	uxtb	r6, r3
 801e684:	f007 071f 	and.w	r7, r7, #31
 801e688:	7060      	strb	r0, [r4, #1]
 801e68a:	2900      	cmp	r1, #0
 801e68c:	f43f aee7 	beq.w	801e45e <MotionID_Update+0x66>
 801e690:	f894 3244 	ldrb.w	r3, [r4, #580]	; 0x244
 801e694:	70a6      	strb	r6, [r4, #2]
 801e696:	ecbd 8b06 	vpop	{d8-d10}
 801e69a:	70e7      	strb	r7, [r4, #3]
 801e69c:	702b      	strb	r3, [r5, #0]
 801e69e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e6a2:	2300      	movs	r3, #0
 801e6a4:	f884 3244 	strb.w	r3, [r4, #580]	; 0x244
 801e6a8:	e7f4      	b.n	801e694 <MotionID_Update+0x29c>
 801e6aa:	2301      	movs	r3, #1
 801e6ac:	e7fa      	b.n	801e6a4 <MotionID_Update+0x2ac>
 801e6ae:	2302      	movs	r3, #2
 801e6b0:	e7f8      	b.n	801e6a4 <MotionID_Update+0x2ac>
 801e6b2:	2303      	movs	r3, #3
 801e6b4:	e7f6      	b.n	801e6a4 <MotionID_Update+0x2ac>
 801e6b6:	2304      	movs	r3, #4
 801e6b8:	e7f4      	b.n	801e6a4 <MotionID_Update+0x2ac>
 801e6ba:	2305      	movs	r3, #5
 801e6bc:	e7f2      	b.n	801e6a4 <MotionID_Update+0x2ac>
 801e6be:	2306      	movs	r3, #6
 801e6c0:	e7f0      	b.n	801e6a4 <MotionID_Update+0x2ac>
 801e6c2:	2308      	movs	r3, #8
 801e6c4:	e7ee      	b.n	801e6a4 <MotionID_Update+0x2ac>
 801e6c6:	2307      	movs	r3, #7
 801e6c8:	e7ec      	b.n	801e6a4 <MotionID_Update+0x2ac>
 801e6ca:	bf00      	nop
 801e6cc:	f3af 8000 	nop.w
 801e6d0:	55555555 	.word	0x55555555
 801e6d4:	3f955555 	.word	0x3f955555
 801e6d8:	7110e454 	.word	0x7110e454
 801e6dc:	3ec92a73 	.word	0x3ec92a73
 801e6e0:	eb1c432d 	.word	0xeb1c432d
 801e6e4:	3f1a36e2 	.word	0x3f1a36e2
 801e6e8:	30553261 	.word	0x30553261
 801e6ec:	3f33a92a 	.word	0x3f33a92a
 801e6f0:	eb1c432d 	.word	0xeb1c432d
 801e6f4:	3f4a36e2 	.word	0x3f4a36e2
 801e6f8:	d2f1a9fc 	.word	0xd2f1a9fc
 801e6fc:	3f50624d 	.word	0x3f50624d
 801e700:	47ae147b 	.word	0x47ae147b
 801e704:	3f847ae1 	.word	0x3f847ae1
 801e708:	33333333 	.word	0x33333333
 801e70c:	3fd33333 	.word	0x3fd33333
 801e710:	20006af4 	.word	0x20006af4
 801e714:	20006af8 	.word	0x20006af8
 801e718:	00000000 	.word	0x00000000
 801e71c:	aaaaaaab 	.word	0xaaaaaaab

0801e720 <GetPeakValuesAndMaxIndex.part.0>:
 801e720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e724:	4617      	mov	r7, r2
 801e726:	3a01      	subs	r2, #1
 801e728:	b292      	uxth	r2, r2
 801e72a:	f103 0408 	add.w	r4, r3, #8
 801e72e:	b083      	sub	sp, #12
 801e730:	3902      	subs	r1, #2
 801e732:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 801e736:	461e      	mov	r6, r3
 801e738:	f831 5f02 	ldrh.w	r5, [r1, #2]!
 801e73c:	3596      	adds	r5, #150	; 0x96
 801e73e:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 801e742:	e9d5 8900 	ldrd	r8, r9, [r5]
 801e746:	e8e6 8902 	strd	r8, r9, [r6], #8
 801e74a:	4296      	cmp	r6, r2
 801e74c:	d1f4      	bne.n	801e738 <GetPeakValuesAndMaxIndex.part.0+0x18>
 801e74e:	ed93 7b00 	vldr	d7, [r3]
 801e752:	ed8d 7b00 	vstr	d7, [sp]
 801e756:	2501      	movs	r5, #1
 801e758:	2600      	movs	r6, #0
 801e75a:	fa1f f885 	uxth.w	r8, r5
 801e75e:	4547      	cmp	r7, r8
 801e760:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e764:	d90b      	bls.n	801e77e <GetPeakValuesAndMaxIndex.part.0+0x5e>
 801e766:	e8f4 ab02 	ldrd	sl, fp, [r4], #8
 801e76a:	4650      	mov	r0, sl
 801e76c:	4659      	mov	r1, fp
 801e76e:	f7e2 f953 	bl	8000a18 <__aeabi_dcmpgt>
 801e772:	b110      	cbz	r0, 801e77a <GetPeakValuesAndMaxIndex.part.0+0x5a>
 801e774:	e9cd ab00 	strd	sl, fp, [sp]
 801e778:	4646      	mov	r6, r8
 801e77a:	3501      	adds	r5, #1
 801e77c:	e7ed      	b.n	801e75a <GetPeakValuesAndMaxIndex.part.0+0x3a>
 801e77e:	4630      	mov	r0, r6
 801e780:	b003      	add	sp, #12
 801e782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801e788 <runStepDetection.constprop.4>:
 801e788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e78c:	f8df 9430 	ldr.w	r9, [pc, #1072]	; 801ebc0 <runStepDetection.constprop.4+0x438>
 801e790:	f6ad 7de4 	subw	sp, sp, #4068	; 0xfe4
 801e794:	f8d9 307c 	ldr.w	r3, [r9, #124]	; 0x7c
 801e798:	9318      	str	r3, [sp, #96]	; 0x60
 801e79a:	2300      	movs	r3, #0
 801e79c:	2200      	movs	r2, #0
 801e79e:	e9c0 3301 	strd	r3, r3, [r0, #4]
 801e7a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801e7a6:	e9c0 3307 	strd	r3, r3, [r0, #28]
 801e7aa:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
 801e7ae:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
 801e7b2:	e9c0 3310 	strd	r3, r3, [r0, #64]	; 0x40
 801e7b6:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
 801e7ba:	e9c0 3316 	strd	r3, r3, [r0, #88]	; 0x58
 801e7be:	e9c0 3319 	strd	r3, r3, [r0, #100]	; 0x64
 801e7c2:	6703      	str	r3, [r0, #112]	; 0x70
 801e7c4:	6743      	str	r3, [r0, #116]	; 0x74
 801e7c6:	9325      	str	r3, [sp, #148]	; 0x94
 801e7c8:	f509 635f 	add.w	r3, r9, #3568	; 0xdf0
 801e7cc:	9024      	str	r0, [sp, #144]	; 0x90
 801e7ce:	60c2      	str	r2, [r0, #12]
 801e7d0:	6182      	str	r2, [r0, #24]
 801e7d2:	6242      	str	r2, [r0, #36]	; 0x24
 801e7d4:	6302      	str	r2, [r0, #48]	; 0x30
 801e7d6:	63c2      	str	r2, [r0, #60]	; 0x3c
 801e7d8:	6482      	str	r2, [r0, #72]	; 0x48
 801e7da:	6542      	str	r2, [r0, #84]	; 0x54
 801e7dc:	6602      	str	r2, [r0, #96]	; 0x60
 801e7de:	930d      	str	r3, [sp, #52]	; 0x34
 801e7e0:	2301      	movs	r3, #1
 801e7e2:	66c2      	str	r2, [r0, #108]	; 0x6c
 801e7e4:	6782      	str	r2, [r0, #120]	; 0x78
 801e7e6:	f609 1818 	addw	r8, r9, #2328	; 0x918
 801e7ea:	9321      	str	r3, [sp, #132]	; 0x84
 801e7ec:	f8cd 9000 	str.w	r9, [sp]
 801e7f0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801e7f2:	9918      	ldr	r1, [sp, #96]	; 0x60
 801e7f4:	9d00      	ldr	r5, [sp, #0]
 801e7f6:	e9d4 2300 	ldrd	r2, r3, [r4]
 801e7fa:	1c4e      	adds	r6, r1, #1
 801e7fc:	67ee      	str	r6, [r5, #124]	; 0x7c
 801e7fe:	4610      	mov	r0, r2
 801e800:	4619      	mov	r1, r3
 801e802:	961d      	str	r6, [sp, #116]	; 0x74
 801e804:	f7e1 fe78 	bl	80004f8 <__aeabi_dmul>
 801e808:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 801e80c:	460d      	mov	r5, r1
 801e80e:	4604      	mov	r4, r0
 801e810:	4632      	mov	r2, r6
 801e812:	463b      	mov	r3, r7
 801e814:	4630      	mov	r0, r6
 801e816:	4639      	mov	r1, r7
 801e818:	f7e1 fe6e 	bl	80004f8 <__aeabi_dmul>
 801e81c:	4602      	mov	r2, r0
 801e81e:	4620      	mov	r0, r4
 801e820:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801e822:	460b      	mov	r3, r1
 801e824:	4629      	mov	r1, r5
 801e826:	f7e1 fcb1 	bl	800018c <__adddf3>
 801e82a:	e9d4 6704 	ldrd	r6, r7, [r4, #16]
 801e82e:	460d      	mov	r5, r1
 801e830:	4604      	mov	r4, r0
 801e832:	4632      	mov	r2, r6
 801e834:	463b      	mov	r3, r7
 801e836:	4630      	mov	r0, r6
 801e838:	4639      	mov	r1, r7
 801e83a:	f7e1 fe5d 	bl	80004f8 <__aeabi_dmul>
 801e83e:	460b      	mov	r3, r1
 801e840:	4602      	mov	r2, r0
 801e842:	4629      	mov	r1, r5
 801e844:	4620      	mov	r0, r4
 801e846:	f7e1 fca1 	bl	800018c <__adddf3>
 801e84a:	f002 fca5 	bl	8021198 <sqrt>
 801e84e:	468a      	mov	sl, r1
 801e850:	49d7      	ldr	r1, [pc, #860]	; (801ebb0 <runStepDetection.constprop.4+0x428>)
 801e852:	4dd8      	ldr	r5, [pc, #864]	; (801ebb4 <runStepDetection.constprop.4+0x42c>)
 801e854:	4fd8      	ldr	r7, [pc, #864]	; (801ebb8 <runStepDetection.constprop.4+0x430>)
 801e856:	4681      	mov	r9, r0
 801e858:	f44f 6295 	mov.w	r2, #1192	; 0x4a8
 801e85c:	f1a1 0008 	sub.w	r0, r1, #8
 801e860:	e9cd 9a1a 	strd	r9, sl, [sp, #104]	; 0x68
 801e864:	f003 ffff 	bl	8022866 <memmove>
 801e868:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801e86a:	4613      	mov	r3, r2
 801e86c:	fba5 3403 	umull	r3, r4, r5, r3
 801e870:	ec4a 9b17 	vmov	d7, r9, sl
 801e874:	2364      	movs	r3, #100	; 0x64
 801e876:	0964      	lsrs	r4, r4, #5
 801e878:	fb03 2414 	mls	r4, r3, r4, r2
 801e87c:	ed87 7b00 	vstr	d7, [r7]
 801e880:	2200      	movs	r2, #0
 801e882:	4bce      	ldr	r3, [pc, #824]	; (801ebbc <runStepDetection.constprop.4+0x434>)
 801e884:	9f00      	ldr	r7, [sp, #0]
 801e886:	4648      	mov	r0, r9
 801e888:	4651      	mov	r1, sl
 801e88a:	f7e1 fc7d 	bl	8000188 <__aeabi_dsub>
 801e88e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801e890:	fba5 2306 	umull	r2, r3, r5, r6
 801e894:	34bf      	adds	r4, #191	; 0xbf
 801e896:	091b      	lsrs	r3, r3, #4
 801e898:	2232      	movs	r2, #50	; 0x32
 801e89a:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
 801e89e:	fb02 6313 	mls	r3, r2, r3, r6
 801e8a2:	e9c4 0100 	strd	r0, r1, [r4]
 801e8a6:	b913      	cbnz	r3, 801e8ae <runStepDetection.constprop.4+0x126>
 801e8a8:	2e64      	cmp	r6, #100	; 0x64
 801e8aa:	f201 8126 	bhi.w	801fafa <runStepDetection.constprop.4+0x1372>
 801e8ae:	ed98 7b00 	vldr	d7, [r8]
 801e8b2:	ed8d 7b1e 	vstr	d7, [sp, #120]	; 0x78
 801e8b6:	9900      	ldr	r1, [sp, #0]
 801e8b8:	f8df a308 	ldr.w	sl, [pc, #776]	; 801ebc4 <runStepDetection.constprop.4+0x43c>
 801e8bc:	f8d1 5230 	ldr.w	r5, [r1, #560]	; 0x230
 801e8c0:	fbaa 3405 	umull	r3, r4, sl, r5
 801e8c4:	0864      	lsrs	r4, r4, #1
 801e8c6:	f105 0309 	add.w	r3, r5, #9
 801e8ca:	ed9d 7b1a 	vldr	d7, [sp, #104]	; 0x68
 801e8ce:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
 801e8d2:	fbaa 0203 	umull	r0, r2, sl, r3
 801e8d6:	1b2c      	subs	r4, r5, r4
 801e8d8:	4608      	mov	r0, r1
 801e8da:	0852      	lsrs	r2, r2, #1
 801e8dc:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 801e8e0:	ed81 7b20 	vstr	d7, [r1, #128]	; 0x80
 801e8e4:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 801e8e8:	1a9b      	subs	r3, r3, r2
 801e8ea:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801e8ee:	ed93 7b20 	vldr	d7, [r3, #128]	; 0x80
 801e8f2:	a39d      	add	r3, pc, #628	; (adr r3, 801eb68 <runStepDetection.constprop.4+0x3e0>)
 801e8f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e8f8:	ec51 0b17 	vmov	r0, r1, d7
 801e8fc:	ed8d 7b02 	vstr	d7, [sp, #8]
 801e900:	f7e1 fdfa 	bl	80004f8 <__aeabi_dmul>
 801e904:	1deb      	adds	r3, r5, #7
 801e906:	fbaa 2903 	umull	r2, r9, sl, r3
 801e90a:	ea4f 0959 	mov.w	r9, r9, lsr #1
 801e90e:	460f      	mov	r7, r1
 801e910:	eb09 09c9 	add.w	r9, r9, r9, lsl #3
 801e914:	9900      	ldr	r1, [sp, #0]
 801e916:	eba3 0909 	sub.w	r9, r3, r9
 801e91a:	eb01 03c9 	add.w	r3, r1, r9, lsl #3
 801e91e:	ed93 7b20 	vldr	d7, [r3, #128]	; 0x80
 801e922:	f105 0c08 	add.w	ip, r5, #8
 801e926:	fbaa 3b0c 	umull	r3, fp, sl, ip
 801e92a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 801e92e:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 801e932:	4606      	mov	r6, r0
 801e934:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
 801e938:	ec51 0b17 	vmov	r0, r1, d7
 801e93c:	e9c4 6732 	strd	r6, r7, [r4, #200]	; 0xc8
 801e940:	a38b      	add	r3, pc, #556	; (adr r3, 801eb70 <runStepDetection.constprop.4+0x3e8>)
 801e942:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e946:	eb0b 0bcb 	add.w	fp, fp, fp, lsl #3
 801e94a:	ebac 0b0b 	sub.w	fp, ip, fp
 801e94e:	ed8d 7b04 	vstr	d7, [sp, #16]
 801e952:	f7e1 fdd1 	bl	80004f8 <__aeabi_dmul>
 801e956:	4632      	mov	r2, r6
 801e958:	463b      	mov	r3, r7
 801e95a:	f7e1 fc17 	bl	800018c <__adddf3>
 801e95e:	9a00      	ldr	r2, [sp, #0]
 801e960:	eb0b 0b8b 	add.w	fp, fp, fp, lsl #2
 801e964:	eb02 03cb 	add.w	r3, r2, fp, lsl #3
 801e968:	4606      	mov	r6, r0
 801e96a:	460f      	mov	r7, r1
 801e96c:	930e      	str	r3, [sp, #56]	; 0x38
 801e96e:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	; 0xc8
 801e972:	a381      	add	r3, pc, #516	; (adr r3, 801eb78 <runStepDetection.constprop.4+0x3f0>)
 801e974:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e978:	f7e1 fdbe 	bl	80004f8 <__aeabi_dmul>
 801e97c:	4602      	mov	r2, r0
 801e97e:	460b      	mov	r3, r1
 801e980:	4630      	mov	r0, r6
 801e982:	4639      	mov	r1, r7
 801e984:	f7e1 fc00 	bl	8000188 <__aeabi_dsub>
 801e988:	4606      	mov	r6, r0
 801e98a:	460f      	mov	r7, r1
 801e98c:	e9c4 6732 	strd	r6, r7, [r4, #200]	; 0xc8
 801e990:	9b00      	ldr	r3, [sp, #0]
 801e992:	eb09 0989 	add.w	r9, r9, r9, lsl #2
 801e996:	eb03 01c9 	add.w	r1, r3, r9, lsl #3
 801e99a:	9110      	str	r1, [sp, #64]	; 0x40
 801e99c:	a378      	add	r3, pc, #480	; (adr r3, 801eb80 <runStepDetection.constprop.4+0x3f8>)
 801e99e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e9a2:	e9d1 0132 	ldrd	r0, r1, [r1, #200]	; 0xc8
 801e9a6:	f7e1 fda7 	bl	80004f8 <__aeabi_dmul>
 801e9aa:	4602      	mov	r2, r0
 801e9ac:	460b      	mov	r3, r1
 801e9ae:	4630      	mov	r0, r6
 801e9b0:	4639      	mov	r1, r7
 801e9b2:	f7e1 fbe9 	bl	8000188 <__aeabi_dsub>
 801e9b6:	1d6b      	adds	r3, r5, #5
 801e9b8:	fbaa c903 	umull	ip, r9, sl, r3
 801e9bc:	ea4f 0959 	mov.w	r9, r9, lsr #1
 801e9c0:	460f      	mov	r7, r1
 801e9c2:	eb09 09c9 	add.w	r9, r9, r9, lsl #3
 801e9c6:	9900      	ldr	r1, [sp, #0]
 801e9c8:	eba3 0909 	sub.w	r9, r3, r9
 801e9cc:	eb01 02c9 	add.w	r2, r1, r9, lsl #3
 801e9d0:	1dab      	adds	r3, r5, #6
 801e9d2:	ed92 7b20 	vldr	d7, [r2, #128]	; 0x80
 801e9d6:	fbaa 2b03 	umull	r2, fp, sl, r3
 801e9da:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
 801e9de:	4606      	mov	r6, r0
 801e9e0:	eb0b 0bcb 	add.w	fp, fp, fp, lsl #3
 801e9e4:	ec51 0b17 	vmov	r0, r1, d7
 801e9e8:	e9c4 6732 	strd	r6, r7, [r4, #200]	; 0xc8
 801e9ec:	eba3 0b0b 	sub.w	fp, r3, fp
 801e9f0:	a365      	add	r3, pc, #404	; (adr r3, 801eb88 <runStepDetection.constprop.4+0x400>)
 801e9f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e9f6:	ed8d 7b06 	vstr	d7, [sp, #24]
 801e9fa:	f7e1 fd7d 	bl	80004f8 <__aeabi_dmul>
 801e9fe:	9a00      	ldr	r2, [sp, #0]
 801ea00:	eb0b 0b8b 	add.w	fp, fp, fp, lsl #2
 801ea04:	eb02 0ccb 	add.w	ip, r2, fp, lsl #3
 801ea08:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801ea0c:	a360      	add	r3, pc, #384	; (adr r3, 801eb90 <runStepDetection.constprop.4+0x408>)
 801ea0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea12:	e9dc 0132 	ldrd	r0, r1, [ip, #200]	; 0xc8
 801ea16:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 801ea1a:	f7e1 fd6d 	bl	80004f8 <__aeabi_dmul>
 801ea1e:	4602      	mov	r2, r0
 801ea20:	460b      	mov	r3, r1
 801ea22:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801ea26:	f7e1 fbaf 	bl	8000188 <__aeabi_dsub>
 801ea2a:	4632      	mov	r2, r6
 801ea2c:	463b      	mov	r3, r7
 801ea2e:	f7e1 fbad 	bl	800018c <__adddf3>
 801ea32:	4606      	mov	r6, r0
 801ea34:	460f      	mov	r7, r1
 801ea36:	e9c4 6732 	strd	r6, r7, [r4, #200]	; 0xc8
 801ea3a:	9b00      	ldr	r3, [sp, #0]
 801ea3c:	eb09 0989 	add.w	r9, r9, r9, lsl #2
 801ea40:	eb03 0cc9 	add.w	ip, r3, r9, lsl #3
 801ea44:	e9dc 0132 	ldrd	r0, r1, [ip, #200]	; 0xc8
 801ea48:	a353      	add	r3, pc, #332	; (adr r3, 801eb98 <runStepDetection.constprop.4+0x410>)
 801ea4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea4e:	f8cd c050 	str.w	ip, [sp, #80]	; 0x50
 801ea52:	f7e1 fd51 	bl	80004f8 <__aeabi_dmul>
 801ea56:	4602      	mov	r2, r0
 801ea58:	460b      	mov	r3, r1
 801ea5a:	4630      	mov	r0, r6
 801ea5c:	4639      	mov	r1, r7
 801ea5e:	f7e1 fb93 	bl	8000188 <__aeabi_dsub>
 801ea62:	1ceb      	adds	r3, r5, #3
 801ea64:	fbaa c903 	umull	ip, r9, sl, r3
 801ea68:	ea4f 0959 	mov.w	r9, r9, lsr #1
 801ea6c:	460f      	mov	r7, r1
 801ea6e:	eb09 09c9 	add.w	r9, r9, r9, lsl #3
 801ea72:	9900      	ldr	r1, [sp, #0]
 801ea74:	eba3 0909 	sub.w	r9, r3, r9
 801ea78:	eb01 02c9 	add.w	r2, r1, r9, lsl #3
 801ea7c:	1d2b      	adds	r3, r5, #4
 801ea7e:	ed92 7b20 	vldr	d7, [r2, #128]	; 0x80
 801ea82:	fbaa cb03 	umull	ip, fp, sl, r3
 801ea86:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
 801ea8a:	4606      	mov	r6, r0
 801ea8c:	eb0b 0bcb 	add.w	fp, fp, fp, lsl #3
 801ea90:	ed8d 7b08 	vstr	d7, [sp, #32]
 801ea94:	ec51 0b17 	vmov	r0, r1, d7
 801ea98:	e9c4 6732 	strd	r6, r7, [r4, #200]	; 0xc8
 801ea9c:	eba3 0b0b 	sub.w	fp, r3, fp
 801eaa0:	a333      	add	r3, pc, #204	; (adr r3, 801eb70 <runStepDetection.constprop.4+0x3e8>)
 801eaa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eaa6:	f7e1 fd27 	bl	80004f8 <__aeabi_dmul>
 801eaaa:	9a00      	ldr	r2, [sp, #0]
 801eaac:	eb0b 0b8b 	add.w	fp, fp, fp, lsl #2
 801eab0:	eb02 0ccb 	add.w	ip, r2, fp, lsl #3
 801eab4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801eab8:	a339      	add	r3, pc, #228	; (adr r3, 801eba0 <runStepDetection.constprop.4+0x418>)
 801eaba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eabe:	e9dc 0132 	ldrd	r0, r1, [ip, #200]	; 0xc8
 801eac2:	f8cd c070 	str.w	ip, [sp, #112]	; 0x70
 801eac6:	f7e1 fd17 	bl	80004f8 <__aeabi_dmul>
 801eaca:	4602      	mov	r2, r0
 801eacc:	460b      	mov	r3, r1
 801eace:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801ead2:	f7e1 fb59 	bl	8000188 <__aeabi_dsub>
 801ead6:	4632      	mov	r2, r6
 801ead8:	463b      	mov	r3, r7
 801eada:	f7e1 fb57 	bl	800018c <__adddf3>
 801eade:	4606      	mov	r6, r0
 801eae0:	460f      	mov	r7, r1
 801eae2:	e9c4 6732 	strd	r6, r7, [r4, #200]	; 0xc8
 801eae6:	9b00      	ldr	r3, [sp, #0]
 801eae8:	eb09 0989 	add.w	r9, r9, r9, lsl #2
 801eaec:	eb03 0cc9 	add.w	ip, r3, r9, lsl #3
 801eaf0:	e9dc 0132 	ldrd	r0, r1, [ip, #200]	; 0xc8
 801eaf4:	a32c      	add	r3, pc, #176	; (adr r3, 801eba8 <runStepDetection.constprop.4+0x420>)
 801eaf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eafa:	f8cd c058 	str.w	ip, [sp, #88]	; 0x58
 801eafe:	f7e1 fcfb 	bl	80004f8 <__aeabi_dmul>
 801eb02:	4602      	mov	r2, r0
 801eb04:	460b      	mov	r3, r1
 801eb06:	4630      	mov	r0, r6
 801eb08:	4639      	mov	r1, r7
 801eb0a:	f7e1 fb3d 	bl	8000188 <__aeabi_dsub>
 801eb0e:	1c6b      	adds	r3, r5, #1
 801eb10:	fbaa c203 	umull	ip, r2, sl, r3
 801eb14:	4606      	mov	r6, r0
 801eb16:	0850      	lsrs	r0, r2, #1
 801eb18:	460f      	mov	r7, r1
 801eb1a:	eb00 02c0 	add.w	r2, r0, r0, lsl #3
 801eb1e:	9900      	ldr	r1, [sp, #0]
 801eb20:	1a98      	subs	r0, r3, r2
 801eb22:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
 801eb26:	ed93 7b20 	vldr	d7, [r3, #128]	; 0x80
 801eb2a:	3502      	adds	r5, #2
 801eb2c:	fbaa c905 	umull	ip, r9, sl, r5
 801eb30:	ea4f 0959 	mov.w	r9, r9, lsr #1
 801eb34:	e9c4 6732 	strd	r6, r7, [r4, #200]	; 0xc8
 801eb38:	a30b      	add	r3, pc, #44	; (adr r3, 801eb68 <runStepDetection.constprop.4+0x3e0>)
 801eb3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eb3e:	9020      	str	r0, [sp, #128]	; 0x80
 801eb40:	eb09 09c9 	add.w	r9, r9, r9, lsl #3
 801eb44:	ec51 0b17 	vmov	r0, r1, d7
 801eb48:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801eb4c:	eba5 0909 	sub.w	r9, r5, r9
 801eb50:	f7e1 fcd2 	bl	80004f8 <__aeabi_dmul>
 801eb54:	9a00      	ldr	r2, [sp, #0]
 801eb56:	eb09 0989 	add.w	r9, r9, r9, lsl #2
 801eb5a:	eb02 05c9 	add.w	r5, r2, r9, lsl #3
 801eb5e:	4682      	mov	sl, r0
 801eb60:	468b      	mov	fp, r1
 801eb62:	e031      	b.n	801ebc8 <runStepDetection.constprop.4+0x440>
 801eb64:	f3af 8000 	nop.w
 801eb68:	a09d6446 	.word	0xa09d6446
 801eb6c:	3efc0898 	.word	0x3efc0898
 801eb70:	a09d6463 	.word	0xa09d6463
 801eb74:	bf1c0898 	.word	0xbf1c0898
 801eb78:	f551f63c 	.word	0xf551f63c
 801eb7c:	c01ddb90 	.word	0xc01ddb90
 801eb80:	b89477b2 	.word	0xb89477b2
 801eb84:	40388461 	.word	0x40388461
 801eb88:	78760b25 	.word	0x78760b25
 801eb8c:	3f250672 	.word	0x3f250672
 801eb90:	2ea88e02 	.word	0x2ea88e02
 801eb94:	c04723a7 	.word	0xc04723a7
 801eb98:	578afec9 	.word	0x578afec9
 801eb9c:	404b742c 	.word	0x404b742c
 801eba0:	2cbae603 	.word	0x2cbae603
 801eba4:	c044f70f 	.word	0xc044f70f
 801eba8:	3b1dafe7 	.word	0x3b1dafe7
 801ebac:	4034206b 	.word	0x4034206b
 801ebb0:	20007670 	.word	0x20007670
 801ebb4:	51eb851f 	.word	0x51eb851f
 801ebb8:	20007b10 	.word	0x20007b10
 801ebbc:	3ff00000 	.word	0x3ff00000
 801ebc0:	20006d40 	.word	0x20006d40
 801ebc4:	38e38e39 	.word	0x38e38e39
 801ebc8:	f60f 13fc 	addw	r3, pc, #2556	; 0x9fc
 801ebcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ebd0:	e9d5 0132 	ldrd	r0, r1, [r5, #200]	; 0xc8
 801ebd4:	f7e1 fc90 	bl	80004f8 <__aeabi_dmul>
 801ebd8:	4602      	mov	r2, r0
 801ebda:	460b      	mov	r3, r1
 801ebdc:	4650      	mov	r0, sl
 801ebde:	4659      	mov	r1, fp
 801ebe0:	f7e1 fad2 	bl	8000188 <__aeabi_dsub>
 801ebe4:	4632      	mov	r2, r6
 801ebe6:	463b      	mov	r3, r7
 801ebe8:	f7e1 fad0 	bl	800018c <__adddf3>
 801ebec:	460f      	mov	r7, r1
 801ebee:	9920      	ldr	r1, [sp, #128]	; 0x80
 801ebf0:	4606      	mov	r6, r0
 801ebf2:	e9c4 6732 	strd	r6, r7, [r4, #200]	; 0xc8
 801ebf6:	eb01 0981 	add.w	r9, r1, r1, lsl #2
 801ebfa:	9900      	ldr	r1, [sp, #0]
 801ebfc:	eb01 09c9 	add.w	r9, r1, r9, lsl #3
 801ec00:	e9d9 0132 	ldrd	r0, r1, [r9, #200]	; 0xc8
 801ec04:	f60f 13c8 	addw	r3, pc, #2504	; 0x9c8
 801ec08:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ec0c:	f7e1 fc74 	bl	80004f8 <__aeabi_dmul>
 801ec10:	4602      	mov	r2, r0
 801ec12:	460b      	mov	r3, r1
 801ec14:	4630      	mov	r0, r6
 801ec16:	4639      	mov	r1, r7
 801ec18:	f7e1 fab6 	bl	8000188 <__aeabi_dsub>
 801ec1c:	f60f 13b8 	addw	r3, pc, #2488	; 0x9b8
 801ec20:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ec24:	e9c4 0132 	strd	r0, r1, [r4, #200]	; 0xc8
 801ec28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ec2c:	f7e1 fc64 	bl	80004f8 <__aeabi_dmul>
 801ec30:	4606      	mov	r6, r0
 801ec32:	460f      	mov	r7, r1
 801ec34:	e9c4 6734 	strd	r6, r7, [r4, #208]	; 0xd0
 801ec38:	f60f 13a4 	addw	r3, pc, #2468	; 0x9a4
 801ec3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ec40:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801ec44:	f7e1 fc58 	bl	80004f8 <__aeabi_dmul>
 801ec48:	4632      	mov	r2, r6
 801ec4a:	463b      	mov	r3, r7
 801ec4c:	f7e1 fa9e 	bl	800018c <__adddf3>
 801ec50:	4606      	mov	r6, r0
 801ec52:	980e      	ldr	r0, [sp, #56]	; 0x38
 801ec54:	460f      	mov	r7, r1
 801ec56:	f60f 1390 	addw	r3, pc, #2448	; 0x990
 801ec5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ec5e:	e9d0 0134 	ldrd	r0, r1, [r0, #208]	; 0xd0
 801ec62:	f7e1 fc49 	bl	80004f8 <__aeabi_dmul>
 801ec66:	4602      	mov	r2, r0
 801ec68:	460b      	mov	r3, r1
 801ec6a:	4630      	mov	r0, r6
 801ec6c:	4639      	mov	r1, r7
 801ec6e:	f7e1 fa8b 	bl	8000188 <__aeabi_dsub>
 801ec72:	4606      	mov	r6, r0
 801ec74:	460f      	mov	r7, r1
 801ec76:	e9c4 6734 	strd	r6, r7, [r4, #208]	; 0xd0
 801ec7a:	9910      	ldr	r1, [sp, #64]	; 0x40
 801ec7c:	f60f 1370 	addw	r3, pc, #2416	; 0x970
 801ec80:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ec84:	e9d1 0134 	ldrd	r0, r1, [r1, #208]	; 0xd0
 801ec88:	f7e1 fc36 	bl	80004f8 <__aeabi_dmul>
 801ec8c:	4602      	mov	r2, r0
 801ec8e:	460b      	mov	r3, r1
 801ec90:	4630      	mov	r0, r6
 801ec92:	4639      	mov	r1, r7
 801ec94:	f7e1 fa78 	bl	8000188 <__aeabi_dsub>
 801ec98:	4606      	mov	r6, r0
 801ec9a:	460f      	mov	r7, r1
 801ec9c:	e9c4 6734 	strd	r6, r7, [r4, #208]	; 0xd0
 801eca0:	f60f 1354 	addw	r3, pc, #2388	; 0x954
 801eca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eca8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801ecac:	f7e1 fc24 	bl	80004f8 <__aeabi_dmul>
 801ecb0:	4682      	mov	sl, r0
 801ecb2:	9812      	ldr	r0, [sp, #72]	; 0x48
 801ecb4:	468b      	mov	fp, r1
 801ecb6:	f60f 1348 	addw	r3, pc, #2376	; 0x948
 801ecba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ecbe:	e9d0 0134 	ldrd	r0, r1, [r0, #208]	; 0xd0
 801ecc2:	f7e1 fc19 	bl	80004f8 <__aeabi_dmul>
 801ecc6:	4602      	mov	r2, r0
 801ecc8:	460b      	mov	r3, r1
 801ecca:	4650      	mov	r0, sl
 801eccc:	4659      	mov	r1, fp
 801ecce:	f7e1 fa5b 	bl	8000188 <__aeabi_dsub>
 801ecd2:	4632      	mov	r2, r6
 801ecd4:	463b      	mov	r3, r7
 801ecd6:	f7e1 fa59 	bl	800018c <__adddf3>
 801ecda:	4606      	mov	r6, r0
 801ecdc:	460f      	mov	r7, r1
 801ecde:	e9c4 6734 	strd	r6, r7, [r4, #208]	; 0xd0
 801ece2:	9914      	ldr	r1, [sp, #80]	; 0x50
 801ece4:	f60f 1320 	addw	r3, pc, #2336	; 0x920
 801ece8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ecec:	e9d1 0134 	ldrd	r0, r1, [r1, #208]	; 0xd0
 801ecf0:	f7e1 fc02 	bl	80004f8 <__aeabi_dmul>
 801ecf4:	4602      	mov	r2, r0
 801ecf6:	460b      	mov	r3, r1
 801ecf8:	4630      	mov	r0, r6
 801ecfa:	4639      	mov	r1, r7
 801ecfc:	f7e1 fa44 	bl	8000188 <__aeabi_dsub>
 801ed00:	4606      	mov	r6, r0
 801ed02:	460f      	mov	r7, r1
 801ed04:	e9c4 6734 	strd	r6, r7, [r4, #208]	; 0xd0
 801ed08:	f60f 03d4 	addw	r3, pc, #2260	; 0x8d4
 801ed0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ed10:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801ed14:	f7e1 fbf0 	bl	80004f8 <__aeabi_dmul>
 801ed18:	4682      	mov	sl, r0
 801ed1a:	981c      	ldr	r0, [sp, #112]	; 0x70
 801ed1c:	468b      	mov	fp, r1
 801ed1e:	f60f 03f0 	addw	r3, pc, #2288	; 0x8f0
 801ed22:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ed26:	e9d0 0134 	ldrd	r0, r1, [r0, #208]	; 0xd0
 801ed2a:	f7e1 fbe5 	bl	80004f8 <__aeabi_dmul>
 801ed2e:	4602      	mov	r2, r0
 801ed30:	460b      	mov	r3, r1
 801ed32:	4650      	mov	r0, sl
 801ed34:	4659      	mov	r1, fp
 801ed36:	f7e1 fa27 	bl	8000188 <__aeabi_dsub>
 801ed3a:	4632      	mov	r2, r6
 801ed3c:	463b      	mov	r3, r7
 801ed3e:	f7e1 fa25 	bl	800018c <__adddf3>
 801ed42:	4606      	mov	r6, r0
 801ed44:	460f      	mov	r7, r1
 801ed46:	e9c4 6734 	strd	r6, r7, [r4, #208]	; 0xd0
 801ed4a:	9916      	ldr	r1, [sp, #88]	; 0x58
 801ed4c:	f60f 03c8 	addw	r3, pc, #2248	; 0x8c8
 801ed50:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ed54:	e9d1 0134 	ldrd	r0, r1, [r1, #208]	; 0xd0
 801ed58:	f7e1 fbce 	bl	80004f8 <__aeabi_dmul>
 801ed5c:	4602      	mov	r2, r0
 801ed5e:	460b      	mov	r3, r1
 801ed60:	4630      	mov	r0, r6
 801ed62:	4639      	mov	r1, r7
 801ed64:	f7e1 fa10 	bl	8000188 <__aeabi_dsub>
 801ed68:	4606      	mov	r6, r0
 801ed6a:	460f      	mov	r7, r1
 801ed6c:	e9c4 6734 	strd	r6, r7, [r4, #208]	; 0xd0
 801ed70:	f60f 0364 	addw	r3, pc, #2148	; 0x864
 801ed74:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ed78:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801ed7c:	f7e1 fbbc 	bl	80004f8 <__aeabi_dmul>
 801ed80:	f60f 039c 	addw	r3, pc, #2204	; 0x89c
 801ed84:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ed88:	4682      	mov	sl, r0
 801ed8a:	468b      	mov	fp, r1
 801ed8c:	e9d5 0134 	ldrd	r0, r1, [r5, #208]	; 0xd0
 801ed90:	f7e1 fbb2 	bl	80004f8 <__aeabi_dmul>
 801ed94:	4602      	mov	r2, r0
 801ed96:	460b      	mov	r3, r1
 801ed98:	4650      	mov	r0, sl
 801ed9a:	4659      	mov	r1, fp
 801ed9c:	f7e1 f9f4 	bl	8000188 <__aeabi_dsub>
 801eda0:	4632      	mov	r2, r6
 801eda2:	463b      	mov	r3, r7
 801eda4:	f7e1 f9f2 	bl	800018c <__adddf3>
 801eda8:	4606      	mov	r6, r0
 801edaa:	460f      	mov	r7, r1
 801edac:	e9c4 6734 	strd	r6, r7, [r4, #208]	; 0xd0
 801edb0:	f60f 0374 	addw	r3, pc, #2164	; 0x874
 801edb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801edb8:	e9d9 0134 	ldrd	r0, r1, [r9, #208]	; 0xd0
 801edbc:	f7e1 fb9c 	bl	80004f8 <__aeabi_dmul>
 801edc0:	4602      	mov	r2, r0
 801edc2:	460b      	mov	r3, r1
 801edc4:	4630      	mov	r0, r6
 801edc6:	4639      	mov	r1, r7
 801edc8:	f7e1 f9de 	bl	8000188 <__aeabi_dsub>
 801edcc:	f60f 0360 	addw	r3, pc, #2144	; 0x860
 801edd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801edd4:	e9c4 0134 	strd	r0, r1, [r4, #208]	; 0xd0
 801edd8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801eddc:	f7e1 fb8c 	bl	80004f8 <__aeabi_dmul>
 801ede0:	4606      	mov	r6, r0
 801ede2:	460f      	mov	r7, r1
 801ede4:	e9c4 6736 	strd	r6, r7, [r4, #216]	; 0xd8
 801ede8:	f60f 034c 	addw	r3, pc, #2124	; 0x84c
 801edec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801edf0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801edf4:	f7e1 fb80 	bl	80004f8 <__aeabi_dmul>
 801edf8:	4632      	mov	r2, r6
 801edfa:	463b      	mov	r3, r7
 801edfc:	f7e1 f9c6 	bl	800018c <__adddf3>
 801ee00:	4606      	mov	r6, r0
 801ee02:	980e      	ldr	r0, [sp, #56]	; 0x38
 801ee04:	460f      	mov	r7, r1
 801ee06:	f60f 0338 	addw	r3, pc, #2104	; 0x838
 801ee0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ee0e:	e9d0 0136 	ldrd	r0, r1, [r0, #216]	; 0xd8
 801ee12:	f7e1 fb71 	bl	80004f8 <__aeabi_dmul>
 801ee16:	4602      	mov	r2, r0
 801ee18:	460b      	mov	r3, r1
 801ee1a:	4630      	mov	r0, r6
 801ee1c:	4639      	mov	r1, r7
 801ee1e:	f7e1 f9b3 	bl	8000188 <__aeabi_dsub>
 801ee22:	4606      	mov	r6, r0
 801ee24:	460f      	mov	r7, r1
 801ee26:	e9c4 6736 	strd	r6, r7, [r4, #216]	; 0xd8
 801ee2a:	9810      	ldr	r0, [sp, #64]	; 0x40
 801ee2c:	f60f 0318 	addw	r3, pc, #2072	; 0x818
 801ee30:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ee34:	e9d0 0136 	ldrd	r0, r1, [r0, #216]	; 0xd8
 801ee38:	f7e1 fb5e 	bl	80004f8 <__aeabi_dmul>
 801ee3c:	4602      	mov	r2, r0
 801ee3e:	460b      	mov	r3, r1
 801ee40:	4630      	mov	r0, r6
 801ee42:	4639      	mov	r1, r7
 801ee44:	f7e1 f9a0 	bl	8000188 <__aeabi_dsub>
 801ee48:	4606      	mov	r6, r0
 801ee4a:	460f      	mov	r7, r1
 801ee4c:	e9c4 6736 	strd	r6, r7, [r4, #216]	; 0xd8
 801ee50:	f20f 73fc 	addw	r3, pc, #2044	; 0x7fc
 801ee54:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ee58:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801ee5c:	f7e1 fb4c 	bl	80004f8 <__aeabi_dmul>
 801ee60:	4682      	mov	sl, r0
 801ee62:	9812      	ldr	r0, [sp, #72]	; 0x48
 801ee64:	468b      	mov	fp, r1
 801ee66:	f20f 73f0 	addw	r3, pc, #2032	; 0x7f0
 801ee6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ee6e:	e9d0 0136 	ldrd	r0, r1, [r0, #216]	; 0xd8
 801ee72:	f7e1 fb41 	bl	80004f8 <__aeabi_dmul>
 801ee76:	4602      	mov	r2, r0
 801ee78:	460b      	mov	r3, r1
 801ee7a:	4650      	mov	r0, sl
 801ee7c:	4659      	mov	r1, fp
 801ee7e:	f7e1 f983 	bl	8000188 <__aeabi_dsub>
 801ee82:	4632      	mov	r2, r6
 801ee84:	463b      	mov	r3, r7
 801ee86:	f7e1 f981 	bl	800018c <__adddf3>
 801ee8a:	4606      	mov	r6, r0
 801ee8c:	460f      	mov	r7, r1
 801ee8e:	e9c4 6736 	strd	r6, r7, [r4, #216]	; 0xd8
 801ee92:	9914      	ldr	r1, [sp, #80]	; 0x50
 801ee94:	f20f 73c8 	addw	r3, pc, #1992	; 0x7c8
 801ee98:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ee9c:	e9d1 0136 	ldrd	r0, r1, [r1, #216]	; 0xd8
 801eea0:	f7e1 fb2a 	bl	80004f8 <__aeabi_dmul>
 801eea4:	4602      	mov	r2, r0
 801eea6:	460b      	mov	r3, r1
 801eea8:	4630      	mov	r0, r6
 801eeaa:	4639      	mov	r1, r7
 801eeac:	f7e1 f96c 	bl	8000188 <__aeabi_dsub>
 801eeb0:	4606      	mov	r6, r0
 801eeb2:	460f      	mov	r7, r1
 801eeb4:	e9c4 6736 	strd	r6, r7, [r4, #216]	; 0xd8
 801eeb8:	f20f 737c 	addw	r3, pc, #1916	; 0x77c
 801eebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eec0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801eec4:	f7e1 fb18 	bl	80004f8 <__aeabi_dmul>
 801eec8:	4682      	mov	sl, r0
 801eeca:	981c      	ldr	r0, [sp, #112]	; 0x70
 801eecc:	468b      	mov	fp, r1
 801eece:	f20f 7398 	addw	r3, pc, #1944	; 0x798
 801eed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eed6:	e9d0 0136 	ldrd	r0, r1, [r0, #216]	; 0xd8
 801eeda:	f7e1 fb0d 	bl	80004f8 <__aeabi_dmul>
 801eede:	4602      	mov	r2, r0
 801eee0:	460b      	mov	r3, r1
 801eee2:	4650      	mov	r0, sl
 801eee4:	4659      	mov	r1, fp
 801eee6:	f7e1 f94f 	bl	8000188 <__aeabi_dsub>
 801eeea:	4632      	mov	r2, r6
 801eeec:	463b      	mov	r3, r7
 801eeee:	f7e1 f94d 	bl	800018c <__adddf3>
 801eef2:	4606      	mov	r6, r0
 801eef4:	460f      	mov	r7, r1
 801eef6:	e9c4 6736 	strd	r6, r7, [r4, #216]	; 0xd8
 801eefa:	9816      	ldr	r0, [sp, #88]	; 0x58
 801eefc:	f20f 7370 	addw	r3, pc, #1904	; 0x770
 801ef00:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ef04:	e9d0 0136 	ldrd	r0, r1, [r0, #216]	; 0xd8
 801ef08:	f7e1 faf6 	bl	80004f8 <__aeabi_dmul>
 801ef0c:	4602      	mov	r2, r0
 801ef0e:	460b      	mov	r3, r1
 801ef10:	4630      	mov	r0, r6
 801ef12:	4639      	mov	r1, r7
 801ef14:	f7e1 f938 	bl	8000188 <__aeabi_dsub>
 801ef18:	4606      	mov	r6, r0
 801ef1a:	460f      	mov	r7, r1
 801ef1c:	e9c4 6736 	strd	r6, r7, [r4, #216]	; 0xd8
 801ef20:	f20f 730c 	addw	r3, pc, #1804	; 0x70c
 801ef24:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ef28:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801ef2c:	f7e1 fae4 	bl	80004f8 <__aeabi_dmul>
 801ef30:	f20f 7344 	addw	r3, pc, #1860	; 0x744
 801ef34:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ef38:	4682      	mov	sl, r0
 801ef3a:	468b      	mov	fp, r1
 801ef3c:	e9d5 0136 	ldrd	r0, r1, [r5, #216]	; 0xd8
 801ef40:	f7e1 fada 	bl	80004f8 <__aeabi_dmul>
 801ef44:	4602      	mov	r2, r0
 801ef46:	460b      	mov	r3, r1
 801ef48:	4650      	mov	r0, sl
 801ef4a:	4659      	mov	r1, fp
 801ef4c:	f7e1 f91c 	bl	8000188 <__aeabi_dsub>
 801ef50:	4632      	mov	r2, r6
 801ef52:	463b      	mov	r3, r7
 801ef54:	f7e1 f91a 	bl	800018c <__adddf3>
 801ef58:	4606      	mov	r6, r0
 801ef5a:	460f      	mov	r7, r1
 801ef5c:	e9c4 6736 	strd	r6, r7, [r4, #216]	; 0xd8
 801ef60:	f20f 731c 	addw	r3, pc, #1820	; 0x71c
 801ef64:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ef68:	e9d9 0136 	ldrd	r0, r1, [r9, #216]	; 0xd8
 801ef6c:	f7e1 fac4 	bl	80004f8 <__aeabi_dmul>
 801ef70:	4602      	mov	r2, r0
 801ef72:	460b      	mov	r3, r1
 801ef74:	4630      	mov	r0, r6
 801ef76:	4639      	mov	r1, r7
 801ef78:	f7e1 f906 	bl	8000188 <__aeabi_dsub>
 801ef7c:	f20f 7308 	addw	r3, pc, #1800	; 0x708
 801ef80:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ef84:	e9c4 0136 	strd	r0, r1, [r4, #216]	; 0xd8
 801ef88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ef8c:	f7e1 fab4 	bl	80004f8 <__aeabi_dmul>
 801ef90:	4606      	mov	r6, r0
 801ef92:	460f      	mov	r7, r1
 801ef94:	e9c4 6738 	strd	r6, r7, [r4, #224]	; 0xe0
 801ef98:	f20f 63f4 	addw	r3, pc, #1780	; 0x6f4
 801ef9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801efa0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801efa4:	f7e1 faa8 	bl	80004f8 <__aeabi_dmul>
 801efa8:	4632      	mov	r2, r6
 801efaa:	463b      	mov	r3, r7
 801efac:	f7e1 f8ee 	bl	800018c <__adddf3>
 801efb0:	460f      	mov	r7, r1
 801efb2:	990e      	ldr	r1, [sp, #56]	; 0x38
 801efb4:	4606      	mov	r6, r0
 801efb6:	f20f 63e0 	addw	r3, pc, #1760	; 0x6e0
 801efba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801efbe:	e9d1 0138 	ldrd	r0, r1, [r1, #224]	; 0xe0
 801efc2:	f7e1 fa99 	bl	80004f8 <__aeabi_dmul>
 801efc6:	4602      	mov	r2, r0
 801efc8:	460b      	mov	r3, r1
 801efca:	4630      	mov	r0, r6
 801efcc:	4639      	mov	r1, r7
 801efce:	f7e1 f8db 	bl	8000188 <__aeabi_dsub>
 801efd2:	4606      	mov	r6, r0
 801efd4:	460f      	mov	r7, r1
 801efd6:	e9c4 6738 	strd	r6, r7, [r4, #224]	; 0xe0
 801efda:	9910      	ldr	r1, [sp, #64]	; 0x40
 801efdc:	f20f 63c0 	addw	r3, pc, #1728	; 0x6c0
 801efe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801efe4:	e9d1 0138 	ldrd	r0, r1, [r1, #224]	; 0xe0
 801efe8:	f7e1 fa86 	bl	80004f8 <__aeabi_dmul>
 801efec:	4602      	mov	r2, r0
 801efee:	460b      	mov	r3, r1
 801eff0:	4630      	mov	r0, r6
 801eff2:	4639      	mov	r1, r7
 801eff4:	f7e1 f8c8 	bl	8000188 <__aeabi_dsub>
 801eff8:	4606      	mov	r6, r0
 801effa:	460f      	mov	r7, r1
 801effc:	e9c4 6738 	strd	r6, r7, [r4, #224]	; 0xe0
 801f000:	f20f 63a4 	addw	r3, pc, #1700	; 0x6a4
 801f004:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f008:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801f00c:	f7e1 fa74 	bl	80004f8 <__aeabi_dmul>
 801f010:	4682      	mov	sl, r0
 801f012:	9812      	ldr	r0, [sp, #72]	; 0x48
 801f014:	468b      	mov	fp, r1
 801f016:	f20f 6398 	addw	r3, pc, #1688	; 0x698
 801f01a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f01e:	e9d0 0138 	ldrd	r0, r1, [r0, #224]	; 0xe0
 801f022:	f7e1 fa69 	bl	80004f8 <__aeabi_dmul>
 801f026:	4602      	mov	r2, r0
 801f028:	460b      	mov	r3, r1
 801f02a:	4650      	mov	r0, sl
 801f02c:	4659      	mov	r1, fp
 801f02e:	f7e1 f8ab 	bl	8000188 <__aeabi_dsub>
 801f032:	4632      	mov	r2, r6
 801f034:	463b      	mov	r3, r7
 801f036:	f7e1 f8a9 	bl	800018c <__adddf3>
 801f03a:	4606      	mov	r6, r0
 801f03c:	460f      	mov	r7, r1
 801f03e:	e9c4 6738 	strd	r6, r7, [r4, #224]	; 0xe0
 801f042:	9814      	ldr	r0, [sp, #80]	; 0x50
 801f044:	f20f 6370 	addw	r3, pc, #1648	; 0x670
 801f048:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f04c:	e9d0 0138 	ldrd	r0, r1, [r0, #224]	; 0xe0
 801f050:	f7e1 fa52 	bl	80004f8 <__aeabi_dmul>
 801f054:	4602      	mov	r2, r0
 801f056:	460b      	mov	r3, r1
 801f058:	4630      	mov	r0, r6
 801f05a:	4639      	mov	r1, r7
 801f05c:	f7e1 f894 	bl	8000188 <__aeabi_dsub>
 801f060:	4606      	mov	r6, r0
 801f062:	460f      	mov	r7, r1
 801f064:	e9c4 6738 	strd	r6, r7, [r4, #224]	; 0xe0
 801f068:	f20f 6324 	addw	r3, pc, #1572	; 0x624
 801f06c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f070:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801f074:	f7e1 fa40 	bl	80004f8 <__aeabi_dmul>
 801f078:	468b      	mov	fp, r1
 801f07a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801f07c:	4682      	mov	sl, r0
 801f07e:	f20f 6340 	addw	r3, pc, #1600	; 0x640
 801f082:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f086:	e9d1 0138 	ldrd	r0, r1, [r1, #224]	; 0xe0
 801f08a:	f7e1 fa35 	bl	80004f8 <__aeabi_dmul>
 801f08e:	4602      	mov	r2, r0
 801f090:	460b      	mov	r3, r1
 801f092:	4650      	mov	r0, sl
 801f094:	4659      	mov	r1, fp
 801f096:	f7e1 f877 	bl	8000188 <__aeabi_dsub>
 801f09a:	4632      	mov	r2, r6
 801f09c:	463b      	mov	r3, r7
 801f09e:	f7e1 f875 	bl	800018c <__adddf3>
 801f0a2:	4606      	mov	r6, r0
 801f0a4:	460f      	mov	r7, r1
 801f0a6:	e9c4 6738 	strd	r6, r7, [r4, #224]	; 0xe0
 801f0aa:	9816      	ldr	r0, [sp, #88]	; 0x58
 801f0ac:	f20f 6318 	addw	r3, pc, #1560	; 0x618
 801f0b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f0b4:	e9d0 0138 	ldrd	r0, r1, [r0, #224]	; 0xe0
 801f0b8:	f7e1 fa1e 	bl	80004f8 <__aeabi_dmul>
 801f0bc:	4602      	mov	r2, r0
 801f0be:	460b      	mov	r3, r1
 801f0c0:	4630      	mov	r0, r6
 801f0c2:	4639      	mov	r1, r7
 801f0c4:	f7e1 f860 	bl	8000188 <__aeabi_dsub>
 801f0c8:	4606      	mov	r6, r0
 801f0ca:	460f      	mov	r7, r1
 801f0cc:	e9c4 6738 	strd	r6, r7, [r4, #224]	; 0xe0
 801f0d0:	f20f 53b4 	addw	r3, pc, #1460	; 0x5b4
 801f0d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f0d8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801f0dc:	f7e1 fa0c 	bl	80004f8 <__aeabi_dmul>
 801f0e0:	f20f 53ec 	addw	r3, pc, #1516	; 0x5ec
 801f0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f0e8:	4682      	mov	sl, r0
 801f0ea:	468b      	mov	fp, r1
 801f0ec:	e9d5 0138 	ldrd	r0, r1, [r5, #224]	; 0xe0
 801f0f0:	f7e1 fa02 	bl	80004f8 <__aeabi_dmul>
 801f0f4:	4602      	mov	r2, r0
 801f0f6:	460b      	mov	r3, r1
 801f0f8:	4650      	mov	r0, sl
 801f0fa:	4659      	mov	r1, fp
 801f0fc:	f7e1 f844 	bl	8000188 <__aeabi_dsub>
 801f100:	4632      	mov	r2, r6
 801f102:	463b      	mov	r3, r7
 801f104:	f7e1 f842 	bl	800018c <__adddf3>
 801f108:	4606      	mov	r6, r0
 801f10a:	460f      	mov	r7, r1
 801f10c:	e9c4 6738 	strd	r6, r7, [r4, #224]	; 0xe0
 801f110:	f20f 53c4 	addw	r3, pc, #1476	; 0x5c4
 801f114:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f118:	e9d9 0138 	ldrd	r0, r1, [r9, #224]	; 0xe0
 801f11c:	f7e1 f9ec 	bl	80004f8 <__aeabi_dmul>
 801f120:	4602      	mov	r2, r0
 801f122:	460b      	mov	r3, r1
 801f124:	4630      	mov	r0, r6
 801f126:	4639      	mov	r1, r7
 801f128:	f7e1 f82e 	bl	8000188 <__aeabi_dsub>
 801f12c:	f20f 53b0 	addw	r3, pc, #1456	; 0x5b0
 801f130:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f134:	e9c4 0138 	strd	r0, r1, [r4, #224]	; 0xe0
 801f138:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f13c:	f7e1 f9dc 	bl	80004f8 <__aeabi_dmul>
 801f140:	4606      	mov	r6, r0
 801f142:	460f      	mov	r7, r1
 801f144:	e9c4 673a 	strd	r6, r7, [r4, #232]	; 0xe8
 801f148:	f20f 539c 	addw	r3, pc, #1436	; 0x59c
 801f14c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f150:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801f154:	f7e1 f9d0 	bl	80004f8 <__aeabi_dmul>
 801f158:	4632      	mov	r2, r6
 801f15a:	463b      	mov	r3, r7
 801f15c:	f7e1 f816 	bl	800018c <__adddf3>
 801f160:	460f      	mov	r7, r1
 801f162:	990e      	ldr	r1, [sp, #56]	; 0x38
 801f164:	4606      	mov	r6, r0
 801f166:	f20f 5388 	addw	r3, pc, #1416	; 0x588
 801f16a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f16e:	e9d1 013a 	ldrd	r0, r1, [r1, #232]	; 0xe8
 801f172:	f7e1 f9c1 	bl	80004f8 <__aeabi_dmul>
 801f176:	4602      	mov	r2, r0
 801f178:	460b      	mov	r3, r1
 801f17a:	4630      	mov	r0, r6
 801f17c:	4639      	mov	r1, r7
 801f17e:	f7e1 f803 	bl	8000188 <__aeabi_dsub>
 801f182:	4606      	mov	r6, r0
 801f184:	460f      	mov	r7, r1
 801f186:	e9c4 673a 	strd	r6, r7, [r4, #232]	; 0xe8
 801f18a:	9910      	ldr	r1, [sp, #64]	; 0x40
 801f18c:	f20f 5368 	addw	r3, pc, #1384	; 0x568
 801f190:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f194:	e9d1 013a 	ldrd	r0, r1, [r1, #232]	; 0xe8
 801f198:	f7e1 f9ae 	bl	80004f8 <__aeabi_dmul>
 801f19c:	4602      	mov	r2, r0
 801f19e:	460b      	mov	r3, r1
 801f1a0:	4630      	mov	r0, r6
 801f1a2:	4639      	mov	r1, r7
 801f1a4:	f7e0 fff0 	bl	8000188 <__aeabi_dsub>
 801f1a8:	4606      	mov	r6, r0
 801f1aa:	460f      	mov	r7, r1
 801f1ac:	e9c4 673a 	strd	r6, r7, [r4, #232]	; 0xe8
 801f1b0:	f20f 534c 	addw	r3, pc, #1356	; 0x54c
 801f1b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f1b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801f1bc:	f7e1 f99c 	bl	80004f8 <__aeabi_dmul>
 801f1c0:	468b      	mov	fp, r1
 801f1c2:	9912      	ldr	r1, [sp, #72]	; 0x48
 801f1c4:	4682      	mov	sl, r0
 801f1c6:	f20f 5340 	addw	r3, pc, #1344	; 0x540
 801f1ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f1ce:	e9d1 013a 	ldrd	r0, r1, [r1, #232]	; 0xe8
 801f1d2:	f7e1 f991 	bl	80004f8 <__aeabi_dmul>
 801f1d6:	4602      	mov	r2, r0
 801f1d8:	460b      	mov	r3, r1
 801f1da:	4650      	mov	r0, sl
 801f1dc:	4659      	mov	r1, fp
 801f1de:	f7e0 ffd3 	bl	8000188 <__aeabi_dsub>
 801f1e2:	4632      	mov	r2, r6
 801f1e4:	463b      	mov	r3, r7
 801f1e6:	f7e0 ffd1 	bl	800018c <__adddf3>
 801f1ea:	4606      	mov	r6, r0
 801f1ec:	460f      	mov	r7, r1
 801f1ee:	e9c4 673a 	strd	r6, r7, [r4, #232]	; 0xe8
 801f1f2:	9914      	ldr	r1, [sp, #80]	; 0x50
 801f1f4:	f20f 5318 	addw	r3, pc, #1304	; 0x518
 801f1f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f1fc:	e9d1 013a 	ldrd	r0, r1, [r1, #232]	; 0xe8
 801f200:	f7e1 f97a 	bl	80004f8 <__aeabi_dmul>
 801f204:	4602      	mov	r2, r0
 801f206:	460b      	mov	r3, r1
 801f208:	4630      	mov	r0, r6
 801f20a:	4639      	mov	r1, r7
 801f20c:	f7e0 ffbc 	bl	8000188 <__aeabi_dsub>
 801f210:	4606      	mov	r6, r0
 801f212:	460f      	mov	r7, r1
 801f214:	e9c4 673a 	strd	r6, r7, [r4, #232]	; 0xe8
 801f218:	f20f 43cc 	addw	r3, pc, #1228	; 0x4cc
 801f21c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f220:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801f224:	f7e1 f968 	bl	80004f8 <__aeabi_dmul>
 801f228:	468b      	mov	fp, r1
 801f22a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801f22c:	4682      	mov	sl, r0
 801f22e:	f20f 43e8 	addw	r3, pc, #1256	; 0x4e8
 801f232:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f236:	e9d1 013a 	ldrd	r0, r1, [r1, #232]	; 0xe8
 801f23a:	f7e1 f95d 	bl	80004f8 <__aeabi_dmul>
 801f23e:	4602      	mov	r2, r0
 801f240:	460b      	mov	r3, r1
 801f242:	4650      	mov	r0, sl
 801f244:	4659      	mov	r1, fp
 801f246:	f7e0 ff9f 	bl	8000188 <__aeabi_dsub>
 801f24a:	4632      	mov	r2, r6
 801f24c:	463b      	mov	r3, r7
 801f24e:	f7e0 ff9d 	bl	800018c <__adddf3>
 801f252:	4606      	mov	r6, r0
 801f254:	460f      	mov	r7, r1
 801f256:	e9c4 673a 	strd	r6, r7, [r4, #232]	; 0xe8
 801f25a:	9816      	ldr	r0, [sp, #88]	; 0x58
 801f25c:	f20f 43c0 	addw	r3, pc, #1216	; 0x4c0
 801f260:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f264:	e9d0 013a 	ldrd	r0, r1, [r0, #232]	; 0xe8
 801f268:	f7e1 f946 	bl	80004f8 <__aeabi_dmul>
 801f26c:	4602      	mov	r2, r0
 801f26e:	460b      	mov	r3, r1
 801f270:	4630      	mov	r0, r6
 801f272:	4639      	mov	r1, r7
 801f274:	f7e0 ff88 	bl	8000188 <__aeabi_dsub>
 801f278:	4606      	mov	r6, r0
 801f27a:	460f      	mov	r7, r1
 801f27c:	f20f 4360 	addw	r3, pc, #1120	; 0x460
 801f280:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f284:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801f288:	e9c4 673a 	strd	r6, r7, [r4, #232]	; 0xe8
 801f28c:	f7e1 f934 	bl	80004f8 <__aeabi_dmul>
 801f290:	f20f 4394 	addw	r3, pc, #1172	; 0x494
 801f294:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f298:	4682      	mov	sl, r0
 801f29a:	468b      	mov	fp, r1
 801f29c:	e9d5 013a 	ldrd	r0, r1, [r5, #232]	; 0xe8
 801f2a0:	f7e1 f92a 	bl	80004f8 <__aeabi_dmul>
 801f2a4:	4602      	mov	r2, r0
 801f2a6:	460b      	mov	r3, r1
 801f2a8:	4650      	mov	r0, sl
 801f2aa:	4659      	mov	r1, fp
 801f2ac:	f7e0 ff6c 	bl	8000188 <__aeabi_dsub>
 801f2b0:	4632      	mov	r2, r6
 801f2b2:	463b      	mov	r3, r7
 801f2b4:	f7e0 ff6a 	bl	800018c <__adddf3>
 801f2b8:	4606      	mov	r6, r0
 801f2ba:	460f      	mov	r7, r1
 801f2bc:	e9c4 673a 	strd	r6, r7, [r4, #232]	; 0xe8
 801f2c0:	f20f 436c 	addw	r3, pc, #1132	; 0x46c
 801f2c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f2c8:	e9d9 013a 	ldrd	r0, r1, [r9, #232]	; 0xe8
 801f2cc:	f7e1 f914 	bl	80004f8 <__aeabi_dmul>
 801f2d0:	4db9      	ldr	r5, [pc, #740]	; (801f5b8 <runStepDetection.constprop.4+0xe30>)
 801f2d2:	4602      	mov	r2, r0
 801f2d4:	460b      	mov	r3, r1
 801f2d6:	4630      	mov	r0, r6
 801f2d8:	4639      	mov	r1, r7
 801f2da:	f7e0 ff55 	bl	8000188 <__aeabi_dsub>
 801f2de:	ed95 7b02 	vldr	d7, [r5, #8]
 801f2e2:	9b00      	ldr	r3, [sp, #0]
 801f2e4:	ed8d 7b00 	vstr	d7, [sp]
 801f2e8:	ed95 7b04 	vldr	d7, [r5, #16]
 801f2ec:	ed8d 7b02 	vstr	d7, [sp, #8]
 801f2f0:	ed9d 7b00 	vldr	d7, [sp]
 801f2f4:	e9d5 ab00 	ldrd	sl, fp, [r5]
 801f2f8:	ed85 7b00 	vstr	d7, [r5]
 801f2fc:	ed9d 7b02 	vldr	d7, [sp, #8]
 801f300:	e9c4 013a 	strd	r0, r1, [r4, #232]	; 0xe8
 801f304:	f105 0120 	add.w	r1, r5, #32
 801f308:	9820      	ldr	r0, [sp, #128]	; 0x80
 801f30a:	f8c3 0230 	str.w	r0, [r3, #560]	; 0x230
 801f30e:	f1a1 0008 	sub.w	r0, r1, #8
 801f312:	e9d3 67fe 	ldrd	r6, r7, [r3, #1016]	; 0x3f8
 801f316:	ed00 7b04 	vstr	d7, [r0, #-16]
 801f31a:	ed9d 7b1a 	vldr	d7, [sp, #104]	; 0x68
 801f31e:	22c8      	movs	r2, #200	; 0xc8
 801f320:	ed00 7b02 	vstr	d7, [r0, #-8]
 801f324:	f1a0 0408 	sub.w	r4, r0, #8
 801f328:	e9c3 67fc 	strd	r6, r7, [r3, #1008]	; 0x3f0
 801f32c:	e9c3 abfe 	strd	sl, fp, [r3, #1016]	; 0x3f8
 801f330:	f003 fa99 	bl	8022866 <memmove>
 801f334:	4652      	mov	r2, sl
 801f336:	465b      	mov	r3, fp
 801f338:	4630      	mov	r0, r6
 801f33a:	4639      	mov	r1, r7
 801f33c:	f7e0 ff26 	bl	800018c <__adddf3>
 801f340:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f344:	f7e0 ff22 	bl	800018c <__adddf3>
 801f348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801f34c:	f7e0 ff1e 	bl	800018c <__adddf3>
 801f350:	4602      	mov	r2, r0
 801f352:	460b      	mov	r3, r1
 801f354:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 801f358:	f7e0 ff18 	bl	800018c <__adddf3>
 801f35c:	a38e      	add	r3, pc, #568	; (adr r3, 801f598 <runStepDetection.constprop.4+0xe10>)
 801f35e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f362:	f7e1 f8c9 	bl	80004f8 <__aeabi_dmul>
 801f366:	a38e      	add	r3, pc, #568	; (adr r3, 801f5a0 <runStepDetection.constprop.4+0xe18>)
 801f368:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f36c:	e9c4 0134 	strd	r0, r1, [r4, #208]	; 0xd0
 801f370:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
 801f374:	f7e1 fb50 	bl	8000a18 <__aeabi_dcmpgt>
 801f378:	f5a4 6382 	sub.w	r3, r4, #1040	; 0x410
 801f37c:	9300      	str	r3, [sp, #0]
 801f37e:	f04f 0301 	mov.w	r3, #1
 801f382:	b900      	cbnz	r0, 801f386 <runStepDetection.constprop.4+0xbfe>
 801f384:	4603      	mov	r3, r0
 801f386:	4c8d      	ldr	r4, [pc, #564]	; (801f5bc <runStepDetection.constprop.4+0xe34>)
 801f388:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
 801f38c:	f884 3dd8 	strb.w	r3, [r4, #3544]	; 0xdd8
 801f390:	a383      	add	r3, pc, #524	; (adr r3, 801f5a0 <runStepDetection.constprop.4+0xe18>)
 801f392:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f396:	f7e1 fb3f 	bl	8000a18 <__aeabi_dcmpgt>
 801f39a:	2800      	cmp	r0, #0
 801f39c:	f000 81f2 	beq.w	801f784 <runStepDetection.constprop.4+0xffc>
 801f3a0:	f8b4 3dda 	ldrh.w	r3, [r4, #3546]	; 0xdda
 801f3a4:	3301      	adds	r3, #1
 801f3a6:	b29b      	uxth	r3, r3
 801f3a8:	2200      	movs	r2, #0
 801f3aa:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 801f3ae:	f8c4 2920 	str.w	r2, [r4, #2336]	; 0x920
 801f3b2:	f240 81fa 	bls.w	801f7aa <runStepDetection.constprop.4+0x1022>
 801f3b6:	f44f 73af 	mov.w	r3, #350	; 0x15e
 801f3ba:	f8a4 3dda 	strh.w	r3, [r4, #3546]	; 0xdda
 801f3be:	4b7f      	ldr	r3, [pc, #508]	; (801f5bc <runStepDetection.constprop.4+0xe34>)
 801f3c0:	f993 34e8 	ldrsb.w	r3, [r3, #1256]	; 0x4e8
 801f3c4:	1c5a      	adds	r2, r3, #1
 801f3c6:	d017      	beq.n	801f3f8 <runStepDetection.constprop.4+0xc70>
 801f3c8:	4a7d      	ldr	r2, [pc, #500]	; (801f5c0 <runStepDetection.constprop.4+0xe38>)
 801f3ca:	3301      	adds	r3, #1
 801f3cc:	b25d      	sxtb	r5, r3
 801f3ce:	f802 5c10 	strb.w	r5, [r2, #-16]
 801f3d2:	e9d2 0100 	ldrd	r0, r1, [r2]
 801f3d6:	a374      	add	r3, pc, #464	; (adr r3, 801f5a8 <runStepDetection.constprop.4+0xe20>)
 801f3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f3dc:	f7e1 fb1c 	bl	8000a18 <__aeabi_dcmpgt>
 801f3e0:	2800      	cmp	r0, #0
 801f3e2:	bf15      	itete	ne
 801f3e4:	2208      	movne	r2, #8
 801f3e6:	220c      	moveq	r2, #12
 801f3e8:	2348      	movne	r3, #72	; 0x48
 801f3ea:	2308      	moveq	r3, #8
 801f3ec:	bf14      	ite	ne
 801f3ee:	240a      	movne	r4, #10
 801f3f0:	2402      	moveq	r4, #2
 801f3f2:	4295      	cmp	r5, r2
 801f3f4:	f080 83c3 	bcs.w	801fb7e <runStepDetection.constprop.4+0x13f6>
 801f3f8:	9f00      	ldr	r7, [sp, #0]
 801f3fa:	4972      	ldr	r1, [pc, #456]	; (801f5c4 <runStepDetection.constprop.4+0xe3c>)
 801f3fc:	f897 05f4 	ldrb.w	r0, [r7, #1524]	; 0x5f4
 801f400:	f100 024b 	add.w	r2, r0, #75	; 0x4b
 801f404:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 801f408:	ed92 7b00 	vldr	d7, [r2]
 801f40c:	eb07 03c0 	add.w	r3, r7, r0, lsl #3
 801f410:	ed83 7b8c 	vstr	d7, [r3, #560]	; 0x230
 801f414:	f100 0350 	add.w	r3, r0, #80	; 0x50
 801f418:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
 801f41c:	ed8d 7b06 	vstr	d7, [sp, #24]
 801f420:	ed93 7b00 	vldr	d7, [r3]
 801f424:	ed82 7b00 	vstr	d7, [r2]
 801f428:	f100 0455 	add.w	r4, r0, #85	; 0x55
 801f42c:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
 801f430:	ed8d 7b04 	vstr	d7, [sp, #16]
 801f434:	ed94 7b00 	vldr	d7, [r4]
 801f438:	ed83 7b00 	vstr	d7, [r3]
 801f43c:	f100 055a 	add.w	r5, r0, #90	; 0x5a
 801f440:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801f442:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
 801f446:	f102 0608 	add.w	r6, r2, #8
 801f44a:	ed8d 7b08 	vstr	d7, [sp, #32]
 801f44e:	ed95 7b00 	vldr	d7, [r5]
 801f452:	fba1 c306 	umull	ip, r3, r1, r6
 801f456:	085b      	lsrs	r3, r3, #1
 801f458:	ed84 7b00 	vstr	d7, [r4]
 801f45c:	3207      	adds	r2, #7
 801f45e:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 801f462:	1af3      	subs	r3, r6, r3
 801f464:	fba1 6102 	umull	r6, r1, r1, r2
 801f468:	1e46      	subs	r6, r0, #1
 801f46a:	305f      	adds	r0, #95	; 0x5f
 801f46c:	eb07 04c0 	add.w	r4, r7, r0, lsl #3
 801f470:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801f474:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801f478:	ed94 7b00 	vldr	d7, [r4]
 801f47c:	4433      	add	r3, r6
 801f47e:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
 801f482:	ed8d 7b02 	vstr	d7, [sp, #8]
 801f486:	0849      	lsrs	r1, r1, #1
 801f488:	ed93 7b32 	vldr	d7, [r3, #200]	; 0xc8
 801f48c:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 801f490:	1a52      	subs	r2, r2, r1
 801f492:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 801f496:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801f49a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801f49e:	1993      	adds	r3, r2, r6
 801f4a0:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
 801f4a4:	ed85 7b00 	vstr	d7, [r5]
 801f4a8:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 801f4ac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801f4b0:	f7e0 fe6a 	bl	8000188 <__aeabi_dsub>
 801f4b4:	4682      	mov	sl, r0
 801f4b6:	468b      	mov	fp, r1
 801f4b8:	e9c4 ab00 	strd	sl, fp, [r4]
 801f4bc:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 801f4c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801f4c4:	4620      	mov	r0, r4
 801f4c6:	4629      	mov	r1, r5
 801f4c8:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
 801f4cc:	f7e1 fa9a 	bl	8000a04 <__aeabi_dcmpge>
 801f4d0:	b918      	cbnz	r0, 801f4da <runStepDetection.constprop.4+0xd52>
 801f4d2:	ed9d 7b04 	vldr	d7, [sp, #16]
 801f4d6:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 801f4da:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
 801f4de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801f4e2:	4620      	mov	r0, r4
 801f4e4:	4629      	mov	r1, r5
 801f4e6:	f7e1 fa8d 	bl	8000a04 <__aeabi_dcmpge>
 801f4ea:	b908      	cbnz	r0, 801f4f0 <runStepDetection.constprop.4+0xd68>
 801f4ec:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801f4f0:	4622      	mov	r2, r4
 801f4f2:	462b      	mov	r3, r5
 801f4f4:	4650      	mov	r0, sl
 801f4f6:	4659      	mov	r1, fp
 801f4f8:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
 801f4fc:	f7e1 fa82 	bl	8000a04 <__aeabi_dcmpge>
 801f500:	b908      	cbnz	r0, 801f506 <runStepDetection.constprop.4+0xd7e>
 801f502:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
 801f506:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 801f50a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801f50e:	4620      	mov	r0, r4
 801f510:	4629      	mov	r1, r5
 801f512:	f7e1 fa77 	bl	8000a04 <__aeabi_dcmpge>
 801f516:	b908      	cbnz	r0, 801f51c <runStepDetection.constprop.4+0xd94>
 801f518:	e9dd 450e 	ldrd	r4, r5, [sp, #56]	; 0x38
 801f51c:	4620      	mov	r0, r4
 801f51e:	4629      	mov	r1, r5
 801f520:	2200      	movs	r2, #0
 801f522:	2300      	movs	r3, #0
 801f524:	f7e1 fa5a 	bl	80009dc <__aeabi_dcmplt>
 801f528:	2800      	cmp	r0, #0
 801f52a:	f040 8148 	bne.w	801f7be <runStepDetection.constprop.4+0x1036>
 801f52e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 801f532:	2200      	movs	r2, #0
 801f534:	2300      	movs	r3, #0
 801f536:	f7e1 fa51 	bl	80009dc <__aeabi_dcmplt>
 801f53a:	2800      	cmp	r0, #0
 801f53c:	f040 82fd 	bne.w	801fb3a <runStepDetection.constprop.4+0x13b2>
 801f540:	9c00      	ldr	r4, [sp, #0]
 801f542:	eb04 1306 	add.w	r3, r4, r6, lsl #4
 801f546:	e9d3 23d4 	ldrd	r2, r3, [r3, #848]	; 0x350
 801f54a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801f54e:	f7e0 fe1b 	bl	8000188 <__aeabi_dsub>
 801f552:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801f556:	9323      	str	r3, [sp, #140]	; 0x8c
 801f558:	9022      	str	r0, [sp, #136]	; 0x88
 801f55a:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
 801f55e:	a314      	add	r3, pc, #80	; (adr r3, 801f5b0 <runStepDetection.constprop.4+0xe28>)
 801f560:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f564:	f7e1 fa58 	bl	8000a18 <__aeabi_dcmpgt>
 801f568:	b128      	cbz	r0, 801f576 <runStepDetection.constprop.4+0xdee>
 801f56a:	2200      	movs	r2, #0
 801f56c:	2300      	movs	r3, #0
 801f56e:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
 801f572:	e9c6 23ca 	strd	r2, r3, [r6, #808]	; 0x328
 801f576:	9a00      	ldr	r2, [sp, #0]
 801f578:	f8b2 3dda 	ldrh.w	r3, [r2, #3546]	; 0xdda
 801f57c:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 801f580:	f000 8278 	beq.w	801fa74 <runStepDetection.constprop.4+0x12ec>
 801f584:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801f586:	9318      	str	r3, [sp, #96]	; 0x60
 801f588:	f8d2 3920 	ldr.w	r3, [r2, #2336]	; 0x920
 801f58c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 801f590:	4293      	cmp	r3, r2
 801f592:	f000 8105 	beq.w	801f7a0 <runStepDetection.constprop.4+0x1018>
 801f596:	e0cf      	b.n	801f738 <runStepDetection.constprop.4+0xfb0>
 801f598:	9999999a 	.word	0x9999999a
 801f59c:	3fc99999 	.word	0x3fc99999
 801f5a0:	40000000 	.word	0x40000000
 801f5a4:	3f847ae1 	.word	0x3f847ae1
 801f5a8:	c0000000 	.word	0xc0000000
 801f5ac:	4000cccc 	.word	0x4000cccc
 801f5b0:	40000000 	.word	0x40000000
 801f5b4:	3f947ae1 	.word	0x3f947ae1
 801f5b8:	20007140 	.word	0x20007140
 801f5bc:	20006d40 	.word	0x20006d40
 801f5c0:	20007238 	.word	0x20007238
 801f5c4:	38e38e39 	.word	0x38e38e39
 801f5c8:	d8ec68ec 	.word	0xd8ec68ec
 801f5cc:	c0163585 	.word	0xc0163585
 801f5d0:	437e95c5 	.word	0x437e95c5
 801f5d4:	3fe5919c 	.word	0x3fe5919c
 801f5d8:	51139f60 	.word	0x51139f60
 801f5dc:	3ecc0dbb 	.word	0x3ecc0dbb
 801f5e0:	51139f77 	.word	0x51139f77
 801f5e4:	beec0dbb 	.word	0xbeec0dbb
 801f5e8:	db9e94f3 	.word	0xdb9e94f3
 801f5ec:	c01e9882 	.word	0xc01e9882
 801f5f0:	33905c52 	.word	0x33905c52
 801f5f4:	4039b74f 	.word	0x4039b74f
 801f5f8:	7cceb79a 	.word	0x7cceb79a
 801f5fc:	3ef50a4c 	.word	0x3ef50a4c
 801f600:	21b2a77a 	.word	0x21b2a77a
 801f604:	c048d104 	.word	0xc048d104
 801f608:	8cd520cc 	.word	0x8cd520cc
 801f60c:	404e129e 	.word	0x404e129e
 801f610:	34baf0b2 	.word	0x34baf0b2
 801f614:	c0476e09 	.word	0xc0476e09
 801f618:	9ddc3069 	.word	0x9ddc3069
 801f61c:	4036ec30 	.word	0x4036ec30
 801f620:	a343483e 	.word	0xa343483e
 801f624:	c019bfaa 	.word	0xc019bfaa
 801f628:	f569396f 	.word	0xf569396f
 801f62c:	3fe96d25 	.word	0x3fe96d25
 801f630:	f1049a39 	.word	0xf1049a39
 801f634:	3ea3f038 	.word	0x3ea3f038
 801f638:	f1049a42 	.word	0xf1049a42
 801f63c:	bec3f038 	.word	0xbec3f038
 801f640:	dfa0f23d 	.word	0xdfa0f23d
 801f644:	c01e8da7 	.word	0xc01e8da7
 801f648:	01762761 	.word	0x01762761
 801f64c:	4039bbda 	.word	0x4039bbda
 801f650:	6986e74c 	.word	0x6986e74c
 801f654:	3ecde855 	.word	0x3ecde855
 801f658:	29536926 	.word	0x29536926
 801f65c:	c048f7db 	.word	0xc048f7db
 801f660:	3d8eb359 	.word	0x3d8eb359
 801f664:	404e850c 	.word	0x404e850c
 801f668:	bf0dab98 	.word	0xbf0dab98
 801f66c:	c0480ffb 	.word	0xc0480ffb
 801f670:	baf2459f 	.word	0xbaf2459f
 801f674:	4037e68f 	.word	0x4037e68f
 801f678:	ca229dc1 	.word	0xca229dc1
 801f67c:	c01b58f7 	.word	0xc01b58f7
 801f680:	9f1dd59d 	.word	0x9f1dd59d
 801f684:	3feb9a81 	.word	0x3feb9a81
 801f688:	9e51653a 	.word	0x9e51653a
 801f68c:	3efc0898 	.word	0x3efc0898
 801f690:	9e51653a 	.word	0x9e51653a
 801f694:	bf1c0898 	.word	0xbf1c0898
 801f698:	25d651b2 	.word	0x25d651b2
 801f69c:	c01d2252 	.word	0xc01d2252
 801f6a0:	028b1a8a 	.word	0x028b1a8a
 801f6a4:	4037840d 	.word	0x4037840d
 801f6a8:	76bd0beb 	.word	0x76bd0beb
 801f6ac:	3f250672 	.word	0x3f250672
 801f6b0:	1ba52e11 	.word	0x1ba52e11
 801f6b4:	c045f843 	.word	0xc045f843
 801f6b8:	f569dcf6 	.word	0xf569dcf6
 801f6bc:	4049fa88 	.word	0x4049fa88
 801f6c0:	873bb7ba 	.word	0x873bb7ba
 801f6c4:	c043e7d0 	.word	0xc043e7d0
 801f6c8:	9b16aa8f 	.word	0x9b16aa8f
 801f6cc:	40334e01 	.word	0x40334e01
 801f6d0:	485a9039 	.word	0x485a9039
 801f6d4:	c015abbb 	.word	0xc015abbb
 801f6d8:	437e9598 	.word	0x437e9598
 801f6dc:	3fe5919c 	.word	0x3fe5919c
 801f6e0:	ce742e7b 	.word	0xce742e7b
 801f6e4:	3f030408 	.word	0x3f030408
 801f6e8:	ce742e65 	.word	0xce742e65
 801f6ec:	bf230408 	.word	0xbf230408
 801f6f0:	4631c98b 	.word	0x4631c98b
 801f6f4:	c01bbdb1 	.word	0xc01bbdb1
 801f6f8:	df7f3ce6 	.word	0xdf7f3ce6
 801f6fc:	4035a087 	.word	0x4035a087
 801f700:	35ae45aa 	.word	0x35ae45aa
 801f704:	3f2c860d 	.word	0x3f2c860d
 801f708:	ef90460d 	.word	0xef90460d
 801f70c:	c043c3e2 	.word	0xc043c3e2
 801f710:	cc0ecef4 	.word	0xcc0ecef4
 801f714:	40472391 	.word	0x40472391
 801f718:	7306664d 	.word	0x7306664d
 801f71c:	c041c2d2 	.word	0xc041c2d2
 801f720:	3cc1372b 	.word	0x3cc1372b
 801f724:	403176ba 	.word	0x403176ba
 801f728:	0940ed76 	.word	0x0940ed76
 801f72c:	c0142163 	.word	0xc0142163
 801f730:	2bb58896 	.word	0x2bb58896
 801f734:	3fe4de9a 	.word	0x3fe4de9a
 801f738:	9a00      	ldr	r2, [sp, #0]
 801f73a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801f73c:	f8d2 350c 	ldr.w	r3, [r2, #1292]	; 0x50c
 801f740:	1acb      	subs	r3, r1, r3
 801f742:	2b32      	cmp	r3, #50	; 0x32
 801f744:	d90c      	bls.n	801f760 <runStepDetection.constprop.4+0xfd8>
 801f746:	f8d2 3560 	ldr.w	r3, [r2, #1376]	; 0x560
 801f74a:	2b00      	cmp	r3, #0
 801f74c:	bfc4      	itt	gt
 801f74e:	f103 33ff 	addgt.w	r3, r3, #4294967295
 801f752:	f8c2 3560 	strgt.w	r3, [r2, #1376]	; 0x560
 801f756:	9b00      	ldr	r3, [sp, #0]
 801f758:	461a      	mov	r2, r3
 801f75a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801f75c:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
 801f760:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801f762:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801f764:	3301      	adds	r3, #1
 801f766:	3218      	adds	r2, #24
 801f768:	2b06      	cmp	r3, #6
 801f76a:	9321      	str	r3, [sp, #132]	; 0x84
 801f76c:	920d      	str	r2, [sp, #52]	; 0x34
 801f76e:	f47f a83f 	bne.w	801e7f0 <runStepDetection.constprop.4+0x68>
 801f772:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f774:	461a      	mov	r2, r3
 801f776:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801f778:	6013      	str	r3, [r2, #0]
 801f77a:	4610      	mov	r0, r2
 801f77c:	f60d 7de4 	addw	sp, sp, #4068	; 0xfe4
 801f780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f784:	49b2      	ldr	r1, [pc, #712]	; (801fa50 <runStepDetection.constprop.4+0x12c8>)
 801f786:	f8d1 3920 	ldr.w	r3, [r1, #2336]	; 0x920
 801f78a:	f8a1 0dda 	strh.w	r0, [r1, #3546]	; 0xdda
 801f78e:	3301      	adds	r3, #1
 801f790:	f240 52dc 	movw	r2, #1500	; 0x5dc
 801f794:	4293      	cmp	r3, r2
 801f796:	d90c      	bls.n	801f7b2 <runStepDetection.constprop.4+0x102a>
 801f798:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801f79a:	f8c1 2920 	str.w	r2, [r1, #2336]	; 0x920
 801f79e:	9318      	str	r3, [sp, #96]	; 0x60
 801f7a0:	9a00      	ldr	r2, [sp, #0]
 801f7a2:	2301      	movs	r3, #1
 801f7a4:	f882 35f4 	strb.w	r3, [r2, #1524]	; 0x5f4
 801f7a8:	e7c6      	b.n	801f738 <runStepDetection.constprop.4+0xfb0>
 801f7aa:	4aa9      	ldr	r2, [pc, #676]	; (801fa50 <runStepDetection.constprop.4+0x12c8>)
 801f7ac:	f8a2 3dda 	strh.w	r3, [r2, #3546]	; 0xdda
 801f7b0:	e605      	b.n	801f3be <runStepDetection.constprop.4+0xc36>
 801f7b2:	4aa7      	ldr	r2, [pc, #668]	; (801fa50 <runStepDetection.constprop.4+0x12c8>)
 801f7b4:	f8c2 3920 	str.w	r3, [r2, #2336]	; 0x920
 801f7b8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801f7ba:	9218      	str	r2, [sp, #96]	; 0x60
 801f7bc:	e6e6      	b.n	801f58c <runStepDetection.constprop.4+0xe04>
 801f7be:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
 801f7c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801f7c6:	4620      	mov	r0, r4
 801f7c8:	4629      	mov	r1, r5
 801f7ca:	f7e1 f911 	bl	80009f0 <__aeabi_dcmple>
 801f7ce:	2800      	cmp	r0, #0
 801f7d0:	f000 821f 	beq.w	801fc12 <runStepDetection.constprop.4+0x148a>
 801f7d4:	4622      	mov	r2, r4
 801f7d6:	462b      	mov	r3, r5
 801f7d8:	4650      	mov	r0, sl
 801f7da:	4659      	mov	r1, fp
 801f7dc:	f7e1 f908 	bl	80009f0 <__aeabi_dcmple>
 801f7e0:	2800      	cmp	r0, #0
 801f7e2:	f000 8213 	beq.w	801fc0c <runStepDetection.constprop.4+0x1484>
 801f7e6:	4650      	mov	r0, sl
 801f7e8:	4659      	mov	r1, fp
 801f7ea:	2200      	movs	r2, #0
 801f7ec:	2300      	movs	r3, #0
 801f7ee:	f7e1 f913 	bl	8000a18 <__aeabi_dcmpgt>
 801f7f2:	2800      	cmp	r0, #0
 801f7f4:	f43f ae9b 	beq.w	801f52e <runStepDetection.constprop.4+0xda6>
 801f7f8:	f04f 39ff 	mov.w	r9, #4294967295
 801f7fc:	9b00      	ldr	r3, [sp, #0]
 801f7fe:	f106 0465 	add.w	r4, r6, #101	; 0x65
 801f802:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 801f806:	e9d4 0100 	ldrd	r0, r1, [r4]
 801f80a:	2200      	movs	r2, #0
 801f80c:	2300      	movs	r3, #0
 801f80e:	f7e1 f8db 	bl	80009c8 <__aeabi_dcmpeq>
 801f812:	2800      	cmp	r0, #0
 801f814:	f000 820f 	beq.w	801fc36 <runStepDetection.constprop.4+0x14ae>
 801f818:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f81a:	4a8e      	ldr	r2, [pc, #568]	; (801fa54 <runStepDetection.constprop.4+0x12cc>)
 801f81c:	3306      	adds	r3, #6
 801f81e:	fba2 1203 	umull	r1, r2, r2, r3
 801f822:	0852      	lsrs	r2, r2, #1
 801f824:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 801f828:	1a9b      	subs	r3, r3, r2
 801f82a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801f82e:	9a00      	ldr	r2, [sp, #0]
 801f830:	1999      	adds	r1, r3, r6
 801f832:	f106 0335 	add.w	r3, r6, #53	; 0x35
 801f836:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 801f83a:	4610      	mov	r0, r2
 801f83c:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 801f840:	eb02 1206 	add.w	r2, r2, r6, lsl #4
 801f844:	ed93 6b00 	vldr	d6, [r3]
 801f848:	e9d2 abd6 	ldrd	sl, fp, [r2, #856]	; 0x358
 801f84c:	ed91 7b32 	vldr	d7, [r1, #200]	; 0xc8
 801f850:	f106 053a 	add.w	r5, r6, #58	; 0x3a
 801f854:	9918      	ldr	r1, [sp, #96]	; 0x60
 801f856:	9304      	str	r3, [sp, #16]
 801f858:	eb00 1505 	add.w	r5, r0, r5, lsl #4
 801f85c:	ed85 6b00 	vstr	d6, [r5]
 801f860:	ed83 7b00 	vstr	d7, [r3]
 801f864:	e9c2 abea 	strd	sl, fp, [r2, #936]	; 0x3a8
 801f868:	1e88      	subs	r0, r1, #2
 801f86a:	9202      	str	r2, [sp, #8]
 801f86c:	f7e0 fdca 	bl	8000404 <__aeabi_ui2d>
 801f870:	9a02      	ldr	r2, [sp, #8]
 801f872:	9b04      	ldr	r3, [sp, #16]
 801f874:	460f      	mov	r7, r1
 801f876:	4978      	ldr	r1, [pc, #480]	; (801fa58 <runStepDetection.constprop.4+0x12d0>)
 801f878:	4606      	mov	r6, r0
 801f87a:	f1b9 3fff 	cmp.w	r9, #4294967295
 801f87e:	f04f 0000 	mov.w	r0, #0
 801f882:	e9c2 67d6 	strd	r6, r7, [r2, #856]	; 0x358
 801f886:	e9c4 0100 	strd	r0, r1, [r4]
 801f88a:	f47f ae74 	bne.w	801f576 <runStepDetection.constprop.4+0xdee>
 801f88e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f892:	e9d5 0100 	ldrd	r0, r1, [r5]
 801f896:	f7e0 fc77 	bl	8000188 <__aeabi_dsub>
 801f89a:	f7e1 f925 	bl	8000ae8 <__aeabi_d2f>
 801f89e:	eddf 7a6f 	vldr	s15, [pc, #444]	; 801fa5c <runStepDetection.constprop.4+0x12d4>
 801f8a2:	ee07 0a10 	vmov	s14, r0
 801f8a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801f8aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f8ae:	f77f ae62 	ble.w	801f576 <runStepDetection.constprop.4+0xdee>
 801f8b2:	4652      	mov	r2, sl
 801f8b4:	465b      	mov	r3, fp
 801f8b6:	4630      	mov	r0, r6
 801f8b8:	4639      	mov	r1, r7
 801f8ba:	f7e0 fc65 	bl	8000188 <__aeabi_dsub>
 801f8be:	f7e1 f913 	bl	8000ae8 <__aeabi_d2f>
 801f8c2:	ed9f 7a67 	vldr	s14, [pc, #412]	; 801fa60 <runStepDetection.constprop.4+0x12d8>
 801f8c6:	ee07 0a90 	vmov	s15, r0
 801f8ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 801f8ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f8d2:	f57f ae50 	bpl.w	801f576 <runStepDetection.constprop.4+0xdee>
 801f8d6:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 801f8da:	eef4 7ac7 	vcmpe.f32	s15, s14
 801f8de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f8e2:	f77f ae48 	ble.w	801f576 <runStepDetection.constprop.4+0xdee>
 801f8e6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801f8e8:	2bc8      	cmp	r3, #200	; 0xc8
 801f8ea:	f67f ae44 	bls.w	801f576 <runStepDetection.constprop.4+0xdee>
 801f8ee:	9a00      	ldr	r2, [sp, #0]
 801f8f0:	4e5c      	ldr	r6, [pc, #368]	; (801fa64 <runStepDetection.constprop.4+0x12dc>)
 801f8f2:	4618      	mov	r0, r3
 801f8f4:	2300      	movs	r3, #0
 801f8f6:	f882 34e8 	strb.w	r3, [r2, #1256]	; 0x4e8
 801f8fa:	f7e0 fd83 	bl	8000404 <__aeabi_ui2d>
 801f8fe:	e9d6 ab00 	ldrd	sl, fp, [r6]
 801f902:	4604      	mov	r4, r0
 801f904:	460d      	mov	r5, r1
 801f906:	2200      	movs	r2, #0
 801f908:	2300      	movs	r3, #0
 801f90a:	4650      	mov	r0, sl
 801f90c:	4659      	mov	r1, fp
 801f90e:	f7e1 f85b 	bl	80009c8 <__aeabi_dcmpeq>
 801f912:	2800      	cmp	r0, #0
 801f914:	f040 853a 	bne.w	802038c <runStepDetection.constprop.4+0x1c04>
 801f918:	4652      	mov	r2, sl
 801f91a:	465b      	mov	r3, fp
 801f91c:	4620      	mov	r0, r4
 801f91e:	4629      	mov	r1, r5
 801f920:	f7e0 fc32 	bl	8000188 <__aeabi_dsub>
 801f924:	4602      	mov	r2, r0
 801f926:	460b      	mov	r3, r1
 801f928:	2000      	movs	r0, #0
 801f92a:	494f      	ldr	r1, [pc, #316]	; (801fa68 <runStepDetection.constprop.4+0x12e0>)
 801f92c:	f7e0 ff0e 	bl	800074c <__aeabi_ddiv>
 801f930:	9a00      	ldr	r2, [sp, #0]
 801f932:	f8d2 3560 	ldr.w	r3, [r2, #1376]	; 0x560
 801f936:	3301      	adds	r3, #1
 801f938:	2b05      	cmp	r3, #5
 801f93a:	f8c2 3560 	str.w	r3, [r2, #1376]	; 0x560
 801f93e:	bfc4      	itt	gt
 801f940:	2305      	movgt	r3, #5
 801f942:	f8c2 3560 	strgt.w	r3, [r2, #1376]	; 0x560
 801f946:	9a00      	ldr	r2, [sp, #0]
 801f948:	f8d2 3508 	ldr.w	r3, [r2, #1288]	; 0x508
 801f94c:	3301      	adds	r3, #1
 801f94e:	2b06      	cmp	r3, #6
 801f950:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
 801f954:	bf84      	itt	hi
 801f956:	2306      	movhi	r3, #6
 801f958:	f8c2 3508 	strhi.w	r3, [r2, #1288]	; 0x508
 801f95c:	9b00      	ldr	r3, [sp, #0]
 801f95e:	e9c6 4500 	strd	r4, r5, [r6]
 801f962:	f8d3 5508 	ldr.w	r5, [r3, #1288]	; 0x508
 801f966:	4c41      	ldr	r4, [pc, #260]	; (801fa6c <runStepDetection.constprop.4+0x12e4>)
 801f968:	4682      	mov	sl, r0
 801f96a:	468b      	mov	fp, r1
 801f96c:	2d05      	cmp	r5, #5
 801f96e:	e9c4 ab00 	strd	sl, fp, [r4]
 801f972:	f200 84ab 	bhi.w	80202cc <runStepDetection.constprop.4+0x1b44>
 801f976:	9a00      	ldr	r2, [sp, #0]
 801f978:	f105 03a1 	add.w	r3, r5, #161	; 0xa1
 801f97c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801f980:	e9c3 ab00 	strd	sl, fp, [r3]
 801f984:	2d00      	cmp	r5, #0
 801f986:	f000 846d 	beq.w	8020264 <runStepDetection.constprop.4+0x1adc>
 801f98a:	2d01      	cmp	r5, #1
 801f98c:	e9d4 6706 	ldrd	r6, r7, [r4, #24]
 801f990:	d01f      	beq.n	801f9d2 <runStepDetection.constprop.4+0x124a>
 801f992:	4630      	mov	r0, r6
 801f994:	4639      	mov	r1, r7
 801f996:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 801f99a:	f7e0 fbf7 	bl	800018c <__adddf3>
 801f99e:	2d02      	cmp	r5, #2
 801f9a0:	4606      	mov	r6, r0
 801f9a2:	460f      	mov	r7, r1
 801f9a4:	d015      	beq.n	801f9d2 <runStepDetection.constprop.4+0x124a>
 801f9a6:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 801f9aa:	f7e0 fbef 	bl	800018c <__adddf3>
 801f9ae:	2d03      	cmp	r5, #3
 801f9b0:	4606      	mov	r6, r0
 801f9b2:	460f      	mov	r7, r1
 801f9b4:	d00d      	beq.n	801f9d2 <runStepDetection.constprop.4+0x124a>
 801f9b6:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 801f9ba:	f7e0 fbe7 	bl	800018c <__adddf3>
 801f9be:	2d05      	cmp	r5, #5
 801f9c0:	4606      	mov	r6, r0
 801f9c2:	460f      	mov	r7, r1
 801f9c4:	d105      	bne.n	801f9d2 <runStepDetection.constprop.4+0x124a>
 801f9c6:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 801f9ca:	f7e0 fbdf 	bl	800018c <__adddf3>
 801f9ce:	4606      	mov	r6, r0
 801f9d0:	460f      	mov	r7, r1
 801f9d2:	4628      	mov	r0, r5
 801f9d4:	f7e0 fd16 	bl	8000404 <__aeabi_ui2d>
 801f9d8:	4602      	mov	r2, r0
 801f9da:	460b      	mov	r3, r1
 801f9dc:	4630      	mov	r0, r6
 801f9de:	4639      	mov	r1, r7
 801f9e0:	f7e0 feb4 	bl	800074c <__aeabi_ddiv>
 801f9e4:	4c22      	ldr	r4, [pc, #136]	; (801fa70 <runStepDetection.constprop.4+0x12e8>)
 801f9e6:	e9c4 0100 	strd	r0, r1, [r4]
 801f9ea:	4652      	mov	r2, sl
 801f9ec:	465b      	mov	r3, fp
 801f9ee:	e9d4 0100 	ldrd	r0, r1, [r4]
 801f9f2:	f7e0 fbc9 	bl	8000188 <__aeabi_dsub>
 801f9f6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801f9fa:	932b      	str	r3, [sp, #172]	; 0xac
 801f9fc:	902a      	str	r0, [sp, #168]	; 0xa8
 801f9fe:	a312      	add	r3, pc, #72	; (adr r3, 801fa48 <runStepDetection.constprop.4+0x12c0>)
 801fa00:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fa04:	e9dd 012a 	ldrd	r0, r1, [sp, #168]	; 0xa8
 801fa08:	f7e0 fd76 	bl	80004f8 <__aeabi_dmul>
 801fa0c:	f001 f920 	bl	8020c50 <floor>
 801fa10:	9e00      	ldr	r6, [sp, #0]
 801fa12:	4604      	mov	r4, r0
 801fa14:	460d      	mov	r5, r1
 801fa16:	f8d6 0560 	ldr.w	r0, [r6, #1376]	; 0x560
 801fa1a:	f7e0 fd03 	bl	8000424 <__aeabi_i2d>
 801fa1e:	4622      	mov	r2, r4
 801fa20:	462b      	mov	r3, r5
 801fa22:	f7e0 fbb1 	bl	8000188 <__aeabi_dsub>
 801fa26:	f7e1 f817 	bl	8000a58 <__aeabi_d2iz>
 801fa2a:	2800      	cmp	r0, #0
 801fa2c:	f8c6 0560 	str.w	r0, [r6, #1376]	; 0x560
 801fa30:	da03      	bge.n	801fa3a <runStepDetection.constprop.4+0x12b2>
 801fa32:	9a00      	ldr	r2, [sp, #0]
 801fa34:	2300      	movs	r3, #0
 801fa36:	f8c2 3560 	str.w	r3, [r2, #1376]	; 0x560
 801fa3a:	9b00      	ldr	r3, [sp, #0]
 801fa3c:	461a      	mov	r2, r3
 801fa3e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801fa40:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
 801fa44:	e597      	b.n	801f576 <runStepDetection.constprop.4+0xdee>
 801fa46:	bf00      	nop
 801fa48:	fb000001 	.word	0xfb000001
 801fa4c:	4023ffff 	.word	0x4023ffff
 801fa50:	20006d40 	.word	0x20006d40
 801fa54:	38e38e39 	.word	0x38e38e39
 801fa58:	3ff00000 	.word	0x3ff00000
 801fa5c:	3dcccccd 	.word	0x3dcccccd
 801fa60:	42000000 	.word	0x42000000
 801fa64:	20007240 	.word	0x20007240
 801fa68:	40490000 	.word	0x40490000
 801fa6c:	20007238 	.word	0x20007238
 801fa70:	20007230 	.word	0x20007230
 801fa74:	f8d2 3560 	ldr.w	r3, [r2, #1376]	; 0x560
 801fa78:	2b01      	cmp	r3, #1
 801fa7a:	f73f ad83 	bgt.w	801f584 <runStepDetection.constprop.4+0xdfc>
 801fa7e:	4f72      	ldr	r7, [pc, #456]	; (801fc48 <runStepDetection.constprop.4+0x14c0>)
 801fa80:	eddf 7a72 	vldr	s15, [pc, #456]	; 801fc4c <runStepDetection.constprop.4+0x14c4>
 801fa84:	f507 7216 	add.w	r2, r7, #600	; 0x258
 801fa88:	463b      	mov	r3, r7
 801fa8a:	ecb3 7a01 	vldmia	r3!, {s14}
 801fa8e:	429a      	cmp	r2, r3
 801fa90:	ee77 7a87 	vadd.f32	s15, s15, s14
 801fa94:	d1f9      	bne.n	801fa8a <runStepDetection.constprop.4+0x1302>
 801fa96:	eddf 6a6e 	vldr	s13, [pc, #440]	; 801fc50 <runStepDetection.constprop.4+0x14c8>
 801fa9a:	9b00      	ldr	r3, [sp, #0]
 801fa9c:	4d6d      	ldr	r5, [pc, #436]	; (801fc54 <runStepDetection.constprop.4+0x14cc>)
 801fa9e:	f50d 6bd1 	add.w	fp, sp, #1672	; 0x688
 801faa2:	2000      	movs	r0, #0
 801faa4:	f04f 0e00 	mov.w	lr, #0
 801faa8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 801faac:	465c      	mov	r4, fp
 801faae:	f603 1c2c 	addw	ip, r3, #2348	; 0x92c
 801fab2:	b286      	uxth	r6, r0
 801fab4:	b1f0      	cbz	r0, 801faf4 <runStepDetection.constprop.4+0x136c>
 801fab6:	1e71      	subs	r1, r6, #1
 801fab8:	b289      	uxth	r1, r1
 801faba:	ed9f 6a64 	vldr	s12, [pc, #400]	; 801fc4c <runStepDetection.constprop.4+0x14c4>
 801fabe:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
 801fac2:	462a      	mov	r2, r5
 801fac4:	463b      	mov	r3, r7
 801fac6:	ecb3 7a01 	vldmia	r3!, {s14}
 801faca:	ecf2 7a01 	vldmia	r2!, {s15}
 801face:	ee37 7a66 	vsub.f32	s14, s14, s13
 801fad2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801fad6:	4299      	cmp	r1, r3
 801fad8:	eea7 6a27 	vfma.f32	s12, s14, s15
 801fadc:	d1f3      	bne.n	801fac6 <runStepDetection.constprop.4+0x133e>
 801fade:	2e95      	cmp	r6, #149	; 0x95
 801fae0:	ed84 6a00 	vstr	s12, [r4]
 801fae4:	f000 80c0 	beq.w	801fc68 <runStepDetection.constprop.4+0x14e0>
 801fae8:	3001      	adds	r0, #1
 801faea:	3404      	adds	r4, #4
 801faec:	3d04      	subs	r5, #4
 801faee:	b286      	uxth	r6, r0
 801faf0:	2800      	cmp	r0, #0
 801faf2:	d1e0      	bne.n	801fab6 <runStepDetection.constprop.4+0x132e>
 801faf4:	f8c4 e000 	str.w	lr, [r4]
 801faf8:	e7f6      	b.n	801fae8 <runStepDetection.constprop.4+0x1360>
 801fafa:	2400      	movs	r4, #0
 801fafc:	2500      	movs	r5, #0
 801fafe:	e9c8 4500 	strd	r4, r5, [r8]
 801fb02:	4e55      	ldr	r6, [pc, #340]	; (801fc58 <runStepDetection.constprop.4+0x14d0>)
 801fb04:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801fb08:	4610      	mov	r0, r2
 801fb0a:	4619      	mov	r1, r3
 801fb0c:	f7e0 fcf4 	bl	80004f8 <__aeabi_dmul>
 801fb10:	4602      	mov	r2, r0
 801fb12:	460b      	mov	r3, r1
 801fb14:	4620      	mov	r0, r4
 801fb16:	4629      	mov	r1, r5
 801fb18:	f7e0 fb38 	bl	800018c <__adddf3>
 801fb1c:	45b0      	cmp	r8, r6
 801fb1e:	4604      	mov	r4, r0
 801fb20:	460d      	mov	r5, r1
 801fb22:	d1ef      	bne.n	801fb04 <runStepDetection.constprop.4+0x137c>
 801fb24:	a346      	add	r3, pc, #280	; (adr r3, 801fc40 <runStepDetection.constprop.4+0x14b8>)
 801fb26:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fb2a:	f7e0 fce5 	bl	80004f8 <__aeabi_dmul>
 801fb2e:	e9cd 011e 	strd	r0, r1, [sp, #120]	; 0x78
 801fb32:	e9c8 0100 	strd	r0, r1, [r8]
 801fb36:	f7fe bebe 	b.w	801e8b6 <runStepDetection.constprop.4+0x12e>
 801fb3a:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 801fb3e:	e9dd 9a04 	ldrd	r9, sl, [sp, #16]
 801fb42:	4620      	mov	r0, r4
 801fb44:	464a      	mov	r2, r9
 801fb46:	4653      	mov	r3, sl
 801fb48:	4629      	mov	r1, r5
 801fb4a:	f7e0 ff51 	bl	80009f0 <__aeabi_dcmple>
 801fb4e:	2800      	cmp	r0, #0
 801fb50:	d06b      	beq.n	801fc2a <runStepDetection.constprop.4+0x14a2>
 801fb52:	e9dd ab08 	ldrd	sl, fp, [sp, #32]
 801fb56:	4622      	mov	r2, r4
 801fb58:	462b      	mov	r3, r5
 801fb5a:	4650      	mov	r0, sl
 801fb5c:	4659      	mov	r1, fp
 801fb5e:	f7e0 ff47 	bl	80009f0 <__aeabi_dcmple>
 801fb62:	2800      	cmp	r0, #0
 801fb64:	d064      	beq.n	801fc30 <runStepDetection.constprop.4+0x14a8>
 801fb66:	4650      	mov	r0, sl
 801fb68:	4659      	mov	r1, fp
 801fb6a:	2200      	movs	r2, #0
 801fb6c:	2300      	movs	r3, #0
 801fb6e:	f7e0 ff53 	bl	8000a18 <__aeabi_dcmpgt>
 801fb72:	2800      	cmp	r0, #0
 801fb74:	f43f ace4 	beq.w	801f540 <runStepDetection.constprop.4+0xdb8>
 801fb78:	f04f 0901 	mov.w	r9, #1
 801fb7c:	e63e      	b.n	801f7fc <runStepDetection.constprop.4+0x1074>
 801fb7e:	4937      	ldr	r1, [pc, #220]	; (801fc5c <runStepDetection.constprop.4+0x14d4>)
 801fb80:	22ff      	movs	r2, #255	; 0xff
 801fb82:	440b      	add	r3, r1
 801fb84:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 801fb88:	f881 24e8 	strb.w	r2, [r1, #1256]	; 0x4e8
 801fb8c:	e9d3 ab00 	ldrd	sl, fp, [r3]
 801fb90:	f104 0983 	add.w	r9, r4, #131	; 0x83
 801fb94:	f1c4 0301 	rsb	r3, r4, #1
 801fb98:	eb01 09c9 	add.w	r9, r1, r9, lsl #3
 801fb9c:	2500      	movs	r5, #0
 801fb9e:	9302      	str	r3, [sp, #8]
 801fba0:	e8f9 6702 	ldrd	r6, r7, [r9], #8
 801fba4:	4652      	mov	r2, sl
 801fba6:	465b      	mov	r3, fp
 801fba8:	4630      	mov	r0, r6
 801fbaa:	4639      	mov	r1, r7
 801fbac:	f7e0 ff16 	bl	80009dc <__aeabi_dcmplt>
 801fbb0:	b118      	cbz	r0, 801fbba <runStepDetection.constprop.4+0x1432>
 801fbb2:	9b02      	ldr	r3, [sp, #8]
 801fbb4:	46b2      	mov	sl, r6
 801fbb6:	46bb      	mov	fp, r7
 801fbb8:	191d      	adds	r5, r3, r4
 801fbba:	3401      	adds	r4, #1
 801fbbc:	2c1a      	cmp	r4, #26
 801fbbe:	d1ef      	bne.n	801fba0 <runStepDetection.constprop.4+0x1418>
 801fbc0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801fbc2:	9e25      	ldr	r6, [sp, #148]	; 0x94
 801fbc4:	f1c5 0419 	rsb	r4, r5, #25
 801fbc8:	1b1c      	subs	r4, r3, r4
 801fbca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801fbcc:	441c      	add	r4, r3
 801fbce:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fbd0:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 801fbd4:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 801fbd8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 801fbdc:	4b20      	ldr	r3, [pc, #128]	; (801fc60 <runStepDetection.constprop.4+0x14d8>)
 801fbde:	00a4      	lsls	r4, r4, #2
 801fbe0:	e9d3 0100 	ldrd	r0, r1, [r3]
 801fbe4:	606c      	str	r4, [r5, #4]
 801fbe6:	f7e0 ff5f 	bl	8000aa8 <__aeabi_d2uiz>
 801fbea:	9a00      	ldr	r2, [sp, #0]
 801fbec:	60a8      	str	r0, [r5, #8]
 801fbee:	f8d2 3560 	ldr.w	r3, [r2, #1376]	; 0x560
 801fbf2:	9302      	str	r3, [sp, #8]
 801fbf4:	ee07 3a90 	vmov	s15, r3
 801fbf8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801fbfc:	1c73      	adds	r3, r6, #1
 801fbfe:	9325      	str	r3, [sp, #148]	; 0x94
 801fc00:	f8c2 44ec 	str.w	r4, [r2, #1260]	; 0x4ec
 801fc04:	edc5 7a03 	vstr	s15, [r5, #12]
 801fc08:	f7ff bbf6 	b.w	801f3f8 <runStepDetection.constprop.4+0xc70>
 801fc0c:	46a2      	mov	sl, r4
 801fc0e:	46ab      	mov	fp, r5
 801fc10:	e5e9      	b.n	801f7e6 <runStepDetection.constprop.4+0x105e>
 801fc12:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801fc16:	4650      	mov	r0, sl
 801fc18:	4622      	mov	r2, r4
 801fc1a:	462b      	mov	r3, r5
 801fc1c:	4659      	mov	r1, fp
 801fc1e:	f7e0 fee7 	bl	80009f0 <__aeabi_dcmple>
 801fc22:	2800      	cmp	r0, #0
 801fc24:	f47f addf 	bne.w	801f7e6 <runStepDetection.constprop.4+0x105e>
 801fc28:	e7f0      	b.n	801fc0c <runStepDetection.constprop.4+0x1484>
 801fc2a:	464c      	mov	r4, r9
 801fc2c:	4655      	mov	r5, sl
 801fc2e:	e790      	b.n	801fb52 <runStepDetection.constprop.4+0x13ca>
 801fc30:	46a2      	mov	sl, r4
 801fc32:	46ab      	mov	fp, r5
 801fc34:	e797      	b.n	801fb66 <runStepDetection.constprop.4+0x13de>
 801fc36:	4b0b      	ldr	r3, [pc, #44]	; (801fc64 <runStepDetection.constprop.4+0x14dc>)
 801fc38:	2200      	movs	r2, #0
 801fc3a:	e9c4 2300 	strd	r2, r3, [r4]
 801fc3e:	e49a      	b.n	801f576 <runStepDetection.constprop.4+0xdee>
 801fc40:	47ae147b 	.word	0x47ae147b
 801fc44:	3f847ae1 	.word	0x3f847ae1
 801fc48:	20007668 	.word	0x20007668
 801fc4c:	00000000 	.word	0x00000000
 801fc50:	3bda740e 	.word	0x3bda740e
 801fc54:	200078c0 	.word	0x200078c0
 801fc58:	20007338 	.word	0x20007338
 801fc5c:	20006d40 	.word	0x20006d40
 801fc60:	20007230 	.word	0x20007230
 801fc64:	3ff00000 	.word	0x3ff00000
 801fc68:	f60d 03dc 	addw	r3, sp, #2268	; 0x8dc
 801fc6c:	f50d 620e 	add.w	r2, sp, #2272	; 0x8e0
 801fc70:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801fc74:	f842 1b04 	str.w	r1, [r2], #4
 801fc78:	459b      	cmp	fp, r3
 801fc7a:	d1f9      	bne.n	801fc70 <runStepDetection.constprop.4+0x14e8>
 801fc7c:	f50d 6333 	add.w	r3, sp, #2864	; 0xb30
 801fc80:	e9d3 4500 	ldrd	r4, r5, [r3]
 801fc84:	a3a9      	add	r3, pc, #676	; (adr r3, 801ff2c <runStepDetection.constprop.4+0x17a4>)
 801fc86:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fc8a:	4620      	mov	r0, r4
 801fc8c:	4629      	mov	r1, r5
 801fc8e:	f7e0 fc33 	bl	80004f8 <__aeabi_dmul>
 801fc92:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
 801fc96:	ab78      	add	r3, sp, #480	; 0x1e0
 801fc98:	931c      	str	r3, [sp, #112]	; 0x70
 801fc9a:	461f      	mov	r7, r3
 801fc9c:	f60d 3638 	addw	r6, sp, #2872	; 0xb38
 801fca0:	f04f 0900 	mov.w	r9, #0
 801fca4:	f8cd b008 	str.w	fp, [sp, #8]
 801fca8:	e9d6 ab00 	ldrd	sl, fp, [r6]
 801fcac:	4622      	mov	r2, r4
 801fcae:	462b      	mov	r3, r5
 801fcb0:	4650      	mov	r0, sl
 801fcb2:	4659      	mov	r1, fp
 801fcb4:	f7e0 fa68 	bl	8000188 <__aeabi_dsub>
 801fcb8:	e9d6 4502 	ldrd	r4, r5, [r6, #8]
 801fcbc:	e9c7 0100 	strd	r0, r1, [r7]
 801fcc0:	4652      	mov	r2, sl
 801fcc2:	465b      	mov	r3, fp
 801fcc4:	4620      	mov	r0, r4
 801fcc6:	4629      	mov	r1, r5
 801fcc8:	f7e0 fa5e 	bl	8000188 <__aeabi_dsub>
 801fccc:	f109 0902 	add.w	r9, r9, #2
 801fcd0:	f1b9 0f94 	cmp.w	r9, #148	; 0x94
 801fcd4:	e9c7 0102 	strd	r0, r1, [r7, #8]
 801fcd8:	f106 0610 	add.w	r6, r6, #16
 801fcdc:	f107 0710 	add.w	r7, r7, #16
 801fce0:	d1e2      	bne.n	801fca8 <runStepDetection.constprop.4+0x1520>
 801fce2:	f50d 637d 	add.w	r3, sp, #4048	; 0xfd0
 801fce6:	f60d 71d8 	addw	r1, sp, #4056	; 0xfd8
 801fcea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fcee:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fcf2:	f7e0 fa49 	bl	8000188 <__aeabi_dsub>
 801fcf6:	ed9f 7b88 	vldr	d7, [pc, #544]	; 801ff18 <runStepDetection.constprop.4+0x1790>
 801fcfa:	e9dd 677c 	ldrd	r6, r7, [sp, #496]	; 0x1f0
 801fcfe:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
 801fd02:	ed9d 7b7e 	vldr	d7, [sp, #504]	; 0x1f8
 801fd06:	f50d 63d0 	add.w	r3, sp, #1664	; 0x680
 801fd0a:	f8dd b008 	ldr.w	fp, [sp, #8]
 801fd0e:	f8cd b068 	str.w	fp, [sp, #104]	; 0x68
 801fd12:	e9c3 0100 	strd	r0, r1, [r3]
 801fd16:	e9dd 457a 	ldrd	r4, r5, [sp, #488]	; 0x1e8
 801fd1a:	ed8d 7b04 	vstr	d7, [sp, #16]
 801fd1e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801fd22:	2200      	movs	r2, #0
 801fd24:	f04f 0a90 	mov.w	sl, #144	; 0x90
 801fd28:	9206      	str	r2, [sp, #24]
 801fd2a:	920e      	str	r2, [sp, #56]	; 0x38
 801fd2c:	f50d 6935 	add.w	r9, sp, #2896	; 0xb50
 801fd30:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 801fd34:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801fd36:	ecb3 7b02 	vldmia	r3!, {d7}
 801fd3a:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 801fd3e:	461e      	mov	r6, r3
 801fd40:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 801fd44:	ed96 7b06 	vldr	d7, [r6, #24]
 801fd48:	931c      	str	r3, [sp, #112]	; 0x70
 801fd4a:	4622      	mov	r2, r4
 801fd4c:	462b      	mov	r3, r5
 801fd4e:	4650      	mov	r0, sl
 801fd50:	4659      	mov	r1, fp
 801fd52:	ed8d 7b08 	vstr	d7, [sp, #32]
 801fd56:	f7e0 fe4b 	bl	80009f0 <__aeabi_dcmple>
 801fd5a:	b908      	cbnz	r0, 801fd60 <runStepDetection.constprop.4+0x15d8>
 801fd5c:	46a2      	mov	sl, r4
 801fd5e:	46ab      	mov	fp, r5
 801fd60:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 801fd64:	4650      	mov	r0, sl
 801fd66:	4632      	mov	r2, r6
 801fd68:	463b      	mov	r3, r7
 801fd6a:	4659      	mov	r1, fp
 801fd6c:	f7e0 fe40 	bl	80009f0 <__aeabi_dcmple>
 801fd70:	b908      	cbnz	r0, 801fd76 <runStepDetection.constprop.4+0x15ee>
 801fd72:	46b2      	mov	sl, r6
 801fd74:	46bb      	mov	fp, r7
 801fd76:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 801fd7a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801fd7e:	4630      	mov	r0, r6
 801fd80:	4639      	mov	r1, r7
 801fd82:	e9cd 6714 	strd	r6, r7, [sp, #80]	; 0x50
 801fd86:	f7e0 fe3d 	bl	8000a04 <__aeabi_dcmpge>
 801fd8a:	b918      	cbnz	r0, 801fd94 <runStepDetection.constprop.4+0x160c>
 801fd8c:	ed9d 7b08 	vldr	d7, [sp, #32]
 801fd90:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 801fd94:	464e      	mov	r6, r9
 801fd96:	ecb6 7b02 	vldmia	r6!, {d7}
 801fd9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801fd9e:	4622      	mov	r2, r4
 801fda0:	462b      	mov	r3, r5
 801fda2:	46b1      	mov	r9, r6
 801fda4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 801fda8:	4606      	mov	r6, r0
 801fdaa:	460f      	mov	r7, r1
 801fdac:	f7e0 fe2a 	bl	8000a04 <__aeabi_dcmpge>
 801fdb0:	b908      	cbnz	r0, 801fdb6 <runStepDetection.constprop.4+0x162e>
 801fdb2:	4626      	mov	r6, r4
 801fdb4:	462f      	mov	r7, r5
 801fdb6:	4634      	mov	r4, r6
 801fdb8:	463d      	mov	r5, r7
 801fdba:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 801fdbe:	4620      	mov	r0, r4
 801fdc0:	4632      	mov	r2, r6
 801fdc2:	463b      	mov	r3, r7
 801fdc4:	4629      	mov	r1, r5
 801fdc6:	f7e0 fe1d 	bl	8000a04 <__aeabi_dcmpge>
 801fdca:	b908      	cbnz	r0, 801fdd0 <runStepDetection.constprop.4+0x1648>
 801fdcc:	4634      	mov	r4, r6
 801fdce:	463d      	mov	r5, r7
 801fdd0:	4620      	mov	r0, r4
 801fdd2:	4629      	mov	r1, r5
 801fdd4:	2200      	movs	r2, #0
 801fdd6:	2300      	movs	r3, #0
 801fdd8:	f7e0 fe00 	bl	80009dc <__aeabi_dcmplt>
 801fddc:	2800      	cmp	r0, #0
 801fdde:	f040 80af 	bne.w	801ff40 <runStepDetection.constprop.4+0x17b8>
 801fde2:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 801fde6:	2200      	movs	r2, #0
 801fde8:	2300      	movs	r3, #0
 801fdea:	f7e0 fdf7 	bl	80009dc <__aeabi_dcmplt>
 801fdee:	b178      	cbz	r0, 801fe10 <runStepDetection.constprop.4+0x1688>
 801fdf0:	4650      	mov	r0, sl
 801fdf2:	4659      	mov	r1, fp
 801fdf4:	2200      	movs	r2, #0
 801fdf6:	2300      	movs	r3, #0
 801fdf8:	f7e0 fe0e 	bl	8000a18 <__aeabi_dcmpgt>
 801fdfc:	b140      	cbz	r0, 801fe10 <runStepDetection.constprop.4+0x1688>
 801fdfe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801fe02:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 801fe06:	f7e0 fde9 	bl	80009dc <__aeabi_dcmplt>
 801fe0a:	2800      	cmp	r0, #0
 801fe0c:	f040 8134 	bne.w	8020078 <runStepDetection.constprop.4+0x18f0>
 801fe10:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 801fe14:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801fe18:	f7e0 f9b6 	bl	8000188 <__aeabi_dsub>
 801fe1c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801fe20:	932f      	str	r3, [sp, #188]	; 0xbc
 801fe22:	902e      	str	r0, [sp, #184]	; 0xb8
 801fe24:	a343      	add	r3, pc, #268	; (adr r3, 801ff34 <runStepDetection.constprop.4+0x17ac>)
 801fe26:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fe2a:	e9dd 012e 	ldrd	r0, r1, [sp, #184]	; 0xb8
 801fe2e:	f7e0 fdf3 	bl	8000a18 <__aeabi_dcmpgt>
 801fe32:	2800      	cmp	r0, #0
 801fe34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fe36:	bf18      	it	ne
 801fe38:	2300      	movne	r3, #0
 801fe3a:	930e      	str	r3, [sp, #56]	; 0x38
 801fe3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fe3e:	3b01      	subs	r3, #1
 801fe40:	930a      	str	r3, [sp, #40]	; 0x28
 801fe42:	f000 80ca 	beq.w	801ffda <runStepDetection.constprop.4+0x1852>
 801fe46:	ed9d 7b04 	vldr	d7, [sp, #16]
 801fe4a:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801fe4e:	9b06      	ldr	r3, [sp, #24]
 801fe50:	ed8d 7b02 	vstr	d7, [sp, #8]
 801fe54:	ed9d 7b08 	vldr	d7, [sp, #32]
 801fe58:	2b15      	cmp	r3, #21
 801fe5a:	ed8d 7b04 	vstr	d7, [sp, #16]
 801fe5e:	f47f af69 	bne.w	801fd34 <runStepDetection.constprop.4+0x15ac>
 801fe62:	e9d8 4500 	ldrd	r4, r5, [r8]
 801fe66:	4620      	mov	r0, r4
 801fe68:	4629      	mov	r1, r5
 801fe6a:	f001 f995 	bl	8021198 <sqrt>
 801fe6e:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 801ff3c <runStepDetection.constprop.4+0x17b4>
 801fe72:	f8dd b068 	ldr.w	fp, [sp, #104]	; 0x68
 801fe76:	2200      	movs	r2, #0
 801fe78:	2300      	movs	r3, #0
 801fe7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801fe7e:	e9ca 2300 	strd	r2, r3, [sl]
 801fe82:	4620      	mov	r0, r4
 801fe84:	4629      	mov	r1, r5
 801fe86:	2200      	movs	r2, #0
 801fe88:	4b27      	ldr	r3, [pc, #156]	; (801ff28 <runStepDetection.constprop.4+0x17a0>)
 801fe8a:	f7e0 fda7 	bl	80009dc <__aeabi_dcmplt>
 801fe8e:	2800      	cmp	r0, #0
 801fe90:	f000 80bf 	beq.w	8020012 <runStepDetection.constprop.4+0x188a>
 801fe94:	e9cd 4508 	strd	r4, r5, [sp, #32]
 801fe98:	2700      	movs	r7, #0
 801fe9a:	ab3c      	add	r3, sp, #240	; 0xf0
 801fe9c:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 801fea0:	46b9      	mov	r9, r7
 801fea2:	9304      	str	r3, [sp, #16]
 801fea4:	46ba      	mov	sl, r7
 801fea6:	9b04      	ldr	r3, [sp, #16]
 801fea8:	f933 3019 	ldrsh.w	r3, [r3, r9, lsl #1]
 801feac:	2b01      	cmp	r3, #1
 801feae:	f000 80e5 	beq.w	802007c <runStepDetection.constprop.4+0x18f4>
 801feb2:	f109 0901 	add.w	r9, r9, #1
 801feb6:	9b06      	ldr	r3, [sp, #24]
 801feb8:	fa0f f989 	sxth.w	r9, r9
 801febc:	4599      	cmp	r9, r3
 801febe:	d3f2      	bcc.n	801fea6 <runStepDetection.constprop.4+0x171e>
 801fec0:	4657      	mov	r7, sl
 801fec2:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 801fec6:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 801feca:	2f00      	cmp	r7, #0
 801fecc:	f040 8151 	bne.w	8020172 <runStepDetection.constprop.4+0x19ea>
 801fed0:	2400      	movs	r4, #0
 801fed2:	2500      	movs	r5, #0
 801fed4:	2200      	movs	r2, #0
 801fed6:	2300      	movs	r3, #0
 801fed8:	4620      	mov	r0, r4
 801feda:	4629      	mov	r1, r5
 801fedc:	f7e0 fd74 	bl	80009c8 <__aeabi_dcmpeq>
 801fee0:	b980      	cbnz	r0, 801ff04 <runStepDetection.constprop.4+0x177c>
 801fee2:	a30f      	add	r3, pc, #60	; (adr r3, 801ff20 <runStepDetection.constprop.4+0x1798>)
 801fee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fee8:	4620      	mov	r0, r4
 801feea:	4629      	mov	r1, r5
 801feec:	f7e0 fd76 	bl	80009dc <__aeabi_dcmplt>
 801fef0:	2800      	cmp	r0, #0
 801fef2:	f000 810a 	beq.w	802010a <runStepDetection.constprop.4+0x1982>
 801fef6:	9a00      	ldr	r2, [sp, #0]
 801fef8:	2302      	movs	r3, #2
 801fefa:	f882 35f4 	strb.w	r3, [r2, #1524]	; 0x5f4
 801fefe:	2300      	movs	r3, #0
 801ff00:	f8a2 3dda 	strh.w	r3, [r2, #3546]	; 0xdda
 801ff04:	9b00      	ldr	r3, [sp, #0]
 801ff06:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 801ff08:	9218      	str	r2, [sp, #96]	; 0x60
 801ff0a:	f8d3 3920 	ldr.w	r3, [r3, #2336]	; 0x920
 801ff0e:	f7ff bb3d 	b.w	801f58c <runStepDetection.constprop.4+0xe04>
 801ff12:	bf00      	nop
 801ff14:	f3af 8000 	nop.w
	...
 801ff20:	40000000 	.word	0x40000000
 801ff24:	3ffb3333 	.word	0x3ffb3333
 801ff28:	40390000 	.word	0x40390000
 801ff2c:	40000000 	.word	0x40000000
 801ff30:	3fc33333 	.word	0x3fc33333
 801ff34:	47ae147b 	.word	0x47ae147b
 801ff38:	3f947ae1 	.word	0x3f947ae1
 801ff3c:	20007b20 	.word	0x20007b20
 801ff40:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
 801ff44:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801ff48:	4632      	mov	r2, r6
 801ff4a:	463b      	mov	r3, r7
 801ff4c:	4620      	mov	r0, r4
 801ff4e:	4629      	mov	r1, r5
 801ff50:	f7e0 fd4e 	bl	80009f0 <__aeabi_dcmple>
 801ff54:	b908      	cbnz	r0, 801ff5a <runStepDetection.constprop.4+0x17d2>
 801ff56:	4634      	mov	r4, r6
 801ff58:	463d      	mov	r5, r7
 801ff5a:	4620      	mov	r0, r4
 801ff5c:	4629      	mov	r1, r5
 801ff5e:	2200      	movs	r2, #0
 801ff60:	2300      	movs	r3, #0
 801ff62:	f7e0 fd59 	bl	8000a18 <__aeabi_dcmpgt>
 801ff66:	2800      	cmp	r0, #0
 801ff68:	f43f af3b 	beq.w	801fde2 <runStepDetection.constprop.4+0x165a>
 801ff6c:	e9dd 1216 	ldrd	r1, r2, [sp, #88]	; 0x58
 801ff70:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
 801ff74:	932d      	str	r3, [sp, #180]	; 0xb4
 801ff76:	912c      	str	r1, [sp, #176]	; 0xb0
 801ff78:	e9dd 012c 	ldrd	r0, r1, [sp, #176]	; 0xb0
 801ff7c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801ff80:	f7e0 fd4a 	bl	8000a18 <__aeabi_dcmpgt>
 801ff84:	2800      	cmp	r0, #0
 801ff86:	f43f af2c 	beq.w	801fde2 <runStepDetection.constprop.4+0x165a>
 801ff8a:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 801ff8e:	2200      	movs	r2, #0
 801ff90:	2300      	movs	r3, #0
 801ff92:	f7e0 fd23 	bl	80009dc <__aeabi_dcmplt>
 801ff96:	2800      	cmp	r0, #0
 801ff98:	f040 80c4 	bne.w	8020124 <runStepDetection.constprop.4+0x199c>
 801ff9c:	f04f 33ff 	mov.w	r3, #4294967295
 801ffa0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ffa2:	2a00      	cmp	r2, #0
 801ffa4:	f47f af4a 	bne.w	801fe3c <runStepDetection.constprop.4+0x16b4>
 801ffa8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ffaa:	9906      	ldr	r1, [sp, #24]
 801ffac:	a83c      	add	r0, sp, #240	; 0xf0
 801ffae:	f1c2 0293 	rsb	r2, r2, #147	; 0x93
 801ffb2:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 801ffb6:	4613      	mov	r3, r2
 801ffb8:	460a      	mov	r2, r1
 801ffba:	a932      	add	r1, sp, #200	; 0xc8
 801ffbc:	ed19 7b06 	vldr	d7, [r9, #-24]	; 0xffffffe8
 801ffc0:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
 801ffc4:	1c53      	adds	r3, r2, #1
 801ffc6:	9306      	str	r3, [sp, #24]
 801ffc8:	2301      	movs	r3, #1
 801ffca:	930e      	str	r3, [sp, #56]	; 0x38
 801ffcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ffce:	3b01      	subs	r3, #1
 801ffd0:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
 801ffd4:	930a      	str	r3, [sp, #40]	; 0x28
 801ffd6:	f47f af36 	bne.w	801fe46 <runStepDetection.constprop.4+0x16be>
 801ffda:	e9d8 4500 	ldrd	r4, r5, [r8]
 801ffde:	f8df a2e8 	ldr.w	sl, [pc, #744]	; 80202c8 <runStepDetection.constprop.4+0x1b40>
 801ffe2:	f8dd b068 	ldr.w	fp, [sp, #104]	; 0x68
 801ffe6:	4620      	mov	r0, r4
 801ffe8:	4629      	mov	r1, r5
 801ffea:	f001 f8d5 	bl	8021198 <sqrt>
 801ffee:	2300      	movs	r3, #0
 801fff0:	2200      	movs	r2, #0
 801fff2:	e9ca 2300 	strd	r2, r3, [sl]
 801fff6:	9b06      	ldr	r3, [sp, #24]
 801fff8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801fffc:	2b00      	cmp	r3, #0
 801fffe:	d081      	beq.n	801ff04 <runStepDetection.constprop.4+0x177c>
 8020000:	2200      	movs	r2, #0
 8020002:	4bab      	ldr	r3, [pc, #684]	; (80202b0 <runStepDetection.constprop.4+0x1b28>)
 8020004:	4620      	mov	r0, r4
 8020006:	4629      	mov	r1, r5
 8020008:	f7e0 fce8 	bl	80009dc <__aeabi_dcmplt>
 802000c:	2800      	cmp	r0, #0
 802000e:	f47f af41 	bne.w	801fe94 <runStepDetection.constprop.4+0x170c>
 8020012:	2700      	movs	r7, #0
 8020014:	ab3c      	add	r3, sp, #240	; 0xf0
 8020016:	463e      	mov	r6, r7
 8020018:	9304      	str	r3, [sp, #16]
 802001a:	9b04      	ldr	r3, [sp, #16]
 802001c:	f933 3016 	ldrsh.w	r3, [r3, r6, lsl #1]
 8020020:	2b01      	cmp	r3, #1
 8020022:	d056      	beq.n	80200d2 <runStepDetection.constprop.4+0x194a>
 8020024:	3601      	adds	r6, #1
 8020026:	9b06      	ldr	r3, [sp, #24]
 8020028:	b236      	sxth	r6, r6
 802002a:	429e      	cmp	r6, r3
 802002c:	d3f5      	bcc.n	802001a <runStepDetection.constprop.4+0x1892>
 802002e:	2f00      	cmp	r7, #0
 8020030:	f43f af4e 	beq.w	801fed0 <runStepDetection.constprop.4+0x1748>
 8020034:	ab78      	add	r3, sp, #480	; 0x1e0
 8020036:	463a      	mov	r2, r7
 8020038:	a946      	add	r1, sp, #280	; 0x118
 802003a:	4658      	mov	r0, fp
 802003c:	f7fe fb70 	bl	801e720 <GetPeakValuesAndMaxIndex.part.0>
 8020040:	ab50      	add	r3, sp, #320	; 0x140
 8020042:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8020046:	e9d0 4500 	ldrd	r4, r5, [r0]
 802004a:	2200      	movs	r2, #0
 802004c:	4b99      	ldr	r3, [pc, #612]	; (80202b4 <runStepDetection.constprop.4+0x1b2c>)
 802004e:	e9ca 4500 	strd	r4, r5, [sl]
 8020052:	4620      	mov	r0, r4
 8020054:	4629      	mov	r1, r5
 8020056:	f7e0 fcdf 	bl	8000a18 <__aeabi_dcmpgt>
 802005a:	b930      	cbnz	r0, 802006a <runStepDetection.constprop.4+0x18e2>
 802005c:	4620      	mov	r0, r4
 802005e:	4629      	mov	r1, r5
 8020060:	2200      	movs	r2, #0
 8020062:	4b95      	ldr	r3, [pc, #596]	; (80202b8 <runStepDetection.constprop.4+0x1b30>)
 8020064:	f7e0 fcba 	bl	80009dc <__aeabi_dcmplt>
 8020068:	b118      	cbz	r0, 8020072 <runStepDetection.constprop.4+0x18ea>
 802006a:	2200      	movs	r2, #0
 802006c:	2300      	movs	r3, #0
 802006e:	e9ca 2300 	strd	r2, r3, [sl]
 8020072:	e9da 4500 	ldrd	r4, r5, [sl]
 8020076:	e72d      	b.n	801fed4 <runStepDetection.constprop.4+0x174c>
 8020078:	2301      	movs	r3, #1
 802007a:	e791      	b.n	801ffa0 <runStepDetection.constprop.4+0x1818>
 802007c:	ab32      	add	r3, sp, #200	; 0xc8
 802007e:	f833 5019 	ldrh.w	r5, [r3, r9, lsl #1]
 8020082:	4628      	mov	r0, r5
 8020084:	f7e0 f9be 	bl	8000404 <__aeabi_ui2d>
 8020088:	4602      	mov	r2, r0
 802008a:	460b      	mov	r3, r1
 802008c:	2000      	movs	r0, #0
 802008e:	498b      	ldr	r1, [pc, #556]	; (80202bc <runStepDetection.constprop.4+0x1b34>)
 8020090:	f7e0 fb5c 	bl	800074c <__aeabi_ddiv>
 8020094:	2200      	movs	r2, #0
 8020096:	4b8a      	ldr	r3, [pc, #552]	; (80202c0 <runStepDetection.constprop.4+0x1b38>)
 8020098:	4606      	mov	r6, r0
 802009a:	460f      	mov	r7, r1
 802009c:	f7e0 fc9e 	bl	80009dc <__aeabi_dcmplt>
 80200a0:	2200      	movs	r2, #0
 80200a2:	4b88      	ldr	r3, [pc, #544]	; (80202c4 <runStepDetection.constprop.4+0x1b3c>)
 80200a4:	2800      	cmp	r0, #0
 80200a6:	f43f af04 	beq.w	801feb2 <runStepDetection.constprop.4+0x172a>
 80200aa:	4630      	mov	r0, r6
 80200ac:	4639      	mov	r1, r7
 80200ae:	f7e0 fcb3 	bl	8000a18 <__aeabi_dcmpgt>
 80200b2:	ab50      	add	r3, sp, #320	; 0x140
 80200b4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80200b8:	2800      	cmp	r0, #0
 80200ba:	f43f aefa 	beq.w	801feb2 <runStepDetection.constprop.4+0x172a>
 80200be:	aa46      	add	r2, sp, #280	; 0x118
 80200c0:	e9c3 6700 	strd	r6, r7, [r3]
 80200c4:	f10a 0301 	add.w	r3, sl, #1
 80200c8:	f822 501a 	strh.w	r5, [r2, sl, lsl #1]
 80200cc:	fa5f fa83 	uxtb.w	sl, r3
 80200d0:	e6ef      	b.n	801feb2 <runStepDetection.constprop.4+0x172a>
 80200d2:	ab32      	add	r3, sp, #200	; 0xc8
 80200d4:	f833 9016 	ldrh.w	r9, [r3, r6, lsl #1]
 80200d8:	2332      	movs	r3, #50	; 0x32
 80200da:	fb93 f0f9 	sdiv	r0, r3, r9
 80200de:	0040      	lsls	r0, r0, #1
 80200e0:	f7e0 f9a0 	bl	8000424 <__aeabi_i2d>
 80200e4:	4b74      	ldr	r3, [pc, #464]	; (80202b8 <runStepDetection.constprop.4+0x1b30>)
 80200e6:	2200      	movs	r2, #0
 80200e8:	4604      	mov	r4, r0
 80200ea:	460d      	mov	r5, r1
 80200ec:	f7e0 fc94 	bl	8000a18 <__aeabi_dcmpgt>
 80200f0:	ab50      	add	r3, sp, #320	; 0x140
 80200f2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80200f6:	2800      	cmp	r0, #0
 80200f8:	d094      	beq.n	8020024 <runStepDetection.constprop.4+0x189c>
 80200fa:	aa46      	add	r2, sp, #280	; 0x118
 80200fc:	e9c3 4500 	strd	r4, r5, [r3]
 8020100:	1c7b      	adds	r3, r7, #1
 8020102:	f822 9017 	strh.w	r9, [r2, r7, lsl #1]
 8020106:	b2df      	uxtb	r7, r3
 8020108:	e78c      	b.n	8020024 <runStepDetection.constprop.4+0x189c>
 802010a:	a359      	add	r3, pc, #356	; (adr r3, 8020270 <runStepDetection.constprop.4+0x1ae8>)
 802010c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020110:	4620      	mov	r0, r4
 8020112:	4629      	mov	r1, r5
 8020114:	f7e0 fc62 	bl	80009dc <__aeabi_dcmplt>
 8020118:	b1c8      	cbz	r0, 802014e <runStepDetection.constprop.4+0x19c6>
 802011a:	9a00      	ldr	r2, [sp, #0]
 802011c:	2303      	movs	r3, #3
 802011e:	f882 35f4 	strb.w	r3, [r2, #1524]	; 0x5f4
 8020122:	e6ec      	b.n	801fefe <runStepDetection.constprop.4+0x1776>
 8020124:	4650      	mov	r0, sl
 8020126:	4659      	mov	r1, fp
 8020128:	2200      	movs	r2, #0
 802012a:	2300      	movs	r3, #0
 802012c:	f7e0 fc74 	bl	8000a18 <__aeabi_dcmpgt>
 8020130:	2800      	cmp	r0, #0
 8020132:	f43f af33 	beq.w	801ff9c <runStepDetection.constprop.4+0x1814>
 8020136:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 802013a:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 802013e:	f7e0 fc4d 	bl	80009dc <__aeabi_dcmplt>
 8020142:	2800      	cmp	r0, #0
 8020144:	bf14      	ite	ne
 8020146:	2301      	movne	r3, #1
 8020148:	f04f 33ff 	moveq.w	r3, #4294967295
 802014c:	e728      	b.n	801ffa0 <runStepDetection.constprop.4+0x1818>
 802014e:	4620      	mov	r0, r4
 8020150:	4629      	mov	r1, r5
 8020152:	a349      	add	r3, pc, #292	; (adr r3, 8020278 <runStepDetection.constprop.4+0x1af0>)
 8020154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020158:	f7e0 fc40 	bl	80009dc <__aeabi_dcmplt>
 802015c:	b120      	cbz	r0, 8020168 <runStepDetection.constprop.4+0x19e0>
 802015e:	9a00      	ldr	r2, [sp, #0]
 8020160:	2304      	movs	r3, #4
 8020162:	f882 35f4 	strb.w	r3, [r2, #1524]	; 0x5f4
 8020166:	e6ca      	b.n	801fefe <runStepDetection.constprop.4+0x1776>
 8020168:	9a00      	ldr	r2, [sp, #0]
 802016a:	2305      	movs	r3, #5
 802016c:	f882 35f4 	strb.w	r3, [r2, #1524]	; 0x5f4
 8020170:	e6c5      	b.n	801fefe <runStepDetection.constprop.4+0x1776>
 8020172:	4622      	mov	r2, r4
 8020174:	462b      	mov	r3, r5
 8020176:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802017a:	f7e0 f9bd 	bl	80004f8 <__aeabi_dmul>
 802017e:	a340      	add	r3, pc, #256	; (adr r3, 8020280 <runStepDetection.constprop.4+0x1af8>)
 8020180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020184:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8020188:	4620      	mov	r0, r4
 802018a:	4629      	mov	r1, r5
 802018c:	f7e0 f9b4 	bl	80004f8 <__aeabi_dmul>
 8020190:	a33d      	add	r3, pc, #244	; (adr r3, 8020288 <runStepDetection.constprop.4+0x1b00>)
 8020192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020196:	f7df fff9 	bl	800018c <__adddf3>
 802019a:	a33d      	add	r3, pc, #244	; (adr r3, 8020290 <runStepDetection.constprop.4+0x1b08>)
 802019c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80201a0:	4604      	mov	r4, r0
 80201a2:	460d      	mov	r5, r1
 80201a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80201a8:	f7e0 f9a6 	bl	80004f8 <__aeabi_dmul>
 80201ac:	4602      	mov	r2, r0
 80201ae:	460b      	mov	r3, r1
 80201b0:	4620      	mov	r0, r4
 80201b2:	4629      	mov	r1, r5
 80201b4:	f7df ffea 	bl	800018c <__adddf3>
 80201b8:	a337      	add	r3, pc, #220	; (adr r3, 8020298 <runStepDetection.constprop.4+0x1b10>)
 80201ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80201be:	4604      	mov	r4, r0
 80201c0:	460d      	mov	r5, r1
 80201c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80201c6:	f7e0 f997 	bl	80004f8 <__aeabi_dmul>
 80201ca:	a335      	add	r3, pc, #212	; (adr r3, 80202a0 <runStepDetection.constprop.4+0x1b18>)
 80201cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80201d0:	f7df ffdc 	bl	800018c <__adddf3>
 80201d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80201d8:	f7e0 f98e 	bl	80004f8 <__aeabi_dmul>
 80201dc:	4602      	mov	r2, r0
 80201de:	460b      	mov	r3, r1
 80201e0:	4620      	mov	r0, r4
 80201e2:	4629      	mov	r1, r5
 80201e4:	f7df ffd2 	bl	800018c <__adddf3>
 80201e8:	e9dd 2350 	ldrd	r2, r3, [sp, #320]	; 0x140
 80201ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80201f0:	f7df ffca 	bl	8000188 <__aeabi_dsub>
 80201f4:	b2bf      	uxth	r7, r7
 80201f6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80201fa:	2f01      	cmp	r7, #1
 80201fc:	9026      	str	r0, [sp, #152]	; 0x98
 80201fe:	9327      	str	r3, [sp, #156]	; 0x9c
 8020200:	d01d      	beq.n	802023e <runStepDetection.constprop.4+0x1ab6>
 8020202:	ae52      	add	r6, sp, #328	; 0x148
 8020204:	2500      	movs	r5, #0
 8020206:	2401      	movs	r4, #1
 8020208:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 802020c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8020210:	f7df ffba 	bl	8000188 <__aeabi_dsub>
 8020214:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8020218:	9028      	str	r0, [sp, #160]	; 0xa0
 802021a:	9329      	str	r3, [sp, #164]	; 0xa4
 802021c:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
 8020220:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
 8020224:	f7e0 fbf8 	bl	8000a18 <__aeabi_dcmpgt>
 8020228:	1c63      	adds	r3, r4, #1
 802022a:	b120      	cbz	r0, 8020236 <runStepDetection.constprop.4+0x1aae>
 802022c:	ed9d 7b28 	vldr	d7, [sp, #160]	; 0xa0
 8020230:	ed8d 7b26 	vstr	d7, [sp, #152]	; 0x98
 8020234:	4625      	mov	r5, r4
 8020236:	b29c      	uxth	r4, r3
 8020238:	42a7      	cmp	r7, r4
 802023a:	d1e5      	bne.n	8020208 <runStepDetection.constprop.4+0x1a80>
 802023c:	e000      	b.n	8020240 <runStepDetection.constprop.4+0x1ab8>
 802023e:	2500      	movs	r5, #0
 8020240:	a319      	add	r3, pc, #100	; (adr r3, 80202a8 <runStepDetection.constprop.4+0x1b20>)
 8020242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020246:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
 802024a:	f7e0 fbc7 	bl	80009dc <__aeabi_dcmplt>
 802024e:	2800      	cmp	r0, #0
 8020250:	f000 80a0 	beq.w	8020394 <runStepDetection.constprop.4+0x1c0c>
 8020254:	ab50      	add	r3, sp, #320	; 0x140
 8020256:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 802025a:	e9d5 4500 	ldrd	r4, r5, [r5]
 802025e:	e9ca 4500 	strd	r4, r5, [sl]
 8020262:	e637      	b.n	801fed4 <runStepDetection.constprop.4+0x174c>
 8020264:	2600      	movs	r6, #0
 8020266:	2700      	movs	r7, #0
 8020268:	f7ff bbb3 	b.w	801f9d2 <runStepDetection.constprop.4+0x124a>
 802026c:	f3af 8000 	nop.w
 8020270:	a0000000 	.word	0xa0000000
 8020274:	40019999 	.word	0x40019999
 8020278:	60000000 	.word	0x60000000
 802027c:	40066666 	.word	0x40066666
 8020280:	20000000 	.word	0x20000000
 8020284:	bff747ae 	.word	0xbff747ae
 8020288:	98c7e282 	.word	0x98c7e282
 802028c:	3fee96bb 	.word	0x3fee96bb
 8020290:	20000000 	.word	0x20000000
 8020294:	3fd727bb 	.word	0x3fd727bb
 8020298:	40000000 	.word	0x40000000
 802029c:	bf9edfa4 	.word	0xbf9edfa4
 80202a0:	40000000 	.word	0x40000000
 80202a4:	4003ac08 	.word	0x4003ac08
 80202a8:	a0000000 	.word	0xa0000000
 80202ac:	3fc99999 	.word	0x3fc99999
 80202b0:	40390000 	.word	0x40390000
 80202b4:	40100000 	.word	0x40100000
 80202b8:	40040000 	.word	0x40040000
 80202bc:	40590000 	.word	0x40590000
 80202c0:	40080000 	.word	0x40080000
 80202c4:	3ff00000 	.word	0x3ff00000
 80202c8:	20007b20 	.word	0x20007b20
 80202cc:	ed94 7b0e 	vldr	d7, [r4, #56]	; 0x38
 80202d0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80202d4:	ed94 7b10 	vldr	d7, [r4, #64]	; 0x40
 80202d8:	ed8d 7b04 	vstr	d7, [sp, #16]
 80202dc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80202e0:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 80202e4:	e9d4 670c 	ldrd	r6, r7, [r4, #48]	; 0x30
 80202e8:	e9d4 0108 	ldrd	r0, r1, [r4, #32]
 80202ec:	ed84 7b0c 	vstr	d7, [r4, #48]	; 0x30
 80202f0:	ed9d 7b04 	vldr	d7, [sp, #16]
 80202f4:	e9c4 2308 	strd	r2, r3, [r4, #32]
 80202f8:	ed84 7b0e 	vstr	d7, [r4, #56]	; 0x38
 80202fc:	e9c4 0106 	strd	r0, r1, [r4, #24]
 8020300:	e9c4 670a 	strd	r6, r7, [r4, #40]	; 0x28
 8020304:	e9c4 ab10 	strd	sl, fp, [r4, #64]	; 0x40
 8020308:	f7df ff40 	bl	800018c <__adddf3>
 802030c:	4632      	mov	r2, r6
 802030e:	463b      	mov	r3, r7
 8020310:	f7df ff3c 	bl	800018c <__adddf3>
 8020314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8020318:	f7df ff38 	bl	800018c <__adddf3>
 802031c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8020320:	f7df ff34 	bl	800018c <__adddf3>
 8020324:	4602      	mov	r2, r0
 8020326:	460b      	mov	r3, r1
 8020328:	4650      	mov	r0, sl
 802032a:	4659      	mov	r1, fp
 802032c:	f7df ff2e 	bl	800018c <__adddf3>
 8020330:	2d06      	cmp	r5, #6
 8020332:	4602      	mov	r2, r0
 8020334:	460b      	mov	r3, r1
 8020336:	d01d      	beq.n	8020374 <runStepDetection.constprop.4+0x1bec>
 8020338:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
 802033c:	f7df ff26 	bl	800018c <__adddf3>
 8020340:	2d07      	cmp	r5, #7
 8020342:	4602      	mov	r2, r0
 8020344:	460b      	mov	r3, r1
 8020346:	d015      	beq.n	8020374 <runStepDetection.constprop.4+0x1bec>
 8020348:	e9d4 2314 	ldrd	r2, r3, [r4, #80]	; 0x50
 802034c:	f7df ff1e 	bl	800018c <__adddf3>
 8020350:	2d08      	cmp	r5, #8
 8020352:	4602      	mov	r2, r0
 8020354:	460b      	mov	r3, r1
 8020356:	d00d      	beq.n	8020374 <runStepDetection.constprop.4+0x1bec>
 8020358:	e9d4 2316 	ldrd	r2, r3, [r4, #88]	; 0x58
 802035c:	f7df ff16 	bl	800018c <__adddf3>
 8020360:	2d09      	cmp	r5, #9
 8020362:	4602      	mov	r2, r0
 8020364:	460b      	mov	r3, r1
 8020366:	d005      	beq.n	8020374 <runStepDetection.constprop.4+0x1bec>
 8020368:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
 802036c:	f7df ff0e 	bl	800018c <__adddf3>
 8020370:	4602      	mov	r2, r0
 8020372:	460b      	mov	r3, r1
 8020374:	4610      	mov	r0, r2
 8020376:	4619      	mov	r1, r3
 8020378:	a31a      	add	r3, pc, #104	; (adr r3, 80203e4 <runStepDetection.constprop.4+0x1c5c>)
 802037a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802037e:	f7e0 f8bb 	bl	80004f8 <__aeabi_dmul>
 8020382:	4c17      	ldr	r4, [pc, #92]	; (80203e0 <runStepDetection.constprop.4+0x1c58>)
 8020384:	e9c4 0100 	strd	r0, r1, [r4]
 8020388:	f7ff bb2f 	b.w	801f9ea <runStepDetection.constprop.4+0x1262>
 802038c:	e9c6 4500 	strd	r4, r5, [r6]
 8020390:	f7ff b8f1 	b.w	801f576 <runStepDetection.constprop.4+0xdee>
 8020394:	ab78      	add	r3, sp, #480	; 0x1e0
 8020396:	463a      	mov	r2, r7
 8020398:	a946      	add	r1, sp, #280	; 0x118
 802039a:	4658      	mov	r0, fp
 802039c:	f7fe f9c0 	bl	801e720 <GetPeakValuesAndMaxIndex.part.0>
 80203a0:	ab50      	add	r3, sp, #320	; 0x140
 80203a2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80203a6:	e9d0 4500 	ldrd	r4, r5, [r0]
 80203aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80203ae:	4620      	mov	r0, r4
 80203b0:	4629      	mov	r1, r5
 80203b2:	f7df fee9 	bl	8000188 <__aeabi_dsub>
 80203b6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80203ba:	9331      	str	r3, [sp, #196]	; 0xc4
 80203bc:	9030      	str	r0, [sp, #192]	; 0xc0
 80203be:	e9dd 0130 	ldrd	r0, r1, [sp, #192]	; 0xc0
 80203c2:	a305      	add	r3, pc, #20	; (adr r3, 80203d8 <runStepDetection.constprop.4+0x1c50>)
 80203c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80203c8:	f7e0 fb08 	bl	80009dc <__aeabi_dcmplt>
 80203cc:	2800      	cmp	r0, #0
 80203ce:	f43f ae50 	beq.w	8020072 <runStepDetection.constprop.4+0x18ea>
 80203d2:	e9ca 4500 	strd	r4, r5, [sl]
 80203d6:	e64c      	b.n	8020072 <runStepDetection.constprop.4+0x18ea>
 80203d8:	a0000000 	.word	0xa0000000
 80203dc:	3fd99999 	.word	0x3fd99999
 80203e0:	20007230 	.word	0x20007230
 80203e4:	55555555 	.word	0x55555555
 80203e8:	3fc55555 	.word	0x3fc55555

080203ec <MotionPM_Initialize>:
 80203ec:	490a      	ldr	r1, [pc, #40]	; (8020418 <MotionPM_Initialize+0x2c>)
 80203ee:	4a0b      	ldr	r2, [pc, #44]	; (802041c <MotionPM_Initialize+0x30>)
 80203f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80203f4:	680b      	ldr	r3, [r1, #0]
 80203f6:	2001      	movs	r0, #1
 80203f8:	f023 0301 	bic.w	r3, r3, #1
 80203fc:	600b      	str	r3, [r1, #0]
 80203fe:	4613      	mov	r3, r2
 8020400:	6010      	str	r0, [r2, #0]
 8020402:	681d      	ldr	r5, [r3, #0]
 8020404:	2d00      	cmp	r5, #0
 8020406:	d1fc      	bne.n	8020402 <MotionPM_Initialize+0x16>
 8020408:	4b05      	ldr	r3, [pc, #20]	; (8020420 <MotionPM_Initialize+0x34>)
 802040a:	4a06      	ldr	r2, [pc, #24]	; (8020424 <MotionPM_Initialize+0x38>)
 802040c:	601a      	str	r2, [r3, #0]
 802040e:	681a      	ldr	r2, [r3, #0]
 8020410:	4b05      	ldr	r3, [pc, #20]	; (8020428 <MotionPM_Initialize+0x3c>)
 8020412:	429a      	cmp	r2, r3
 8020414:	d00a      	beq.n	802042c <MotionPM_Initialize+0x40>
 8020416:	e7fe      	b.n	8020416 <MotionPM_Initialize+0x2a>
 8020418:	e0002000 	.word	0xe0002000
 802041c:	40023008 	.word	0x40023008
 8020420:	40023000 	.word	0x40023000
 8020424:	f407a5c2 	.word	0xf407a5c2
 8020428:	b5e8b5cd 	.word	0xb5e8b5cd
 802042c:	4c91      	ldr	r4, [pc, #580]	; (8020674 <MotionPM_Initialize+0x288>)
 802042e:	f04f 0800 	mov.w	r8, #0
 8020432:	f04f 0901 	mov.w	r9, #1
 8020436:	2248      	movs	r2, #72	; 0x48
 8020438:	4629      	mov	r1, r5
 802043a:	f104 0080 	add.w	r0, r4, #128	; 0x80
 802043e:	2600      	movs	r6, #0
 8020440:	2700      	movs	r7, #0
 8020442:	6025      	str	r5, [r4, #0]
 8020444:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8020448:	e9c4 5504 	strd	r5, r5, [r4, #16]
 802044c:	e9c4 5507 	strd	r5, r5, [r4, #28]
 8020450:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
 8020454:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8020458:	e9c4 5510 	strd	r5, r5, [r4, #64]	; 0x40
 802045c:	e9c4 5513 	strd	r5, r5, [r4, #76]	; 0x4c
 8020460:	e9c4 5516 	strd	r5, r5, [r4, #88]	; 0x58
 8020464:	e9c4 5519 	strd	r5, r5, [r4, #100]	; 0x64
 8020468:	e9c4 551c 	strd	r5, r5, [r4, #112]	; 0x70
 802046c:	f884 9e68 	strb.w	r9, [r4, #3688]	; 0xe68
 8020470:	f8c4 800c 	str.w	r8, [r4, #12]
 8020474:	f8c4 8018 	str.w	r8, [r4, #24]
 8020478:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
 802047c:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
 8020480:	f8c4 803c 	str.w	r8, [r4, #60]	; 0x3c
 8020484:	f8c4 8048 	str.w	r8, [r4, #72]	; 0x48
 8020488:	f8c4 8054 	str.w	r8, [r4, #84]	; 0x54
 802048c:	f8c4 8060 	str.w	r8, [r4, #96]	; 0x60
 8020490:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c
 8020494:	f8c4 8078 	str.w	r8, [r4, #120]	; 0x78
 8020498:	67e5      	str	r5, [r4, #124]	; 0x7c
 802049a:	f002 f9fd 	bl	8022898 <memset>
 802049e:	f504 6382 	add.w	r3, r4, #1040	; 0x410
 80204a2:	f504 6280 	add.w	r2, r4, #1024	; 0x400
 80204a6:	f504 6181 	add.w	r1, r4, #1032	; 0x408
 80204aa:	f504 6083 	add.w	r0, r4, #1048	; 0x418
 80204ae:	e9c4 6732 	strd	r6, r7, [r4, #200]	; 0xc8
 80204b2:	e9c4 6734 	strd	r6, r7, [r4, #208]	; 0xd0
 80204b6:	e9c4 6736 	strd	r6, r7, [r4, #216]	; 0xd8
 80204ba:	e9c4 6738 	strd	r6, r7, [r4, #224]	; 0xe0
 80204be:	e9c4 673a 	strd	r6, r7, [r4, #232]	; 0xe8
 80204c2:	e9c4 673c 	strd	r6, r7, [r4, #240]	; 0xf0
 80204c6:	e9c4 673e 	strd	r6, r7, [r4, #248]	; 0xf8
 80204ca:	e9c4 6740 	strd	r6, r7, [r4, #256]	; 0x100
 80204ce:	e9c4 6742 	strd	r6, r7, [r4, #264]	; 0x108
 80204d2:	e9c4 6744 	strd	r6, r7, [r4, #272]	; 0x110
 80204d6:	e9c4 6746 	strd	r6, r7, [r4, #280]	; 0x118
 80204da:	e9c4 6748 	strd	r6, r7, [r4, #288]	; 0x120
 80204de:	e9c4 674a 	strd	r6, r7, [r4, #296]	; 0x128
 80204e2:	e9c4 674c 	strd	r6, r7, [r4, #304]	; 0x130
 80204e6:	e9c4 674e 	strd	r6, r7, [r4, #312]	; 0x138
 80204ea:	e9c4 6750 	strd	r6, r7, [r4, #320]	; 0x140
 80204ee:	e9c4 6752 	strd	r6, r7, [r4, #328]	; 0x148
 80204f2:	e9c4 6754 	strd	r6, r7, [r4, #336]	; 0x150
 80204f6:	e9c4 6756 	strd	r6, r7, [r4, #344]	; 0x158
 80204fa:	e9c4 6758 	strd	r6, r7, [r4, #352]	; 0x160
 80204fe:	e9c4 675a 	strd	r6, r7, [r4, #360]	; 0x168
 8020502:	e9c4 675c 	strd	r6, r7, [r4, #368]	; 0x170
 8020506:	e9c4 675e 	strd	r6, r7, [r4, #376]	; 0x178
 802050a:	e9c4 6760 	strd	r6, r7, [r4, #384]	; 0x180
 802050e:	e9c4 6762 	strd	r6, r7, [r4, #392]	; 0x188
 8020512:	e9c4 6764 	strd	r6, r7, [r4, #400]	; 0x190
 8020516:	e9c4 6766 	strd	r6, r7, [r4, #408]	; 0x198
 802051a:	e9c4 6768 	strd	r6, r7, [r4, #416]	; 0x1a0
 802051e:	e9c4 676a 	strd	r6, r7, [r4, #424]	; 0x1a8
 8020522:	e9c4 676c 	strd	r6, r7, [r4, #432]	; 0x1b0
 8020526:	e9c4 676e 	strd	r6, r7, [r4, #440]	; 0x1b8
 802052a:	e9c4 6770 	strd	r6, r7, [r4, #448]	; 0x1c0
 802052e:	e9c4 6772 	strd	r6, r7, [r4, #456]	; 0x1c8
 8020532:	e9c4 6774 	strd	r6, r7, [r4, #464]	; 0x1d0
 8020536:	e9c4 6776 	strd	r6, r7, [r4, #472]	; 0x1d8
 802053a:	e9c4 6778 	strd	r6, r7, [r4, #480]	; 0x1e0
 802053e:	e9c4 677a 	strd	r6, r7, [r4, #488]	; 0x1e8
 8020542:	e9c4 677c 	strd	r6, r7, [r4, #496]	; 0x1f0
 8020546:	e9c4 677e 	strd	r6, r7, [r4, #504]	; 0x1f8
 802054a:	e9c4 6780 	strd	r6, r7, [r4, #512]	; 0x200
 802054e:	e9c4 6782 	strd	r6, r7, [r4, #520]	; 0x208
 8020552:	e9c4 6784 	strd	r6, r7, [r4, #528]	; 0x210
 8020556:	e9c4 6786 	strd	r6, r7, [r4, #536]	; 0x218
 802055a:	e9c4 6788 	strd	r6, r7, [r4, #544]	; 0x220
 802055e:	e9c4 678a 	strd	r6, r7, [r4, #552]	; 0x228
 8020562:	e9c4 678e 	strd	r6, r7, [r4, #568]	; 0x238
 8020566:	e9c4 6790 	strd	r6, r7, [r4, #576]	; 0x240
 802056a:	e9c4 6792 	strd	r6, r7, [r4, #584]	; 0x248
 802056e:	e9c4 6794 	strd	r6, r7, [r4, #592]	; 0x250
 8020572:	e9c4 6796 	strd	r6, r7, [r4, #600]	; 0x258
 8020576:	e9c4 6798 	strd	r6, r7, [r4, #608]	; 0x260
 802057a:	e9c4 679a 	strd	r6, r7, [r4, #616]	; 0x268
 802057e:	e9c4 679c 	strd	r6, r7, [r4, #624]	; 0x270
 8020582:	e9c4 679e 	strd	r6, r7, [r4, #632]	; 0x278
 8020586:	e9c4 67a0 	strd	r6, r7, [r4, #640]	; 0x280
 802058a:	e9c4 67a2 	strd	r6, r7, [r4, #648]	; 0x288
 802058e:	e9c4 67a4 	strd	r6, r7, [r4, #656]	; 0x290
 8020592:	e9c4 67a6 	strd	r6, r7, [r4, #664]	; 0x298
 8020596:	e9c4 67a8 	strd	r6, r7, [r4, #672]	; 0x2a0
 802059a:	e9c4 67aa 	strd	r6, r7, [r4, #680]	; 0x2a8
 802059e:	e9c4 67ac 	strd	r6, r7, [r4, #688]	; 0x2b0
 80205a2:	e9c4 67ae 	strd	r6, r7, [r4, #696]	; 0x2b8
 80205a6:	e9c4 67b0 	strd	r6, r7, [r4, #704]	; 0x2c0
 80205aa:	e9c4 67b2 	strd	r6, r7, [r4, #712]	; 0x2c8
 80205ae:	e9c4 67b4 	strd	r6, r7, [r4, #720]	; 0x2d0
 80205b2:	e9c4 67b6 	strd	r6, r7, [r4, #728]	; 0x2d8
 80205b6:	e9c4 67b8 	strd	r6, r7, [r4, #736]	; 0x2e0
 80205ba:	e9c4 67ba 	strd	r6, r7, [r4, #744]	; 0x2e8
 80205be:	e9c4 67bc 	strd	r6, r7, [r4, #752]	; 0x2f0
 80205c2:	e9c4 67be 	strd	r6, r7, [r4, #760]	; 0x2f8
 80205c6:	e9c4 67c0 	strd	r6, r7, [r4, #768]	; 0x300
 80205ca:	e9c4 67c2 	strd	r6, r7, [r4, #776]	; 0x308
 80205ce:	e9c4 67c4 	strd	r6, r7, [r4, #784]	; 0x310
 80205d2:	e9c4 67c6 	strd	r6, r7, [r4, #792]	; 0x318
 80205d6:	e9c4 67c8 	strd	r6, r7, [r4, #800]	; 0x320
 80205da:	e9c4 67ca 	strd	r6, r7, [r4, #808]	; 0x328
 80205de:	e9c4 67cc 	strd	r6, r7, [r4, #816]	; 0x330
 80205e2:	e9c4 67ce 	strd	r6, r7, [r4, #824]	; 0x338
 80205e6:	e9c4 67d0 	strd	r6, r7, [r4, #832]	; 0x340
 80205ea:	e9c4 67d2 	strd	r6, r7, [r4, #840]	; 0x348
 80205ee:	e9c4 67d4 	strd	r6, r7, [r4, #848]	; 0x350
 80205f2:	e9c4 67d6 	strd	r6, r7, [r4, #856]	; 0x358
 80205f6:	e9c4 67d8 	strd	r6, r7, [r4, #864]	; 0x360
 80205fa:	e9c4 67da 	strd	r6, r7, [r4, #872]	; 0x368
 80205fe:	e9c4 67dc 	strd	r6, r7, [r4, #880]	; 0x370
 8020602:	e9c4 67de 	strd	r6, r7, [r4, #888]	; 0x378
 8020606:	e9c4 67e0 	strd	r6, r7, [r4, #896]	; 0x380
 802060a:	e9c4 67e2 	strd	r6, r7, [r4, #904]	; 0x388
 802060e:	e9c4 67e4 	strd	r6, r7, [r4, #912]	; 0x390
 8020612:	e9c4 67e6 	strd	r6, r7, [r4, #920]	; 0x398
 8020616:	e9c4 67e8 	strd	r6, r7, [r4, #928]	; 0x3a0
 802061a:	e9c4 67ea 	strd	r6, r7, [r4, #936]	; 0x3a8
 802061e:	e9c4 67ec 	strd	r6, r7, [r4, #944]	; 0x3b0
 8020622:	e9c4 67ee 	strd	r6, r7, [r4, #952]	; 0x3b8
 8020626:	e9c4 67f0 	strd	r6, r7, [r4, #960]	; 0x3c0
 802062a:	e9c4 67f2 	strd	r6, r7, [r4, #968]	; 0x3c8
 802062e:	e9c4 67f4 	strd	r6, r7, [r4, #976]	; 0x3d0
 8020632:	e9c4 67f6 	strd	r6, r7, [r4, #984]	; 0x3d8
 8020636:	e9c4 67f8 	strd	r6, r7, [r4, #992]	; 0x3e0
 802063a:	e9c4 67fa 	strd	r6, r7, [r4, #1000]	; 0x3e8
 802063e:	e9c2 6700 	strd	r6, r7, [r2]
 8020642:	e9c1 6700 	strd	r6, r7, [r1]
 8020646:	22d0      	movs	r2, #208	; 0xd0
 8020648:	4629      	mov	r1, r5
 802064a:	e9c3 6700 	strd	r6, r7, [r3]
 802064e:	e9c4 67fc 	strd	r6, r7, [r4, #1008]	; 0x3f0
 8020652:	e9c4 67fe 	strd	r6, r7, [r4, #1016]	; 0x3f8
 8020656:	f002 f91f 	bl	8022898 <memset>
 802065a:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
 802065e:	f504 619f 	add.w	r1, r4, #1272	; 0x4f8
 8020662:	2250      	movs	r2, #80	; 0x50
 8020664:	e9c1 6700 	strd	r6, r7, [r1]
 8020668:	e9c3 6700 	strd	r6, r7, [r3]
 802066c:	4629      	mov	r1, r5
 802066e:	f504 60a2 	add.w	r0, r4, #1296	; 0x510
 8020672:	e001      	b.n	8020678 <MotionPM_Initialize+0x28c>
 8020674:	20006d40 	.word	0x20006d40
 8020678:	f884 54e8 	strb.w	r5, [r4, #1256]	; 0x4e8
 802067c:	f8c4 54ec 	str.w	r5, [r4, #1260]	; 0x4ec
 8020680:	f8c4 5560 	str.w	r5, [r4, #1376]	; 0x560
 8020684:	f8c4 550c 	str.w	r5, [r4, #1292]	; 0x50c
 8020688:	f002 f906 	bl	8022898 <memset>
 802068c:	f504 61b0 	add.w	r1, r4, #1408	; 0x580
 8020690:	f204 538c 	addw	r3, r4, #1420	; 0x58c
 8020694:	f504 629e 	add.w	r2, r4, #1264	; 0x4f0
 8020698:	f8c1 8000 	str.w	r8, [r1]
 802069c:	e9c2 6700 	strd	r6, r7, [r2]
 80206a0:	f8c3 8000 	str.w	r8, [r3]
 80206a4:	f504 61b3 	add.w	r1, r4, #1432	; 0x598
 80206a8:	f204 52a4 	addw	r2, r4, #1444	; 0x5a4
 80206ac:	f204 53bc 	addw	r3, r4, #1468	; 0x5bc
 80206b0:	f44f 2020 	mov.w	r0, #655360	; 0xa0000
 80206b4:	f504 6cbc 	add.w	ip, r4, #1504	; 0x5e0
 80206b8:	f8c1 8000 	str.w	r8, [r1]
 80206bc:	f8c2 8000 	str.w	r8, [r2]
 80206c0:	f8c4 0570 	str.w	r0, [r4, #1392]	; 0x570
 80206c4:	f504 61b9 	add.w	r1, r4, #1480	; 0x5c8
 80206c8:	f504 60b6 	add.w	r0, r4, #1456	; 0x5b0
 80206cc:	f204 52d4 	addw	r2, r4, #1492	; 0x5d4
 80206d0:	f8c3 8000 	str.w	r8, [r3]
 80206d4:	f204 53ec 	addw	r3, r4, #1516	; 0x5ec
 80206d8:	f8c0 8000 	str.w	r8, [r0]
 80206dc:	f8c1 8000 	str.w	r8, [r1]
 80206e0:	f8c2 8000 	str.w	r8, [r2]
 80206e4:	4629      	mov	r1, r5
 80206e6:	f44f 7248 	mov.w	r2, #800	; 0x320
 80206ea:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
 80206ee:	f8c4 556c 	str.w	r5, [r4, #1388]	; 0x56c
 80206f2:	f8c4 5568 	str.w	r5, [r4, #1384]	; 0x568
 80206f6:	f8c4 5574 	str.w	r5, [r4, #1396]	; 0x574
 80206fa:	f884 55f0 	strb.w	r5, [r4, #1520]	; 0x5f0
 80206fe:	f8c4 5578 	str.w	r5, [r4, #1400]	; 0x578
 8020702:	f8c4 557c 	str.w	r5, [r4, #1404]	; 0x57c
 8020706:	f8c4 5584 	str.w	r5, [r4, #1412]	; 0x584
 802070a:	f8c4 5588 	str.w	r5, [r4, #1416]	; 0x588
 802070e:	f8c4 5590 	str.w	r5, [r4, #1424]	; 0x590
 8020712:	f8c4 5594 	str.w	r5, [r4, #1428]	; 0x594
 8020716:	f8c4 559c 	str.w	r5, [r4, #1436]	; 0x59c
 802071a:	f8c4 55a0 	str.w	r5, [r4, #1440]	; 0x5a0
 802071e:	f8c4 55a8 	str.w	r5, [r4, #1448]	; 0x5a8
 8020722:	f8c4 55ac 	str.w	r5, [r4, #1452]	; 0x5ac
 8020726:	f8c4 55b4 	str.w	r5, [r4, #1460]	; 0x5b4
 802072a:	f8c4 55b8 	str.w	r5, [r4, #1464]	; 0x5b8
 802072e:	f8c4 55c0 	str.w	r5, [r4, #1472]	; 0x5c0
 8020732:	f8c4 55c4 	str.w	r5, [r4, #1476]	; 0x5c4
 8020736:	f8c4 55cc 	str.w	r5, [r4, #1484]	; 0x5cc
 802073a:	f8c4 55d0 	str.w	r5, [r4, #1488]	; 0x5d0
 802073e:	f8c4 55d8 	str.w	r5, [r4, #1496]	; 0x5d8
 8020742:	f504 60bf 	add.w	r0, r4, #1528	; 0x5f8
 8020746:	f8c4 55dc 	str.w	r5, [r4, #1500]	; 0x5dc
 802074a:	f8cc 8000 	str.w	r8, [ip]
 802074e:	f8c3 8000 	str.w	r8, [r3]
 8020752:	f8c4 55e4 	str.w	r5, [r4, #1508]	; 0x5e4
 8020756:	f8c4 55e8 	str.w	r5, [r4, #1512]	; 0x5e8
 802075a:	f884 95f4 	strb.w	r9, [r4, #1524]	; 0x5f4
 802075e:	f002 f89b 	bl	8022898 <memset>
 8020762:	f604 1318 	addw	r3, r4, #2328	; 0x918
 8020766:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 802076a:	4629      	mov	r1, r5
 802076c:	f604 1028 	addw	r0, r4, #2344	; 0x928
 8020770:	e9c3 6700 	strd	r6, r7, [r3]
 8020774:	f8c4 5920 	str.w	r5, [r4, #2336]	; 0x920
 8020778:	f002 f88e 	bl	8022898 <memset>
 802077c:	f504 635e 	add.w	r3, r4, #3552	; 0xde0
 8020780:	f504 605f 	add.w	r0, r4, #3568	; 0xdf0
 8020784:	2278      	movs	r2, #120	; 0x78
 8020786:	4629      	mov	r1, r5
 8020788:	f884 5dd8 	strb.w	r5, [r4, #3544]	; 0xdd8
 802078c:	f8a4 5dda 	strh.w	r5, [r4, #3546]	; 0xdda
 8020790:	e9c3 6700 	strd	r6, r7, [r3]
 8020794:	f002 f880 	bl	8022898 <memset>
 8020798:	f884 5de8 	strb.w	r5, [r4, #3560]	; 0xde8
 802079c:	f8c4 5e6c 	str.w	r5, [r4, #3692]	; 0xe6c
 80207a0:	f884 5e70 	strb.w	r5, [r4, #3696]	; 0xe70
 80207a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080207a8 <MotionPM_Update>:
 80207a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80207ac:	4c5a      	ldr	r4, [pc, #360]	; (8020918 <MotionPM_Update+0x170>)
 80207ae:	ed2d 8b02 	vpush	{d8}
 80207b2:	f894 3e68 	ldrb.w	r3, [r4, #3688]	; 0xe68
 80207b6:	b0a1      	sub	sp, #132	; 0x84
 80207b8:	b923      	cbnz	r3, 80207c4 <MotionPM_Update+0x1c>
 80207ba:	b021      	add	sp, #132	; 0x84
 80207bc:	ecbd 8b02 	vpop	{d8}
 80207c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80207c4:	eddf 7a55 	vldr	s15, [pc, #340]	; 802091c <MotionPM_Update+0x174>
 80207c8:	ed90 7a00 	vldr	s14, [r0]
 80207cc:	edd0 8a01 	vldr	s17, [r0, #4]
 80207d0:	ed90 8a02 	vldr	s16, [r0, #8]
 80207d4:	f894 7de8 	ldrb.w	r7, [r4, #3560]	; 0xde8
 80207d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80207dc:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80207e0:	ee17 0a10 	vmov	r0, s14
 80207e4:	ee28 8a27 	vmul.f32	s16, s16, s15
 80207e8:	eb07 0547 	add.w	r5, r7, r7, lsl #1
 80207ec:	460e      	mov	r6, r1
 80207ee:	f7df fe2b 	bl	8000448 <__aeabi_f2d>
 80207f2:	f505 78df 	add.w	r8, r5, #446	; 0x1be
 80207f6:	eb04 08c8 	add.w	r8, r4, r8, lsl #3
 80207fa:	e9c8 0100 	strd	r0, r1, [r8]
 80207fe:	ee18 0a90 	vmov	r0, s17
 8020802:	f7df fe21 	bl	8000448 <__aeabi_f2d>
 8020806:	f205 18bf 	addw	r8, r5, #447	; 0x1bf
 802080a:	eb04 08c8 	add.w	r8, r4, r8, lsl #3
 802080e:	e9c8 0100 	strd	r0, r1, [r8]
 8020812:	ee18 0a10 	vmov	r0, s16
 8020816:	f7df fe17 	bl	8000448 <__aeabi_f2d>
 802081a:	1c7b      	adds	r3, r7, #1
 802081c:	b2db      	uxtb	r3, r3
 802081e:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
 8020822:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8020826:	2b05      	cmp	r3, #5
 8020828:	e9c5 0100 	strd	r0, r1, [r5]
 802082c:	f884 3de8 	strb.w	r3, [r4, #3560]	; 0xde8
 8020830:	d01a      	beq.n	8020868 <MotionPM_Update+0xc0>
 8020832:	f8d4 556c 	ldr.w	r5, [r4, #1388]	; 0x56c
 8020836:	f8d4 3e6c 	ldr.w	r3, [r4, #3692]	; 0xe6c
 802083a:	6075      	str	r5, [r6, #4]
 802083c:	42ab      	cmp	r3, r5
 802083e:	d055      	beq.n	80208ec <MotionPM_Update+0x144>
 8020840:	4b37      	ldr	r3, [pc, #220]	; (8020920 <MotionPM_Update+0x178>)
 8020842:	2700      	movs	r7, #0
 8020844:	e9d3 0100 	ldrd	r0, r1, [r3]
 8020848:	2200      	movs	r2, #0
 802084a:	4b36      	ldr	r3, [pc, #216]	; (8020924 <MotionPM_Update+0x17c>)
 802084c:	f884 7e70 	strb.w	r7, [r4, #3696]	; 0xe70
 8020850:	f7df fe52 	bl	80004f8 <__aeabi_dmul>
 8020854:	f7e0 f928 	bl	8000aa8 <__aeabi_d2uiz>
 8020858:	7030      	strb	r0, [r6, #0]
 802085a:	f8c4 5e6c 	str.w	r5, [r4, #3692]	; 0xe6c
 802085e:	b021      	add	sp, #132	; 0x84
 8020860:	ecbd 8b02 	vpop	{d8}
 8020864:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020868:	2500      	movs	r5, #0
 802086a:	a801      	add	r0, sp, #4
 802086c:	f884 5de8 	strb.w	r5, [r4, #3560]	; 0xde8
 8020870:	f7fd ff8a 	bl	801e788 <runStepDetection.constprop.4>
 8020874:	f8dd c004 	ldr.w	ip, [sp, #4]
 8020878:	f1bc 0f00 	cmp.w	ip, #0
 802087c:	d0d9      	beq.n	8020832 <MotionPM_Update+0x8a>
 802087e:	f8d4 e56c 	ldr.w	lr, [r4, #1388]	; 0x56c
 8020882:	f8b4 2570 	ldrh.w	r2, [r4, #1392]	; 0x570
 8020886:	f8b4 7572 	ldrh.w	r7, [r4, #1394]	; 0x572
 802088a:	f8d4 0574 	ldr.w	r0, [r4, #1396]	; 0x574
 802088e:	4629      	mov	r1, r5
 8020890:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8020894:	009b      	lsls	r3, r3, #2
 8020896:	ad20      	add	r5, sp, #128	; 0x80
 8020898:	441d      	add	r5, r3
 802089a:	4423      	add	r3, r4
 802089c:	f102 0801 	add.w	r8, r2, #1
 80208a0:	f855 2c78 	ldr.w	r2, [r5, #-120]
 80208a4:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
 80208a8:	fa1f f288 	uxth.w	r2, r8
 80208ac:	42ba      	cmp	r2, r7
 80208ae:	f503 68b0 	add.w	r8, r3, #1408	; 0x580
 80208b2:	f101 0101 	add.w	r1, r1, #1
 80208b6:	f855 9c70 	ldr.w	r9, [r5, #-112]
 80208ba:	f855 5c74 	ldr.w	r5, [r5, #-116]
 80208be:	f8c3 557c 	str.w	r5, [r3, #1404]	; 0x57c
 80208c2:	f100 0001 	add.w	r0, r0, #1
 80208c6:	bf28      	it	cs
 80208c8:	463a      	movcs	r2, r7
 80208ca:	4561      	cmp	r1, ip
 80208cc:	fbb0 f3f7 	udiv	r3, r0, r7
 80208d0:	f8c8 9000 	str.w	r9, [r8]
 80208d4:	fb07 0013 	mls	r0, r7, r3, r0
 80208d8:	d1da      	bne.n	8020890 <MotionPM_Update+0xe8>
 80208da:	eb0e 0501 	add.w	r5, lr, r1
 80208de:	f8c4 556c 	str.w	r5, [r4, #1388]	; 0x56c
 80208e2:	f8c4 0574 	str.w	r0, [r4, #1396]	; 0x574
 80208e6:	f8a4 2570 	strh.w	r2, [r4, #1392]	; 0x570
 80208ea:	e7a4      	b.n	8020836 <MotionPM_Update+0x8e>
 80208ec:	f894 7e70 	ldrb.w	r7, [r4, #3696]	; 0xe70
 80208f0:	2f96      	cmp	r7, #150	; 0x96
 80208f2:	d902      	bls.n	80208fa <MotionPM_Update+0x152>
 80208f4:	2300      	movs	r3, #0
 80208f6:	7033      	strb	r3, [r6, #0]
 80208f8:	e7af      	b.n	802085a <MotionPM_Update+0xb2>
 80208fa:	4909      	ldr	r1, [pc, #36]	; (8020920 <MotionPM_Update+0x178>)
 80208fc:	4b09      	ldr	r3, [pc, #36]	; (8020924 <MotionPM_Update+0x17c>)
 80208fe:	2200      	movs	r2, #0
 8020900:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020904:	f7df fdf8 	bl	80004f8 <__aeabi_dmul>
 8020908:	f7e0 f8ce 	bl	8000aa8 <__aeabi_d2uiz>
 802090c:	3701      	adds	r7, #1
 802090e:	7030      	strb	r0, [r6, #0]
 8020910:	f884 7e70 	strb.w	r7, [r4, #3696]	; 0xe70
 8020914:	e7a1      	b.n	802085a <MotionPM_Update+0xb2>
 8020916:	bf00      	nop
 8020918:	20006d40 	.word	0x20006d40
 802091c:	3f802170 	.word	0x3f802170
 8020920:	20007230 	.word	0x20007230
 8020924:	404e0000 	.word	0x404e0000

08020928 <atan>:
 8020928:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802092c:	4bbc      	ldr	r3, [pc, #752]	; (8020c20 <atan+0x2f8>)
 802092e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8020932:	429e      	cmp	r6, r3
 8020934:	4604      	mov	r4, r0
 8020936:	460d      	mov	r5, r1
 8020938:	468b      	mov	fp, r1
 802093a:	dd18      	ble.n	802096e <atan+0x46>
 802093c:	4bb9      	ldr	r3, [pc, #740]	; (8020c24 <atan+0x2fc>)
 802093e:	429e      	cmp	r6, r3
 8020940:	dc01      	bgt.n	8020946 <atan+0x1e>
 8020942:	d109      	bne.n	8020958 <atan+0x30>
 8020944:	b140      	cbz	r0, 8020958 <atan+0x30>
 8020946:	4622      	mov	r2, r4
 8020948:	462b      	mov	r3, r5
 802094a:	4620      	mov	r0, r4
 802094c:	4629      	mov	r1, r5
 802094e:	f7df fc1d 	bl	800018c <__adddf3>
 8020952:	4604      	mov	r4, r0
 8020954:	460d      	mov	r5, r1
 8020956:	e006      	b.n	8020966 <atan+0x3e>
 8020958:	f1bb 0f00 	cmp.w	fp, #0
 802095c:	f340 8123 	ble.w	8020ba6 <atan+0x27e>
 8020960:	a593      	add	r5, pc, #588	; (adr r5, 8020bb0 <atan+0x288>)
 8020962:	e9d5 4500 	ldrd	r4, r5, [r5]
 8020966:	4620      	mov	r0, r4
 8020968:	4629      	mov	r1, r5
 802096a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802096e:	4bae      	ldr	r3, [pc, #696]	; (8020c28 <atan+0x300>)
 8020970:	429e      	cmp	r6, r3
 8020972:	dc11      	bgt.n	8020998 <atan+0x70>
 8020974:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8020978:	429e      	cmp	r6, r3
 802097a:	dc0a      	bgt.n	8020992 <atan+0x6a>
 802097c:	a38e      	add	r3, pc, #568	; (adr r3, 8020bb8 <atan+0x290>)
 802097e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020982:	f7df fc03 	bl	800018c <__adddf3>
 8020986:	2200      	movs	r2, #0
 8020988:	4ba8      	ldr	r3, [pc, #672]	; (8020c2c <atan+0x304>)
 802098a:	f7e0 f845 	bl	8000a18 <__aeabi_dcmpgt>
 802098e:	2800      	cmp	r0, #0
 8020990:	d1e9      	bne.n	8020966 <atan+0x3e>
 8020992:	f04f 3aff 	mov.w	sl, #4294967295
 8020996:	e027      	b.n	80209e8 <atan+0xc0>
 8020998:	f000 f956 	bl	8020c48 <fabs>
 802099c:	4ba4      	ldr	r3, [pc, #656]	; (8020c30 <atan+0x308>)
 802099e:	429e      	cmp	r6, r3
 80209a0:	4604      	mov	r4, r0
 80209a2:	460d      	mov	r5, r1
 80209a4:	f300 80b8 	bgt.w	8020b18 <atan+0x1f0>
 80209a8:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80209ac:	429e      	cmp	r6, r3
 80209ae:	f300 809c 	bgt.w	8020aea <atan+0x1c2>
 80209b2:	4602      	mov	r2, r0
 80209b4:	460b      	mov	r3, r1
 80209b6:	f7df fbe9 	bl	800018c <__adddf3>
 80209ba:	2200      	movs	r2, #0
 80209bc:	4b9b      	ldr	r3, [pc, #620]	; (8020c2c <atan+0x304>)
 80209be:	f7df fbe3 	bl	8000188 <__aeabi_dsub>
 80209c2:	2200      	movs	r2, #0
 80209c4:	4606      	mov	r6, r0
 80209c6:	460f      	mov	r7, r1
 80209c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80209cc:	4620      	mov	r0, r4
 80209ce:	4629      	mov	r1, r5
 80209d0:	f7df fbdc 	bl	800018c <__adddf3>
 80209d4:	4602      	mov	r2, r0
 80209d6:	460b      	mov	r3, r1
 80209d8:	4630      	mov	r0, r6
 80209da:	4639      	mov	r1, r7
 80209dc:	f7df feb6 	bl	800074c <__aeabi_ddiv>
 80209e0:	f04f 0a00 	mov.w	sl, #0
 80209e4:	4604      	mov	r4, r0
 80209e6:	460d      	mov	r5, r1
 80209e8:	4622      	mov	r2, r4
 80209ea:	462b      	mov	r3, r5
 80209ec:	4620      	mov	r0, r4
 80209ee:	4629      	mov	r1, r5
 80209f0:	f7df fd82 	bl	80004f8 <__aeabi_dmul>
 80209f4:	4602      	mov	r2, r0
 80209f6:	460b      	mov	r3, r1
 80209f8:	4680      	mov	r8, r0
 80209fa:	4689      	mov	r9, r1
 80209fc:	f7df fd7c 	bl	80004f8 <__aeabi_dmul>
 8020a00:	a36f      	add	r3, pc, #444	; (adr r3, 8020bc0 <atan+0x298>)
 8020a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020a06:	4606      	mov	r6, r0
 8020a08:	460f      	mov	r7, r1
 8020a0a:	f7df fd75 	bl	80004f8 <__aeabi_dmul>
 8020a0e:	a36e      	add	r3, pc, #440	; (adr r3, 8020bc8 <atan+0x2a0>)
 8020a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020a14:	f7df fbba 	bl	800018c <__adddf3>
 8020a18:	4632      	mov	r2, r6
 8020a1a:	463b      	mov	r3, r7
 8020a1c:	f7df fd6c 	bl	80004f8 <__aeabi_dmul>
 8020a20:	a36b      	add	r3, pc, #428	; (adr r3, 8020bd0 <atan+0x2a8>)
 8020a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020a26:	f7df fbb1 	bl	800018c <__adddf3>
 8020a2a:	4632      	mov	r2, r6
 8020a2c:	463b      	mov	r3, r7
 8020a2e:	f7df fd63 	bl	80004f8 <__aeabi_dmul>
 8020a32:	a369      	add	r3, pc, #420	; (adr r3, 8020bd8 <atan+0x2b0>)
 8020a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020a38:	f7df fba8 	bl	800018c <__adddf3>
 8020a3c:	4632      	mov	r2, r6
 8020a3e:	463b      	mov	r3, r7
 8020a40:	f7df fd5a 	bl	80004f8 <__aeabi_dmul>
 8020a44:	a366      	add	r3, pc, #408	; (adr r3, 8020be0 <atan+0x2b8>)
 8020a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020a4a:	f7df fb9f 	bl	800018c <__adddf3>
 8020a4e:	4632      	mov	r2, r6
 8020a50:	463b      	mov	r3, r7
 8020a52:	f7df fd51 	bl	80004f8 <__aeabi_dmul>
 8020a56:	a364      	add	r3, pc, #400	; (adr r3, 8020be8 <atan+0x2c0>)
 8020a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020a5c:	f7df fb96 	bl	800018c <__adddf3>
 8020a60:	4642      	mov	r2, r8
 8020a62:	464b      	mov	r3, r9
 8020a64:	f7df fd48 	bl	80004f8 <__aeabi_dmul>
 8020a68:	a361      	add	r3, pc, #388	; (adr r3, 8020bf0 <atan+0x2c8>)
 8020a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020a6e:	4680      	mov	r8, r0
 8020a70:	4689      	mov	r9, r1
 8020a72:	4630      	mov	r0, r6
 8020a74:	4639      	mov	r1, r7
 8020a76:	f7df fd3f 	bl	80004f8 <__aeabi_dmul>
 8020a7a:	a35f      	add	r3, pc, #380	; (adr r3, 8020bf8 <atan+0x2d0>)
 8020a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020a80:	f7df fb82 	bl	8000188 <__aeabi_dsub>
 8020a84:	4632      	mov	r2, r6
 8020a86:	463b      	mov	r3, r7
 8020a88:	f7df fd36 	bl	80004f8 <__aeabi_dmul>
 8020a8c:	a35c      	add	r3, pc, #368	; (adr r3, 8020c00 <atan+0x2d8>)
 8020a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020a92:	f7df fb79 	bl	8000188 <__aeabi_dsub>
 8020a96:	4632      	mov	r2, r6
 8020a98:	463b      	mov	r3, r7
 8020a9a:	f7df fd2d 	bl	80004f8 <__aeabi_dmul>
 8020a9e:	a35a      	add	r3, pc, #360	; (adr r3, 8020c08 <atan+0x2e0>)
 8020aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020aa4:	f7df fb70 	bl	8000188 <__aeabi_dsub>
 8020aa8:	4632      	mov	r2, r6
 8020aaa:	463b      	mov	r3, r7
 8020aac:	f7df fd24 	bl	80004f8 <__aeabi_dmul>
 8020ab0:	a357      	add	r3, pc, #348	; (adr r3, 8020c10 <atan+0x2e8>)
 8020ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020ab6:	f7df fb67 	bl	8000188 <__aeabi_dsub>
 8020aba:	4632      	mov	r2, r6
 8020abc:	463b      	mov	r3, r7
 8020abe:	f7df fd1b 	bl	80004f8 <__aeabi_dmul>
 8020ac2:	4602      	mov	r2, r0
 8020ac4:	460b      	mov	r3, r1
 8020ac6:	4640      	mov	r0, r8
 8020ac8:	4649      	mov	r1, r9
 8020aca:	f7df fb5f 	bl	800018c <__adddf3>
 8020ace:	4622      	mov	r2, r4
 8020ad0:	462b      	mov	r3, r5
 8020ad2:	f7df fd11 	bl	80004f8 <__aeabi_dmul>
 8020ad6:	f1ba 3fff 	cmp.w	sl, #4294967295
 8020ada:	4602      	mov	r2, r0
 8020adc:	460b      	mov	r3, r1
 8020ade:	d144      	bne.n	8020b6a <atan+0x242>
 8020ae0:	4620      	mov	r0, r4
 8020ae2:	4629      	mov	r1, r5
 8020ae4:	f7df fb50 	bl	8000188 <__aeabi_dsub>
 8020ae8:	e733      	b.n	8020952 <atan+0x2a>
 8020aea:	2200      	movs	r2, #0
 8020aec:	4b4f      	ldr	r3, [pc, #316]	; (8020c2c <atan+0x304>)
 8020aee:	f7df fb4b 	bl	8000188 <__aeabi_dsub>
 8020af2:	2200      	movs	r2, #0
 8020af4:	4606      	mov	r6, r0
 8020af6:	460f      	mov	r7, r1
 8020af8:	4b4c      	ldr	r3, [pc, #304]	; (8020c2c <atan+0x304>)
 8020afa:	4620      	mov	r0, r4
 8020afc:	4629      	mov	r1, r5
 8020afe:	f7df fb45 	bl	800018c <__adddf3>
 8020b02:	4602      	mov	r2, r0
 8020b04:	460b      	mov	r3, r1
 8020b06:	4630      	mov	r0, r6
 8020b08:	4639      	mov	r1, r7
 8020b0a:	f7df fe1f 	bl	800074c <__aeabi_ddiv>
 8020b0e:	f04f 0a01 	mov.w	sl, #1
 8020b12:	4604      	mov	r4, r0
 8020b14:	460d      	mov	r5, r1
 8020b16:	e767      	b.n	80209e8 <atan+0xc0>
 8020b18:	4b46      	ldr	r3, [pc, #280]	; (8020c34 <atan+0x30c>)
 8020b1a:	429e      	cmp	r6, r3
 8020b1c:	dc1a      	bgt.n	8020b54 <atan+0x22c>
 8020b1e:	2200      	movs	r2, #0
 8020b20:	4b45      	ldr	r3, [pc, #276]	; (8020c38 <atan+0x310>)
 8020b22:	f7df fb31 	bl	8000188 <__aeabi_dsub>
 8020b26:	2200      	movs	r2, #0
 8020b28:	4606      	mov	r6, r0
 8020b2a:	460f      	mov	r7, r1
 8020b2c:	4b42      	ldr	r3, [pc, #264]	; (8020c38 <atan+0x310>)
 8020b2e:	4620      	mov	r0, r4
 8020b30:	4629      	mov	r1, r5
 8020b32:	f7df fce1 	bl	80004f8 <__aeabi_dmul>
 8020b36:	2200      	movs	r2, #0
 8020b38:	4b3c      	ldr	r3, [pc, #240]	; (8020c2c <atan+0x304>)
 8020b3a:	f7df fb27 	bl	800018c <__adddf3>
 8020b3e:	4602      	mov	r2, r0
 8020b40:	460b      	mov	r3, r1
 8020b42:	4630      	mov	r0, r6
 8020b44:	4639      	mov	r1, r7
 8020b46:	f7df fe01 	bl	800074c <__aeabi_ddiv>
 8020b4a:	f04f 0a02 	mov.w	sl, #2
 8020b4e:	4604      	mov	r4, r0
 8020b50:	460d      	mov	r5, r1
 8020b52:	e749      	b.n	80209e8 <atan+0xc0>
 8020b54:	4602      	mov	r2, r0
 8020b56:	460b      	mov	r3, r1
 8020b58:	2000      	movs	r0, #0
 8020b5a:	4938      	ldr	r1, [pc, #224]	; (8020c3c <atan+0x314>)
 8020b5c:	f7df fdf6 	bl	800074c <__aeabi_ddiv>
 8020b60:	f04f 0a03 	mov.w	sl, #3
 8020b64:	4604      	mov	r4, r0
 8020b66:	460d      	mov	r5, r1
 8020b68:	e73e      	b.n	80209e8 <atan+0xc0>
 8020b6a:	4b35      	ldr	r3, [pc, #212]	; (8020c40 <atan+0x318>)
 8020b6c:	4e35      	ldr	r6, [pc, #212]	; (8020c44 <atan+0x31c>)
 8020b6e:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8020b72:	4456      	add	r6, sl
 8020b74:	449a      	add	sl, r3
 8020b76:	e9da 2300 	ldrd	r2, r3, [sl]
 8020b7a:	f7df fb05 	bl	8000188 <__aeabi_dsub>
 8020b7e:	4622      	mov	r2, r4
 8020b80:	462b      	mov	r3, r5
 8020b82:	f7df fb01 	bl	8000188 <__aeabi_dsub>
 8020b86:	4602      	mov	r2, r0
 8020b88:	460b      	mov	r3, r1
 8020b8a:	e9d6 0100 	ldrd	r0, r1, [r6]
 8020b8e:	f7df fafb 	bl	8000188 <__aeabi_dsub>
 8020b92:	f1bb 0f00 	cmp.w	fp, #0
 8020b96:	4604      	mov	r4, r0
 8020b98:	460d      	mov	r5, r1
 8020b9a:	f6bf aee4 	bge.w	8020966 <atan+0x3e>
 8020b9e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8020ba2:	461d      	mov	r5, r3
 8020ba4:	e6df      	b.n	8020966 <atan+0x3e>
 8020ba6:	a51c      	add	r5, pc, #112	; (adr r5, 8020c18 <atan+0x2f0>)
 8020ba8:	e9d5 4500 	ldrd	r4, r5, [r5]
 8020bac:	e6db      	b.n	8020966 <atan+0x3e>
 8020bae:	bf00      	nop
 8020bb0:	54442d18 	.word	0x54442d18
 8020bb4:	3ff921fb 	.word	0x3ff921fb
 8020bb8:	8800759c 	.word	0x8800759c
 8020bbc:	7e37e43c 	.word	0x7e37e43c
 8020bc0:	e322da11 	.word	0xe322da11
 8020bc4:	3f90ad3a 	.word	0x3f90ad3a
 8020bc8:	24760deb 	.word	0x24760deb
 8020bcc:	3fa97b4b 	.word	0x3fa97b4b
 8020bd0:	a0d03d51 	.word	0xa0d03d51
 8020bd4:	3fb10d66 	.word	0x3fb10d66
 8020bd8:	c54c206e 	.word	0xc54c206e
 8020bdc:	3fb745cd 	.word	0x3fb745cd
 8020be0:	920083ff 	.word	0x920083ff
 8020be4:	3fc24924 	.word	0x3fc24924
 8020be8:	5555550d 	.word	0x5555550d
 8020bec:	3fd55555 	.word	0x3fd55555
 8020bf0:	2c6a6c2f 	.word	0x2c6a6c2f
 8020bf4:	bfa2b444 	.word	0xbfa2b444
 8020bf8:	52defd9a 	.word	0x52defd9a
 8020bfc:	3fadde2d 	.word	0x3fadde2d
 8020c00:	af749a6d 	.word	0xaf749a6d
 8020c04:	3fb3b0f2 	.word	0x3fb3b0f2
 8020c08:	fe231671 	.word	0xfe231671
 8020c0c:	3fbc71c6 	.word	0x3fbc71c6
 8020c10:	9998ebc4 	.word	0x9998ebc4
 8020c14:	3fc99999 	.word	0x3fc99999
 8020c18:	54442d18 	.word	0x54442d18
 8020c1c:	bff921fb 	.word	0xbff921fb
 8020c20:	440fffff 	.word	0x440fffff
 8020c24:	7ff00000 	.word	0x7ff00000
 8020c28:	3fdbffff 	.word	0x3fdbffff
 8020c2c:	3ff00000 	.word	0x3ff00000
 8020c30:	3ff2ffff 	.word	0x3ff2ffff
 8020c34:	40037fff 	.word	0x40037fff
 8020c38:	3ff80000 	.word	0x3ff80000
 8020c3c:	bff00000 	.word	0xbff00000
 8020c40:	08022f50 	.word	0x08022f50
 8020c44:	08022f30 	.word	0x08022f30

08020c48 <fabs>:
 8020c48:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8020c4c:	4619      	mov	r1, r3
 8020c4e:	4770      	bx	lr

08020c50 <floor>:
 8020c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020c54:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8020c58:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8020c5c:	2e13      	cmp	r6, #19
 8020c5e:	4602      	mov	r2, r0
 8020c60:	460b      	mov	r3, r1
 8020c62:	460c      	mov	r4, r1
 8020c64:	4605      	mov	r5, r0
 8020c66:	4680      	mov	r8, r0
 8020c68:	dc35      	bgt.n	8020cd6 <floor+0x86>
 8020c6a:	2e00      	cmp	r6, #0
 8020c6c:	da16      	bge.n	8020c9c <floor+0x4c>
 8020c6e:	a334      	add	r3, pc, #208	; (adr r3, 8020d40 <floor+0xf0>)
 8020c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020c74:	f7df fa8a 	bl	800018c <__adddf3>
 8020c78:	2200      	movs	r2, #0
 8020c7a:	2300      	movs	r3, #0
 8020c7c:	f7df fecc 	bl	8000a18 <__aeabi_dcmpgt>
 8020c80:	b148      	cbz	r0, 8020c96 <floor+0x46>
 8020c82:	2c00      	cmp	r4, #0
 8020c84:	da59      	bge.n	8020d3a <floor+0xea>
 8020c86:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8020c8a:	4a2f      	ldr	r2, [pc, #188]	; (8020d48 <floor+0xf8>)
 8020c8c:	432b      	orrs	r3, r5
 8020c8e:	2500      	movs	r5, #0
 8020c90:	42ab      	cmp	r3, r5
 8020c92:	bf18      	it	ne
 8020c94:	4614      	movne	r4, r2
 8020c96:	4623      	mov	r3, r4
 8020c98:	462a      	mov	r2, r5
 8020c9a:	e025      	b.n	8020ce8 <floor+0x98>
 8020c9c:	4f2b      	ldr	r7, [pc, #172]	; (8020d4c <floor+0xfc>)
 8020c9e:	4137      	asrs	r7, r6
 8020ca0:	ea01 0c07 	and.w	ip, r1, r7
 8020ca4:	ea5c 0c00 	orrs.w	ip, ip, r0
 8020ca8:	d01e      	beq.n	8020ce8 <floor+0x98>
 8020caa:	a325      	add	r3, pc, #148	; (adr r3, 8020d40 <floor+0xf0>)
 8020cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020cb0:	f7df fa6c 	bl	800018c <__adddf3>
 8020cb4:	2200      	movs	r2, #0
 8020cb6:	2300      	movs	r3, #0
 8020cb8:	f7df feae 	bl	8000a18 <__aeabi_dcmpgt>
 8020cbc:	2800      	cmp	r0, #0
 8020cbe:	d0ea      	beq.n	8020c96 <floor+0x46>
 8020cc0:	2c00      	cmp	r4, #0
 8020cc2:	bfbe      	ittt	lt
 8020cc4:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8020cc8:	fa43 f606 	asrlt.w	r6, r3, r6
 8020ccc:	19a4      	addlt	r4, r4, r6
 8020cce:	ea24 0407 	bic.w	r4, r4, r7
 8020cd2:	2500      	movs	r5, #0
 8020cd4:	e7df      	b.n	8020c96 <floor+0x46>
 8020cd6:	2e33      	cmp	r6, #51	; 0x33
 8020cd8:	dd0a      	ble.n	8020cf0 <floor+0xa0>
 8020cda:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8020cde:	d103      	bne.n	8020ce8 <floor+0x98>
 8020ce0:	f7df fa54 	bl	800018c <__adddf3>
 8020ce4:	4602      	mov	r2, r0
 8020ce6:	460b      	mov	r3, r1
 8020ce8:	4610      	mov	r0, r2
 8020cea:	4619      	mov	r1, r3
 8020cec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020cf0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8020cf4:	f04f 3cff 	mov.w	ip, #4294967295
 8020cf8:	fa2c f707 	lsr.w	r7, ip, r7
 8020cfc:	4207      	tst	r7, r0
 8020cfe:	d0f3      	beq.n	8020ce8 <floor+0x98>
 8020d00:	a30f      	add	r3, pc, #60	; (adr r3, 8020d40 <floor+0xf0>)
 8020d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020d06:	f7df fa41 	bl	800018c <__adddf3>
 8020d0a:	2200      	movs	r2, #0
 8020d0c:	2300      	movs	r3, #0
 8020d0e:	f7df fe83 	bl	8000a18 <__aeabi_dcmpgt>
 8020d12:	2800      	cmp	r0, #0
 8020d14:	d0bf      	beq.n	8020c96 <floor+0x46>
 8020d16:	2c00      	cmp	r4, #0
 8020d18:	da02      	bge.n	8020d20 <floor+0xd0>
 8020d1a:	2e14      	cmp	r6, #20
 8020d1c:	d103      	bne.n	8020d26 <floor+0xd6>
 8020d1e:	3401      	adds	r4, #1
 8020d20:	ea25 0507 	bic.w	r5, r5, r7
 8020d24:	e7b7      	b.n	8020c96 <floor+0x46>
 8020d26:	2301      	movs	r3, #1
 8020d28:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8020d2c:	fa03 f606 	lsl.w	r6, r3, r6
 8020d30:	4435      	add	r5, r6
 8020d32:	4545      	cmp	r5, r8
 8020d34:	bf38      	it	cc
 8020d36:	18e4      	addcc	r4, r4, r3
 8020d38:	e7f2      	b.n	8020d20 <floor+0xd0>
 8020d3a:	2500      	movs	r5, #0
 8020d3c:	462c      	mov	r4, r5
 8020d3e:	e7aa      	b.n	8020c96 <floor+0x46>
 8020d40:	8800759c 	.word	0x8800759c
 8020d44:	7e37e43c 	.word	0x7e37e43c
 8020d48:	bff00000 	.word	0xbff00000
 8020d4c:	000fffff 	.word	0x000fffff

08020d50 <trunc>:
 8020d50:	e92d 4878 	stmdb	sp!, {r3, r4, r5, r6, fp, lr}
 8020d54:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8020d58:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8020d5c:	2c13      	cmp	r4, #19
 8020d5e:	4683      	mov	fp, r0
 8020d60:	468c      	mov	ip, r1
 8020d62:	dc11      	bgt.n	8020d88 <trunc+0x38>
 8020d64:	2c00      	cmp	r4, #0
 8020d66:	bfa7      	ittee	ge
 8020d68:	4b12      	ldrge	r3, [pc, #72]	; (8020db4 <trunc+0x64>)
 8020d6a:	fa43 f404 	asrge.w	r4, r3, r4
 8020d6e:	2200      	movlt	r2, #0
 8020d70:	f001 4300 	andlt.w	r3, r1, #2147483648	; 0x80000000
 8020d74:	bfa4      	itt	ge
 8020d76:	2200      	movge	r2, #0
 8020d78:	ea21 0304 	bicge.w	r3, r1, r4
 8020d7c:	4693      	mov	fp, r2
 8020d7e:	469c      	mov	ip, r3
 8020d80:	4658      	mov	r0, fp
 8020d82:	4661      	mov	r1, ip
 8020d84:	e8bd 8878 	ldmia.w	sp!, {r3, r4, r5, r6, fp, pc}
 8020d88:	2c33      	cmp	r4, #51	; 0x33
 8020d8a:	dd09      	ble.n	8020da0 <trunc+0x50>
 8020d8c:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8020d90:	d1f6      	bne.n	8020d80 <trunc+0x30>
 8020d92:	4602      	mov	r2, r0
 8020d94:	460b      	mov	r3, r1
 8020d96:	f7df f9f9 	bl	800018c <__adddf3>
 8020d9a:	4683      	mov	fp, r0
 8020d9c:	468c      	mov	ip, r1
 8020d9e:	e7ef      	b.n	8020d80 <trunc+0x30>
 8020da0:	f2a5 4513 	subw	r5, r5, #1043	; 0x413
 8020da4:	f04f 33ff 	mov.w	r3, #4294967295
 8020da8:	fa23 f505 	lsr.w	r5, r3, r5
 8020dac:	ea20 0005 	bic.w	r0, r0, r5
 8020db0:	e7f3      	b.n	8020d9a <trunc+0x4a>
 8020db2:	bf00      	nop
 8020db4:	000fffff 	.word	0x000fffff

08020db8 <atanf>:
 8020db8:	b538      	push	{r3, r4, r5, lr}
 8020dba:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 8020dbe:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8020dc2:	ee07 0a90 	vmov	s15, r0
 8020dc6:	4605      	mov	r5, r0
 8020dc8:	db10      	blt.n	8020dec <atanf+0x34>
 8020dca:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8020dce:	dd04      	ble.n	8020dda <atanf+0x22>
 8020dd0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8020dd4:	ee17 0a90 	vmov	r0, s15
 8020dd8:	bd38      	pop	{r3, r4, r5, pc}
 8020dda:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8020f18 <atanf+0x160>
 8020dde:	eddf 7a4f 	vldr	s15, [pc, #316]	; 8020f1c <atanf+0x164>
 8020de2:	2800      	cmp	r0, #0
 8020de4:	bfd8      	it	le
 8020de6:	eef0 7a47 	vmovle.f32	s15, s14
 8020dea:	e7f3      	b.n	8020dd4 <atanf+0x1c>
 8020dec:	4b4c      	ldr	r3, [pc, #304]	; (8020f20 <atanf+0x168>)
 8020dee:	429c      	cmp	r4, r3
 8020df0:	dc10      	bgt.n	8020e14 <atanf+0x5c>
 8020df2:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8020df6:	da0a      	bge.n	8020e0e <atanf+0x56>
 8020df8:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8020f24 <atanf+0x16c>
 8020dfc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8020e00:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020e04:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8020e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020e0c:	dce2      	bgt.n	8020dd4 <atanf+0x1c>
 8020e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8020e12:	e015      	b.n	8020e40 <atanf+0x88>
 8020e14:	f000 f8de 	bl	8020fd4 <fabsf>
 8020e18:	4b43      	ldr	r3, [pc, #268]	; (8020f28 <atanf+0x170>)
 8020e1a:	429c      	cmp	r4, r3
 8020e1c:	ee07 0a10 	vmov	s14, r0
 8020e20:	dc4f      	bgt.n	8020ec2 <atanf+0x10a>
 8020e22:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8020e26:	429c      	cmp	r4, r3
 8020e28:	dc41      	bgt.n	8020eae <atanf+0xf6>
 8020e2a:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8020e2e:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 8020e32:	eee7 6a27 	vfma.f32	s13, s14, s15
 8020e36:	2300      	movs	r3, #0
 8020e38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8020e3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8020e40:	1c5a      	adds	r2, r3, #1
 8020e42:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8020e46:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8020f2c <atanf+0x174>
 8020e4a:	eddf 5a39 	vldr	s11, [pc, #228]	; 8020f30 <atanf+0x178>
 8020e4e:	ed9f 5a39 	vldr	s10, [pc, #228]	; 8020f34 <atanf+0x17c>
 8020e52:	ee66 6a06 	vmul.f32	s13, s12, s12
 8020e56:	eee6 5a87 	vfma.f32	s11, s13, s14
 8020e5a:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8020f38 <atanf+0x180>
 8020e5e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8020e62:	eddf 5a36 	vldr	s11, [pc, #216]	; 8020f3c <atanf+0x184>
 8020e66:	eee7 5a26 	vfma.f32	s11, s14, s13
 8020e6a:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8020f40 <atanf+0x188>
 8020e6e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8020e72:	eddf 5a34 	vldr	s11, [pc, #208]	; 8020f44 <atanf+0x18c>
 8020e76:	eee7 5a26 	vfma.f32	s11, s14, s13
 8020e7a:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8020f48 <atanf+0x190>
 8020e7e:	eea6 5a87 	vfma.f32	s10, s13, s14
 8020e82:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8020f4c <atanf+0x194>
 8020e86:	eea5 7a26 	vfma.f32	s14, s10, s13
 8020e8a:	ed9f 5a31 	vldr	s10, [pc, #196]	; 8020f50 <atanf+0x198>
 8020e8e:	eea7 5a26 	vfma.f32	s10, s14, s13
 8020e92:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8020f54 <atanf+0x19c>
 8020e96:	eea5 7a26 	vfma.f32	s14, s10, s13
 8020e9a:	ee27 7a26 	vmul.f32	s14, s14, s13
 8020e9e:	eea5 7a86 	vfma.f32	s14, s11, s12
 8020ea2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8020ea6:	d123      	bne.n	8020ef0 <atanf+0x138>
 8020ea8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8020eac:	e792      	b.n	8020dd4 <atanf+0x1c>
 8020eae:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8020eb2:	ee77 6a67 	vsub.f32	s13, s14, s15
 8020eb6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8020eba:	2301      	movs	r3, #1
 8020ebc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8020ec0:	e7be      	b.n	8020e40 <atanf+0x88>
 8020ec2:	4b25      	ldr	r3, [pc, #148]	; (8020f58 <atanf+0x1a0>)
 8020ec4:	429c      	cmp	r4, r3
 8020ec6:	dc0d      	bgt.n	8020ee4 <atanf+0x12c>
 8020ec8:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8020ecc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8020ed0:	eee7 7a26 	vfma.f32	s15, s14, s13
 8020ed4:	2302      	movs	r3, #2
 8020ed6:	ee37 6a66 	vsub.f32	s12, s14, s13
 8020eda:	eeb0 7a67 	vmov.f32	s14, s15
 8020ede:	eec6 7a07 	vdiv.f32	s15, s12, s14
 8020ee2:	e7ad      	b.n	8020e40 <atanf+0x88>
 8020ee4:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 8020ee8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8020eec:	2303      	movs	r3, #3
 8020eee:	e7a7      	b.n	8020e40 <atanf+0x88>
 8020ef0:	4a1a      	ldr	r2, [pc, #104]	; (8020f5c <atanf+0x1a4>)
 8020ef2:	491b      	ldr	r1, [pc, #108]	; (8020f60 <atanf+0x1a8>)
 8020ef4:	009b      	lsls	r3, r3, #2
 8020ef6:	441a      	add	r2, r3
 8020ef8:	440b      	add	r3, r1
 8020efa:	edd3 6a00 	vldr	s13, [r3]
 8020efe:	ee37 7a66 	vsub.f32	s14, s14, s13
 8020f02:	2d00      	cmp	r5, #0
 8020f04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8020f08:	ed92 7a00 	vldr	s14, [r2]
 8020f0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8020f10:	bfb8      	it	lt
 8020f12:	eef1 7a67 	vneglt.f32	s15, s15
 8020f16:	e75d      	b.n	8020dd4 <atanf+0x1c>
 8020f18:	bfc90fdb 	.word	0xbfc90fdb
 8020f1c:	3fc90fdb 	.word	0x3fc90fdb
 8020f20:	3edfffff 	.word	0x3edfffff
 8020f24:	7149f2ca 	.word	0x7149f2ca
 8020f28:	3f97ffff 	.word	0x3f97ffff
 8020f2c:	3c8569d7 	.word	0x3c8569d7
 8020f30:	3d4bda59 	.word	0x3d4bda59
 8020f34:	bd6ef16b 	.word	0xbd6ef16b
 8020f38:	3d886b35 	.word	0x3d886b35
 8020f3c:	3dba2e6e 	.word	0x3dba2e6e
 8020f40:	3e124925 	.word	0x3e124925
 8020f44:	3eaaaaab 	.word	0x3eaaaaab
 8020f48:	bd15a221 	.word	0xbd15a221
 8020f4c:	bd9d8795 	.word	0xbd9d8795
 8020f50:	bde38e38 	.word	0xbde38e38
 8020f54:	be4ccccd 	.word	0xbe4ccccd
 8020f58:	401bffff 	.word	0x401bffff
 8020f5c:	08022f70 	.word	0x08022f70
 8020f60:	08022f80 	.word	0x08022f80

08020f64 <cosf>:
 8020f64:	b507      	push	{r0, r1, r2, lr}
 8020f66:	4a1a      	ldr	r2, [pc, #104]	; (8020fd0 <cosf+0x6c>)
 8020f68:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8020f6c:	4293      	cmp	r3, r2
 8020f6e:	ee07 0a90 	vmov	s15, r0
 8020f72:	dc03      	bgt.n	8020f7c <cosf+0x18>
 8020f74:	2100      	movs	r1, #0
 8020f76:	f000 ff7b 	bl	8021e70 <__kernel_cosf>
 8020f7a:	e006      	b.n	8020f8a <cosf+0x26>
 8020f7c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8020f80:	db06      	blt.n	8020f90 <cosf+0x2c>
 8020f82:	ee77 7ae7 	vsub.f32	s15, s15, s15
 8020f86:	ee17 0a90 	vmov	r0, s15
 8020f8a:	b003      	add	sp, #12
 8020f8c:	f85d fb04 	ldr.w	pc, [sp], #4
 8020f90:	4669      	mov	r1, sp
 8020f92:	f000 fe3b 	bl	8021c0c <__ieee754_rem_pio2f>
 8020f96:	f000 0203 	and.w	r2, r0, #3
 8020f9a:	2a01      	cmp	r2, #1
 8020f9c:	d005      	beq.n	8020faa <cosf+0x46>
 8020f9e:	2a02      	cmp	r2, #2
 8020fa0:	d00a      	beq.n	8020fb8 <cosf+0x54>
 8020fa2:	b972      	cbnz	r2, 8020fc2 <cosf+0x5e>
 8020fa4:	9901      	ldr	r1, [sp, #4]
 8020fa6:	9800      	ldr	r0, [sp, #0]
 8020fa8:	e7e5      	b.n	8020f76 <cosf+0x12>
 8020faa:	9901      	ldr	r1, [sp, #4]
 8020fac:	9800      	ldr	r0, [sp, #0]
 8020fae:	f001 fa41 	bl	8022434 <__kernel_sinf>
 8020fb2:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8020fb6:	e7e8      	b.n	8020f8a <cosf+0x26>
 8020fb8:	9901      	ldr	r1, [sp, #4]
 8020fba:	9800      	ldr	r0, [sp, #0]
 8020fbc:	f000 ff58 	bl	8021e70 <__kernel_cosf>
 8020fc0:	e7f7      	b.n	8020fb2 <cosf+0x4e>
 8020fc2:	2201      	movs	r2, #1
 8020fc4:	9901      	ldr	r1, [sp, #4]
 8020fc6:	9800      	ldr	r0, [sp, #0]
 8020fc8:	f001 fa34 	bl	8022434 <__kernel_sinf>
 8020fcc:	e7dd      	b.n	8020f8a <cosf+0x26>
 8020fce:	bf00      	nop
 8020fd0:	3f490fd8 	.word	0x3f490fd8

08020fd4 <fabsf>:
 8020fd4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8020fd8:	4770      	bx	lr
	...

08020fdc <roundf>:
 8020fdc:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8020fe0:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 8020fe4:	2a16      	cmp	r2, #22
 8020fe6:	ee07 0a90 	vmov	s15, r0
 8020fea:	dc15      	bgt.n	8021018 <roundf+0x3c>
 8020fec:	2a00      	cmp	r2, #0
 8020fee:	da08      	bge.n	8021002 <roundf+0x26>
 8020ff0:	3201      	adds	r2, #1
 8020ff2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8020ff6:	d101      	bne.n	8020ffc <roundf+0x20>
 8020ff8:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8020ffc:	ee07 3a90 	vmov	s15, r3
 8021000:	e00e      	b.n	8021020 <roundf+0x44>
 8021002:	4909      	ldr	r1, [pc, #36]	; (8021028 <roundf+0x4c>)
 8021004:	4111      	asrs	r1, r2
 8021006:	4208      	tst	r0, r1
 8021008:	d00a      	beq.n	8021020 <roundf+0x44>
 802100a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 802100e:	4113      	asrs	r3, r2
 8021010:	4403      	add	r3, r0
 8021012:	ea23 0301 	bic.w	r3, r3, r1
 8021016:	e7f1      	b.n	8020ffc <roundf+0x20>
 8021018:	2a80      	cmp	r2, #128	; 0x80
 802101a:	d101      	bne.n	8021020 <roundf+0x44>
 802101c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8021020:	ee17 0a90 	vmov	r0, s15
 8021024:	4770      	bx	lr
 8021026:	bf00      	nop
 8021028:	007fffff 	.word	0x007fffff

0802102c <sinf>:
 802102c:	b507      	push	{r0, r1, r2, lr}
 802102e:	4a1b      	ldr	r2, [pc, #108]	; (802109c <sinf+0x70>)
 8021030:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8021034:	4293      	cmp	r3, r2
 8021036:	ee07 0a90 	vmov	s15, r0
 802103a:	dc04      	bgt.n	8021046 <sinf+0x1a>
 802103c:	2200      	movs	r2, #0
 802103e:	2100      	movs	r1, #0
 8021040:	f001 f9f8 	bl	8022434 <__kernel_sinf>
 8021044:	e006      	b.n	8021054 <sinf+0x28>
 8021046:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 802104a:	db06      	blt.n	802105a <sinf+0x2e>
 802104c:	ee77 7ae7 	vsub.f32	s15, s15, s15
 8021050:	ee17 0a90 	vmov	r0, s15
 8021054:	b003      	add	sp, #12
 8021056:	f85d fb04 	ldr.w	pc, [sp], #4
 802105a:	4669      	mov	r1, sp
 802105c:	f000 fdd6 	bl	8021c0c <__ieee754_rem_pio2f>
 8021060:	f000 0003 	and.w	r0, r0, #3
 8021064:	2801      	cmp	r0, #1
 8021066:	d006      	beq.n	8021076 <sinf+0x4a>
 8021068:	2802      	cmp	r0, #2
 802106a:	d009      	beq.n	8021080 <sinf+0x54>
 802106c:	b980      	cbnz	r0, 8021090 <sinf+0x64>
 802106e:	2201      	movs	r2, #1
 8021070:	9901      	ldr	r1, [sp, #4]
 8021072:	9800      	ldr	r0, [sp, #0]
 8021074:	e7e4      	b.n	8021040 <sinf+0x14>
 8021076:	9901      	ldr	r1, [sp, #4]
 8021078:	9800      	ldr	r0, [sp, #0]
 802107a:	f000 fef9 	bl	8021e70 <__kernel_cosf>
 802107e:	e7e9      	b.n	8021054 <sinf+0x28>
 8021080:	2201      	movs	r2, #1
 8021082:	9901      	ldr	r1, [sp, #4]
 8021084:	9800      	ldr	r0, [sp, #0]
 8021086:	f001 f9d5 	bl	8022434 <__kernel_sinf>
 802108a:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 802108e:	e7e1      	b.n	8021054 <sinf+0x28>
 8021090:	9901      	ldr	r1, [sp, #4]
 8021092:	9800      	ldr	r0, [sp, #0]
 8021094:	f000 feec 	bl	8021e70 <__kernel_cosf>
 8021098:	e7f7      	b.n	802108a <sinf+0x5e>
 802109a:	bf00      	nop
 802109c:	3f490fd8 	.word	0x3f490fd8

080210a0 <tanf>:
 80210a0:	b507      	push	{r0, r1, r2, lr}
 80210a2:	4a11      	ldr	r2, [pc, #68]	; (80210e8 <tanf+0x48>)
 80210a4:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80210a8:	4293      	cmp	r3, r2
 80210aa:	ee07 0a90 	vmov	s15, r0
 80210ae:	dc06      	bgt.n	80210be <tanf+0x1e>
 80210b0:	2201      	movs	r2, #1
 80210b2:	2100      	movs	r1, #0
 80210b4:	f001 fa0a 	bl	80224cc <__kernel_tanf>
 80210b8:	ee07 0a90 	vmov	s15, r0
 80210bc:	e004      	b.n	80210c8 <tanf+0x28>
 80210be:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80210c2:	db06      	blt.n	80210d2 <tanf+0x32>
 80210c4:	ee77 7ae7 	vsub.f32	s15, s15, s15
 80210c8:	ee17 0a90 	vmov	r0, s15
 80210cc:	b003      	add	sp, #12
 80210ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80210d2:	4669      	mov	r1, sp
 80210d4:	f000 fd9a 	bl	8021c0c <__ieee754_rem_pio2f>
 80210d8:	0042      	lsls	r2, r0, #1
 80210da:	f002 0202 	and.w	r2, r2, #2
 80210de:	f1c2 0201 	rsb	r2, r2, #1
 80210e2:	9901      	ldr	r1, [sp, #4]
 80210e4:	9800      	ldr	r0, [sp, #0]
 80210e6:	e7e5      	b.n	80210b4 <tanf+0x14>
 80210e8:	3f490fda 	.word	0x3f490fda

080210ec <asin>:
 80210ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80210f0:	f8df 809c 	ldr.w	r8, [pc, #156]	; 8021190 <asin+0xa4>
 80210f4:	b08b      	sub	sp, #44	; 0x2c
 80210f6:	4604      	mov	r4, r0
 80210f8:	460d      	mov	r5, r1
 80210fa:	f000 f8f9 	bl	80212f0 <__ieee754_asin>
 80210fe:	f998 3000 	ldrsb.w	r3, [r8]
 8021102:	3301      	adds	r3, #1
 8021104:	4606      	mov	r6, r0
 8021106:	460f      	mov	r7, r1
 8021108:	d036      	beq.n	8021178 <asin+0x8c>
 802110a:	4622      	mov	r2, r4
 802110c:	462b      	mov	r3, r5
 802110e:	4620      	mov	r0, r4
 8021110:	4629      	mov	r1, r5
 8021112:	f7df fc8b 	bl	8000a2c <__aeabi_dcmpun>
 8021116:	4681      	mov	r9, r0
 8021118:	2800      	cmp	r0, #0
 802111a:	d12d      	bne.n	8021178 <asin+0x8c>
 802111c:	4620      	mov	r0, r4
 802111e:	4629      	mov	r1, r5
 8021120:	f7ff fd92 	bl	8020c48 <fabs>
 8021124:	2200      	movs	r2, #0
 8021126:	4b17      	ldr	r3, [pc, #92]	; (8021184 <asin+0x98>)
 8021128:	f7df fc76 	bl	8000a18 <__aeabi_dcmpgt>
 802112c:	b320      	cbz	r0, 8021178 <asin+0x8c>
 802112e:	2301      	movs	r3, #1
 8021130:	9300      	str	r3, [sp, #0]
 8021132:	4815      	ldr	r0, [pc, #84]	; (8021188 <asin+0x9c>)
 8021134:	4b15      	ldr	r3, [pc, #84]	; (802118c <asin+0xa0>)
 8021136:	9301      	str	r3, [sp, #4]
 8021138:	f8cd 9020 	str.w	r9, [sp, #32]
 802113c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8021140:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8021144:	f001 faaa 	bl	802269c <nan>
 8021148:	f998 3000 	ldrsb.w	r3, [r8]
 802114c:	2b02      	cmp	r3, #2
 802114e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8021152:	d104      	bne.n	802115e <asin+0x72>
 8021154:	f001 fb52 	bl	80227fc <__errno>
 8021158:	2321      	movs	r3, #33	; 0x21
 802115a:	6003      	str	r3, [r0, #0]
 802115c:	e004      	b.n	8021168 <asin+0x7c>
 802115e:	4668      	mov	r0, sp
 8021160:	f001 fa9a 	bl	8022698 <matherr>
 8021164:	2800      	cmp	r0, #0
 8021166:	d0f5      	beq.n	8021154 <asin+0x68>
 8021168:	9b08      	ldr	r3, [sp, #32]
 802116a:	b11b      	cbz	r3, 8021174 <asin+0x88>
 802116c:	f001 fb46 	bl	80227fc <__errno>
 8021170:	9b08      	ldr	r3, [sp, #32]
 8021172:	6003      	str	r3, [r0, #0]
 8021174:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 8021178:	4630      	mov	r0, r6
 802117a:	4639      	mov	r1, r7
 802117c:	b00b      	add	sp, #44	; 0x2c
 802117e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021182:	bf00      	nop
 8021184:	3ff00000 	.word	0x3ff00000
 8021188:	08022f9f 	.word	0x08022f9f
 802118c:	08022f90 	.word	0x08022f90
 8021190:	20001518 	.word	0x20001518

08021194 <atan2>:
 8021194:	f000 baa8 	b.w	80216e8 <__ieee754_atan2>

08021198 <sqrt>:
 8021198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802119c:	b08b      	sub	sp, #44	; 0x2c
 802119e:	4604      	mov	r4, r0
 80211a0:	460d      	mov	r5, r1
 80211a2:	f000 fb87 	bl	80218b4 <__ieee754_sqrt>
 80211a6:	4b24      	ldr	r3, [pc, #144]	; (8021238 <sqrt+0xa0>)
 80211a8:	f993 a000 	ldrsb.w	sl, [r3]
 80211ac:	f1ba 3fff 	cmp.w	sl, #4294967295
 80211b0:	4680      	mov	r8, r0
 80211b2:	4689      	mov	r9, r1
 80211b4:	d02b      	beq.n	802120e <sqrt+0x76>
 80211b6:	4622      	mov	r2, r4
 80211b8:	462b      	mov	r3, r5
 80211ba:	4620      	mov	r0, r4
 80211bc:	4629      	mov	r1, r5
 80211be:	f7df fc35 	bl	8000a2c <__aeabi_dcmpun>
 80211c2:	4683      	mov	fp, r0
 80211c4:	bb18      	cbnz	r0, 802120e <sqrt+0x76>
 80211c6:	2600      	movs	r6, #0
 80211c8:	2700      	movs	r7, #0
 80211ca:	4632      	mov	r2, r6
 80211cc:	463b      	mov	r3, r7
 80211ce:	4620      	mov	r0, r4
 80211d0:	4629      	mov	r1, r5
 80211d2:	f7df fc03 	bl	80009dc <__aeabi_dcmplt>
 80211d6:	b1d0      	cbz	r0, 802120e <sqrt+0x76>
 80211d8:	2301      	movs	r3, #1
 80211da:	9300      	str	r3, [sp, #0]
 80211dc:	4b17      	ldr	r3, [pc, #92]	; (802123c <sqrt+0xa4>)
 80211de:	9301      	str	r3, [sp, #4]
 80211e0:	f8cd b020 	str.w	fp, [sp, #32]
 80211e4:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80211e8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80211ec:	f1ba 0f00 	cmp.w	sl, #0
 80211f0:	d112      	bne.n	8021218 <sqrt+0x80>
 80211f2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80211f6:	4668      	mov	r0, sp
 80211f8:	f001 fa4e 	bl	8022698 <matherr>
 80211fc:	b1b8      	cbz	r0, 802122e <sqrt+0x96>
 80211fe:	9b08      	ldr	r3, [sp, #32]
 8021200:	b11b      	cbz	r3, 802120a <sqrt+0x72>
 8021202:	f001 fafb 	bl	80227fc <__errno>
 8021206:	9b08      	ldr	r3, [sp, #32]
 8021208:	6003      	str	r3, [r0, #0]
 802120a:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 802120e:	4640      	mov	r0, r8
 8021210:	4649      	mov	r1, r9
 8021212:	b00b      	add	sp, #44	; 0x2c
 8021214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021218:	4632      	mov	r2, r6
 802121a:	463b      	mov	r3, r7
 802121c:	4630      	mov	r0, r6
 802121e:	4639      	mov	r1, r7
 8021220:	f7df fa94 	bl	800074c <__aeabi_ddiv>
 8021224:	f1ba 0f02 	cmp.w	sl, #2
 8021228:	e9cd 0106 	strd	r0, r1, [sp, #24]
 802122c:	d1e3      	bne.n	80211f6 <sqrt+0x5e>
 802122e:	f001 fae5 	bl	80227fc <__errno>
 8021232:	2321      	movs	r3, #33	; 0x21
 8021234:	6003      	str	r3, [r0, #0]
 8021236:	e7e2      	b.n	80211fe <sqrt+0x66>
 8021238:	20001518 	.word	0x20001518
 802123c:	08022f95 	.word	0x08022f95

08021240 <acosf>:
 8021240:	b530      	push	{r4, r5, lr}
 8021242:	ed2d 8b02 	vpush	{d8}
 8021246:	4d27      	ldr	r5, [pc, #156]	; (80212e4 <acosf+0xa4>)
 8021248:	b08b      	sub	sp, #44	; 0x2c
 802124a:	ee08 0a10 	vmov	s16, r0
 802124e:	f000 fbdd 	bl	8021a0c <__ieee754_acosf>
 8021252:	f995 3000 	ldrsb.w	r3, [r5]
 8021256:	3301      	adds	r3, #1
 8021258:	4604      	mov	r4, r0
 802125a:	d03d      	beq.n	80212d8 <acosf+0x98>
 802125c:	eeb4 8a48 	vcmp.f32	s16, s16
 8021260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021264:	d638      	bvs.n	80212d8 <acosf+0x98>
 8021266:	ee18 0a10 	vmov	r0, s16
 802126a:	f7ff feb3 	bl	8020fd4 <fabsf>
 802126e:	ee07 0a10 	vmov	s14, r0
 8021272:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8021276:	eeb4 7ae7 	vcmpe.f32	s14, s15
 802127a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802127e:	dd2b      	ble.n	80212d8 <acosf+0x98>
 8021280:	2301      	movs	r3, #1
 8021282:	9300      	str	r3, [sp, #0]
 8021284:	4b18      	ldr	r3, [pc, #96]	; (80212e8 <acosf+0xa8>)
 8021286:	9301      	str	r3, [sp, #4]
 8021288:	ee18 0a10 	vmov	r0, s16
 802128c:	2300      	movs	r3, #0
 802128e:	9308      	str	r3, [sp, #32]
 8021290:	f7df f8da 	bl	8000448 <__aeabi_f2d>
 8021294:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8021298:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802129c:	4813      	ldr	r0, [pc, #76]	; (80212ec <acosf+0xac>)
 802129e:	f001 f9fd 	bl	802269c <nan>
 80212a2:	f995 3000 	ldrsb.w	r3, [r5]
 80212a6:	2b02      	cmp	r3, #2
 80212a8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80212ac:	d104      	bne.n	80212b8 <acosf+0x78>
 80212ae:	f001 faa5 	bl	80227fc <__errno>
 80212b2:	2321      	movs	r3, #33	; 0x21
 80212b4:	6003      	str	r3, [r0, #0]
 80212b6:	e004      	b.n	80212c2 <acosf+0x82>
 80212b8:	4668      	mov	r0, sp
 80212ba:	f001 f9ed 	bl	8022698 <matherr>
 80212be:	2800      	cmp	r0, #0
 80212c0:	d0f5      	beq.n	80212ae <acosf+0x6e>
 80212c2:	9b08      	ldr	r3, [sp, #32]
 80212c4:	b11b      	cbz	r3, 80212ce <acosf+0x8e>
 80212c6:	f001 fa99 	bl	80227fc <__errno>
 80212ca:	9b08      	ldr	r3, [sp, #32]
 80212cc:	6003      	str	r3, [r0, #0]
 80212ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80212d2:	f7df fc09 	bl	8000ae8 <__aeabi_d2f>
 80212d6:	4604      	mov	r4, r0
 80212d8:	4620      	mov	r0, r4
 80212da:	b00b      	add	sp, #44	; 0x2c
 80212dc:	ecbd 8b02 	vpop	{d8}
 80212e0:	bd30      	pop	{r4, r5, pc}
 80212e2:	bf00      	nop
 80212e4:	20001518 	.word	0x20001518
 80212e8:	08022f9a 	.word	0x08022f9a
 80212ec:	08022f9f 	.word	0x08022f9f

080212f0 <__ieee754_asin>:
 80212f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80212f4:	4bc4      	ldr	r3, [pc, #784]	; (8021608 <__ieee754_asin+0x318>)
 80212f6:	b087      	sub	sp, #28
 80212f8:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80212fc:	429f      	cmp	r7, r3
 80212fe:	4604      	mov	r4, r0
 8021300:	460d      	mov	r5, r1
 8021302:	9101      	str	r1, [sp, #4]
 8021304:	dd2a      	ble.n	802135c <__ieee754_asin+0x6c>
 8021306:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 802130a:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 802130e:	4603      	mov	r3, r0
 8021310:	433b      	orrs	r3, r7
 8021312:	d114      	bne.n	802133e <__ieee754_asin+0x4e>
 8021314:	a3a2      	add	r3, pc, #648	; (adr r3, 80215a0 <__ieee754_asin+0x2b0>)
 8021316:	e9d3 2300 	ldrd	r2, r3, [r3]
 802131a:	f7df f8ed 	bl	80004f8 <__aeabi_dmul>
 802131e:	a3a2      	add	r3, pc, #648	; (adr r3, 80215a8 <__ieee754_asin+0x2b8>)
 8021320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021324:	4606      	mov	r6, r0
 8021326:	460f      	mov	r7, r1
 8021328:	4620      	mov	r0, r4
 802132a:	4629      	mov	r1, r5
 802132c:	f7df f8e4 	bl	80004f8 <__aeabi_dmul>
 8021330:	4602      	mov	r2, r0
 8021332:	460b      	mov	r3, r1
 8021334:	4630      	mov	r0, r6
 8021336:	4639      	mov	r1, r7
 8021338:	f7de ff28 	bl	800018c <__adddf3>
 802133c:	e007      	b.n	802134e <__ieee754_asin+0x5e>
 802133e:	4602      	mov	r2, r0
 8021340:	460b      	mov	r3, r1
 8021342:	f7de ff21 	bl	8000188 <__aeabi_dsub>
 8021346:	4602      	mov	r2, r0
 8021348:	460b      	mov	r3, r1
 802134a:	f7df f9ff 	bl	800074c <__aeabi_ddiv>
 802134e:	4604      	mov	r4, r0
 8021350:	460d      	mov	r5, r1
 8021352:	4620      	mov	r0, r4
 8021354:	4629      	mov	r1, r5
 8021356:	b007      	add	sp, #28
 8021358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802135c:	4bab      	ldr	r3, [pc, #684]	; (802160c <__ieee754_asin+0x31c>)
 802135e:	429f      	cmp	r7, r3
 8021360:	dc0e      	bgt.n	8021380 <__ieee754_asin+0x90>
 8021362:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 8021366:	f280 80ab 	bge.w	80214c0 <__ieee754_asin+0x1d0>
 802136a:	a391      	add	r3, pc, #580	; (adr r3, 80215b0 <__ieee754_asin+0x2c0>)
 802136c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021370:	f7de ff0c 	bl	800018c <__adddf3>
 8021374:	2200      	movs	r2, #0
 8021376:	4ba6      	ldr	r3, [pc, #664]	; (8021610 <__ieee754_asin+0x320>)
 8021378:	f7df fb4e 	bl	8000a18 <__aeabi_dcmpgt>
 802137c:	2800      	cmp	r0, #0
 802137e:	d1e8      	bne.n	8021352 <__ieee754_asin+0x62>
 8021380:	4620      	mov	r0, r4
 8021382:	4629      	mov	r1, r5
 8021384:	f7ff fc60 	bl	8020c48 <fabs>
 8021388:	4602      	mov	r2, r0
 802138a:	460b      	mov	r3, r1
 802138c:	2000      	movs	r0, #0
 802138e:	49a0      	ldr	r1, [pc, #640]	; (8021610 <__ieee754_asin+0x320>)
 8021390:	f7de fefa 	bl	8000188 <__aeabi_dsub>
 8021394:	2200      	movs	r2, #0
 8021396:	4b9f      	ldr	r3, [pc, #636]	; (8021614 <__ieee754_asin+0x324>)
 8021398:	f7df f8ae 	bl	80004f8 <__aeabi_dmul>
 802139c:	a386      	add	r3, pc, #536	; (adr r3, 80215b8 <__ieee754_asin+0x2c8>)
 802139e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80213a2:	4604      	mov	r4, r0
 80213a4:	460d      	mov	r5, r1
 80213a6:	f7df f8a7 	bl	80004f8 <__aeabi_dmul>
 80213aa:	a385      	add	r3, pc, #532	; (adr r3, 80215c0 <__ieee754_asin+0x2d0>)
 80213ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80213b0:	f7de feec 	bl	800018c <__adddf3>
 80213b4:	4622      	mov	r2, r4
 80213b6:	462b      	mov	r3, r5
 80213b8:	f7df f89e 	bl	80004f8 <__aeabi_dmul>
 80213bc:	a382      	add	r3, pc, #520	; (adr r3, 80215c8 <__ieee754_asin+0x2d8>)
 80213be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80213c2:	f7de fee1 	bl	8000188 <__aeabi_dsub>
 80213c6:	4622      	mov	r2, r4
 80213c8:	462b      	mov	r3, r5
 80213ca:	f7df f895 	bl	80004f8 <__aeabi_dmul>
 80213ce:	a380      	add	r3, pc, #512	; (adr r3, 80215d0 <__ieee754_asin+0x2e0>)
 80213d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80213d4:	f7de feda 	bl	800018c <__adddf3>
 80213d8:	4622      	mov	r2, r4
 80213da:	462b      	mov	r3, r5
 80213dc:	f7df f88c 	bl	80004f8 <__aeabi_dmul>
 80213e0:	a37d      	add	r3, pc, #500	; (adr r3, 80215d8 <__ieee754_asin+0x2e8>)
 80213e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80213e6:	f7de fecf 	bl	8000188 <__aeabi_dsub>
 80213ea:	4622      	mov	r2, r4
 80213ec:	462b      	mov	r3, r5
 80213ee:	f7df f883 	bl	80004f8 <__aeabi_dmul>
 80213f2:	a37b      	add	r3, pc, #492	; (adr r3, 80215e0 <__ieee754_asin+0x2f0>)
 80213f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80213f8:	f7de fec8 	bl	800018c <__adddf3>
 80213fc:	4622      	mov	r2, r4
 80213fe:	462b      	mov	r3, r5
 8021400:	f7df f87a 	bl	80004f8 <__aeabi_dmul>
 8021404:	a378      	add	r3, pc, #480	; (adr r3, 80215e8 <__ieee754_asin+0x2f8>)
 8021406:	e9d3 2300 	ldrd	r2, r3, [r3]
 802140a:	4680      	mov	r8, r0
 802140c:	4689      	mov	r9, r1
 802140e:	4620      	mov	r0, r4
 8021410:	4629      	mov	r1, r5
 8021412:	f7df f871 	bl	80004f8 <__aeabi_dmul>
 8021416:	a376      	add	r3, pc, #472	; (adr r3, 80215f0 <__ieee754_asin+0x300>)
 8021418:	e9d3 2300 	ldrd	r2, r3, [r3]
 802141c:	f7de feb4 	bl	8000188 <__aeabi_dsub>
 8021420:	4622      	mov	r2, r4
 8021422:	462b      	mov	r3, r5
 8021424:	f7df f868 	bl	80004f8 <__aeabi_dmul>
 8021428:	a373      	add	r3, pc, #460	; (adr r3, 80215f8 <__ieee754_asin+0x308>)
 802142a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802142e:	f7de fead 	bl	800018c <__adddf3>
 8021432:	4622      	mov	r2, r4
 8021434:	462b      	mov	r3, r5
 8021436:	f7df f85f 	bl	80004f8 <__aeabi_dmul>
 802143a:	a371      	add	r3, pc, #452	; (adr r3, 8021600 <__ieee754_asin+0x310>)
 802143c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021440:	f7de fea2 	bl	8000188 <__aeabi_dsub>
 8021444:	4622      	mov	r2, r4
 8021446:	462b      	mov	r3, r5
 8021448:	f7df f856 	bl	80004f8 <__aeabi_dmul>
 802144c:	4b70      	ldr	r3, [pc, #448]	; (8021610 <__ieee754_asin+0x320>)
 802144e:	2200      	movs	r2, #0
 8021450:	f7de fe9c 	bl	800018c <__adddf3>
 8021454:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8021458:	4620      	mov	r0, r4
 802145a:	4629      	mov	r1, r5
 802145c:	f000 fa2a 	bl	80218b4 <__ieee754_sqrt>
 8021460:	4b6d      	ldr	r3, [pc, #436]	; (8021618 <__ieee754_asin+0x328>)
 8021462:	429f      	cmp	r7, r3
 8021464:	4682      	mov	sl, r0
 8021466:	468b      	mov	fp, r1
 8021468:	f340 80d8 	ble.w	802161c <__ieee754_asin+0x32c>
 802146c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8021470:	4640      	mov	r0, r8
 8021472:	4649      	mov	r1, r9
 8021474:	f7df f96a 	bl	800074c <__aeabi_ddiv>
 8021478:	4652      	mov	r2, sl
 802147a:	465b      	mov	r3, fp
 802147c:	f7df f83c 	bl	80004f8 <__aeabi_dmul>
 8021480:	4652      	mov	r2, sl
 8021482:	465b      	mov	r3, fp
 8021484:	f7de fe82 	bl	800018c <__adddf3>
 8021488:	4602      	mov	r2, r0
 802148a:	460b      	mov	r3, r1
 802148c:	f7de fe7e 	bl	800018c <__adddf3>
 8021490:	a345      	add	r3, pc, #276	; (adr r3, 80215a8 <__ieee754_asin+0x2b8>)
 8021492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021496:	f7de fe77 	bl	8000188 <__aeabi_dsub>
 802149a:	4602      	mov	r2, r0
 802149c:	460b      	mov	r3, r1
 802149e:	a140      	add	r1, pc, #256	; (adr r1, 80215a0 <__ieee754_asin+0x2b0>)
 80214a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80214a4:	f7de fe70 	bl	8000188 <__aeabi_dsub>
 80214a8:	9b01      	ldr	r3, [sp, #4]
 80214aa:	2b00      	cmp	r3, #0
 80214ac:	bfdc      	itt	le
 80214ae:	4602      	movle	r2, r0
 80214b0:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 80214b4:	4604      	mov	r4, r0
 80214b6:	460d      	mov	r5, r1
 80214b8:	bfdc      	itt	le
 80214ba:	4614      	movle	r4, r2
 80214bc:	461d      	movle	r5, r3
 80214be:	e748      	b.n	8021352 <__ieee754_asin+0x62>
 80214c0:	4602      	mov	r2, r0
 80214c2:	460b      	mov	r3, r1
 80214c4:	f7df f818 	bl	80004f8 <__aeabi_dmul>
 80214c8:	a33b      	add	r3, pc, #236	; (adr r3, 80215b8 <__ieee754_asin+0x2c8>)
 80214ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80214ce:	4606      	mov	r6, r0
 80214d0:	460f      	mov	r7, r1
 80214d2:	f7df f811 	bl	80004f8 <__aeabi_dmul>
 80214d6:	a33a      	add	r3, pc, #232	; (adr r3, 80215c0 <__ieee754_asin+0x2d0>)
 80214d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80214dc:	f7de fe56 	bl	800018c <__adddf3>
 80214e0:	4632      	mov	r2, r6
 80214e2:	463b      	mov	r3, r7
 80214e4:	f7df f808 	bl	80004f8 <__aeabi_dmul>
 80214e8:	a337      	add	r3, pc, #220	; (adr r3, 80215c8 <__ieee754_asin+0x2d8>)
 80214ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80214ee:	f7de fe4b 	bl	8000188 <__aeabi_dsub>
 80214f2:	4632      	mov	r2, r6
 80214f4:	463b      	mov	r3, r7
 80214f6:	f7de ffff 	bl	80004f8 <__aeabi_dmul>
 80214fa:	a335      	add	r3, pc, #212	; (adr r3, 80215d0 <__ieee754_asin+0x2e0>)
 80214fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021500:	f7de fe44 	bl	800018c <__adddf3>
 8021504:	4632      	mov	r2, r6
 8021506:	463b      	mov	r3, r7
 8021508:	f7de fff6 	bl	80004f8 <__aeabi_dmul>
 802150c:	a332      	add	r3, pc, #200	; (adr r3, 80215d8 <__ieee754_asin+0x2e8>)
 802150e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021512:	f7de fe39 	bl	8000188 <__aeabi_dsub>
 8021516:	4632      	mov	r2, r6
 8021518:	463b      	mov	r3, r7
 802151a:	f7de ffed 	bl	80004f8 <__aeabi_dmul>
 802151e:	a330      	add	r3, pc, #192	; (adr r3, 80215e0 <__ieee754_asin+0x2f0>)
 8021520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021524:	f7de fe32 	bl	800018c <__adddf3>
 8021528:	4632      	mov	r2, r6
 802152a:	463b      	mov	r3, r7
 802152c:	f7de ffe4 	bl	80004f8 <__aeabi_dmul>
 8021530:	a32d      	add	r3, pc, #180	; (adr r3, 80215e8 <__ieee754_asin+0x2f8>)
 8021532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021536:	4680      	mov	r8, r0
 8021538:	4689      	mov	r9, r1
 802153a:	4630      	mov	r0, r6
 802153c:	4639      	mov	r1, r7
 802153e:	f7de ffdb 	bl	80004f8 <__aeabi_dmul>
 8021542:	a32b      	add	r3, pc, #172	; (adr r3, 80215f0 <__ieee754_asin+0x300>)
 8021544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021548:	f7de fe1e 	bl	8000188 <__aeabi_dsub>
 802154c:	4632      	mov	r2, r6
 802154e:	463b      	mov	r3, r7
 8021550:	f7de ffd2 	bl	80004f8 <__aeabi_dmul>
 8021554:	a328      	add	r3, pc, #160	; (adr r3, 80215f8 <__ieee754_asin+0x308>)
 8021556:	e9d3 2300 	ldrd	r2, r3, [r3]
 802155a:	f7de fe17 	bl	800018c <__adddf3>
 802155e:	4632      	mov	r2, r6
 8021560:	463b      	mov	r3, r7
 8021562:	f7de ffc9 	bl	80004f8 <__aeabi_dmul>
 8021566:	a326      	add	r3, pc, #152	; (adr r3, 8021600 <__ieee754_asin+0x310>)
 8021568:	e9d3 2300 	ldrd	r2, r3, [r3]
 802156c:	f7de fe0c 	bl	8000188 <__aeabi_dsub>
 8021570:	4632      	mov	r2, r6
 8021572:	463b      	mov	r3, r7
 8021574:	f7de ffc0 	bl	80004f8 <__aeabi_dmul>
 8021578:	2200      	movs	r2, #0
 802157a:	4b25      	ldr	r3, [pc, #148]	; (8021610 <__ieee754_asin+0x320>)
 802157c:	f7de fe06 	bl	800018c <__adddf3>
 8021580:	4602      	mov	r2, r0
 8021582:	460b      	mov	r3, r1
 8021584:	4640      	mov	r0, r8
 8021586:	4649      	mov	r1, r9
 8021588:	f7df f8e0 	bl	800074c <__aeabi_ddiv>
 802158c:	4622      	mov	r2, r4
 802158e:	462b      	mov	r3, r5
 8021590:	f7de ffb2 	bl	80004f8 <__aeabi_dmul>
 8021594:	4602      	mov	r2, r0
 8021596:	460b      	mov	r3, r1
 8021598:	4620      	mov	r0, r4
 802159a:	4629      	mov	r1, r5
 802159c:	e6cc      	b.n	8021338 <__ieee754_asin+0x48>
 802159e:	bf00      	nop
 80215a0:	54442d18 	.word	0x54442d18
 80215a4:	3ff921fb 	.word	0x3ff921fb
 80215a8:	33145c07 	.word	0x33145c07
 80215ac:	3c91a626 	.word	0x3c91a626
 80215b0:	8800759c 	.word	0x8800759c
 80215b4:	7e37e43c 	.word	0x7e37e43c
 80215b8:	0dfdf709 	.word	0x0dfdf709
 80215bc:	3f023de1 	.word	0x3f023de1
 80215c0:	7501b288 	.word	0x7501b288
 80215c4:	3f49efe0 	.word	0x3f49efe0
 80215c8:	b5688f3b 	.word	0xb5688f3b
 80215cc:	3fa48228 	.word	0x3fa48228
 80215d0:	0e884455 	.word	0x0e884455
 80215d4:	3fc9c155 	.word	0x3fc9c155
 80215d8:	03eb6f7d 	.word	0x03eb6f7d
 80215dc:	3fd4d612 	.word	0x3fd4d612
 80215e0:	55555555 	.word	0x55555555
 80215e4:	3fc55555 	.word	0x3fc55555
 80215e8:	b12e9282 	.word	0xb12e9282
 80215ec:	3fb3b8c5 	.word	0x3fb3b8c5
 80215f0:	1b8d0159 	.word	0x1b8d0159
 80215f4:	3fe6066c 	.word	0x3fe6066c
 80215f8:	9c598ac8 	.word	0x9c598ac8
 80215fc:	40002ae5 	.word	0x40002ae5
 8021600:	1c8a2d4b 	.word	0x1c8a2d4b
 8021604:	40033a27 	.word	0x40033a27
 8021608:	3fefffff 	.word	0x3fefffff
 802160c:	3fdfffff 	.word	0x3fdfffff
 8021610:	3ff00000 	.word	0x3ff00000
 8021614:	3fe00000 	.word	0x3fe00000
 8021618:	3fef3332 	.word	0x3fef3332
 802161c:	4602      	mov	r2, r0
 802161e:	460b      	mov	r3, r1
 8021620:	460f      	mov	r7, r1
 8021622:	f7de fdb3 	bl	800018c <__adddf3>
 8021626:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802162a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802162e:	4640      	mov	r0, r8
 8021630:	4649      	mov	r1, r9
 8021632:	f7df f88b 	bl	800074c <__aeabi_ddiv>
 8021636:	4602      	mov	r2, r0
 8021638:	460b      	mov	r3, r1
 802163a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802163e:	f7de ff5b 	bl	80004f8 <__aeabi_dmul>
 8021642:	2600      	movs	r6, #0
 8021644:	4680      	mov	r8, r0
 8021646:	4689      	mov	r9, r1
 8021648:	4632      	mov	r2, r6
 802164a:	465b      	mov	r3, fp
 802164c:	4630      	mov	r0, r6
 802164e:	4659      	mov	r1, fp
 8021650:	f7de ff52 	bl	80004f8 <__aeabi_dmul>
 8021654:	4602      	mov	r2, r0
 8021656:	460b      	mov	r3, r1
 8021658:	4620      	mov	r0, r4
 802165a:	4629      	mov	r1, r5
 802165c:	f7de fd94 	bl	8000188 <__aeabi_dsub>
 8021660:	4632      	mov	r2, r6
 8021662:	4604      	mov	r4, r0
 8021664:	460d      	mov	r5, r1
 8021666:	465b      	mov	r3, fp
 8021668:	4650      	mov	r0, sl
 802166a:	4659      	mov	r1, fp
 802166c:	f7de fd8e 	bl	800018c <__adddf3>
 8021670:	4602      	mov	r2, r0
 8021672:	460b      	mov	r3, r1
 8021674:	4620      	mov	r0, r4
 8021676:	4629      	mov	r1, r5
 8021678:	f7df f868 	bl	800074c <__aeabi_ddiv>
 802167c:	4602      	mov	r2, r0
 802167e:	460b      	mov	r3, r1
 8021680:	f7de fd84 	bl	800018c <__adddf3>
 8021684:	4602      	mov	r2, r0
 8021686:	460b      	mov	r3, r1
 8021688:	a113      	add	r1, pc, #76	; (adr r1, 80216d8 <__ieee754_asin+0x3e8>)
 802168a:	e9d1 0100 	ldrd	r0, r1, [r1]
 802168e:	f7de fd7b 	bl	8000188 <__aeabi_dsub>
 8021692:	4602      	mov	r2, r0
 8021694:	460b      	mov	r3, r1
 8021696:	4640      	mov	r0, r8
 8021698:	4649      	mov	r1, r9
 802169a:	f7de fd75 	bl	8000188 <__aeabi_dsub>
 802169e:	4632      	mov	r2, r6
 80216a0:	4604      	mov	r4, r0
 80216a2:	460d      	mov	r5, r1
 80216a4:	465b      	mov	r3, fp
 80216a6:	4630      	mov	r0, r6
 80216a8:	4639      	mov	r1, r7
 80216aa:	f7de fd6f 	bl	800018c <__adddf3>
 80216ae:	4602      	mov	r2, r0
 80216b0:	460b      	mov	r3, r1
 80216b2:	a10b      	add	r1, pc, #44	; (adr r1, 80216e0 <__ieee754_asin+0x3f0>)
 80216b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80216b8:	f7de fd66 	bl	8000188 <__aeabi_dsub>
 80216bc:	4602      	mov	r2, r0
 80216be:	460b      	mov	r3, r1
 80216c0:	4620      	mov	r0, r4
 80216c2:	4629      	mov	r1, r5
 80216c4:	f7de fd60 	bl	8000188 <__aeabi_dsub>
 80216c8:	4602      	mov	r2, r0
 80216ca:	460b      	mov	r3, r1
 80216cc:	a104      	add	r1, pc, #16	; (adr r1, 80216e0 <__ieee754_asin+0x3f0>)
 80216ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80216d2:	e6e7      	b.n	80214a4 <__ieee754_asin+0x1b4>
 80216d4:	f3af 8000 	nop.w
 80216d8:	33145c07 	.word	0x33145c07
 80216dc:	3c91a626 	.word	0x3c91a626
 80216e0:	54442d18 	.word	0x54442d18
 80216e4:	3fe921fb 	.word	0x3fe921fb

080216e8 <__ieee754_atan2>:
 80216e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80216ec:	4690      	mov	r8, r2
 80216ee:	4699      	mov	r9, r3
 80216f0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80216f4:	461f      	mov	r7, r3
 80216f6:	f1c8 0300 	rsb	r3, r8, #0
 80216fa:	ea43 0308 	orr.w	r3, r3, r8
 80216fe:	f8df e1b0 	ldr.w	lr, [pc, #432]	; 80218b0 <__ieee754_atan2+0x1c8>
 8021702:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8021706:	4573      	cmp	r3, lr
 8021708:	4604      	mov	r4, r0
 802170a:	460d      	mov	r5, r1
 802170c:	d808      	bhi.n	8021720 <__ieee754_atan2+0x38>
 802170e:	4246      	negs	r6, r0
 8021710:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8021714:	4306      	orrs	r6, r0
 8021716:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 802171a:	4576      	cmp	r6, lr
 802171c:	468c      	mov	ip, r1
 802171e:	d908      	bls.n	8021732 <__ieee754_atan2+0x4a>
 8021720:	4642      	mov	r2, r8
 8021722:	464b      	mov	r3, r9
 8021724:	4620      	mov	r0, r4
 8021726:	4629      	mov	r1, r5
 8021728:	f7de fd30 	bl	800018c <__adddf3>
 802172c:	4604      	mov	r4, r0
 802172e:	460d      	mov	r5, r1
 8021730:	e031      	b.n	8021796 <__ieee754_atan2+0xae>
 8021732:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 8021736:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 802173a:	ea56 0608 	orrs.w	r6, r6, r8
 802173e:	d103      	bne.n	8021748 <__ieee754_atan2+0x60>
 8021740:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021744:	f7ff b8f0 	b.w	8020928 <atan>
 8021748:	17be      	asrs	r6, r7, #30
 802174a:	f006 0602 	and.w	r6, r6, #2
 802174e:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8021752:	ea53 0100 	orrs.w	r1, r3, r0
 8021756:	d107      	bne.n	8021768 <__ieee754_atan2+0x80>
 8021758:	2e02      	cmp	r6, #2
 802175a:	d07a      	beq.n	8021852 <__ieee754_atan2+0x16a>
 802175c:	2e03      	cmp	r6, #3
 802175e:	d11a      	bne.n	8021796 <__ieee754_atan2+0xae>
 8021760:	a541      	add	r5, pc, #260	; (adr r5, 8021868 <__ieee754_atan2+0x180>)
 8021762:	e9d5 4500 	ldrd	r4, r5, [r5]
 8021766:	e016      	b.n	8021796 <__ieee754_atan2+0xae>
 8021768:	ea52 0108 	orrs.w	r1, r2, r8
 802176c:	d106      	bne.n	802177c <__ieee754_atan2+0x94>
 802176e:	f1bc 0f00 	cmp.w	ip, #0
 8021772:	da72      	bge.n	802185a <__ieee754_atan2+0x172>
 8021774:	a53e      	add	r5, pc, #248	; (adr r5, 8021870 <__ieee754_atan2+0x188>)
 8021776:	e9d5 4500 	ldrd	r4, r5, [r5]
 802177a:	e00c      	b.n	8021796 <__ieee754_atan2+0xae>
 802177c:	4572      	cmp	r2, lr
 802177e:	d123      	bne.n	80217c8 <__ieee754_atan2+0xe0>
 8021780:	4293      	cmp	r3, r2
 8021782:	d114      	bne.n	80217ae <__ieee754_atan2+0xc6>
 8021784:	2e02      	cmp	r6, #2
 8021786:	d00a      	beq.n	802179e <__ieee754_atan2+0xb6>
 8021788:	2e03      	cmp	r6, #3
 802178a:	d00c      	beq.n	80217a6 <__ieee754_atan2+0xbe>
 802178c:	2e01      	cmp	r6, #1
 802178e:	d15c      	bne.n	802184a <__ieee754_atan2+0x162>
 8021790:	a539      	add	r5, pc, #228	; (adr r5, 8021878 <__ieee754_atan2+0x190>)
 8021792:	e9d5 4500 	ldrd	r4, r5, [r5]
 8021796:	4620      	mov	r0, r4
 8021798:	4629      	mov	r1, r5
 802179a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802179e:	a538      	add	r5, pc, #224	; (adr r5, 8021880 <__ieee754_atan2+0x198>)
 80217a0:	e9d5 4500 	ldrd	r4, r5, [r5]
 80217a4:	e7f7      	b.n	8021796 <__ieee754_atan2+0xae>
 80217a6:	a538      	add	r5, pc, #224	; (adr r5, 8021888 <__ieee754_atan2+0x1a0>)
 80217a8:	e9d5 4500 	ldrd	r4, r5, [r5]
 80217ac:	e7f3      	b.n	8021796 <__ieee754_atan2+0xae>
 80217ae:	2e02      	cmp	r6, #2
 80217b0:	d04f      	beq.n	8021852 <__ieee754_atan2+0x16a>
 80217b2:	2e03      	cmp	r6, #3
 80217b4:	d0d4      	beq.n	8021760 <__ieee754_atan2+0x78>
 80217b6:	2e01      	cmp	r6, #1
 80217b8:	f04f 0400 	mov.w	r4, #0
 80217bc:	d102      	bne.n	80217c4 <__ieee754_atan2+0xdc>
 80217be:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 80217c2:	e7e8      	b.n	8021796 <__ieee754_atan2+0xae>
 80217c4:	2500      	movs	r5, #0
 80217c6:	e7e6      	b.n	8021796 <__ieee754_atan2+0xae>
 80217c8:	4573      	cmp	r3, lr
 80217ca:	d0d0      	beq.n	802176e <__ieee754_atan2+0x86>
 80217cc:	1a9b      	subs	r3, r3, r2
 80217ce:	151b      	asrs	r3, r3, #20
 80217d0:	2b3c      	cmp	r3, #60	; 0x3c
 80217d2:	dc20      	bgt.n	8021816 <__ieee754_atan2+0x12e>
 80217d4:	2f00      	cmp	r7, #0
 80217d6:	da01      	bge.n	80217dc <__ieee754_atan2+0xf4>
 80217d8:	333c      	adds	r3, #60	; 0x3c
 80217da:	db20      	blt.n	802181e <__ieee754_atan2+0x136>
 80217dc:	4642      	mov	r2, r8
 80217de:	464b      	mov	r3, r9
 80217e0:	4620      	mov	r0, r4
 80217e2:	4629      	mov	r1, r5
 80217e4:	f7de ffb2 	bl	800074c <__aeabi_ddiv>
 80217e8:	f7ff fa2e 	bl	8020c48 <fabs>
 80217ec:	f7ff f89c 	bl	8020928 <atan>
 80217f0:	4604      	mov	r4, r0
 80217f2:	460d      	mov	r5, r1
 80217f4:	2e01      	cmp	r6, #1
 80217f6:	d015      	beq.n	8021824 <__ieee754_atan2+0x13c>
 80217f8:	2e02      	cmp	r6, #2
 80217fa:	d017      	beq.n	802182c <__ieee754_atan2+0x144>
 80217fc:	2e00      	cmp	r6, #0
 80217fe:	d0ca      	beq.n	8021796 <__ieee754_atan2+0xae>
 8021800:	a323      	add	r3, pc, #140	; (adr r3, 8021890 <__ieee754_atan2+0x1a8>)
 8021802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021806:	4620      	mov	r0, r4
 8021808:	4629      	mov	r1, r5
 802180a:	f7de fcbd 	bl	8000188 <__aeabi_dsub>
 802180e:	a322      	add	r3, pc, #136	; (adr r3, 8021898 <__ieee754_atan2+0x1b0>)
 8021810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021814:	e016      	b.n	8021844 <__ieee754_atan2+0x15c>
 8021816:	a522      	add	r5, pc, #136	; (adr r5, 80218a0 <__ieee754_atan2+0x1b8>)
 8021818:	e9d5 4500 	ldrd	r4, r5, [r5]
 802181c:	e7ea      	b.n	80217f4 <__ieee754_atan2+0x10c>
 802181e:	2400      	movs	r4, #0
 8021820:	2500      	movs	r5, #0
 8021822:	e7e7      	b.n	80217f4 <__ieee754_atan2+0x10c>
 8021824:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8021828:	461d      	mov	r5, r3
 802182a:	e7b4      	b.n	8021796 <__ieee754_atan2+0xae>
 802182c:	a318      	add	r3, pc, #96	; (adr r3, 8021890 <__ieee754_atan2+0x1a8>)
 802182e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021832:	4620      	mov	r0, r4
 8021834:	4629      	mov	r1, r5
 8021836:	f7de fca7 	bl	8000188 <__aeabi_dsub>
 802183a:	4602      	mov	r2, r0
 802183c:	460b      	mov	r3, r1
 802183e:	a116      	add	r1, pc, #88	; (adr r1, 8021898 <__ieee754_atan2+0x1b0>)
 8021840:	e9d1 0100 	ldrd	r0, r1, [r1]
 8021844:	f7de fca0 	bl	8000188 <__aeabi_dsub>
 8021848:	e770      	b.n	802172c <__ieee754_atan2+0x44>
 802184a:	a517      	add	r5, pc, #92	; (adr r5, 80218a8 <__ieee754_atan2+0x1c0>)
 802184c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8021850:	e7a1      	b.n	8021796 <__ieee754_atan2+0xae>
 8021852:	a511      	add	r5, pc, #68	; (adr r5, 8021898 <__ieee754_atan2+0x1b0>)
 8021854:	e9d5 4500 	ldrd	r4, r5, [r5]
 8021858:	e79d      	b.n	8021796 <__ieee754_atan2+0xae>
 802185a:	a511      	add	r5, pc, #68	; (adr r5, 80218a0 <__ieee754_atan2+0x1b8>)
 802185c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8021860:	e799      	b.n	8021796 <__ieee754_atan2+0xae>
 8021862:	bf00      	nop
 8021864:	f3af 8000 	nop.w
 8021868:	54442d18 	.word	0x54442d18
 802186c:	c00921fb 	.word	0xc00921fb
 8021870:	54442d18 	.word	0x54442d18
 8021874:	bff921fb 	.word	0xbff921fb
 8021878:	54442d18 	.word	0x54442d18
 802187c:	bfe921fb 	.word	0xbfe921fb
 8021880:	7f3321d2 	.word	0x7f3321d2
 8021884:	4002d97c 	.word	0x4002d97c
 8021888:	7f3321d2 	.word	0x7f3321d2
 802188c:	c002d97c 	.word	0xc002d97c
 8021890:	33145c07 	.word	0x33145c07
 8021894:	3ca1a626 	.word	0x3ca1a626
 8021898:	54442d18 	.word	0x54442d18
 802189c:	400921fb 	.word	0x400921fb
 80218a0:	54442d18 	.word	0x54442d18
 80218a4:	3ff921fb 	.word	0x3ff921fb
 80218a8:	54442d18 	.word	0x54442d18
 80218ac:	3fe921fb 	.word	0x3fe921fb
 80218b0:	7ff00000 	.word	0x7ff00000

080218b4 <__ieee754_sqrt>:
 80218b4:	4b54      	ldr	r3, [pc, #336]	; (8021a08 <__ieee754_sqrt+0x154>)
 80218b6:	438b      	bics	r3, r1
 80218b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80218bc:	460a      	mov	r2, r1
 80218be:	4606      	mov	r6, r0
 80218c0:	460f      	mov	r7, r1
 80218c2:	460c      	mov	r4, r1
 80218c4:	d10f      	bne.n	80218e6 <__ieee754_sqrt+0x32>
 80218c6:	4602      	mov	r2, r0
 80218c8:	460b      	mov	r3, r1
 80218ca:	f7de fe15 	bl	80004f8 <__aeabi_dmul>
 80218ce:	4602      	mov	r2, r0
 80218d0:	460b      	mov	r3, r1
 80218d2:	4630      	mov	r0, r6
 80218d4:	4639      	mov	r1, r7
 80218d6:	f7de fc59 	bl	800018c <__adddf3>
 80218da:	4606      	mov	r6, r0
 80218dc:	460f      	mov	r7, r1
 80218de:	4630      	mov	r0, r6
 80218e0:	4639      	mov	r1, r7
 80218e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80218e6:	2900      	cmp	r1, #0
 80218e8:	4605      	mov	r5, r0
 80218ea:	4603      	mov	r3, r0
 80218ec:	dc0e      	bgt.n	802190c <__ieee754_sqrt+0x58>
 80218ee:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80218f2:	ea5c 0505 	orrs.w	r5, ip, r5
 80218f6:	d0f2      	beq.n	80218de <__ieee754_sqrt+0x2a>
 80218f8:	b141      	cbz	r1, 802190c <__ieee754_sqrt+0x58>
 80218fa:	4602      	mov	r2, r0
 80218fc:	460b      	mov	r3, r1
 80218fe:	f7de fc43 	bl	8000188 <__aeabi_dsub>
 8021902:	4602      	mov	r2, r0
 8021904:	460b      	mov	r3, r1
 8021906:	f7de ff21 	bl	800074c <__aeabi_ddiv>
 802190a:	e7e6      	b.n	80218da <__ieee754_sqrt+0x26>
 802190c:	1512      	asrs	r2, r2, #20
 802190e:	d073      	beq.n	80219f8 <__ieee754_sqrt+0x144>
 8021910:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8021914:	07d5      	lsls	r5, r2, #31
 8021916:	f3c4 0413 	ubfx	r4, r4, #0, #20
 802191a:	bf48      	it	mi
 802191c:	0fd9      	lsrmi	r1, r3, #31
 802191e:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8021922:	bf44      	itt	mi
 8021924:	005b      	lslmi	r3, r3, #1
 8021926:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 802192a:	2500      	movs	r5, #0
 802192c:	1051      	asrs	r1, r2, #1
 802192e:	0fda      	lsrs	r2, r3, #31
 8021930:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8021934:	005b      	lsls	r3, r3, #1
 8021936:	2216      	movs	r2, #22
 8021938:	4628      	mov	r0, r5
 802193a:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 802193e:	1987      	adds	r7, r0, r6
 8021940:	42a7      	cmp	r7, r4
 8021942:	bfde      	ittt	le
 8021944:	19b8      	addle	r0, r7, r6
 8021946:	1be4      	suble	r4, r4, r7
 8021948:	19ad      	addle	r5, r5, r6
 802194a:	0fdf      	lsrs	r7, r3, #31
 802194c:	3a01      	subs	r2, #1
 802194e:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 8021952:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8021956:	ea4f 0656 	mov.w	r6, r6, lsr #1
 802195a:	d1f0      	bne.n	802193e <__ieee754_sqrt+0x8a>
 802195c:	f04f 0c20 	mov.w	ip, #32
 8021960:	4696      	mov	lr, r2
 8021962:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8021966:	4284      	cmp	r4, r0
 8021968:	eb06 070e 	add.w	r7, r6, lr
 802196c:	dc02      	bgt.n	8021974 <__ieee754_sqrt+0xc0>
 802196e:	d112      	bne.n	8021996 <__ieee754_sqrt+0xe2>
 8021970:	429f      	cmp	r7, r3
 8021972:	d810      	bhi.n	8021996 <__ieee754_sqrt+0xe2>
 8021974:	2f00      	cmp	r7, #0
 8021976:	eb07 0e06 	add.w	lr, r7, r6
 802197a:	da42      	bge.n	8021a02 <__ieee754_sqrt+0x14e>
 802197c:	f1be 0f00 	cmp.w	lr, #0
 8021980:	db3f      	blt.n	8021a02 <__ieee754_sqrt+0x14e>
 8021982:	f100 0801 	add.w	r8, r0, #1
 8021986:	1a24      	subs	r4, r4, r0
 8021988:	429f      	cmp	r7, r3
 802198a:	bf88      	it	hi
 802198c:	f104 34ff 	addhi.w	r4, r4, #4294967295
 8021990:	1bdb      	subs	r3, r3, r7
 8021992:	4432      	add	r2, r6
 8021994:	4640      	mov	r0, r8
 8021996:	0064      	lsls	r4, r4, #1
 8021998:	f1bc 0c01 	subs.w	ip, ip, #1
 802199c:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 80219a0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80219a4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80219a8:	d1dd      	bne.n	8021966 <__ieee754_sqrt+0xb2>
 80219aa:	4323      	orrs	r3, r4
 80219ac:	d006      	beq.n	80219bc <__ieee754_sqrt+0x108>
 80219ae:	1c54      	adds	r4, r2, #1
 80219b0:	bf13      	iteet	ne
 80219b2:	3201      	addne	r2, #1
 80219b4:	3501      	addeq	r5, #1
 80219b6:	4662      	moveq	r2, ip
 80219b8:	f022 0201 	bicne.w	r2, r2, #1
 80219bc:	106b      	asrs	r3, r5, #1
 80219be:	0852      	lsrs	r2, r2, #1
 80219c0:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80219c4:	07e8      	lsls	r0, r5, #31
 80219c6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80219ca:	bf48      	it	mi
 80219cc:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80219d0:	eb03 5701 	add.w	r7, r3, r1, lsl #20
 80219d4:	4616      	mov	r6, r2
 80219d6:	e782      	b.n	80218de <__ieee754_sqrt+0x2a>
 80219d8:	0adc      	lsrs	r4, r3, #11
 80219da:	3915      	subs	r1, #21
 80219dc:	055b      	lsls	r3, r3, #21
 80219de:	2c00      	cmp	r4, #0
 80219e0:	d0fa      	beq.n	80219d8 <__ieee754_sqrt+0x124>
 80219e2:	02e6      	lsls	r6, r4, #11
 80219e4:	d50a      	bpl.n	80219fc <__ieee754_sqrt+0x148>
 80219e6:	f1c2 0020 	rsb	r0, r2, #32
 80219ea:	fa23 f000 	lsr.w	r0, r3, r0
 80219ee:	1e55      	subs	r5, r2, #1
 80219f0:	4093      	lsls	r3, r2
 80219f2:	4304      	orrs	r4, r0
 80219f4:	1b4a      	subs	r2, r1, r5
 80219f6:	e78b      	b.n	8021910 <__ieee754_sqrt+0x5c>
 80219f8:	4611      	mov	r1, r2
 80219fa:	e7f0      	b.n	80219de <__ieee754_sqrt+0x12a>
 80219fc:	0064      	lsls	r4, r4, #1
 80219fe:	3201      	adds	r2, #1
 8021a00:	e7ef      	b.n	80219e2 <__ieee754_sqrt+0x12e>
 8021a02:	4680      	mov	r8, r0
 8021a04:	e7bf      	b.n	8021986 <__ieee754_sqrt+0xd2>
 8021a06:	bf00      	nop
 8021a08:	7ff00000 	.word	0x7ff00000

08021a0c <__ieee754_acosf>:
 8021a0c:	b508      	push	{r3, lr}
 8021a0e:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8021a12:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8021a16:	ed2d 8b0c 	vpush	{d8-d13}
 8021a1a:	ee08 0a10 	vmov	s16, r0
 8021a1e:	d10c      	bne.n	8021a3a <__ieee754_acosf+0x2e>
 8021a20:	eddf 7a69 	vldr	s15, [pc, #420]	; 8021bc8 <__ieee754_acosf+0x1bc>
 8021a24:	ed9f 8a69 	vldr	s16, [pc, #420]	; 8021bcc <__ieee754_acosf+0x1c0>
 8021a28:	2800      	cmp	r0, #0
 8021a2a:	bfd8      	it	le
 8021a2c:	eef0 7a48 	vmovle.f32	s15, s16
 8021a30:	ecbd 8b0c 	vpop	{d8-d13}
 8021a34:	ee17 0a90 	vmov	r0, s15
 8021a38:	bd08      	pop	{r3, pc}
 8021a3a:	dd04      	ble.n	8021a46 <__ieee754_acosf+0x3a>
 8021a3c:	ee38 8a48 	vsub.f32	s16, s16, s16
 8021a40:	eec8 7a08 	vdiv.f32	s15, s16, s16
 8021a44:	e7f4      	b.n	8021a30 <__ieee754_acosf+0x24>
 8021a46:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 8021a4a:	da3e      	bge.n	8021aca <__ieee754_acosf+0xbe>
 8021a4c:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 8021a50:	f340 80b7 	ble.w	8021bc2 <__ieee754_acosf+0x1b6>
 8021a54:	ee68 7a08 	vmul.f32	s15, s16, s16
 8021a58:	eddf 6a5d 	vldr	s13, [pc, #372]	; 8021bd0 <__ieee754_acosf+0x1c4>
 8021a5c:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8021bd4 <__ieee754_acosf+0x1c8>
 8021a60:	ed9f 6a5d 	vldr	s12, [pc, #372]	; 8021bd8 <__ieee754_acosf+0x1cc>
 8021a64:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8021a68:	eddf 6a5c 	vldr	s13, [pc, #368]	; 8021bdc <__ieee754_acosf+0x1d0>
 8021a6c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8021a70:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8021be0 <__ieee754_acosf+0x1d4>
 8021a74:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8021a78:	eddf 6a5a 	vldr	s13, [pc, #360]	; 8021be4 <__ieee754_acosf+0x1d8>
 8021a7c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8021a80:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8021be8 <__ieee754_acosf+0x1dc>
 8021a84:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8021a88:	eddf 6a58 	vldr	s13, [pc, #352]	; 8021bec <__ieee754_acosf+0x1e0>
 8021a8c:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8021a90:	eddf 6a57 	vldr	s13, [pc, #348]	; 8021bf0 <__ieee754_acosf+0x1e4>
 8021a94:	eee6 6a27 	vfma.f32	s13, s12, s15
 8021a98:	ed9f 6a56 	vldr	s12, [pc, #344]	; 8021bf4 <__ieee754_acosf+0x1e8>
 8021a9c:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8021aa0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8021aa4:	eee6 6a27 	vfma.f32	s13, s12, s15
 8021aa8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8021aac:	eef0 7a66 	vmov.f32	s15, s13
 8021ab0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8021ab4:	eddf 7a50 	vldr	s15, [pc, #320]	; 8021bf8 <__ieee754_acosf+0x1ec>
 8021ab8:	eee8 7a66 	vfms.f32	s15, s16, s13
 8021abc:	ee38 8a67 	vsub.f32	s16, s16, s15
 8021ac0:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8021bfc <__ieee754_acosf+0x1f0>
 8021ac4:	ee77 7ac8 	vsub.f32	s15, s15, s16
 8021ac8:	e7b2      	b.n	8021a30 <__ieee754_acosf+0x24>
 8021aca:	2800      	cmp	r0, #0
 8021acc:	eddf da40 	vldr	s27, [pc, #256]	; 8021bd0 <__ieee754_acosf+0x1c4>
 8021ad0:	eddf ca40 	vldr	s25, [pc, #256]	; 8021bd4 <__ieee754_acosf+0x1c8>
 8021ad4:	ed9f ca41 	vldr	s24, [pc, #260]	; 8021bdc <__ieee754_acosf+0x1d0>
 8021ad8:	eddf ba41 	vldr	s23, [pc, #260]	; 8021be0 <__ieee754_acosf+0x1d4>
 8021adc:	ed9f ba41 	vldr	s22, [pc, #260]	; 8021be4 <__ieee754_acosf+0x1d8>
 8021ae0:	eddf 8a41 	vldr	s17, [pc, #260]	; 8021be8 <__ieee754_acosf+0x1dc>
 8021ae4:	ed9f da41 	vldr	s26, [pc, #260]	; 8021bec <__ieee754_acosf+0x1e0>
 8021ae8:	eddf aa3b 	vldr	s21, [pc, #236]	; 8021bd8 <__ieee754_acosf+0x1cc>
 8021aec:	ed9f aa40 	vldr	s20, [pc, #256]	; 8021bf0 <__ieee754_acosf+0x1e4>
 8021af0:	eddf 9a40 	vldr	s19, [pc, #256]	; 8021bf4 <__ieee754_acosf+0x1e8>
 8021af4:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8021af8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8021afc:	da2c      	bge.n	8021b58 <__ieee754_acosf+0x14c>
 8021afe:	ee38 8a09 	vadd.f32	s16, s16, s18
 8021b02:	ee28 8a27 	vmul.f32	s16, s16, s15
 8021b06:	eee8 ca2d 	vfma.f32	s25, s16, s27
 8021b0a:	eee8 aa0d 	vfma.f32	s21, s16, s26
 8021b0e:	eeac ca88 	vfma.f32	s24, s25, s16
 8021b12:	eeaa aa88 	vfma.f32	s20, s21, s16
 8021b16:	eeec ba08 	vfma.f32	s23, s24, s16
 8021b1a:	eeea 9a08 	vfma.f32	s19, s20, s16
 8021b1e:	eeab ba88 	vfma.f32	s22, s23, s16
 8021b22:	eea9 9a88 	vfma.f32	s18, s19, s16
 8021b26:	eeeb 8a08 	vfma.f32	s17, s22, s16
 8021b2a:	ee18 0a10 	vmov	r0, s16
 8021b2e:	ee68 8a88 	vmul.f32	s17, s17, s16
 8021b32:	f000 f995 	bl	8021e60 <__ieee754_sqrtf>
 8021b36:	eec8 7a89 	vdiv.f32	s15, s17, s18
 8021b3a:	ee06 0a90 	vmov	s13, r0
 8021b3e:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8021c00 <__ieee754_acosf+0x1f4>
 8021b42:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8021b46:	eddf 7a2f 	vldr	s15, [pc, #188]	; 8021c04 <__ieee754_acosf+0x1f8>
 8021b4a:	ee37 7a26 	vadd.f32	s14, s14, s13
 8021b4e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8021b52:	eee7 7a66 	vfms.f32	s15, s14, s13
 8021b56:	e76b      	b.n	8021a30 <__ieee754_acosf+0x24>
 8021b58:	ee39 8a48 	vsub.f32	s16, s18, s16
 8021b5c:	ee28 8a27 	vmul.f32	s16, s16, s15
 8021b60:	ee18 0a10 	vmov	r0, s16
 8021b64:	f000 f97c 	bl	8021e60 <__ieee754_sqrtf>
 8021b68:	eee8 ca2d 	vfma.f32	s25, s16, s27
 8021b6c:	f420 637f 	bic.w	r3, r0, #4080	; 0xff0
 8021b70:	f023 030f 	bic.w	r3, r3, #15
 8021b74:	eee8 aa0d 	vfma.f32	s21, s16, s26
 8021b78:	eeac ca88 	vfma.f32	s24, s25, s16
 8021b7c:	eeaa aa88 	vfma.f32	s20, s21, s16
 8021b80:	eeec ba08 	vfma.f32	s23, s24, s16
 8021b84:	eeea 9a08 	vfma.f32	s19, s20, s16
 8021b88:	eeab ba88 	vfma.f32	s22, s23, s16
 8021b8c:	ee07 3a10 	vmov	s14, r3
 8021b90:	eeeb 8a08 	vfma.f32	s17, s22, s16
 8021b94:	eef0 5a48 	vmov.f32	s11, s16
 8021b98:	ee06 0a90 	vmov	s13, r0
 8021b9c:	eee7 5a47 	vfms.f32	s11, s14, s14
 8021ba0:	eea9 9a88 	vfma.f32	s18, s19, s16
 8021ba4:	ee36 6a87 	vadd.f32	s12, s13, s14
 8021ba8:	ee68 8a88 	vmul.f32	s17, s17, s16
 8021bac:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8021bb0:	ee88 6a89 	vdiv.f32	s12, s17, s18
 8021bb4:	eee6 7a86 	vfma.f32	s15, s13, s12
 8021bb8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8021bbc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8021bc0:	e736      	b.n	8021a30 <__ieee754_acosf+0x24>
 8021bc2:	eddf 7a11 	vldr	s15, [pc, #68]	; 8021c08 <__ieee754_acosf+0x1fc>
 8021bc6:	e733      	b.n	8021a30 <__ieee754_acosf+0x24>
 8021bc8:	00000000 	.word	0x00000000
 8021bcc:	40490fdb 	.word	0x40490fdb
 8021bd0:	3811ef08 	.word	0x3811ef08
 8021bd4:	3a4f7f04 	.word	0x3a4f7f04
 8021bd8:	bf303361 	.word	0xbf303361
 8021bdc:	bd241146 	.word	0xbd241146
 8021be0:	3e4e0aa8 	.word	0x3e4e0aa8
 8021be4:	bea6b090 	.word	0xbea6b090
 8021be8:	3e2aaaab 	.word	0x3e2aaaab
 8021bec:	3d9dc62e 	.word	0x3d9dc62e
 8021bf0:	4001572d 	.word	0x4001572d
 8021bf4:	c019d139 	.word	0xc019d139
 8021bf8:	33a22168 	.word	0x33a22168
 8021bfc:	3fc90fda 	.word	0x3fc90fda
 8021c00:	b3a22168 	.word	0xb3a22168
 8021c04:	40490fda 	.word	0x40490fda
 8021c08:	3fc90fdb 	.word	0x3fc90fdb

08021c0c <__ieee754_rem_pio2f>:
 8021c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021c0e:	4b86      	ldr	r3, [pc, #536]	; (8021e28 <__ieee754_rem_pio2f+0x21c>)
 8021c10:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 8021c14:	429c      	cmp	r4, r3
 8021c16:	b087      	sub	sp, #28
 8021c18:	ee07 0a90 	vmov	s15, r0
 8021c1c:	460d      	mov	r5, r1
 8021c1e:	4606      	mov	r6, r0
 8021c20:	dc04      	bgt.n	8021c2c <__ieee754_rem_pio2f+0x20>
 8021c22:	2300      	movs	r3, #0
 8021c24:	6028      	str	r0, [r5, #0]
 8021c26:	604b      	str	r3, [r1, #4]
 8021c28:	2000      	movs	r0, #0
 8021c2a:	e020      	b.n	8021c6e <__ieee754_rem_pio2f+0x62>
 8021c2c:	4b7f      	ldr	r3, [pc, #508]	; (8021e2c <__ieee754_rem_pio2f+0x220>)
 8021c2e:	429c      	cmp	r4, r3
 8021c30:	dc38      	bgt.n	8021ca4 <__ieee754_rem_pio2f+0x98>
 8021c32:	2800      	cmp	r0, #0
 8021c34:	f024 040f 	bic.w	r4, r4, #15
 8021c38:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8021e30 <__ieee754_rem_pio2f+0x224>
 8021c3c:	4b7d      	ldr	r3, [pc, #500]	; (8021e34 <__ieee754_rem_pio2f+0x228>)
 8021c3e:	dd18      	ble.n	8021c72 <__ieee754_rem_pio2f+0x66>
 8021c40:	429c      	cmp	r4, r3
 8021c42:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8021c46:	bf09      	itett	eq
 8021c48:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8021e38 <__ieee754_rem_pio2f+0x22c>
 8021c4c:	ed9f 7a7b 	vldrne	s14, [pc, #492]	; 8021e3c <__ieee754_rem_pio2f+0x230>
 8021c50:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8021c54:	ed9f 7a7a 	vldreq	s14, [pc, #488]	; 8021e40 <__ieee754_rem_pio2f+0x234>
 8021c58:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8021c5c:	2001      	movs	r0, #1
 8021c5e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8021c62:	edc1 6a00 	vstr	s13, [r1]
 8021c66:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8021c6a:	edc1 7a01 	vstr	s15, [r1, #4]
 8021c6e:	b007      	add	sp, #28
 8021c70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021c72:	429c      	cmp	r4, r3
 8021c74:	ee77 7a87 	vadd.f32	s15, s15, s14
 8021c78:	bf09      	itett	eq
 8021c7a:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8021e38 <__ieee754_rem_pio2f+0x22c>
 8021c7e:	ed9f 7a6f 	vldrne	s14, [pc, #444]	; 8021e3c <__ieee754_rem_pio2f+0x230>
 8021c82:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8021c86:	ed9f 7a6e 	vldreq	s14, [pc, #440]	; 8021e40 <__ieee754_rem_pio2f+0x234>
 8021c8a:	ee77 6a87 	vadd.f32	s13, s15, s14
 8021c8e:	f04f 30ff 	mov.w	r0, #4294967295
 8021c92:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8021c96:	edc1 6a00 	vstr	s13, [r1]
 8021c9a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8021c9e:	edc1 7a01 	vstr	s15, [r1, #4]
 8021ca2:	e7e4      	b.n	8021c6e <__ieee754_rem_pio2f+0x62>
 8021ca4:	4b67      	ldr	r3, [pc, #412]	; (8021e44 <__ieee754_rem_pio2f+0x238>)
 8021ca6:	429c      	cmp	r4, r3
 8021ca8:	dc73      	bgt.n	8021d92 <__ieee754_rem_pio2f+0x186>
 8021caa:	f7ff f993 	bl	8020fd4 <fabsf>
 8021cae:	eddf 6a66 	vldr	s13, [pc, #408]	; 8021e48 <__ieee754_rem_pio2f+0x23c>
 8021cb2:	ee07 0a90 	vmov	s15, r0
 8021cb6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8021cba:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8021cbe:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8021cc2:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8021cc6:	ee17 0a10 	vmov	r0, s14
 8021cca:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8021e30 <__ieee754_rem_pio2f+0x224>
 8021cce:	eef1 6a65 	vneg.f32	s13, s11
 8021cd2:	eee6 7a87 	vfma.f32	s15, s13, s14
 8021cd6:	281f      	cmp	r0, #31
 8021cd8:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8021e3c <__ieee754_rem_pio2f+0x230>
 8021cdc:	ee25 7a87 	vmul.f32	s14, s11, s14
 8021ce0:	ee37 6ac7 	vsub.f32	s12, s15, s14
 8021ce4:	ee16 3a10 	vmov	r3, s12
 8021ce8:	dc1c      	bgt.n	8021d24 <__ieee754_rem_pio2f+0x118>
 8021cea:	1e47      	subs	r7, r0, #1
 8021cec:	4957      	ldr	r1, [pc, #348]	; (8021e4c <__ieee754_rem_pio2f+0x240>)
 8021cee:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8021cf2:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 8021cf6:	428a      	cmp	r2, r1
 8021cf8:	d014      	beq.n	8021d24 <__ieee754_rem_pio2f+0x118>
 8021cfa:	602b      	str	r3, [r5, #0]
 8021cfc:	edd5 6a00 	vldr	s13, [r5]
 8021d00:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8021d04:	2e00      	cmp	r6, #0
 8021d06:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8021d0a:	edc5 7a01 	vstr	s15, [r5, #4]
 8021d0e:	daae      	bge.n	8021c6e <__ieee754_rem_pio2f+0x62>
 8021d10:	eef1 6a66 	vneg.f32	s13, s13
 8021d14:	edc5 6a00 	vstr	s13, [r5]
 8021d18:	eef1 7a67 	vneg.f32	s15, s15
 8021d1c:	edc5 7a01 	vstr	s15, [r5, #4]
 8021d20:	4240      	negs	r0, r0
 8021d22:	e7a4      	b.n	8021c6e <__ieee754_rem_pio2f+0x62>
 8021d24:	15e4      	asrs	r4, r4, #23
 8021d26:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8021d2a:	1aa2      	subs	r2, r4, r2
 8021d2c:	2a08      	cmp	r2, #8
 8021d2e:	dde4      	ble.n	8021cfa <__ieee754_rem_pio2f+0xee>
 8021d30:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8021e38 <__ieee754_rem_pio2f+0x22c>
 8021d34:	eeb0 6a67 	vmov.f32	s12, s15
 8021d38:	eea6 6a87 	vfma.f32	s12, s13, s14
 8021d3c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8021d40:	eee6 7a87 	vfma.f32	s15, s13, s14
 8021d44:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8021e40 <__ieee754_rem_pio2f+0x234>
 8021d48:	eed5 7a87 	vfnms.f32	s15, s11, s14
 8021d4c:	eeb0 7a67 	vmov.f32	s14, s15
 8021d50:	ee76 7a67 	vsub.f32	s15, s12, s15
 8021d54:	ee17 3a90 	vmov	r3, s15
 8021d58:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8021d5c:	1aa4      	subs	r4, r4, r2
 8021d5e:	2c19      	cmp	r4, #25
 8021d60:	dc04      	bgt.n	8021d6c <__ieee754_rem_pio2f+0x160>
 8021d62:	edc5 7a00 	vstr	s15, [r5]
 8021d66:	eef0 7a46 	vmov.f32	s15, s12
 8021d6a:	e7c7      	b.n	8021cfc <__ieee754_rem_pio2f+0xf0>
 8021d6c:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8021e50 <__ieee754_rem_pio2f+0x244>
 8021d70:	eef0 7a46 	vmov.f32	s15, s12
 8021d74:	eee6 7a85 	vfma.f32	s15, s13, s10
 8021d78:	ee36 7a67 	vsub.f32	s14, s12, s15
 8021d7c:	eea6 7a85 	vfma.f32	s14, s13, s10
 8021d80:	eddf 6a34 	vldr	s13, [pc, #208]	; 8021e54 <__ieee754_rem_pio2f+0x248>
 8021d84:	ee95 7aa6 	vfnms.f32	s14, s11, s13
 8021d88:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8021d8c:	edc5 6a00 	vstr	s13, [r5]
 8021d90:	e7b4      	b.n	8021cfc <__ieee754_rem_pio2f+0xf0>
 8021d92:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8021d96:	db06      	blt.n	8021da6 <__ieee754_rem_pio2f+0x19a>
 8021d98:	ee77 7ae7 	vsub.f32	s15, s15, s15
 8021d9c:	edc1 7a01 	vstr	s15, [r1, #4]
 8021da0:	edc1 7a00 	vstr	s15, [r1]
 8021da4:	e740      	b.n	8021c28 <__ieee754_rem_pio2f+0x1c>
 8021da6:	15e2      	asrs	r2, r4, #23
 8021da8:	3a86      	subs	r2, #134	; 0x86
 8021daa:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 8021dae:	ee07 3a90 	vmov	s15, r3
 8021db2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8021db6:	eddf 6a28 	vldr	s13, [pc, #160]	; 8021e58 <__ieee754_rem_pio2f+0x24c>
 8021dba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8021dbe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8021dc2:	ed8d 7a03 	vstr	s14, [sp, #12]
 8021dc6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8021dca:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8021dce:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8021dd2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8021dd6:	ed8d 7a04 	vstr	s14, [sp, #16]
 8021dda:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8021dde:	eef5 7a40 	vcmp.f32	s15, #0.0
 8021de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021de6:	edcd 7a05 	vstr	s15, [sp, #20]
 8021dea:	d11a      	bne.n	8021e22 <__ieee754_rem_pio2f+0x216>
 8021dec:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8021df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021df4:	bf0c      	ite	eq
 8021df6:	2301      	moveq	r3, #1
 8021df8:	2302      	movne	r3, #2
 8021dfa:	4918      	ldr	r1, [pc, #96]	; (8021e5c <__ieee754_rem_pio2f+0x250>)
 8021dfc:	9101      	str	r1, [sp, #4]
 8021dfe:	2102      	movs	r1, #2
 8021e00:	9100      	str	r1, [sp, #0]
 8021e02:	a803      	add	r0, sp, #12
 8021e04:	4629      	mov	r1, r5
 8021e06:	f000 f897 	bl	8021f38 <__kernel_rem_pio2f>
 8021e0a:	2e00      	cmp	r6, #0
 8021e0c:	f6bf af2f 	bge.w	8021c6e <__ieee754_rem_pio2f+0x62>
 8021e10:	edd5 7a00 	vldr	s15, [r5]
 8021e14:	eef1 7a67 	vneg.f32	s15, s15
 8021e18:	edc5 7a00 	vstr	s15, [r5]
 8021e1c:	edd5 7a01 	vldr	s15, [r5, #4]
 8021e20:	e77a      	b.n	8021d18 <__ieee754_rem_pio2f+0x10c>
 8021e22:	2303      	movs	r3, #3
 8021e24:	e7e9      	b.n	8021dfa <__ieee754_rem_pio2f+0x1ee>
 8021e26:	bf00      	nop
 8021e28:	3f490fd8 	.word	0x3f490fd8
 8021e2c:	4016cbe3 	.word	0x4016cbe3
 8021e30:	3fc90f80 	.word	0x3fc90f80
 8021e34:	3fc90fd0 	.word	0x3fc90fd0
 8021e38:	37354400 	.word	0x37354400
 8021e3c:	37354443 	.word	0x37354443
 8021e40:	2e85a308 	.word	0x2e85a308
 8021e44:	43490f80 	.word	0x43490f80
 8021e48:	3f22f984 	.word	0x3f22f984
 8021e4c:	08022fa0 	.word	0x08022fa0
 8021e50:	2e85a300 	.word	0x2e85a300
 8021e54:	248d3132 	.word	0x248d3132
 8021e58:	43800000 	.word	0x43800000
 8021e5c:	08023020 	.word	0x08023020

08021e60 <__ieee754_sqrtf>:
 8021e60:	ee07 0a90 	vmov	s15, r0
 8021e64:	eef1 7ae7 	vsqrt.f32	s15, s15
 8021e68:	ee17 0a90 	vmov	r0, s15
 8021e6c:	4770      	bx	lr
	...

08021e70 <__kernel_cosf>:
 8021e70:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8021e74:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8021e78:	ee05 0a10 	vmov	s10, r0
 8021e7c:	ee07 1a10 	vmov	s14, r1
 8021e80:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8021e84:	da05      	bge.n	8021e92 <__kernel_cosf+0x22>
 8021e86:	eefd 7ac5 	vcvt.s32.f32	s15, s10
 8021e8a:	ee17 2a90 	vmov	r2, s15
 8021e8e:	2a00      	cmp	r2, #0
 8021e90:	d03f      	beq.n	8021f12 <__kernel_cosf+0xa2>
 8021e92:	ee65 5a05 	vmul.f32	s11, s10, s10
 8021e96:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8021e9a:	ee65 7aa6 	vmul.f32	s15, s11, s13
 8021e9e:	ee27 7a45 	vnmul.f32	s14, s14, s10
 8021ea2:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8021f18 <__kernel_cosf+0xa8>
 8021ea6:	ed9f 5a1d 	vldr	s10, [pc, #116]	; 8021f1c <__kernel_cosf+0xac>
 8021eaa:	4a1d      	ldr	r2, [pc, #116]	; (8021f20 <__kernel_cosf+0xb0>)
 8021eac:	eee5 6a85 	vfma.f32	s13, s11, s10
 8021eb0:	4293      	cmp	r3, r2
 8021eb2:	ed9f 5a1c 	vldr	s10, [pc, #112]	; 8021f24 <__kernel_cosf+0xb4>
 8021eb6:	eea6 5aa5 	vfma.f32	s10, s13, s11
 8021eba:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8021f28 <__kernel_cosf+0xb8>
 8021ebe:	eee5 6a25 	vfma.f32	s13, s10, s11
 8021ec2:	ed9f 5a1a 	vldr	s10, [pc, #104]	; 8021f2c <__kernel_cosf+0xbc>
 8021ec6:	eea6 5aa5 	vfma.f32	s10, s13, s11
 8021eca:	eddf 6a19 	vldr	s13, [pc, #100]	; 8021f30 <__kernel_cosf+0xc0>
 8021ece:	eee5 6a25 	vfma.f32	s13, s10, s11
 8021ed2:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8021ed6:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8021eda:	eef0 5a47 	vmov.f32	s11, s14
 8021ede:	dc06      	bgt.n	8021eee <__kernel_cosf+0x7e>
 8021ee0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8021ee4:	ee76 7a47 	vsub.f32	s15, s12, s14
 8021ee8:	ee17 0a90 	vmov	r0, s15
 8021eec:	4770      	bx	lr
 8021eee:	4a11      	ldr	r2, [pc, #68]	; (8021f34 <__kernel_cosf+0xc4>)
 8021ef0:	4293      	cmp	r3, r2
 8021ef2:	bfda      	itte	le
 8021ef4:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8021ef8:	ee06 3a90 	vmovle	s13, r3
 8021efc:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8021f00:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8021f04:	ee36 7a66 	vsub.f32	s14, s12, s13
 8021f08:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8021f0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8021f10:	e7ea      	b.n	8021ee8 <__kernel_cosf+0x78>
 8021f12:	eef0 7a46 	vmov.f32	s15, s12
 8021f16:	e7e7      	b.n	8021ee8 <__kernel_cosf+0x78>
 8021f18:	310f74f6 	.word	0x310f74f6
 8021f1c:	ad47d74e 	.word	0xad47d74e
 8021f20:	3e999999 	.word	0x3e999999
 8021f24:	b493f27c 	.word	0xb493f27c
 8021f28:	37d00d01 	.word	0x37d00d01
 8021f2c:	bab60b61 	.word	0xbab60b61
 8021f30:	3d2aaaab 	.word	0x3d2aaaab
 8021f34:	3f480000 	.word	0x3f480000

08021f38 <__kernel_rem_pio2f>:
 8021f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021f3c:	ed2d 8b04 	vpush	{d8-d9}
 8021f40:	b0d7      	sub	sp, #348	; 0x15c
 8021f42:	4688      	mov	r8, r1
 8021f44:	9301      	str	r3, [sp, #4]
 8021f46:	9964      	ldr	r1, [sp, #400]	; 0x190
 8021f48:	4bd2      	ldr	r3, [pc, #840]	; (8022294 <__kernel_rem_pio2f+0x35c>)
 8021f4a:	9002      	str	r0, [sp, #8]
 8021f4c:	f853 b021 	ldr.w	fp, [r3, r1, lsl #2]
 8021f50:	9b01      	ldr	r3, [sp, #4]
 8021f52:	9c65      	ldr	r4, [sp, #404]	; 0x194
 8021f54:	ed9f 7ad3 	vldr	s14, [pc, #844]	; 80222a4 <__kernel_rem_pio2f+0x36c>
 8021f58:	3b01      	subs	r3, #1
 8021f5a:	1ed1      	subs	r1, r2, #3
 8021f5c:	2008      	movs	r0, #8
 8021f5e:	fb91 f1f0 	sdiv	r1, r1, r0
 8021f62:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8021f66:	1c4d      	adds	r5, r1, #1
 8021f68:	1ace      	subs	r6, r1, r3
 8021f6a:	a81a      	add	r0, sp, #104	; 0x68
 8021f6c:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8021f70:	eb0b 0703 	add.w	r7, fp, r3
 8021f74:	eb04 0c86 	add.w	ip, r4, r6, lsl #2
 8021f78:	4686      	mov	lr, r0
 8021f7a:	2200      	movs	r2, #0
 8021f7c:	42ba      	cmp	r2, r7
 8021f7e:	dd0f      	ble.n	8021fa0 <__kernel_rem_pio2f+0x68>
 8021f80:	af42      	add	r7, sp, #264	; 0x108
 8021f82:	2000      	movs	r0, #0
 8021f84:	4558      	cmp	r0, fp
 8021f86:	dc27      	bgt.n	8021fd8 <__kernel_rem_pio2f+0xa0>
 8021f88:	e9dd 2601 	ldrd	r2, r6, [sp, #4]
 8021f8c:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 8021f90:	4402      	add	r2, r0
 8021f92:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
 8021f96:	eddf 7ac3 	vldr	s15, [pc, #780]	; 80222a4 <__kernel_rem_pio2f+0x36c>
 8021f9a:	f04f 0c00 	mov.w	ip, #0
 8021f9e:	e015      	b.n	8021fcc <__kernel_rem_pio2f+0x94>
 8021fa0:	42d6      	cmn	r6, r2
 8021fa2:	bf5d      	ittte	pl
 8021fa4:	f85c 0022 	ldrpl.w	r0, [ip, r2, lsl #2]
 8021fa8:	ee07 0a90 	vmovpl	s15, r0
 8021fac:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8021fb0:	eef0 7a47 	vmovmi.f32	s15, s14
 8021fb4:	ecee 7a01 	vstmia	lr!, {s15}
 8021fb8:	3201      	adds	r2, #1
 8021fba:	e7df      	b.n	8021f7c <__kernel_rem_pio2f+0x44>
 8021fbc:	ecf6 6a01 	vldmia	r6!, {s13}
 8021fc0:	ed32 7a01 	vldmdb	r2!, {s14}
 8021fc4:	eee6 7a87 	vfma.f32	s15, s13, s14
 8021fc8:	f10c 0c01 	add.w	ip, ip, #1
 8021fcc:	459c      	cmp	ip, r3
 8021fce:	ddf5      	ble.n	8021fbc <__kernel_rem_pio2f+0x84>
 8021fd0:	ece7 7a01 	vstmia	r7!, {s15}
 8021fd4:	3001      	adds	r0, #1
 8021fd6:	e7d5      	b.n	8021f84 <__kernel_rem_pio2f+0x4c>
 8021fd8:	aa06      	add	r2, sp, #24
 8021fda:	eb02 028b 	add.w	r2, r2, fp, lsl #2
 8021fde:	9204      	str	r2, [sp, #16]
 8021fe0:	eddf 8aad 	vldr	s17, [pc, #692]	; 8022298 <__kernel_rem_pio2f+0x360>
 8021fe4:	ed9f 9aad 	vldr	s18, [pc, #692]	; 802229c <__kernel_rem_pio2f+0x364>
 8021fe8:	eb04 0281 	add.w	r2, r4, r1, lsl #2
 8021fec:	9203      	str	r2, [sp, #12]
 8021fee:	465f      	mov	r7, fp
 8021ff0:	aa56      	add	r2, sp, #344	; 0x158
 8021ff2:	f107 4980 	add.w	r9, r7, #1073741824	; 0x40000000
 8021ff6:	eb02 0287 	add.w	r2, r2, r7, lsl #2
 8021ffa:	f109 39ff 	add.w	r9, r9, #4294967295
 8021ffe:	ed52 7a14 	vldr	s15, [r2, #-80]	; 0xffffffb0
 8022002:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8022006:	aa56      	add	r2, sp, #344	; 0x158
 8022008:	eb02 0109 	add.w	r1, r2, r9
 802200c:	394c      	subs	r1, #76	; 0x4c
 802200e:	2200      	movs	r2, #0
 8022010:	1ab8      	subs	r0, r7, r2
 8022012:	2800      	cmp	r0, #0
 8022014:	dc54      	bgt.n	80220c0 <__kernel_rem_pio2f+0x188>
 8022016:	4629      	mov	r1, r5
 8022018:	ee17 0a90 	vmov	r0, s15
 802201c:	9305      	str	r3, [sp, #20]
 802201e:	f000 fb87 	bl	8022730 <scalbnf>
 8022022:	ee08 0a10 	vmov	s16, r0
 8022026:	eef4 7a00 	vmov.f32	s15, #64	; 0x3e000000  0.125
 802202a:	ee68 7a27 	vmul.f32	s15, s16, s15
 802202e:	ee17 0a90 	vmov	r0, s15
 8022032:	f000 fb39 	bl	80226a8 <floorf>
 8022036:	ee07 0a10 	vmov	s14, r0
 802203a:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 802203e:	eea7 8a67 	vfms.f32	s16, s14, s15
 8022042:	2d00      	cmp	r5, #0
 8022044:	9b05      	ldr	r3, [sp, #20]
 8022046:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 802204a:	ee17 aa90 	vmov	sl, s15
 802204e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8022052:	ee38 8a67 	vsub.f32	s16, s16, s15
 8022056:	dd48      	ble.n	80220ea <__kernel_rem_pio2f+0x1b2>
 8022058:	1e79      	subs	r1, r7, #1
 802205a:	aa06      	add	r2, sp, #24
 802205c:	f1c5 0008 	rsb	r0, r5, #8
 8022060:	f852 6021 	ldr.w	r6, [r2, r1, lsl #2]
 8022064:	fa46 f200 	asr.w	r2, r6, r0
 8022068:	4492      	add	sl, r2
 802206a:	4082      	lsls	r2, r0
 802206c:	1ab6      	subs	r6, r6, r2
 802206e:	aa06      	add	r2, sp, #24
 8022070:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
 8022074:	f1c5 0207 	rsb	r2, r5, #7
 8022078:	4116      	asrs	r6, r2
 802207a:	2e00      	cmp	r6, #0
 802207c:	dd44      	ble.n	8022108 <__kernel_rem_pio2f+0x1d0>
 802207e:	2100      	movs	r1, #0
 8022080:	f10a 0a01 	add.w	sl, sl, #1
 8022084:	4608      	mov	r0, r1
 8022086:	428f      	cmp	r7, r1
 8022088:	dc70      	bgt.n	802216c <__kernel_rem_pio2f+0x234>
 802208a:	2d00      	cmp	r5, #0
 802208c:	dd05      	ble.n	802209a <__kernel_rem_pio2f+0x162>
 802208e:	2d01      	cmp	r5, #1
 8022090:	f000 8081 	beq.w	8022196 <__kernel_rem_pio2f+0x25e>
 8022094:	2d02      	cmp	r5, #2
 8022096:	f000 8088 	beq.w	80221aa <__kernel_rem_pio2f+0x272>
 802209a:	2e02      	cmp	r6, #2
 802209c:	d134      	bne.n	8022108 <__kernel_rem_pio2f+0x1d0>
 802209e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80220a2:	ee37 8ac8 	vsub.f32	s16, s15, s16
 80220a6:	b378      	cbz	r0, 8022108 <__kernel_rem_pio2f+0x1d0>
 80220a8:	ee17 0a90 	vmov	r0, s15
 80220ac:	4629      	mov	r1, r5
 80220ae:	9305      	str	r3, [sp, #20]
 80220b0:	f000 fb3e 	bl	8022730 <scalbnf>
 80220b4:	ee07 0a90 	vmov	s15, r0
 80220b8:	9b05      	ldr	r3, [sp, #20]
 80220ba:	ee38 8a67 	vsub.f32	s16, s16, s15
 80220be:	e023      	b.n	8022108 <__kernel_rem_pio2f+0x1d0>
 80220c0:	ee27 7aa8 	vmul.f32	s14, s15, s17
 80220c4:	ac06      	add	r4, sp, #24
 80220c6:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80220ca:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80220ce:	eee7 7a49 	vfms.f32	s15, s14, s18
 80220d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80220d6:	ee17 0a90 	vmov	r0, s15
 80220da:	ed71 7a01 	vldmdb	r1!, {s15}
 80220de:	f844 0022 	str.w	r0, [r4, r2, lsl #2]
 80220e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80220e6:	3201      	adds	r2, #1
 80220e8:	e792      	b.n	8022010 <__kernel_rem_pio2f+0xd8>
 80220ea:	d105      	bne.n	80220f8 <__kernel_rem_pio2f+0x1c0>
 80220ec:	1e7a      	subs	r2, r7, #1
 80220ee:	a906      	add	r1, sp, #24
 80220f0:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 80220f4:	1236      	asrs	r6, r6, #8
 80220f6:	e7c0      	b.n	802207a <__kernel_rem_pio2f+0x142>
 80220f8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80220fc:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8022100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022104:	da30      	bge.n	8022168 <__kernel_rem_pio2f+0x230>
 8022106:	2600      	movs	r6, #0
 8022108:	eeb5 8a40 	vcmp.f32	s16, #0.0
 802210c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022110:	f040 8098 	bne.w	8022244 <__kernel_rem_pio2f+0x30c>
 8022114:	1e7c      	subs	r4, r7, #1
 8022116:	4622      	mov	r2, r4
 8022118:	2000      	movs	r0, #0
 802211a:	455a      	cmp	r2, fp
 802211c:	da4c      	bge.n	80221b8 <__kernel_rem_pio2f+0x280>
 802211e:	2800      	cmp	r0, #0
 8022120:	f000 8083 	beq.w	802222a <__kernel_rem_pio2f+0x2f2>
 8022124:	ab06      	add	r3, sp, #24
 8022126:	3d08      	subs	r5, #8
 8022128:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 802212c:	2b00      	cmp	r3, #0
 802212e:	f000 8087 	beq.w	8022240 <__kernel_rem_pio2f+0x308>
 8022132:	4629      	mov	r1, r5
 8022134:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8022138:	f000 fafa 	bl	8022730 <scalbnf>
 802213c:	00a3      	lsls	r3, r4, #2
 802213e:	aa42      	add	r2, sp, #264	; 0x108
 8022140:	441a      	add	r2, r3
 8022142:	eddf 6a55 	vldr	s13, [pc, #340]	; 8022298 <__kernel_rem_pio2f+0x360>
 8022146:	ee07 0a10 	vmov	s14, r0
 802214a:	4621      	mov	r1, r4
 802214c:	1d10      	adds	r0, r2, #4
 802214e:	2900      	cmp	r1, #0
 8022150:	f280 80b3 	bge.w	80222ba <__kernel_rem_pio2f+0x382>
 8022154:	2000      	movs	r0, #0
 8022156:	1a21      	subs	r1, r4, r0
 8022158:	2900      	cmp	r1, #0
 802215a:	f2c0 80d3 	blt.w	8022304 <__kernel_rem_pio2f+0x3cc>
 802215e:	4d50      	ldr	r5, [pc, #320]	; (80222a0 <__kernel_rem_pio2f+0x368>)
 8022160:	eddf 7a50 	vldr	s15, [pc, #320]	; 80222a4 <__kernel_rem_pio2f+0x36c>
 8022164:	2100      	movs	r1, #0
 8022166:	e0c1      	b.n	80222ec <__kernel_rem_pio2f+0x3b4>
 8022168:	2602      	movs	r6, #2
 802216a:	e788      	b.n	802207e <__kernel_rem_pio2f+0x146>
 802216c:	aa06      	add	r2, sp, #24
 802216e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8022172:	b948      	cbnz	r0, 8022188 <__kernel_rem_pio2f+0x250>
 8022174:	b12a      	cbz	r2, 8022182 <__kernel_rem_pio2f+0x24a>
 8022176:	a806      	add	r0, sp, #24
 8022178:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 802217c:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
 8022180:	2201      	movs	r2, #1
 8022182:	3101      	adds	r1, #1
 8022184:	4610      	mov	r0, r2
 8022186:	e77e      	b.n	8022086 <__kernel_rem_pio2f+0x14e>
 8022188:	ac06      	add	r4, sp, #24
 802218a:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 802218e:	f844 2021 	str.w	r2, [r4, r1, lsl #2]
 8022192:	4602      	mov	r2, r0
 8022194:	e7f5      	b.n	8022182 <__kernel_rem_pio2f+0x24a>
 8022196:	1e79      	subs	r1, r7, #1
 8022198:	aa06      	add	r2, sp, #24
 802219a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 802219e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80221a2:	ac06      	add	r4, sp, #24
 80221a4:	f844 2021 	str.w	r2, [r4, r1, lsl #2]
 80221a8:	e777      	b.n	802209a <__kernel_rem_pio2f+0x162>
 80221aa:	1e79      	subs	r1, r7, #1
 80221ac:	aa06      	add	r2, sp, #24
 80221ae:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80221b2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80221b6:	e7f4      	b.n	80221a2 <__kernel_rem_pio2f+0x26a>
 80221b8:	a906      	add	r1, sp, #24
 80221ba:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80221be:	3a01      	subs	r2, #1
 80221c0:	4308      	orrs	r0, r1
 80221c2:	e7aa      	b.n	802211a <__kernel_rem_pio2f+0x1e2>
 80221c4:	3601      	adds	r6, #1
 80221c6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80221ca:	2900      	cmp	r1, #0
 80221cc:	d0fa      	beq.n	80221c4 <__kernel_rem_pio2f+0x28c>
 80221ce:	9a01      	ldr	r2, [sp, #4]
 80221d0:	19d0      	adds	r0, r2, r7
 80221d2:	0080      	lsls	r0, r0, #2
 80221d4:	aa1a      	add	r2, sp, #104	; 0x68
 80221d6:	1884      	adds	r4, r0, r2
 80221d8:	1c79      	adds	r1, r7, #1
 80221da:	f109 0904 	add.w	r9, r9, #4
 80221de:	2200      	movs	r2, #0
 80221e0:	4437      	add	r7, r6
 80221e2:	f104 0a04 	add.w	sl, r4, #4
 80221e6:	428f      	cmp	r7, r1
 80221e8:	f6ff af02 	blt.w	8021ff0 <__kernel_rem_pio2f+0xb8>
 80221ec:	ac1a      	add	r4, sp, #104	; 0x68
 80221ee:	1816      	adds	r6, r2, r0
 80221f0:	4426      	add	r6, r4
 80221f2:	9c03      	ldr	r4, [sp, #12]
 80221f4:	f8dd c008 	ldr.w	ip, [sp, #8]
 80221f8:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 80221fc:	9405      	str	r4, [sp, #20]
 80221fe:	ee07 4a90 	vmov	s15, r4
 8022202:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8022206:	eb0a 0e02 	add.w	lr, sl, r2
 802220a:	edc6 7a00 	vstr	s15, [r6]
 802220e:	eddf 7a25 	vldr	s15, [pc, #148]	; 80222a4 <__kernel_rem_pio2f+0x36c>
 8022212:	2600      	movs	r6, #0
 8022214:	429e      	cmp	r6, r3
 8022216:	dd0b      	ble.n	8022230 <__kernel_rem_pio2f+0x2f8>
 8022218:	eb02 0609 	add.w	r6, r2, r9
 802221c:	ac42      	add	r4, sp, #264	; 0x108
 802221e:	4426      	add	r6, r4
 8022220:	edc6 7a01 	vstr	s15, [r6, #4]
 8022224:	3101      	adds	r1, #1
 8022226:	3204      	adds	r2, #4
 8022228:	e7dd      	b.n	80221e6 <__kernel_rem_pio2f+0x2ae>
 802222a:	9a04      	ldr	r2, [sp, #16]
 802222c:	2601      	movs	r6, #1
 802222e:	e7ca      	b.n	80221c6 <__kernel_rem_pio2f+0x28e>
 8022230:	ecfc 6a01 	vldmia	ip!, {s13}
 8022234:	ed3e 7a01 	vldmdb	lr!, {s14}
 8022238:	3601      	adds	r6, #1
 802223a:	eee6 7a87 	vfma.f32	s15, s13, s14
 802223e:	e7e9      	b.n	8022214 <__kernel_rem_pio2f+0x2dc>
 8022240:	3c01      	subs	r4, #1
 8022242:	e76f      	b.n	8022124 <__kernel_rem_pio2f+0x1ec>
 8022244:	4269      	negs	r1, r5
 8022246:	ee18 0a10 	vmov	r0, s16
 802224a:	f000 fa71 	bl	8022730 <scalbnf>
 802224e:	eddf 6a13 	vldr	s13, [pc, #76]	; 802229c <__kernel_rem_pio2f+0x364>
 8022252:	ee07 0a10 	vmov	s14, r0
 8022256:	eeb4 7ae6 	vcmpe.f32	s14, s13
 802225a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802225e:	db23      	blt.n	80222a8 <__kernel_rem_pio2f+0x370>
 8022260:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8022298 <__kernel_rem_pio2f+0x360>
 8022264:	ee67 7a27 	vmul.f32	s15, s14, s15
 8022268:	aa06      	add	r2, sp, #24
 802226a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802226e:	1c7c      	adds	r4, r7, #1
 8022270:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8022274:	3508      	adds	r5, #8
 8022276:	eea7 7ae6 	vfms.f32	s14, s15, s13
 802227a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802227e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8022282:	ee17 3a10 	vmov	r3, s14
 8022286:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
 802228a:	ee17 3a90 	vmov	r3, s15
 802228e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8022292:	e74e      	b.n	8022132 <__kernel_rem_pio2f+0x1fa>
 8022294:	08023364 	.word	0x08023364
 8022298:	3b800000 	.word	0x3b800000
 802229c:	43800000 	.word	0x43800000
 80222a0:	08023338 	.word	0x08023338
 80222a4:	00000000 	.word	0x00000000
 80222a8:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80222ac:	aa06      	add	r2, sp, #24
 80222ae:	ee17 3a10 	vmov	r3, s14
 80222b2:	463c      	mov	r4, r7
 80222b4:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
 80222b8:	e73b      	b.n	8022132 <__kernel_rem_pio2f+0x1fa>
 80222ba:	ad06      	add	r5, sp, #24
 80222bc:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 80222c0:	9501      	str	r5, [sp, #4]
 80222c2:	ee07 5a90 	vmov	s15, r5
 80222c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80222ca:	3901      	subs	r1, #1
 80222cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80222d0:	ee27 7a26 	vmul.f32	s14, s14, s13
 80222d4:	ed60 7a01 	vstmdb	r0!, {s15}
 80222d8:	e739      	b.n	802214e <__kernel_rem_pio2f+0x216>
 80222da:	eb02 0781 	add.w	r7, r2, r1, lsl #2
 80222de:	ecf5 6a01 	vldmia	r5!, {s13}
 80222e2:	ed97 7a00 	vldr	s14, [r7]
 80222e6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80222ea:	3101      	adds	r1, #1
 80222ec:	4559      	cmp	r1, fp
 80222ee:	dc01      	bgt.n	80222f4 <__kernel_rem_pio2f+0x3bc>
 80222f0:	4288      	cmp	r0, r1
 80222f2:	daf2      	bge.n	80222da <__kernel_rem_pio2f+0x3a2>
 80222f4:	a956      	add	r1, sp, #344	; 0x158
 80222f6:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 80222fa:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 80222fe:	3001      	adds	r0, #1
 8022300:	3a04      	subs	r2, #4
 8022302:	e728      	b.n	8022156 <__kernel_rem_pio2f+0x21e>
 8022304:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8022306:	2a03      	cmp	r2, #3
 8022308:	d846      	bhi.n	8022398 <__kernel_rem_pio2f+0x460>
 802230a:	e8df f002 	tbb	[pc, r2]
 802230e:	1e39      	.short	0x1e39
 8022310:	021e      	.short	0x021e
 8022312:	aa56      	add	r2, sp, #344	; 0x158
 8022314:	4413      	add	r3, r2
 8022316:	3b9c      	subs	r3, #156	; 0x9c
 8022318:	461a      	mov	r2, r3
 802231a:	4621      	mov	r1, r4
 802231c:	2900      	cmp	r1, #0
 802231e:	dc57      	bgt.n	80223d0 <__kernel_rem_pio2f+0x498>
 8022320:	461a      	mov	r2, r3
 8022322:	4621      	mov	r1, r4
 8022324:	2901      	cmp	r1, #1
 8022326:	dc63      	bgt.n	80223f0 <__kernel_rem_pio2f+0x4b8>
 8022328:	ed5f 7a22 	vldr	s15, [pc, #-136]	; 80222a4 <__kernel_rem_pio2f+0x36c>
 802232c:	2c01      	cmp	r4, #1
 802232e:	dc6f      	bgt.n	8022410 <__kernel_rem_pio2f+0x4d8>
 8022330:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8022334:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8022338:	2e00      	cmp	r6, #0
 802233a:	d16f      	bne.n	802241c <__kernel_rem_pio2f+0x4e4>
 802233c:	edc8 6a00 	vstr	s13, [r8]
 8022340:	ed88 7a01 	vstr	s14, [r8, #4]
 8022344:	edc8 7a02 	vstr	s15, [r8, #8]
 8022348:	e026      	b.n	8022398 <__kernel_rem_pio2f+0x460>
 802234a:	aa56      	add	r2, sp, #344	; 0x158
 802234c:	4413      	add	r3, r2
 802234e:	ed1f 7a2b 	vldr	s14, [pc, #-172]	; 80222a4 <__kernel_rem_pio2f+0x36c>
 8022352:	3b9c      	subs	r3, #156	; 0x9c
 8022354:	4622      	mov	r2, r4
 8022356:	2a00      	cmp	r2, #0
 8022358:	da2b      	bge.n	80223b2 <__kernel_rem_pio2f+0x47a>
 802235a:	b386      	cbz	r6, 80223be <__kernel_rem_pio2f+0x486>
 802235c:	eef1 7a47 	vneg.f32	s15, s14
 8022360:	edc8 7a00 	vstr	s15, [r8]
 8022364:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8022368:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802236c:	aa2f      	add	r2, sp, #188	; 0xbc
 802236e:	2301      	movs	r3, #1
 8022370:	429c      	cmp	r4, r3
 8022372:	da27      	bge.n	80223c4 <__kernel_rem_pio2f+0x48c>
 8022374:	b10e      	cbz	r6, 802237a <__kernel_rem_pio2f+0x442>
 8022376:	eef1 7a67 	vneg.f32	s15, s15
 802237a:	edc8 7a01 	vstr	s15, [r8, #4]
 802237e:	e00b      	b.n	8022398 <__kernel_rem_pio2f+0x460>
 8022380:	aa56      	add	r2, sp, #344	; 0x158
 8022382:	4413      	add	r3, r2
 8022384:	ed5f 7a39 	vldr	s15, [pc, #-228]	; 80222a4 <__kernel_rem_pio2f+0x36c>
 8022388:	3b9c      	subs	r3, #156	; 0x9c
 802238a:	2c00      	cmp	r4, #0
 802238c:	da0b      	bge.n	80223a6 <__kernel_rem_pio2f+0x46e>
 802238e:	b10e      	cbz	r6, 8022394 <__kernel_rem_pio2f+0x45c>
 8022390:	eef1 7a67 	vneg.f32	s15, s15
 8022394:	edc8 7a00 	vstr	s15, [r8]
 8022398:	f00a 0007 	and.w	r0, sl, #7
 802239c:	b057      	add	sp, #348	; 0x15c
 802239e:	ecbd 8b04 	vpop	{d8-d9}
 80223a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80223a6:	ed33 7a01 	vldmdb	r3!, {s14}
 80223aa:	3c01      	subs	r4, #1
 80223ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 80223b0:	e7eb      	b.n	802238a <__kernel_rem_pio2f+0x452>
 80223b2:	ed73 7a01 	vldmdb	r3!, {s15}
 80223b6:	3a01      	subs	r2, #1
 80223b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80223bc:	e7cb      	b.n	8022356 <__kernel_rem_pio2f+0x41e>
 80223be:	eef0 7a47 	vmov.f32	s15, s14
 80223c2:	e7cd      	b.n	8022360 <__kernel_rem_pio2f+0x428>
 80223c4:	ecb2 7a01 	vldmia	r2!, {s14}
 80223c8:	3301      	adds	r3, #1
 80223ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80223ce:	e7cf      	b.n	8022370 <__kernel_rem_pio2f+0x438>
 80223d0:	ed52 7a02 	vldr	s15, [r2, #-8]
 80223d4:	ed72 6a01 	vldmdb	r2!, {s13}
 80223d8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80223dc:	3901      	subs	r1, #1
 80223de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80223e2:	ed02 7a01 	vstr	s14, [r2, #-4]
 80223e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80223ea:	edc2 7a00 	vstr	s15, [r2]
 80223ee:	e795      	b.n	802231c <__kernel_rem_pio2f+0x3e4>
 80223f0:	ed52 7a02 	vldr	s15, [r2, #-8]
 80223f4:	ed72 6a01 	vldmdb	r2!, {s13}
 80223f8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80223fc:	3901      	subs	r1, #1
 80223fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8022402:	ed02 7a01 	vstr	s14, [r2, #-4]
 8022406:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802240a:	edc2 7a00 	vstr	s15, [r2]
 802240e:	e789      	b.n	8022324 <__kernel_rem_pio2f+0x3ec>
 8022410:	ed33 7a01 	vldmdb	r3!, {s14}
 8022414:	3c01      	subs	r4, #1
 8022416:	ee77 7a87 	vadd.f32	s15, s15, s14
 802241a:	e787      	b.n	802232c <__kernel_rem_pio2f+0x3f4>
 802241c:	eef1 6a66 	vneg.f32	s13, s13
 8022420:	eeb1 7a47 	vneg.f32	s14, s14
 8022424:	edc8 6a00 	vstr	s13, [r8]
 8022428:	ed88 7a01 	vstr	s14, [r8, #4]
 802242c:	eef1 7a67 	vneg.f32	s15, s15
 8022430:	e788      	b.n	8022344 <__kernel_rem_pio2f+0x40c>
 8022432:	bf00      	nop

08022434 <__kernel_sinf>:
 8022434:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8022438:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 802243c:	ee07 0a90 	vmov	s15, r0
 8022440:	ee06 1a10 	vmov	s12, r1
 8022444:	da04      	bge.n	8022450 <__kernel_sinf+0x1c>
 8022446:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 802244a:	ee17 3a10 	vmov	r3, s14
 802244e:	b1e3      	cbz	r3, 802248a <__kernel_sinf+0x56>
 8022450:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8022454:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80224b0 <__kernel_sinf+0x7c>
 8022458:	ed9f 5a16 	vldr	s10, [pc, #88]	; 80224b4 <__kernel_sinf+0x80>
 802245c:	eea6 5a87 	vfma.f32	s10, s13, s14
 8022460:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80224b8 <__kernel_sinf+0x84>
 8022464:	eea5 7a26 	vfma.f32	s14, s10, s13
 8022468:	ed9f 5a14 	vldr	s10, [pc, #80]	; 80224bc <__kernel_sinf+0x88>
 802246c:	eea7 5a26 	vfma.f32	s10, s14, s13
 8022470:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80224c0 <__kernel_sinf+0x8c>
 8022474:	ee67 5aa6 	vmul.f32	s11, s15, s13
 8022478:	eea5 7a26 	vfma.f32	s14, s10, s13
 802247c:	b942      	cbnz	r2, 8022490 <__kernel_sinf+0x5c>
 802247e:	ed9f 6a11 	vldr	s12, [pc, #68]	; 80224c4 <__kernel_sinf+0x90>
 8022482:	eea6 6a87 	vfma.f32	s12, s13, s14
 8022486:	eee6 7a25 	vfma.f32	s15, s12, s11
 802248a:	ee17 0a90 	vmov	r0, s15
 802248e:	4770      	bx	lr
 8022490:	ee27 7a65 	vnmul.f32	s14, s14, s11
 8022494:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 8022498:	eea6 7a05 	vfma.f32	s14, s12, s10
 802249c:	ee97 6a26 	vfnms.f32	s12, s14, s13
 80224a0:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80224c8 <__kernel_sinf+0x94>
 80224a4:	eea5 6a87 	vfma.f32	s12, s11, s14
 80224a8:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80224ac:	e7ed      	b.n	802248a <__kernel_sinf+0x56>
 80224ae:	bf00      	nop
 80224b0:	2f2ec9d3 	.word	0x2f2ec9d3
 80224b4:	b2d72f34 	.word	0xb2d72f34
 80224b8:	3638ef1b 	.word	0x3638ef1b
 80224bc:	b9500d01 	.word	0xb9500d01
 80224c0:	3c088889 	.word	0x3c088889
 80224c4:	be2aaaab 	.word	0xbe2aaaab
 80224c8:	3e2aaaab 	.word	0x3e2aaaab

080224cc <__kernel_tanf>:
 80224cc:	ee07 1a10 	vmov	s14, r1
 80224d0:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
 80224d4:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 80224d8:	b510      	push	{r4, lr}
 80224da:	ee07 0a90 	vmov	s15, r0
 80224de:	4603      	mov	r3, r0
 80224e0:	da17      	bge.n	8022512 <__kernel_tanf+0x46>
 80224e2:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 80224e6:	ee16 4a90 	vmov	r4, s13
 80224ea:	bb44      	cbnz	r4, 802253e <__kernel_tanf+0x72>
 80224ec:	1c53      	adds	r3, r2, #1
 80224ee:	430b      	orrs	r3, r1
 80224f0:	d10a      	bne.n	8022508 <__kernel_tanf+0x3c>
 80224f2:	f7fe fd6f 	bl	8020fd4 <fabsf>
 80224f6:	ee07 0a90 	vmov	s15, r0
 80224fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80224fe:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8022502:	ee17 0a90 	vmov	r0, s15
 8022506:	bd10      	pop	{r4, pc}
 8022508:	2a01      	cmp	r2, #1
 802250a:	d0fa      	beq.n	8022502 <__kernel_tanf+0x36>
 802250c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8022510:	e7f5      	b.n	80224fe <__kernel_tanf+0x32>
 8022512:	484f      	ldr	r0, [pc, #316]	; (8022650 <__kernel_tanf+0x184>)
 8022514:	4281      	cmp	r1, r0
 8022516:	dd12      	ble.n	802253e <__kernel_tanf+0x72>
 8022518:	2b00      	cmp	r3, #0
 802251a:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8022654 <__kernel_tanf+0x188>
 802251e:	bfb8      	it	lt
 8022520:	eef1 7a67 	vneglt.f32	s15, s15
 8022524:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8022528:	eddf 6a4b 	vldr	s13, [pc, #300]	; 8022658 <__kernel_tanf+0x18c>
 802252c:	bfb8      	it	lt
 802252e:	eeb1 7a47 	vneglt.f32	s14, s14
 8022532:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8022536:	ee77 7a27 	vadd.f32	s15, s14, s15
 802253a:	ed9f 7a48 	vldr	s14, [pc, #288]	; 802265c <__kernel_tanf+0x190>
 802253e:	eddf 5a48 	vldr	s11, [pc, #288]	; 8022660 <__kernel_tanf+0x194>
 8022542:	ed9f 5a48 	vldr	s10, [pc, #288]	; 8022664 <__kernel_tanf+0x198>
 8022546:	eddf 4a48 	vldr	s9, [pc, #288]	; 8022668 <__kernel_tanf+0x19c>
 802254a:	4841      	ldr	r0, [pc, #260]	; (8022650 <__kernel_tanf+0x184>)
 802254c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8022550:	4281      	cmp	r1, r0
 8022552:	ee66 6a06 	vmul.f32	s13, s12, s12
 8022556:	ee27 4a86 	vmul.f32	s8, s15, s12
 802255a:	eea6 5aa5 	vfma.f32	s10, s13, s11
 802255e:	eddf 5a43 	vldr	s11, [pc, #268]	; 802266c <__kernel_tanf+0x1a0>
 8022562:	eee5 5a26 	vfma.f32	s11, s10, s13
 8022566:	ed9f 5a42 	vldr	s10, [pc, #264]	; 8022670 <__kernel_tanf+0x1a4>
 802256a:	eea5 5aa6 	vfma.f32	s10, s11, s13
 802256e:	eddf 5a41 	vldr	s11, [pc, #260]	; 8022674 <__kernel_tanf+0x1a8>
 8022572:	eee5 5a26 	vfma.f32	s11, s10, s13
 8022576:	ed9f 5a40 	vldr	s10, [pc, #256]	; 8022678 <__kernel_tanf+0x1ac>
 802257a:	eea5 5aa6 	vfma.f32	s10, s11, s13
 802257e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 802267c <__kernel_tanf+0x1b0>
 8022582:	eee6 5aa4 	vfma.f32	s11, s13, s9
 8022586:	eddf 4a3e 	vldr	s9, [pc, #248]	; 8022680 <__kernel_tanf+0x1b4>
 802258a:	eee5 4aa6 	vfma.f32	s9, s11, s13
 802258e:	eddf 5a3d 	vldr	s11, [pc, #244]	; 8022684 <__kernel_tanf+0x1b8>
 8022592:	eee4 5aa6 	vfma.f32	s11, s9, s13
 8022596:	eddf 4a3c 	vldr	s9, [pc, #240]	; 8022688 <__kernel_tanf+0x1bc>
 802259a:	eee5 4aa6 	vfma.f32	s9, s11, s13
 802259e:	eddf 5a3b 	vldr	s11, [pc, #236]	; 802268c <__kernel_tanf+0x1c0>
 80225a2:	eee4 5aa6 	vfma.f32	s11, s9, s13
 80225a6:	eef0 6a65 	vmov.f32	s13, s11
 80225aa:	eee5 6a06 	vfma.f32	s13, s10, s12
 80225ae:	eef0 5a47 	vmov.f32	s11, s14
 80225b2:	eee6 5a84 	vfma.f32	s11, s13, s8
 80225b6:	eddf 6a36 	vldr	s13, [pc, #216]	; 8022690 <__kernel_tanf+0x1c4>
 80225ba:	eea5 7a86 	vfma.f32	s14, s11, s12
 80225be:	eea4 7a26 	vfma.f32	s14, s8, s13
 80225c2:	ee37 6a87 	vadd.f32	s12, s15, s14
 80225c6:	dd1d      	ble.n	8022604 <__kernel_tanf+0x138>
 80225c8:	ee06 2a90 	vmov	s13, r2
 80225cc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80225d0:	ee26 5a06 	vmul.f32	s10, s12, s12
 80225d4:	ee36 6a26 	vadd.f32	s12, s12, s13
 80225d8:	179b      	asrs	r3, r3, #30
 80225da:	eec5 5a06 	vdiv.f32	s11, s10, s12
 80225de:	f003 0302 	and.w	r3, r3, #2
 80225e2:	f1c3 0301 	rsb	r3, r3, #1
 80225e6:	ee35 7ac7 	vsub.f32	s14, s11, s14
 80225ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80225ee:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80225f2:	eee7 6ac7 	vfms.f32	s13, s15, s14
 80225f6:	ee07 3a90 	vmov	s15, r3
 80225fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80225fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8022602:	e77e      	b.n	8022502 <__kernel_tanf+0x36>
 8022604:	2a01      	cmp	r2, #1
 8022606:	d01f      	beq.n	8022648 <__kernel_tanf+0x17c>
 8022608:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 802260c:	ee86 5a86 	vdiv.f32	s10, s13, s12
 8022610:	4b20      	ldr	r3, [pc, #128]	; (8022694 <__kernel_tanf+0x1c8>)
 8022612:	ee16 2a10 	vmov	r2, s12
 8022616:	401a      	ands	r2, r3
 8022618:	ee05 2a90 	vmov	s11, r2
 802261c:	ee15 2a10 	vmov	r2, s10
 8022620:	4013      	ands	r3, r2
 8022622:	ee06 3a90 	vmov	s13, r3
 8022626:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 802262a:	eea5 6aa6 	vfma.f32	s12, s11, s13
 802262e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8022632:	ee37 7a67 	vsub.f32	s14, s14, s15
 8022636:	eef0 7a46 	vmov.f32	s15, s12
 802263a:	eee6 7a87 	vfma.f32	s15, s13, s14
 802263e:	eee7 6a85 	vfma.f32	s13, s15, s10
 8022642:	eef0 7a66 	vmov.f32	s15, s13
 8022646:	e75c      	b.n	8022502 <__kernel_tanf+0x36>
 8022648:	eef0 7a46 	vmov.f32	s15, s12
 802264c:	e759      	b.n	8022502 <__kernel_tanf+0x36>
 802264e:	bf00      	nop
 8022650:	3f2ca13f 	.word	0x3f2ca13f
 8022654:	3f490fda 	.word	0x3f490fda
 8022658:	33222168 	.word	0x33222168
 802265c:	00000000 	.word	0x00000000
 8022660:	37d95384 	.word	0x37d95384
 8022664:	3895c07a 	.word	0x3895c07a
 8022668:	b79bae5f 	.word	0xb79bae5f
 802266c:	398137b9 	.word	0x398137b9
 8022670:	3abede48 	.word	0x3abede48
 8022674:	3c11371f 	.word	0x3c11371f
 8022678:	3d5d0dd1 	.word	0x3d5d0dd1
 802267c:	38a3f445 	.word	0x38a3f445
 8022680:	3a1a26c8 	.word	0x3a1a26c8
 8022684:	3b6b6916 	.word	0x3b6b6916
 8022688:	3cb327a4 	.word	0x3cb327a4
 802268c:	3e088889 	.word	0x3e088889
 8022690:	3eaaaaab 	.word	0x3eaaaaab
 8022694:	fffff000 	.word	0xfffff000

08022698 <matherr>:
 8022698:	2000      	movs	r0, #0
 802269a:	4770      	bx	lr

0802269c <nan>:
 802269c:	2000      	movs	r0, #0
 802269e:	4901      	ldr	r1, [pc, #4]	; (80226a4 <nan+0x8>)
 80226a0:	4770      	bx	lr
 80226a2:	bf00      	nop
 80226a4:	7ff80000 	.word	0x7ff80000

080226a8 <floorf>:
 80226a8:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
 80226ac:	0dca      	lsrs	r2, r1, #23
 80226ae:	3a7f      	subs	r2, #127	; 0x7f
 80226b0:	2a16      	cmp	r2, #22
 80226b2:	ee07 0a90 	vmov	s15, r0
 80226b6:	4603      	mov	r3, r0
 80226b8:	dc2a      	bgt.n	8022710 <floorf+0x68>
 80226ba:	2a00      	cmp	r2, #0
 80226bc:	da11      	bge.n	80226e2 <floorf+0x3a>
 80226be:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8022724 <floorf+0x7c>
 80226c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80226c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80226ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80226ce:	dd05      	ble.n	80226dc <floorf+0x34>
 80226d0:	2800      	cmp	r0, #0
 80226d2:	da25      	bge.n	8022720 <floorf+0x78>
 80226d4:	4a14      	ldr	r2, [pc, #80]	; (8022728 <floorf+0x80>)
 80226d6:	2900      	cmp	r1, #0
 80226d8:	bf18      	it	ne
 80226da:	4613      	movne	r3, r2
 80226dc:	ee07 3a90 	vmov	s15, r3
 80226e0:	e01b      	b.n	802271a <floorf+0x72>
 80226e2:	4912      	ldr	r1, [pc, #72]	; (802272c <floorf+0x84>)
 80226e4:	4111      	asrs	r1, r2
 80226e6:	4208      	tst	r0, r1
 80226e8:	d017      	beq.n	802271a <floorf+0x72>
 80226ea:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8022724 <floorf+0x7c>
 80226ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80226f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80226f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80226fa:	ddef      	ble.n	80226dc <floorf+0x34>
 80226fc:	2800      	cmp	r0, #0
 80226fe:	bfbe      	ittt	lt
 8022700:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8022704:	fa40 f202 	asrlt.w	r2, r0, r2
 8022708:	189b      	addlt	r3, r3, r2
 802270a:	ea23 0301 	bic.w	r3, r3, r1
 802270e:	e7e5      	b.n	80226dc <floorf+0x34>
 8022710:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8022714:	d301      	bcc.n	802271a <floorf+0x72>
 8022716:	ee77 7aa7 	vadd.f32	s15, s15, s15
 802271a:	ee17 0a90 	vmov	r0, s15
 802271e:	4770      	bx	lr
 8022720:	2300      	movs	r3, #0
 8022722:	e7db      	b.n	80226dc <floorf+0x34>
 8022724:	7149f2ca 	.word	0x7149f2ca
 8022728:	bf800000 	.word	0xbf800000
 802272c:	007fffff 	.word	0x007fffff

08022730 <scalbnf>:
 8022730:	b508      	push	{r3, lr}
 8022732:	f030 4300 	bics.w	r3, r0, #2147483648	; 0x80000000
 8022736:	ed2d 8b02 	vpush	{d8}
 802273a:	ee07 0a90 	vmov	s15, r0
 802273e:	4602      	mov	r2, r0
 8022740:	d004      	beq.n	802274c <scalbnf+0x1c>
 8022742:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8022746:	d306      	bcc.n	8022756 <scalbnf+0x26>
 8022748:	ee77 7aa7 	vadd.f32	s15, s15, s15
 802274c:	ecbd 8b02 	vpop	{d8}
 8022750:	ee17 0a90 	vmov	r0, s15
 8022754:	bd08      	pop	{r3, pc}
 8022756:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 802275a:	d220      	bcs.n	802279e <scalbnf+0x6e>
 802275c:	4b1f      	ldr	r3, [pc, #124]	; (80227dc <scalbnf+0xac>)
 802275e:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80227e0 <scalbnf+0xb0>
 8022762:	4299      	cmp	r1, r3
 8022764:	ee67 7a87 	vmul.f32	s15, s15, s14
 8022768:	db14      	blt.n	8022794 <scalbnf+0x64>
 802276a:	ee17 2a90 	vmov	r2, s15
 802276e:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8022772:	3b19      	subs	r3, #25
 8022774:	440b      	add	r3, r1
 8022776:	2bfe      	cmp	r3, #254	; 0xfe
 8022778:	dd13      	ble.n	80227a2 <scalbnf+0x72>
 802277a:	ed9f 8a1a 	vldr	s16, [pc, #104]	; 80227e4 <scalbnf+0xb4>
 802277e:	ee17 1a90 	vmov	r1, s15
 8022782:	ee18 0a10 	vmov	r0, s16
 8022786:	f000 f833 	bl	80227f0 <copysignf>
 802278a:	ee07 0a90 	vmov	s15, r0
 802278e:	ee67 7a88 	vmul.f32	s15, s15, s16
 8022792:	e7db      	b.n	802274c <scalbnf+0x1c>
 8022794:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80227e8 <scalbnf+0xb8>
 8022798:	ee67 7a87 	vmul.f32	s15, s15, s14
 802279c:	e7d6      	b.n	802274c <scalbnf+0x1c>
 802279e:	0ddb      	lsrs	r3, r3, #23
 80227a0:	e7e8      	b.n	8022774 <scalbnf+0x44>
 80227a2:	2b00      	cmp	r3, #0
 80227a4:	dd06      	ble.n	80227b4 <scalbnf+0x84>
 80227a6:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 80227aa:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80227ae:	ee07 3a90 	vmov	s15, r3
 80227b2:	e7cb      	b.n	802274c <scalbnf+0x1c>
 80227b4:	f113 0f16 	cmn.w	r3, #22
 80227b8:	da06      	bge.n	80227c8 <scalbnf+0x98>
 80227ba:	f24c 3350 	movw	r3, #50000	; 0xc350
 80227be:	4299      	cmp	r1, r3
 80227c0:	dcdb      	bgt.n	802277a <scalbnf+0x4a>
 80227c2:	ed9f 8a09 	vldr	s16, [pc, #36]	; 80227e8 <scalbnf+0xb8>
 80227c6:	e7da      	b.n	802277e <scalbnf+0x4e>
 80227c8:	3319      	adds	r3, #25
 80227ca:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 80227ce:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80227d2:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80227ec <scalbnf+0xbc>
 80227d6:	ee07 3a90 	vmov	s15, r3
 80227da:	e7dd      	b.n	8022798 <scalbnf+0x68>
 80227dc:	ffff3cb0 	.word	0xffff3cb0
 80227e0:	4c000000 	.word	0x4c000000
 80227e4:	7149f2ca 	.word	0x7149f2ca
 80227e8:	0da24260 	.word	0x0da24260
 80227ec:	33000000 	.word	0x33000000

080227f0 <copysignf>:
 80227f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80227f4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80227f8:	4308      	orrs	r0, r1
 80227fa:	4770      	bx	lr

080227fc <__errno>:
 80227fc:	4b01      	ldr	r3, [pc, #4]	; (8022804 <__errno+0x8>)
 80227fe:	6818      	ldr	r0, [r3, #0]
 8022800:	4770      	bx	lr
 8022802:	bf00      	nop
 8022804:	2000151c 	.word	0x2000151c

08022808 <__libc_init_array>:
 8022808:	b570      	push	{r4, r5, r6, lr}
 802280a:	4e0d      	ldr	r6, [pc, #52]	; (8022840 <__libc_init_array+0x38>)
 802280c:	4c0d      	ldr	r4, [pc, #52]	; (8022844 <__libc_init_array+0x3c>)
 802280e:	1ba4      	subs	r4, r4, r6
 8022810:	10a4      	asrs	r4, r4, #2
 8022812:	2500      	movs	r5, #0
 8022814:	42a5      	cmp	r5, r4
 8022816:	d109      	bne.n	802282c <__libc_init_array+0x24>
 8022818:	4e0b      	ldr	r6, [pc, #44]	; (8022848 <__libc_init_array+0x40>)
 802281a:	4c0c      	ldr	r4, [pc, #48]	; (802284c <__libc_init_array+0x44>)
 802281c:	f000 f84c 	bl	80228b8 <_init>
 8022820:	1ba4      	subs	r4, r4, r6
 8022822:	10a4      	asrs	r4, r4, #2
 8022824:	2500      	movs	r5, #0
 8022826:	42a5      	cmp	r5, r4
 8022828:	d105      	bne.n	8022836 <__libc_init_array+0x2e>
 802282a:	bd70      	pop	{r4, r5, r6, pc}
 802282c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8022830:	4798      	blx	r3
 8022832:	3501      	adds	r5, #1
 8022834:	e7ee      	b.n	8022814 <__libc_init_array+0xc>
 8022836:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 802283a:	4798      	blx	r3
 802283c:	3501      	adds	r5, #1
 802283e:	e7f2      	b.n	8022826 <__libc_init_array+0x1e>
 8022840:	080233d0 	.word	0x080233d0
 8022844:	080233d0 	.word	0x080233d0
 8022848:	080233d0 	.word	0x080233d0
 802284c:	080233d4 	.word	0x080233d4

08022850 <memcpy>:
 8022850:	b510      	push	{r4, lr}
 8022852:	1e43      	subs	r3, r0, #1
 8022854:	440a      	add	r2, r1
 8022856:	4291      	cmp	r1, r2
 8022858:	d100      	bne.n	802285c <memcpy+0xc>
 802285a:	bd10      	pop	{r4, pc}
 802285c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8022860:	f803 4f01 	strb.w	r4, [r3, #1]!
 8022864:	e7f7      	b.n	8022856 <memcpy+0x6>

08022866 <memmove>:
 8022866:	4288      	cmp	r0, r1
 8022868:	b510      	push	{r4, lr}
 802286a:	eb01 0302 	add.w	r3, r1, r2
 802286e:	d807      	bhi.n	8022880 <memmove+0x1a>
 8022870:	1e42      	subs	r2, r0, #1
 8022872:	4299      	cmp	r1, r3
 8022874:	d00a      	beq.n	802288c <memmove+0x26>
 8022876:	f811 4b01 	ldrb.w	r4, [r1], #1
 802287a:	f802 4f01 	strb.w	r4, [r2, #1]!
 802287e:	e7f8      	b.n	8022872 <memmove+0xc>
 8022880:	4283      	cmp	r3, r0
 8022882:	d9f5      	bls.n	8022870 <memmove+0xa>
 8022884:	1881      	adds	r1, r0, r2
 8022886:	1ad2      	subs	r2, r2, r3
 8022888:	42d3      	cmn	r3, r2
 802288a:	d100      	bne.n	802288e <memmove+0x28>
 802288c:	bd10      	pop	{r4, pc}
 802288e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8022892:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8022896:	e7f7      	b.n	8022888 <memmove+0x22>

08022898 <memset>:
 8022898:	4402      	add	r2, r0
 802289a:	4603      	mov	r3, r0
 802289c:	4293      	cmp	r3, r2
 802289e:	d100      	bne.n	80228a2 <memset+0xa>
 80228a0:	4770      	bx	lr
 80228a2:	f803 1b01 	strb.w	r1, [r3], #1
 80228a6:	e7f9      	b.n	802289c <memset+0x4>

080228a8 <strcpy>:
 80228a8:	4603      	mov	r3, r0
 80228aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80228ae:	f803 2b01 	strb.w	r2, [r3], #1
 80228b2:	2a00      	cmp	r2, #0
 80228b4:	d1f9      	bne.n	80228aa <strcpy+0x2>
 80228b6:	4770      	bx	lr

080228b8 <_init>:
 80228b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80228ba:	bf00      	nop
 80228bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80228be:	bc08      	pop	{r3}
 80228c0:	469e      	mov	lr, r3
 80228c2:	4770      	bx	lr

080228c4 <_fini>:
 80228c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80228c6:	bf00      	nop
 80228c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80228ca:	bc08      	pop	{r3}
 80228cc:	469e      	mov	lr, r3
 80228ce:	4770      	bx	lr
