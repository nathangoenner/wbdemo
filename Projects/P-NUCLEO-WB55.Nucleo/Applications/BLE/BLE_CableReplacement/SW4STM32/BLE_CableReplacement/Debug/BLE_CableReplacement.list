
BLE_CableReplacement.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ed8  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001970  08007018  08007018  00017018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008988  08008988  00018988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008990  08008990  00018990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008994  08008994  00018994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000094  20000004  08008998  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  20000098  08008a2c  00020098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_APP_CONTEXT 000000a2  20000134  08008ac5  00020134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 BLE_DRIVER_CONTEXT 0000003e  200001d8  08008b67  000201d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 SYSTEM_DRIVER_CONTEXT 00000011  20000218  08008ba5  00020218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00001fac  2000022c  08008bb6  0002022c  2**2
                  ALLOC
 12 ._user_heap_stack 00001400  200021d8  08008bb6  000221d8  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00030a44  2**0
                  CONTENTS, READONLY
 14 MAPPING_TABLE 00000024  20030000  20030000  00030000  2**2
                  ALLOC
 15 MB_MEM1       000001a0  20030024  20030024  00030000  2**2
                  ALLOC
 16 MB_MEM2       00000880  200301c4  200301c4  000301c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 17 .debug_info   0003ddd3  00000000  00000000  00030a74  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_abbrev 000076dd  00000000  00000000  0006e847  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    00012a14  00000000  00000000  00075f24  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_aranges 000017c0  00000000  00000000  00088938  2**3
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_ranges 00002118  00000000  00000000  0008a0f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_macro  00034384  00000000  00000000  0008c210  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_line   000271a6  00000000  00000000  000c0594  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_str    0012a996  00000000  00000000  000e773a  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .comment      0000007b  00000000  00000000  002120d0  2**0
                  CONTENTS, READONLY
 26 .debug_frame  00005298  00000000  00000000  0021214c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000022c 	.word	0x2000022c
 800015c:	00000000 	.word	0x00000000
 8000160:	08007000 	.word	0x08007000

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000230 	.word	0x20000230
 800017c:	08007000 	.word	0x08007000

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b972 	b.w	800052c <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9e08      	ldr	r6, [sp, #32]
 8000266:	4604      	mov	r4, r0
 8000268:	4688      	mov	r8, r1
 800026a:	2b00      	cmp	r3, #0
 800026c:	d14b      	bne.n	8000306 <__udivmoddi4+0xa6>
 800026e:	428a      	cmp	r2, r1
 8000270:	4615      	mov	r5, r2
 8000272:	d967      	bls.n	8000344 <__udivmoddi4+0xe4>
 8000274:	fab2 f282 	clz	r2, r2
 8000278:	b14a      	cbz	r2, 800028e <__udivmoddi4+0x2e>
 800027a:	f1c2 0720 	rsb	r7, r2, #32
 800027e:	fa01 f302 	lsl.w	r3, r1, r2
 8000282:	fa20 f707 	lsr.w	r7, r0, r7
 8000286:	4095      	lsls	r5, r2
 8000288:	ea47 0803 	orr.w	r8, r7, r3
 800028c:	4094      	lsls	r4, r2
 800028e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000292:	0c23      	lsrs	r3, r4, #16
 8000294:	fbb8 f7fe 	udiv	r7, r8, lr
 8000298:	fa1f fc85 	uxth.w	ip, r5
 800029c:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002a4:	fb07 f10c 	mul.w	r1, r7, ip
 80002a8:	4299      	cmp	r1, r3
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x60>
 80002ac:	18eb      	adds	r3, r5, r3
 80002ae:	f107 30ff 	add.w	r0, r7, #4294967295
 80002b2:	f080 811b 	bcs.w	80004ec <__udivmoddi4+0x28c>
 80002b6:	4299      	cmp	r1, r3
 80002b8:	f240 8118 	bls.w	80004ec <__udivmoddi4+0x28c>
 80002bc:	3f02      	subs	r7, #2
 80002be:	442b      	add	r3, r5
 80002c0:	1a5b      	subs	r3, r3, r1
 80002c2:	b2a4      	uxth	r4, r4
 80002c4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002c8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002cc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002d4:	45a4      	cmp	ip, r4
 80002d6:	d909      	bls.n	80002ec <__udivmoddi4+0x8c>
 80002d8:	192c      	adds	r4, r5, r4
 80002da:	f100 33ff 	add.w	r3, r0, #4294967295
 80002de:	f080 8107 	bcs.w	80004f0 <__udivmoddi4+0x290>
 80002e2:	45a4      	cmp	ip, r4
 80002e4:	f240 8104 	bls.w	80004f0 <__udivmoddi4+0x290>
 80002e8:	3802      	subs	r0, #2
 80002ea:	442c      	add	r4, r5
 80002ec:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f0:	eba4 040c 	sub.w	r4, r4, ip
 80002f4:	2700      	movs	r7, #0
 80002f6:	b11e      	cbz	r6, 8000300 <__udivmoddi4+0xa0>
 80002f8:	40d4      	lsrs	r4, r2
 80002fa:	2300      	movs	r3, #0
 80002fc:	e9c6 4300 	strd	r4, r3, [r6]
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	428b      	cmp	r3, r1
 8000308:	d909      	bls.n	800031e <__udivmoddi4+0xbe>
 800030a:	2e00      	cmp	r6, #0
 800030c:	f000 80eb 	beq.w	80004e6 <__udivmoddi4+0x286>
 8000310:	2700      	movs	r7, #0
 8000312:	e9c6 0100 	strd	r0, r1, [r6]
 8000316:	4638      	mov	r0, r7
 8000318:	4639      	mov	r1, r7
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	fab3 f783 	clz	r7, r3
 8000322:	2f00      	cmp	r7, #0
 8000324:	d147      	bne.n	80003b6 <__udivmoddi4+0x156>
 8000326:	428b      	cmp	r3, r1
 8000328:	d302      	bcc.n	8000330 <__udivmoddi4+0xd0>
 800032a:	4282      	cmp	r2, r0
 800032c:	f200 80fa 	bhi.w	8000524 <__udivmoddi4+0x2c4>
 8000330:	1a84      	subs	r4, r0, r2
 8000332:	eb61 0303 	sbc.w	r3, r1, r3
 8000336:	2001      	movs	r0, #1
 8000338:	4698      	mov	r8, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d0e0      	beq.n	8000300 <__udivmoddi4+0xa0>
 800033e:	e9c6 4800 	strd	r4, r8, [r6]
 8000342:	e7dd      	b.n	8000300 <__udivmoddi4+0xa0>
 8000344:	b902      	cbnz	r2, 8000348 <__udivmoddi4+0xe8>
 8000346:	deff      	udf	#255	; 0xff
 8000348:	fab2 f282 	clz	r2, r2
 800034c:	2a00      	cmp	r2, #0
 800034e:	f040 808f 	bne.w	8000470 <__udivmoddi4+0x210>
 8000352:	1b49      	subs	r1, r1, r5
 8000354:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000358:	fa1f f885 	uxth.w	r8, r5
 800035c:	2701      	movs	r7, #1
 800035e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000362:	0c23      	lsrs	r3, r4, #16
 8000364:	fb0e 111c 	mls	r1, lr, ip, r1
 8000368:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800036c:	fb08 f10c 	mul.w	r1, r8, ip
 8000370:	4299      	cmp	r1, r3
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x124>
 8000374:	18eb      	adds	r3, r5, r3
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x122>
 800037c:	4299      	cmp	r1, r3
 800037e:	f200 80cd 	bhi.w	800051c <__udivmoddi4+0x2bc>
 8000382:	4684      	mov	ip, r0
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000390:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x14c>
 800039c:	192c      	adds	r4, r5, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x14a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80b6 	bhi.w	8000516 <__udivmoddi4+0x2b6>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e79f      	b.n	80002f6 <__udivmoddi4+0x96>
 80003b6:	f1c7 0c20 	rsb	ip, r7, #32
 80003ba:	40bb      	lsls	r3, r7
 80003bc:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003c4:	fa01 f407 	lsl.w	r4, r1, r7
 80003c8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003cc:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003d4:	4325      	orrs	r5, r4
 80003d6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003da:	0c2c      	lsrs	r4, r5, #16
 80003dc:	fb08 3319 	mls	r3, r8, r9, r3
 80003e0:	fa1f fa8e 	uxth.w	sl, lr
 80003e4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003e8:	fb09 f40a 	mul.w	r4, r9, sl
 80003ec:	429c      	cmp	r4, r3
 80003ee:	fa02 f207 	lsl.w	r2, r2, r7
 80003f2:	fa00 f107 	lsl.w	r1, r0, r7
 80003f6:	d90b      	bls.n	8000410 <__udivmoddi4+0x1b0>
 80003f8:	eb1e 0303 	adds.w	r3, lr, r3
 80003fc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000400:	f080 8087 	bcs.w	8000512 <__udivmoddi4+0x2b2>
 8000404:	429c      	cmp	r4, r3
 8000406:	f240 8084 	bls.w	8000512 <__udivmoddi4+0x2b2>
 800040a:	f1a9 0902 	sub.w	r9, r9, #2
 800040e:	4473      	add	r3, lr
 8000410:	1b1b      	subs	r3, r3, r4
 8000412:	b2ad      	uxth	r5, r5
 8000414:	fbb3 f0f8 	udiv	r0, r3, r8
 8000418:	fb08 3310 	mls	r3, r8, r0, r3
 800041c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000420:	fb00 fa0a 	mul.w	sl, r0, sl
 8000424:	45a2      	cmp	sl, r4
 8000426:	d908      	bls.n	800043a <__udivmoddi4+0x1da>
 8000428:	eb1e 0404 	adds.w	r4, lr, r4
 800042c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000430:	d26b      	bcs.n	800050a <__udivmoddi4+0x2aa>
 8000432:	45a2      	cmp	sl, r4
 8000434:	d969      	bls.n	800050a <__udivmoddi4+0x2aa>
 8000436:	3802      	subs	r0, #2
 8000438:	4474      	add	r4, lr
 800043a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800043e:	fba0 8902 	umull	r8, r9, r0, r2
 8000442:	eba4 040a 	sub.w	r4, r4, sl
 8000446:	454c      	cmp	r4, r9
 8000448:	46c2      	mov	sl, r8
 800044a:	464b      	mov	r3, r9
 800044c:	d354      	bcc.n	80004f8 <__udivmoddi4+0x298>
 800044e:	d051      	beq.n	80004f4 <__udivmoddi4+0x294>
 8000450:	2e00      	cmp	r6, #0
 8000452:	d069      	beq.n	8000528 <__udivmoddi4+0x2c8>
 8000454:	ebb1 050a 	subs.w	r5, r1, sl
 8000458:	eb64 0403 	sbc.w	r4, r4, r3
 800045c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000460:	40fd      	lsrs	r5, r7
 8000462:	40fc      	lsrs	r4, r7
 8000464:	ea4c 0505 	orr.w	r5, ip, r5
 8000468:	e9c6 5400 	strd	r5, r4, [r6]
 800046c:	2700      	movs	r7, #0
 800046e:	e747      	b.n	8000300 <__udivmoddi4+0xa0>
 8000470:	f1c2 0320 	rsb	r3, r2, #32
 8000474:	fa20 f703 	lsr.w	r7, r0, r3
 8000478:	4095      	lsls	r5, r2
 800047a:	fa01 f002 	lsl.w	r0, r1, r2
 800047e:	fa21 f303 	lsr.w	r3, r1, r3
 8000482:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000486:	4338      	orrs	r0, r7
 8000488:	0c01      	lsrs	r1, r0, #16
 800048a:	fbb3 f7fe 	udiv	r7, r3, lr
 800048e:	fa1f f885 	uxth.w	r8, r5
 8000492:	fb0e 3317 	mls	r3, lr, r7, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb07 f308 	mul.w	r3, r7, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	fa04 f402 	lsl.w	r4, r4, r2
 80004a4:	d907      	bls.n	80004b6 <__udivmoddi4+0x256>
 80004a6:	1869      	adds	r1, r5, r1
 80004a8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ac:	d22f      	bcs.n	800050e <__udivmoddi4+0x2ae>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d92d      	bls.n	800050e <__udivmoddi4+0x2ae>
 80004b2:	3f02      	subs	r7, #2
 80004b4:	4429      	add	r1, r5
 80004b6:	1acb      	subs	r3, r1, r3
 80004b8:	b281      	uxth	r1, r0
 80004ba:	fbb3 f0fe 	udiv	r0, r3, lr
 80004be:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c6:	fb00 f308 	mul.w	r3, r0, r8
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x27e>
 80004ce:	1869      	adds	r1, r5, r1
 80004d0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004d4:	d217      	bcs.n	8000506 <__udivmoddi4+0x2a6>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d915      	bls.n	8000506 <__udivmoddi4+0x2a6>
 80004da:	3802      	subs	r0, #2
 80004dc:	4429      	add	r1, r5
 80004de:	1ac9      	subs	r1, r1, r3
 80004e0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004e4:	e73b      	b.n	800035e <__udivmoddi4+0xfe>
 80004e6:	4637      	mov	r7, r6
 80004e8:	4630      	mov	r0, r6
 80004ea:	e709      	b.n	8000300 <__udivmoddi4+0xa0>
 80004ec:	4607      	mov	r7, r0
 80004ee:	e6e7      	b.n	80002c0 <__udivmoddi4+0x60>
 80004f0:	4618      	mov	r0, r3
 80004f2:	e6fb      	b.n	80002ec <__udivmoddi4+0x8c>
 80004f4:	4541      	cmp	r1, r8
 80004f6:	d2ab      	bcs.n	8000450 <__udivmoddi4+0x1f0>
 80004f8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004fc:	eb69 020e 	sbc.w	r2, r9, lr
 8000500:	3801      	subs	r0, #1
 8000502:	4613      	mov	r3, r2
 8000504:	e7a4      	b.n	8000450 <__udivmoddi4+0x1f0>
 8000506:	4660      	mov	r0, ip
 8000508:	e7e9      	b.n	80004de <__udivmoddi4+0x27e>
 800050a:	4618      	mov	r0, r3
 800050c:	e795      	b.n	800043a <__udivmoddi4+0x1da>
 800050e:	4667      	mov	r7, ip
 8000510:	e7d1      	b.n	80004b6 <__udivmoddi4+0x256>
 8000512:	4681      	mov	r9, r0
 8000514:	e77c      	b.n	8000410 <__udivmoddi4+0x1b0>
 8000516:	3802      	subs	r0, #2
 8000518:	442c      	add	r4, r5
 800051a:	e747      	b.n	80003ac <__udivmoddi4+0x14c>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	442b      	add	r3, r5
 8000522:	e72f      	b.n	8000384 <__udivmoddi4+0x124>
 8000524:	4638      	mov	r0, r7
 8000526:	e708      	b.n	800033a <__udivmoddi4+0xda>
 8000528:	4637      	mov	r7, r6
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0xa0>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <APPE_SysStatusNot>:


static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
  return;
}
 8000530:	4770      	bx	lr

08000532 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 8000532:	b508      	push	{r3, lr}
  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000534:	f005 f83c 	bl	80055b0 <TL_TRACES_Init>

  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000538:	2100      	movs	r1, #0
 800053a:	2001      	movs	r0, #1
 800053c:	f005 fad6 	bl	8005aec <UTIL_LPM_SetOffMode>

  APP_BLE_Init( );
  return;
}
 8000540:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  APP_BLE_Init( );
 8000544:	f000 bf14 	b.w	8001370 <APP_BLE_Init>

08000548 <APPE_Init>:
{
 8000548:	b510      	push	{r4, lr}
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800054a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800054e:	b088      	sub	sp, #32
 8000550:	6893      	ldr	r3, [r2, #8]
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000552:	4c28      	ldr	r4, [pc, #160]	; (80005f4 <APPE_Init+0xac>)
 8000554:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000558:	6093      	str	r3, [r2, #8]
  UTIL_LPM_Init( );
 800055a:	f005 fabf 	bl	8005adc <UTIL_LPM_Init>
  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 800055e:	4926      	ldr	r1, [pc, #152]	; (80005f8 <APPE_Init+0xb0>)
 8000560:	2000      	movs	r0, #0
 8000562:	f000 f951 	bl	8000808 <HW_TS_Init>
  HAL_DBGMCU_EnableDBGSleepMode();
 8000566:	f002 fad5 	bl	8002b14 <HAL_DBGMCU_EnableDBGSleepMode>
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR2, ExtiLine);
 800056a:	4b24      	ldr	r3, [pc, #144]	; (80005fc <APPE_Init+0xb4>)
 800056c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000570:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000574:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->C2IMR2, ExtiLine);
 8000578:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800057c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000580:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  DbgTraceInit();
 8000584:	f005 f85c 	bl	8005640 <DbgTraceInit>
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8000588:	2101      	movs	r1, #1
 800058a:	4608      	mov	r0, r1
 800058c:	f005 faae 	bl	8005aec <UTIL_LPM_SetOffMode>
  BSP_LED_Init(LED_BLUE);
 8000590:	2000      	movs	r0, #0
 8000592:	f002 f999 	bl	80028c8 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 8000596:	2001      	movs	r0, #1
 8000598:	f002 f996 	bl	80028c8 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 800059c:	2002      	movs	r0, #2
 800059e:	f002 f993 	bl	80028c8 <BSP_LED_Init>
  BSP_LED_On(LED_GREEN);
 80005a2:	2001      	movs	r0, #1
 80005a4:	f002 f9b8 	bl	8002918 <BSP_LED_On>
  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 80005a8:	2101      	movs	r1, #1
 80005aa:	2000      	movs	r0, #0
 80005ac:	f002 f9d0 	bl	8002950 <BSP_PB_Init>
  TL_Init();
 80005b0:	f004 ff22 	bl	80053f8 <TL_Init>
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc );
 80005b4:	4a12      	ldr	r2, [pc, #72]	; (8000600 <APPE_Init+0xb8>)
 80005b6:	2100      	movs	r1, #0
 80005b8:	2040      	movs	r0, #64	; 0x40
 80005ba:	f005 fac9 	bl	8005b50 <UTIL_SEQ_RegTask>
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80005be:	4669      	mov	r1, sp
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80005c0:	4b10      	ldr	r3, [pc, #64]	; (8000604 <APPE_Init+0xbc>)
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80005c2:	4811      	ldr	r0, [pc, #68]	; (8000608 <APPE_Init+0xc0>)
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80005c4:	9400      	str	r4, [sp, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80005c6:	9301      	str	r3, [sp, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80005c8:	f004 fe6c 	bl	80052a4 <shci_init>
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80005cc:	f504 7386 	add.w	r3, r4, #268	; 0x10c
 80005d0:	9302      	str	r3, [sp, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80005d2:	f504 7306 	add.w	r3, r4, #536	; 0x218
 80005d6:	9303      	str	r3, [sp, #12]
  TL_MM_Init( &tl_mm_config );
 80005d8:	a802      	add	r0, sp, #8
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80005da:	f240 533c 	movw	r3, #1340	; 0x53c
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80005de:	f504 7449 	add.w	r4, r4, #804	; 0x324
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80005e2:	9305      	str	r3, [sp, #20]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80005e4:	9404      	str	r4, [sp, #16]
  TL_MM_Init( &tl_mm_config );
 80005e6:	f004 ffb5 	bl	8005554 <TL_MM_Init>
  TL_Enable();
 80005ea:	f004 ff03 	bl	80053f4 <TL_Enable>
}
 80005ee:	b008      	add	sp, #32
 80005f0:	bd10      	pop	{r4, pc}
 80005f2:	bf00      	nop
 80005f4:	200301c4 	.word	0x200301c4
 80005f8:	2000042c 	.word	0x2000042c
 80005fc:	58000800 	.word	0x58000800
 8000600:	080052f1 	.word	0x080052f1
 8000604:	08000531 	.word	0x08000531
 8000608:	08000533 	.word	0x08000533

0800060c <UTIL_SEQ_Idle>:
{
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
#endif
  return;
}
 800060c:	4770      	bx	lr

0800060e <UTIL_SEQ_EvtIdle>:

void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 800060e:	f04f 30ff 	mov.w	r0, #4294967295
 8000612:	f005 bae9 	b.w	8005be8 <UTIL_SEQ_Run>

08000616 <shci_notify_asynch_evt>:
  return;
}

void shci_notify_asynch_evt(void* pdata)
{
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8000616:	2100      	movs	r1, #0
 8000618:	2040      	movs	r0, #64	; 0x40
 800061a:	f005 baa9 	b.w	8005b70 <UTIL_SEQ_SetTask>

0800061e <shci_cmd_resp_release>:
  return;
}

void shci_cmd_resp_release(uint32_t flag)
{
  UTIL_SEQ_SetEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 800061e:	2002      	movs	r0, #2
 8000620:	f005 bad4 	b.w	8005bcc <UTIL_SEQ_SetEvt>

08000624 <shci_cmd_resp_wait>:
  return;
}

void shci_cmd_resp_wait(uint32_t timeout)
{
  UTIL_SEQ_WaitEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000624:	2002      	movs	r0, #2
 8000626:	f005 bb4b 	b.w	8005cc0 <UTIL_SEQ_WaitEvt>

0800062a <DbgOutputInit>:


#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
  HW_UART_Init(CFG_DEBUG_TRACE_UART);
 800062a:	2002      	movs	r0, #2
 800062c:	f000 bb0c 	b.w	8000c48 <HW_UART_Init>

08000630 <DbgOutputTraces>:
}


void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8000630:	4613      	mov	r3, r2
 8000632:	460a      	mov	r2, r1
 8000634:	4601      	mov	r1, r0
 8000636:	2002      	movs	r0, #2
 8000638:	f000 bb76 	b.w	8000d28 <HW_UART_Transmit_DMA>

0800063c <ReadRtcSsrValue>:
static uint32_t ReadRtcSsrValue(void)
{
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800063c:	4a05      	ldr	r2, [pc, #20]	; (8000654 <ReadRtcSsrValue+0x18>)
 800063e:	6a90      	ldr	r0, [r2, #40]	; 0x28

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000640:	6a93      	ldr	r3, [r2, #40]	; 0x28
  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000642:	b280      	uxth	r0, r0
  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000644:	b29b      	uxth	r3, r3

  while(first_read != second_read)
 8000646:	4298      	cmp	r0, r3
 8000648:	d100      	bne.n	800064c <ReadRtcSsrValue+0x10>

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
  }

  return second_read;
}
 800064a:	4770      	bx	lr
    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800064c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800064e:	4618      	mov	r0, r3
 8000650:	b28b      	uxth	r3, r1
 8000652:	e7f8      	b.n	8000646 <ReadRtcSsrValue+0xa>
 8000654:	40002800 	.word	0x40002800

08000658 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000658:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 800065a:	4b17      	ldr	r3, [pc, #92]	; (80006b8 <UnlinkTimer+0x60>)
 800065c:	781a      	ldrb	r2, [r3, #0]
 800065e:	4282      	cmp	r2, r0
 8000660:	f04f 0418 	mov.w	r4, #24
 8000664:	d115      	bne.n	8000692 <UnlinkTimer+0x3a>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000666:	781a      	ldrb	r2, [r3, #0]
 8000668:	b2d2      	uxtb	r2, r2
 800066a:	705a      	strb	r2, [r3, #1]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 800066c:	fb04 3200 	mla	r2, r4, r0, r3
 8000670:	7e52      	ldrb	r2, [r2, #25]
 8000672:	b2d2      	uxtb	r2, r2
 8000674:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000676:	2218      	movs	r2, #24
 8000678:	fb02 3000 	mla	r0, r2, r0, r3
 800067c:	2201      	movs	r2, #1
 800067e:	7402      	strb	r2, [r0, #16]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000680:	781a      	ldrb	r2, [r3, #0]
 8000682:	2a06      	cmp	r2, #6
 8000684:	d104      	bne.n	8000690 <UnlinkTimer+0x38>
 8000686:	b919      	cbnz	r1, 8000690 <UnlinkTimer+0x38>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000688:	f04f 32ff 	mov.w	r2, #4294967295
 800068c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }

  return;
}
 8000690:	bdf0      	pop	{r4, r5, r6, r7, pc}
    previous_id = aTimerContext[TimerID].PreviousID;
 8000692:	fb04 3500 	mla	r5, r4, r0, r3
 8000696:	7e2e      	ldrb	r6, [r5, #24]
    next_id = aTimerContext[TimerID].NextID;
 8000698:	7e6a      	ldrb	r2, [r5, #25]
    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 800069a:	7e6f      	ldrb	r7, [r5, #25]
 800069c:	fb04 3606 	mla	r6, r4, r6, r3
    next_id = aTimerContext[TimerID].NextID;
 80006a0:	b2d2      	uxtb	r2, r2
    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 80006a2:	b2ff      	uxtb	r7, r7
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80006a4:	2a06      	cmp	r2, #6
    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 80006a6:	7677      	strb	r7, [r6, #25]
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 80006a8:	bf1f      	itttt	ne
 80006aa:	7e2d      	ldrbne	r5, [r5, #24]
 80006ac:	fb04 3202 	mlane	r2, r4, r2, r3
 80006b0:	b2ed      	uxtbne	r5, r5
 80006b2:	7615      	strbne	r5, [r2, #24]
 80006b4:	e7df      	b.n	8000676 <UnlinkTimer+0x1e>
 80006b6:	bf00      	nop
 80006b8:	20000098 	.word	0x20000098

080006bc <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 80006bc:	b510      	push	{r4, lr}
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 80006be:	4c0d      	ldr	r4, [pc, #52]	; (80006f4 <ReturnTimeElapsed+0x38>)
 80006c0:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80006c4:	3301      	adds	r3, #1
 80006c6:	d013      	beq.n	80006f0 <ReturnTimeElapsed+0x34>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 80006c8:	f7ff ffb8 	bl	800063c <ReadRtcSsrValue>

    if (SSRValueOnLastSetup >= return_value)
 80006cc:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80006d0:	4283      	cmp	r3, r0
 80006d2:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <ReturnTimeElapsed+0x3c>)
      return_value = SSRValueOnLastSetup - return_value;
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
      return_value = SSRValueOnLastSetup + wrap_counter;
 80006d4:	bf3b      	ittet	cc
 80006d6:	f8d4 1094 	ldrcc.w	r1, [r4, #148]	; 0x94
      wrap_counter = SynchPrescalerUserConfig - return_value;
 80006da:	881a      	ldrhcc	r2, [r3, #0]
      return_value = SSRValueOnLastSetup - return_value;
 80006dc:	f8d4 2094 	ldrcs.w	r2, [r4, #148]	; 0x94
      return_value = SSRValueOnLastSetup + wrap_counter;
 80006e0:	1852      	addcc	r2, r2, r1
 80006e2:	1a10      	subs	r0, r2, r0

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 80006e4:	789a      	ldrb	r2, [r3, #2]
    return_value = return_value >> WakeupTimerDivider;
 80006e6:	78db      	ldrb	r3, [r3, #3]
    return_value = return_value*AsynchPrescalerUserConfig;
 80006e8:	4350      	muls	r0, r2
    return_value = return_value >> WakeupTimerDivider;
 80006ea:	40d8      	lsrs	r0, r3
  {
    return_value = 0;
  }

  return (uint16_t)return_value;
}
 80006ec:	b280      	uxth	r0, r0
 80006ee:	bd10      	pop	{r4, pc}
    return_value = 0;
 80006f0:	2000      	movs	r0, #0
 80006f2:	e7fb      	b.n	80006ec <ReturnTimeElapsed+0x30>
 80006f4:	20000098 	.word	0x20000098
 80006f8:	20000248 	.word	0x20000248

080006fc <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 80006fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000700:	4e3d      	ldr	r6, [pc, #244]	; (80007f8 <RescheduleTimerList+0xfc>)

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000702:	4b3e      	ldr	r3, [pc, #248]	; (80007fc <RescheduleTimerList+0x100>)
 8000704:	f8d6 8004 	ldr.w	r8, [r6, #4]
 8000708:	689a      	ldr	r2, [r3, #8]
 800070a:	f8d8 3000 	ldr.w	r3, [r8]
 800070e:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8000712:	d003      	beq.n	800071c <RescheduleTimerList+0x20>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8000714:	68da      	ldr	r2, [r3, #12]
 8000716:	f012 0f04 	tst.w	r2, #4
 800071a:	e7fa      	b.n	8000712 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 800071c:	689a      	ldr	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 800071e:	4d38      	ldr	r5, [pc, #224]	; (8000800 <RescheduleTimerList+0x104>)
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8000720:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000724:	609a      	str	r2, [r3, #8]
  localTimerID = CurrentRunningTimerID;
 8000726:	782f      	ldrb	r7, [r5, #0]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000728:	2318      	movs	r3, #24
  localTimerID = CurrentRunningTimerID;
 800072a:	b2ff      	uxtb	r7, r7
  timecountleft = aTimerContext[localTimerID].CountLeft;
 800072c:	fb03 5307 	mla	r3, r3, r7, r5
 8000730:	68dc      	ldr	r4, [r3, #12]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000732:	f7ff ffc3 	bl	80006bc <ReturnTimeElapsed>

  if(timecountleft < time_elapsed )
 8000736:	42a0      	cmp	r0, r4
 8000738:	d907      	bls.n	800074a <RescheduleTimerList+0x4e>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800073a:	2301      	movs	r3, #1
 800073c:	f885 3098 	strb.w	r3, [r5, #152]	; 0x98
    wakeup_timer_value = 0;
 8000740:	2300      	movs	r3, #0
  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000742:	2418      	movs	r4, #24
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8000744:	f04f 0c00 	mov.w	ip, #0
 8000748:	e01b      	b.n	8000782 <RescheduleTimerList+0x86>
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 800074a:	8933      	ldrh	r3, [r6, #8]
 800074c:	4403      	add	r3, r0
 800074e:	42a3      	cmp	r3, r4
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000750:	bf39      	ittee	cc
 8000752:	8933      	ldrhcc	r3, [r6, #8]
      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000754:	2200      	movcc	r2, #0
      wakeup_timer_value = timecountleft - time_elapsed;
 8000756:	1a23      	subcs	r3, r4, r0
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000758:	2201      	movcs	r2, #1
      wakeup_timer_value = MaxWakeupTimerSetup;
 800075a:	bf34      	ite	cc
 800075c:	b29b      	uxthcc	r3, r3
      wakeup_timer_value = timecountleft - time_elapsed;
 800075e:	b29b      	uxthcs	r3, r3
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000760:	f885 2098 	strb.w	r2, [r5, #152]	; 0x98
 8000764:	e7ed      	b.n	8000742 <RescheduleTimerList+0x46>
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000766:	fb04 5207 	mla	r2, r4, r7, r5
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 800076a:	fb04 5707 	mla	r7, r4, r7, r5
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 800076e:	68d1      	ldr	r1, [r2, #12]
 8000770:	4288      	cmp	r0, r1
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8000772:	bf97      	itett	ls
 8000774:	68d1      	ldrls	r1, [r2, #12]
      aTimerContext[localTimerID].CountLeft = 0;
 8000776:	f8c2 c00c 	strhi.w	ip, [r2, #12]
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 800077a:	1a09      	subls	r1, r1, r0
 800077c:	60d1      	strls	r1, [r2, #12]
    localTimerID = aTimerContext[localTimerID].NextID;
 800077e:	7e7f      	ldrb	r7, [r7, #25]
 8000780:	b2ff      	uxtb	r7, r7
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000782:	2f06      	cmp	r7, #6
 8000784:	d1ef      	bne.n	8000766 <RescheduleTimerList+0x6a>
  if(Value == 0)
 8000786:	b943      	cbnz	r3, 800079a <RescheduleTimerList+0x9e>
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000788:	f7ff ff58 	bl	800063c <ReadRtcSsrValue>
 800078c:	f8c5 0094 	str.w	r0, [r5, #148]	; 0x94
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000790:	2003      	movs	r0, #3
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);

  return ;
}
 8000792:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000796:	f002 ba43 	b.w	8002c20 <HAL_NVIC_SetPendingIRQ>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 800079a:	2b01      	cmp	r3, #1
 800079c:	d802      	bhi.n	80007a4 <RescheduleTimerList+0xa8>
 800079e:	78f2      	ldrb	r2, [r6, #3]
 80007a0:	2a01      	cmp	r2, #1
 80007a2:	d026      	beq.n	80007f2 <RescheduleTimerList+0xf6>
      Value -= 1;
 80007a4:	3b01      	subs	r3, #1
 80007a6:	b29c      	uxth	r4, r3
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 80007a8:	f8d8 3000 	ldr.w	r3, [r8]
 80007ac:	68da      	ldr	r2, [r3, #12]
 80007ae:	0752      	lsls	r2, r2, #29
 80007b0:	d5fc      	bpl.n	80007ac <RescheduleTimerList+0xb0>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80007b2:	68d9      	ldr	r1, [r3, #12]
 80007b4:	b2c9      	uxtb	r1, r1
 80007b6:	f461 6190 	orn	r1, r1, #1152	; 0x480
 80007ba:	60d9      	str	r1, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80007bc:	4b11      	ldr	r3, [pc, #68]	; (8000804 <RescheduleTimerList+0x108>)
 80007be:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80007c2:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80007c4:	2003      	movs	r0, #3
 80007c6:	f002 fa3b 	bl	8002c40 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 80007ca:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <RescheduleTimerList+0x100>)
 80007cc:	695a      	ldr	r2, [r3, #20]
 80007ce:	0c12      	lsrs	r2, r2, #16
 80007d0:	0412      	lsls	r2, r2, #16
 80007d2:	4322      	orrs	r2, r4
 80007d4:	615a      	str	r2, [r3, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80007d6:	f7ff ff31 	bl	800063c <ReadRtcSsrValue>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 80007da:	6873      	ldr	r3, [r6, #4]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80007dc:	f8c5 0094 	str.w	r0, [r5, #148]	; 0x94
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 80007e0:	681a      	ldr	r2, [r3, #0]
 80007e2:	6893      	ldr	r3, [r2, #8]
 80007e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007e8:	6093      	str	r3, [r2, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 80007ea:	f3af 8000 	nop.w
}
 80007ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((Value > 1) ||(WakeupTimerDivider != 1))
 80007f2:	4614      	mov	r4, r2
 80007f4:	e7d8      	b.n	80007a8 <RescheduleTimerList+0xac>
 80007f6:	bf00      	nop
 80007f8:	20000248 	.word	0x20000248
 80007fc:	40002800 	.word	0x40002800
 8000800:	20000098 	.word	0x20000098
 8000804:	58000800 	.word	0x58000800

08000808 <HW_TS_Init>:

  return;
}

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8000808:	b570      	push	{r4, r5, r6, lr}
   * Get RTC handler
   */
  phrtc = hrtc;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800080a:	680d      	ldr	r5, [r1, #0]

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800080c:	4e3e      	ldr	r6, [pc, #248]	; (8000908 <HW_TS_Init+0x100>)
  phrtc = hrtc;
 800080e:	4c3f      	ldr	r4, [pc, #252]	; (800090c <HW_TS_Init+0x104>)
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000810:	23ca      	movs	r3, #202	; 0xca
 8000812:	626b      	str	r3, [r5, #36]	; 0x24
 8000814:	2353      	movs	r3, #83	; 0x53
 8000816:	626b      	str	r3, [r5, #36]	; 0x24
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8000818:	68b3      	ldr	r3, [r6, #8]
  phrtc = hrtc;
 800081a:	6061      	str	r1, [r4, #4]
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800081c:	f043 0320 	orr.w	r3, r3, #32
 8000820:	60b3      	str	r3, [r6, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8000822:	68b3      	ldr	r3, [r6, #8]
 8000824:	f003 0307 	and.w	r3, r3, #7
 8000828:	f1c3 0304 	rsb	r3, r3, #4
 800082c:	b2d9      	uxtb	r1, r3
 800082e:	70e1      	strb	r1, [r4, #3]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8000830:	6932      	ldr	r2, [r6, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000832:	f44f 03fe 	mov.w	r3, #8323072	; 0x7f0000
 8000836:	fa93 f3a3 	rbit	r3, r3
 800083a:	fab3 f383 	clz	r3, r3
 800083e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8000842:	40da      	lsrs	r2, r3
 8000844:	3201      	adds	r2, #1
 8000846:	b2d2      	uxtb	r2, r2
 8000848:	70a2      	strb	r2, [r4, #2]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 800084a:	6933      	ldr	r3, [r6, #16]
 800084c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000850:	3301      	adds	r3, #1
 8000852:	8023      	strh	r3, [r4, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8000854:	3b01      	subs	r3, #1
 8000856:	4353      	muls	r3, r2
 8000858:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800085c:	40cb      	lsrs	r3, r1

  if(localmaxwakeuptimersetup >= 0xFFFF)
 800085e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000862:	4293      	cmp	r3, r2
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8000864:	bf88      	it	hi
 8000866:	f64f 73ff 	movwhi	r3, #65535	; 0xffff
  *         @arg @ref LL_EXTI_LINE_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800086a:	4a29      	ldr	r2, [pc, #164]	; (8000910 <HW_TS_Init+0x108>)
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 800086c:	bf98      	it	ls
 800086e:	b29b      	uxthls	r3, r3
 8000870:	8123      	strh	r3, [r4, #8]
 8000872:	6813      	ldr	r3, [r2, #0]
 8000874:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000878:	6013      	str	r3, [r2, #0]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800087a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 800087e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000882:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);

  if(TimerInitMode == hw_ts_InitMode_Full)
 8000886:	2800      	cmp	r0, #0
 8000888:	d137      	bne.n	80008fa <HW_TS_Init+0xf2>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800088a:	4b22      	ldr	r3, [pc, #136]	; (8000914 <HW_TS_Init+0x10c>)
 800088c:	2101      	movs	r1, #1
 800088e:	f883 1098 	strb.w	r1, [r3, #152]	; 0x98
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000892:	f04f 31ff 	mov.w	r1, #4294967295
 8000896:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800089a:	2106      	movs	r1, #6
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 800089c:	7418      	strb	r0, [r3, #16]
 800089e:	f883 0028 	strb.w	r0, [r3, #40]	; 0x28
 80008a2:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
 80008a6:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
 80008aa:	f883 0070 	strb.w	r0, [r3, #112]	; 0x70
 80008ae:	f883 0088 	strb.w	r0, [r3, #136]	; 0x88
    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 80008b2:	7019      	strb	r1, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 80008b4:	68ab      	ldr	r3, [r5, #8]
 80008b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80008ba:	60ab      	str	r3, [r5, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 80008bc:	68eb      	ldr	r3, [r5, #12]
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	f463 6390 	orn	r3, r3, #1152	; 0x480
 80008c4:	60eb      	str	r3, [r5, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80008c6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80008ca:	60d3      	str	r3, [r2, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 80008cc:	2003      	movs	r0, #3
 80008ce:	f002 f9b7 	bl	8002c40 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 80008d2:	6863      	ldr	r3, [r4, #4]
 80008d4:	681a      	ldr	r2, [r3, #0]
 80008d6:	6893      	ldr	r3, [r2, #8]
 80008d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008dc:	6093      	str	r3, [r2, #8]
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80008de:	6863      	ldr	r3, [r4, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	22ff      	movs	r2, #255	; 0xff

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80008e4:	2103      	movs	r1, #3
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80008e6:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80008e8:	4608      	mov	r0, r1
 80008ea:	2200      	movs	r2, #0
 80008ec:	f002 f92c 	bl	8002b48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80008f0:	2003      	movs	r0, #3

  return;
}
 80008f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80008f6:	f002 b95b 	b.w	8002bb0 <HAL_NVIC_EnableIRQ>
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 80008fa:	68eb      	ldr	r3, [r5, #12]
 80008fc:	055b      	lsls	r3, r3, #21
 80008fe:	d5ee      	bpl.n	80008de <HW_TS_Init+0xd6>
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000900:	2003      	movs	r0, #3
 8000902:	f002 f98d 	bl	8002c20 <HAL_NVIC_SetPendingIRQ>
 8000906:	e7ea      	b.n	80008de <HW_TS_Init+0xd6>
 8000908:	40002800 	.word	0x40002800
 800090c:	20000248 	.word	0x20000248
 8000910:	58000800 	.word	0x58000800
 8000914:	20000098 	.word	0x20000098

08000918 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8000918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800091c:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8000920:	b672      	cpsid	i
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8000922:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000968 <HW_TS_Create+0x50>
 8000926:	2500      	movs	r5, #0
 8000928:	f04f 0a18 	mov.w	sl, #24
 800092c:	fb0a 9405 	mla	r4, sl, r5, r9
 8000930:	fa5f fe85 	uxtb.w	lr, r5
 8000934:	f894 c010 	ldrb.w	ip, [r4, #16]
 8000938:	f00c 06ff 	and.w	r6, ip, #255	; 0xff
 800093c:	f1bc 0f00 	cmp.w	ip, #0
 8000940:	d10b      	bne.n	800095a <HW_TS_Create+0x42>
    loop++;
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8000942:	2501      	movs	r5, #1
 8000944:	7425      	strb	r5, [r4, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000946:	f387 8810 	msr	PRIMASK, r7

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 800094a:	6160      	str	r0, [r4, #20]
    aTimerContext[loop].TimerMode = TimerMode;
 800094c:	7462      	strb	r2, [r4, #17]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
    *pTimerId = loop;

    localreturnstatus = hw_ts_Successful;
 800094e:	4630      	mov	r0, r6
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8000950:	6063      	str	r3, [r4, #4]
    *pTimerId = loop;
 8000952:	f881 e000 	strb.w	lr, [r1]

    localreturnstatus = hw_ts_Failed;
  }

  return(localreturnstatus);
}
 8000956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800095a:	3501      	adds	r5, #1
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 800095c:	2d06      	cmp	r5, #6
 800095e:	d1e5      	bne.n	800092c <HW_TS_Create+0x14>
 8000960:	f387 8810 	msr	PRIMASK, r7
    localreturnstatus = hw_ts_Failed;
 8000964:	2001      	movs	r0, #1
  return(localreturnstatus);
 8000966:	e7f6      	b.n	8000956 <HW_TS_Create+0x3e>
 8000968:	20000098 	.word	0x20000098

0800096c <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 800096c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000970:	4680      	mov	r8, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000972:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8000976:	b672      	cpsid	i
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000978:	4c23      	ldr	r4, [pc, #140]	; (8000a08 <HW_TS_Stop+0x9c>)

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800097a:	4e24      	ldr	r6, [pc, #144]	; (8000a0c <HW_TS_Stop+0xa0>)
  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800097c:	2003      	movs	r0, #3
 800097e:	f002 f925 	bl	8002bcc <HAL_NVIC_DisableIRQ>
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000982:	6867      	ldr	r7, [r4, #4]
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	22ca      	movs	r2, #202	; 0xca
 8000988:	625a      	str	r2, [r3, #36]	; 0x24
 800098a:	2253      	movs	r2, #83	; 0x53
 800098c:	625a      	str	r2, [r3, #36]	; 0x24
  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800098e:	2318      	movs	r3, #24
 8000990:	fb03 6308 	mla	r3, r3, r8, r6
 8000994:	7c1b      	ldrb	r3, [r3, #16]
 8000996:	2b02      	cmp	r3, #2
 8000998:	d124      	bne.n	80009e4 <HW_TS_Stop+0x78>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 800099a:	2100      	movs	r1, #0
 800099c:	4640      	mov	r0, r8
 800099e:	f7ff fe5b 	bl	8000658 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 80009a2:	7833      	ldrb	r3, [r6, #0]
 80009a4:	b2db      	uxtb	r3, r3

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80009a6:	2b06      	cmp	r3, #6
 80009a8:	d127      	bne.n	80009fa <HW_TS_Stop+0x8e>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80009aa:	4b19      	ldr	r3, [pc, #100]	; (8000a10 <HW_TS_Stop+0xa4>)
 80009ac:	689a      	ldr	r2, [r3, #8]
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80009b4:	d003      	beq.n	80009be <HW_TS_Stop+0x52>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 80009b6:	68da      	ldr	r2, [r3, #12]
 80009b8:	f012 0f04 	tst.w	r2, #4
 80009bc:	e7fa      	b.n	80009b4 <HW_TS_Stop+0x48>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 80009be:	689a      	ldr	r2, [r3, #8]
 80009c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80009c4:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 80009c6:	68da      	ldr	r2, [r3, #12]
 80009c8:	0752      	lsls	r2, r2, #29
 80009ca:	d5fc      	bpl.n	80009c6 <HW_TS_Stop+0x5a>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80009cc:	68da      	ldr	r2, [r3, #12]
 80009ce:	b2d2      	uxtb	r2, r2
 80009d0:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80009d4:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80009d6:	4b0f      	ldr	r3, [pc, #60]	; (8000a14 <HW_TS_Stop+0xa8>)
 80009d8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80009dc:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80009de:	2003      	movs	r0, #3
 80009e0:	f002 f92e 	bl	8002c40 <HAL_NVIC_ClearPendingIRQ>
      RescheduleTimerList();
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80009e4:	6863      	ldr	r3, [r4, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	22ff      	movs	r2, #255	; 0xff
 80009ea:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80009ec:	2003      	movs	r0, #3
 80009ee:	f002 f8df 	bl	8002bb0 <HAL_NVIC_EnableIRQ>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80009f2:	f385 8810 	msr	PRIMASK, r5
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
}
 80009f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80009fa:	7872      	ldrb	r2, [r6, #1]
 80009fc:	429a      	cmp	r2, r3
 80009fe:	d0f1      	beq.n	80009e4 <HW_TS_Stop+0x78>
      RescheduleTimerList();
 8000a00:	f7ff fe7c 	bl	80006fc <RescheduleTimerList>
 8000a04:	e7ee      	b.n	80009e4 <HW_TS_Stop+0x78>
 8000a06:	bf00      	nop
 8000a08:	20000248 	.word	0x20000248
 8000a0c:	20000098 	.word	0x20000098
 8000a10:	40002800 	.word	0x40002800
 8000a14:	58000800 	.word	0x58000800

08000a18 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8000a18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8000a1c:	4c4b      	ldr	r4, [pc, #300]	; (8000b4c <HW_TS_Start+0x134>)
 8000a1e:	2318      	movs	r3, #24
 8000a20:	fb03 4300 	mla	r3, r3, r0, r4
{
 8000a24:	4605      	mov	r5, r0
  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8000a26:	7c1b      	ldrb	r3, [r3, #16]
 8000a28:	2b02      	cmp	r3, #2
{
 8000a2a:	460f      	mov	r7, r1
  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8000a2c:	d101      	bne.n	8000a32 <HW_TS_Start+0x1a>
  {
    HW_TS_Stop( timer_id );
 8000a2e:	f7ff ff9d 	bl	800096c <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000a32:	f3ef 8810 	mrs	r8, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8000a36:	b672      	cpsid	i
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8000a38:	2003      	movs	r0, #3
 8000a3a:	f002 f8c7 	bl	8002bcc <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000a3e:	4a44      	ldr	r2, [pc, #272]	; (8000b50 <HW_TS_Start+0x138>)
 8000a40:	6853      	ldr	r3, [r2, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	21ca      	movs	r1, #202	; 0xca

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8000a46:	2618      	movs	r6, #24
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000a48:	6259      	str	r1, [r3, #36]	; 0x24
  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8000a4a:	fb06 4905 	mla	r9, r6, r5, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000a4e:	2153      	movs	r1, #83	; 0x53
 8000a50:	6259      	str	r1, [r3, #36]	; 0x24
  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8000a52:	2302      	movs	r3, #2
 8000a54:	f889 3010 	strb.w	r3, [r9, #16]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8000a58:	f8c9 700c 	str.w	r7, [r9, #12]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8000a5c:	f8c9 7008 	str.w	r7, [r9, #8]
  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000a60:	7823      	ldrb	r3, [r4, #0]
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	2b06      	cmp	r3, #6
 8000a66:	4617      	mov	r7, r2
 8000a68:	d11b      	bne.n	8000aa2 <HW_TS_Start+0x8a>
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000a6a:	7822      	ldrb	r2, [r4, #0]
 8000a6c:	b2d2      	uxtb	r2, r2
 8000a6e:	7062      	strb	r2, [r4, #1]
    CurrentRunningTimerID = TimerID;
 8000a70:	7025      	strb	r5, [r4, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000a72:	f889 3019 	strb.w	r3, [r9, #25]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000a76:	f04f 33ff 	mov.w	r3, #4294967295
 8000a7a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    time_elapsed = 0;
 8000a7e:	2000      	movs	r0, #0

  time_elapsed =  linkTimer(timer_id);

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8000a80:	7823      	ldrb	r3, [r4, #0]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8000a82:	7862      	ldrb	r2, [r4, #1]
 8000a84:	429a      	cmp	r2, r3
 8000a86:	d05a      	beq.n	8000b3e <HW_TS_Start+0x126>
  {
    RescheduleTimerList();
 8000a88:	f7ff fe38 	bl	80006fc <RescheduleTimerList>
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	22ff      	movs	r2, #255	; 0xff
 8000a92:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8000a94:	2003      	movs	r0, #3
 8000a96:	f002 f88b 	bl	8002bb0 <HAL_NVIC_EnableIRQ>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000a9a:	f388 8810 	msr	PRIMASK, r8
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
}
 8000a9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    time_elapsed = ReturnTimeElapsed();
 8000aa2:	f7ff fe0b 	bl	80006bc <ReturnTimeElapsed>
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8000aa6:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8000aaa:	4403      	add	r3, r0
 8000aac:	f8c9 300c 	str.w	r3, [r9, #12]
    time_left = aTimerContext[TimerID].CountLeft;
 8000ab0:	f8d9 100c 	ldr.w	r1, [r9, #12]
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8000ab4:	7823      	ldrb	r3, [r4, #0]
 8000ab6:	fb06 4303 	mla	r3, r6, r3, r4
 8000aba:	68db      	ldr	r3, [r3, #12]
 8000abc:	4299      	cmp	r1, r3
 8000abe:	d323      	bcc.n	8000b08 <HW_TS_Start+0xf0>
      timer_id_lookup = CurrentRunningTimerID;
 8000ac0:	7823      	ldrb	r3, [r4, #0]
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000ac2:	b2db      	uxtb	r3, r3
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000ac4:	fb06 4203 	mla	r2, r6, r3, r4
 8000ac8:	7e52      	ldrb	r2, [r2, #25]
 8000aca:	b2d2      	uxtb	r2, r2
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000acc:	2a06      	cmp	r2, #6
 8000ace:	d004      	beq.n	8000ada <HW_TS_Start+0xc2>
 8000ad0:	fb06 4202 	mla	r2, r6, r2, r4
 8000ad4:	68d2      	ldr	r2, [r2, #12]
 8000ad6:	4291      	cmp	r1, r2
 8000ad8:	d212      	bcs.n	8000b00 <HW_TS_Start+0xe8>
  next_id = aTimerContext[RefTimerID].NextID;
 8000ada:	2118      	movs	r1, #24
 8000adc:	fb01 4203 	mla	r2, r1, r3, r4
 8000ae0:	7e52      	ldrb	r2, [r2, #25]
 8000ae2:	b2d2      	uxtb	r2, r2
  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000ae4:	2a06      	cmp	r2, #6
    aTimerContext[next_id].PreviousID = TimerID;
 8000ae6:	bf1c      	itt	ne
 8000ae8:	fb01 4102 	mlane	r1, r1, r2, r4
 8000aec:	760d      	strbne	r5, [r1, #24]
  aTimerContext[TimerID].NextID = next_id;
 8000aee:	2118      	movs	r1, #24
 8000af0:	fb01 4605 	mla	r6, r1, r5, r4
 8000af4:	7672      	strb	r2, [r6, #25]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000af6:	7633      	strb	r3, [r6, #24]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000af8:	fb01 4303 	mla	r3, r1, r3, r4
 8000afc:	765d      	strb	r5, [r3, #25]
 8000afe:	e7bf      	b.n	8000a80 <HW_TS_Start+0x68>
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000b00:	fb06 4303 	mla	r3, r6, r3, r4
 8000b04:	7e5b      	ldrb	r3, [r3, #25]
 8000b06:	e7dc      	b.n	8000ac2 <HW_TS_Start+0xaa>
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000b08:	7822      	ldrb	r2, [r4, #0]
  if(RefTimerID != CurrentRunningTimerID)
 8000b0a:	7823      	ldrb	r3, [r4, #0]
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000b0c:	b2d2      	uxtb	r2, r2
  if(RefTimerID != CurrentRunningTimerID)
 8000b0e:	429a      	cmp	r2, r3
 8000b10:	fb06 f302 	mul.w	r3, r6, r2
 8000b14:	d00f      	beq.n	8000b36 <HW_TS_Start+0x11e>
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000b16:	4423      	add	r3, r4
 8000b18:	7e19      	ldrb	r1, [r3, #24]
 8000b1a:	b2c9      	uxtb	r1, r1
    aTimerContext[previous_id].NextID = TimerID;
 8000b1c:	fb06 4601 	mla	r6, r6, r1, r4
 8000b20:	7675      	strb	r5, [r6, #25]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000b22:	f889 2019 	strb.w	r2, [r9, #25]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000b26:	f889 1018 	strb.w	r1, [r9, #24]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000b2a:	761d      	strb	r5, [r3, #24]
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000b2c:	7823      	ldrb	r3, [r4, #0]
 8000b2e:	b2db      	uxtb	r3, r3
 8000b30:	7063      	strb	r3, [r4, #1]
      CurrentRunningTimerID = TimerID;
 8000b32:	7025      	strb	r5, [r4, #0]
 8000b34:	e7a4      	b.n	8000a80 <HW_TS_Start+0x68>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000b36:	f889 2019 	strb.w	r2, [r9, #25]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000b3a:	4423      	add	r3, r4
 8000b3c:	e7f5      	b.n	8000b2a <HW_TS_Start+0x112>
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8000b3e:	2318      	movs	r3, #24
 8000b40:	fb03 4405 	mla	r4, r3, r5, r4
 8000b44:	68e3      	ldr	r3, [r4, #12]
 8000b46:	1a18      	subs	r0, r3, r0
 8000b48:	60e0      	str	r0, [r4, #12]
 8000b4a:	e79f      	b.n	8000a8c <HW_TS_Start+0x74>
 8000b4c:	20000098 	.word	0x20000098
 8000b50:	20000248 	.word	0x20000248

08000b54 <HW_TS_RTC_Int_AppNot>:
  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
  pTimerCallBack();
 8000b54:	4710      	bx	r2
	...

08000b58 <HW_TS_RTC_Wakeup_Handler>:
{
 8000b58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000b5c:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8000b60:	b672      	cpsid	i
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000b62:	4e2a      	ldr	r6, [pc, #168]	; (8000c0c <HW_TS_RTC_Wakeup_Handler+0xb4>)
 8000b64:	6873      	ldr	r3, [r6, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f04f 0bca 	mov.w	fp, #202	; 0xca
 8000b6c:	f04f 0853 	mov.w	r8, #83	; 0x53
 8000b70:	f8c3 b024 	str.w	fp, [r3, #36]	; 0x24
 8000b74:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 8000b78:	689a      	ldr	r2, [r3, #8]
 8000b7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000b7e:	609a      	str	r2, [r3, #8]
  local_current_running_timer_id = CurrentRunningTimerID;
 8000b80:	4a23      	ldr	r2, [pc, #140]	; (8000c10 <HW_TS_RTC_Wakeup_Handler+0xb8>)
 8000b82:	7814      	ldrb	r4, [r2, #0]
  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8000b84:	2518      	movs	r5, #24
  local_current_running_timer_id = CurrentRunningTimerID;
 8000b86:	b2e4      	uxtb	r4, r4
  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8000b88:	fb05 2504 	mla	r5, r5, r4, r2
 8000b8c:	7c29      	ldrb	r1, [r5, #16]
 8000b8e:	2902      	cmp	r1, #2
 8000b90:	d12f      	bne.n	8000bf2 <HW_TS_RTC_Wakeup_Handler+0x9a>
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8000b92:	f8d5 a004 	ldr.w	sl, [r5, #4]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8000b96:	f8d5 9014 	ldr.w	r9, [r5, #20]
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8000b9a:	f892 3098 	ldrb.w	r3, [r2, #152]	; 0x98
 8000b9e:	b31b      	cbz	r3, 8000be8 <HW_TS_RTC_Wakeup_Handler+0x90>
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8000ba0:	7c69      	ldrb	r1, [r5, #17]
 8000ba2:	b2c9      	uxtb	r1, r1
 8000ba4:	2901      	cmp	r1, #1
 8000ba6:	d119      	bne.n	8000bdc <HW_TS_RTC_Wakeup_Handler+0x84>
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8000ba8:	4620      	mov	r0, r4
 8000baa:	f7ff fd55 	bl	8000658 <UnlinkTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000bae:	f387 8810 	msr	PRIMASK, r7
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8000bb2:	68a9      	ldr	r1, [r5, #8]
 8000bb4:	4620      	mov	r0, r4
 8000bb6:	f7ff ff2f 	bl	8000a18 <HW_TS_Start>
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000bba:	6873      	ldr	r3, [r6, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8000bbe:	4652      	mov	r2, sl
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000bc0:	f8c3 b024 	str.w	fp, [r3, #36]	; 0x24
      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8000bc4:	4621      	mov	r1, r4
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000bc6:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8000bca:	4648      	mov	r0, r9
 8000bcc:	f7ff ffc2 	bl	8000b54 <HW_TS_RTC_Int_AppNot>
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000bd0:	6873      	ldr	r3, [r6, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	22ff      	movs	r2, #255	; 0xff
 8000bd6:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000bd8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000bdc:	f387 8810 	msr	PRIMASK, r7
        HW_TS_Stop(local_current_running_timer_id);
 8000be0:	4620      	mov	r0, r4
 8000be2:	f7ff fec3 	bl	800096c <HW_TS_Stop>
 8000be6:	e7e8      	b.n	8000bba <HW_TS_RTC_Wakeup_Handler+0x62>
      RescheduleTimerList();
 8000be8:	f7ff fd88 	bl	80006fc <RescheduleTimerList>
 8000bec:	f387 8810 	msr	PRIMASK, r7
 8000bf0:	e7ee      	b.n	8000bd0 <HW_TS_RTC_Wakeup_Handler+0x78>
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000bf2:	68da      	ldr	r2, [r3, #12]
 8000bf4:	0752      	lsls	r2, r2, #29
 8000bf6:	d5fc      	bpl.n	8000bf2 <HW_TS_RTC_Wakeup_Handler+0x9a>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000bf8:	68da      	ldr	r2, [r3, #12]
 8000bfa:	b2d2      	uxtb	r2, r2
 8000bfc:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000c00:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000c02:	4b04      	ldr	r3, [pc, #16]	; (8000c14 <HW_TS_RTC_Wakeup_Handler+0xbc>)
 8000c04:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	e7ef      	b.n	8000bec <HW_TS_RTC_Wakeup_Handler+0x94>
 8000c0c:	20000248 	.word	0x20000248
 8000c10:	20000098 	.word	0x20000098
 8000c14:	58000800 	.word	0x58000800

08000c18 <LL_AHB1_GRP1_EnableClock>:
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000c18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 8000c1c:	b082      	sub	sp, #8
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000c1e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000c20:	4302      	orrs	r2, r0
 8000c22:	649a      	str	r2, [r3, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000c24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c26:	4018      	ands	r0, r3
 8000c28:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 8000c2a:	9b01      	ldr	r3, [sp, #4]
}
 8000c2c:	b002      	add	sp, #8
 8000c2e:	4770      	bx	lr

08000c30 <LL_AHB2_GRP1_EnableClock>:
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000c30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 8000c34:	b082      	sub	sp, #8
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000c36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c38:	4302      	orrs	r2, r0
 8000c3a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3e:	4018      	ands	r0, r3
 8000c40:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 8000c42:	9b01      	ldr	r3, [sp, #4]
}
 8000c44:	b002      	add	sp, #8
 8000c46:	4770      	bx	lr

08000c48 <HW_UART_Init>:
    void (*HW_lpuart1TxCb)(void);
#endif

    void HW_UART_Init(hw_uart_id_t hw_uart_id)
    {
        switch (hw_uart_id)
 8000c48:	b110      	cbz	r0, 8000c50 <HW_UART_Init+0x8>
 8000c4a:	2802      	cmp	r0, #2
 8000c4c:	d014      	beq.n	8000c78 <HW_UART_Init+0x30>
 8000c4e:	4770      	bx	lr
        {
#if (CFG_HW_USART1_ENABLED == 1)
            case hw_uart1:
                HW_UART_INIT(huart1, USART1);
 8000c50:	4b15      	ldr	r3, [pc, #84]	; (8000ca8 <HW_UART_Init+0x60>)
 8000c52:	f8df c05c 	ldr.w	ip, [pc, #92]	; 8000cb0 <HW_UART_Init+0x68>
 8000c56:	6118      	str	r0, [r3, #16]
 8000c58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c5c:	e9c3 c200 	strd	ip, r2, [r3]
 8000c60:	220c      	movs	r2, #12
 8000c62:	615a      	str	r2, [r3, #20]
 8000c64:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000c68:	e9c3 0002 	strd	r0, r0, [r3, #8]
 8000c6c:	6198      	str	r0, [r3, #24]
 8000c6e:	6298      	str	r0, [r3, #40]	; 0x28
 8000c70:	61da      	str	r2, [r3, #28]
 8000c72:	4618      	mov	r0, r3
                break;
#endif

#if (CFG_HW_LPUART1_ENABLED == 1)
            case hw_lpuart1:
                HW_UART_INIT(lpuart1, LPUART1);
 8000c74:	f003 bbc0 	b.w	80043f8 <HAL_UART_Init>
 8000c78:	480b      	ldr	r0, [pc, #44]	; (8000ca8 <HW_UART_Init+0x60>)
 8000c7a:	4a0c      	ldr	r2, [pc, #48]	; (8000cac <HW_UART_Init+0x64>)
 8000c7c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000c80:	e9c0 2323 	strd	r2, r3, [r0, #140]	; 0x8c
 8000c84:	220c      	movs	r2, #12
 8000c86:	2300      	movs	r3, #0
 8000c88:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
 8000c8c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000c90:	e9c0 3325 	strd	r3, r3, [r0, #148]	; 0x94
 8000c94:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
 8000c98:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
 8000c9c:	f8c0 20a8 	str.w	r2, [r0, #168]	; 0xa8
 8000ca0:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
 8000ca4:	308c      	adds	r0, #140	; 0x8c
 8000ca6:	e7e5      	b.n	8000c74 <HW_UART_Init+0x2c>
 8000ca8:	20000254 	.word	0x20000254
 8000cac:	40008000 	.word	0x40008000
 8000cb0:	40013800 	.word	0x40013800

08000cb4 <HW_UART_Receive_IT>:
        return;
    }

    void HW_UART_Receive_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
    {
        switch (hw_uart_id)
 8000cb4:	b110      	cbz	r0, 8000cbc <HW_UART_Receive_IT+0x8>
 8000cb6:	2802      	cmp	r0, #2
 8000cb8:	d007      	beq.n	8000cca <HW_UART_Receive_IT+0x16>
 8000cba:	4770      	bx	lr
        {
#if (CFG_HW_USART1_ENABLED == 1)
            case hw_uart1:
                HW_UART_RX_IT(huart1, USART1);
 8000cbc:	4806      	ldr	r0, [pc, #24]	; (8000cd8 <HW_UART_Receive_IT+0x24>)
 8000cbe:	6003      	str	r3, [r0, #0]
 8000cc0:	4806      	ldr	r0, [pc, #24]	; (8000cdc <HW_UART_Receive_IT+0x28>)
 8000cc2:	4b07      	ldr	r3, [pc, #28]	; (8000ce0 <HW_UART_Receive_IT+0x2c>)
 8000cc4:	6003      	str	r3, [r0, #0]
                break;
#endif

#if (CFG_HW_LPUART1_ENABLED == 1)
            case hw_lpuart1:
                HW_UART_RX_IT(lpuart1, LPUART1);
 8000cc6:	f002 bb2d 	b.w	8003324 <HAL_UART_Receive_IT>
 8000cca:	4806      	ldr	r0, [pc, #24]	; (8000ce4 <HW_UART_Receive_IT+0x30>)
 8000ccc:	6003      	str	r3, [r0, #0]
 8000cce:	4803      	ldr	r0, [pc, #12]	; (8000cdc <HW_UART_Receive_IT+0x28>)
 8000cd0:	4b05      	ldr	r3, [pc, #20]	; (8000ce8 <HW_UART_Receive_IT+0x34>)
 8000cd2:	f840 3f8c 	str.w	r3, [r0, #140]!
 8000cd6:	e7f6      	b.n	8000cc6 <HW_UART_Receive_IT+0x12>
 8000cd8:	200021bc 	.word	0x200021bc
 8000cdc:	20000254 	.word	0x20000254
 8000ce0:	40013800 	.word	0x40013800
 8000ce4:	200021b8 	.word	0x200021b8
 8000ce8:	40008000 	.word	0x40008000

08000cec <HW_UART_Transmit>:

        return;
    }

    hw_status_t HW_UART_Transmit(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size,  uint32_t timeout)
    {
 8000cec:	b510      	push	{r4, lr}
        HAL_StatusTypeDef hal_status = HAL_OK;
        hw_status_t hw_status = hw_uart_ok;

        switch (hw_uart_id)
 8000cee:	b118      	cbz	r0, 8000cf8 <HW_UART_Transmit+0xc>
 8000cf0:	2802      	cmp	r0, #2
 8000cf2:	d00d      	beq.n	8000d10 <HW_UART_Transmit+0x24>
        hw_status_t hw_status = hw_uart_ok;
 8000cf4:	2000      	movs	r0, #0
            default:
                break;
        }

        return hw_status;
    }
 8000cf6:	bd10      	pop	{r4, pc}
                HW_UART_TX(huart1, USART1);
 8000cf8:	4808      	ldr	r0, [pc, #32]	; (8000d1c <HW_UART_Transmit+0x30>)
 8000cfa:	4c09      	ldr	r4, [pc, #36]	; (8000d20 <HW_UART_Transmit+0x34>)
 8000cfc:	6004      	str	r4, [r0, #0]
                HW_UART_TX(lpuart1, LPUART1);
 8000cfe:	f003 faec 	bl	80042da <HAL_UART_Transmit>
        switch (hal_status)
 8000d02:	2802      	cmp	r0, #2
 8000d04:	d0f7      	beq.n	8000cf6 <HW_UART_Transmit+0xa>
 8000d06:	2803      	cmp	r0, #3
 8000d08:	d0f5      	beq.n	8000cf6 <HW_UART_Transmit+0xa>
 8000d0a:	2801      	cmp	r0, #1
 8000d0c:	d1f2      	bne.n	8000cf4 <HW_UART_Transmit+0x8>
 8000d0e:	e7f2      	b.n	8000cf6 <HW_UART_Transmit+0xa>
                HW_UART_TX(lpuart1, LPUART1);
 8000d10:	4802      	ldr	r0, [pc, #8]	; (8000d1c <HW_UART_Transmit+0x30>)
 8000d12:	4c04      	ldr	r4, [pc, #16]	; (8000d24 <HW_UART_Transmit+0x38>)
 8000d14:	f840 4f8c 	str.w	r4, [r0, #140]!
 8000d18:	e7f1      	b.n	8000cfe <HW_UART_Transmit+0x12>
 8000d1a:	bf00      	nop
 8000d1c:	20000254 	.word	0x20000254
 8000d20:	40013800 	.word	0x40013800
 8000d24:	40008000 	.word	0x40008000

08000d28 <HW_UART_Transmit_DMA>:

    hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
    {
 8000d28:	b508      	push	{r3, lr}
        HAL_StatusTypeDef hal_status = HAL_OK;
        hw_status_t hw_status = hw_uart_ok;

        switch (hw_uart_id)
 8000d2a:	b118      	cbz	r0, 8000d34 <HW_UART_Transmit_DMA+0xc>
 8000d2c:	2802      	cmp	r0, #2
 8000d2e:	d00f      	beq.n	8000d50 <HW_UART_Transmit_DMA+0x28>
        hw_status_t hw_status = hw_uart_ok;
 8000d30:	2000      	movs	r0, #0
            default:
                break;
        }

        return hw_status;
    }
 8000d32:	bd08      	pop	{r3, pc}
                HW_huart1TxCb = cb;
 8000d34:	480a      	ldr	r0, [pc, #40]	; (8000d60 <HW_UART_Transmit_DMA+0x38>)
 8000d36:	6003      	str	r3, [r0, #0]
                huart1.Instance = USART1;
 8000d38:	480a      	ldr	r0, [pc, #40]	; (8000d64 <HW_UART_Transmit_DMA+0x3c>)
 8000d3a:	4b0b      	ldr	r3, [pc, #44]	; (8000d68 <HW_UART_Transmit_DMA+0x40>)
 8000d3c:	6003      	str	r3, [r0, #0]
                hal_status = HAL_UART_Transmit_DMA(&lpuart1, p_data, size);
 8000d3e:	f002 fb69 	bl	8003414 <HAL_UART_Transmit_DMA>
        switch (hal_status)
 8000d42:	2802      	cmp	r0, #2
 8000d44:	d0f5      	beq.n	8000d32 <HW_UART_Transmit_DMA+0xa>
 8000d46:	2803      	cmp	r0, #3
 8000d48:	d0f3      	beq.n	8000d32 <HW_UART_Transmit_DMA+0xa>
 8000d4a:	2801      	cmp	r0, #1
 8000d4c:	d1f0      	bne.n	8000d30 <HW_UART_Transmit_DMA+0x8>
 8000d4e:	e7f0      	b.n	8000d32 <HW_UART_Transmit_DMA+0xa>
                HW_lpuart1TxCb = cb;
 8000d50:	4806      	ldr	r0, [pc, #24]	; (8000d6c <HW_UART_Transmit_DMA+0x44>)
 8000d52:	6003      	str	r3, [r0, #0]
                lpuart1.Instance = LPUART1;
 8000d54:	4803      	ldr	r0, [pc, #12]	; (8000d64 <HW_UART_Transmit_DMA+0x3c>)
 8000d56:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <HW_UART_Transmit_DMA+0x48>)
 8000d58:	f840 3f8c 	str.w	r3, [r0, #140]!
 8000d5c:	e7ef      	b.n	8000d3e <HW_UART_Transmit_DMA+0x16>
 8000d5e:	bf00      	nop
 8000d60:	200021c4 	.word	0x200021c4
 8000d64:	20000254 	.word	0x20000254
 8000d68:	40013800 	.word	0x40013800
 8000d6c:	200021c0 	.word	0x200021c0
 8000d70:	40008000 	.word	0x40008000

08000d74 <HW_UART_Interrupt_Handler>:

    void HW_UART_Interrupt_Handler(hw_uart_id_t hw_uart_id)
    {
        switch (hw_uart_id)
 8000d74:	b110      	cbz	r0, 8000d7c <HW_UART_Interrupt_Handler+0x8>
 8000d76:	2802      	cmp	r0, #2
 8000d78:	d003      	beq.n	8000d82 <HW_UART_Interrupt_Handler+0xe>
 8000d7a:	4770      	bx	lr
        {
#if (CFG_HW_USART1_ENABLED == 1)
            case hw_uart1:
                HAL_UART_IRQHandler(&huart1);
 8000d7c:	4802      	ldr	r0, [pc, #8]	; (8000d88 <HW_UART_Interrupt_Handler+0x14>)
                break;
#endif

#if (CFG_HW_LPUART1_ENABLED == 1)
            case hw_lpuart1:
                HAL_UART_IRQHandler(&lpuart1);
 8000d7e:	f002 bcdd 	b.w	800373c <HAL_UART_IRQHandler>
 8000d82:	4802      	ldr	r0, [pc, #8]	; (8000d8c <HW_UART_Interrupt_Handler+0x18>)
 8000d84:	e7fb      	b.n	8000d7e <HW_UART_Interrupt_Handler+0xa>
 8000d86:	bf00      	nop
 8000d88:	20000254 	.word	0x20000254
 8000d8c:	200002e0 	.word	0x200002e0

08000d90 <HW_UART_DMA_Interrupt_Handler>:
        return;
    }

    void HW_UART_DMA_Interrupt_Handler(hw_uart_id_t hw_uart_id)
    {
        switch (hw_uart_id)
 8000d90:	b110      	cbz	r0, 8000d98 <HW_UART_DMA_Interrupt_Handler+0x8>
 8000d92:	2802      	cmp	r0, #2
 8000d94:	d004      	beq.n	8000da0 <HW_UART_DMA_Interrupt_Handler+0x10>
 8000d96:	4770      	bx	lr
        {
#if (CFG_HW_USART1_DMA_TX_SUPPORTED == 1)
            case hw_uart1:
                HAL_DMA_IRQHandler(huart1.hdmatx);
 8000d98:	4b03      	ldr	r3, [pc, #12]	; (8000da8 <HW_UART_DMA_Interrupt_Handler+0x18>)
 8000d9a:	6f58      	ldr	r0, [r3, #116]	; 0x74
                break;
#endif

#if (CFG_HW_LPUART1_DMA_TX_SUPPORTED == 1)
            case hw_lpuart1:
                HAL_DMA_IRQHandler(lpuart1.hdmatx);
 8000d9c:	f002 b88b 	b.w	8002eb6 <HAL_DMA_IRQHandler>
 8000da0:	4b01      	ldr	r3, [pc, #4]	; (8000da8 <HW_UART_DMA_Interrupt_Handler+0x18>)
 8000da2:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
 8000da6:	e7f9      	b.n	8000d9c <HW_UART_DMA_Interrupt_Handler+0xc>
 8000da8:	20000254 	.word	0x20000254

08000dac <HAL_UART_MspInit>:

        return;
    }

    void HAL_UART_MspInit(UART_HandleTypeDef *huart)
    {
 8000dac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000db0:	4606      	mov	r6, r0
 8000db2:	b089      	sub	sp, #36	; 0x24
#if ( (CFG_HW_USART1_ENABLED == 1) || (CFG_HW_LPUART1_ENABLED == 1) )
        GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8000db4:	2214      	movs	r2, #20
 8000db6:	2100      	movs	r1, #0
 8000db8:	a803      	add	r0, sp, #12
 8000dba:	f004 ffcc 	bl	8005d56 <memset>
#endif
        switch ((uint32_t)huart->Instance)
 8000dbe:	6833      	ldr	r3, [r6, #0]
 8000dc0:	4a7d      	ldr	r2, [pc, #500]	; (8000fb8 <HAL_UART_MspInit+0x20c>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	f000 8081 	beq.w	8000eca <HAL_UART_MspInit+0x11e>
 8000dc8:	f502 4238 	add.w	r2, r2, #47104	; 0xb800
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d179      	bne.n	8000ec4 <HAL_UART_MspInit+0x118>
        {
#if (CFG_HW_USART1_ENABLED == 1)
            case (uint32_t)USART1:
      HW_UART_MSP_UART_INIT( huart1, USART1 );
 8000dd0:	2002      	movs	r0, #2
 8000dd2:	2500      	movs	r5, #0
 8000dd4:	f7ff ff2c 	bl	8000c30 <LL_AHB2_GRP1_EnableClock>
 8000dd8:	2402      	movs	r4, #2
 8000dda:	2340      	movs	r3, #64	; 0x40
 8000ddc:	f04f 0807 	mov.w	r8, #7
 8000de0:	f04f 0903 	mov.w	r9, #3
 8000de4:	a903      	add	r1, sp, #12
 8000de6:	4875      	ldr	r0, [pc, #468]	; (8000fbc <HAL_UART_MspInit+0x210>)
 8000de8:	f8cd 801c 	str.w	r8, [sp, #28]
 8000dec:	e9cd 3403 	strd	r3, r4, [sp, #12]
 8000df0:	e9cd 5905 	strd	r5, r9, [sp, #20]
 8000df4:	f002 f8aa 	bl	8002f4c <HAL_GPIO_Init>
 8000df8:	4620      	mov	r0, r4
 8000dfa:	f7ff ff19 	bl	8000c30 <LL_AHB2_GRP1_EnableClock>
 8000dfe:	2780      	movs	r7, #128	; 0x80
 8000e00:	a903      	add	r1, sp, #12
 8000e02:	486e      	ldr	r0, [pc, #440]	; (8000fbc <HAL_UART_MspInit+0x210>)
 8000e04:	f8cd 801c 	str.w	r8, [sp, #28]
 8000e08:	e9cd 7403 	strd	r7, r4, [sp, #12]
 8000e0c:	e9cd 5905 	strd	r5, r9, [sp, #20]
 8000e10:	f002 f89c 	bl	8002f4c <HAL_GPIO_Init>
 8000e14:	2001      	movs	r0, #1
 8000e16:	f7ff ff0b 	bl	8000c30 <LL_AHB2_GRP1_EnableClock>
 8000e1a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e1e:	a903      	add	r1, sp, #12
 8000e20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e24:	e9cd 3403 	strd	r3, r4, [sp, #12]
 8000e28:	e9cd 4905 	strd	r4, r9, [sp, #20]
 8000e2c:	f8cd 801c 	str.w	r8, [sp, #28]
 8000e30:	f002 f88c 	bl	8002f4c <HAL_GPIO_Init>
  *         @arg @ref LL_RCC_USART1_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8000e34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e38:	210f      	movs	r1, #15
 8000e3a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000e3e:	f022 0203 	bic.w	r2, r2, #3
 8000e42:	f042 0201 	orr.w	r2, r2, #1
 8000e46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000e4a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000e4c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000e50:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000e52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e58:	462a      	mov	r2, r5
 8000e5a:	9301      	str	r3, [sp, #4]
 8000e5c:	2024      	movs	r0, #36	; 0x24
  (void)tmpreg;
 8000e5e:	9b01      	ldr	r3, [sp, #4]
 8000e60:	f001 fe72 	bl	8002b48 <HAL_NVIC_SetPriority>
 8000e64:	2024      	movs	r0, #36	; 0x24
 8000e66:	f001 fea3 	bl	8002bb0 <HAL_NVIC_EnableIRQ>
#if (CFG_HW_USART1_DMA_TX_SUPPORTED == 1)
            HW_UART_MSP_TX_DMA_INIT( huart1, USART1 );
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	4c54      	ldr	r4, [pc, #336]	; (8000fc0 <HAL_UART_MspInit+0x214>)
 8000e6e:	f7ff fed3 	bl	8000c18 <LL_AHB1_GRP1_EnableClock>
 8000e72:	2004      	movs	r0, #4
 8000e74:	f7ff fed0 	bl	8000c18 <LL_AHB1_GRP1_EnableClock>
 8000e78:	4b52      	ldr	r3, [pc, #328]	; (8000fc4 <HAL_UART_MspInit+0x218>)
 8000e7a:	f8c4 7128 	str.w	r7, [r4, #296]	; 0x128
 8000e7e:	f504 778c 	add.w	r7, r4, #280	; 0x118
 8000e82:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8000e86:	f04f 080f 	mov.w	r8, #15
 8000e8a:	2310      	movs	r3, #16
 8000e8c:	4638      	mov	r0, r7
 8000e8e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8000e92:	f8c4 811c 	str.w	r8, [r4, #284]	; 0x11c
 8000e96:	f8c4 5124 	str.w	r5, [r4, #292]	; 0x124
 8000e9a:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 8000e9e:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 8000ea2:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
 8000ea6:	f8c4 5138 	str.w	r5, [r4, #312]	; 0x138
 8000eaa:	f001 ff1b 	bl	8002ce4 <HAL_DMA_Init>
 8000eae:	203a      	movs	r0, #58	; 0x3a
 8000eb0:	6777      	str	r7, [r6, #116]	; 0x74
 8000eb2:	462a      	mov	r2, r5
 8000eb4:	4641      	mov	r1, r8
 8000eb6:	f8c4 6140 	str.w	r6, [r4, #320]	; 0x140
 8000eba:	f001 fe45 	bl	8002b48 <HAL_NVIC_SetPriority>
 8000ebe:	203a      	movs	r0, #58	; 0x3a

#if (CFG_HW_LPUART1_ENABLED == 1)
            case (uint32_t)LPUART1:
      HW_UART_MSP_UART_INIT( lpuart1, LPUART1 );
#if (CFG_HW_LPUART1_DMA_TX_SUPPORTED == 1)
            HW_UART_MSP_TX_DMA_INIT( lpuart1, LPUART1 );
 8000ec0:	f001 fe76 	bl	8002bb0 <HAL_NVIC_EnableIRQ>
            default:
                break;
        }

        return;
    }
 8000ec4:	b009      	add	sp, #36	; 0x24
 8000ec6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      HW_UART_MSP_UART_INIT( lpuart1, LPUART1 );
 8000eca:	2001      	movs	r0, #1
 8000ecc:	2500      	movs	r5, #0
 8000ece:	f7ff feaf 	bl	8000c30 <LL_AHB2_GRP1_EnableClock>
 8000ed2:	2702      	movs	r7, #2
 8000ed4:	2408      	movs	r4, #8
 8000ed6:	f04f 0903 	mov.w	r9, #3
 8000eda:	a903      	add	r1, sp, #12
 8000edc:	f04f 0804 	mov.w	r8, #4
 8000ee0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ee4:	e9cd 8703 	strd	r8, r7, [sp, #12]
 8000ee8:	9407      	str	r4, [sp, #28]
 8000eea:	e9cd 5905 	strd	r5, r9, [sp, #20]
 8000eee:	f002 f82d 	bl	8002f4c <HAL_GPIO_Init>
 8000ef2:	2001      	movs	r0, #1
 8000ef4:	f7ff fe9c 	bl	8000c30 <LL_AHB2_GRP1_EnableClock>
 8000ef8:	a903      	add	r1, sp, #12
 8000efa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000efe:	e9cd 4703 	strd	r4, r7, [sp, #12]
 8000f02:	9407      	str	r4, [sp, #28]
 8000f04:	e9cd 5905 	strd	r5, r9, [sp, #20]
 8000f08:	f002 f820 	bl	8002f4c <HAL_GPIO_Init>
 8000f0c:	2001      	movs	r0, #1
 8000f0e:	f7ff fe8f 	bl	8000c30 <LL_AHB2_GRP1_EnableClock>
 8000f12:	2340      	movs	r3, #64	; 0x40
 8000f14:	a903      	add	r1, sp, #12
 8000f16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f1a:	e9cd 3703 	strd	r3, r7, [sp, #12]
 8000f1e:	e9cd 7905 	strd	r7, r9, [sp, #20]
 8000f22:	9407      	str	r4, [sp, #28]
 8000f24:	f002 f812 	bl	8002f4c <HAL_GPIO_Init>
  *         @arg @ref LL_RCC_LPUART1_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetLPUARTClockSource(uint32_t LPUARTxSource)
{
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8000f28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f2c:	210f      	movs	r1, #15
 8000f2e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
            HW_UART_MSP_TX_DMA_INIT( lpuart1, LPUART1 );
 8000f32:	4c23      	ldr	r4, [pc, #140]	; (8000fc0 <HAL_UART_MspInit+0x214>)
 8000f34:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8000f38:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000f3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SET_BIT(RCC->APB1ENR2, Periphs);
 8000f40:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000f42:	f042 0201 	orr.w	r2, r2, #1
 8000f46:	65da      	str	r2, [r3, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f4a:	f003 0301 	and.w	r3, r3, #1
      HW_UART_MSP_UART_INIT( lpuart1, LPUART1 );
 8000f4e:	462a      	mov	r2, r5
 8000f50:	9302      	str	r3, [sp, #8]
 8000f52:	2025      	movs	r0, #37	; 0x25
  (void)tmpreg;
 8000f54:	9b02      	ldr	r3, [sp, #8]
 8000f56:	f001 fdf7 	bl	8002b48 <HAL_NVIC_SetPriority>
 8000f5a:	2025      	movs	r0, #37	; 0x25
 8000f5c:	f001 fe28 	bl	8002bb0 <HAL_NVIC_EnableIRQ>
            HW_UART_MSP_TX_DMA_INIT( lpuart1, LPUART1 );
 8000f60:	2001      	movs	r0, #1
 8000f62:	f7ff fe59 	bl	8000c18 <LL_AHB1_GRP1_EnableClock>
 8000f66:	4640      	mov	r0, r8
 8000f68:	f7ff fe56 	bl	8000c18 <LL_AHB1_GRP1_EnableClock>
 8000f6c:	4b16      	ldr	r3, [pc, #88]	; (8000fc8 <HAL_UART_MspInit+0x21c>)
 8000f6e:	f8c4 3178 	str.w	r3, [r4, #376]	; 0x178
 8000f72:	2311      	movs	r3, #17
 8000f74:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
 8000f78:	f504 77bc 	add.w	r7, r4, #376	; 0x178
 8000f7c:	2310      	movs	r3, #16
 8000f7e:	f8c4 3180 	str.w	r3, [r4, #384]	; 0x180
 8000f82:	4638      	mov	r0, r7
 8000f84:	2380      	movs	r3, #128	; 0x80
 8000f86:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 8000f8a:	f8c4 5184 	str.w	r5, [r4, #388]	; 0x184
 8000f8e:	f8c4 518c 	str.w	r5, [r4, #396]	; 0x18c
 8000f92:	f8c4 5190 	str.w	r5, [r4, #400]	; 0x190
 8000f96:	f8c4 5194 	str.w	r5, [r4, #404]	; 0x194
 8000f9a:	f8c4 5198 	str.w	r5, [r4, #408]	; 0x198
 8000f9e:	f001 fea1 	bl	8002ce4 <HAL_DMA_Init>
 8000fa2:	200e      	movs	r0, #14
 8000fa4:	6777      	str	r7, [r6, #116]	; 0x74
 8000fa6:	462a      	mov	r2, r5
 8000fa8:	210f      	movs	r1, #15
 8000faa:	f8c4 61a0 	str.w	r6, [r4, #416]	; 0x1a0
 8000fae:	f001 fdcb 	bl	8002b48 <HAL_NVIC_SetPriority>
 8000fb2:	200e      	movs	r0, #14
 8000fb4:	e784      	b.n	8000ec0 <HAL_UART_MspInit+0x114>
 8000fb6:	bf00      	nop
 8000fb8:	40008000 	.word	0x40008000
 8000fbc:	48000400 	.word	0x48000400
 8000fc0:	20000254 	.word	0x20000254
 8000fc4:	40020444 	.word	0x40020444
 8000fc8:	40020044 	.word	0x40020044

08000fcc <HAL_UART_RxCpltCallback>:

    void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
    {
        switch ((uint32_t)huart->Instance)
 8000fcc:	6803      	ldr	r3, [r0, #0]
 8000fce:	4a07      	ldr	r2, [pc, #28]	; (8000fec <HAL_UART_RxCpltCallback+0x20>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d007      	beq.n	8000fe4 <HAL_UART_RxCpltCallback+0x18>
 8000fd4:	f502 4238 	add.w	r2, r2, #47104	; 0xb800
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d105      	bne.n	8000fe8 <HAL_UART_RxCpltCallback+0x1c>
        {
#if (CFG_HW_USART1_ENABLED == 1)
            case (uint32_t)USART1:
                    if(HW_huart1RxCb)
 8000fdc:	4b04      	ldr	r3, [pc, #16]	; (8000ff0 <HAL_UART_RxCpltCallback+0x24>)
            break;
#endif

#if (CFG_HW_LPUART1_ENABLED == 1)
            case (uint32_t)LPUART1:
                    if(HW_lpuart1RxCb)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	b113      	cbz	r3, 8000fe8 <HAL_UART_RxCpltCallback+0x1c>
                    {
                        HW_lpuart1RxCb();
 8000fe2:	4718      	bx	r3
                    if(HW_lpuart1RxCb)
 8000fe4:	4b03      	ldr	r3, [pc, #12]	; (8000ff4 <HAL_UART_RxCpltCallback+0x28>)
 8000fe6:	e7fa      	b.n	8000fde <HAL_UART_RxCpltCallback+0x12>
            default:
                break;
        }

        return;
    }
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	40008000 	.word	0x40008000
 8000ff0:	200021bc 	.word	0x200021bc
 8000ff4:	200021b8 	.word	0x200021b8

08000ff8 <HAL_UART_TxCpltCallback>:

    void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
    {
        switch ((uint32_t)huart->Instance)
 8000ff8:	6803      	ldr	r3, [r0, #0]
 8000ffa:	4a07      	ldr	r2, [pc, #28]	; (8001018 <HAL_UART_TxCpltCallback+0x20>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d007      	beq.n	8001010 <HAL_UART_TxCpltCallback+0x18>
 8001000:	f502 4238 	add.w	r2, r2, #47104	; 0xb800
 8001004:	4293      	cmp	r3, r2
 8001006:	d105      	bne.n	8001014 <HAL_UART_TxCpltCallback+0x1c>
        {
#if (CFG_HW_USART1_ENABLED == 1)
            case (uint32_t)USART1:
                    if(HW_huart1TxCb)
 8001008:	4b04      	ldr	r3, [pc, #16]	; (800101c <HAL_UART_TxCpltCallback+0x24>)
            break;
#endif

#if (CFG_HW_LPUART1_ENABLED == 1)
            case (uint32_t)LPUART1:
                    if(HW_lpuart1TxCb)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	b113      	cbz	r3, 8001014 <HAL_UART_TxCpltCallback+0x1c>
                    {
                        HW_lpuart1TxCb();
 800100e:	4718      	bx	r3
                    if(HW_lpuart1TxCb)
 8001010:	4b03      	ldr	r3, [pc, #12]	; (8001020 <HAL_UART_TxCpltCallback+0x28>)
 8001012:	e7fa      	b.n	800100a <HAL_UART_TxCpltCallback+0x12>
            default:
                break;
        }

        return;
    }
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	40008000 	.word	0x40008000
 800101c:	200021c4 	.word	0x200021c4
 8001020:	200021c0 	.word	0x200021c0

08001024 <main>:
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8001024:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 * @brief  Main program
 * @param  None
 * @retval None
 */
int main( void )
{
 8001028:	b507      	push	{r0, r1, r2, lr}
  HAL_Init();
 800102a:	f001 fd4b 	bl	8002ac4 <HAL_Init>
 800102e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001032:	015b      	lsls	r3, r3, #5
 8001034:	d513      	bpl.n	800105e <main+0x3a>
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 8001036:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800103a:	00d8      	lsls	r0, r3, #3
 800103c:	d40f      	bmi.n	800105e <main+0x3a>

static void Reset_BackupDomain( void )
{
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 800103e:	f002 f83d 	bl	80030bc <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8001042:	f002 f83b 	bl	80030bc <HAL_PWR_EnableBkUpAccess>
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001046:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800104a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800104e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001052:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001056:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800105a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
  SET_BIT(RCC->AHB3ENR, Periphs);
 800105e:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
  WRITE_REG(IPCCx->C1SCR, Channel);
 8001062:	223f      	movs	r2, #63	; 0x3f
 8001064:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001066:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800106a:	6523      	str	r3, [r4, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800106c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800106e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001072:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001074:	9b01      	ldr	r3, [sp, #4]
 8001076:	4b31      	ldr	r3, [pc, #196]	; (800113c <main+0x118>)
 8001078:	609a      	str	r2, [r3, #8]
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
  WRITE_REG(IPCCx->C2SCR, Channel);
 800107a:	619a      	str	r2, [r3, #24]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800107c:	685a      	ldr	r2, [r3, #4]
 800107e:	f442 127c 	orr.w	r2, r2, #4128768	; 0x3f0000
 8001082:	605a      	str	r2, [r3, #4]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8001084:	695a      	ldr	r2, [r3, #20]
 8001086:	f442 127c 	orr.w	r2, r2, #4128768	; 0x3f0000
 800108a:	615a      	str	r2, [r3, #20]
  SET_BIT(IPCCx->C1MR, Channel);
 800108c:	685a      	ldr	r2, [r3, #4]
 800108e:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 8001092:	605a      	str	r2, [r3, #4]
  SET_BIT(IPCCx->C2MR, Channel);
 8001094:	695a      	ldr	r2, [r3, #20]
 8001096:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800109a:	615a      	str	r2, [r3, #20]
#endif

        /**
         *  Write twice the value to flush the APB-AHB bridge to ensure the  bit is written
         */
        HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 800109c:	f002 f80e 	bl	80030bc <HAL_PWR_EnableBkUpAccess>
        HAL_PWR_EnableBkUpAccess();
 80010a0:	f002 f80c 	bl	80030bc <HAL_PWR_EnableBkUpAccess>
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80010a4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80010a8:	f043 0301 	orr.w	r3, r3, #1
 80010ac:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80010b0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80010b4:	0799      	lsls	r1, r3, #30
 80010b6:	d5fb      	bpl.n	80010b0 <main+0x8c>
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80010b8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80010bc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010c4:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80010c8:	4b1d      	ldr	r3, [pc, #116]	; (8001140 <main+0x11c>)
 80010ca:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80010ce:	2200      	movs	r2, #0
 80010d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 80010d4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80010d8:	f002 0250 	and.w	r2, r2, #80	; 0x50
 80010dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 80010e0:	f001 ffec 	bl	80030bc <HAL_PWR_EnableBkUpAccess>
  HAL_PWR_EnableBkUpAccess();
 80010e4:	f001 ffea 	bl	80030bc <HAL_PWR_EnableBkUpAccess>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80010e8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  hrtc.Instance = RTC; /**< Define instance */
 80010ec:	4815      	ldr	r0, [pc, #84]	; (8001144 <main+0x120>)
 80010ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80010f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010f6:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80010fa:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80010fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001102:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001106:	220f      	movs	r2, #15
  hrtc.Instance = RTC; /**< Define instance */
 8001108:	4c0f      	ldr	r4, [pc, #60]	; (8001148 <main+0x124>)
 800110a:	6004      	str	r4, [r0, #0]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 800110c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001110:	e9c0 2302 	strd	r2, r3, [r0, #8]
  HAL_RTC_Init(&hrtc);
 8001114:	f002 f899 	bl	800324a <HAL_RTC_Init>
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8001118:	23ca      	movs	r3, #202	; 0xca
 800111a:	6263      	str	r3, [r4, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800111c:	2353      	movs	r3, #83	; 0x53
 800111e:	6263      	str	r3, [r4, #36]	; 0x24
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8001120:	68a3      	ldr	r3, [r4, #8]
 8001122:	f023 0307 	bic.w	r3, r3, #7
 8001126:	60a3      	str	r3, [r4, #8]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8001128:	23ff      	movs	r3, #255	; 0xff
 800112a:	6263      	str	r3, [r4, #36]	; 0x24
  APPE_Init( );
 800112c:	f7ff fa0c 	bl	8000548 <APPE_Init>
    UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 8001130:	f04f 30ff 	mov.w	r0, #4294967295
 8001134:	f004 fd58 	bl	8005be8 <UTIL_SEQ_Run>
 8001138:	e7fa      	b.n	8001130 <main+0x10c>
 800113a:	bf00      	nop
 800113c:	58000c00 	.word	0x58000c00
 8001140:	58000800 	.word	0x58000800
 8001144:	2000042c 	.word	0x2000042c
 8001148:	40002800 	.word	0x40002800

0800114c <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 800114c:	b570      	push	{r4, r5, r6, lr}
 800114e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001150:	f001 fcd4 	bl	8002afc <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001154:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8001156:	4606      	mov	r6, r0
  if (wait < HAL_MAX_DELAY)
 8001158:	d002      	beq.n	8001160 <HAL_Delay+0x14>
  {
    wait += HAL_GetTickFreq();
 800115a:	f001 fcd5 	bl	8002b08 <HAL_GetTickFreq>
 800115e:	4404      	add	r4, r0
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001160:	4d06      	ldr	r5, [pc, #24]	; (800117c <HAL_Delay+0x30>)
 8001162:	e004      	b.n	800116e <HAL_Delay+0x22>
 8001164:	692b      	ldr	r3, [r5, #16]
 8001166:	f023 0304 	bic.w	r3, r3, #4
 800116a:	612b      	str	r3, [r5, #16]
     */
  #if defined ( __CC_ARM)
    __force_stores();
  #endif

    __WFI( );
 800116c:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 800116e:	f001 fcc5 	bl	8002afc <HAL_GetTick>
 8001172:	1b80      	subs	r0, r0, r6
 8001174:	42a0      	cmp	r0, r4
 8001176:	d3f5      	bcc.n	8001164 <HAL_Delay+0x18>
  }
}
 8001178:	bd70      	pop	{r4, r5, r6, pc}
 800117a:	bf00      	nop
 800117c:	e000ed00 	.word	0xe000ed00

08001180 <NMI_Handler>:
 * @param  None
 * @retval None
 */
void NMI_Handler(void)
{
}
 8001180:	4770      	bx	lr

08001182 <HardFault_Handler>:
 * @brief  This function handles Hard Fault exception.
 * @param  None
 * @retval None
 */
void HardFault_Handler(void)
{
 8001182:	e7fe      	b.n	8001182 <HardFault_Handler>

08001184 <SVC_Handler>:
 8001184:	4770      	bx	lr

08001186 <DebugMon_Handler>:
 8001186:	4770      	bx	lr

08001188 <PendSV_Handler>:
 8001188:	4770      	bx	lr

0800118a <SysTick_Handler>:
 * @param  None
 * @retval None
 */
void SysTick_Handler(void)
{
  HAL_IncTick();
 800118a:	f001 bcab 	b.w	8002ae4 <HAL_IncTick>

0800118e <EXTI4_IRQHandler>:
 800118e:	4770      	bx	lr

08001190 <EXTI0_IRQHandler>:
 8001190:	4770      	bx	lr

08001192 <EXTI1_IRQHandler>:
 8001192:	4770      	bx	lr

08001194 <USART1_IRQHandler>:
}

#if(CFG_HW_USART1_ENABLED == 1)
void USART1_IRQHandler(void)
{
  HW_UART_Interrupt_Handler(hw_uart1);
 8001194:	2000      	movs	r0, #0
 8001196:	f7ff bded 	b.w	8000d74 <HW_UART_Interrupt_Handler>

0800119a <DMA2_Channel4_IRQHandler>:
#endif

#if(CFG_HW_USART1_DMA_TX_SUPPORTED == 1)
void CFG_HW_USART1_DMA_TX_IRQHandler( void )
{
  HW_UART_DMA_Interrupt_Handler(hw_uart1);
 800119a:	2000      	movs	r0, #0
 800119c:	f7ff bdf8 	b.w	8000d90 <HW_UART_DMA_Interrupt_Handler>

080011a0 <LPUART1_IRQHandler>:
#endif

#if(CFG_HW_LPUART1_ENABLED == 1)
void LPUART1_IRQHandler(void)
{
  HW_UART_Interrupt_Handler(hw_lpuart1);
 80011a0:	2002      	movs	r0, #2
 80011a2:	f7ff bde7 	b.w	8000d74 <HW_UART_Interrupt_Handler>

080011a6 <DMA1_Channel4_IRQHandler>:
#endif

#if(CFG_HW_LPUART1_DMA_TX_SUPPORTED == 1)
void CFG_HW_LPUART1_DMA_TX_IRQHandler( void )
{
  HW_UART_DMA_Interrupt_Handler(hw_lpuart1);
 80011a6:	2002      	movs	r0, #2
 80011a8:	f7ff bdf2 	b.w	8000d90 <HW_UART_DMA_Interrupt_Handler>

080011ac <RTC_WKUP_IRQHandler>:
}
#endif

void RTC_WKUP_IRQHandler(void)
{
  HW_TS_RTC_Wakeup_Handler();
 80011ac:	f7ff bcd4 	b.w	8000b58 <HW_TS_RTC_Wakeup_Handler>

080011b0 <IPCC_C1_TX_IRQHandler>:
}

void IPCC_C1_TX_IRQHandler(void)
{
  HW_IPCC_Tx_Handler();
 80011b0:	f001 ba98 	b.w	80026e4 <HW_IPCC_Tx_Handler>

080011b4 <IPCC_C1_RX_IRQHandler>:
  return;
}

void IPCC_C1_RX_IRQHandler(void)
{
  HW_IPCC_Rx_Handler();
 80011b4:	f001 baf6 	b.w	80027a4 <HW_IPCC_Rx_Handler>

080011b8 <ConnMgr>:
  /**
   * The code shall be executed in the background as an aci command may be sent
   * The background is the only place where the application can make sure a new aci command
   * is not sent if there is a pending one
   */
  UTIL_SEQ_SetTask(1 << CFG_TASK_CONN_MGR_ID, CFG_SCH_PRIO_0);
 80011b8:	2100      	movs	r1, #0
 80011ba:	2001      	movs	r0, #1
 80011bc:	f004 bcd8 	b.w	8005b70 <UTIL_SEQ_SetTask>

080011c0 <BLE_UserEvtRx>:
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
  return;
}

static void BLE_UserEvtRx( void * pPayload )
{
 80011c0:	b510      	push	{r4, lr}
 80011c2:	4604      	mov	r4, r0
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload; 

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 80011c4:	6840      	ldr	r0, [r0, #4]
 80011c6:	3008      	adds	r0, #8
 80011c8:	f003 fa32 	bl	8004630 <SVCCTL_UserEvtRx>
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 80011cc:	b110      	cbz	r0, 80011d4 <BLE_UserEvtRx+0x14>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 80011ce:	2301      	movs	r3, #1
 80011d0:	7023      	strb	r3, [r4, #0]
  }
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }
}
 80011d2:	bd10      	pop	{r4, pc}
    pParam->status = HCI_TL_UserEventFlow_Disable;
 80011d4:	7020      	strb	r0, [r4, #0]
}
 80011d6:	e7fc      	b.n	80011d2 <BLE_UserEvtRx+0x12>

080011d8 <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
  uint32_t task_id_list;
  switch (status)
 80011d8:	b110      	cbz	r0, 80011e0 <BLE_StatusNot+0x8>
 80011da:	2801      	cmp	r0, #1
 80011dc:	d003      	beq.n	80011e6 <BLE_StatusNot+0xe>
 80011de:	4770      	bx	lr
      /**
       * All tasks that may send an aci/hci commands shall be listed here
       * This is to prevent a new command is sent while one is already pending
       */
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
      UTIL_SEQ_PauseTask(task_id_list);
 80011e0:	203f      	movs	r0, #63	; 0x3f
 80011e2:	f004 bcd9 	b.w	8005b98 <UTIL_SEQ_PauseTask>
      /**
       * All tasks that may send an aci/hci commands shall be listed here
       * This is to prevent a new command is sent while one is already pending
       */
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
      UTIL_SEQ_ResumeTask(task_id_list);
 80011e6:	203f      	movs	r0, #63	; 0x3f
 80011e8:	f004 bce4 	b.w	8005bb4 <UTIL_SEQ_ResumeTask>

080011ec <Connect_Request>:
{
 80011ec:	b530      	push	{r4, r5, lr}
      (BleApplicationContext.Device_Connection_Status[index] != APP_BLE_IDLE))
 80011ee:	4d16      	ldr	r5, [pc, #88]	; (8001248 <Connect_Request+0x5c>)
  APP_DBG_MSG("** CREATE CONNECTION TO SERVER **\n");
 80011f0:	4816      	ldr	r0, [pc, #88]	; (800124c <Connect_Request+0x60>)
      (BleApplicationContext.Device_Connection_Status[index] != APP_BLE_IDLE))
 80011f2:	f895 4090 	ldrb.w	r4, [r5, #144]	; 0x90
{
 80011f6:	b089      	sub	sp, #36	; 0x24
  APP_DBG_MSG("** CREATE CONNECTION TO SERVER **\n");
 80011f8:	f004 fe3e 	bl	8005e78 <puts>
  if (index < CFG_MAX_CONNECTION)
 80011fc:	b9f4      	cbnz	r4, 800123c <Connect_Request+0x50>
    result = aci_gap_create_connection(
 80011fe:	2310      	movs	r3, #16
 8001200:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8001204:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001208:	2250      	movs	r2, #80	; 0x50
 800120a:	e9cd 4303 	strd	r4, r3, [sp, #12]
 800120e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8001212:	2328      	movs	r3, #40	; 0x28
 8001214:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8001218:	9400      	str	r4, [sp, #0]
 800121a:	4b0d      	ldr	r3, [pc, #52]	; (8001250 <Connect_Request+0x64>)
 800121c:	4622      	mov	r2, r4
 800121e:	4608      	mov	r0, r1
 8001220:	f003 fb9e 	bl	8004960 <aci_gap_create_connection>
    if (result == BLE_STATUS_SUCCESS)
 8001224:	b920      	cbnz	r0, 8001230 <Connect_Request+0x44>
      BleApplicationContext.Device_Connection_Status[index] = APP_BLE_LP_CONNECTING;
 8001226:	2303      	movs	r3, #3
 8001228:	f885 3090 	strb.w	r3, [r5, #144]	; 0x90
}
 800122c:	b009      	add	sp, #36	; 0x24
 800122e:	bd30      	pop	{r4, r5, pc}
      BSP_LED_On(LED_RED);
 8001230:	2002      	movs	r0, #2
 8001232:	f001 fb71 	bl	8002918 <BSP_LED_On>
      BleApplicationContext.Device_Connection_Status[index] = APP_BLE_IDLE;
 8001236:	f885 4090 	strb.w	r4, [r5, #144]	; 0x90
 800123a:	e7f7      	b.n	800122c <Connect_Request+0x40>
    APP_DBG_MSG("No stored connection in state APP_BLE_CONNECTED_CLIENT!\n");
 800123c:	4805      	ldr	r0, [pc, #20]	; (8001254 <Connect_Request+0x68>)
}
 800123e:	b009      	add	sp, #36	; 0x24
 8001240:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    APP_DBG_MSG("No stored connection in state APP_BLE_CONNECTED_CLIENT!\n");
 8001244:	f004 be18 	b.w	8005e78 <puts>
 8001248:	20000134 	.word	0x20000134
 800124c:	080071f2 	.word	0x080071f2
 8001250:	200021c8 	.word	0x200021c8
 8001254:	08007214 	.word	0x08007214

08001258 <Scan_Request>:
      (BleApplicationContext.Device_Connection_Status[index] != APP_BLE_IDLE))
 8001258:	4b0f      	ldr	r3, [pc, #60]	; (8001298 <Scan_Request+0x40>)
{
 800125a:	b510      	push	{r4, lr}
  while((index < CFG_MAX_CONNECTION) &&
 800125c:	f893 4090 	ldrb.w	r4, [r3, #144]	; 0x90
 8001260:	b9bc      	cbnz	r4, 8001292 <Scan_Request+0x3a>
    BSP_LED_On(LED_BLUE);
 8001262:	4620      	mov	r0, r4
 8001264:	f001 fb58 	bl	8002918 <BSP_LED_On>
    result = aci_gap_start_general_discovery_proc(SCAN_P, SCAN_L, PUBLIC_ADDR, 1);
 8001268:	f44f 7148 	mov.w	r1, #800	; 0x320
 800126c:	2301      	movs	r3, #1
 800126e:	4622      	mov	r2, r4
 8001270:	4608      	mov	r0, r1
 8001272:	f003 fb49 	bl	8004908 <aci_gap_start_general_discovery_proc>
    if (result == BLE_STATUS_SUCCESS)
 8001276:	b138      	cbz	r0, 8001288 <Scan_Request+0x30>
      APP_DBG_MSG("-- aci_gap_start_general_discovery_proc, Failed\n");
 8001278:	4808      	ldr	r0, [pc, #32]	; (800129c <Scan_Request+0x44>)
 800127a:	f004 fdfd 	bl	8005e78 <puts>
      BSP_LED_On(LED_RED);
 800127e:	2002      	movs	r0, #2
}
 8001280:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      BSP_LED_On(LED_RED);
 8001284:	f001 bb48 	b.w	8002918 <BSP_LED_On>
      APP_DBG_MSG("** START GENERAL DISCOVERY (SCAN) **\n");
 8001288:	4805      	ldr	r0, [pc, #20]	; (80012a0 <Scan_Request+0x48>)
}
 800128a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    APP_DBG_MSG("No stored connection in state APP_BLE_IDLE!\n");
 800128e:	f004 bdf3 	b.w	8005e78 <puts>
 8001292:	4804      	ldr	r0, [pc, #16]	; (80012a4 <Scan_Request+0x4c>)
 8001294:	e7f9      	b.n	800128a <Scan_Request+0x32>
 8001296:	bf00      	nop
 8001298:	20000134 	.word	0x20000134
 800129c:	08007271 	.word	0x08007271
 80012a0:	0800724c 	.word	0x0800724c
 80012a4:	080072a1 	.word	0x080072a1

080012a8 <AdvUpdate>:
{
 80012a8:	b530      	push	{r4, r5, lr}
    while((index < CFG_MAX_CONNECTION) && (BleApplicationContext.Device_Connection_Status[index] != APP_BLE_FAST_ADV))
 80012aa:	4c28      	ldr	r4, [pc, #160]	; (800134c <AdvUpdate+0xa4>)
 80012ac:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
 80012b0:	2b01      	cmp	r3, #1
{
 80012b2:	b089      	sub	sp, #36	; 0x24
    while((index < CFG_MAX_CONNECTION) && (BleApplicationContext.Device_Connection_Status[index] != APP_BLE_FAST_ADV))
 80012b4:	d143      	bne.n	800133e <AdvUpdate+0x96>
    HW_TS_Stop(BleApplicationContext.Connection_mgr_timer_Id);
 80012b6:	f894 0091 	ldrb.w	r0, [r4, #145]	; 0x91
 80012ba:	f7ff fb57 	bl	800096c <HW_TS_Stop>
    APP_DBG_MSG("First index in %d state: %d\n",
 80012be:	2200      	movs	r2, #0
 80012c0:	f894 1090 	ldrb.w	r1, [r4, #144]	; 0x90
 80012c4:	4822      	ldr	r0, [pc, #136]	; (8001350 <AdvUpdate+0xa8>)
 80012c6:	f004 fd4f 	bl	8005d68 <iprintf>
            || (BleApplicationContext.Device_Connection_Status[index] == APP_BLE_LP_ADV)))
 80012ca:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
        && ((BleApplicationContext.Device_Connection_Status[index] == APP_BLE_FAST_ADV)
 80012ce:	3b01      	subs	r3, #1
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d807      	bhi.n	80012e4 <AdvUpdate+0x3c>
      ret = aci_gap_set_non_discoverable();
 80012d4:	f003 f9e0 	bl	8004698 <aci_gap_set_non_discoverable>
      if (ret == BLE_STATUS_SUCCESS)
 80012d8:	4602      	mov	r2, r0
 80012da:	bb20      	cbnz	r0, 8001326 <AdvUpdate+0x7e>
        APP_DBG_MSG("Successfully Stopped Advertising at index: %d\n", index);
 80012dc:	4601      	mov	r1, r0
 80012de:	481d      	ldr	r0, [pc, #116]	; (8001354 <AdvUpdate+0xac>)
 80012e0:	f004 fd42 	bl	8005d68 <iprintf>
    BleApplicationContext.Device_Connection_Status[index] = New_Status;
 80012e4:	2302      	movs	r3, #2
 80012e6:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    ret = aci_gap_set_discoverable(
 80012ea:	4b1b      	ldr	r3, [pc, #108]	; (8001358 <AdvUpdate+0xb0>)
 80012ec:	9304      	str	r3, [sp, #16]
 80012ee:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80012f2:	9303      	str	r3, [sp, #12]
 80012f4:	4b19      	ldr	r3, [pc, #100]	; (800135c <AdvUpdate+0xb4>)
 80012f6:	9302      	str	r3, [sp, #8]
 80012f8:	2500      	movs	r5, #0
 80012fa:	2304      	movs	r3, #4
 80012fc:	e9cd 5300 	strd	r5, r3, [sp]
 8001300:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001304:	e9cd 5505 	strd	r5, r5, [sp, #20]
 8001308:	462b      	mov	r3, r5
 800130a:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 800130e:	4628      	mov	r0, r5
 8001310:	f003 f9e0 	bl	80046d4 <aci_gap_set_discoverable>
    if (ret == BLE_STATUS_SUCCESS)
 8001314:	4602      	mov	r2, r0
 8001316:	b958      	cbnz	r0, 8001330 <AdvUpdate+0x88>
        APP_DBG_MSG("Successfully Start Low Power Advertising at index: %d\n", index);
 8001318:	4601      	mov	r1, r0
 800131a:	4811      	ldr	r0, [pc, #68]	; (8001360 <AdvUpdate+0xb8>)
}
 800131c:	b009      	add	sp, #36	; 0x24
 800131e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        APP_DBG_MSG("Successfully Start Low Power Advertising at index: %d\n", index);
 8001322:	f004 bd21 	b.w	8005d68 <iprintf>
        APP_DBG_MSG("Stop Advertising Failed at index: %d, result: %d \n", index, ret);
 8001326:	2100      	movs	r1, #0
 8001328:	480e      	ldr	r0, [pc, #56]	; (8001364 <AdvUpdate+0xbc>)
 800132a:	f004 fd1d 	bl	8005d68 <iprintf>
 800132e:	e7d9      	b.n	80012e4 <AdvUpdate+0x3c>
        APP_DBG_MSG("Start Low Power Advertising Failed at index: %d, result: 0x%x \n", index, ret);
 8001330:	480d      	ldr	r0, [pc, #52]	; (8001368 <AdvUpdate+0xc0>)
 8001332:	4629      	mov	r1, r5
}
 8001334:	b009      	add	sp, #36	; 0x24
 8001336:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        APP_DBG_MSG("Start Low Power Advertising Failed at index: %d, result: 0x%x \n", index, ret);
 800133a:	f004 bd15 	b.w	8005d68 <iprintf>
    APP_DBG_MSG("No index in APP_BLE_IDLE state !\n");
 800133e:	480b      	ldr	r0, [pc, #44]	; (800136c <AdvUpdate+0xc4>)
}
 8001340:	b009      	add	sp, #36	; 0x24
 8001342:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    APP_DBG_MSG("No index in APP_BLE_IDLE state !\n");
 8001346:	f004 bd97 	b.w	8005e78 <puts>
 800134a:	bf00      	nop
 800134c:	20000134 	.word	0x20000134
 8001350:	080073a6 	.word	0x080073a6
 8001354:	080072cd 	.word	0x080072cd
 8001358:	2000015d 	.word	0x2000015d
 800135c:	08007018 	.word	0x08007018
 8001360:	0800732f 	.word	0x0800732f
 8001364:	080072fc 	.word	0x080072fc
 8001368:	08007366 	.word	0x08007366
 800136c:	080073c3 	.word	0x080073c3

08001370 <APP_BLE_Init>:
{
 8001370:	b570      	push	{r4, r5, r6, lr}
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8001372:	4b67      	ldr	r3, [pc, #412]	; (8001510 <APP_BLE_Init+0x1a0>)
{
 8001374:	b096      	sub	sp, #88	; 0x58
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8001376:	aa0a      	add	r2, sp, #40	; 0x28
 8001378:	f103 0628 	add.w	r6, r3, #40	; 0x28
 800137c:	4615      	mov	r5, r2
 800137e:	6818      	ldr	r0, [r3, #0]
 8001380:	6859      	ldr	r1, [r3, #4]
 8001382:	4614      	mov	r4, r2
 8001384:	c403      	stmia	r4!, {r0, r1}
 8001386:	3308      	adds	r3, #8
 8001388:	42b3      	cmp	r3, r6
 800138a:	4622      	mov	r2, r4
 800138c:	d1f7      	bne.n	800137e <APP_BLE_Init+0xe>
 800138e:	6818      	ldr	r0, [r3, #0]
 8001390:	791b      	ldrb	r3, [r3, #4]
 8001392:	7123      	strb	r3, [r4, #4]
  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8001394:	4b5f      	ldr	r3, [pc, #380]	; (8001514 <APP_BLE_Init+0x1a4>)
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8001396:	6020      	str	r0, [r4, #0]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8001398:	a908      	add	r1, sp, #32
  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800139a:	9308      	str	r3, [sp, #32]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800139c:	485e      	ldr	r0, [pc, #376]	; (8001518 <APP_BLE_Init+0x1a8>)
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800139e:	4b5f      	ldr	r3, [pc, #380]	; (800151c <APP_BLE_Init+0x1ac>)
 80013a0:	9309      	str	r3, [sp, #36]	; 0x24
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 80013a2:	f003 fe9f 	bl	80050e4 <hci_init>
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 80013a6:	2101      	movs	r1, #1
 80013a8:	2002      	movs	r0, #2
 80013aa:	f004 fb9f 	bl	8005aec <UTIL_LPM_SetOffMode>
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 80013ae:	4c5c      	ldr	r4, [pc, #368]	; (8001520 <APP_BLE_Init+0x1b0>)
  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 80013b0:	4a5c      	ldr	r2, [pc, #368]	; (8001524 <APP_BLE_Init+0x1b4>)
 80013b2:	2100      	movs	r1, #0
 80013b4:	2020      	movs	r0, #32
 80013b6:	f004 fbcb 	bl	8005b50 <UTIL_SEQ_RegTask>
  SHCI_C2_BLE_Init( &ble_init_cmd_packet );
 80013ba:	4628      	mov	r0, r5
  uint16_t appearance[1] = { CFG_GAP_APPEARANCE }; /* Generic Heart Rate Sensor */
 80013bc:	2500      	movs	r5, #0
  SHCI_C2_BLE_Init( &ble_init_cmd_packet );
 80013be:	f003 fe69 	bl	8005094 <SHCI_C2_BLE_Init>
  uint16_t appearance[1] = { CFG_GAP_APPEARANCE }; /* Generic Heart Rate Sensor */
 80013c2:	f8ad 5018 	strh.w	r5, [sp, #24]
  hci_reset();
 80013c6:	f003 fd7f 	bl	8004ec8 <hci_reset>
 80013ca:	6823      	ldr	r3, [r4, #0]
  if(udn != 0xFFFFFFFF)
 80013cc:	1c5a      	adds	r2, r3, #1
 80013ce:	f000 8097 	beq.w	8001500 <APP_BLE_Init+0x190>
  *         For STM32WBxxxx devices, the ST Compagny ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Compagny ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 80013d2:	4a55      	ldr	r2, [pc, #340]	; (8001528 <APP_BLE_Init+0x1b8>)
 80013d4:	6811      	ldr	r1, [r2, #0]
    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 80013d6:	4a55      	ldr	r2, [pc, #340]	; (800152c <APP_BLE_Init+0x1bc>)
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 80013d8:	0a18      	lsrs	r0, r3, #8
    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 80013da:	7013      	strb	r3, [r2, #0]
    bd_addr_udn[2] = (uint8_t)( (udn & 0x00FF0000) >> 16 );
 80013dc:	0c1b      	lsrs	r3, r3, #16
 80013de:	7093      	strb	r3, [r2, #2]
    bd_addr_udn[3] = (uint8_t)device_id;
 80013e0:	70d1      	strb	r1, [r2, #3]
 80013e2:	0a0b      	lsrs	r3, r1, #8
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 80013e4:	0c09      	lsrs	r1, r1, #16
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 80013e6:	7050      	strb	r0, [r2, #1]
    bd_addr_udn[4] = (uint8_t)(company_id & 0x000000FF);;
 80013e8:	7113      	strb	r3, [r2, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 80013ea:	7151      	strb	r1, [r2, #5]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 80013ec:	2106      	movs	r1, #6
 80013ee:	2000      	movs	r0, #0
 80013f0:	f003 fd18 	bl	8004e24 <aci_hal_write_config_data>
  srd_bd_addr[1] =  0x0000ED6E;
 80013f4:	f64e 536e 	movw	r3, #60782	; 0xed6e
 80013f8:	9309      	str	r3, [sp, #36]	; 0x24
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 80013fa:	6823      	ldr	r3, [r4, #0]
  srd_bd_addr[0] =  LL_FLASH_GetUDN( );
 80013fc:	9308      	str	r3, [sp, #32]
  aci_hal_write_config_data( CONFIG_DATA_RANDOM_ADDRESS_OFFSET, CONFIG_DATA_RANDOM_ADDRESS_LEN, (uint8_t*)srd_bd_addr );
 80013fe:	aa08      	add	r2, sp, #32
 8001400:	2106      	movs	r1, #6
 8001402:	202e      	movs	r0, #46	; 0x2e
 8001404:	f003 fd0e 	bl	8004e24 <aci_hal_write_config_data>
    aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 8001408:	4a49      	ldr	r2, [pc, #292]	; (8001530 <APP_BLE_Init+0x1c0>)
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800140a:	4d4a      	ldr	r5, [pc, #296]	; (8001534 <APP_BLE_Init+0x1c4>)
    aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 800140c:	2110      	movs	r1, #16
 800140e:	2018      	movs	r0, #24
 8001410:	f003 fd08 	bl	8004e24 <aci_hal_write_config_data>
    aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 8001414:	4a48      	ldr	r2, [pc, #288]	; (8001538 <APP_BLE_Init+0x1c8>)
 8001416:	2110      	movs	r1, #16
 8001418:	2008      	movs	r0, #8
 800141a:	f003 fd03 	bl	8004e24 <aci_hal_write_config_data>
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800141e:	2118      	movs	r1, #24
 8001420:	2001      	movs	r0, #1
 8001422:	f003 fd2b 	bl	8004e7c <aci_hal_set_tx_power_level>
  aci_gatt_init();
 8001426:	f003 fadf 	bl	80049e8 <aci_gatt_init>
    aci_gap_init(role, 0,
 800142a:	f10d 031e 	add.w	r3, sp, #30
 800142e:	9301      	str	r3, [sp, #4]
 8001430:	ab07      	add	r3, sp, #28
 8001432:	9300      	str	r3, [sp, #0]
 8001434:	2207      	movs	r2, #7
 8001436:	f10d 031a 	add.w	r3, sp, #26
 800143a:	2100      	movs	r1, #0
 800143c:	2004      	movs	r0, #4
 800143e:	f003 fa03 	bl	8004848 <aci_gap_init>
    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 8001442:	4b3e      	ldr	r3, [pc, #248]	; (800153c <APP_BLE_Init+0x1cc>)
 8001444:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8001448:	9300      	str	r3, [sp, #0]
 800144a:	2200      	movs	r2, #0
 800144c:	2307      	movs	r3, #7
 800144e:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 8001452:	f003 fb8f 	bl	8004b74 <aci_gatt_update_char_value>
  if(aci_gatt_update_char_value(gap_service_handle,
 8001456:	ab06      	add	r3, sp, #24
 8001458:	2200      	movs	r2, #0
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800145a:	2400      	movs	r4, #0
  if(aci_gatt_update_char_value(gap_service_handle,
 800145c:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 8001460:	9300      	str	r3, [sp, #0]
 8001462:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 8001466:	2302      	movs	r3, #2
 8001468:	f003 fb84 	bl	8004b74 <aci_gatt_update_char_value>
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800146c:	4620      	mov	r0, r4
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800146e:	702c      	strb	r4, [r5, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8001470:	f003 f98c 	bl	800478c <aci_gap_set_io_capability>
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = 1;
 8001474:	f640 0201 	movw	r2, #2049	; 0x801
 8001478:	82aa      	strh	r2, [r5, #20]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = 8;
 800147a:	2210      	movs	r2, #16
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800147c:	2301      	movs	r3, #1
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = 8;
 800147e:	75aa      	strb	r2, [r5, #22]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = 111111;
 8001480:	4a2f      	ldr	r2, [pc, #188]	; (8001540 <APP_BLE_Init+0x1d0>)
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8001482:	706b      	strb	r3, [r5, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data_Present = 0;
 8001484:	70ec      	strb	r4, [r5, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = 111111;
 8001486:	61aa      	str	r2, [r5, #24]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = 1;
 8001488:	70ab      	strb	r3, [r5, #2]
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data[index] = (uint8_t) index;
 800148a:	192b      	adds	r3, r5, r4
 800148c:	711c      	strb	r4, [r3, #4]
 800148e:	3401      	adds	r4, #1
  for (index = 0; index < 16; index++)
 8001490:	2c10      	cmp	r4, #16
 8001492:	d1fa      	bne.n	800148a <APP_BLE_Init+0x11a>
  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8001494:	4a2a      	ldr	r2, [pc, #168]	; (8001540 <APP_BLE_Init+0x1d0>)
 8001496:	2300      	movs	r3, #0
 8001498:	e9cd 2303 	strd	r2, r3, [sp, #12]
 800149c:	2101      	movs	r1, #1
 800149e:	2208      	movs	r2, #8
 80014a0:	9200      	str	r2, [sp, #0]
 80014a2:	e9cd 4101 	strd	r4, r1, [sp, #4]
 80014a6:	461a      	mov	r2, r3
 80014a8:	4608      	mov	r0, r1
 80014aa:	f003 f991 	bl	80047d0 <aci_gap_set_authentication_requirement>
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 80014ae:	78ab      	ldrb	r3, [r5, #2]
 80014b0:	b10b      	cbz	r3, 80014b6 <APP_BLE_Init+0x146>
     aci_gap_configure_whitelist();
 80014b2:	f003 fa0b 	bl	80048cc <aci_gap_configure_whitelist>
  SVCCTL_Init();
 80014b6:	f003 f899 	bl	80045ec <SVCCTL_Init>
  UTIL_SEQ_RegTask( 1<<CFG_TASK_CONN_MGR_ID, UTIL_SEQ_RFU, AdvUpdate);
 80014ba:	4a22      	ldr	r2, [pc, #136]	; (8001544 <APP_BLE_Init+0x1d4>)
 80014bc:	2100      	movs	r1, #0
 80014be:	2001      	movs	r0, #1
 80014c0:	f004 fb46 	bl	8005b50 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask( 1<<CFG_TASK_SCAN_REQ_ID, UTIL_SEQ_RFU, Scan_Request);
 80014c4:	4a20      	ldr	r2, [pc, #128]	; (8001548 <APP_BLE_Init+0x1d8>)
 80014c6:	2100      	movs	r1, #0
 80014c8:	2004      	movs	r0, #4
 80014ca:	f004 fb41 	bl	8005b50 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask( 1<<CFG_TASK_CONN_REQ_ID, UTIL_SEQ_RFU, Connect_Request);
 80014ce:	4a1f      	ldr	r2, [pc, #124]	; (800154c <APP_BLE_Init+0x1dc>)
 80014d0:	2100      	movs	r1, #0
 80014d2:	2008      	movs	r0, #8
 80014d4:	f004 fb3c 	bl	8005b50 <UTIL_SEQ_RegTask>
    BleApplicationContext.Device_Connection_Status[index] = APP_BLE_IDLE;
 80014d8:	2400      	movs	r4, #0
    BleApplicationContext.BleApplicationContext_legacy.connectionHandle[index] = 0xFFFF;
 80014da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014de:	84eb      	strh	r3, [r5, #38]	; 0x26
    BleApplicationContext.Device_Connection_Status[index] = APP_BLE_IDLE;
 80014e0:	f885 4090 	strb.w	r4, [r5, #144]	; 0x90
  CRCAPP_Init();
 80014e4:	f001 f804 	bl	80024f0 <CRCAPP_Init>
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Connection_mgr_timer_Id), hw_ts_SingleShot, ConnMgr);
 80014e8:	4b19      	ldr	r3, [pc, #100]	; (8001550 <APP_BLE_Init+0x1e0>)
 80014ea:	491a      	ldr	r1, [pc, #104]	; (8001554 <APP_BLE_Init+0x1e4>)
 80014ec:	4622      	mov	r2, r4
 80014ee:	4620      	mov	r0, r4
 80014f0:	f7ff fa12 	bl	8000918 <HW_TS_Create>
  UTIL_SEQ_SetTask(1 << CFG_TASK_SCAN_REQ_ID, CFG_SCH_PRIO_0);
 80014f4:	4621      	mov	r1, r4
 80014f6:	2004      	movs	r0, #4
 80014f8:	f004 fb3a 	bl	8005b70 <UTIL_SEQ_SetTask>
}
 80014fc:	b016      	add	sp, #88	; 0x58
 80014fe:	bd70      	pop	{r4, r5, r6, pc}
    otp_addr = OTP_Read(0);
 8001500:	4628      	mov	r0, r5
 8001502:	f004 f8e1 	bl	80056c8 <OTP_Read>
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 8001506:	4a14      	ldr	r2, [pc, #80]	; (8001558 <APP_BLE_Init+0x1e8>)
 8001508:	2800      	cmp	r0, #0
 800150a:	bf18      	it	ne
 800150c:	4602      	movne	r2, r0
 800150e:	e76d      	b.n	80013ec <APP_BLE_Init+0x7c>
 8001510:	08007022 	.word	0x08007022
 8001514:	20030024 	.word	0x20030024
 8001518:	080011c1 	.word	0x080011c1
 800151c:	080011d9 	.word	0x080011d9
 8001520:	1fff7580 	.word	0x1fff7580
 8001524:	08005131 	.word	0x08005131
 8001528:	1fff7584 	.word	0x1fff7584
 800152c:	20000450 	.word	0x20000450
 8001530:	0800704f 	.word	0x0800704f
 8001534:	20000134 	.word	0x20000134
 8001538:	0800705f 	.word	0x0800705f
 800153c:	080073e4 	.word	0x080073e4
 8001540:	0001b207 	.word	0x0001b207
 8001544:	080012a9 	.word	0x080012a9
 8001548:	08001259 	.word	0x08001259
 800154c:	080011ed 	.word	0x080011ed
 8001550:	080011b9 	.word	0x080011b9
 8001554:	200001c5 	.word	0x200001c5
 8001558:	0800701c 	.word	0x0800701c

0800155c <SVCCTL_App_Notification>:
{
 800155c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  switch (event_pckt->evt)
 8001560:	7843      	ldrb	r3, [r0, #1]
 8001562:	2b3e      	cmp	r3, #62	; 0x3e
{
 8001564:	b085      	sub	sp, #20
 8001566:	4604      	mov	r4, r0
  switch (event_pckt->evt)
 8001568:	d036      	beq.n	80015d8 <SVCCTL_App_Notification+0x7c>
 800156a:	2bff      	cmp	r3, #255	; 0xff
 800156c:	d016      	beq.n	800159c <SVCCTL_App_Notification+0x40>
 800156e:	2b05      	cmp	r3, #5
 8001570:	d12e      	bne.n	80015d0 <SVCCTL_App_Notification+0x74>
          && (BleApplicationContext.BleApplicationContext_legacy.connectionHandle[index]
 8001572:	4dbb      	ldr	r5, [pc, #748]	; (8001860 <SVCCTL_App_Notification+0x304>)
      APP_DBG_MSG("EVT_DISCONN_COMPLETE for connection handle 0x%x\n",
 8001574:	8881      	ldrh	r1, [r0, #4]
 8001576:	48bb      	ldr	r0, [pc, #748]	; (8001864 <SVCCTL_App_Notification+0x308>)
 8001578:	f004 fbf6 	bl	8005d68 <iprintf>
          && (BleApplicationContext.BleApplicationContext_legacy.connectionHandle[index]
 800157c:	8cea      	ldrh	r2, [r5, #38]	; 0x26
 800157e:	88a3      	ldrh	r3, [r4, #4]
 8001580:	429a      	cmp	r2, r3
 8001582:	f040 81c7 	bne.w	8001914 <SVCCTL_App_Notification+0x3b8>
        APP_DBG_MSG("Index of the handle deconnected: %d\n", index);
 8001586:	2100      	movs	r1, #0
 8001588:	48b7      	ldr	r0, [pc, #732]	; (8001868 <SVCCTL_App_Notification+0x30c>)
 800158a:	f004 fbed 	bl	8005d68 <iprintf>
        BleApplicationContext.Device_Connection_Status[index] = APP_BLE_IDLE;
 800158e:	2300      	movs	r3, #0
 8001590:	f885 3090 	strb.w	r3, [r5, #144]	; 0x90
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle[index] = 0xFFFF;
 8001594:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001598:	84eb      	strh	r3, [r5, #38]	; 0x26
  return (SVCCTL_UserEvtFlowEnable);
 800159a:	e019      	b.n	80015d0 <SVCCTL_App_Notification+0x74>
      switch (blue_evt->ecode)
 800159c:	f8b0 2003 	ldrh.w	r2, [r0, #3]
 80015a0:	f240 4307 	movw	r3, #1031	; 0x407
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d113      	bne.n	80015d0 <SVCCTL_App_Notification+0x74>
          if ((gap_evt_proc_complete->Procedure_Code == GAP_GENERAL_DISCOVERY_PROC) &&
 80015a8:	7943      	ldrb	r3, [r0, #5]
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d110      	bne.n	80015d0 <SVCCTL_App_Notification+0x74>
 80015ae:	7984      	ldrb	r4, [r0, #6]
 80015b0:	b974      	cbnz	r4, 80015d0 <SVCCTL_App_Notification+0x74>
            BSP_LED_Off(LED_BLUE);
 80015b2:	4620      	mov	r0, r4
 80015b4:	f001 f9be 	bl	8002934 <BSP_LED_Off>
            APP_DBG_MSG("-- GAP GENERAL DISCOVERY PROCEDURE_COMPLETED\n");
 80015b8:	48ac      	ldr	r0, [pc, #688]	; (800186c <SVCCTL_App_Notification+0x310>)
 80015ba:	f004 fc5d 	bl	8005e78 <puts>
            if(BleApplicationContext.DeviceServerFound == 0x01)
 80015be:	4ba8      	ldr	r3, [pc, #672]	; (8001860 <SVCCTL_App_Notification+0x304>)
 80015c0:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d103      	bne.n	80015d0 <SVCCTL_App_Notification+0x74>
              UTIL_SEQ_SetTask(1 << CFG_TASK_CONN_REQ_ID, CFG_SCH_PRIO_0);
 80015c8:	4621      	mov	r1, r4
 80015ca:	2008      	movs	r0, #8
 80015cc:	f004 fad0 	bl	8005b70 <UTIL_SEQ_SetTask>
}
 80015d0:	2001      	movs	r0, #1
 80015d2:	b005      	add	sp, #20
 80015d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (meta_evt->subevent)
 80015d8:	78c3      	ldrb	r3, [r0, #3]
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d034      	beq.n	8001648 <SVCCTL_App_Notification+0xec>
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d1f6      	bne.n	80015d0 <SVCCTL_App_Notification+0x74>
          event_type = le_advertising_event->Advertising_Report[0].Event_Type;
 80015e2:	7946      	ldrb	r6, [r0, #5]
          if (event_type == ADV_IND)
 80015e4:	2e00      	cmp	r6, #0
 80015e6:	d1f3      	bne.n	80015d0 <SVCCTL_App_Notification+0x74>
          event_data_size = le_advertising_event->Advertising_Report[0].Length_Data;
 80015e8:	f890 b00d 	ldrb.w	fp, [r0, #13]
          adv_report_data = (uint8_t*)(&le_advertising_event->Advertising_Report[0].Length_Data) + 1;
 80015ec:	f100 070e 	add.w	r7, r0, #14
            while(k < event_data_size)
 80015f0:	455e      	cmp	r6, fp
 80015f2:	d2ed      	bcs.n	80015d0 <SVCCTL_App_Notification+0x74>
              adlength = adv_report_data[k];
 80015f4:	5dbd      	ldrb	r5, [r7, r6]
              APP_DBG_MSG("adlength: 0x%X\n",
 80015f6:	489e      	ldr	r0, [pc, #632]	; (8001870 <SVCCTL_App_Notification+0x314>)
              adlength = adv_report_data[k];
 80015f8:	eb07 0806 	add.w	r8, r7, r6
              APP_DBG_MSG("adlength: 0x%X\n",
 80015fc:	4629      	mov	r1, r5
 80015fe:	f004 fbb3 	bl	8005d68 <iprintf>
              adtype = adv_report_data[k + 1];
 8001602:	f898 9001 	ldrb.w	r9, [r8, #1]
              APP_DBG_MSG("adtype: 0x%X\n",
 8001606:	489b      	ldr	r0, [pc, #620]	; (8001874 <SVCCTL_App_Notification+0x318>)
 8001608:	4649      	mov	r1, r9
              switch (adtype)
 800160a:	f109 39ff 	add.w	r9, r9, #4294967295
              APP_DBG_MSG("adtype: 0x%X\n",
 800160e:	f004 fbab 	bl	8005d68 <iprintf>
              switch (adtype)
 8001612:	f1b9 0f15 	cmp.w	r9, #21
 8001616:	d85e      	bhi.n	80016d6 <SVCCTL_App_Notification+0x17a>
 8001618:	e8df f019 	tbh	[pc, r9, lsl #1]
 800161c:	007b004f 	.word	0x007b004f
 8001620:	005d005d 	.word	0x005d005d
 8001624:	00d1005d 	.word	0x00d1005d
 8001628:	005d005d 	.word	0x005d005d
 800162c:	00bd006a 	.word	0x00bd006a
 8001630:	005d005d 	.word	0x005d005d
 8001634:	005d005d 	.word	0x005d005d
 8001638:	005d005d 	.word	0x005d005d
 800163c:	005d005d 	.word	0x005d005d
 8001640:	0152005d 	.word	0x0152005d
 8001644:	0167005d 	.word	0x0167005d
          HW_TS_Stop(BleApplicationContext.Connection_mgr_timer_Id);
 8001648:	4d85      	ldr	r5, [pc, #532]	; (8001860 <SVCCTL_App_Notification+0x304>)
 800164a:	f895 0091 	ldrb.w	r0, [r5, #145]	; 0x91
 800164e:	f7ff f98d 	bl	800096c <HW_TS_Stop>
          APP_DBG_MSG("EVT_LE_CONN_COMPLETE for connection handle 0x%x\n",
 8001652:	f8b4 1005 	ldrh.w	r1, [r4, #5]
 8001656:	4888      	ldr	r0, [pc, #544]	; (8001878 <SVCCTL_App_Notification+0x31c>)
 8001658:	f004 fb86 	bl	8005d68 <iprintf>
              ((BleApplicationContext.Device_Connection_Status[index] == APP_BLE_IDLE)             ||
 800165c:	f895 1090 	ldrb.w	r1, [r5, #144]	; 0x90
          while((index < CFG_MAX_CONNECTION) &&
 8001660:	f011 0ffb 	tst.w	r1, #251	; 0xfb
 8001664:	f000 8158 	beq.w	8001918 <SVCCTL_App_Notification+0x3bc>
                  (BleApplicationContext.Device_Connection_Status[index] == APP_BLE_CONNECTED_SERVER) ||
 8001668:	2905      	cmp	r1, #5
 800166a:	f000 8155 	beq.w	8001918 <SVCCTL_App_Notification+0x3bc>
            APP_DBG_MSG("First index in state %d: %d\n",
 800166e:	2200      	movs	r2, #0
 8001670:	4882      	ldr	r0, [pc, #520]	; (800187c <SVCCTL_App_Notification+0x320>)
 8001672:	f004 fb79 	bl	8005d68 <iprintf>
            if (BleApplicationContext.Device_Connection_Status[index] == APP_BLE_LP_CONNECTING)
 8001676:	f895 3090 	ldrb.w	r3, [r5, #144]	; 0x90
 800167a:	2b03      	cmp	r3, #3
 800167c:	d117      	bne.n	80016ae <SVCCTL_App_Notification+0x152>
              BleApplicationContext.Device_Connection_Status[index] = APP_BLE_CONNECTED_CLIENT;
 800167e:	2305      	movs	r3, #5
              BleApplicationContext.Device_Connection_Status[index] = APP_BLE_CONNECTED_SERVER;
 8001680:	f885 3090 	strb.w	r3, [r5, #144]	; 0x90
                connection_complete_event->Connection_Handle;
 8001684:	79a2      	ldrb	r2, [r4, #6]
 8001686:	7963      	ldrb	r3, [r4, #5]
 8001688:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
            BleApplicationContext.BleApplicationContext_legacy.connectionHandle[index] =
 800168c:	84eb      	strh	r3, [r5, #38]	; 0x26
 800168e:	2400      	movs	r4, #0
            result = aci_gatt_disc_all_primary_services(BleApplicationContext.BleApplicationContext_legacy.connectionHandle[index]);
 8001690:	3410      	adds	r4, #16
 8001692:	eb05 0544 	add.w	r5, r5, r4, lsl #1
            APP_DBG_MSG("aci_gatt_disc_all_primary_services\n");
 8001696:	487a      	ldr	r0, [pc, #488]	; (8001880 <SVCCTL_App_Notification+0x324>)
 8001698:	f004 fbee 	bl	8005e78 <puts>
            result = aci_gatt_disc_all_primary_services(BleApplicationContext.BleApplicationContext_legacy.connectionHandle[index]);
 800169c:	88e8      	ldrh	r0, [r5, #6]
 800169e:	f003 fa99 	bl	8004bd4 <aci_gatt_disc_all_primary_services>
            if( result == BLE_STATUS_SUCCESS )
 80016a2:	4601      	mov	r1, r0
 80016a4:	b928      	cbnz	r0, 80016b2 <SVCCTL_App_Notification+0x156>
              APP_DBG_MSG("Discovery of all primary services sent Successfully \n");
 80016a6:	4877      	ldr	r0, [pc, #476]	; (8001884 <SVCCTL_App_Notification+0x328>)
        APP_DBG_MSG("No index found for the handle discconnected !\n");
 80016a8:	f004 fbe6 	bl	8005e78 <puts>
 80016ac:	e790      	b.n	80015d0 <SVCCTL_App_Notification+0x74>
              BleApplicationContext.Device_Connection_Status[index] = APP_BLE_CONNECTED_SERVER;
 80016ae:	2304      	movs	r3, #4
 80016b0:	e7e6      	b.n	8001680 <SVCCTL_App_Notification+0x124>
              APP_DBG_MSG("Discovery of all primary services sent Failed with error: 0x%x\n", result);
 80016b2:	4875      	ldr	r0, [pc, #468]	; (8001888 <SVCCTL_App_Notification+0x32c>)
 80016b4:	f004 fb58 	bl	8005d68 <iprintf>
 80016b8:	e78a      	b.n	80015d0 <SVCCTL_App_Notification+0x74>
                  APP_DBG_MSG("AD_TYPE_FLAGS: 0x");
 80016ba:	4874      	ldr	r0, [pc, #464]	; (800188c <SVCCTL_App_Notification+0x330>)
                    APP_DBG_MSG("%X",
 80016bc:	f8df a1d8 	ldr.w	sl, [pc, #472]	; 8001898 <SVCCTL_App_Notification+0x33c>
                  APP_DBG_MSG("AD_TYPE_FLAGS: 0x");
 80016c0:	f004 fb52 	bl	8005d68 <iprintf>
                  for(i = 0; i < adlength; i++)
 80016c4:	f04f 0900 	mov.w	r9, #0
 80016c8:	fa5f f389 	uxtb.w	r3, r9
 80016cc:	42ab      	cmp	r3, r5
 80016ce:	d306      	bcc.n	80016de <SVCCTL_App_Notification+0x182>
                  APP_DBG_MSG("\n");
 80016d0:	200a      	movs	r0, #10
 80016d2:	f004 fb61 	bl	8005d98 <putchar>
              k += adlength + 1;
 80016d6:	3501      	adds	r5, #1
 80016d8:	442e      	add	r6, r5
 80016da:	b2f6      	uxtb	r6, r6
 80016dc:	e788      	b.n	80015f0 <SVCCTL_App_Notification+0x94>
                                adv_report_data[k + 2 + i]);
 80016de:	eb08 0309 	add.w	r3, r8, r9
                    APP_DBG_MSG("%X",
 80016e2:	4650      	mov	r0, sl
 80016e4:	7899      	ldrb	r1, [r3, #2]
 80016e6:	f004 fb3f 	bl	8005d68 <iprintf>
 80016ea:	f109 0901 	add.w	r9, r9, #1
 80016ee:	e7eb      	b.n	80016c8 <SVCCTL_App_Notification+0x16c>
                  APP_DBG_MSG("AD_TYPE_COMPLETE_LOCAL_NAME: ");
 80016f0:	4867      	ldr	r0, [pc, #412]	; (8001890 <SVCCTL_App_Notification+0x334>)
 80016f2:	f004 fb39 	bl	8005d68 <iprintf>
                  for(i = 0; i < adlength; i++)
 80016f6:	f04f 0900 	mov.w	r9, #0
 80016fa:	fa5f f389 	uxtb.w	r3, r9
 80016fe:	429d      	cmp	r5, r3
 8001700:	d9e6      	bls.n	80016d0 <SVCCTL_App_Notification+0x174>
                                adv_report_data[k + 2 + i]);
 8001702:	eb08 0309 	add.w	r3, r8, r9
 8001706:	f109 0901 	add.w	r9, r9, #1
                    APP_DBG_MSG("%c",
 800170a:	7898      	ldrb	r0, [r3, #2]
 800170c:	f004 fb44 	bl	8005d98 <putchar>
 8001710:	e7f3      	b.n	80016fa <SVCCTL_App_Notification+0x19e>
                  APP_DBG_MSG("AD_TYPE_16_BIT_SERV_UUID: 0x");
 8001712:	4860      	ldr	r0, [pc, #384]	; (8001894 <SVCCTL_App_Notification+0x338>)
 8001714:	f004 fb28 	bl	8005d68 <iprintf>
                    APP_DBG_MSG("%X",
 8001718:	4b5f      	ldr	r3, [pc, #380]	; (8001898 <SVCCTL_App_Notification+0x33c>)
                  for(i = 0; i < adlength; i++)
 800171a:	f04f 0a00 	mov.w	sl, #0
 800171e:	f106 0902 	add.w	r9, r6, #2
 8001722:	fa5f f28a 	uxtb.w	r2, sl
 8001726:	4295      	cmp	r5, r2
 8001728:	d82a      	bhi.n	8001780 <SVCCTL_App_Notification+0x224>
                  APP_DBG_MSG("\n");
 800172a:	200a      	movs	r0, #10
 800172c:	f004 fb34 	bl	8005d98 <putchar>
                  uuid16 = (adv_report_data[k + 2 + 1] << 8) +
 8001730:	f898 2003 	ldrb.w	r2, [r8, #3]
                      adv_report_data[k + 2 + 0];
 8001734:	f817 3009 	ldrb.w	r3, [r7, r9]
                  uuid16 = (adv_report_data[k + 2 + 1] << 8) +
 8001738:	eb03 2302 	add.w	r3, r3, r2, lsl #8
                  if(uuid16 == CRS_SERVICE_UUID)
 800173c:	b29b      	uxth	r3, r3
 800173e:	f64f 6260 	movw	r2, #65120	; 0xfe60
 8001742:	4293      	cmp	r3, r2
 8001744:	d1c7      	bne.n	80016d6 <SVCCTL_App_Notification+0x17a>
                    APP_DBG_MSG("-- Cable Replacement Service DETECTED -- VIA 16 bits UUID\n");
 8001746:	4855      	ldr	r0, [pc, #340]	; (800189c <SVCCTL_App_Notification+0x340>)
 8001748:	f8df 9170 	ldr.w	r9, [pc, #368]	; 80018bc <SVCCTL_App_Notification+0x360>
 800174c:	f004 fb94 	bl	8005e78 <puts>
                    BleApplicationContext.DeviceServerFound = 0x01;
 8001750:	4b43      	ldr	r3, [pc, #268]	; (8001860 <SVCCTL_App_Notification+0x304>)
                    APP_DBG_MSG("SERVER_REMOTE_BDADDR: 0x\n");
 8001752:	4853      	ldr	r0, [pc, #332]	; (80018a0 <SVCCTL_App_Notification+0x344>)
                    BleApplicationContext.DeviceServerFound = 0x01;
 8001754:	2201      	movs	r2, #1
 8001756:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
                    APP_DBG_MSG("SERVER_REMOTE_BDADDR: 0x\n");
 800175a:	f004 fb8d 	bl	8005e78 <puts>
                      APP_DBG_MSG("%X",
 800175e:	4b4e      	ldr	r3, [pc, #312]	; (8001898 <SVCCTL_App_Notification+0x33c>)
 8001760:	f104 0807 	add.w	r8, r4, #7
 8001764:	f104 0a0c 	add.w	sl, r4, #12
                      SERVER_REMOTE_BDADDR[i] = le_advertising_event->Advertising_Report[0].Address[i];
 8001768:	f818 1b01 	ldrb.w	r1, [r8], #1
 800176c:	f809 1f01 	strb.w	r1, [r9, #1]!
                      APP_DBG_MSG("%X",
 8001770:	4618      	mov	r0, r3
 8001772:	9303      	str	r3, [sp, #12]
 8001774:	f004 faf8 	bl	8005d68 <iprintf>
                    for(i = 0; i < 5; i++)
 8001778:	45c2      	cmp	sl, r8
 800177a:	9b03      	ldr	r3, [sp, #12]
 800177c:	d1f4      	bne.n	8001768 <SVCCTL_App_Notification+0x20c>
 800177e:	e7a7      	b.n	80016d0 <SVCCTL_App_Notification+0x174>
                                adv_report_data[k + 2 + i]);
 8001780:	eb08 020a 	add.w	r2, r8, sl
                    APP_DBG_MSG("%X",
 8001784:	4618      	mov	r0, r3
 8001786:	7891      	ldrb	r1, [r2, #2]
 8001788:	9303      	str	r3, [sp, #12]
 800178a:	f10a 0a01 	add.w	sl, sl, #1
 800178e:	f004 faeb 	bl	8005d68 <iprintf>
 8001792:	9b03      	ldr	r3, [sp, #12]
 8001794:	e7c5      	b.n	8001722 <SVCCTL_App_Notification+0x1c6>
                  APP_DBG_MSG("AD_TYPE_TX_POWER_LEVEL: 0x");
 8001796:	4843      	ldr	r0, [pc, #268]	; (80018a4 <SVCCTL_App_Notification+0x348>)
                    APP_DBG_MSG("%X",
 8001798:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 8001898 <SVCCTL_App_Notification+0x33c>
                  APP_DBG_MSG("AD_TYPE_TX_POWER_LEVEL: 0x");
 800179c:	f004 fae4 	bl	8005d68 <iprintf>
                  for(i = 0; i < adlength; i++)
 80017a0:	f04f 0900 	mov.w	r9, #0
 80017a4:	fa5f f389 	uxtb.w	r3, r9
 80017a8:	42ab      	cmp	r3, r5
 80017aa:	d291      	bcs.n	80016d0 <SVCCTL_App_Notification+0x174>
                                adv_report_data[k + 2 + i]);
 80017ac:	eb08 0309 	add.w	r3, r8, r9
                    APP_DBG_MSG("%X",
 80017b0:	4650      	mov	r0, sl
 80017b2:	7899      	ldrb	r1, [r3, #2]
 80017b4:	f004 fad8 	bl	8005d68 <iprintf>
 80017b8:	f109 0901 	add.w	r9, r9, #1
 80017bc:	e7f2      	b.n	80017a4 <SVCCTL_App_Notification+0x248>
                  APP_DBG_MSG("AD_TYPE_128_BIT_SERV_UUID: 0x");
 80017be:	483a      	ldr	r0, [pc, #232]	; (80018a8 <SVCCTL_App_Notification+0x34c>)
 80017c0:	f004 fad2 	bl	8005d68 <iprintf>
                  for(i = 0; i < adlength-1; i++)
 80017c4:	f04f 0a00 	mov.w	sl, #0
 80017c8:	1e6b      	subs	r3, r5, #1
 80017ca:	fa5f f88a 	uxtb.w	r8, sl
 80017ce:	4598      	cmp	r8, r3
 80017d0:	db02      	blt.n	80017d8 <SVCCTL_App_Notification+0x27c>
                  uint8_t i, result = TRUE;
 80017d2:	f04f 0801 	mov.w	r8, #1
 80017d6:	e020      	b.n	800181a <SVCCTL_App_Notification+0x2be>
                                adv_report_data[k + 2 + i]);
 80017d8:	f106 0902 	add.w	r9, r6, #2
 80017dc:	44c1      	add	r9, r8
                    APP_DBG_MSG("%X",
 80017de:	482e      	ldr	r0, [pc, #184]	; (8001898 <SVCCTL_App_Notification+0x33c>)
 80017e0:	f817 1009 	ldrb.w	r1, [r7, r9]
 80017e4:	9303      	str	r3, [sp, #12]
 80017e6:	f004 fabf 	bl	8005d68 <iprintf>
                    if(CRS_STM_UUID[i] != adv_report_data[k + 2 + i])
 80017ea:	4b30      	ldr	r3, [pc, #192]	; (80018ac <SVCCTL_App_Notification+0x350>)
 80017ec:	f817 1009 	ldrb.w	r1, [r7, r9]
 80017f0:	eb03 0208 	add.w	r2, r3, r8
 80017f4:	f10a 0a01 	add.w	sl, sl, #1
 80017f8:	f892 2057 	ldrb.w	r2, [r2, #87]	; 0x57
 80017fc:	9b03      	ldr	r3, [sp, #12]
 80017fe:	428a      	cmp	r2, r1
 8001800:	d0e3      	beq.n	80017ca <SVCCTL_App_Notification+0x26e>
                      APP_DBG_MSG("CRS_STM_UUID[%d] 0x%x != adv_report_data[%d + 2 + %d] 0x%x\n",
 8001802:	e9cd 8100 	strd	r8, r1, [sp]
 8001806:	4633      	mov	r3, r6
 8001808:	4641      	mov	r1, r8
 800180a:	4829      	ldr	r0, [pc, #164]	; (80018b0 <SVCCTL_App_Notification+0x354>)
 800180c:	f004 faac 	bl	8005d68 <iprintf>
                      APP_DBG_MSG("AD_TYPE_128_BIT_SERV_UUID not a Cable Replacement Service\n");
 8001810:	4828      	ldr	r0, [pc, #160]	; (80018b4 <SVCCTL_App_Notification+0x358>)
 8001812:	f004 fb31 	bl	8005e78 <puts>
                      result = FALSE;
 8001816:	f04f 0800 	mov.w	r8, #0
                  APP_DBG_MSG("\n");
 800181a:	200a      	movs	r0, #10
 800181c:	f004 fabc 	bl	8005d98 <putchar>
                  if(result == TRUE)
 8001820:	f1b8 0f00 	cmp.w	r8, #0
 8001824:	f43f af57 	beq.w	80016d6 <SVCCTL_App_Notification+0x17a>
                    APP_DBG_MSG("-- Cable Replacement Service DETECTED -- VIA 128 bits UUID\n");
 8001828:	4823      	ldr	r0, [pc, #140]	; (80018b8 <SVCCTL_App_Notification+0x35c>)
 800182a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80018bc <SVCCTL_App_Notification+0x360>
 800182e:	f004 fb23 	bl	8005e78 <puts>
                    BleApplicationContext.DeviceServerFound = 0x01;
 8001832:	4b0b      	ldr	r3, [pc, #44]	; (8001860 <SVCCTL_App_Notification+0x304>)
                    APP_DBG_MSG("SERVER_REMOTE_BDADDR: 0x");
 8001834:	481a      	ldr	r0, [pc, #104]	; (80018a0 <SVCCTL_App_Notification+0x344>)
                    BleApplicationContext.DeviceServerFound = 0x01;
 8001836:	f883 8092 	strb.w	r8, [r3, #146]	; 0x92
                    APP_DBG_MSG("SERVER_REMOTE_BDADDR: 0x");
 800183a:	f004 fa95 	bl	8005d68 <iprintf>
                      APP_DBG_MSG("%X",
 800183e:	4b16      	ldr	r3, [pc, #88]	; (8001898 <SVCCTL_App_Notification+0x33c>)
 8001840:	f104 0807 	add.w	r8, r4, #7
 8001844:	f104 0a0d 	add.w	sl, r4, #13
                      SERVER_REMOTE_BDADDR[i] = le_advertising_event->Advertising_Report[0].Address[i];
 8001848:	f818 1b01 	ldrb.w	r1, [r8], #1
 800184c:	f809 1f01 	strb.w	r1, [r9, #1]!
                      APP_DBG_MSG("%X",
 8001850:	4618      	mov	r0, r3
 8001852:	9303      	str	r3, [sp, #12]
 8001854:	f004 fa88 	bl	8005d68 <iprintf>
                    for(i = 0; i < 6; i++)
 8001858:	45c2      	cmp	sl, r8
 800185a:	9b03      	ldr	r3, [sp, #12]
 800185c:	d1f4      	bne.n	8001848 <SVCCTL_App_Notification+0x2ec>
 800185e:	e737      	b.n	80016d0 <SVCCTL_App_Notification+0x174>
 8001860:	20000134 	.word	0x20000134
 8001864:	08007419 	.word	0x08007419
 8001868:	0800772f 	.word	0x0800772f
 800186c:	080073ec 	.word	0x080073ec
 8001870:	08007513 	.word	0x08007513
 8001874:	08007523 	.word	0x08007523
 8001878:	0800744a 	.word	0x0800744a
 800187c:	080077c6 	.word	0x080077c6
 8001880:	0800747b 	.word	0x0800747b
 8001884:	0800749e 	.word	0x0800749e
 8001888:	080074d3 	.word	0x080074d3
 800188c:	08007531 	.word	0x08007531
 8001890:	08007546 	.word	0x08007546
 8001894:	08007564 	.word	0x08007564
 8001898:	08007543 	.word	0x08007543
 800189c:	08007581 	.word	0x08007581
 80018a0:	080075bb 	.word	0x080075bb
 80018a4:	080075d4 	.word	0x080075d4
 80018a8:	080075ef 	.word	0x080075ef
 80018ac:	08007018 	.word	0x08007018
 80018b0:	0800760d 	.word	0x0800760d
 80018b4:	08007649 	.word	0x08007649
 80018b8:	08007683 	.word	0x08007683
 80018bc:	200021c7 	.word	0x200021c7
                  APP_DBG_MSG("AD_TYPE_SERV_SOLICIT_16_BIT_UUID_LIST: 0x");
 80018c0:	4818      	ldr	r0, [pc, #96]	; (8001924 <SVCCTL_App_Notification+0x3c8>)
                    APP_DBG_MSG("%X",
 80018c2:	f8df a070 	ldr.w	sl, [pc, #112]	; 8001934 <SVCCTL_App_Notification+0x3d8>
                  APP_DBG_MSG("AD_TYPE_SERV_SOLICIT_16_BIT_UUID_LIST: 0x");
 80018c6:	f004 fa4f 	bl	8005d68 <iprintf>
                  for(i = 0; i < adlength; i++)
 80018ca:	f04f 0900 	mov.w	r9, #0
 80018ce:	fa5f f389 	uxtb.w	r3, r9
 80018d2:	429d      	cmp	r5, r3
 80018d4:	f67f aefc 	bls.w	80016d0 <SVCCTL_App_Notification+0x174>
                                adv_report_data[k + 2 + i]);
 80018d8:	eb08 0309 	add.w	r3, r8, r9
                    APP_DBG_MSG("%X",
 80018dc:	4650      	mov	r0, sl
 80018de:	7899      	ldrb	r1, [r3, #2]
 80018e0:	f004 fa42 	bl	8005d68 <iprintf>
 80018e4:	f109 0901 	add.w	r9, r9, #1
 80018e8:	e7f1      	b.n	80018ce <SVCCTL_App_Notification+0x372>
                  APP_DBG_MSG("AD_TYPE_SERVICE_DATA: 0x");
 80018ea:	480f      	ldr	r0, [pc, #60]	; (8001928 <SVCCTL_App_Notification+0x3cc>)
                    APP_DBG_MSG("%X",
 80018ec:	f8df a044 	ldr.w	sl, [pc, #68]	; 8001934 <SVCCTL_App_Notification+0x3d8>
                  APP_DBG_MSG("AD_TYPE_SERVICE_DATA: 0x");
 80018f0:	f004 fa3a 	bl	8005d68 <iprintf>
                  for(i = 0; i < adlength; i++)
 80018f4:	f04f 0900 	mov.w	r9, #0
 80018f8:	fa5f f389 	uxtb.w	r3, r9
 80018fc:	429d      	cmp	r5, r3
 80018fe:	f67f aee7 	bls.w	80016d0 <SVCCTL_App_Notification+0x174>
                                adv_report_data[k + 2 + i]);
 8001902:	eb08 0309 	add.w	r3, r8, r9
                    APP_DBG_MSG("%X",
 8001906:	4650      	mov	r0, sl
 8001908:	7899      	ldrb	r1, [r3, #2]
 800190a:	f004 fa2d 	bl	8005d68 <iprintf>
 800190e:	f109 0901 	add.w	r9, r9, #1
 8001912:	e7f1      	b.n	80018f8 <SVCCTL_App_Notification+0x39c>
        APP_DBG_MSG("No index found for the handle discconnected !\n");
 8001914:	4805      	ldr	r0, [pc, #20]	; (800192c <SVCCTL_App_Notification+0x3d0>)
 8001916:	e6c7      	b.n	80016a8 <SVCCTL_App_Notification+0x14c>
            APP_DBG_MSG("No stored connection in state different than APP_BLE_IDLE, APP_BLE_CONNECTED_CLIENT and APP_BLE_CONNECTED_SERVER!\n");
 8001918:	4805      	ldr	r0, [pc, #20]	; (8001930 <SVCCTL_App_Notification+0x3d4>)
 800191a:	f004 faad 	bl	8005e78 <puts>
 800191e:	2401      	movs	r4, #1
 8001920:	e6b6      	b.n	8001690 <SVCCTL_App_Notification+0x134>
 8001922:	bf00      	nop
 8001924:	080076be 	.word	0x080076be
 8001928:	080076e8 	.word	0x080076e8
 800192c:	08007701 	.word	0x08007701
 8001930:	08007754 	.word	0x08007754
 8001934:	08007543 	.word	0x08007543

08001938 <APP_BLE_Get_Client_Connection_Status>:
{
 8001938:	b510      	push	{r4, lr}
      (BleApplicationContext.BleApplicationContext_legacy.connectionHandle[index] != Connection_Handle))
 800193a:	4c09      	ldr	r4, [pc, #36]	; (8001960 <APP_BLE_Get_Client_Connection_Status+0x28>)
  while((index < CFG_MAX_CONNECTION) &&
 800193c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800193e:	4283      	cmp	r3, r0
{
 8001940:	4601      	mov	r1, r0
  while((index < CFG_MAX_CONNECTION) &&
 8001942:	d004      	beq.n	800194e <APP_BLE_Get_Client_Connection_Status+0x16>
    APP_DBG_MSG("No 0x%x connection handle found in table !\n", Connection_Handle);
 8001944:	4807      	ldr	r0, [pc, #28]	; (8001964 <APP_BLE_Get_Client_Connection_Status+0x2c>)
 8001946:	f004 fa0f 	bl	8005d68 <iprintf>
    return APP_BLE_IDLE;
 800194a:	2000      	movs	r0, #0
}
 800194c:	bd10      	pop	{r4, pc}
    APP_DBG_MSG("Found 0x%x connection handle in table at index: %d!\n", Connection_Handle, index);
 800194e:	2200      	movs	r2, #0
 8001950:	4619      	mov	r1, r3
 8001952:	4805      	ldr	r0, [pc, #20]	; (8001968 <APP_BLE_Get_Client_Connection_Status+0x30>)
 8001954:	f004 fa08 	bl	8005d68 <iprintf>
    return BleApplicationContext.Device_Connection_Status[index];
 8001958:	f894 0090 	ldrb.w	r0, [r4, #144]	; 0x90
 800195c:	e7f6      	b.n	800194c <APP_BLE_Get_Client_Connection_Status+0x14>
 800195e:	bf00      	nop
 8001960:	20000134 	.word	0x20000134
 8001964:	080077e3 	.word	0x080077e3
 8001968:	0800780f 	.word	0x0800780f

0800196c <hci_notify_asynch_evt>:
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800196c:	2100      	movs	r1, #0
 800196e:	2020      	movs	r0, #32
 8001970:	f004 b8fe 	b.w	8005b70 <UTIL_SEQ_SetTask>

08001974 <hci_cmd_resp_release>:
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8001974:	2001      	movs	r0, #1
 8001976:	f004 b929 	b.w	8005bcc <UTIL_SEQ_SetEvt>

0800197a <hci_cmd_resp_wait>:
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800197a:	2001      	movs	r0, #1
 800197c:	f004 b9a0 	b.w	8005cc0 <UTIL_SEQ_WaitEvt>

08001980 <CRCAPP_Update_Service>:
 * @brief  Service update
 * @param  None
 * @retval None
 */
void CRCAPP_Update_Service()
{
 8001980:	b573      	push	{r0, r1, r4, r5, r6, lr}
  tBleStatus result;
  uint8_t index;
  
  index = 0;
  while((index < CFG_MAX_CONNECTION) &&
        (CRC_Context[index].state != CRC_IDLE))
 8001982:	4c81      	ldr	r4, [pc, #516]	; (8001b88 <CRCAPP_Update_Service+0x208>)
 8001984:	7823      	ldrb	r3, [r4, #0]
  while((index < CFG_MAX_CONNECTION) &&
 8001986:	2b02      	cmp	r3, #2
 8001988:	d01c      	beq.n	80019c4 <CRCAPP_Update_Service+0x44>
  {
    switch(CRC_Context[index].state)
 800198a:	3b04      	subs	r3, #4
 800198c:	2b08      	cmp	r3, #8
 800198e:	d819      	bhi.n	80019c4 <CRCAPP_Update_Service+0x44>
 8001990:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001994:	0035001a 	.word	0x0035001a
 8001998:	004d0064 	.word	0x004d0064
 800199c:	0092007b 	.word	0x0092007b
 80019a0:	00d900ba 	.word	0x00d900ba
 80019a4:	0009      	.short	0x0009
    {
      case CRC_CONNECTED:
        {
          APP_DBG_MSG("CRC_CONNECTED\n");
 80019a6:	4879      	ldr	r0, [pc, #484]	; (8001b8c <CRCAPP_Update_Service+0x20c>)
 80019a8:	f004 fa66 	bl	8005e78 <puts>
          if(APP_BLE_Get_Client_Connection_Status(CRC_Context[index].connHandle) == APP_BLE_IDLE)
 80019ac:	8860      	ldrh	r0, [r4, #2]
 80019ae:	f7ff ffc3 	bl	8001938 <APP_BLE_Get_Client_Connection_Status>
 80019b2:	b938      	cbnz	r0, 80019c4 <CRCAPP_Update_Service+0x44>
          {
            APP_DBG_MSG("Handle deconnected !\n");
 80019b4:	4876      	ldr	r0, [pc, #472]	; (8001b90 <CRCAPP_Update_Service+0x210>)
 80019b6:	f004 fa5f 	bl	8005e78 <puts>
            CRC_Context[index].state = CRC_IDLE;
 80019ba:	2302      	movs	r3, #2
 80019bc:	7023      	strb	r3, [r4, #0]
            CRC_Context[index].connHandle = 0xFFFF;
 80019be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019c2:	8063      	strh	r3, [r4, #2]
      default:
        break;
    }
    index++;
  }
}
 80019c4:	b002      	add	sp, #8
 80019c6:	bd70      	pop	{r4, r5, r6, pc}
          APP_DBG_MSG("CRC_DISCOVER_CHARACS\n");
 80019c8:	4872      	ldr	r0, [pc, #456]	; (8001b94 <CRCAPP_Update_Service+0x214>)
 80019ca:	f004 fa55 	bl	8005e78 <puts>
          result = aci_gatt_disc_all_char_of_service(CRC_Context[index].connHandle,
 80019ce:	88e2      	ldrh	r2, [r4, #6]
 80019d0:	88a1      	ldrh	r1, [r4, #4]
 80019d2:	8860      	ldrh	r0, [r4, #2]
 80019d4:	f003 f924 	bl	8004c20 <aci_gatt_disc_all_char_of_service>
          if( result == BLE_STATUS_SUCCESS )
 80019d8:	4605      	mov	r5, r0
 80019da:	b918      	cbnz	r0, 80019e4 <CRCAPP_Update_Service+0x64>
            APP_DBG_MSG("All characteristics discovery sent successfully \n");
 80019dc:	486e      	ldr	r0, [pc, #440]	; (8001b98 <CRCAPP_Update_Service+0x218>)
              APP_DBG_MSG("BLE_STATUS_NOT_ALLOWED do another CRC_DISABLE_RX_NOTIFICATION\n");
 80019de:	f004 fa4b 	bl	8005e78 <puts>
}
 80019e2:	e7ef      	b.n	80019c4 <CRCAPP_Update_Service+0x44>
            APP_DBG_MSG("All characteristics discovery sending failed with result: 0x%x\n", result);
 80019e4:	4601      	mov	r1, r0
 80019e6:	486d      	ldr	r0, [pc, #436]	; (8001b9c <CRCAPP_Update_Service+0x21c>)
 80019e8:	f004 f9be 	bl	8005d68 <iprintf>
            if(result == BLE_STATUS_NOT_ALLOWED)
 80019ec:	2d46      	cmp	r5, #70	; 0x46
 80019ee:	d1e9      	bne.n	80019c4 <CRCAPP_Update_Service+0x44>
              CRC_Context[index].state = CRC_IDLE; /* redo a CRC_DISCOVER_CHARACS */
 80019f0:	2302      	movs	r3, #2
 80019f2:	7023      	strb	r3, [r4, #0]
              waitForComplete = 1;
 80019f4:	4b6a      	ldr	r3, [pc, #424]	; (8001ba0 <CRCAPP_Update_Service+0x220>)
              APP_DBG_MSG("BLE_STATUS_NOT_ALLOWED do another CRC_DISCOVER_CHARACS\n");
 80019f6:	486b      	ldr	r0, [pc, #428]	; (8001ba4 <CRCAPP_Update_Service+0x224>)
              waitForComplete = 1;
 80019f8:	2201      	movs	r2, #1
 80019fa:	701a      	strb	r2, [r3, #0]
 80019fc:	e7ef      	b.n	80019de <CRCAPP_Update_Service+0x5e>
          APP_DBG_MSG("CRC_DISCOVER_DESC\n");
 80019fe:	486a      	ldr	r0, [pc, #424]	; (8001ba8 <CRCAPP_Update_Service+0x228>)
 8001a00:	f004 fa3a 	bl	8005e78 <puts>
          result = aci_gatt_disc_all_char_desc(CRC_Context[index].connHandle,
 8001a04:	88e2      	ldrh	r2, [r4, #6]
 8001a06:	88a1      	ldrh	r1, [r4, #4]
 8001a08:	8860      	ldrh	r0, [r4, #2]
 8001a0a:	f003 f933 	bl	8004c74 <aci_gatt_disc_all_char_desc>
          if( result == BLE_STATUS_SUCCESS )
 8001a0e:	4605      	mov	r5, r0
 8001a10:	b908      	cbnz	r0, 8001a16 <CRCAPP_Update_Service+0x96>
            APP_DBG_MSG("Descriptors discovery sent successfully \n");
 8001a12:	4866      	ldr	r0, [pc, #408]	; (8001bac <CRCAPP_Update_Service+0x22c>)
 8001a14:	e7e3      	b.n	80019de <CRCAPP_Update_Service+0x5e>
            APP_DBG_MSG("Descriptors discovery sending failed \n");
 8001a16:	4866      	ldr	r0, [pc, #408]	; (8001bb0 <CRCAPP_Update_Service+0x230>)
 8001a18:	f004 fa2e 	bl	8005e78 <puts>
            if(result == BLE_STATUS_NOT_ALLOWED)
 8001a1c:	2d46      	cmp	r5, #70	; 0x46
 8001a1e:	d1d1      	bne.n	80019c4 <CRCAPP_Update_Service+0x44>
              CRC_Context[index].state = CRC_DISCOVER_CHARACS; /* redo a CRC_DISCOVER_DESC */
 8001a20:	2304      	movs	r3, #4
 8001a22:	7023      	strb	r3, [r4, #0]
              waitForComplete = 1;
 8001a24:	4b5e      	ldr	r3, [pc, #376]	; (8001ba0 <CRCAPP_Update_Service+0x220>)
              APP_DBG_MSG("BLE_STATUS_NOT_ALLOWED do another CRC_DISCOVER_DESC\n");
 8001a26:	4863      	ldr	r0, [pc, #396]	; (8001bb4 <CRCAPP_Update_Service+0x234>)
              waitForComplete = 1;
 8001a28:	2201      	movs	r2, #1
 8001a2a:	701a      	strb	r2, [r3, #0]
 8001a2c:	e7d7      	b.n	80019de <CRCAPP_Update_Service+0x5e>
          APP_DBG_MSG("CRC_READ_TEMPERATURE_TYPE\n");
 8001a2e:	4862      	ldr	r0, [pc, #392]	; (8001bb8 <CRCAPP_Update_Service+0x238>)
 8001a30:	f004 fa22 	bl	8005e78 <puts>
          result = aci_gatt_read_char_value(CRC_Context[index].connHandle,
 8001a34:	8961      	ldrh	r1, [r4, #10]
 8001a36:	8860      	ldrh	r0, [r4, #2]
 8001a38:	f003 f946 	bl	8004cc8 <aci_gatt_read_char_value>
          if( result == BLE_STATUS_SUCCESS )
 8001a3c:	4605      	mov	r5, r0
 8001a3e:	b908      	cbnz	r0, 8001a44 <CRCAPP_Update_Service+0xc4>
            APP_DBG_MSG("Read CRC Temperature Type sent successfully \n");
 8001a40:	485e      	ldr	r0, [pc, #376]	; (8001bbc <CRCAPP_Update_Service+0x23c>)
 8001a42:	e7cc      	b.n	80019de <CRCAPP_Update_Service+0x5e>
            APP_DBG_MSG("Read CRC RX sending failed \n");
 8001a44:	485e      	ldr	r0, [pc, #376]	; (8001bc0 <CRCAPP_Update_Service+0x240>)
 8001a46:	f004 fa17 	bl	8005e78 <puts>
            if(result == BLE_STATUS_NOT_ALLOWED)
 8001a4a:	2d46      	cmp	r5, #70	; 0x46
 8001a4c:	d1ba      	bne.n	80019c4 <CRCAPP_Update_Service+0x44>
              CRC_Context[index].state = CRC_READ_RX; /* redo a CRC_READ_RX */
 8001a4e:	2307      	movs	r3, #7
 8001a50:	7023      	strb	r3, [r4, #0]
              waitForComplete = 1;
 8001a52:	4b53      	ldr	r3, [pc, #332]	; (8001ba0 <CRCAPP_Update_Service+0x220>)
              APP_DBG_MSG("BLE_STATUS_NOT_ALLOWED do another CRC_READ_RX\n");
 8001a54:	485b      	ldr	r0, [pc, #364]	; (8001bc4 <CRCAPP_Update_Service+0x244>)
              waitForComplete = 1;
 8001a56:	2201      	movs	r2, #1
 8001a58:	701a      	strb	r2, [r3, #0]
 8001a5a:	e7c0      	b.n	80019de <CRCAPP_Update_Service+0x5e>
          APP_DBG_MSG("CRC_READ_TX\n");
 8001a5c:	485a      	ldr	r0, [pc, #360]	; (8001bc8 <CRCAPP_Update_Service+0x248>)
 8001a5e:	f004 fa0b 	bl	8005e78 <puts>
          result = aci_gatt_read_char_value(CRC_Context[index].connHandle,
 8001a62:	8921      	ldrh	r1, [r4, #8]
 8001a64:	8860      	ldrh	r0, [r4, #2]
 8001a66:	f003 f92f 	bl	8004cc8 <aci_gatt_read_char_value>
          if( result == BLE_STATUS_SUCCESS )
 8001a6a:	4605      	mov	r5, r0
 8001a6c:	b908      	cbnz	r0, 8001a72 <CRCAPP_Update_Service+0xf2>
            APP_DBG_MSG("Read CRC TX sent Successfully \n");
 8001a6e:	4857      	ldr	r0, [pc, #348]	; (8001bcc <CRCAPP_Update_Service+0x24c>)
 8001a70:	e7b5      	b.n	80019de <CRCAPP_Update_Service+0x5e>
            APP_DBG_MSG("Read TX sent Failed \n");
 8001a72:	4857      	ldr	r0, [pc, #348]	; (8001bd0 <CRCAPP_Update_Service+0x250>)
 8001a74:	f004 fa00 	bl	8005e78 <puts>
            if(result == BLE_STATUS_NOT_ALLOWED)
 8001a78:	2d46      	cmp	r5, #70	; 0x46
 8001a7a:	d1a3      	bne.n	80019c4 <CRCAPP_Update_Service+0x44>
              CRC_Context[index].state = CRC_READ_TX; /* redo a CRC_READ_TX */
 8001a7c:	2306      	movs	r3, #6
 8001a7e:	7023      	strb	r3, [r4, #0]
              waitForComplete = 1;
 8001a80:	4b47      	ldr	r3, [pc, #284]	; (8001ba0 <CRCAPP_Update_Service+0x220>)
              APP_DBG_MSG("BLE_STATUS_NOT_ALLOWED do another CRC_READ_TX\n");
 8001a82:	4854      	ldr	r0, [pc, #336]	; (8001bd4 <CRCAPP_Update_Service+0x254>)
              waitForComplete = 1;
 8001a84:	2201      	movs	r2, #1
 8001a86:	701a      	strb	r2, [r3, #0]
 8001a88:	e7a9      	b.n	80019de <CRCAPP_Update_Service+0x5e>
          APP_DBG_MSG("CRC_READ_TEMPERATURE_MEASUREMENT_CCC\n");
 8001a8a:	4853      	ldr	r0, [pc, #332]	; (8001bd8 <CRCAPP_Update_Service+0x258>)
 8001a8c:	f004 f9f4 	bl	8005e78 <puts>
          result = aci_gatt_read_char_desc(CRC_Context[index].connHandle,
 8001a90:	89a1      	ldrh	r1, [r4, #12]
 8001a92:	8860      	ldrh	r0, [r4, #2]
 8001a94:	f003 f970 	bl	8004d78 <aci_gatt_read_char_desc>
          if( result == BLE_STATUS_SUCCESS )
 8001a98:	4605      	mov	r5, r0
 8001a9a:	b908      	cbnz	r0, 8001aa0 <CRCAPP_Update_Service+0x120>
            APP_DBG_MSG("Read CRC RX CCCC sent successfully \n");
 8001a9c:	484f      	ldr	r0, [pc, #316]	; (8001bdc <CRCAPP_Update_Service+0x25c>)
 8001a9e:	e79e      	b.n	80019de <CRCAPP_Update_Service+0x5e>
            APP_DBG_MSG("Read RX sending failed \n");
 8001aa0:	484f      	ldr	r0, [pc, #316]	; (8001be0 <CRCAPP_Update_Service+0x260>)
 8001aa2:	f004 f9e9 	bl	8005e78 <puts>
            if(result == BLE_STATUS_NOT_ALLOWED)
 8001aa6:	2d46      	cmp	r5, #70	; 0x46
 8001aa8:	d18c      	bne.n	80019c4 <CRCAPP_Update_Service+0x44>
              CRC_Context[index].state = CRC_READ_RX_CCC; /* redo a CRC_READ_RX_CCC */
 8001aaa:	2308      	movs	r3, #8
 8001aac:	7023      	strb	r3, [r4, #0]
              waitForComplete = 1;
 8001aae:	4b3c      	ldr	r3, [pc, #240]	; (8001ba0 <CRCAPP_Update_Service+0x220>)
              APP_DBG_MSG("BLE_STATUS_NOT_ALLOWED do another CRC_READ_RX_CCC\n");
 8001ab0:	484c      	ldr	r0, [pc, #304]	; (8001be4 <CRCAPP_Update_Service+0x264>)
              waitForComplete = 1;
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	701a      	strb	r2, [r3, #0]
 8001ab6:	e792      	b.n	80019de <CRCAPP_Update_Service+0x5e>
                                               strlen(szString),
 8001ab8:	4d39      	ldr	r5, [pc, #228]	; (8001ba0 <CRCAPP_Update_Service+0x220>)
          APP_DBG_MSG("CRC_WRITE_TX\n");
 8001aba:	484b      	ldr	r0, [pc, #300]	; (8001be8 <CRCAPP_Update_Service+0x268>)
 8001abc:	f004 f9dc 	bl	8005e78 <puts>
                                               strlen(szString),
 8001ac0:	1c68      	adds	r0, r5, #1
 8001ac2:	f7fe fb5d 	bl	8000180 <strlen>
          result = aci_gatt_write_without_resp(CRC_Context[index].connHandle,
 8001ac6:	1c6b      	adds	r3, r5, #1
 8001ac8:	b2c2      	uxtb	r2, r0
 8001aca:	8921      	ldrh	r1, [r4, #8]
 8001acc:	8860      	ldrh	r0, [r4, #2]
 8001ace:	f003 f97b 	bl	8004dc8 <aci_gatt_write_without_resp>
          if( result == BLE_STATUS_SUCCESS )
 8001ad2:	4606      	mov	r6, r0
 8001ad4:	b960      	cbnz	r0, 8001af0 <CRCAPP_Update_Service+0x170>
            APP_DBG_MSG("Write CRC TX sent Successfully \n");
 8001ad6:	4845      	ldr	r0, [pc, #276]	; (8001bec <CRCAPP_Update_Service+0x26c>)
 8001ad8:	f004 f9ce 	bl	8005e78 <puts>
            CRC_Context[index].state = CRC_CONNECTED;
 8001adc:	230c      	movs	r3, #12
            APP_DBG_MSG("CRC_WRITE_TX -> CRC_CONNECTED\n");
 8001ade:	4844      	ldr	r0, [pc, #272]	; (8001bf0 <CRCAPP_Update_Service+0x270>)
            CRC_Context[index].state = CRC_CONNECTED;
 8001ae0:	7023      	strb	r3, [r4, #0]
            APP_DBG_MSG("CRC_WRITE_TX -> CRC_CONNECTED\n");
 8001ae2:	f004 f9c9 	bl	8005e78 <puts>
            UTIL_SEQ_SetTask( 1<<CFG_TASK_CRC_DISCOVERY_REQ_ID, CFG_SCH_PRIO_0);
 8001ae6:	4631      	mov	r1, r6
 8001ae8:	2002      	movs	r0, #2
 8001aea:	f004 f841 	bl	8005b70 <UTIL_SEQ_SetTask>
 8001aee:	e769      	b.n	80019c4 <CRCAPP_Update_Service+0x44>
            APP_DBG_MSG("Write TX sent Failed \n");
 8001af0:	4840      	ldr	r0, [pc, #256]	; (8001bf4 <CRCAPP_Update_Service+0x274>)
 8001af2:	f004 f9c1 	bl	8005e78 <puts>
            if(result == BLE_STATUS_NOT_ALLOWED)
 8001af6:	2e46      	cmp	r6, #70	; 0x46
 8001af8:	f47f af64 	bne.w	80019c4 <CRCAPP_Update_Service+0x44>
              CRC_Context[index].state = CRC_WRITE_TX; /* redo a CRC_WRITE_TX */
 8001afc:	2309      	movs	r3, #9
 8001afe:	7023      	strb	r3, [r4, #0]
              waitForComplete = 1;
 8001b00:	2301      	movs	r3, #1
 8001b02:	702b      	strb	r3, [r5, #0]
              APP_DBG_MSG("BLE_STATUS_NOT_ALLOWED do another CRC_WRITE_TX\n");
 8001b04:	483c      	ldr	r0, [pc, #240]	; (8001bf8 <CRCAPP_Update_Service+0x278>)
 8001b06:	e76a      	b.n	80019de <CRCAPP_Update_Service+0x5e>
          uint8_t notification[2] = {0x01, 0x00};
 8001b08:	ae02      	add	r6, sp, #8
 8001b0a:	2501      	movs	r5, #1
 8001b0c:	f826 5d04 	strh.w	r5, [r6, #-4]!
          APP_DBG_MSG("CRC_ENABLE_RX_NOTIFICATION\n");
 8001b10:	483a      	ldr	r0, [pc, #232]	; (8001bfc <CRCAPP_Update_Service+0x27c>)
 8001b12:	f004 f9b1 	bl	8005e78 <puts>
          result = aci_gatt_write_char_desc(CRC_Context[index].connHandle,
 8001b16:	4633      	mov	r3, r6
 8001b18:	2202      	movs	r2, #2
 8001b1a:	89a1      	ldrh	r1, [r4, #12]
 8001b1c:	8860      	ldrh	r0, [r4, #2]
 8001b1e:	f003 f8fb 	bl	8004d18 <aci_gatt_write_char_desc>
          if( result == BLE_STATUS_SUCCESS )
 8001b22:	4606      	mov	r6, r0
 8001b24:	b918      	cbnz	r0, 8001b2e <CRCAPP_Update_Service+0x1ae>
            waitForComplete = 1;
 8001b26:	4b1e      	ldr	r3, [pc, #120]	; (8001ba0 <CRCAPP_Update_Service+0x220>)
            APP_DBG_MSG("Enable CRC RX Notification Sent Successfully \n");
 8001b28:	4835      	ldr	r0, [pc, #212]	; (8001c00 <CRCAPP_Update_Service+0x280>)
            waitForComplete = 1;
 8001b2a:	701d      	strb	r5, [r3, #0]
 8001b2c:	e757      	b.n	80019de <CRCAPP_Update_Service+0x5e>
            APP_DBG_MSG("Enable CRC RX Notification Sent Failed \n");
 8001b2e:	4835      	ldr	r0, [pc, #212]	; (8001c04 <CRCAPP_Update_Service+0x284>)
 8001b30:	f004 f9a2 	bl	8005e78 <puts>
            if(result == BLE_STATUS_NOT_ALLOWED)
 8001b34:	2e46      	cmp	r6, #70	; 0x46
 8001b36:	f47f af45 	bne.w	80019c4 <CRCAPP_Update_Service+0x44>
              CRC_Context[index].state = CRC_ENABLE_RX_NOTIFICATION; /* redo a CRC_ENABLE_RX_NOTIFICATION */
 8001b3a:	230a      	movs	r3, #10
 8001b3c:	7023      	strb	r3, [r4, #0]
              waitForComplete = 1;
 8001b3e:	4b18      	ldr	r3, [pc, #96]	; (8001ba0 <CRCAPP_Update_Service+0x220>)
              APP_DBG_MSG("BLE_STATUS_NOT_ALLOWED do another CRC_ENABLE_RX_NOTIFICATION\n");
 8001b40:	4831      	ldr	r0, [pc, #196]	; (8001c08 <CRCAPP_Update_Service+0x288>)
              waitForComplete = 1;
 8001b42:	701d      	strb	r5, [r3, #0]
 8001b44:	e74b      	b.n	80019de <CRCAPP_Update_Service+0x5e>
          uint8_t notification[2] = {0x00, 0x00};
 8001b46:	ad02      	add	r5, sp, #8
 8001b48:	2300      	movs	r3, #0
 8001b4a:	f825 3d04 	strh.w	r3, [r5, #-4]!
          APP_DBG_MSG("CRC_DISABLE_RX_NOTIFICATION\n");
 8001b4e:	482f      	ldr	r0, [pc, #188]	; (8001c0c <CRCAPP_Update_Service+0x28c>)
 8001b50:	f004 f992 	bl	8005e78 <puts>
          result = aci_gatt_write_char_desc(CRC_Context[index].connHandle,
 8001b54:	462b      	mov	r3, r5
 8001b56:	2202      	movs	r2, #2
 8001b58:	89a1      	ldrh	r1, [r4, #12]
 8001b5a:	8860      	ldrh	r0, [r4, #2]
 8001b5c:	f003 f8dc 	bl	8004d18 <aci_gatt_write_char_desc>
          if( result == BLE_STATUS_SUCCESS )
 8001b60:	4605      	mov	r5, r0
 8001b62:	b920      	cbnz	r0, 8001b6e <CRCAPP_Update_Service+0x1ee>
            waitForComplete = 1;
 8001b64:	4b0e      	ldr	r3, [pc, #56]	; (8001ba0 <CRCAPP_Update_Service+0x220>)
            APP_DBG_MSG("Disable CRC RX Notification Sent Successfully \n");
 8001b66:	482a      	ldr	r0, [pc, #168]	; (8001c10 <CRCAPP_Update_Service+0x290>)
            waitForComplete = 1;
 8001b68:	2201      	movs	r2, #1
 8001b6a:	701a      	strb	r2, [r3, #0]
 8001b6c:	e737      	b.n	80019de <CRCAPP_Update_Service+0x5e>
            APP_DBG_MSG("Disable CRC RX Notification Sent Failed \n");
 8001b6e:	4829      	ldr	r0, [pc, #164]	; (8001c14 <CRCAPP_Update_Service+0x294>)
 8001b70:	f004 f982 	bl	8005e78 <puts>
            if(result == BLE_STATUS_NOT_ALLOWED)
 8001b74:	2d46      	cmp	r5, #70	; 0x46
 8001b76:	f47f af25 	bne.w	80019c4 <CRCAPP_Update_Service+0x44>
              CRC_Context[index].state = CRC_DISABLE_RX_NOTIFICATION; /* redo a CRC_DISABLE_RX_NOTIFICATION */
 8001b7a:	230b      	movs	r3, #11
 8001b7c:	7023      	strb	r3, [r4, #0]
              waitForComplete = 1;
 8001b7e:	4b08      	ldr	r3, [pc, #32]	; (8001ba0 <CRCAPP_Update_Service+0x220>)
              APP_DBG_MSG("BLE_STATUS_NOT_ALLOWED do another CRC_DISABLE_RX_NOTIFICATION\n");
 8001b80:	4825      	ldr	r0, [pc, #148]	; (8001c18 <CRCAPP_Update_Service+0x298>)
              waitForComplete = 1;
 8001b82:	2201      	movs	r2, #1
 8001b84:	701a      	strb	r2, [r3, #0]
 8001b86:	e72a      	b.n	80019de <CRCAPP_Update_Service+0x5e>
 8001b88:	200001c8 	.word	0x200001c8
 8001b8c:	08008343 	.word	0x08008343
 8001b90:	08007844 	.word	0x08007844
 8001b94:	08008287 	.word	0x08008287
 8001b98:	08007859 	.word	0x08007859
 8001b9c:	0800788a 	.word	0x0800788a
 8001ba0:	20000458 	.word	0x20000458
 8001ba4:	080078ca 	.word	0x080078ca
 8001ba8:	080082b4 	.word	0x080082b4
 8001bac:	08007901 	.word	0x08007901
 8001bb0:	0800792a 	.word	0x0800792a
 8001bb4:	08007950 	.word	0x08007950
 8001bb8:	08007984 	.word	0x08007984
 8001bbc:	0800799e 	.word	0x0800799e
 8001bc0:	080079cb 	.word	0x080079cb
 8001bc4:	080079e7 	.word	0x080079e7
 8001bc8:	08007a6b 	.word	0x08007a6b
 8001bcc:	08007a15 	.word	0x08007a15
 8001bd0:	08007a34 	.word	0x08007a34
 8001bd4:	08007a49 	.word	0x08007a49
 8001bd8:	08007a77 	.word	0x08007a77
 8001bdc:	08007a9c 	.word	0x08007a9c
 8001be0:	08007ac0 	.word	0x08007ac0
 8001be4:	08007ad8 	.word	0x08007ad8
 8001be8:	0800861a 	.word	0x0800861a
 8001bec:	08007b0a 	.word	0x08007b0a
 8001bf0:	08007b2a 	.word	0x08007b2a
 8001bf4:	08007b48 	.word	0x08007b48
 8001bf8:	08007b5e 	.word	0x08007b5e
 8001bfc:	080082db 	.word	0x080082db
 8001c00:	08007b8d 	.word	0x08007b8d
 8001c04:	08007bbb 	.word	0x08007bbb
 8001c08:	08007be3 	.word	0x08007be3
 8001c0c:	08007c9a 	.word	0x08007c9a
 8001c10:	08007c20 	.word	0x08007c20
 8001c14:	08007c4f 	.word	0x08007c4f
 8001c18:	08007c78 	.word	0x08007c78

08001c1c <CRCAPP_Event_Handler>:
{
 8001c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  switch(event_pckt->evt)
 8001c20:	7843      	ldrb	r3, [r0, #1]
 8001c22:	2bff      	cmp	r3, #255	; 0xff
{
 8001c24:	b09b      	sub	sp, #108	; 0x6c
 8001c26:	4604      	mov	r4, r0
  switch(event_pckt->evt)
 8001c28:	d155      	bne.n	8001cd6 <CRCAPP_Event_Handler+0xba>
        APP_DBG_MSG("EVT_VENDOR: 0x%x!\n",
 8001c2a:	f8b0 1003 	ldrh.w	r1, [r0, #3]
 8001c2e:	48c0      	ldr	r0, [pc, #768]	; (8001f30 <CRCAPP_Event_Handler+0x314>)
 8001c30:	f004 f89a 	bl	8005d68 <iprintf>
        switch(blue_evt->ecode)
 8001c34:	f8b4 3003 	ldrh.w	r3, [r4, #3]
 8001c38:	f6a3 4304 	subw	r3, r3, #3076	; 0xc04
 8001c3c:	2b0d      	cmp	r3, #13
 8001c3e:	d84a      	bhi.n	8001cd6 <CRCAPP_Event_Handler+0xba>
 8001c40:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001c44:	004901e5 	.word	0x004901e5
 8001c48:	023d009d 	.word	0x023d009d
 8001c4c:	00490049 	.word	0x00490049
 8001c50:	0049000e 	.word	0x0049000e
 8001c54:	00490049 	.word	0x00490049
 8001c58:	027b0049 	.word	0x027b0049
 8001c5c:	037b02da 	.word	0x037b02da
                    (CRC_Context[index].state != CRC_IDLE))
 8001c60:	4db4      	ldr	r5, [pc, #720]	; (8001f34 <CRCAPP_Event_Handler+0x318>)
              handle = pr->Connection_Handle;
 8001c62:	f8b4 6005 	ldrh.w	r6, [r4, #5]
              while((index < CFG_MAX_CONNECTION) &&
 8001c66:	782b      	ldrb	r3, [r5, #0]
 8001c68:	2b02      	cmp	r3, #2
              handle = pr->Connection_Handle;
 8001c6a:	fa1f f886 	uxth.w	r8, r6
              while((index < CFG_MAX_CONNECTION) &&
 8001c6e:	d019      	beq.n	8001ca4 <CRCAPP_Event_Handler+0x88>
                status = APP_BLE_Get_Client_Connection_Status(CRC_Context[index].connHandle);
 8001c70:	8868      	ldrh	r0, [r5, #2]
 8001c72:	f7ff fe61 	bl	8001938 <APP_BLE_Get_Client_Connection_Status>
                APP_DBG_MSG("Handle 0x%x status: %d !\n",
 8001c76:	8869      	ldrh	r1, [r5, #2]
 8001c78:	4602      	mov	r2, r0
                status = APP_BLE_Get_Client_Connection_Status(CRC_Context[index].connHandle);
 8001c7a:	4607      	mov	r7, r0
                APP_DBG_MSG("Handle 0x%x status: %d !\n",
 8001c7c:	48ae      	ldr	r0, [pc, #696]	; (8001f38 <CRCAPP_Event_Handler+0x31c>)
 8001c7e:	f004 f873 	bl	8005d68 <iprintf>
                if(((CRC_Context[index].state == CRC_CONNECTED) ||
 8001c82:	782b      	ldrb	r3, [r5, #0]
 8001c84:	3b0c      	subs	r3, #12
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	f200 8378 	bhi.w	800237c <CRCAPP_Event_Handler+0x760>
                    (CRC_Context[index].state == CRC_CONNECTED_ADVERTISING))&&
 8001c8c:	2f00      	cmp	r7, #0
 8001c8e:	f040 8375 	bne.w	800237c <CRCAPP_Event_Handler+0x760>
                  APP_DBG_MSG("Handle 0x%x no more connected, connection table updated !\n",
 8001c92:	8869      	ldrh	r1, [r5, #2]
 8001c94:	48a9      	ldr	r0, [pc, #676]	; (8001f3c <CRCAPP_Event_Handler+0x320>)
 8001c96:	f004 f867 	bl	8005d68 <iprintf>
                  CRC_Context[index].state = CRC_IDLE;
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	702b      	strb	r3, [r5, #0]
                  waitForComplete = 1;
 8001c9e:	4ba8      	ldr	r3, [pc, #672]	; (8001f40 <CRCAPP_Event_Handler+0x324>)
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	701a      	strb	r2, [r3, #0]
                CRC_Context[index].connHandle = handle;
 8001ca4:	806e      	strh	r6, [r5, #2]
                APP_DBG_MSG("New handle 0x%x in connection table index: %d!\n",
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	4641      	mov	r1, r8
 8001caa:	48a6      	ldr	r0, [pc, #664]	; (8001f44 <CRCAPP_Event_Handler+0x328>)
 8001cac:	f004 f85c 	bl	8005d68 <iprintf>
                if (pr->Attribute_Data_Length == 20)
 8001cb0:	79e3      	ldrb	r3, [r4, #7]
 8001cb2:	2b14      	cmp	r3, #20
 8001cb4:	d10f      	bne.n	8001cd6 <CRCAPP_Event_Handler+0xba>
                      APP_DBG_MSG("EVT_BLUE_ATT_READ_BY_GROUP_TYPE_RESP, first index in CRC_IDLE state: %d\n", index);
 8001cb6:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8001f80 <CRCAPP_Event_Handler+0x364>
                      APP_DBG_MSG("*************************************************************************************************************************\n");
 8001cba:	f8df 82b0 	ldr.w	r8, [pc, #688]	; 8001f6c <CRCAPP_Event_Handler+0x350>
                      APP_DBG_MSG("* Found Cable Replacement service start handle 0x%04x end handle 0x%04x\n",
 8001cbe:	f8df a2c4 	ldr.w	sl, [pc, #708]	; 8001f84 <CRCAPP_Event_Handler+0x368>
                numServ = pr->Data_Length / pr->Attribute_Data_Length;
 8001cc2:	7a27      	ldrb	r7, [r4, #8]
 8001cc4:	fbb7 f7f3 	udiv	r7, r7, r3
 8001cc8:	f04f 0b00 	mov.w	fp, #0
                  idx = 16;
 8001ccc:	2610      	movs	r6, #16
                  for (i = 0; i < numServ; i++)
 8001cce:	fa5f f38b 	uxtb.w	r3, fp
 8001cd2:	429f      	cmp	r7, r3
 8001cd4:	d803      	bhi.n	8001cde <CRCAPP_Event_Handler+0xc2>
}/* end CRCAPP_Event_Handler */
 8001cd6:	2000      	movs	r0, #0
 8001cd8:	b01b      	add	sp, #108	; 0x6c
 8001cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    uint8_t service_uuid[] = { CRS_STM_UUID128 };
 8001cde:	4b9a      	ldr	r3, [pc, #616]	; (8001f48 <CRCAPP_Event_Handler+0x32c>)
 8001ce0:	f10d 0c50 	add.w	ip, sp, #80	; 0x50
 8001ce4:	f103 0e10 	add.w	lr, r3, #16
 8001ce8:	6818      	ldr	r0, [r3, #0]
 8001cea:	6859      	ldr	r1, [r3, #4]
 8001cec:	4662      	mov	r2, ip
 8001cee:	c203      	stmia	r2!, {r0, r1}
 8001cf0:	3308      	adds	r3, #8
 8001cf2:	4573      	cmp	r3, lr
 8001cf4:	4694      	mov	ip, r2
 8001cf6:	d1f7      	bne.n	8001ce8 <CRCAPP_Event_Handler+0xcc>
                    for(j = 0; j < pr->Attribute_Data_Length - 4; j++)
 8001cf8:	79e2      	ldrb	r2, [r4, #7]
                      if(pr->Attribute_Data_List[j+4] != service_uuid[(pr->Attribute_Data_Length-5) - j])
 8001cfa:	2100      	movs	r1, #0
                    for(j = 0; j < pr->Attribute_Data_Length - 4; j++)
 8001cfc:	1f10      	subs	r0, r2, #4
                      if(pr->Attribute_Data_List[j+4] != service_uuid[(pr->Attribute_Data_Length-5) - j])
 8001cfe:	3a05      	subs	r2, #5
                    for(j = 0; j < pr->Attribute_Data_Length - 4; j++)
 8001d00:	b2cb      	uxtb	r3, r1
 8001d02:	4283      	cmp	r3, r0
 8001d04:	db25      	blt.n	8001d52 <CRCAPP_Event_Handler+0x136>
                      APP_DBG_MSG("EVT_BLUE_ATT_READ_BY_GROUP_TYPE_RESP, first index in CRC_IDLE state: %d\n", index);
 8001d06:	2100      	movs	r1, #0
 8001d08:	4648      	mov	r0, r9
 8001d0a:	f004 f82d 	bl	8005d68 <iprintf>
                        UNPACK_2_BYTE_PARAMETER(&pr->Attribute_Data_List[idx-16]);
 8001d0e:	f1a6 0310 	sub.w	r3, r6, #16
 8001d12:	1d62      	adds	r2, r4, #5
 8001d14:	18d1      	adds	r1, r2, r3
 8001d16:	4423      	add	r3, r4
 8001d18:	7949      	ldrb	r1, [r1, #5]
 8001d1a:	7a5b      	ldrb	r3, [r3, #9]
 8001d1c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                      CRC_Context[index].ServiceHandle = 
 8001d20:	80ab      	strh	r3, [r5, #4]
                        UNPACK_2_BYTE_PARAMETER (&pr->Attribute_Data_List[idx-14]);
 8001d22:	f1a6 030e 	sub.w	r3, r6, #14
 8001d26:	441a      	add	r2, r3
 8001d28:	4423      	add	r3, r4
 8001d2a:	7952      	ldrb	r2, [r2, #5]
 8001d2c:	7a5b      	ldrb	r3, [r3, #9]
 8001d2e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                      CRC_Context[index].ServiceEndHandle = 
 8001d32:	80eb      	strh	r3, [r5, #6]
                      APP_DBG_MSG("*************************************************************************************************************************\n");
 8001d34:	4640      	mov	r0, r8
 8001d36:	f004 f89f 	bl	8005e78 <puts>
                      APP_DBG_MSG("* Found Cable Replacement service start handle 0x%04x end handle 0x%04x\n",
 8001d3a:	88ea      	ldrh	r2, [r5, #6]
 8001d3c:	88a9      	ldrh	r1, [r5, #4]
 8001d3e:	4650      	mov	r0, sl
 8001d40:	f004 f812 	bl	8005d68 <iprintf>
                      APP_DBG_MSG("*************************************************************************************************************************\n");
 8001d44:	4640      	mov	r0, r8
 8001d46:	f004 f897 	bl	8005e78 <puts>
                      waitForComplete = 1;
 8001d4a:	4b7d      	ldr	r3, [pc, #500]	; (8001f40 <CRCAPP_Event_Handler+0x324>)
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	701a      	strb	r2, [r3, #0]
 8001d50:	e010      	b.n	8001d74 <CRCAPP_Event_Handler+0x158>
                      if(pr->Attribute_Data_List[j+4] != service_uuid[(pr->Attribute_Data_Length-5) - j])
 8001d52:	eb04 0c03 	add.w	ip, r4, r3
 8001d56:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	4473      	add	r3, lr
 8001d5e:	f89c c00d 	ldrb.w	ip, [ip, #13]
 8001d62:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001d66:	459c      	cmp	ip, r3
 8001d68:	f101 0101 	add.w	r1, r1, #1
 8001d6c:	d0c8      	beq.n	8001d00 <CRCAPP_Event_Handler+0xe4>
                        APP_DBG_MSG("Service UUID is not a Cable Replacement Service\n");
 8001d6e:	4877      	ldr	r0, [pc, #476]	; (8001f4c <CRCAPP_Event_Handler+0x330>)
 8001d70:	f004 f882 	bl	8005e78 <puts>
                    idx += 20;
 8001d74:	3614      	adds	r6, #20
 8001d76:	b2f6      	uxtb	r6, r6
 8001d78:	f10b 0b01 	add.w	fp, fp, #1
 8001d7c:	e7a7      	b.n	8001cce <CRCAPP_Event_Handler+0xb2>
                    (CRC_Context[index].connHandle != pr->Connection_Handle))
 8001d7e:	4e6d      	ldr	r6, [pc, #436]	; (8001f34 <CRCAPP_Event_Handler+0x318>)
              while((index < CFG_MAX_CONNECTION) &&
 8001d80:	f8b4 3005 	ldrh.w	r3, [r4, #5]
 8001d84:	8872      	ldrh	r2, [r6, #2]
 8001d86:	429a      	cmp	r2, r3
 8001d88:	f040 82fa 	bne.w	8002380 <CRCAPP_Event_Handler+0x764>
                if((CRC_Context[index].state == CRC_DISCOVER_CHARACS) &&
 8001d8c:	7833      	ldrb	r3, [r6, #0]
 8001d8e:	2b04      	cmp	r3, #4
 8001d90:	d1a1      	bne.n	8001cd6 <CRCAPP_Event_Handler+0xba>
                handle = UNPACK_2_BYTE_PARAMETER(&pr->Handle_Value_Pair_Data[0]);
 8001d92:	f8b4 3009 	ldrh.w	r3, [r4, #9]
                if((CRC_Context[index].state == CRC_DISCOVER_CHARACS) &&
 8001d96:	88b2      	ldrh	r2, [r6, #4]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d89c      	bhi.n	8001cd6 <CRCAPP_Event_Handler+0xba>
                   (handle >= CRC_Context[index].ServiceHandle) &&
 8001d9c:	88f2      	ldrh	r2, [r6, #6]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d399      	bcc.n	8001cd6 <CRCAPP_Event_Handler+0xba>
                  APP_DBG_MSG("EVT_BLUE_ATT_READ_BY_TYPE_RESP\n");
 8001da2:	486b      	ldr	r0, [pc, #428]	; (8001f50 <CRCAPP_Event_Handler+0x334>)
 8001da4:	f004 f868 	bl	8005e78 <puts>
                  if (pr->Handle_Value_Pair_Length == 21)
 8001da8:	79e3      	ldrb	r3, [r4, #7]
 8001daa:	2b15      	cmp	r3, #21
 8001dac:	d193      	bne.n	8001cd6 <CRCAPP_Event_Handler+0xba>
                  idx = 17;
 8001dae:	2511      	movs	r5, #17
 8001db0:	e047      	b.n	8001e42 <CRCAPP_Event_Handler+0x226>
                        if(pr->Handle_Value_Pair_Data[i+5] != tx_uuid[(pr->Handle_Value_Pair_Length-6) - i])
 8001db2:	3a06      	subs	r2, #6
 8001db4:	f109 0a05 	add.w	sl, r9, #5
 8001db8:	eba2 0209 	sub.w	r2, r2, r9
 8001dbc:	ab1a      	add	r3, sp, #104	; 0x68
 8001dbe:	44a2      	add	sl, r4
 8001dc0:	441a      	add	r2, r3
 8001dc2:	f89a 1009 	ldrb.w	r1, [sl, #9]
 8001dc6:	f812 2c28 	ldrb.w	r2, [r2, #-40]
 8001dca:	4291      	cmp	r1, r2
 8001dcc:	d011      	beq.n	8001df2 <CRCAPP_Event_Handler+0x1d6>
                          APP_DBG_MSG("Characteristic UUID is not a Tx UUID Characteristic\n");
 8001dce:	4861      	ldr	r0, [pc, #388]	; (8001f54 <CRCAPP_Event_Handler+0x338>)
 8001dd0:	f004 f852 	bl	8005e78 <puts>
                                      tx_uuid[(pr->Handle_Value_Pair_Length-6) - i]);
 8001dd4:	79e2      	ldrb	r2, [r4, #7]
                          APP_DBG_MSG("pr->Handle_Value_Pair_Data[i+5]: 0x%x != tx_uuid[(pr->Handle_Value_Pair_Length-6) - i]: 0x%x\n",
 8001dd6:	f89a 1009 	ldrb.w	r1, [sl, #9]
 8001dda:	485f      	ldr	r0, [pc, #380]	; (8001f58 <CRCAPP_Event_Handler+0x33c>)
                                      tx_uuid[(pr->Handle_Value_Pair_Length-6) - i]);
 8001ddc:	3a06      	subs	r2, #6
 8001dde:	ab1a      	add	r3, sp, #104	; 0x68
 8001de0:	eba2 0209 	sub.w	r2, r2, r9
 8001de4:	441a      	add	r2, r3
                          result &= RX_CHAR;    /* Not a TX Characteristic */
 8001de6:	f008 0802 	and.w	r8, r8, #2
                          APP_DBG_MSG("pr->Handle_Value_Pair_Data[i+5]: 0x%x != tx_uuid[(pr->Handle_Value_Pair_Length-6) - i]: 0x%x\n",
 8001dea:	f812 2c28 	ldrb.w	r2, [r2, #-40]
 8001dee:	f003 ffbb 	bl	8005d68 <iprintf>
                        if(pr->Handle_Value_Pair_Data[i+5] != rx_uuid[(pr->Handle_Value_Pair_Length-6) - i])
 8001df2:	79e2      	ldrb	r2, [r4, #7]
 8001df4:	f89a 1009 	ldrb.w	r1, [sl, #9]
 8001df8:	3a06      	subs	r2, #6
 8001dfa:	eba2 0209 	sub.w	r2, r2, r9
 8001dfe:	ab1a      	add	r3, sp, #104	; 0x68
 8001e00:	441a      	add	r2, r3
 8001e02:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8001e06:	4291      	cmp	r1, r2
 8001e08:	d011      	beq.n	8001e2e <CRCAPP_Event_Handler+0x212>
                          APP_DBG_MSG("Characteristic UUID is not a Rx UUID Characteristic\n");
 8001e0a:	4854      	ldr	r0, [pc, #336]	; (8001f5c <CRCAPP_Event_Handler+0x340>)
 8001e0c:	f004 f834 	bl	8005e78 <puts>
                                      rx_uuid[(pr->Handle_Value_Pair_Length-6) - i]);
 8001e10:	79e2      	ldrb	r2, [r4, #7]
                          APP_DBG_MSG("pr->Handle_Value_Pair_Data[i+5]: 0x%x != rx_uuid[(pr->Handle_Value_Pair_Length-6) - i]: 0x%x\n",
 8001e12:	f89a 1009 	ldrb.w	r1, [sl, #9]
 8001e16:	4852      	ldr	r0, [pc, #328]	; (8001f60 <CRCAPP_Event_Handler+0x344>)
                                      rx_uuid[(pr->Handle_Value_Pair_Length-6) - i]);
 8001e18:	3a06      	subs	r2, #6
 8001e1a:	eba2 0909 	sub.w	r9, r2, r9
 8001e1e:	ab1a      	add	r3, sp, #104	; 0x68
 8001e20:	4499      	add	r9, r3
                          result &= TX_CHAR;   /* Not a RX Characteristic */
 8001e22:	f008 0801 	and.w	r8, r8, #1
                          APP_DBG_MSG("pr->Handle_Value_Pair_Data[i+5]: 0x%x != rx_uuid[(pr->Handle_Value_Pair_Length-6) - i]: 0x%x\n",
 8001e26:	f819 2c18 	ldrb.w	r2, [r9, #-24]
 8001e2a:	f003 ff9d 	bl	8005d68 <iprintf>
 8001e2e:	f10b 0b01 	add.w	fp, fp, #1
                        if(result == 0)
 8001e32:	f1b8 0f00 	cmp.w	r8, #0
 8001e36:	d12d      	bne.n	8001e94 <CRCAPP_Event_Handler+0x278>
                      pr->Data_Length -= 21;
 8001e38:	7a23      	ldrb	r3, [r4, #8]
                      idx += 21;
 8001e3a:	3515      	adds	r5, #21
                      pr->Data_Length -= 21;
 8001e3c:	3b15      	subs	r3, #21
 8001e3e:	7223      	strb	r3, [r4, #8]
                      idx += 21;
 8001e40:	b2ed      	uxtb	r5, r5
                    while(pr->Data_Length > 0)
 8001e42:	7a23      	ldrb	r3, [r4, #8]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	f43f af46 	beq.w	8001cd6 <CRCAPP_Event_Handler+0xba>
                      uint8_t tx_uuid[] = { CRS_STM_TX_UUID128 };
 8001e4a:	4b46      	ldr	r3, [pc, #280]	; (8001f64 <CRCAPP_Event_Handler+0x348>)
 8001e4c:	af10      	add	r7, sp, #64	; 0x40
 8001e4e:	f103 0c10 	add.w	ip, r3, #16
 8001e52:	6818      	ldr	r0, [r3, #0]
 8001e54:	6859      	ldr	r1, [r3, #4]
 8001e56:	463a      	mov	r2, r7
 8001e58:	c203      	stmia	r2!, {r0, r1}
 8001e5a:	3308      	adds	r3, #8
 8001e5c:	4563      	cmp	r3, ip
 8001e5e:	4617      	mov	r7, r2
 8001e60:	d1f7      	bne.n	8001e52 <CRCAPP_Event_Handler+0x236>
                      uint8_t rx_uuid[] = { CRS_STM_RX_UUID128 };
 8001e62:	4b41      	ldr	r3, [pc, #260]	; (8001f68 <CRCAPP_Event_Handler+0x34c>)
 8001e64:	af14      	add	r7, sp, #80	; 0x50
 8001e66:	f103 0c10 	add.w	ip, r3, #16
 8001e6a:	6818      	ldr	r0, [r3, #0]
 8001e6c:	6859      	ldr	r1, [r3, #4]
 8001e6e:	463a      	mov	r2, r7
 8001e70:	c203      	stmia	r2!, {r0, r1}
 8001e72:	3308      	adds	r3, #8
 8001e74:	4563      	cmp	r3, ip
 8001e76:	4617      	mov	r7, r2
 8001e78:	d1f7      	bne.n	8001e6a <CRCAPP_Event_Handler+0x24e>
                      handle = UNPACK_2_BYTE_PARAMETER(&pr->Handle_Value_Pair_Data[idx-14]);
 8001e7a:	f1a5 030e 	sub.w	r3, r5, #14
 8001e7e:	1d67      	adds	r7, r4, #5
 8001e80:	18e2      	adds	r2, r4, r3
 8001e82:	443b      	add	r3, r7
 8001e84:	7a52      	ldrb	r2, [r2, #9]
 8001e86:	795b      	ldrb	r3, [r3, #5]
 8001e88:	920e      	str	r2, [sp, #56]	; 0x38
 8001e8a:	930f      	str	r3, [sp, #60]	; 0x3c
 8001e8c:	f04f 0b00 	mov.w	fp, #0
                      uint8_t i, result = TX_CHAR | RX_CHAR;
 8001e90:	f04f 0803 	mov.w	r8, #3
                      for(i = 0; i < pr->Handle_Value_Pair_Length - 5; i++)
 8001e94:	79e2      	ldrb	r2, [r4, #7]
 8001e96:	fa5f f98b 	uxtb.w	r9, fp
 8001e9a:	1f51      	subs	r1, r2, #5
 8001e9c:	4589      	cmp	r9, r1
 8001e9e:	db88      	blt.n	8001db2 <CRCAPP_Event_Handler+0x196>
                      handle = UNPACK_2_BYTE_PARAMETER(&pr->Handle_Value_Pair_Data[idx-14]);
 8001ea0:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
                      if(result == TX_CHAR)
 8001ea4:	f1b8 0f01 	cmp.w	r8, #1
                      handle = UNPACK_2_BYTE_PARAMETER(&pr->Handle_Value_Pair_Data[idx-14]);
 8001ea8:	ea43 2b02 	orr.w	fp, r3, r2, lsl #8
                      if(result == TX_CHAR)
 8001eac:	d16c      	bne.n	8001f88 <CRCAPP_Event_Handler+0x36c>
                        APP_DBG_MSG("*************************************************************************************************************************\n");
 8001eae:	482f      	ldr	r0, [pc, #188]	; (8001f6c <CRCAPP_Event_Handler+0x350>)
 8001eb0:	f003 ffe2 	bl	8005e78 <puts>
                        APP_DBG_MSG("TX start handle 0x%04x\n", UNPACK_2_BYTE_PARAMETER(&pr->Handle_Value_Pair_Data[idx-17]));
 8001eb4:	f1a5 0311 	sub.w	r3, r5, #17
 8001eb8:	441f      	add	r7, r3
 8001eba:	4423      	add	r3, r4
 8001ebc:	7979      	ldrb	r1, [r7, #5]
 8001ebe:	7a5b      	ldrb	r3, [r3, #9]
 8001ec0:	482b      	ldr	r0, [pc, #172]	; (8001f70 <CRCAPP_Event_Handler+0x354>)
 8001ec2:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8001ec6:	f003 ff4f 	bl	8005d68 <iprintf>
                        APP_DBG_MSG("TX properties   0x%02x\n", pr->Handle_Value_Pair_Data[idx-15]);
 8001eca:	1963      	adds	r3, r4, r5
 8001ecc:	4829      	ldr	r0, [pc, #164]	; (8001f74 <CRCAPP_Event_Handler+0x358>)
 8001ece:	f813 1c06 	ldrb.w	r1, [r3, #-6]
 8001ed2:	f003 ff49 	bl	8005d68 <iprintf>
                        APP_DBG_MSG("TX handle       0x%04x\n", handle);
 8001ed6:	4659      	mov	r1, fp
 8001ed8:	4827      	ldr	r0, [pc, #156]	; (8001f78 <CRCAPP_Event_Handler+0x35c>)
 8001eda:	f003 ff45 	bl	8005d68 <iprintf>
                        APP_DBG_MSG("TX uuid           0x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x\n", 
 8001ede:	f04f 0819 	mov.w	r8, #25
 8001ee2:	23ed      	movs	r3, #237	; 0xed
 8001ee4:	e9cd 380b 	strd	r3, r8, [sp, #44]	; 0x2c
 8001ee8:	22ae      	movs	r2, #174	; 0xae
 8001eea:	9308      	str	r3, [sp, #32]
 8001eec:	f04f 0982 	mov.w	r9, #130	; 0x82
 8001ef0:	234c      	movs	r3, #76	; 0x4c
 8001ef2:	f04f 0a21 	mov.w	sl, #33	; 0x21
 8001ef6:	e9cd 2909 	strd	r2, r9, [sp, #36]	; 0x24
 8001efa:	e9cd 3a06 	strd	r3, sl, [sp, #24]
 8001efe:	229d      	movs	r2, #157	; 0x9d
 8001f00:	2341      	movs	r3, #65	; 0x41
 8001f02:	e9cd 3204 	strd	r3, r2, [sp, #16]
 8001f06:	2145      	movs	r1, #69	; 0x45
 8001f08:	2322      	movs	r3, #34	; 0x22
 8001f0a:	e9cd 3102 	strd	r3, r1, [sp, #8]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	2361      	movs	r3, #97	; 0x61
 8001f12:	208e      	movs	r0, #142	; 0x8e
 8001f14:	e9cd 3000 	strd	r3, r0, [sp]
 8001f18:	4611      	mov	r1, r2
 8001f1a:	23fe      	movs	r3, #254	; 0xfe
 8001f1c:	4817      	ldr	r0, [pc, #92]	; (8001f7c <CRCAPP_Event_Handler+0x360>)
 8001f1e:	f003 ff23 	bl	8005d68 <iprintf>
                        APP_DBG_MSG("*************************************************************************************************************************\n");
 8001f22:	4812      	ldr	r0, [pc, #72]	; (8001f6c <CRCAPP_Event_Handler+0x350>)
 8001f24:	f003 ffa8 	bl	8005e78 <puts>
                        CRC_Context[index].TXCharHdle = handle;
 8001f28:	f8a6 b008 	strh.w	fp, [r6, #8]
 8001f2c:	e784      	b.n	8001e38 <CRCAPP_Event_Handler+0x21c>
 8001f2e:	bf00      	nop
 8001f30:	08007cb6 	.word	0x08007cb6
 8001f34:	200001c8 	.word	0x200001c8
 8001f38:	08007cc9 	.word	0x08007cc9
 8001f3c:	08007ce3 	.word	0x08007ce3
 8001f40:	20000458 	.word	0x20000458
 8001f44:	08007d1e 	.word	0x08007d1e
 8001f48:	0800707f 	.word	0x0800707f
 8001f4c:	08007d4e 	.word	0x08007d4e
 8001f50:	08007e8a 	.word	0x08007e8a
 8001f54:	08007ea9 	.word	0x08007ea9
 8001f58:	08007edd 	.word	0x08007edd
 8001f5c:	08007f3b 	.word	0x08007f3b
 8001f60:	08007f6f 	.word	0x08007f6f
 8001f64:	0800708f 	.word	0x0800708f
 8001f68:	0800709f 	.word	0x0800709f
 8001f6c:	08007dc7 	.word	0x08007dc7
 8001f70:	08007fcd 	.word	0x08007fcd
 8001f74:	08007fe5 	.word	0x08007fe5
 8001f78:	08007ffd 	.word	0x08007ffd
 8001f7c:	08008015 	.word	0x08008015
 8001f80:	08007d7e 	.word	0x08007d7e
 8001f84:	08007e41 	.word	0x08007e41
                      if(result == RX_CHAR)
 8001f88:	f1b8 0f02 	cmp.w	r8, #2
 8001f8c:	f47f af54 	bne.w	8001e38 <CRCAPP_Event_Handler+0x21c>
                        APP_DBG_MSG("*************************************************************************************************************************\n");
 8001f90:	48c1      	ldr	r0, [pc, #772]	; (8002298 <CRCAPP_Event_Handler+0x67c>)
 8001f92:	f003 ff71 	bl	8005e78 <puts>
                        APP_DBG_MSG("RX start handle 0x%04x\n", UNPACK_2_BYTE_PARAMETER(&pr->Handle_Value_Pair_Data[idx-17]));
 8001f96:	f1a5 0311 	sub.w	r3, r5, #17
 8001f9a:	441f      	add	r7, r3
 8001f9c:	4423      	add	r3, r4
 8001f9e:	7979      	ldrb	r1, [r7, #5]
 8001fa0:	7a5b      	ldrb	r3, [r3, #9]
 8001fa2:	48be      	ldr	r0, [pc, #760]	; (800229c <CRCAPP_Event_Handler+0x680>)
 8001fa4:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8001fa8:	f003 fede 	bl	8005d68 <iprintf>
                        APP_DBG_MSG("RX properties   0x%02x\n", pr->Handle_Value_Pair_Data[idx-15]);
 8001fac:	1963      	adds	r3, r4, r5
 8001fae:	48bc      	ldr	r0, [pc, #752]	; (80022a0 <CRCAPP_Event_Handler+0x684>)
 8001fb0:	f813 1c06 	ldrb.w	r1, [r3, #-6]
 8001fb4:	f003 fed8 	bl	8005d68 <iprintf>
                        APP_DBG_MSG("RX handle       0x%04x\n", handle);
 8001fb8:	4659      	mov	r1, fp
 8001fba:	48ba      	ldr	r0, [pc, #744]	; (80022a4 <CRCAPP_Event_Handler+0x688>)
 8001fbc:	f003 fed4 	bl	8005d68 <iprintf>
                        APP_DBG_MSG("RX uuid           0x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x\n", 
 8001fc0:	23ed      	movs	r3, #237	; 0xed
 8001fc2:	2219      	movs	r2, #25
 8001fc4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8001fc8:	9308      	str	r3, [sp, #32]
 8001fca:	2021      	movs	r0, #33	; 0x21
 8001fcc:	234c      	movs	r3, #76	; 0x4c
 8001fce:	e9cd 3006 	strd	r3, r0, [sp, #24]
 8001fd2:	279d      	movs	r7, #157	; 0x9d
 8001fd4:	2341      	movs	r3, #65	; 0x41
 8001fd6:	f04f 0c45 	mov.w	ip, #69	; 0x45
 8001fda:	22ae      	movs	r2, #174	; 0xae
 8001fdc:	2182      	movs	r1, #130	; 0x82
 8001fde:	e9cd 3704 	strd	r3, r7, [sp, #16]
 8001fe2:	2322      	movs	r3, #34	; 0x22
 8001fe4:	e9cd 2109 	strd	r2, r1, [sp, #36]	; 0x24
 8001fe8:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8001fec:	f04f 0e8e 	mov.w	lr, #142	; 0x8e
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	2362      	movs	r3, #98	; 0x62
 8001ff4:	e9cd 3e00 	strd	r3, lr, [sp]
 8001ff8:	4611      	mov	r1, r2
 8001ffa:	23fe      	movs	r3, #254	; 0xfe
 8001ffc:	48aa      	ldr	r0, [pc, #680]	; (80022a8 <CRCAPP_Event_Handler+0x68c>)
 8001ffe:	f003 feb3 	bl	8005d68 <iprintf>
                        APP_DBG_MSG("*************************************************************************************************************************\n");
 8002002:	48a5      	ldr	r0, [pc, #660]	; (8002298 <CRCAPP_Event_Handler+0x67c>)
 8002004:	f003 ff38 	bl	8005e78 <puts>
                        CRC_Context[index].RXCharHdle = handle;
 8002008:	f8a6 b00a 	strh.w	fp, [r6, #10]
 800200c:	e714      	b.n	8001e38 <CRCAPP_Event_Handler+0x21c>
                    (CRC_Context[index].connHandle != pr->Connection_Handle))
 800200e:	4da7      	ldr	r5, [pc, #668]	; (80022ac <CRCAPP_Event_Handler+0x690>)
              while((index < CFG_MAX_CONNECTION) &&
 8002010:	f8b4 3005 	ldrh.w	r3, [r4, #5]
 8002014:	886a      	ldrh	r2, [r5, #2]
 8002016:	429a      	cmp	r2, r3
 8002018:	f040 81b4 	bne.w	8002384 <CRCAPP_Event_Handler+0x768>
                if((CRC_Context[index].state == CRC_DISCOVER_DESC) &&
 800201c:	782b      	ldrb	r3, [r5, #0]
 800201e:	2b05      	cmp	r3, #5
 8002020:	f47f ae59 	bne.w	8001cd6 <CRCAPP_Event_Handler+0xba>
                handle = UNPACK_2_BYTE_PARAMETER(&pr->Handle_UUID_Pair[0]);
 8002024:	f8b4 3009 	ldrh.w	r3, [r4, #9]
                if((CRC_Context[index].state == CRC_DISCOVER_DESC) &&
 8002028:	88aa      	ldrh	r2, [r5, #4]
 800202a:	429a      	cmp	r2, r3
 800202c:	f63f ae53 	bhi.w	8001cd6 <CRCAPP_Event_Handler+0xba>
                   (handle >= CRC_Context[index].ServiceHandle) &&
 8002030:	88ea      	ldrh	r2, [r5, #6]
 8002032:	429a      	cmp	r2, r3
 8002034:	f4ff ae4f 	bcc.w	8001cd6 <CRCAPP_Event_Handler+0xba>
                  APP_DBG_MSG("EVT_BLUE_ATT_FIND_INFORMATION_RESP\n");
 8002038:	489d      	ldr	r0, [pc, #628]	; (80022b0 <CRCAPP_Event_Handler+0x694>)
 800203a:	f003 ff1d 	bl	8005e78 <puts>
                  numDesc = (pr->Event_Data_Length) / 4;
 800203e:	7a26      	ldrb	r6, [r4, #8]
                  waitForComplete = 1;
 8002040:	4b9c      	ldr	r3, [pc, #624]	; (80022b4 <CRCAPP_Event_Handler+0x698>)
                  APP_DBG_MSG("CRC Number of descriptors: %d\n", numDesc);
 8002042:	489d      	ldr	r0, [pc, #628]	; (80022b8 <CRCAPP_Event_Handler+0x69c>)
                  numDesc = (pr->Event_Data_Length) / 4;
 8002044:	08b6      	lsrs	r6, r6, #2
                  waitForComplete = 1;
 8002046:	2201      	movs	r2, #1
                  APP_DBG_MSG("CRC Number of descriptors: %d\n", numDesc);
 8002048:	4631      	mov	r1, r6
                  waitForComplete = 1;
 800204a:	701a      	strb	r2, [r3, #0]
                  APP_DBG_MSG("CRC Number of descriptors: %d\n", numDesc);
 800204c:	f003 fe8c 	bl	8005d68 <iprintf>
                  if (pr->Format == UUID_TYPE_16)
 8002050:	79e3      	ldrb	r3, [r4, #7]
 8002052:	2b01      	cmp	r3, #1
 8002054:	f47f ae3f 	bne.w	8001cd6 <CRCAPP_Event_Handler+0xba>
                      APP_DBG_MSG("UUID: 0x%x Handle: 0x%x\n", uuid, handle);
 8002058:	f8df a2a4 	ldr.w	sl, [pc, #676]	; 8002300 <CRCAPP_Event_Handler+0x6e4>
                          APP_DBG_MSG("*************************************************************************************************************************\n");
 800205c:	f8df 9238 	ldr.w	r9, [pc, #568]	; 8002298 <CRCAPP_Event_Handler+0x67c>
                          APP_DBG_MSG("RX Client Characteristic Configuration Desc handle 0x%04x\n", handle);
 8002060:	f8df b2a0 	ldr.w	fp, [pc, #672]	; 8002304 <CRCAPP_Event_Handler+0x6e8>
 8002064:	eb04 0786 	add.w	r7, r4, r6, lsl #2
                    for (i = 0; i < numDesc; i++)
 8002068:	42a7      	cmp	r7, r4
 800206a:	f43f ae34 	beq.w	8001cd6 <CRCAPP_Event_Handler+0xba>
                      handle = UNPACK_2_BYTE_PARAMETER(&pr->Handle_UUID_Pair[idx]);
 800206e:	7aa3      	ldrb	r3, [r4, #10]
 8002070:	f894 8009 	ldrb.w	r8, [r4, #9]
                      uuid = UNPACK_2_BYTE_PARAMETER(&pr->Handle_UUID_Pair[idx+2]);
 8002074:	7ae6      	ldrb	r6, [r4, #11]
                      handle = UNPACK_2_BYTE_PARAMETER(&pr->Handle_UUID_Pair[idx]);
 8002076:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
                      uuid = UNPACK_2_BYTE_PARAMETER(&pr->Handle_UUID_Pair[idx+2]);
 800207a:	7b23      	ldrb	r3, [r4, #12]
 800207c:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
                      APP_DBG_MSG("UUID: 0x%x Handle: 0x%x\n", uuid, handle);
 8002080:	4642      	mov	r2, r8
 8002082:	4631      	mov	r1, r6
 8002084:	4650      	mov	r0, sl
 8002086:	f003 fe6f 	bl	8005d68 <iprintf>
                      if(uuid == CLIENT_CHAR_CONFIG_DESCRIPTOR_UUID)
 800208a:	f642 1302 	movw	r3, #10498	; 0x2902
 800208e:	429e      	cmp	r6, r3
 8002090:	d113      	bne.n	80020ba <CRCAPP_Event_Handler+0x49e>
                        if( (CRC_Context[index].RXCharHdle)+1 == handle)
 8002092:	896b      	ldrh	r3, [r5, #10]
 8002094:	3301      	adds	r3, #1
 8002096:	4598      	cmp	r8, r3
 8002098:	d10f      	bne.n	80020ba <CRCAPP_Event_Handler+0x49e>
                          APP_DBG_MSG("*************************************************************************************************************************\n");
 800209a:	4648      	mov	r0, r9
 800209c:	f003 feec 	bl	8005e78 <puts>
                          APP_DBG_MSG("RX Client Characteristic Configuration Desc handle 0x%04x\n", handle);
 80020a0:	4641      	mov	r1, r8
 80020a2:	4658      	mov	r0, fp
 80020a4:	f003 fe60 	bl	8005d68 <iprintf>
                          APP_DBG_MSG("RX Client Characteristic Configuration Desc uuid   0x%04x\n", uuid);
 80020a8:	4631      	mov	r1, r6
 80020aa:	4884      	ldr	r0, [pc, #528]	; (80022bc <CRCAPP_Event_Handler+0x6a0>)
 80020ac:	f003 fe5c 	bl	8005d68 <iprintf>
                          APP_DBG_MSG("*************************************************************************************************************************\n");
 80020b0:	4648      	mov	r0, r9
 80020b2:	f003 fee1 	bl	8005e78 <puts>
                          CRC_Context[index].RXCCCDescHdle = handle;
 80020b6:	f8a5 800c 	strh.w	r8, [r5, #12]
 80020ba:	3404      	adds	r4, #4
 80020bc:	e7d4      	b.n	8002068 <CRCAPP_Event_Handler+0x44c>
                    (CRC_Context[index].connHandle != pr->Connection_Handle))
 80020be:	4d7b      	ldr	r5, [pc, #492]	; (80022ac <CRCAPP_Event_Handler+0x690>)
              while((index < CFG_MAX_CONNECTION) &&
 80020c0:	f8b4 3005 	ldrh.w	r3, [r4, #5]
 80020c4:	886a      	ldrh	r2, [r5, #2]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	f040 815e 	bne.w	8002388 <CRCAPP_Event_Handler+0x76c>
                if(CRC_Context[index].state == CRC_READ_TX)
 80020cc:	782b      	ldrb	r3, [r5, #0]
 80020ce:	2b06      	cmp	r3, #6
 80020d0:	d110      	bne.n	80020f4 <CRCAPP_Event_Handler+0x4d8>
                  APP_DBG_MSG("EVT_BLUE_ATT_READ_RESP\n");
 80020d2:	487b      	ldr	r0, [pc, #492]	; (80022c0 <CRCAPP_Event_Handler+0x6a4>)
 80020d4:	f003 fed0 	bl	8005e78 <puts>
                  waitForComplete = 1;
 80020d8:	4b76      	ldr	r3, [pc, #472]	; (80022b4 <CRCAPP_Event_Handler+0x698>)
                  APP_DBG_MSG("*************************************************************************************************************************\n");
 80020da:	486f      	ldr	r0, [pc, #444]	; (8002298 <CRCAPP_Event_Handler+0x67c>)
                  waitForComplete = 1;
 80020dc:	2201      	movs	r2, #1
 80020de:	701a      	strb	r2, [r3, #0]
                  APP_DBG_MSG("*************************************************************************************************************************\n");
 80020e0:	f003 feca 	bl	8005e78 <puts>
                  APP_DBG_MSG("CRC TX 0x%x:\n",
 80020e4:	8929      	ldrh	r1, [r5, #8]
 80020e6:	4877      	ldr	r0, [pc, #476]	; (80022c4 <CRCAPP_Event_Handler+0x6a8>)
                  APP_DBG_MSG("CRC RX 0x%x:\n", 
 80020e8:	f003 fe3e 	bl	8005d68 <iprintf>
                  APP_DBG_MSG("*************************************************************************************************************************\n");
 80020ec:	486a      	ldr	r0, [pc, #424]	; (8002298 <CRCAPP_Event_Handler+0x67c>)
 80020ee:	f003 fec3 	bl	8005e78 <puts>
 80020f2:	e5f0      	b.n	8001cd6 <CRCAPP_Event_Handler+0xba>
                else if(CRC_Context[index].state == CRC_READ_RX)
 80020f4:	2b07      	cmp	r3, #7
 80020f6:	d10b      	bne.n	8002110 <CRCAPP_Event_Handler+0x4f4>
                  APP_DBG_MSG("EVT_BLUE_ATT_READ_RESP\n");
 80020f8:	4871      	ldr	r0, [pc, #452]	; (80022c0 <CRCAPP_Event_Handler+0x6a4>)
 80020fa:	f003 febd 	bl	8005e78 <puts>
                  waitForComplete = 1;
 80020fe:	4b6d      	ldr	r3, [pc, #436]	; (80022b4 <CRCAPP_Event_Handler+0x698>)
                  APP_DBG_MSG("*************************************************************************************************************************\n");
 8002100:	4865      	ldr	r0, [pc, #404]	; (8002298 <CRCAPP_Event_Handler+0x67c>)
                  waitForComplete = 1;
 8002102:	2201      	movs	r2, #1
 8002104:	701a      	strb	r2, [r3, #0]
                  APP_DBG_MSG("*************************************************************************************************************************\n");
 8002106:	f003 feb7 	bl	8005e78 <puts>
                  APP_DBG_MSG("CRC RX 0x%x:\n", 
 800210a:	8969      	ldrh	r1, [r5, #10]
 800210c:	486e      	ldr	r0, [pc, #440]	; (80022c8 <CRCAPP_Event_Handler+0x6ac>)
 800210e:	e7eb      	b.n	80020e8 <CRCAPP_Event_Handler+0x4cc>
                else if(CRC_Context[index].state == CRC_READ_RX_CCC)
 8002110:	2b08      	cmp	r3, #8
 8002112:	f47f ade0 	bne.w	8001cd6 <CRCAPP_Event_Handler+0xba>
                  APP_DBG_MSG("EVT_BLUE_ATT_READ_RESP\n");
 8002116:	486a      	ldr	r0, [pc, #424]	; (80022c0 <CRCAPP_Event_Handler+0x6a4>)
 8002118:	f003 feae 	bl	8005e78 <puts>
                  waitForComplete = 1;
 800211c:	4b65      	ldr	r3, [pc, #404]	; (80022b4 <CRCAPP_Event_Handler+0x698>)
                  APP_DBG_MSG("*************************************************************************************************************************\n");
 800211e:	485e      	ldr	r0, [pc, #376]	; (8002298 <CRCAPP_Event_Handler+0x67c>)
                  waitForComplete = 1;
 8002120:	2201      	movs	r2, #1
 8002122:	701a      	strb	r2, [r3, #0]
                  APP_DBG_MSG("*************************************************************************************************************************\n");
 8002124:	f003 fea8 	bl	8005e78 <puts>
                               pr->Attribute_Value[0] + (pr->Attribute_Value[1] << 8));
 8002128:	7a62      	ldrb	r2, [r4, #9]
 800212a:	7a23      	ldrb	r3, [r4, #8]
                  APP_DBG_MSG("CRC RX CCC 0x%x: 0x%04x\n", 
 800212c:	89a9      	ldrh	r1, [r5, #12]
 800212e:	4867      	ldr	r0, [pc, #412]	; (80022cc <CRCAPP_Event_Handler+0x6b0>)
 8002130:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 8002134:	f003 fe18 	bl	8005d68 <iprintf>
 8002138:	e7d8      	b.n	80020ec <CRCAPP_Event_Handler+0x4d0>
                    (CRC_Context[index].connHandle != pr->Connection_Handle))
 800213a:	4e5c      	ldr	r6, [pc, #368]	; (80022ac <CRCAPP_Event_Handler+0x690>)
              while((index < CFG_MAX_CONNECTION) &&
 800213c:	f8b4 1005 	ldrh.w	r1, [r4, #5]
                    (CRC_Context[index].connHandle != pr->Connection_Handle))
 8002140:	8873      	ldrh	r3, [r6, #2]
              while((index < CFG_MAX_CONNECTION) &&
 8002142:	4299      	cmp	r1, r3
 8002144:	f040 8122 	bne.w	800238c <CRCAPP_Event_Handler+0x770>
                if((pr->Attribute_Handle >= CRC_Context[index].ServiceHandle) &&
 8002148:	f8b4 3007 	ldrh.w	r3, [r4, #7]
 800214c:	88b2      	ldrh	r2, [r6, #4]
 800214e:	429a      	cmp	r2, r3
 8002150:	f63f adc1 	bhi.w	8001cd6 <CRCAPP_Event_Handler+0xba>
 8002154:	88f2      	ldrh	r2, [r6, #6]
 8002156:	429a      	cmp	r2, r3
 8002158:	f4ff adbd 	bcc.w	8001cd6 <CRCAPP_Event_Handler+0xba>
                  APP_DBG_MSG("EVT_BLUE_GATT_NOTIFICATION on connection handle 0x%x\n",
 800215c:	485c      	ldr	r0, [pc, #368]	; (80022d0 <CRCAPP_Event_Handler+0x6b4>)
                  waitForComplete = 1;
 800215e:	4d55      	ldr	r5, [pc, #340]	; (80022b4 <CRCAPP_Event_Handler+0x698>)
                  APP_DBG_MSG("EVT_BLUE_GATT_NOTIFICATION on connection handle 0x%x\n",
 8002160:	f003 fe02 	bl	8005d68 <iprintf>
                  waitForComplete = 1;
 8002164:	2301      	movs	r3, #1
 8002166:	702b      	strb	r3, [r5, #0]
                  if(pr->Attribute_Handle == CRC_Context[index].RXCharHdle)
 8002168:	f8b4 2007 	ldrh.w	r2, [r4, #7]
 800216c:	8973      	ldrh	r3, [r6, #10]
 800216e:	429a      	cmp	r2, r3
 8002170:	f47f adb1 	bne.w	8001cd6 <CRCAPP_Event_Handler+0xba>
                    APP_DBG_MSG("pr->Attribute_Value_Length %d\n", pr->Attribute_Value_Length);
 8002174:	7a61      	ldrb	r1, [r4, #9]
 8002176:	4857      	ldr	r0, [pc, #348]	; (80022d4 <CRCAPP_Event_Handler+0x6b8>)
 8002178:	f003 fdf6 	bl	8005d68 <iprintf>
                    for(i = 0; i < pr->Attribute_Value_Length; i++)
 800217c:	7a63      	ldrb	r3, [r4, #9]
 800217e:	f104 010a 	add.w	r1, r4, #10
 8002182:	2200      	movs	r2, #0
 8002184:	ae14      	add	r6, sp, #80	; 0x50
 8002186:	b2d0      	uxtb	r0, r2
 8002188:	4283      	cmp	r3, r0
 800218a:	d830      	bhi.n	80021ee <CRCAPP_Event_Handler+0x5d2>
                    text[pr->Attribute_Value_Length] = '\0';
 800218c:	aa1a      	add	r2, sp, #104	; 0x68
 800218e:	4413      	add	r3, r2
                    APP_DBG_MSG("*************************************************************************************************************************\n");
 8002190:	4841      	ldr	r0, [pc, #260]	; (8002298 <CRCAPP_Event_Handler+0x67c>)
                    text[pr->Attribute_Value_Length] = '\0';
 8002192:	2200      	movs	r2, #0
 8002194:	f803 2c18 	strb.w	r2, [r3, #-24]
                    APP_DBG_MSG("*************************************************************************************************************************\n");
 8002198:	f003 fe6e 	bl	8005e78 <puts>
                    APP_DBG_MSG("%s\n", &(text[0]));
 800219c:	4630      	mov	r0, r6
 800219e:	f003 fe6b 	bl	8005e78 <puts>
                    APP_DBG_MSG("*************************************************************************************************************************\n");
 80021a2:	483d      	ldr	r0, [pc, #244]	; (8002298 <CRCAPP_Event_Handler+0x67c>)
 80021a4:	f003 fe68 	bl	8005e78 <puts>
                    if((PosXRx >= XSIZE) || (pr->Attribute_Value_Length < MAX_STRING_SIZE))
 80021a8:	7dab      	ldrb	r3, [r5, #22]
 80021aa:	2b09      	cmp	r3, #9
 80021ac:	d802      	bhi.n	80021b4 <CRCAPP_Event_Handler+0x598>
 80021ae:	7a63      	ldrb	r3, [r4, #9]
 80021b0:	2b13      	cmp	r3, #19
 80021b2:	d80c      	bhi.n	80021ce <CRCAPP_Event_Handler+0x5b2>
                      PosXRx = POSXRX;
 80021b4:	230a      	movs	r3, #10
 80021b6:	75ab      	strb	r3, [r5, #22]
                      PosYRx++;
 80021b8:	7deb      	ldrb	r3, [r5, #23]
 80021ba:	3301      	adds	r3, #1
 80021bc:	b2db      	uxtb	r3, r3
                      if(PosYRx > POSYRX + YSIZE + 2)
 80021be:	2b16      	cmp	r3, #22
                        PosYRx = POSYRX + 2;
 80021c0:	bf88      	it	hi
 80021c2:	230c      	movhi	r3, #12
 80021c4:	75eb      	strb	r3, [r5, #23]
                      ClearLines(PosYRx, 1);
 80021c6:	2101      	movs	r1, #1
 80021c8:	7de8      	ldrb	r0, [r5, #23]
 80021ca:	f002 fedd 	bl	8004f88 <ClearLines>
                    PrintPcCrt(PosXRx, PosYRx, "%s", &(text[0]));
 80021ce:	4633      	mov	r3, r6
 80021d0:	7de9      	ldrb	r1, [r5, #23]
 80021d2:	7da8      	ldrb	r0, [r5, #22]
 80021d4:	4a40      	ldr	r2, [pc, #256]	; (80022d8 <CRCAPP_Event_Handler+0x6bc>)
 80021d6:	f002 fef9 	bl	8004fcc <PrintPcCrt>
                    PosXRx += pr->Attribute_Value_Length;
 80021da:	7daa      	ldrb	r2, [r5, #22]
 80021dc:	7a63      	ldrb	r3, [r4, #9]
                    PrintPcCrt(PosXTx, PosYTx, "");
 80021de:	7e29      	ldrb	r1, [r5, #24]
 80021e0:	7e68      	ldrb	r0, [r5, #25]
                    PosXRx += pr->Attribute_Value_Length;
 80021e2:	4413      	add	r3, r2
                    PrintPcCrt(PosXTx, PosYTx, "");
 80021e4:	4a3d      	ldr	r2, [pc, #244]	; (80022dc <CRCAPP_Event_Handler+0x6c0>)
                    PosXRx += pr->Attribute_Value_Length;
 80021e6:	75ab      	strb	r3, [r5, #22]
                    PrintPcCrt(PosXTx, PosYTx, "");
 80021e8:	f002 fef0 	bl	8004fcc <PrintPcCrt>
 80021ec:	e573      	b.n	8001cd6 <CRCAPP_Event_Handler+0xba>
                      text[i] = pr->Attribute_Value[i];
 80021ee:	f811 0b01 	ldrb.w	r0, [r1], #1
 80021f2:	54b0      	strb	r0, [r6, r2]
 80021f4:	3201      	adds	r2, #1
 80021f6:	e7c6      	b.n	8002186 <CRCAPP_Event_Handler+0x56a>
              if(waitForComplete != 0)
 80021f8:	4d2e      	ldr	r5, [pc, #184]	; (80022b4 <CRCAPP_Event_Handler+0x698>)
 80021fa:	782b      	ldrb	r3, [r5, #0]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	f43f ad6a 	beq.w	8001cd6 <CRCAPP_Event_Handler+0xba>
                      (CRC_Context[index].connHandle != pr->Connection_Handle))
 8002202:	4b2a      	ldr	r3, [pc, #168]	; (80022ac <CRCAPP_Event_Handler+0x690>)
                while((index < CFG_MAX_CONNECTION) &&
 8002204:	f8b4 2005 	ldrh.w	r2, [r4, #5]
 8002208:	8859      	ldrh	r1, [r3, #2]
 800220a:	4291      	cmp	r1, r2
 800220c:	461c      	mov	r4, r3
 800220e:	f040 80bf 	bne.w	8002390 <CRCAPP_Event_Handler+0x774>
                  waitForComplete = 0;
 8002212:	2300      	movs	r3, #0
                  APP_DBG_MSG("EVT_BLUE_GATT_PROCEDURE_COMPLETE\n");
 8002214:	4832      	ldr	r0, [pc, #200]	; (80022e0 <CRCAPP_Event_Handler+0x6c4>)
                  waitForComplete = 0;
 8002216:	702b      	strb	r3, [r5, #0]
                  APP_DBG_MSG("EVT_BLUE_GATT_PROCEDURE_COMPLETE\n");
 8002218:	f003 fe2e 	bl	8005e78 <puts>
                  switch(CRC_Context[index].state)
 800221c:	7823      	ldrb	r3, [r4, #0]
 800221e:	3b02      	subs	r3, #2
 8002220:	2b09      	cmp	r3, #9
 8002222:	f63f ad58 	bhi.w	8001cd6 <CRCAPP_Event_Handler+0xba>
 8002226:	a201      	add	r2, pc, #4	; (adr r2, 800222c <CRCAPP_Event_Handler+0x610>)
 8002228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800222c:	08002255 	.word	0x08002255
 8002230:	08001cd7 	.word	0x08001cd7
 8002234:	08002269 	.word	0x08002269
 8002238:	08002271 	.word	0x08002271
 800223c:	08002279 	.word	0x08002279
 8002240:	08002281 	.word	0x08002281
 8002244:	08002289 	.word	0x08002289
 8002248:	08002291 	.word	0x08002291
 800224c:	08002309 	.word	0x08002309
 8002250:	08002333 	.word	0x08002333
                        CRC_Context[index].state = CRC_DISCOVER_CHARACS;
 8002254:	2304      	movs	r3, #4
                        APP_DBG_MSG("CRC_IDLE -> CRC_DISCOVER_CHARACS\n");
 8002256:	4823      	ldr	r0, [pc, #140]	; (80022e4 <CRCAPP_Event_Handler+0x6c8>)
                        CRC_Context[index].state = CRC_DISCOVER_CHARACS;
 8002258:	7023      	strb	r3, [r4, #0]
                        APP_DBG_MSG("CRC_DISCOVER_CHARACS -> CRC_DISCOVER_DESC\n");
 800225a:	f003 fe0d 	bl	8005e78 <puts>
                        UTIL_SEQ_SetTask( 1<<CFG_TASK_CRC_DISCOVERY_REQ_ID, CFG_SCH_PRIO_0);
 800225e:	2100      	movs	r1, #0
 8002260:	2002      	movs	r0, #2
 8002262:	f003 fc85 	bl	8005b70 <UTIL_SEQ_SetTask>
 8002266:	e536      	b.n	8001cd6 <CRCAPP_Event_Handler+0xba>
                        CRC_Context[index].state = CRC_DISCOVER_DESC;
 8002268:	2305      	movs	r3, #5
 800226a:	7023      	strb	r3, [r4, #0]
                        APP_DBG_MSG("CRC_DISCOVER_CHARACS -> CRC_DISCOVER_DESC\n");
 800226c:	481e      	ldr	r0, [pc, #120]	; (80022e8 <CRCAPP_Event_Handler+0x6cc>)
 800226e:	e7f4      	b.n	800225a <CRCAPP_Event_Handler+0x63e>
                        CRC_Context[index].state = CRC_ENABLE_RX_NOTIFICATION;
 8002270:	230a      	movs	r3, #10
 8002272:	7023      	strb	r3, [r4, #0]
                        APP_DBG_MSG("CRC_DISCOVER_DESC -> CRC_ENABLE_RX_NOTIFICATION\n");
 8002274:	481d      	ldr	r0, [pc, #116]	; (80022ec <CRCAPP_Event_Handler+0x6d0>)
 8002276:	e7f0      	b.n	800225a <CRCAPP_Event_Handler+0x63e>
                        CRC_Context[index].state = CRC_CONNECTED;
 8002278:	230c      	movs	r3, #12
 800227a:	7023      	strb	r3, [r4, #0]
                        APP_DBG_MSG("CRC_READ_TX -> CRC_CONNECTED\n");
 800227c:	481c      	ldr	r0, [pc, #112]	; (80022f0 <CRCAPP_Event_Handler+0x6d4>)
 800227e:	e7ec      	b.n	800225a <CRCAPP_Event_Handler+0x63e>
                        CRC_Context[index].state = CRC_CONNECTED;
 8002280:	230c      	movs	r3, #12
 8002282:	7023      	strb	r3, [r4, #0]
                        APP_DBG_MSG("CRC_READ_RX -> CRC_CONNECTED\n");
 8002284:	481b      	ldr	r0, [pc, #108]	; (80022f4 <CRCAPP_Event_Handler+0x6d8>)
 8002286:	e7e8      	b.n	800225a <CRCAPP_Event_Handler+0x63e>
                        CRC_Context[index].state = CRC_CONNECTED;
 8002288:	230c      	movs	r3, #12
 800228a:	7023      	strb	r3, [r4, #0]
                        APP_DBG_MSG("CRC_READ_RX_CCC -> CRC_CONNECTED\n");
 800228c:	481a      	ldr	r0, [pc, #104]	; (80022f8 <CRCAPP_Event_Handler+0x6dc>)
 800228e:	e7e4      	b.n	800225a <CRCAPP_Event_Handler+0x63e>
                        CRC_Context[index].state = CRC_CONNECTED;
 8002290:	230c      	movs	r3, #12
 8002292:	7023      	strb	r3, [r4, #0]
                        APP_DBG_MSG("CRC_WRITE_TX -> CRC_CONNECTED\n");
 8002294:	4819      	ldr	r0, [pc, #100]	; (80022fc <CRCAPP_Event_Handler+0x6e0>)
 8002296:	e7e0      	b.n	800225a <CRCAPP_Event_Handler+0x63e>
 8002298:	08007dc7 	.word	0x08007dc7
 800229c:	0800806b 	.word	0x0800806b
 80022a0:	08008083 	.word	0x08008083
 80022a4:	0800809b 	.word	0x0800809b
 80022a8:	080080b3 	.word	0x080080b3
 80022ac:	200001c8 	.word	0x200001c8
 80022b0:	08008109 	.word	0x08008109
 80022b4:	20000458 	.word	0x20000458
 80022b8:	0800812c 	.word	0x0800812c
 80022bc:	0800819f 	.word	0x0800819f
 80022c0:	080081da 	.word	0x080081da
 80022c4:	080081f1 	.word	0x080081f1
 80022c8:	080081ff 	.word	0x080081ff
 80022cc:	0800820d 	.word	0x0800820d
 80022d0:	08008226 	.word	0x08008226
 80022d4:	0800825c 	.word	0x0800825c
 80022d8:	080087b6 	.word	0x080087b6
 80022dc:	08008745 	.word	0x08008745
 80022e0:	080085a7 	.word	0x080085a7
 80022e4:	0800827b 	.word	0x0800827b
 80022e8:	0800829c 	.word	0x0800829c
 80022ec:	080082c6 	.word	0x080082c6
 80022f0:	080082f6 	.word	0x080082f6
 80022f4:	08008313 	.word	0x08008313
 80022f8:	08008330 	.word	0x08008330
 80022fc:	08007b2a 	.word	0x08007b2a
 8002300:	0800814b 	.word	0x0800814b
 8002304:	08008164 	.word	0x08008164
                        ClearScreen();
 8002308:	f002 fe54 	bl	8004fb4 <ClearScreen>
                        PrintPcCrt(POSXRX, POSXRX, "Receive:");
 800230c:	210a      	movs	r1, #10
 800230e:	4608      	mov	r0, r1
 8002310:	4a21      	ldr	r2, [pc, #132]	; (8002398 <CRCAPP_Event_Handler+0x77c>)
 8002312:	f002 fe5b 	bl	8004fcc <PrintPcCrt>
                        PrintPcCrt(POSXTX, POSYTX, "Transmit:");
 8002316:	4a21      	ldr	r2, [pc, #132]	; (800239c <CRCAPP_Event_Handler+0x780>)
 8002318:	211e      	movs	r1, #30
 800231a:	200a      	movs	r0, #10
 800231c:	f002 fe56 	bl	8004fcc <PrintPcCrt>
                        PrintPcCrt(PosXTx, PosYTx, "");
 8002320:	7e68      	ldrb	r0, [r5, #25]
 8002322:	4a1f      	ldr	r2, [pc, #124]	; (80023a0 <CRCAPP_Event_Handler+0x784>)
 8002324:	7e29      	ldrb	r1, [r5, #24]
 8002326:	f002 fe51 	bl	8004fcc <PrintPcCrt>
                        CRC_Context[index].state = CRC_CONNECTED;
 800232a:	230c      	movs	r3, #12
 800232c:	7023      	strb	r3, [r4, #0]
                        APP_DBG_MSG("CRC_ENABLE_RX_NOTIFICATION -> CRC_CONNECTED\n");
 800232e:	481d      	ldr	r0, [pc, #116]	; (80023a4 <CRCAPP_Event_Handler+0x788>)
 8002330:	e793      	b.n	800225a <CRCAPP_Event_Handler+0x63e>
                        CRC_Context[index].state = CRC_CONNECTED;
 8002332:	230c      	movs	r3, #12
 8002334:	7023      	strb	r3, [r4, #0]
                        APP_DBG_MSG("CRC_DISABLE_RX_NOTIFICATION -> CRC_CONNECTED\n");
 8002336:	481c      	ldr	r0, [pc, #112]	; (80023a8 <CRCAPP_Event_Handler+0x78c>)
 8002338:	e78f      	b.n	800225a <CRCAPP_Event_Handler+0x63e>
                    (CRC_Context[index].connHandle != pr->Connection_Handle))
 800233a:	4b1c      	ldr	r3, [pc, #112]	; (80023ac <CRCAPP_Event_Handler+0x790>)
              while((index < CFG_MAX_CONNECTION) &&
 800233c:	f8b4 2005 	ldrh.w	r2, [r4, #5]
 8002340:	8859      	ldrh	r1, [r3, #2]
 8002342:	4291      	cmp	r1, r2
 8002344:	d126      	bne.n	8002394 <CRCAPP_Event_Handler+0x778>
                if((CRC_Context[index].state == CRC_DISCOVER_CHARACS) &&
 8002346:	781a      	ldrb	r2, [r3, #0]
 8002348:	2a04      	cmp	r2, #4
 800234a:	d002      	beq.n	8002352 <CRCAPP_Event_Handler+0x736>
                else if((CRC_Context[index].state == CRC_IDLE) &&
 800234c:	2a02      	cmp	r2, #2
 800234e:	f47f acc2 	bne.w	8001cd6 <CRCAPP_Event_Handler+0xba>
                   (waitForComplete == 0) &&
 8002352:	4a17      	ldr	r2, [pc, #92]	; (80023b0 <CRCAPP_Event_Handler+0x794>)
                if((CRC_Context[index].state == CRC_DISCOVER_CHARACS) &&
 8002354:	7812      	ldrb	r2, [r2, #0]
 8002356:	2a00      	cmp	r2, #0
 8002358:	f47f acbd 	bne.w	8001cd6 <CRCAPP_Event_Handler+0xba>
                   (pr->Attribute_Handle >= CRC_Context[index].ServiceHandle) &&
 800235c:	8922      	ldrh	r2, [r4, #8]
                   (waitForComplete == 0) &&
 800235e:	8899      	ldrh	r1, [r3, #4]
 8002360:	4291      	cmp	r1, r2
 8002362:	f63f acb8 	bhi.w	8001cd6 <CRCAPP_Event_Handler+0xba>
                   (pr->Attribute_Handle >= CRC_Context[index].ServiceHandle) &&
 8002366:	88db      	ldrh	r3, [r3, #6]
 8002368:	4293      	cmp	r3, r2
 800236a:	f4ff acb4 	bcc.w	8001cd6 <CRCAPP_Event_Handler+0xba>
                  APP_DBG_MSG("EVT_BLUE_GATT_ERROR_RESP\n");
 800236e:	4811      	ldr	r0, [pc, #68]	; (80023b4 <CRCAPP_Event_Handler+0x798>)
 8002370:	f003 fd82 	bl	8005e78 <puts>
                  waitForComplete = 1;
 8002374:	4b0e      	ldr	r3, [pc, #56]	; (80023b0 <CRCAPP_Event_Handler+0x794>)
 8002376:	2201      	movs	r2, #1
 8002378:	701a      	strb	r2, [r3, #0]
 800237a:	e4ac      	b.n	8001cd6 <CRCAPP_Event_Handler+0xba>
                APP_DBG_MSG("EVT_BLUE_ATT_READ_BY_GROUP_TYPE_RESP, failed no free index in connection table !\n");
 800237c:	480e      	ldr	r0, [pc, #56]	; (80023b8 <CRCAPP_Event_Handler+0x79c>)
 800237e:	e6b6      	b.n	80020ee <CRCAPP_Event_Handler+0x4d2>
                APP_DBG_MSG("EVT_BLUE_ATT_READ_BY_TYPE_RESP, failed handle not found in connection table !\n");
 8002380:	480e      	ldr	r0, [pc, #56]	; (80023bc <CRCAPP_Event_Handler+0x7a0>)
 8002382:	e6b4      	b.n	80020ee <CRCAPP_Event_Handler+0x4d2>
                APP_DBG_MSG("EVT_BLUE_ATT_FIND_INFORMATION_RESP, failed handle not found in connection table !\n");
 8002384:	480e      	ldr	r0, [pc, #56]	; (80023c0 <CRCAPP_Event_Handler+0x7a4>)
 8002386:	e6b2      	b.n	80020ee <CRCAPP_Event_Handler+0x4d2>
                APP_DBG_MSG("EVT_BLUE_ATT_READ_RESP, failed handle not found in connection table !\n");
 8002388:	480e      	ldr	r0, [pc, #56]	; (80023c4 <CRCAPP_Event_Handler+0x7a8>)
 800238a:	e6b0      	b.n	80020ee <CRCAPP_Event_Handler+0x4d2>
                APP_DBG_MSG("EVT_BLUE_GATT_NOTIFICATION, failed handle not found in connection table !\n");
 800238c:	480e      	ldr	r0, [pc, #56]	; (80023c8 <CRCAPP_Event_Handler+0x7ac>)
 800238e:	e6ae      	b.n	80020ee <CRCAPP_Event_Handler+0x4d2>
                  APP_DBG_MSG("EVT_BLUE_GATT_PROCEDURE_COMPLETE failed, not found handle in connection table !\n");
 8002390:	480e      	ldr	r0, [pc, #56]	; (80023cc <CRCAPP_Event_Handler+0x7b0>)
 8002392:	e6ac      	b.n	80020ee <CRCAPP_Event_Handler+0x4d2>
                APP_DBG_MSG("EVT_BLUE_GATT_ERROR_RESP, not found handle in connection table !\n");
 8002394:	480e      	ldr	r0, [pc, #56]	; (80023d0 <CRCAPP_Event_Handler+0x7b4>)
 8002396:	e6aa      	b.n	80020ee <CRCAPP_Event_Handler+0x4d2>
 8002398:	08008351 	.word	0x08008351
 800239c:	0800835a 	.word	0x0800835a
 80023a0:	08008745 	.word	0x08008745
 80023a4:	08008364 	.word	0x08008364
 80023a8:	08008390 	.word	0x08008390
 80023ac:	200001c8 	.word	0x200001c8
 80023b0:	20000458 	.word	0x20000458
 80023b4:	080083bd 	.word	0x080083bd
 80023b8:	080083d6 	.word	0x080083d6
 80023bc:	08008427 	.word	0x08008427
 80023c0:	08008475 	.word	0x08008475
 80023c4:	080084c7 	.word	0x080084c7
 80023c8:	0800850d 	.word	0x0800850d
 80023cc:	08008557 	.word	0x08008557
 80023d0:	080085c8 	.word	0x080085c8

080023d4 <CRCAPP_Write_Char.constprop.1>:
static void CRCAPP_Write_Char(uint8_t index)
 80023d4:	b510      	push	{r4, lr}
        (CRC_Context[con_index].state != CRC_IDLE))
 80023d6:	4c0a      	ldr	r4, [pc, #40]	; (8002400 <CRCAPP_Write_Char.constprop.1+0x2c>)
  while((con_index < CFG_MAX_CONNECTION) &&
 80023d8:	7823      	ldrb	r3, [r4, #0]
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d00f      	beq.n	80023fe <CRCAPP_Write_Char.constprop.1+0x2a>
          APP_DBG_MSG("WRITE_TX\n");
 80023de:	4809      	ldr	r0, [pc, #36]	; (8002404 <CRCAPP_Write_Char.constprop.1+0x30>)
 80023e0:	f003 fd4a 	bl	8005e78 <puts>
          if(CRC_Context[con_index].TXCharHdle > 0)
 80023e4:	8923      	ldrh	r3, [r4, #8]
 80023e6:	b153      	cbz	r3, 80023fe <CRCAPP_Write_Char.constprop.1+0x2a>
            CRC_Context[con_index].state = CRC_WRITE_TX;
 80023e8:	2309      	movs	r3, #9
            APP_DBG_MSG("CRC_CONNECTED -> CRC_WRITE_TX\n");
 80023ea:	4807      	ldr	r0, [pc, #28]	; (8002408 <CRCAPP_Write_Char.constprop.1+0x34>)
            CRC_Context[con_index].state = CRC_WRITE_TX;
 80023ec:	7023      	strb	r3, [r4, #0]
            APP_DBG_MSG("CRC_CONNECTED -> CRC_WRITE_TX\n");
 80023ee:	f003 fd43 	bl	8005e78 <puts>
            UTIL_SEQ_SetTask( 1<<CFG_TASK_CRC_DISCOVERY_REQ_ID, CFG_SCH_PRIO_0);
 80023f2:	2100      	movs	r1, #0
 80023f4:	2002      	movs	r0, #2
}/* end CRCAPP_Write_Char() */
 80023f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            UTIL_SEQ_SetTask( 1<<CFG_TASK_CRC_DISCOVERY_REQ_ID, CFG_SCH_PRIO_0);
 80023fa:	f003 bbb9 	b.w	8005b70 <UTIL_SEQ_SetTask>
}/* end CRCAPP_Write_Char() */
 80023fe:	bd10      	pop	{r4, pc}
 8002400:	200001c8 	.word	0x200001c8
 8002404:	0800861e 	.word	0x0800861e
 8002408:	08008609 	.word	0x08008609

0800240c <CRCAPP_Terminal_UART_RxCpltCallback>:
{
 800240c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(InputCharFromUart == BKSP)
 800240e:	4d32      	ldr	r5, [pc, #200]	; (80024d8 <CRCAPP_Terminal_UART_RxCpltCallback+0xcc>)
 8002410:	7eab      	ldrb	r3, [r5, #26]
 8002412:	2b08      	cmp	r3, #8
 8002414:	462c      	mov	r4, r5
 8002416:	d118      	bne.n	800244a <CRCAPP_Terminal_UART_RxCpltCallback+0x3e>
    if(idx > 0)
 8002418:	7eeb      	ldrb	r3, [r5, #27]
 800241a:	b173      	cbz	r3, 800243a <CRCAPP_Terminal_UART_RxCpltCallback+0x2e>
      PosXTx--;
 800241c:	7e68      	ldrb	r0, [r5, #25]
      PrintPcCrt(PosXTx, PosYTx, " ");
 800241e:	4a2f      	ldr	r2, [pc, #188]	; (80024dc <CRCAPP_Terminal_UART_RxCpltCallback+0xd0>)
 8002420:	7e29      	ldrb	r1, [r5, #24]
      PosXTx--;
 8002422:	3801      	subs	r0, #1
 8002424:	b2c0      	uxtb	r0, r0
      idx--;
 8002426:	3b01      	subs	r3, #1
      PosXTx--;
 8002428:	7668      	strb	r0, [r5, #25]
      idx--;
 800242a:	76eb      	strb	r3, [r5, #27]
      PrintPcCrt(PosXTx, PosYTx, " ");
 800242c:	f002 fdce 	bl	8004fcc <PrintPcCrt>
      PrintPcCrt(PosXTx, PosYTx, "");
 8002430:	4a2b      	ldr	r2, [pc, #172]	; (80024e0 <CRCAPP_Terminal_UART_RxCpltCallback+0xd4>)
 8002432:	7e29      	ldrb	r1, [r5, #24]
 8002434:	7e68      	ldrb	r0, [r5, #25]
 8002436:	f002 fdc9 	bl	8004fcc <PrintPcCrt>
  HW_UART_Receive_IT(CFG_CONSOLE_MENU, &InputCharFromUart, 1, CRCAPP_Terminal_UART_RxCpltCallback);
 800243a:	4b2a      	ldr	r3, [pc, #168]	; (80024e4 <CRCAPP_Terminal_UART_RxCpltCallback+0xd8>)
 800243c:	492a      	ldr	r1, [pc, #168]	; (80024e8 <CRCAPP_Terminal_UART_RxCpltCallback+0xdc>)
 800243e:	2201      	movs	r2, #1
 8002440:	2000      	movs	r0, #0
 8002442:	f7fe fc37 	bl	8000cb4 <HW_UART_Receive_IT>
 }
 8002446:	b003      	add	sp, #12
 8002448:	bd30      	pop	{r4, r5, pc}
  else if(InputCharFromUart == CR)
 800244a:	2b0d      	cmp	r3, #13
 800244c:	7e29      	ldrb	r1, [r5, #24]
 800244e:	d11b      	bne.n	8002488 <CRCAPP_Terminal_UART_RxCpltCallback+0x7c>
    PosXTx = POSXTX;
 8002450:	230a      	movs	r3, #10
 8002452:	766b      	strb	r3, [r5, #25]
    szString[idx] = '\0';
 8002454:	7eeb      	ldrb	r3, [r5, #27]
    PosYTx++;
 8002456:	3101      	adds	r1, #1
 8002458:	b2c9      	uxtb	r1, r1
    szString[idx] = '\0';
 800245a:	442b      	add	r3, r5
    if(PosYTx > POSYTX + YSIZE + 2)
 800245c:	292a      	cmp	r1, #42	; 0x2a
    szString[idx] = '\0';
 800245e:	f04f 0200 	mov.w	r2, #0
 8002462:	705a      	strb	r2, [r3, #1]
      PosYTx = POSYTX + 2;
 8002464:	bf88      	it	hi
 8002466:	2320      	movhi	r3, #32
    PosYTx++;
 8002468:	7629      	strb	r1, [r5, #24]
      PosYTx = POSYTX + 2;
 800246a:	bf88      	it	hi
 800246c:	762b      	strbhi	r3, [r5, #24]
    ClearLines(PosYTx, 1);
 800246e:	7e28      	ldrb	r0, [r5, #24]
    idx = 0;
 8002470:	76ea      	strb	r2, [r5, #27]
    ClearLines(PosYTx, 1);
 8002472:	2101      	movs	r1, #1
    ClearLines(PosYTx, 1);
 8002474:	f002 fd88 	bl	8004f88 <ClearLines>
    PrintPcCrt(PosXTx, PosYTx, "");
 8002478:	4a19      	ldr	r2, [pc, #100]	; (80024e0 <CRCAPP_Terminal_UART_RxCpltCallback+0xd4>)
 800247a:	7e21      	ldrb	r1, [r4, #24]
 800247c:	7e60      	ldrb	r0, [r4, #25]
 800247e:	f002 fda5 	bl	8004fcc <PrintPcCrt>
    CRCAPP_Write_Char(WRITE_TX);
 8002482:	f7ff ffa7 	bl	80023d4 <CRCAPP_Write_Char.constprop.1>
 8002486:	e7d8      	b.n	800243a <CRCAPP_Terminal_UART_RxCpltCallback+0x2e>
    PrintPcCrt(PosXTx++, PosYTx, "%s", &car[0]);
 8002488:	7e60      	ldrb	r0, [r4, #25]
    car[0] = InputCharFromUart;
 800248a:	f88d 3004 	strb.w	r3, [sp, #4]
    PrintPcCrt(PosXTx++, PosYTx, "%s", &car[0]);
 800248e:	1c43      	adds	r3, r0, #1
 8002490:	7663      	strb	r3, [r4, #25]
 8002492:	4a16      	ldr	r2, [pc, #88]	; (80024ec <CRCAPP_Terminal_UART_RxCpltCallback+0xe0>)
 8002494:	ab01      	add	r3, sp, #4
    car[1] = 0;
 8002496:	2500      	movs	r5, #0
 8002498:	f88d 5005 	strb.w	r5, [sp, #5]
    PrintPcCrt(PosXTx++, PosYTx, "%s", &car[0]);
 800249c:	f002 fd96 	bl	8004fcc <PrintPcCrt>
    szString[idx++] = InputCharFromUart;
 80024a0:	7ee2      	ldrb	r2, [r4, #27]
 80024a2:	7ea1      	ldrb	r1, [r4, #26]
 80024a4:	1c53      	adds	r3, r2, #1
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	4422      	add	r2, r4
    if(idx > MAX_STRING_SIZE - 1)
 80024aa:	2b13      	cmp	r3, #19
    szString[idx++] = InputCharFromUart;
 80024ac:	76e3      	strb	r3, [r4, #27]
 80024ae:	7051      	strb	r1, [r2, #1]
    if(idx > MAX_STRING_SIZE - 1)
 80024b0:	d9c3      	bls.n	800243a <CRCAPP_Terminal_UART_RxCpltCallback+0x2e>
    szString[idx] = '\0'; 
 80024b2:	4423      	add	r3, r4
    idx = 0;
 80024b4:	76e5      	strb	r5, [r4, #27]
    szString[idx] = '\0'; 
 80024b6:	705d      	strb	r5, [r3, #1]
      if(PosXTx > XSIZE)
 80024b8:	7e63      	ldrb	r3, [r4, #25]
 80024ba:	2b0a      	cmp	r3, #10
 80024bc:	d904      	bls.n	80024c8 <CRCAPP_Terminal_UART_RxCpltCallback+0xbc>
        PosYTx++;
 80024be:	7e23      	ldrb	r3, [r4, #24]
 80024c0:	3301      	adds	r3, #1
 80024c2:	7623      	strb	r3, [r4, #24]
        PosXTx = POSXTX;
 80024c4:	230a      	movs	r3, #10
 80024c6:	7663      	strb	r3, [r4, #25]
      if(PosYTx > POSYTX + YSIZE + 2)
 80024c8:	7e23      	ldrb	r3, [r4, #24]
 80024ca:	2b2a      	cmp	r3, #42	; 0x2a
 80024cc:	d9d9      	bls.n	8002482 <CRCAPP_Terminal_UART_RxCpltCallback+0x76>
      PosYTx = POSYTX + 2;
 80024ce:	2020      	movs	r0, #32
 80024d0:	7620      	strb	r0, [r4, #24]
    ClearLines(PosYTx, 1);
 80024d2:	2101      	movs	r1, #1
 80024d4:	e7ce      	b.n	8002474 <CRCAPP_Terminal_UART_RxCpltCallback+0x68>
 80024d6:	bf00      	nop
 80024d8:	20000458 	.word	0x20000458
 80024dc:	080088ee 	.word	0x080088ee
 80024e0:	08008745 	.word	0x08008745
 80024e4:	0800240d 	.word	0x0800240d
 80024e8:	20000472 	.word	0x20000472
 80024ec:	080087b6 	.word	0x080087b6

080024f0 <CRCAPP_Init>:
{
 80024f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  PosXRx = POSXRX;
 80024f2:	4c18      	ldr	r4, [pc, #96]	; (8002554 <CRCAPP_Init+0x64>)
  UTIL_SEQ_RegTask( 1<< CFG_TASK_CRC_DISCOVERY_REQ_ID, UTIL_SEQ_RFU, CRCAPP_Update_Service );
 80024f4:	4a18      	ldr	r2, [pc, #96]	; (8002558 <CRCAPP_Init+0x68>)
 80024f6:	2100      	movs	r1, #0
 80024f8:	2002      	movs	r0, #2
 80024fa:	f003 fb29 	bl	8005b50 <UTIL_SEQ_RegTask>
  PosXRx = POSXRX;
 80024fe:	230a      	movs	r3, #10
  CircularQueue_Init(&RxQueue, RxQueueBuffer, RX_BUFFER_SIZE, 1, CIRCULAR_QUEUE_NO_WRAP_FLAG); 
 8002500:	2501      	movs	r5, #1
  PosXRx = POSXRX;
 8002502:	75a3      	strb	r3, [r4, #22]
  PosYRx = POSYRX + 2;
 8002504:	220c      	movs	r2, #12
  PosXTx = POSXTX;
 8002506:	7663      	strb	r3, [r4, #25]
  HW_UART_Init(CFG_CONSOLE_MENU);
 8002508:	2000      	movs	r0, #0
  PosYTx = POSYTX + 2;
 800250a:	2320      	movs	r3, #32
  PosYRx = POSYRX + 2;
 800250c:	75e2      	strb	r2, [r4, #23]
  PosYTx = POSYTX + 2;
 800250e:	7623      	strb	r3, [r4, #24]
  HW_UART_Init(CFG_CONSOLE_MENU);
 8002510:	f7fe fb9a 	bl	8000c48 <HW_UART_Init>
  CircularQueue_Init(&RxQueue, RxQueueBuffer, RX_BUFFER_SIZE, 1, CIRCULAR_QUEUE_NO_WRAP_FLAG); 
 8002514:	462b      	mov	r3, r5
 8002516:	f104 011c 	add.w	r1, r4, #28
 800251a:	9500      	str	r5, [sp, #0]
 800251c:	2240      	movs	r2, #64	; 0x40
 800251e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002522:	f003 f91d 	bl	8005760 <CircularQueue_Init>
  HW_UART_Receive_IT(CFG_CONSOLE_MENU, &InputCharFromUart, 1, CRCAPP_Terminal_UART_RxCpltCallback);
 8002526:	462a      	mov	r2, r5
 8002528:	4b0c      	ldr	r3, [pc, #48]	; (800255c <CRCAPP_Init+0x6c>)
 800252a:	f104 011a 	add.w	r1, r4, #26
 800252e:	2000      	movs	r0, #0
 8002530:	f7fe fbc0 	bl	8000cb4 <HW_UART_Receive_IT>
  ClearScreen();
 8002534:	f002 fd3e 	bl	8004fb4 <ClearScreen>
    CRC_Context[index].state = CRC_IDLE;
 8002538:	4b09      	ldr	r3, [pc, #36]	; (8002560 <CRCAPP_Init+0x70>)
  SVCCTL_RegisterCltHandler(CRCAPP_Event_Handler);
 800253a:	480a      	ldr	r0, [pc, #40]	; (8002564 <CRCAPP_Init+0x74>)
  waitForComplete = 1;
 800253c:	7025      	strb	r5, [r4, #0]
    CRC_Context[index].state = CRC_IDLE;
 800253e:	2202      	movs	r2, #2
 8002540:	701a      	strb	r2, [r3, #0]
    CRC_Context[index].connHandle = 0xFFFF;
 8002542:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002546:	805a      	strh	r2, [r3, #2]
}
 8002548:	b003      	add	sp, #12
 800254a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  SVCCTL_RegisterCltHandler(CRCAPP_Event_Handler);
 800254e:	f002 b863 	b.w	8004618 <SVCCTL_RegisterCltHandler>
 8002552:	bf00      	nop
 8002554:	20000458 	.word	0x20000458
 8002558:	08001981 	.word	0x08001981
 800255c:	0800240d 	.word	0x0800240d
 8002560:	200001c8 	.word	0x200001c8
 8002564:	08001c1d 	.word	0x08001c1d

08002568 <CRSAPP_Notification>:
{
  CRSAPP_Update_Char(CRS_RX_CHAR_UUID, (uint8_t *)&szString[0]);
}

void CRSAPP_Notification(CRSAPP_Notification_evt_t *pNotification)
{
 8002568:	b538      	push	{r3, r4, r5, lr}
  switch(pNotification->CRS_Evt_Opcode)
 800256a:	7803      	ldrb	r3, [r0, #0]
 800256c:	2b01      	cmp	r3, #1
{
 800256e:	4605      	mov	r5, r0
  switch(pNotification->CRS_Evt_Opcode)
 8002570:	d043      	beq.n	80025fa <CRSAPP_Notification+0x92>
 8002572:	d32e      	bcc.n	80025d2 <CRSAPP_Notification+0x6a>
 8002574:	2b03      	cmp	r3, #3
 8002576:	d147      	bne.n	8002608 <CRSAPP_Notification+0xa0>
  {
    case CRS_WRITE_EVT:
      {
        APP_DBG_MSG("CRS_WRITE_EVT: Data received: %s \n", pNotification->DataTransfered.pPayload);
 8002578:	6841      	ldr	r1, [r0, #4]
 800257a:	4824      	ldr	r0, [pc, #144]	; (800260c <CRSAPP_Notification+0xa4>)
        pNotification->DataTransfered.pPayload[pNotification->DataTransfered.Length] = '\0';
        PrintPcCrt(PosXRx, PosYRx, "%s", pNotification->DataTransfered.pPayload);
 800257c:	4c24      	ldr	r4, [pc, #144]	; (8002610 <CRSAPP_Notification+0xa8>)
        APP_DBG_MSG("CRS_WRITE_EVT: Data received: %s \n", pNotification->DataTransfered.pPayload);
 800257e:	f003 fbf3 	bl	8005d68 <iprintf>
        pNotification->DataTransfered.pPayload[pNotification->DataTransfered.Length] = '\0';
 8002582:	7a2b      	ldrb	r3, [r5, #8]
 8002584:	686a      	ldr	r2, [r5, #4]
        PrintPcCrt(PosXRx, PosYRx, "%s", pNotification->DataTransfered.pPayload);
 8002586:	7ea0      	ldrb	r0, [r4, #26]
        pNotification->DataTransfered.pPayload[pNotification->DataTransfered.Length] = '\0';
 8002588:	2100      	movs	r1, #0
 800258a:	54d1      	strb	r1, [r2, r3]
        PrintPcCrt(PosXRx, PosYRx, "%s", pNotification->DataTransfered.pPayload);
 800258c:	4a21      	ldr	r2, [pc, #132]	; (8002614 <CRSAPP_Notification+0xac>)
 800258e:	686b      	ldr	r3, [r5, #4]
 8002590:	7e61      	ldrb	r1, [r4, #25]
 8002592:	f002 fd1b 	bl	8004fcc <PrintPcCrt>
        PosXRx += pNotification->DataTransfered.Length;
 8002596:	7a2a      	ldrb	r2, [r5, #8]
 8002598:	7ea3      	ldrb	r3, [r4, #26]
 800259a:	4413      	add	r3, r2
 800259c:	b2db      	uxtb	r3, r3
        if((PosXRx >= XSIZE) || (pNotification->DataTransfered.Length < MAX_STRING_SIZE))
 800259e:	2b09      	cmp	r3, #9
 80025a0:	d809      	bhi.n	80025b6 <CRSAPP_Notification+0x4e>
 80025a2:	2a13      	cmp	r2, #19
 80025a4:	d907      	bls.n	80025b6 <CRSAPP_Notification+0x4e>
        PosXRx += pNotification->DataTransfered.Length;
 80025a6:	76a3      	strb	r3, [r4, #26]
        PosYRx++;
          if(PosYRx > POSYRX + YSIZE + 2)
          PosYRx = POSYRX + 2;
          ClearLines(PosYRx, 1);
        }
        PrintPcCrt(PosXTx, PosYTx, "");
 80025a8:	4a1b      	ldr	r2, [pc, #108]	; (8002618 <CRSAPP_Notification+0xb0>)
 80025aa:	7e21      	ldrb	r1, [r4, #24]
 80025ac:	7de0      	ldrb	r0, [r4, #23]
   default:
      break;
  }

  return;
}
 80025ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        PrintPcCrt(PosXTx, PosYTx, "");
 80025b2:	f002 bd0b 	b.w	8004fcc <PrintPcCrt>
          PosXRx = POSXRX;
 80025b6:	230a      	movs	r3, #10
 80025b8:	76a3      	strb	r3, [r4, #26]
        PosYRx++;
 80025ba:	7e63      	ldrb	r3, [r4, #25]
 80025bc:	3301      	adds	r3, #1
 80025be:	b2db      	uxtb	r3, r3
          if(PosYRx > POSYRX + YSIZE + 2)
 80025c0:	2b16      	cmp	r3, #22
          PosYRx = POSYRX + 2;
 80025c2:	bf88      	it	hi
 80025c4:	230c      	movhi	r3, #12
 80025c6:	7663      	strb	r3, [r4, #25]
          ClearLines(PosYRx, 1);
 80025c8:	2101      	movs	r1, #1
 80025ca:	7e60      	ldrb	r0, [r4, #25]
 80025cc:	f002 fcdc 	bl	8004f88 <ClearLines>
 80025d0:	e7ea      	b.n	80025a8 <CRSAPP_Notification+0x40>
        APP_DBG_MSG("CRS_NOTIFY_ENABLED_EVT\n");
 80025d2:	4812      	ldr	r0, [pc, #72]	; (800261c <CRSAPP_Notification+0xb4>)
 80025d4:	f003 fc50 	bl	8005e78 <puts>
        ClearScreen();
 80025d8:	f002 fcec 	bl	8004fb4 <ClearScreen>
        PrintPcCrt(POSXRX, POSXRX, "Receive:");
 80025dc:	210a      	movs	r1, #10
 80025de:	4608      	mov	r0, r1
 80025e0:	4a0f      	ldr	r2, [pc, #60]	; (8002620 <CRSAPP_Notification+0xb8>)
 80025e2:	f002 fcf3 	bl	8004fcc <PrintPcCrt>
        PrintPcCrt(POSXTX, POSYTX, "Transmit:");
 80025e6:	4a0f      	ldr	r2, [pc, #60]	; (8002624 <CRSAPP_Notification+0xbc>)
 80025e8:	211e      	movs	r1, #30
 80025ea:	200a      	movs	r0, #10
 80025ec:	f002 fcee 	bl	8004fcc <PrintPcCrt>
        PrintPcCrt(PosXTx, PosYTx, "");
 80025f0:	4b07      	ldr	r3, [pc, #28]	; (8002610 <CRSAPP_Notification+0xa8>)
 80025f2:	4a09      	ldr	r2, [pc, #36]	; (8002618 <CRSAPP_Notification+0xb0>)
 80025f4:	7e19      	ldrb	r1, [r3, #24]
 80025f6:	7dd8      	ldrb	r0, [r3, #23]
 80025f8:	e7d9      	b.n	80025ae <CRSAPP_Notification+0x46>
        APP_DBG_MSG("CRS_NOTIFY_DISABLED_EVT\n");
 80025fa:	480b      	ldr	r0, [pc, #44]	; (8002628 <CRSAPP_Notification+0xc0>)
 80025fc:	f003 fc3c 	bl	8005e78 <puts>
}
 8002600:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ClearScreen();
 8002604:	f002 bcd6 	b.w	8004fb4 <ClearScreen>
}
 8002608:	bd38      	pop	{r3, r4, r5, pc}
 800260a:	bf00      	nop
 800260c:	08008627 	.word	0x08008627
 8002610:	200004d4 	.word	0x200004d4
 8002614:	080087b6 	.word	0x080087b6
 8002618:	08008745 	.word	0x08008745
 800261c:	0800864a 	.word	0x0800864a
 8002620:	08008351 	.word	0x08008351
 8002624:	0800835a 	.word	0x0800835a
 8002628:	08008661 	.word	0x08008661

0800262c <HW_IPCC_Enable>:
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800262c:	4b09      	ldr	r3, [pc, #36]	; (8002654 <HW_IPCC_Enable+0x28>)
 800262e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8002632:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002636:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  *         @arg @ref LL_EXTI_LINE_41
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800263a:	6a1a      	ldr	r2, [r3, #32]
 800263c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002640:	621a      	str	r2, [r3, #32]
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8002642:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8002644:	bf20      	wfe
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8002646:	4a04      	ldr	r2, [pc, #16]	; (8002658 <HW_IPCC_Enable+0x2c>)
 8002648:	68d3      	ldr	r3, [r2, #12]
 800264a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800264e:	60d3      	str	r3, [r2, #12]
  LL_PWR_EnableBootC2( );

  return;
}
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	58000800 	.word	0x58000800
 8002658:	58000400 	.word	0x58000400

0800265c <HW_IPCC_Init>:
  SET_BIT(RCC->AHB3ENR, Periphs);
 800265c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000

void HW_IPCC_Init( void )
{
 8002660:	b507      	push	{r0, r1, r2, lr}
 8002662:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002664:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002668:	651a      	str	r2, [r3, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800266a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800266c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002670:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8002672:	9b01      	ldr	r3, [sp, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8002674:	4b08      	ldr	r3, [pc, #32]	; (8002698 <HW_IPCC_Init+0x3c>)
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	f042 0201 	orr.w	r2, r2, #1
 800267c:	601a      	str	r2, [r3, #0]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002684:	601a      	str	r2, [r3, #0]
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );

  LL_C1_IPCC_EnableIT_RXO( IPCC );
  LL_C1_IPCC_EnableIT_TXF( IPCC );

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8002686:	202c      	movs	r0, #44	; 0x2c
 8002688:	f000 fa92 	bl	8002bb0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800268c:	202d      	movs	r0, #45	; 0x2d

  return;
}
 800268e:	b003      	add	sp, #12
 8002690:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8002694:	f000 ba8c 	b.w	8002bb0 <HAL_NVIC_EnableIRQ>
 8002698:	58000c00 	.word	0x58000c00

0800269c <HW_IPCC_BLE_Init>:
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800269c:	4a02      	ldr	r2, [pc, #8]	; (80026a8 <HW_IPCC_BLE_Init+0xc>)
 800269e:	6853      	ldr	r3, [r2, #4]
 80026a0:	f023 0301 	bic.w	r3, r3, #1
 80026a4:	6053      	str	r3, [r2, #4]
void HW_IPCC_BLE_Init( void )
{
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );

  return;
}
 80026a6:	4770      	bx	lr
 80026a8:	58000c00 	.word	0x58000c00

080026ac <HW_IPCC_BLE_SendCmd>:
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 80026ac:	4b02      	ldr	r3, [pc, #8]	; (80026b8 <HW_IPCC_BLE_SendCmd+0xc>)
 80026ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80026b2:	609a      	str	r2, [r3, #8]
void HW_IPCC_BLE_SendCmd( void )
{
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );

  return;
}
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	58000c00 	.word	0x58000c00

080026bc <HW_IPCC_SYS_Init>:
  CLEAR_BIT(IPCCx->C1MR, Channel);
 80026bc:	4a02      	ldr	r2, [pc, #8]	; (80026c8 <HW_IPCC_SYS_Init+0xc>)
 80026be:	6853      	ldr	r3, [r2, #4]
 80026c0:	f023 0302 	bic.w	r3, r3, #2
 80026c4:	6053      	str	r3, [r2, #4]
void HW_IPCC_SYS_Init( void )
{
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );

  return;
}
 80026c6:	4770      	bx	lr
 80026c8:	58000c00 	.word	0x58000c00

080026cc <HW_IPCC_SYS_SendCmd>:
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 80026cc:	4b04      	ldr	r3, [pc, #16]	; (80026e0 <HW_IPCC_SYS_SendCmd+0x14>)
 80026ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80026d2:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80026d4:	685a      	ldr	r2, [r3, #4]
 80026d6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80026da:	605a      	str	r2, [r3, #4]
{
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );

  return;
}
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	58000c00 	.word	0x58000c00

080026e4 <HW_IPCC_Tx_Handler>:
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 80026e4:	4b1e      	ldr	r3, [pc, #120]	; (8002760 <HW_IPCC_Tx_Handler+0x7c>)
 80026e6:	68da      	ldr	r2, [r3, #12]
 80026e8:	f012 0f02 	tst.w	r2, #2
{
 80026ec:	b510      	push	{r4, lr}
 80026ee:	461a      	mov	r2, r3
 80026f0:	d109      	bne.n	8002706 <HW_IPCC_Tx_Handler+0x22>
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 80026f2:	6859      	ldr	r1, [r3, #4]
 80026f4:	0389      	lsls	r1, r1, #14
 80026f6:	d406      	bmi.n	8002706 <HW_IPCC_Tx_Handler+0x22>
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80026f8:	685a      	ldr	r2, [r3, #4]
 80026fa:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80026fe:	605a      	str	r2, [r3, #4]

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );

  HW_IPCC_SYS_CmdEvtNot();
 8002700:	f002 ff08 	bl	8005514 <HW_IPCC_SYS_CmdEvtNot>
}
 8002704:	bd10      	pop	{r4, pc}
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8002706:	68d3      	ldr	r3, [r2, #12]
 8002708:	079b      	lsls	r3, r3, #30
 800270a:	d407      	bmi.n	800271c <HW_IPCC_Tx_Handler+0x38>
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800270c:	6853      	ldr	r3, [r2, #4]
 800270e:	039c      	lsls	r4, r3, #14
 8002710:	d404      	bmi.n	800271c <HW_IPCC_Tx_Handler+0x38>
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8002712:	6853      	ldr	r3, [r2, #4]
 8002714:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002718:	6053      	str	r3, [r2, #4]
 800271a:	e7f1      	b.n	8002700 <HW_IPCC_Tx_Handler+0x1c>
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800271c:	4c10      	ldr	r4, [pc, #64]	; (8002760 <HW_IPCC_Tx_Handler+0x7c>)
 800271e:	68e3      	ldr	r3, [r4, #12]
 8002720:	f013 0f08 	tst.w	r3, #8
 8002724:	4623      	mov	r3, r4
 8002726:	d10d      	bne.n	8002744 <HW_IPCC_Tx_Handler+0x60>
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8002728:	6862      	ldr	r2, [r4, #4]
 800272a:	0310      	lsls	r0, r2, #12
 800272c:	d40a      	bmi.n	8002744 <HW_IPCC_Tx_Handler+0x60>
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800272e:	6863      	ldr	r3, [r4, #4]
 8002730:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002734:	6063      	str	r3, [r4, #4]

static void HW_IPCC_MM_FreeBufHandler( void )
{
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );

  FreeBufCb();
 8002736:	4b0b      	ldr	r3, [pc, #44]	; (8002764 <HW_IPCC_Tx_Handler+0x80>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4798      	blx	r3
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800273c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002740:	60a3      	str	r3, [r4, #8]
 8002742:	e7df      	b.n	8002704 <HW_IPCC_Tx_Handler+0x20>
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8002744:	68da      	ldr	r2, [r3, #12]
 8002746:	0691      	lsls	r1, r2, #26
 8002748:	d4dc      	bmi.n	8002704 <HW_IPCC_Tx_Handler+0x20>
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800274a:	685a      	ldr	r2, [r3, #4]
 800274c:	0292      	lsls	r2, r2, #10
 800274e:	d4d9      	bmi.n	8002704 <HW_IPCC_Tx_Handler+0x20>
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8002750:	685a      	ldr	r2, [r3, #4]
 8002752:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002756:	605a      	str	r2, [r3, #4]
  HW_IPCC_BLE_AclDataAckNot();
 8002758:	f002 feb0 	bl	80054bc <HW_IPCC_BLE_AclDataAckNot>
  return;
 800275c:	e7d2      	b.n	8002704 <HW_IPCC_Tx_Handler+0x20>
 800275e:	bf00      	nop
 8002760:	58000c00 	.word	0x58000c00
 8002764:	20000550 	.word	0x20000550

08002768 <HW_IPCC_MM_SendFreeBuf>:
{
 8002768:	b510      	push	{r4, lr}
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800276a:	4c08      	ldr	r4, [pc, #32]	; (800278c <HW_IPCC_MM_SendFreeBuf+0x24>)
 800276c:	68e3      	ldr	r3, [r4, #12]
 800276e:	071b      	lsls	r3, r3, #28
 8002770:	d506      	bpl.n	8002780 <HW_IPCC_MM_SendFreeBuf+0x18>
    FreeBufCb = cb;
 8002772:	4b07      	ldr	r3, [pc, #28]	; (8002790 <HW_IPCC_MM_SendFreeBuf+0x28>)
 8002774:	6018      	str	r0, [r3, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8002776:	6863      	ldr	r3, [r4, #4]
 8002778:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800277c:	6063      	str	r3, [r4, #4]
}
 800277e:	bd10      	pop	{r4, pc}
    cb();
 8002780:	4780      	blx	r0
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8002782:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002786:	60a3      	str	r3, [r4, #8]
  return;
 8002788:	e7f9      	b.n	800277e <HW_IPCC_MM_SendFreeBuf+0x16>
 800278a:	bf00      	nop
 800278c:	58000c00 	.word	0x58000c00
 8002790:	20000550 	.word	0x20000550

08002794 <HW_IPCC_TRACES_Init>:
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8002794:	4a02      	ldr	r2, [pc, #8]	; (80027a0 <HW_IPCC_TRACES_Init+0xc>)
 8002796:	6853      	ldr	r3, [r2, #4]
 8002798:	f023 0308 	bic.w	r3, r3, #8
 800279c:	6053      	str	r3, [r2, #4]
void HW_IPCC_TRACES_Init( void )
{
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );

  return;
}
 800279e:	4770      	bx	lr
 80027a0:	58000c00 	.word	0x58000c00

080027a4 <HW_IPCC_Rx_Handler>:
{
 80027a4:	b538      	push	{r3, r4, r5, lr}
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 80027a6:	4c12      	ldr	r4, [pc, #72]	; (80027f0 <HW_IPCC_Rx_Handler+0x4c>)
 80027a8:	69e3      	ldr	r3, [r4, #28]
 80027aa:	f013 0f02 	tst.w	r3, #2
 80027ae:	4625      	mov	r5, r4
 80027b0:	d007      	beq.n	80027c2 <HW_IPCC_Rx_Handler+0x1e>
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 80027b2:	6863      	ldr	r3, [r4, #4]
 80027b4:	079b      	lsls	r3, r3, #30
 80027b6:	d404      	bmi.n	80027c2 <HW_IPCC_Rx_Handler+0x1e>
  HW_IPCC_SYS_EvtNot();
 80027b8:	f002 feb6 	bl	8005528 <HW_IPCC_SYS_EvtNot>
  WRITE_REG(IPCCx->C1SCR, Channel);
 80027bc:	2302      	movs	r3, #2
 80027be:	60a3      	str	r3, [r4, #8]
  return;
 80027c0:	e009      	b.n	80027d6 <HW_IPCC_Rx_Handler+0x32>
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 80027c2:	69eb      	ldr	r3, [r5, #28]
 80027c4:	07d8      	lsls	r0, r3, #31
 80027c6:	d507      	bpl.n	80027d8 <HW_IPCC_Rx_Handler+0x34>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 80027c8:	686b      	ldr	r3, [r5, #4]
 80027ca:	07d9      	lsls	r1, r3, #31
 80027cc:	d404      	bmi.n	80027d8 <HW_IPCC_Rx_Handler+0x34>
  HW_IPCC_BLE_RxEvtNot();
 80027ce:	f002 fe5f 	bl	8005490 <HW_IPCC_BLE_RxEvtNot>
  WRITE_REG(IPCCx->C1SCR, Channel);
 80027d2:	2301      	movs	r3, #1
 80027d4:	60ab      	str	r3, [r5, #8]
}
 80027d6:	bd38      	pop	{r3, r4, r5, pc}
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 80027d8:	4c05      	ldr	r4, [pc, #20]	; (80027f0 <HW_IPCC_Rx_Handler+0x4c>)
 80027da:	69e3      	ldr	r3, [r4, #28]
 80027dc:	071a      	lsls	r2, r3, #28
 80027de:	d5fa      	bpl.n	80027d6 <HW_IPCC_Rx_Handler+0x32>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 80027e0:	6863      	ldr	r3, [r4, #4]
 80027e2:	071b      	lsls	r3, r3, #28
 80027e4:	d4f7      	bmi.n	80027d6 <HW_IPCC_Rx_Handler+0x32>

static void HW_IPCC_TRACES_EvtHandler( void )
{
  HW_IPCC_TRACES_EvtNot();
 80027e6:	f002 fef5 	bl	80055d4 <HW_IPCC_TRACES_EvtNot>
  WRITE_REG(IPCCx->C1SCR, Channel);
 80027ea:	2308      	movs	r3, #8
 80027ec:	e7e7      	b.n	80027be <HW_IPCC_Rx_Handler+0x1a>
 80027ee:	bf00      	nop
 80027f0:	58000c00 	.word	0x58000c00

080027f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80027f4:	480d      	ldr	r0, [pc, #52]	; (800282c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80027f6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027f8:	480d      	ldr	r0, [pc, #52]	; (8002830 <LoopForever+0x6>)
  ldr r1, =_edata
 80027fa:	490e      	ldr	r1, [pc, #56]	; (8002834 <LoopForever+0xa>)
  ldr r2, =_sidata
 80027fc:	4a0e      	ldr	r2, [pc, #56]	; (8002838 <LoopForever+0xe>)
  movs r3, #0
 80027fe:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002800:	e002      	b.n	8002808 <LoopCopyDataInit>

08002802 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002802:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002804:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002806:	3304      	adds	r3, #4

08002808 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002808:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800280a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800280c:	d3f9      	bcc.n	8002802 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800280e:	4a0b      	ldr	r2, [pc, #44]	; (800283c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002810:	4c0b      	ldr	r4, [pc, #44]	; (8002840 <LoopForever+0x16>)
  movs r3, #0
 8002812:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002814:	e001      	b.n	800281a <LoopFillZerobss>

08002816 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002816:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002818:	3204      	adds	r2, #4

0800281a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800281a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800281c:	d3fb      	bcc.n	8002816 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800281e:	f000 f8e3 	bl	80029e8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002822:	f003 fa69 	bl	8005cf8 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8002826:	f7fe fbfd 	bl	8001024 <main>

0800282a <LoopForever>:

LoopForever:
  b LoopForever
 800282a:	e7fe      	b.n	800282a <LoopForever>
  ldr   r0, =_estack
 800282c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002830:	20000004 	.word	0x20000004
  ldr r1, =_edata
 8002834:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8002838:	08008998 	.word	0x08008998
  ldr r2, =_sbss
 800283c:	2000022c 	.word	0x2000022c
  ldr r4, =_ebss
 8002840:	200021d8 	.word	0x200021d8

08002844 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002844:	e7fe      	b.n	8002844 <ADC1_IRQHandler>

08002846 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002846:	b570      	push	{r4, r5, r6, lr}
 8002848:	460e      	mov	r6, r1
 800284a:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800284c:	460c      	mov	r4, r1
 800284e:	1ba3      	subs	r3, r4, r6
 8002850:	429d      	cmp	r5, r3
 8002852:	dc01      	bgt.n	8002858 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8002854:	4628      	mov	r0, r5
 8002856:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8002858:	f3af 8000 	nop.w
 800285c:	f804 0b01 	strb.w	r0, [r4], #1
 8002860:	e7f5      	b.n	800284e <_read+0x8>
	...

08002864 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8002864:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002866:	4b0a      	ldr	r3, [pc, #40]	; (8002890 <_sbrk+0x2c>)
 8002868:	6819      	ldr	r1, [r3, #0]
{
 800286a:	4602      	mov	r2, r0
	if (heap_end == 0)
 800286c:	b909      	cbnz	r1, 8002872 <_sbrk+0xe>
		heap_end = &end;
 800286e:	4909      	ldr	r1, [pc, #36]	; (8002894 <_sbrk+0x30>)
 8002870:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 8002872:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8002874:	4669      	mov	r1, sp
 8002876:	4402      	add	r2, r0
 8002878:	428a      	cmp	r2, r1
 800287a:	d906      	bls.n	800288a <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800287c:	f003 fa36 	bl	8005cec <__errno>
 8002880:	230c      	movs	r3, #12
 8002882:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8002884:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8002888:	bd08      	pop	{r3, pc}
	heap_end += incr;
 800288a:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 800288c:	e7fc      	b.n	8002888 <_sbrk+0x24>
 800288e:	bf00      	nop
 8002890:	20000554 	.word	0x20000554
 8002894:	200021d8 	.word	0x200021d8

08002898 <_close>:

int _close(int file)
{
	return -1;
}
 8002898:	f04f 30ff 	mov.w	r0, #4294967295
 800289c:	4770      	bx	lr

0800289e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800289e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028a2:	604b      	str	r3, [r1, #4]
	return 0;
}
 80028a4:	2000      	movs	r0, #0
 80028a6:	4770      	bx	lr

080028a8 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80028a8:	2001      	movs	r0, #1
 80028aa:	4770      	bx	lr

080028ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80028ac:	2000      	movs	r0, #0
 80028ae:	4770      	bx	lr

080028b0 <LL_AHB2_GRP1_EnableClock>:
  SET_BIT(RCC->AHB2ENR, Periphs);
 80028b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
{
 80028b4:	b082      	sub	sp, #8
  SET_BIT(RCC->AHB2ENR, Periphs);
 80028b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80028b8:	4302      	orrs	r2, r0
 80028ba:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80028bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028be:	4018      	ands	r0, r3
 80028c0:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 80028c2:	9b01      	ldr	r3, [sp, #4]
}
 80028c4:	b002      	add	sp, #8
 80028c6:	4770      	bx	lr

080028c8 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80028c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028ca:	b087      	sub	sp, #28
 80028cc:	4607      	mov	r7, r0
  GPIO_InitTypeDef  gpioinitstruct = {0};
 80028ce:	2214      	movs	r2, #20
 80028d0:	2100      	movs	r1, #0
 80028d2:	a801      	add	r0, sp, #4
 80028d4:	f003 fa3f 	bl	8005d56 <memset>
  gpioinitstruct.Pin = GPIO_PIN[Led];
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
  gpioinitstruct.Pull = GPIO_NOPULL;
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 80028d8:	4c0d      	ldr	r4, [pc, #52]	; (8002910 <BSP_LED_Init+0x48>)
  LEDx_GPIO_CLK_ENABLE(Led);
 80028da:	2002      	movs	r0, #2
 80028dc:	f7ff ffe8 	bl	80028b0 <LL_AHB2_GRP1_EnableClock>
  gpioinitstruct.Pin = GPIO_PIN[Led];
 80028e0:	4b0c      	ldr	r3, [pc, #48]	; (8002914 <BSP_LED_Init+0x4c>)
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 80028e2:	eb04 0487 	add.w	r4, r4, r7, lsl #2
  gpioinitstruct.Pin = GPIO_PIN[Led];
 80028e6:	f833 5017 	ldrh.w	r5, [r3, r7, lsl #1]
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 80028ea:	6860      	ldr	r0, [r4, #4]
  gpioinitstruct.Pin = GPIO_PIN[Led];
 80028ec:	9501      	str	r5, [sp, #4]
  gpioinitstruct.Pull = GPIO_NOPULL;
 80028ee:	2600      	movs	r6, #0
 80028f0:	2301      	movs	r3, #1
 80028f2:	e9cd 3602 	strd	r3, r6, [sp, #8]
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 80028f6:	a901      	add	r1, sp, #4
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028f8:	2302      	movs	r3, #2
 80028fa:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 80028fc:	f000 fb26 	bl	8002f4c <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8002900:	4632      	mov	r2, r6
 8002902:	4629      	mov	r1, r5
 8002904:	6860      	ldr	r0, [r4, #4]
 8002906:	f000 fbd3 	bl	80030b0 <HAL_GPIO_WritePin>
}
 800290a:	b007      	add	sp, #28
 800290c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800290e:	bf00      	nop
 8002910:	20000004 	.word	0x20000004
 8002914:	080070b0 	.word	0x080070b0

08002918 <BSP_LED_On>:
  *     @arg LED3
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8002918:	4b04      	ldr	r3, [pc, #16]	; (800292c <BSP_LED_On+0x14>)
 800291a:	4905      	ldr	r1, [pc, #20]	; (8002930 <BSP_LED_On+0x18>)
 800291c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8002920:	f831 1010 	ldrh.w	r1, [r1, r0, lsl #1]
 8002924:	6858      	ldr	r0, [r3, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f000 bbc2 	b.w	80030b0 <HAL_GPIO_WritePin>
 800292c:	20000004 	.word	0x20000004
 8002930:	080070b0 	.word	0x080070b0

08002934 <BSP_LED_Off>:
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8002934:	4b04      	ldr	r3, [pc, #16]	; (8002948 <BSP_LED_Off+0x14>)
 8002936:	4905      	ldr	r1, [pc, #20]	; (800294c <BSP_LED_Off+0x18>)
 8002938:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800293c:	f831 1010 	ldrh.w	r1, [r1, r0, lsl #1]
 8002940:	6858      	ldr	r0, [r3, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	f000 bbb4 	b.w	80030b0 <HAL_GPIO_WritePin>
 8002948:	20000004 	.word	0x20000004
 800294c:	080070b0 	.word	0x080070b0

08002950 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002950:	b570      	push	{r4, r5, r6, lr}
 8002952:	b086      	sub	sp, #24
 8002954:	4604      	mov	r4, r0
 8002956:	460e      	mov	r6, r1
  GPIO_InitTypeDef gpioinitstruct = {0};
 8002958:	2214      	movs	r2, #20
 800295a:	2100      	movs	r1, #0
 800295c:	a801      	add	r0, sp, #4
 800295e:	f003 f9fa 	bl	8005d56 <memset>
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8002962:	b9cc      	cbnz	r4, 8002998 <BSP_PB_Init+0x48>
 8002964:	2004      	movs	r0, #4
 8002966:	f7ff ffa3 	bl	80028b0 <LL_AHB2_GRP1_EnableClock>
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 800296a:	b9d6      	cbnz	r6, 80029a2 <BSP_PB_Init+0x52>
  {
    /* Configure Button pin as input */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 800296c:	4b1b      	ldr	r3, [pc, #108]	; (80029dc <BSP_PB_Init+0x8c>)
 800296e:	eb03 0344 	add.w	r3, r3, r4, lsl #1
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
    gpioinitstruct.Pull = GPIO_PULLUP;
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002972:	2501      	movs	r5, #1
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8002974:	88db      	ldrh	r3, [r3, #6]
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
 8002976:	e9cd 3601 	strd	r3, r6, [sp, #4]
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800297a:	2302      	movs	r3, #2
 800297c:	e9cd 5303 	strd	r5, r3, [sp, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8002980:	4b17      	ldr	r3, [pc, #92]	; (80029e0 <BSP_PB_Init+0x90>)
 8002982:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8002986:	a901      	add	r1, sp, #4
 8002988:	6920      	ldr	r0, [r4, #16]
 800298a:	f000 fadf 	bl	8002f4c <HAL_GPIO_Init>
    
    /* Wait Button pin startup stability */
    HAL_Delay(1);
 800298e:	4628      	mov	r0, r5
 8002990:	f7fe fbdc 	bl	800114c <HAL_Delay>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
  }
}
 8002994:	b006      	add	sp, #24
 8002996:	bd70      	pop	{r4, r5, r6, pc}
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8002998:	1e63      	subs	r3, r4, #1
 800299a:	2b01      	cmp	r3, #1
 800299c:	d8e5      	bhi.n	800296a <BSP_PB_Init+0x1a>
 800299e:	2008      	movs	r0, #8
 80029a0:	e7e1      	b.n	8002966 <BSP_PB_Init+0x16>
  if(ButtonMode == BUTTON_MODE_EXTI)
 80029a2:	2e01      	cmp	r6, #1
 80029a4:	d1f6      	bne.n	8002994 <BSP_PB_Init+0x44>
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 80029a6:	4d0d      	ldr	r5, [pc, #52]	; (80029dc <BSP_PB_Init+0x8c>)
    gpioinitstruct.Pull = GPIO_PULLUP;
 80029a8:	9603      	str	r6, [sp, #12]
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 80029aa:	eb05 0344 	add.w	r3, r5, r4, lsl #1
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 80029ae:	a901      	add	r1, sp, #4
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 80029b0:	88db      	ldrh	r3, [r3, #6]
 80029b2:	9301      	str	r3, [sp, #4]
    gpioinitstruct.Mode = GPIO_MODE_IT_FALLING; 
 80029b4:	4b0b      	ldr	r3, [pc, #44]	; (80029e4 <BSP_PB_Init+0x94>)
 80029b6:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 80029b8:	4b09      	ldr	r3, [pc, #36]	; (80029e0 <BSP_PB_Init+0x90>)
 80029ba:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 80029be:	442c      	add	r4, r5
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 80029c0:	6918      	ldr	r0, [r3, #16]
 80029c2:	f000 fac3 	bl	8002f4c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 80029c6:	f994 400c 	ldrsb.w	r4, [r4, #12]
 80029ca:	2200      	movs	r2, #0
 80029cc:	4620      	mov	r0, r4
 80029ce:	210f      	movs	r1, #15
 80029d0:	f000 f8ba 	bl	8002b48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 80029d4:	4620      	mov	r0, r4
 80029d6:	f000 f8eb 	bl	8002bb0 <HAL_NVIC_EnableIRQ>
}
 80029da:	e7db      	b.n	8002994 <BSP_PB_Init+0x44>
 80029dc:	080070b0 	.word	0x080070b0
 80029e0:	20000004 	.word	0x20000004
 80029e4:	10210000 	.word	0x10210000

080029e8 <SystemInit>:
{
	OTP_ID0_t * p_otp;

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 80029e8:	4a21      	ldr	r2, [pc, #132]	; (8002a70 <SystemInit+0x88>)
{
 80029ea:	b508      	push	{r3, lr}
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 80029ec:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80029f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

	/**
	 * Read HSE_Tuning from OTP
	 */
	p_otp = (OTP_ID0_t *) OTP_Read(0);
 80029f8:	2000      	movs	r0, #0
 80029fa:	f002 fe65 	bl	80056c8 <OTP_Read>
	if (p_otp)
 80029fe:	b168      	cbz	r0, 8002a1c <SystemInit+0x34>
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8002a00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a04:	4b1b      	ldr	r3, [pc, #108]	; (8002a74 <SystemInit+0x8c>)
	{
		LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8002a06:	7981      	ldrb	r1, [r0, #6]
 8002a08:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8002a0c:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8002a10:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002a14:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002a18:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002a1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a20:	6813      	ldr	r3, [r2, #0]
 8002a22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a26:	6013      	str	r3, [r2, #0]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8002a28:	4b13      	ldr	r3, [pc, #76]	; (8002a78 <SystemInit+0x90>)
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	f022 0207 	bic.w	r2, r2, #7
 8002a30:	f042 0201 	orr.w	r2, r2, #1
 8002a34:	601a      	str	r2, [r3, #0]
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	f002 0207 	and.w	r2, r2, #7

	/**
	 * Set FLASH latency to 1WS
	 */
	LL_FLASH_SetLatency( LL_FLASH_LATENCY_1 );
	while( LL_FLASH_GetLatency() != LL_FLASH_LATENCY_1 );
 8002a3c:	2a01      	cmp	r2, #1
 8002a3e:	d1fa      	bne.n	8002a36 <SystemInit+0x4e>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002a40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a44:	6813      	ldr	r3, [r2, #0]
 8002a46:	039b      	lsls	r3, r3, #14
 8002a48:	d5fc      	bpl.n	8002a44 <SystemInit+0x5c>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002a4a:	6893      	ldr	r3, [r2, #8]
 8002a4c:	f023 0303 	bic.w	r3, r3, #3
 8002a50:	f043 0302 	orr.w	r3, r3, #2
 8002a54:	6093      	str	r3, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002a56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a5a:	689a      	ldr	r2, [r3, #8]
 8002a5c:	f002 020c 	and.w	r2, r2, #12
	 * Switch to HSE
	 *
	 */
	while(!LL_RCC_HSE_IsReady());
	LL_RCC_SetSysClkSource( LL_RCC_SYS_CLKSOURCE_HSE );
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSE);
 8002a60:	2a08      	cmp	r2, #8
 8002a62:	d1fa      	bne.n	8002a5a <SystemInit+0x72>
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	f022 0201 	bic.w	r2, r2, #1
 8002a6a:	601a      	str	r2, [r3, #0]

	/**
	 * Switch OFF MSI
	 */
	LL_RCC_MSI_Disable();
}
 8002a6c:	bd08      	pop	{r3, pc}
 8002a6e:	bf00      	nop
 8002a70:	e000ed00 	.word	0xe000ed00
 8002a74:	cafecafe 	.word	0xcafecafe
 8002a78:	58004000 	.word	0x58004000

08002a7c <HAL_MspInit>:
__weak void HAL_MspInit(void)
{   
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8002a7c:	4770      	bx	lr
	...

08002a80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a80:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8002a82:	4d0f      	ldr	r5, [pc, #60]	; (8002ac0 <HAL_InitTick+0x40>)
 8002a84:	682b      	ldr	r3, [r5, #0]
{
 8002a86:	4606      	mov	r6, r0
  if (uwTickFreq != 0U)
 8002a88:	b90b      	cbnz	r3, 8002a8e <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8002a8a:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8002a8c:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U /uwTickFreq)) == 0U)
 8002a8e:	f000 fb75 	bl	800317c <HAL_RCC_GetHCLKFreq>
 8002a92:	682a      	ldr	r2, [r5, #0]
 8002a94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a98:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a9c:	fbb0 f0f3 	udiv	r0, r0, r3
 8002aa0:	f000 f8a8 	bl	8002bf4 <HAL_SYSTICK_Config>
 8002aa4:	4604      	mov	r4, r0
 8002aa6:	2800      	cmp	r0, #0
 8002aa8:	d1ef      	bne.n	8002a8a <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002aaa:	2e0f      	cmp	r6, #15
 8002aac:	d8ed      	bhi.n	8002a8a <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002aae:	4602      	mov	r2, r0
 8002ab0:	4631      	mov	r1, r6
 8002ab2:	f04f 30ff 	mov.w	r0, #4294967295
 8002ab6:	f000 f847 	bl	8002b48 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002aba:	606e      	str	r6, [r5, #4]
 8002abc:	4620      	mov	r0, r4
 8002abe:	e7e5      	b.n	8002a8c <HAL_InitTick+0xc>
 8002ac0:	20000020 	.word	0x20000020

08002ac4 <HAL_Init>:
{
 8002ac4:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ac6:	2003      	movs	r0, #3
 8002ac8:	f000 f82c 	bl	8002b24 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002acc:	200f      	movs	r0, #15
 8002ace:	f7ff ffd7 	bl	8002a80 <HAL_InitTick>
 8002ad2:	4604      	mov	r4, r0
 8002ad4:	b918      	cbnz	r0, 8002ade <HAL_Init+0x1a>
    HAL_MspInit();
 8002ad6:	f7ff ffd1 	bl	8002a7c <HAL_MspInit>
}
 8002ada:	4620      	mov	r0, r4
 8002adc:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8002ade:	2401      	movs	r4, #1
 8002ae0:	e7fb      	b.n	8002ada <HAL_Init+0x16>
	...

08002ae4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8002ae4:	4a03      	ldr	r2, [pc, #12]	; (8002af4 <HAL_IncTick+0x10>)
 8002ae6:	4904      	ldr	r1, [pc, #16]	; (8002af8 <HAL_IncTick+0x14>)
 8002ae8:	6813      	ldr	r3, [r2, #0]
 8002aea:	6809      	ldr	r1, [r1, #0]
 8002aec:	440b      	add	r3, r1
 8002aee:	6013      	str	r3, [r2, #0]
}
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop
 8002af4:	200021d0 	.word	0x200021d0
 8002af8:	20000020 	.word	0x20000020

08002afc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002afc:	4b01      	ldr	r3, [pc, #4]	; (8002b04 <HAL_GetTick+0x8>)
 8002afe:	6818      	ldr	r0, [r3, #0]
}
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	200021d0 	.word	0x200021d0

08002b08 <HAL_GetTickFreq>:
  * @retval tick period in Hz
  */
uint32_t HAL_GetTickFreq(void)
{
  return uwTickFreq;
}
 8002b08:	4b01      	ldr	r3, [pc, #4]	; (8002b10 <HAL_GetTickFreq+0x8>)
 8002b0a:	6818      	ldr	r0, [r3, #0]
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	20000020 	.word	0x20000020

08002b14 <HAL_DBGMCU_EnableDBGSleepMode>:
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002b14:	4a02      	ldr	r2, [pc, #8]	; (8002b20 <HAL_DBGMCU_EnableDBGSleepMode+0xc>)
 8002b16:	6853      	ldr	r3, [r2, #4]
 8002b18:	f043 0301 	orr.w	r3, r3, #1
 8002b1c:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
  LL_DBGMCU_EnableDBGSleepMode();
}
 8002b1e:	4770      	bx	lr
 8002b20:	e0042000 	.word	0xe0042000

08002b24 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b24:	4a07      	ldr	r2, [pc, #28]	; (8002b44 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002b26:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b28:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002b2c:	041b      	lsls	r3, r3, #16
 8002b2e:	0c1b      	lsrs	r3, r3, #16
 8002b30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b34:	0200      	lsls	r0, r0, #8
 8002b36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b3a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8002b3e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8002b40:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002b42:	4770      	bx	lr
 8002b44:	e000ed00 	.word	0xe000ed00

08002b48 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b48:	4b17      	ldr	r3, [pc, #92]	; (8002ba8 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b4a:	b570      	push	{r4, r5, r6, lr}
 8002b4c:	68dc      	ldr	r4, [r3, #12]
 8002b4e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b52:	f1c4 0507 	rsb	r5, r4, #7
 8002b56:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b58:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b5c:	bf28      	it	cs
 8002b5e:	2504      	movcs	r5, #4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b60:	f04f 36ff 	mov.w	r6, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b64:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b66:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b6a:	bf8c      	ite	hi
 8002b6c:	3c03      	subhi	r4, #3
 8002b6e:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b70:	ea21 0303 	bic.w	r3, r1, r3
 8002b74:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b76:	fa06 f404 	lsl.w	r4, r6, r4
 8002b7a:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8002b7e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b80:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b84:	bfa8      	it	ge
 8002b86:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 8002b8a:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b8e:	bfbc      	itt	lt
 8002b90:	f000 000f 	andlt.w	r0, r0, #15
 8002b94:	4a05      	ldrlt	r2, [pc, #20]	; (8002bac <HAL_NVIC_SetPriority+0x64>)
 8002b96:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b98:	bfaa      	itet	ge
 8002b9a:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b9e:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ba0:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002ba4:	bd70      	pop	{r4, r5, r6, pc}
 8002ba6:	bf00      	nop
 8002ba8:	e000ed00 	.word	0xe000ed00
 8002bac:	e000ed14 	.word	0xe000ed14

08002bb0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002bb0:	2800      	cmp	r0, #0
 8002bb2:	db08      	blt.n	8002bc6 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bb4:	0942      	lsrs	r2, r0, #5
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	f000 001f 	and.w	r0, r0, #31
 8002bbc:	fa03 f000 	lsl.w	r0, r3, r0
 8002bc0:	4b01      	ldr	r3, [pc, #4]	; (8002bc8 <HAL_NVIC_EnableIRQ+0x18>)
 8002bc2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002bc6:	4770      	bx	lr
 8002bc8:	e000e100 	.word	0xe000e100

08002bcc <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002bcc:	2800      	cmp	r0, #0
 8002bce:	db0d      	blt.n	8002bec <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bd0:	0943      	lsrs	r3, r0, #5
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f000 001f 	and.w	r0, r0, #31
 8002bd8:	fa02 f000 	lsl.w	r0, r2, r0
 8002bdc:	3320      	adds	r3, #32
 8002bde:	4a04      	ldr	r2, [pc, #16]	; (8002bf0 <HAL_NVIC_DisableIRQ+0x24>)
 8002be0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002be4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002be8:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	e000e100 	.word	0xe000e100

08002bf4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bf4:	3801      	subs	r0, #1
 8002bf6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002bfa:	d20a      	bcs.n	8002c12 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bfc:	4b06      	ldr	r3, [pc, #24]	; (8002c18 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bfe:	4a07      	ldr	r2, [pc, #28]	; (8002c1c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c00:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c02:	21f0      	movs	r1, #240	; 0xf0
 8002c04:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c08:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c0a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c0c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c0e:	601a      	str	r2, [r3, #0]
 8002c10:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002c12:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	e000e010 	.word	0xe000e010
 8002c1c:	e000ed00 	.word	0xe000ed00

08002c20 <HAL_NVIC_SetPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002c20:	2800      	cmp	r0, #0
 8002c22:	db09      	blt.n	8002c38 <HAL_NVIC_SetPendingIRQ+0x18>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c24:	0943      	lsrs	r3, r0, #5
 8002c26:	2201      	movs	r2, #1
 8002c28:	f000 001f 	and.w	r0, r0, #31
 8002c2c:	fa02 f000 	lsl.w	r0, r2, r0
 8002c30:	3340      	adds	r3, #64	; 0x40
 8002c32:	4a02      	ldr	r2, [pc, #8]	; (8002c3c <HAL_NVIC_SetPendingIRQ+0x1c>)
 8002c34:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
}
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop
 8002c3c:	e000e100 	.word	0xe000e100

08002c40 <HAL_NVIC_ClearPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002c40:	2800      	cmp	r0, #0
 8002c42:	db09      	blt.n	8002c58 <HAL_NVIC_ClearPendingIRQ+0x18>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c44:	0943      	lsrs	r3, r0, #5
 8002c46:	2201      	movs	r2, #1
 8002c48:	f000 001f 	and.w	r0, r0, #31
 8002c4c:	fa02 f000 	lsl.w	r0, r2, r0
 8002c50:	3360      	adds	r3, #96	; 0x60
 8002c52:	4a02      	ldr	r2, [pc, #8]	; (8002c5c <HAL_NVIC_ClearPendingIRQ+0x1c>)
 8002c54:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
}
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	e000e100 	.word	0xe000e100

08002c60 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c60:	b570      	push	{r4, r5, r6, lr}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c62:	e9d0 4513 	ldrd	r4, r5, [r0, #76]	; 0x4c
 8002c66:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002c68:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8002c6a:	b114      	cbz	r4, 8002c72 <DMA_SetConfig+0x12>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c6c:	e9d0 4516 	ldrd	r4, r5, [r0, #88]	; 0x58
 8002c70:	6065      	str	r5, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002c72:	e9d0 6410 	ldrd	r6, r4, [r0, #64]	; 0x40
 8002c76:	f004 051c 	and.w	r5, r4, #28
 8002c7a:	2401      	movs	r4, #1
 8002c7c:	40ac      	lsls	r4, r5
 8002c7e:	6074      	str	r4, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002c80:	6804      	ldr	r4, [r0, #0]
 8002c82:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c84:	6883      	ldr	r3, [r0, #8]
 8002c86:	2b10      	cmp	r3, #16
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002c88:	bf0b      	itete	eq
 8002c8a:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8002c8c:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8002c8e:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8002c90:	60e2      	strne	r2, [r4, #12]
  }
}
 8002c92:	bd70      	pop	{r4, r5, r6, pc}

08002c94 <DMA_CalcDMAMUXChannelBaseAndMask>:
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002c94:	4910      	ldr	r1, [pc, #64]	; (8002cd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x44>)
 8002c96:	6803      	ldr	r3, [r0, #0]
 8002c98:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002c9a:	428b      	cmp	r3, r1
 8002c9c:	f022 0203 	bic.w	r2, r2, #3
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002ca0:	bf95      	itete	ls
 8002ca2:	f102 4280 	addls.w	r2, r2, #1073741824	; 0x40000000
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002ca6:	490d      	ldrhi	r1, [pc, #52]	; (8002cdc <DMA_CalcDMAMUXChannelBaseAndMask+0x48>)
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002ca8:	f502 3202 	addls.w	r2, r2, #133120	; 0x20800
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002cac:	1889      	addhi	r1, r1, r2
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002cae:	bf98      	it	ls
 8002cb0:	6482      	strls	r2, [r0, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002cb2:	b2db      	uxtb	r3, r3
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002cb4:	4a0a      	ldr	r2, [pc, #40]	; (8002ce0 <DMA_CalcDMAMUXChannelBaseAndMask+0x4c>)
 8002cb6:	64c2      	str	r2, [r0, #76]	; 0x4c
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002cb8:	f1a3 0308 	sub.w	r3, r3, #8
 8002cbc:	f04f 0214 	mov.w	r2, #20
 8002cc0:	fbb3 f3f2 	udiv	r3, r3, r2
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8002cc4:	f04f 0201 	mov.w	r2, #1
 8002cc8:	f003 031c 	and.w	r3, r3, #28
 8002ccc:	fa02 f303 	lsl.w	r3, r2, r3
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002cd0:	bf88      	it	hi
 8002cd2:	6481      	strhi	r1, [r0, #72]	; 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8002cd4:	6503      	str	r3, [r0, #80]	; 0x50
}
 8002cd6:	4770      	bx	lr
 8002cd8:	40020407 	.word	0x40020407
 8002cdc:	4002081c 	.word	0x4002081c
 8002ce0:	40020880 	.word	0x40020880

08002ce4 <HAL_DMA_Init>:
{
 8002ce4:	b510      	push	{r4, lr}
  if (hdma == NULL)
 8002ce6:	4604      	mov	r4, r0
 8002ce8:	2800      	cmp	r0, #0
 8002cea:	d05d      	beq.n	8002da8 <HAL_DMA_Init+0xc4>
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002cec:	6801      	ldr	r1, [r0, #0]
 8002cee:	4b2f      	ldr	r3, [pc, #188]	; (8002dac <HAL_DMA_Init+0xc8>)
 8002cf0:	4299      	cmp	r1, r3
 8002cf2:	f04f 0014 	mov.w	r0, #20
 8002cf6:	d84a      	bhi.n	8002d8e <HAL_DMA_Init+0xaa>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002cf8:	4a2d      	ldr	r2, [pc, #180]	; (8002db0 <HAL_DMA_Init+0xcc>)
 8002cfa:	440a      	add	r2, r1
 8002cfc:	fbb2 f2f0 	udiv	r2, r2, r0
 8002d00:	0092      	lsls	r2, r2, #2
 8002d02:	6462      	str	r2, [r4, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002d04:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
    hdma->DmaBaseAddress = DMA2;
 8002d08:	6423      	str	r3, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d0a:	2302      	movs	r3, #2
 8002d0c:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  tmp |=  hdma->Init.Direction        |
 8002d10:	e9d4 3002 	ldrd	r3, r0, [r4, #8]
 8002d14:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d16:	6920      	ldr	r0, [r4, #16]
  tmp = hdma->Instance->CCR;
 8002d18:	680a      	ldr	r2, [r1, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d1a:	4303      	orrs	r3, r0
 8002d1c:	6960      	ldr	r0, [r4, #20]
 8002d1e:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d20:	69a0      	ldr	r0, [r4, #24]
 8002d22:	4303      	orrs	r3, r0
 8002d24:	69e0      	ldr	r0, [r4, #28]
 8002d26:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d28:	6a20      	ldr	r0, [r4, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002d2a:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8002d2e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d32:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 8002d34:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 8002d36:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002d38:	4620      	mov	r0, r4
 8002d3a:	f7ff ffab 	bl	8002c94 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002d3e:	68a3      	ldr	r3, [r4, #8]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002d40:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002d42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002d46:	bf04      	itt	eq
 8002d48:	2300      	moveq	r3, #0
 8002d4a:	6063      	streq	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002d4c:	6862      	ldr	r2, [r4, #4]
 8002d4e:	b2d3      	uxtb	r3, r2
 8002d50:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d52:	e9d4 1013 	ldrd	r1, r0, [r4, #76]	; 0x4c
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002d56:	3a01      	subs	r2, #1
 8002d58:	2a03      	cmp	r2, #3
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d5a:	6048      	str	r0, [r1, #4]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002d5c:	d81f      	bhi.n	8002d9e <HAL_DMA_Init+0xba>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002d5e:	4a15      	ldr	r2, [pc, #84]	; (8002db4 <HAL_DMA_Init+0xd0>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002d60:	4815      	ldr	r0, [pc, #84]	; (8002db8 <HAL_DMA_Init+0xd4>)
 8002d62:	65a0      	str	r0, [r4, #88]	; 0x58
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002d64:	441a      	add	r2, r3

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002d66:	3b01      	subs	r3, #1
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002d68:	0092      	lsls	r2, r2, #2
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002d6a:	2101      	movs	r1, #1
 8002d6c:	f003 0303 	and.w	r3, r3, #3
 8002d70:	fa01 f303 	lsl.w	r3, r1, r3
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002d74:	2100      	movs	r1, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002d76:	6562      	str	r2, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002d78:	65e3      	str	r3, [r4, #92]	; 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002d7a:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d7c:	6043      	str	r3, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d7e:	2000      	movs	r0, #0
  hdma->State  = HAL_DMA_STATE_READY;
 8002d80:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d82:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->Lock = HAL_UNLOCKED;
 8002d84:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 8002d88:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
}
 8002d8c:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002d8e:	4b0b      	ldr	r3, [pc, #44]	; (8002dbc <HAL_DMA_Init+0xd8>)
 8002d90:	440b      	add	r3, r1
 8002d92:	fbb3 f3f0 	udiv	r3, r3, r0
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	6463      	str	r3, [r4, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002d9a:	4b09      	ldr	r3, [pc, #36]	; (8002dc0 <HAL_DMA_Init+0xdc>)
 8002d9c:	e7b4      	b.n	8002d08 <HAL_DMA_Init+0x24>
    hdma->DMAmuxRequestGen = 0U;
 8002d9e:	2300      	movs	r3, #0
    hdma->DMAmuxRequestGenStatus = 0U;
 8002da0:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002da4:	65e3      	str	r3, [r4, #92]	; 0x5c
 8002da6:	e7ea      	b.n	8002d7e <HAL_DMA_Init+0x9a>
    return HAL_ERROR;
 8002da8:	2001      	movs	r0, #1
 8002daa:	e7ef      	b.n	8002d8c <HAL_DMA_Init+0xa8>
 8002dac:	40020407 	.word	0x40020407
 8002db0:	bffdfff8 	.word	0xbffdfff8
 8002db4:	1000823f 	.word	0x1000823f
 8002db8:	40020940 	.word	0x40020940
 8002dbc:	bffdfbf8 	.word	0xbffdfbf8
 8002dc0:	40020400 	.word	0x40020400

08002dc4 <HAL_DMA_Start_IT>:
{
 8002dc4:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8002dc6:	f890 5024 	ldrb.w	r5, [r0, #36]	; 0x24
 8002dca:	2d01      	cmp	r5, #1
{
 8002dcc:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8002dce:	d039      	beq.n	8002e44 <HAL_DMA_Start_IT+0x80>
 8002dd0:	2501      	movs	r5, #1
 8002dd2:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 8002dd6:	f890 5025 	ldrb.w	r5, [r0, #37]	; 0x25
 8002dda:	2d01      	cmp	r5, #1
 8002ddc:	f04f 0600 	mov.w	r6, #0
 8002de0:	f04f 0502 	mov.w	r5, #2
 8002de4:	d12c      	bne.n	8002e40 <HAL_DMA_Start_IT+0x7c>
    hdma->State = HAL_DMA_STATE_BUSY;
 8002de6:	f880 5025 	strb.w	r5, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dea:	63c6      	str	r6, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8002dec:	6806      	ldr	r6, [r0, #0]
 8002dee:	6835      	ldr	r5, [r6, #0]
 8002df0:	f025 0501 	bic.w	r5, r5, #1
 8002df4:	6035      	str	r5, [r6, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002df6:	f7ff ff33 	bl	8002c60 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8002dfa:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8002dfc:	6803      	ldr	r3, [r0, #0]
 8002dfe:	b1ba      	cbz	r2, 8002e30 <HAL_DMA_Start_IT+0x6c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	f042 020e 	orr.w	r2, r2, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002e06:	601a      	str	r2, [r3, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002e08:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002e0a:	6811      	ldr	r1, [r2, #0]
 8002e0c:	03c9      	lsls	r1, r1, #15
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002e0e:	bf42      	ittt	mi
 8002e10:	6811      	ldrmi	r1, [r2, #0]
 8002e12:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
 8002e16:	6011      	strmi	r1, [r2, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8002e18:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002e1a:	b11a      	cbz	r2, 8002e24 <HAL_DMA_Start_IT+0x60>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002e1c:	6811      	ldr	r1, [r2, #0]
 8002e1e:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8002e22:	6011      	str	r1, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	f042 0201 	orr.w	r2, r2, #1
 8002e2a:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e2c:	2000      	movs	r0, #0
}
 8002e2e:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	f022 0204 	bic.w	r2, r2, #4
 8002e36:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	f042 020a 	orr.w	r2, r2, #10
 8002e3e:	e7e2      	b.n	8002e06 <HAL_DMA_Start_IT+0x42>
    __HAL_UNLOCK(hdma);
 8002e40:	f880 6024 	strb.w	r6, [r0, #36]	; 0x24
  __HAL_LOCK(hdma);
 8002e44:	2002      	movs	r0, #2
 8002e46:	e7f2      	b.n	8002e2e <HAL_DMA_Start_IT+0x6a>

08002e48 <HAL_DMA_Abort_IT>:
  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002e48:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8002e4c:	2b02      	cmp	r3, #2
{
 8002e4e:	b510      	push	{r4, lr}
  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002e50:	d003      	beq.n	8002e5a <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e52:	2304      	movs	r3, #4
 8002e54:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8002e56:	2001      	movs	r0, #1
}
 8002e58:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e5a:	6803      	ldr	r3, [r0, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	f022 020e 	bic.w	r2, r2, #14
 8002e62:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	f022 0201 	bic.w	r2, r2, #1
 8002e6a:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002e6c:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8002e6e:	6813      	ldr	r3, [r2, #0]
 8002e70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e74:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002e76:	e9d0 1310 	ldrd	r1, r3, [r0, #64]	; 0x40
 8002e7a:	f003 021c 	and.w	r2, r3, #28
 8002e7e:	2301      	movs	r3, #1
 8002e80:	4093      	lsls	r3, r2
 8002e82:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e84:	e9d0 3213 	ldrd	r3, r2, [r0, #76]	; 0x4c
 8002e88:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8002e8a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002e8c:	b133      	cbz	r3, 8002e9c <HAL_DMA_Abort_IT+0x54>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e94:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e96:	e9d0 3216 	ldrd	r3, r2, [r0, #88]	; 0x58
 8002e9a:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    if (hdma->XferAbortCallback != NULL)
 8002ea2:	6b83      	ldr	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8002ea4:	2400      	movs	r4, #0
 8002ea6:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 8002eaa:	b113      	cbz	r3, 8002eb2 <HAL_DMA_Abort_IT+0x6a>
      hdma->XferAbortCallback(hdma);
 8002eac:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8002eae:	4620      	mov	r0, r4
 8002eb0:	e7d2      	b.n	8002e58 <HAL_DMA_Abort_IT+0x10>
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	e7d0      	b.n	8002e58 <HAL_DMA_Abort_IT+0x10>

08002eb6 <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002eb6:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002eb8:	6c42      	ldr	r2, [r0, #68]	; 0x44
  uint32_t source_it = hdma->Instance->CCR;
 8002eba:	6803      	ldr	r3, [r0, #0]
{
 8002ebc:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002ebe:	f002 021c 	and.w	r2, r2, #28
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002ec2:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8002ec4:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002ec6:	2404      	movs	r4, #4
 8002ec8:	4094      	lsls	r4, r2
 8002eca:	4234      	tst	r4, r6
 8002ecc:	d00e      	beq.n	8002eec <HAL_DMA_IRQHandler+0x36>
 8002ece:	f015 0f04 	tst.w	r5, #4
 8002ed2:	d00b      	beq.n	8002eec <HAL_DMA_IRQHandler+0x36>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	0692      	lsls	r2, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ed8:	bf5e      	ittt	pl
 8002eda:	681a      	ldrpl	r2, [r3, #0]
 8002edc:	f022 0204 	bicpl.w	r2, r2, #4
 8002ee0:	601a      	strpl	r2, [r3, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 8002ee2:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ee4:	604c      	str	r4, [r1, #4]
    if (hdma->XferErrorCallback != NULL)
 8002ee6:	b373      	cbz	r3, 8002f46 <HAL_DMA_IRQHandler+0x90>
}
 8002ee8:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8002eea:	4718      	bx	r3
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002eec:	2402      	movs	r4, #2
 8002eee:	4094      	lsls	r4, r2
 8002ef0:	4234      	tst	r4, r6
 8002ef2:	d012      	beq.n	8002f1a <HAL_DMA_IRQHandler+0x64>
 8002ef4:	f015 0f02 	tst.w	r5, #2
 8002ef8:	d00f      	beq.n	8002f1a <HAL_DMA_IRQHandler+0x64>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	0695      	lsls	r5, r2, #26
 8002efe:	d406      	bmi.n	8002f0e <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	f022 020a 	bic.w	r2, r2, #10
 8002f06:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8002f0e:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8002f10:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 8002f12:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferCpltCallback != NULL)
 8002f16:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002f18:	e7e5      	b.n	8002ee6 <HAL_DMA_IRQHandler+0x30>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002f1a:	2408      	movs	r4, #8
 8002f1c:	4094      	lsls	r4, r2
 8002f1e:	4234      	tst	r4, r6
 8002f20:	d011      	beq.n	8002f46 <HAL_DMA_IRQHandler+0x90>
 8002f22:	072c      	lsls	r4, r5, #28
 8002f24:	d50f      	bpl.n	8002f46 <HAL_DMA_IRQHandler+0x90>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f26:	681c      	ldr	r4, [r3, #0]
 8002f28:	f024 040e 	bic.w	r4, r4, #14
 8002f2c:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002f2e:	2301      	movs	r3, #1
 8002f30:	fa03 f202 	lsl.w	r2, r3, r2
 8002f34:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002f36:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8002f38:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8002f42:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002f44:	e7cf      	b.n	8002ee6 <HAL_DMA_IRQHandler+0x30>
}
 8002f46:	bc70      	pop	{r4, r5, r6}
 8002f48:	4770      	bx	lr
	...

08002f4c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002f50:	4a55      	ldr	r2, [pc, #340]	; (80030a8 <HAL_GPIO_Init+0x15c>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f52:	f8d1 8000 	ldr.w	r8, [r1]
  uint32_t position = 0x00u;
 8002f56:	2300      	movs	r3, #0
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f58:	f04f 090f 	mov.w	r9, #15
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f5c:	fa38 f403 	lsrs.w	r4, r8, r3
 8002f60:	d101      	bne.n	8002f66 <HAL_GPIO_Init+0x1a>
      }
    }
    
    position++;
  }
}
 8002f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002f66:	2401      	movs	r4, #1
 8002f68:	fa04 fa03 	lsl.w	sl, r4, r3
    if (iocurrent != 0x00u)
 8002f6c:	ea1a 0508 	ands.w	r5, sl, r8
 8002f70:	f000 808f 	beq.w	8003092 <HAL_GPIO_Init+0x146>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f74:	684c      	ldr	r4, [r1, #4]
 8002f76:	f024 0b10 	bic.w	fp, r4, #16
 8002f7a:	f1bb 0f02 	cmp.w	fp, #2
 8002f7e:	d111      	bne.n	8002fa4 <HAL_GPIO_Init+0x58>
        temp = GPIOx->AFR[position >> 3u];
 8002f80:	08df      	lsrs	r7, r3, #3
 8002f82:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f86:	f003 0c07 	and.w	ip, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8002f8a:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f8c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8002f90:	fa09 fe0c 	lsl.w	lr, r9, ip
 8002f94:	ea26 0e0e 	bic.w	lr, r6, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002f98:	690e      	ldr	r6, [r1, #16]
 8002f9a:	fa06 f60c 	lsl.w	r6, r6, ip
 8002f9e:	ea46 060e 	orr.w	r6, r6, lr
        GPIOx->AFR[position >> 3u] = temp;
 8002fa2:	623e      	str	r6, [r7, #32]
 8002fa4:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002fa8:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 8002faa:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002fac:	fa07 f70e 	lsl.w	r7, r7, lr
 8002fb0:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002fb2:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002fb6:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002fb8:	fa0c fc0e 	lsl.w	ip, ip, lr
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002fbc:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002fc0:	ea4c 0606 	orr.w	r6, ip, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002fc4:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 8002fc8:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002fca:	d811      	bhi.n	8002ff0 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->OSPEEDR;
 8002fcc:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002fce:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002fd2:	68ce      	ldr	r6, [r1, #12]
 8002fd4:	fa06 fc0e 	lsl.w	ip, r6, lr
 8002fd8:	ea4c 060b 	orr.w	r6, ip, fp
        GPIOx->OSPEEDR = temp;
 8002fdc:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8002fde:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002fe0:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002fe4:	f3c4 1600 	ubfx	r6, r4, #4, #1
 8002fe8:	409e      	lsls	r6, r3
 8002fea:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 8002fee:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8002ff0:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002ff2:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002ff4:	688e      	ldr	r6, [r1, #8]
 8002ff6:	fa06 f60e 	lsl.w	r6, r6, lr
 8002ffa:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ffc:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 8002ffe:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003000:	d547      	bpl.n	8003092 <HAL_GPIO_Init+0x146>
 8003002:	f023 0703 	bic.w	r7, r3, #3
 8003006:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800300a:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800300e:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2u];
 8003012:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003014:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8003018:	fa09 fe0c 	lsl.w	lr, r9, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800301c:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003020:	ea26 0e0e 	bic.w	lr, r6, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003024:	d037      	beq.n	8003096 <HAL_GPIO_Init+0x14a>
 8003026:	4e21      	ldr	r6, [pc, #132]	; (80030ac <HAL_GPIO_Init+0x160>)
 8003028:	42b0      	cmp	r0, r6
 800302a:	d036      	beq.n	800309a <HAL_GPIO_Init+0x14e>
 800302c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003030:	42b0      	cmp	r0, r6
 8003032:	d034      	beq.n	800309e <HAL_GPIO_Init+0x152>
 8003034:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003038:	42b0      	cmp	r0, r6
 800303a:	d032      	beq.n	80030a2 <HAL_GPIO_Init+0x156>
 800303c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003040:	42b0      	cmp	r0, r6
 8003042:	bf14      	ite	ne
 8003044:	2607      	movne	r6, #7
 8003046:	2604      	moveq	r6, #4
 8003048:	fa06 f60c 	lsl.w	r6, r6, ip
 800304c:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003050:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR1;
 8003052:	f8d2 6080 	ldr.w	r6, [r2, #128]	; 0x80
        temp &= ~(iocurrent);
 8003056:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003058:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~(iocurrent);
 800305c:	bf0c      	ite	eq
 800305e:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8003060:	432e      	orrne	r6, r5
        EXTI->IMR1 = temp;
 8003062:	f8c2 6080 	str.w	r6, [r2, #128]	; 0x80
        temp = EXTI->EMR1;
 8003066:	f8d2 6084 	ldr.w	r6, [r2, #132]	; 0x84
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800306a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~(iocurrent);
 800306e:	bf0c      	ite	eq
 8003070:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8003072:	432e      	orrne	r6, r5
        EXTI->EMR1 = temp;
 8003074:	f8c2 6084 	str.w	r6, [r2, #132]	; 0x84
        temp = EXTI->RTSR1;
 8003078:	6816      	ldr	r6, [r2, #0]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800307a:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~(iocurrent);
 800307e:	bf0c      	ite	eq
 8003080:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8003082:	432e      	orrne	r6, r5
        EXTI->RTSR1 = temp;
 8003084:	6016      	str	r6, [r2, #0]
        temp = EXTI->FTSR1;
 8003086:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003088:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 800308a:	bf54      	ite	pl
 800308c:	403e      	andpl	r6, r7
          temp |= iocurrent;
 800308e:	432e      	orrmi	r6, r5
        EXTI->FTSR1 = temp;
 8003090:	6056      	str	r6, [r2, #4]
    position++;
 8003092:	3301      	adds	r3, #1
 8003094:	e762      	b.n	8002f5c <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003096:	2600      	movs	r6, #0
 8003098:	e7d6      	b.n	8003048 <HAL_GPIO_Init+0xfc>
 800309a:	2601      	movs	r6, #1
 800309c:	e7d4      	b.n	8003048 <HAL_GPIO_Init+0xfc>
 800309e:	2602      	movs	r6, #2
 80030a0:	e7d2      	b.n	8003048 <HAL_GPIO_Init+0xfc>
 80030a2:	2603      	movs	r6, #3
 80030a4:	e7d0      	b.n	8003048 <HAL_GPIO_Init+0xfc>
 80030a6:	bf00      	nop
 80030a8:	58000800 	.word	0x58000800
 80030ac:	48000400 	.word	0x48000400

080030b0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030b0:	b10a      	cbz	r2, 80030b6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80030b2:	6181      	str	r1, [r0, #24]
 80030b4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80030b6:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80030b8:	4770      	bx	lr
	...

080030bc <HAL_PWR_EnableBkUpAccess>:
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030bc:	4a02      	ldr	r2, [pc, #8]	; (80030c8 <HAL_PWR_EnableBkUpAccess+0xc>)
 80030be:	6813      	ldr	r3, [r2, #0]
 80030c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030c4:	6013      	str	r3, [r2, #0]
}
 80030c6:	4770      	bx	lr
 80030c8:	58000400 	.word	0x58000400

080030cc <LL_RCC_MSI_GetRange>:
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80030cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030d0:	6818      	ldr	r0, [r3, #0]
 80030d2:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
}
 80030d6:	28b0      	cmp	r0, #176	; 0xb0
 80030d8:	bf28      	it	cs
 80030da:	20b0      	movcs	r0, #176	; 0xb0
 80030dc:	4770      	bx	lr
	...

080030e0 <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80030e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030e4:	b508      	push	{r3, lr}
 80030e6:	6893      	ldr	r3, [r2, #8]
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80030e8:	f013 030c 	ands.w	r3, r3, #12
 80030ec:	d107      	bne.n	80030fe <HAL_RCC_GetSysClockFreq+0x1e>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80030ee:	f7ff ffed 	bl	80030cc <LL_RCC_MSI_GetRange>
 80030f2:	4b1f      	ldr	r3, [pc, #124]	; (8003170 <HAL_RCC_GetSysClockFreq+0x90>)
 80030f4:	f3c0 1003 	ubfx	r0, r0, #4, #4
 80030f8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
}
 80030fc:	bd08      	pop	{r3, pc}
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80030fe:	2b04      	cmp	r3, #4
 8003100:	d033      	beq.n	800316a <HAL_RCC_GetSysClockFreq+0x8a>
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003102:	2b08      	cmp	r3, #8
 8003104:	d107      	bne.n	8003116 <HAL_RCC_GetSysClockFreq+0x36>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003106:	6813      	ldr	r3, [r2, #0]
      sysclockfreq = HSE_VALUE;
 8003108:	481a      	ldr	r0, [pc, #104]	; (8003174 <HAL_RCC_GetSysClockFreq+0x94>)
 800310a:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800310e:	4b1a      	ldr	r3, [pc, #104]	; (8003178 <HAL_RCC_GetSysClockFreq+0x98>)
 8003110:	bf08      	it	eq
 8003112:	4618      	moveq	r0, r3
 8003114:	e7f2      	b.n	80030fc <HAL_RCC_GetSysClockFreq+0x1c>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003116:	68d3      	ldr	r3, [r2, #12]
 8003118:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 800311c:	2b02      	cmp	r3, #2
 800311e:	d022      	beq.n	8003166 <HAL_RCC_GetSysClockFreq+0x86>
 8003120:	2b03      	cmp	r3, #3
 8003122:	d118      	bne.n	8003156 <HAL_RCC_GetSysClockFreq+0x76>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003124:	6813      	ldr	r3, [r2, #0]
          pllinputfreq = HSE_VALUE / 2U;
 8003126:	4813      	ldr	r0, [pc, #76]	; (8003174 <HAL_RCC_GetSysClockFreq+0x94>)
 8003128:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800312c:	4b12      	ldr	r3, [pc, #72]	; (8003178 <HAL_RCC_GetSysClockFreq+0x98>)
 800312e:	bf18      	it	ne
 8003130:	4603      	movne	r3, r0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003132:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003136:	68d0      	ldr	r0, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003138:	68d1      	ldr	r1, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800313a:	68d2      	ldr	r2, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800313c:	f3c0 2006 	ubfx	r0, r0, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8003140:	4358      	muls	r0, r3
 8003142:	f3c1 1302 	ubfx	r3, r1, #4, #3
 8003146:	3301      	adds	r3, #1
 8003148:	fbb0 f0f3 	udiv	r0, r0, r3
 800314c:	0f53      	lsrs	r3, r2, #29
 800314e:	3301      	adds	r3, #1
 8003150:	fbb0 f0f3 	udiv	r0, r0, r3
 8003154:	e7d2      	b.n	80030fc <HAL_RCC_GetSysClockFreq+0x1c>
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003156:	f7ff ffb9 	bl	80030cc <LL_RCC_MSI_GetRange>
 800315a:	4b05      	ldr	r3, [pc, #20]	; (8003170 <HAL_RCC_GetSysClockFreq+0x90>)
 800315c:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8003160:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8003164:	e7e5      	b.n	8003132 <HAL_RCC_GetSysClockFreq+0x52>
        pllinputfreq = HSI_VALUE;
 8003166:	4b03      	ldr	r3, [pc, #12]	; (8003174 <HAL_RCC_GetSysClockFreq+0x94>)
 8003168:	e7e3      	b.n	8003132 <HAL_RCC_GetSysClockFreq+0x52>
    sysclockfreq = HSI_VALUE;
 800316a:	4802      	ldr	r0, [pc, #8]	; (8003174 <HAL_RCC_GetSysClockFreq+0x94>)
 800316c:	e7c6      	b.n	80030fc <HAL_RCC_GetSysClockFreq+0x1c>
 800316e:	bf00      	nop
 8003170:	080070c0 	.word	0x080070c0
 8003174:	00f42400 	.word	0x00f42400
 8003178:	01e84800 	.word	0x01e84800

0800317c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800317c:	b508      	push	{r3, lr}
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800317e:	f7ff ffaf 	bl	80030e0 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003182:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003186:	4a04      	ldr	r2, [pc, #16]	; (8003198 <HAL_RCC_GetHCLKFreq+0x1c>)
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800318e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8003192:	fbb0 f0f3 	udiv	r0, r0, r3
 8003196:	bd08      	pop	{r3, pc}
 8003198:	08007100 	.word	0x08007100

0800319c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800319c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800319e:	f7ff ffed 	bl	800317c <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80031a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031a6:	4a05      	ldr	r2, [pc, #20]	; (80031bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80031ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031b2:	f003 031f 	and.w	r3, r3, #31
}
 80031b6:	40d8      	lsrs	r0, r3
 80031b8:	bd08      	pop	{r3, pc}
 80031ba:	bf00      	nop
 80031bc:	080071a0 	.word	0x080071a0

080031c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031c0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80031c2:	f7ff ffdb 	bl	800317c <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80031c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031ca:	4a05      	ldr	r2, [pc, #20]	; (80031e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80031d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031d6:	f003 031f 	and.w	r3, r3, #31
}
 80031da:	40d8      	lsrs	r0, r3
 80031dc:	bd08      	pop	{r3, pc}
 80031de:	bf00      	nop
 80031e0:	080071a0 	.word	0x080071a0

080031e4 <HAL_RTC_MspInit>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_MspInit could be implemented in the user file
   */ 
}
 80031e4:	4770      	bx	lr

080031e6 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80031e6:	6802      	ldr	r2, [r0, #0]
{
 80031e8:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80031ea:	68d3      	ldr	r3, [r2, #12]
 80031ec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80031f0:	60d3      	str	r3, [r2, #12]
{
 80031f2:	4604      	mov	r4, r0

  tickstart = HAL_GetTick();
 80031f4:	f7ff fc82 	bl	8002afc <HAL_GetTick>
 80031f8:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80031fa:	6823      	ldr	r3, [r4, #0]
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	069b      	lsls	r3, r3, #26
 8003200:	d501      	bpl.n	8003206 <HAL_RTC_WaitForSynchro+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8003202:	2000      	movs	r0, #0
}
 8003204:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003206:	f7ff fc79 	bl	8002afc <HAL_GetTick>
 800320a:	1b40      	subs	r0, r0, r5
 800320c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003210:	d9f3      	bls.n	80031fa <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 8003212:	2003      	movs	r0, #3
 8003214:	e7f6      	b.n	8003204 <HAL_RTC_WaitForSynchro+0x1e>

08003216 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003216:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003218:	6803      	ldr	r3, [r0, #0]
 800321a:	68da      	ldr	r2, [r3, #12]
 800321c:	0652      	lsls	r2, r2, #25
{
 800321e:	4604      	mov	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003220:	d501      	bpl.n	8003226 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8003222:	2000      	movs	r0, #0
}
 8003224:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003226:	f04f 32ff 	mov.w	r2, #4294967295
 800322a:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 800322c:	f7ff fc66 	bl	8002afc <HAL_GetTick>
 8003230:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003232:	6823      	ldr	r3, [r4, #0]
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	065b      	lsls	r3, r3, #25
 8003238:	d4f3      	bmi.n	8003222 <RTC_EnterInitMode+0xc>
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800323a:	f7ff fc5f 	bl	8002afc <HAL_GetTick>
 800323e:	1b40      	subs	r0, r0, r5
 8003240:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003244:	d9f5      	bls.n	8003232 <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 8003246:	2003      	movs	r0, #3
 8003248:	e7ec      	b.n	8003224 <RTC_EnterInitMode+0xe>

0800324a <HAL_RTC_Init>:
{
 800324a:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 800324c:	4604      	mov	r4, r0
 800324e:	b1d8      	cbz	r0, 8003288 <HAL_RTC_Init+0x3e>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8003250:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8003254:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003258:	b91b      	cbnz	r3, 8003262 <HAL_RTC_Init+0x18>
    hrtc->Lock = HAL_UNLOCKED;
 800325a:	f880 2020 	strb.w	r2, [r0, #32]
    HAL_RTC_MspInit(hrtc);
 800325e:	f7ff ffc1 	bl	80031e4 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003262:	2302      	movs	r3, #2
 8003264:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003268:	6823      	ldr	r3, [r4, #0]
 800326a:	22ca      	movs	r2, #202	; 0xca
 800326c:	625a      	str	r2, [r3, #36]	; 0x24
 800326e:	2253      	movs	r2, #83	; 0x53
 8003270:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003272:	4620      	mov	r0, r4
 8003274:	f7ff ffcf 	bl	8003216 <RTC_EnterInitMode>
 8003278:	6823      	ldr	r3, [r4, #0]
 800327a:	4605      	mov	r5, r0
 800327c:	b130      	cbz	r0, 800328c <HAL_RTC_Init+0x42>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800327e:	22ff      	movs	r2, #255	; 0xff
 8003280:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003282:	2304      	movs	r3, #4
 8003284:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
     return HAL_ERROR;
 8003288:	2501      	movs	r5, #1
 800328a:	e038      	b.n	80032fe <HAL_RTC_Init+0xb4>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800328c:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800328e:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003290:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8003294:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003298:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800329a:	6862      	ldr	r2, [r4, #4]
 800329c:	6899      	ldr	r1, [r3, #8]
 800329e:	4302      	orrs	r2, r0
 80032a0:	69a0      	ldr	r0, [r4, #24]
 80032a2:	4302      	orrs	r2, r0
 80032a4:	430a      	orrs	r2, r1
 80032a6:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80032a8:	68e2      	ldr	r2, [r4, #12]
 80032aa:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80032ac:	691a      	ldr	r2, [r3, #16]
 80032ae:	68a1      	ldr	r1, [r4, #8]
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80032b0:	6960      	ldr	r0, [r4, #20]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80032b2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80032b6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80032b8:	68da      	ldr	r2, [r3, #12]
 80032ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032be:	60da      	str	r2, [r3, #12]
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80032c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80032c2:	f022 0203 	bic.w	r2, r2, #3
 80032c6:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80032c8:	69e2      	ldr	r2, [r4, #28]
 80032ca:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80032cc:	4302      	orrs	r2, r0
 80032ce:	430a      	orrs	r2, r1
 80032d0:	64da      	str	r2, [r3, #76]	; 0x4c
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	069b      	lsls	r3, r3, #26
 80032d6:	d40c      	bmi.n	80032f2 <HAL_RTC_Init+0xa8>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80032d8:	4620      	mov	r0, r4
 80032da:	f7ff ff84 	bl	80031e6 <HAL_RTC_WaitForSynchro>
 80032de:	b140      	cbz	r0, 80032f2 <HAL_RTC_Init+0xa8>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80032e0:	6823      	ldr	r3, [r4, #0]
 80032e2:	22ff      	movs	r2, #255	; 0xff
 80032e4:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80032e6:	2304      	movs	r3, #4
 80032e8:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
        __HAL_UNLOCK(hrtc);
 80032ec:	f884 5020 	strb.w	r5, [r4, #32]
 80032f0:	e7ca      	b.n	8003288 <HAL_RTC_Init+0x3e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80032f2:	6823      	ldr	r3, [r4, #0]
 80032f4:	22ff      	movs	r2, #255	; 0xff
 80032f6:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 80032f8:	2301      	movs	r3, #1
 80032fa:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 80032fe:	4628      	mov	r0, r5
 8003300:	bd38      	pop	{r3, r4, r5, pc}

08003302 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003302:	6802      	ldr	r2, [r0, #0]
 8003304:	6813      	ldr	r3, [r2, #0]
 8003306:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800330a:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800330c:	6893      	ldr	r3, [r2, #8]
 800330e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003312:	f023 0301 	bic.w	r3, r3, #1
 8003316:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003318:	2320      	movs	r3, #32
 800331a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800331e:	2300      	movs	r3, #0
 8003320:	66c3      	str	r3, [r0, #108]	; 0x6c
}
 8003322:	4770      	bx	lr

08003324 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8003324:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8003328:	2b20      	cmp	r3, #32
{
 800332a:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800332c:	d168      	bne.n	8003400 <HAL_UART_Receive_IT+0xdc>
    if ((pData == NULL) || (Size == 0U))
 800332e:	2900      	cmp	r1, #0
 8003330:	d064      	beq.n	80033fc <HAL_UART_Receive_IT+0xd8>
 8003332:	2a00      	cmp	r2, #0
 8003334:	d062      	beq.n	80033fc <HAL_UART_Receive_IT+0xd8>
    __HAL_LOCK(huart);
 8003336:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 800333a:	2b01      	cmp	r3, #1
 800333c:	d060      	beq.n	8003400 <HAL_UART_Receive_IT+0xdc>
 800333e:	2301      	movs	r3, #1
 8003340:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    UART_MASK_COMPUTATION(huart);
 8003344:	6883      	ldr	r3, [r0, #8]
    huart->pRxBuffPtr  = pData;
 8003346:	6581      	str	r1, [r0, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 8003348:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxISR       = NULL;
 800334c:	f04f 0100 	mov.w	r1, #0
    huart->RxXferSize  = Size;
 8003350:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
    huart->RxXferCount = Size;
 8003354:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
    huart->RxISR       = NULL;
 8003358:	66c1      	str	r1, [r0, #108]	; 0x6c
    UART_MASK_COMPUTATION(huart);
 800335a:	d12e      	bne.n	80033ba <HAL_UART_Receive_IT+0x96>
 800335c:	6901      	ldr	r1, [r0, #16]
 800335e:	bb51      	cbnz	r1, 80033b6 <HAL_UART_Receive_IT+0x92>
 8003360:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003364:	f8a0 1060 	strh.w	r1, [r0, #96]	; 0x60
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003368:	2100      	movs	r1, #0
 800336a:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800336e:	2122      	movs	r1, #34	; 0x22
 8003370:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003374:	6801      	ldr	r1, [r0, #0]
 8003376:	688c      	ldr	r4, [r1, #8]
 8003378:	f044 0401 	orr.w	r4, r4, #1
 800337c:	608c      	str	r4, [r1, #8]
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800337e:	6e44      	ldr	r4, [r0, #100]	; 0x64
 8003380:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
 8003384:	d129      	bne.n	80033da <HAL_UART_Receive_IT+0xb6>
 8003386:	f8b0 4068 	ldrh.w	r4, [r0, #104]	; 0x68
 800338a:	4294      	cmp	r4, r2
 800338c:	d825      	bhi.n	80033da <HAL_UART_Receive_IT+0xb6>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800338e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003392:	d120      	bne.n	80033d6 <HAL_UART_Receive_IT+0xb2>
 8003394:	6903      	ldr	r3, [r0, #16]
 8003396:	b9f3      	cbnz	r3, 80033d6 <HAL_UART_Receive_IT+0xb2>
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8003398:	4b1a      	ldr	r3, [pc, #104]	; (8003404 <HAL_UART_Receive_IT+0xe0>)
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800339a:	680a      	ldr	r2, [r1, #0]
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800339c:	66c3      	str	r3, [r0, #108]	; 0x6c
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800339e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
      __HAL_UNLOCK(huart);
 80033a2:	2300      	movs	r3, #0
 80033a4:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80033a8:	600a      	str	r2, [r1, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80033aa:	688a      	ldr	r2, [r1, #8]
 80033ac:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80033b0:	608a      	str	r2, [r1, #8]
    return HAL_OK;
 80033b2:	4618      	mov	r0, r3
}
 80033b4:	bd10      	pop	{r4, pc}
    UART_MASK_COMPUTATION(huart);
 80033b6:	21ff      	movs	r1, #255	; 0xff
 80033b8:	e7d4      	b.n	8003364 <HAL_UART_Receive_IT+0x40>
 80033ba:	b923      	cbnz	r3, 80033c6 <HAL_UART_Receive_IT+0xa2>
 80033bc:	6901      	ldr	r1, [r0, #16]
 80033be:	2900      	cmp	r1, #0
 80033c0:	d0f9      	beq.n	80033b6 <HAL_UART_Receive_IT+0x92>
 80033c2:	217f      	movs	r1, #127	; 0x7f
 80033c4:	e7ce      	b.n	8003364 <HAL_UART_Receive_IT+0x40>
 80033c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80033ca:	d1cb      	bne.n	8003364 <HAL_UART_Receive_IT+0x40>
 80033cc:	6901      	ldr	r1, [r0, #16]
 80033ce:	2900      	cmp	r1, #0
 80033d0:	d0f7      	beq.n	80033c2 <HAL_UART_Receive_IT+0x9e>
 80033d2:	213f      	movs	r1, #63	; 0x3f
 80033d4:	e7c6      	b.n	8003364 <HAL_UART_Receive_IT+0x40>
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80033d6:	4b0c      	ldr	r3, [pc, #48]	; (8003408 <HAL_UART_Receive_IT+0xe4>)
 80033d8:	e7df      	b.n	800339a <HAL_UART_Receive_IT+0x76>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033de:	d10b      	bne.n	80033f8 <HAL_UART_Receive_IT+0xd4>
 80033e0:	6903      	ldr	r3, [r0, #16]
 80033e2:	b94b      	cbnz	r3, 80033f8 <HAL_UART_Receive_IT+0xd4>
        huart->RxISR = UART_RxISR_16BIT;
 80033e4:	4b09      	ldr	r3, [pc, #36]	; (800340c <HAL_UART_Receive_IT+0xe8>)
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80033e6:	680a      	ldr	r2, [r1, #0]
        huart->RxISR = UART_RxISR_8BIT;
 80033e8:	66c3      	str	r3, [r0, #108]	; 0x6c
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80033ea:	f442 7290 	orr.w	r2, r2, #288	; 0x120
      __HAL_UNLOCK(huart);
 80033ee:	2300      	movs	r3, #0
 80033f0:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80033f4:	600a      	str	r2, [r1, #0]
 80033f6:	e7dc      	b.n	80033b2 <HAL_UART_Receive_IT+0x8e>
        huart->RxISR = UART_RxISR_8BIT;
 80033f8:	4b05      	ldr	r3, [pc, #20]	; (8003410 <HAL_UART_Receive_IT+0xec>)
 80033fa:	e7f4      	b.n	80033e6 <HAL_UART_Receive_IT+0xc2>
      return HAL_ERROR;
 80033fc:	2001      	movs	r0, #1
 80033fe:	e7d9      	b.n	80033b4 <HAL_UART_Receive_IT+0x90>
    return HAL_BUSY;
 8003400:	2002      	movs	r0, #2
 8003402:	e7d7      	b.n	80033b4 <HAL_UART_Receive_IT+0x90>
 8003404:	0800363d 	.word	0x0800363d
 8003408:	08003599 	.word	0x08003599
 800340c:	0800353f 	.word	0x0800353f
 8003410:	080034e3 	.word	0x080034e3

08003414 <HAL_UART_Transmit_DMA>:
{
 8003414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003416:	4604      	mov	r4, r0
 8003418:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800341a:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
 800341e:	2f20      	cmp	r7, #32
 8003420:	d13a      	bne.n	8003498 <HAL_UART_Transmit_DMA+0x84>
    if ((pData == NULL) || (Size == 0U))
 8003422:	b361      	cbz	r1, 800347e <HAL_UART_Transmit_DMA+0x6a>
 8003424:	b35a      	cbz	r2, 800347e <HAL_UART_Transmit_DMA+0x6a>
    __HAL_LOCK(huart);
 8003426:	f894 207c 	ldrb.w	r2, [r4, #124]	; 0x7c
 800342a:	2a01      	cmp	r2, #1
 800342c:	d034      	beq.n	8003498 <HAL_UART_Transmit_DMA+0x84>
    if (huart->hdmatx != NULL)
 800342e:	6f60      	ldr	r0, [r4, #116]	; 0x74
    huart->TxXferCount = Size;
 8003430:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    __HAL_LOCK(huart);
 8003434:	2501      	movs	r5, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003436:	2600      	movs	r6, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003438:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800343a:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
    __HAL_LOCK(huart);
 800343e:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
    huart->pTxBuffPtr  = pData;
 8003442:	6521      	str	r1, [r4, #80]	; 0x50
    huart->TxXferSize  = Size;
 8003444:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003448:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
    if (huart->hdmatx != NULL)
 800344c:	b1c8      	cbz	r0, 8003482 <HAL_UART_Transmit_DMA+0x6e>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800344e:	f8df c04c 	ldr.w	ip, [pc, #76]	; 800349c <HAL_UART_Transmit_DMA+0x88>
 8003452:	6822      	ldr	r2, [r4, #0]
 8003454:	f8c0 c02c 	str.w	ip, [r0, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003458:	f8df c044 	ldr.w	ip, [pc, #68]	; 80034a0 <HAL_UART_Transmit_DMA+0x8c>
 800345c:	f8c0 c030 	str.w	ip, [r0, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003460:	f8df c040 	ldr.w	ip, [pc, #64]	; 80034a4 <HAL_UART_Transmit_DMA+0x90>
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8003464:	3228      	adds	r2, #40	; 0x28
      huart->hdmatx->XferAbortCallback = NULL;
 8003466:	e9c0 c60d 	strd	ip, r6, [r0, #52]	; 0x34
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800346a:	f7ff fcab 	bl	8002dc4 <HAL_DMA_Start_IT>
 800346e:	b140      	cbz	r0, 8003482 <HAL_UART_Transmit_DMA+0x6e>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003470:	2310      	movs	r3, #16
 8003472:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        __HAL_UNLOCK(huart);
 8003476:	f884 607c 	strb.w	r6, [r4, #124]	; 0x7c
        huart->gState = HAL_UART_STATE_READY;
 800347a:	f8c4 7080 	str.w	r7, [r4, #128]	; 0x80
      return HAL_ERROR;
 800347e:	2001      	movs	r0, #1
 8003480:	e009      	b.n	8003496 <HAL_UART_Transmit_DMA+0x82>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8003482:	6823      	ldr	r3, [r4, #0]
 8003484:	2240      	movs	r2, #64	; 0x40
 8003486:	621a      	str	r2, [r3, #32]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003488:	689a      	ldr	r2, [r3, #8]
    __HAL_UNLOCK(huart);
 800348a:	2000      	movs	r0, #0
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800348c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    __HAL_UNLOCK(huart);
 8003490:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003494:	609a      	str	r2, [r3, #8]
}
 8003496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8003498:	2002      	movs	r0, #2
 800349a:	e7fc      	b.n	8003496 <HAL_UART_Transmit_DMA+0x82>
 800349c:	080034a9 	.word	0x080034a9
 80034a0:	080034d9 	.word	0x080034d9
 80034a4:	080036df 	.word	0x080036df

080034a8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80034a8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80034aa:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80034ac:	6a82      	ldr	r2, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f013 0320 	ands.w	r3, r3, #32
 80034b4:	d10b      	bne.n	80034ce <UART_DMATransmitCplt+0x26>
  {
    huart->TxXferCount = 0U;
 80034b6:	f8a2 3056 	strh.w	r3, [r2, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80034ba:	6813      	ldr	r3, [r2, #0]
 80034bc:	689a      	ldr	r2, [r3, #8]
 80034be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034c2:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034ca:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80034cc:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 80034ce:	4610      	mov	r0, r2
 80034d0:	f7fd fd92 	bl	8000ff8 <HAL_UART_TxCpltCallback>
}
 80034d4:	e7fa      	b.n	80034cc <UART_DMATransmitCplt+0x24>

080034d6 <HAL_UART_TxHalfCpltCallback>:
 80034d6:	4770      	bx	lr

080034d8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80034d8:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80034da:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80034dc:	f7ff fffb 	bl	80034d6 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80034e0:	bd08      	pop	{r3, pc}

080034e2 <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80034e2:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
 80034e6:	6802      	ldr	r2, [r0, #0]
 80034e8:	2922      	cmp	r1, #34	; 0x22
{
 80034ea:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80034ec:	d122      	bne.n	8003534 <UART_RxISR_8BIT+0x52>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80034ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80034f0:	f890 4060 	ldrb.w	r4, [r0, #96]	; 0x60
 80034f4:	6d81      	ldr	r1, [r0, #88]	; 0x58
 80034f6:	4022      	ands	r2, r4
 80034f8:	700a      	strb	r2, [r1, #0]
    huart->pRxBuffPtr++;
 80034fa:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80034fc:	3201      	adds	r2, #1
 80034fe:	6582      	str	r2, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8003500:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
 8003504:	3a01      	subs	r2, #1
 8003506:	b292      	uxth	r2, r2
 8003508:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800350c:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
 8003510:	b292      	uxth	r2, r2
 8003512:	b972      	cbnz	r2, 8003532 <UART_RxISR_8BIT+0x50>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003514:	6801      	ldr	r1, [r0, #0]
 8003516:	680c      	ldr	r4, [r1, #0]
 8003518:	f424 7490 	bic.w	r4, r4, #288	; 0x120
 800351c:	600c      	str	r4, [r1, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800351e:	688c      	ldr	r4, [r1, #8]
 8003520:	f024 0401 	bic.w	r4, r4, #1
 8003524:	608c      	str	r4, [r1, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003526:	2120      	movs	r1, #32
 8003528:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800352c:	66c2      	str	r2, [r0, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800352e:	f7fd fd4d 	bl	8000fcc <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003532:	bd10      	pop	{r4, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003534:	6993      	ldr	r3, [r2, #24]
 8003536:	f043 0308 	orr.w	r3, r3, #8
 800353a:	6193      	str	r3, [r2, #24]
}
 800353c:	e7f9      	b.n	8003532 <UART_RxISR_8BIT+0x50>

0800353e <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800353e:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
 8003542:	6802      	ldr	r2, [r0, #0]
 8003544:	2922      	cmp	r1, #34	; 0x22
{
 8003546:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003548:	d120      	bne.n	800358c <UART_RxISR_16BIT+0x4e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800354a:	6a54      	ldr	r4, [r2, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
    *tmp = (uint16_t)(uhdata & uhMask);
 800354c:	f8b0 1060 	ldrh.w	r1, [r0, #96]	; 0x60
 8003550:	400c      	ands	r4, r1
 8003552:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8003554:	f821 4b02 	strh.w	r4, [r1], #2
    huart->pRxBuffPtr += 2U;
 8003558:	6581      	str	r1, [r0, #88]	; 0x58
    huart->RxXferCount--;
 800355a:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
 800355e:	3901      	subs	r1, #1
 8003560:	b289      	uxth	r1, r1
 8003562:	f8a0 105e 	strh.w	r1, [r0, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8003566:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
 800356a:	b289      	uxth	r1, r1
 800356c:	b969      	cbnz	r1, 800358a <UART_RxISR_16BIT+0x4c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800356e:	6814      	ldr	r4, [r2, #0]
 8003570:	f424 7490 	bic.w	r4, r4, #288	; 0x120
 8003574:	6014      	str	r4, [r2, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003576:	6894      	ldr	r4, [r2, #8]
 8003578:	f024 0401 	bic.w	r4, r4, #1
 800357c:	6094      	str	r4, [r2, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800357e:	2220      	movs	r2, #32
 8003580:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003584:	66c1      	str	r1, [r0, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003586:	f7fd fd21 	bl	8000fcc <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800358a:	bd10      	pop	{r4, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800358c:	6993      	ldr	r3, [r2, #24]
 800358e:	f043 0308 	orr.w	r3, r3, #8
 8003592:	6193      	str	r3, [r2, #24]
}
 8003594:	e7f9      	b.n	800358a <UART_RxISR_16BIT+0x4c>
	...

08003598 <UART_RxISR_8BIT_FIFOEN>:
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003598:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800359c:	2b22      	cmp	r3, #34	; 0x22
{
 800359e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035a2:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80035a4:	d13f      	bne.n	8003626 <UART_RxISR_8BIT_FIFOEN+0x8e>
  uint16_t  uhMask = huart->Mask;
 80035a6:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80035aa:	f8b0 5068 	ldrh.w	r5, [r0, #104]	; 0x68
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80035ae:	4f21      	ldr	r7, [pc, #132]	; (8003634 <UART_RxISR_8BIT_FIFOEN+0x9c>)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80035b0:	f04f 0820 	mov.w	r8, #32
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80035b4:	b9a5      	cbnz	r5, 80035e0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80035b6:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80035ba:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80035bc:	b173      	cbz	r3, 80035dc <UART_RxISR_8BIT_FIFOEN+0x44>
 80035be:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d90a      	bls.n	80035dc <UART_RxISR_8BIT_FIFOEN+0x44>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80035c6:	6823      	ldr	r3, [r4, #0]
 80035c8:	689a      	ldr	r2, [r3, #8]
 80035ca:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80035ce:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80035d0:	4a19      	ldr	r2, [pc, #100]	; (8003638 <UART_RxISR_8BIT_FIFOEN+0xa0>)
 80035d2:	66e2      	str	r2, [r4, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	f042 0220 	orr.w	r2, r2, #32
 80035da:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80035dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80035e0:	6823      	ldr	r3, [r4, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80035e2:	6da2      	ldr	r2, [r4, #88]	; 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80035e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80035e6:	4033      	ands	r3, r6
 80035e8:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 80035ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80035ec:	3301      	adds	r3, #1
 80035ee:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 80035f0:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80035f4:	3b01      	subs	r3, #1
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      if (huart->RxXferCount == 0U)
 80035fc:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8003600:	b29b      	uxth	r3, r3
 8003602:	b96b      	cbnz	r3, 8003620 <UART_RxISR_8BIT_FIFOEN+0x88>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003604:	6822      	ldr	r2, [r4, #0]
 8003606:	6811      	ldr	r1, [r2, #0]
 8003608:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800360c:	6011      	str	r1, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800360e:	6891      	ldr	r1, [r2, #8]
 8003610:	4039      	ands	r1, r7
 8003612:	6091      	str	r1, [r2, #8]
        HAL_UART_RxCpltCallback(huart);
 8003614:	4620      	mov	r0, r4
        huart->RxState = HAL_UART_STATE_READY;
 8003616:	f8c4 8084 	str.w	r8, [r4, #132]	; 0x84
        huart->RxISR = NULL;
 800361a:	66e3      	str	r3, [r4, #108]	; 0x6c
        HAL_UART_RxCpltCallback(huart);
 800361c:	f7fd fcd6 	bl	8000fcc <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8003620:	3d01      	subs	r5, #1
 8003622:	b2ad      	uxth	r5, r5
 8003624:	e7c6      	b.n	80035b4 <UART_RxISR_8BIT_FIFOEN+0x1c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003626:	6802      	ldr	r2, [r0, #0]
 8003628:	6993      	ldr	r3, [r2, #24]
 800362a:	f043 0308 	orr.w	r3, r3, #8
 800362e:	6193      	str	r3, [r2, #24]
}
 8003630:	e7d4      	b.n	80035dc <UART_RxISR_8BIT_FIFOEN+0x44>
 8003632:	bf00      	nop
 8003634:	effffffe 	.word	0xeffffffe
 8003638:	080034e3 	.word	0x080034e3

0800363c <UART_RxISR_16BIT_FIFOEN>:
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800363c:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8003640:	2b22      	cmp	r3, #34	; 0x22
{
 8003642:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003646:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003648:	d13d      	bne.n	80036c6 <UART_RxISR_16BIT_FIFOEN+0x8a>
  uint16_t  uhMask = huart->Mask;
 800364a:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800364e:	f8b0 5068 	ldrh.w	r5, [r0, #104]	; 0x68
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003652:	4f20      	ldr	r7, [pc, #128]	; (80036d4 <UART_RxISR_16BIT_FIFOEN+0x98>)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003654:	f04f 0820 	mov.w	r8, #32
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8003658:	b9a5      	cbnz	r5, 8003684 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800365a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800365e:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8003660:	b173      	cbz	r3, 8003680 <UART_RxISR_16BIT_FIFOEN+0x44>
 8003662:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8003666:	429a      	cmp	r2, r3
 8003668:	d90a      	bls.n	8003680 <UART_RxISR_16BIT_FIFOEN+0x44>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800366a:	6823      	ldr	r3, [r4, #0]
 800366c:	689a      	ldr	r2, [r3, #8]
 800366e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003672:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8003674:	4a18      	ldr	r2, [pc, #96]	; (80036d8 <UART_RxISR_16BIT_FIFOEN+0x9c>)
 8003676:	66e2      	str	r2, [r4, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	f042 0220 	orr.w	r2, r2, #32
 800367e:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003684:	6823      	ldr	r3, [r4, #0]
      *tmp = (uint16_t)(uhdata & uhMask);
 8003686:	6da2      	ldr	r2, [r4, #88]	; 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003688:	6a59      	ldr	r1, [r3, #36]	; 0x24
      *tmp = (uint16_t)(uhdata & uhMask);
 800368a:	4031      	ands	r1, r6
 800368c:	f822 1b02 	strh.w	r1, [r2], #2
      huart->pRxBuffPtr += 2U;
 8003690:	65a2      	str	r2, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8003692:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
 8003696:	3a01      	subs	r2, #1
 8003698:	b292      	uxth	r2, r2
 800369a:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
      if (huart->RxXferCount == 0U)
 800369e:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
 80036a2:	b292      	uxth	r2, r2
 80036a4:	b962      	cbnz	r2, 80036c0 <UART_RxISR_16BIT_FIFOEN+0x84>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80036a6:	6819      	ldr	r1, [r3, #0]
 80036a8:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80036ac:	6019      	str	r1, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80036ae:	6899      	ldr	r1, [r3, #8]
 80036b0:	4039      	ands	r1, r7
 80036b2:	6099      	str	r1, [r3, #8]
        HAL_UART_RxCpltCallback(huart);
 80036b4:	4620      	mov	r0, r4
        huart->RxState = HAL_UART_STATE_READY;
 80036b6:	f8c4 8084 	str.w	r8, [r4, #132]	; 0x84
        huart->RxISR = NULL;
 80036ba:	66e2      	str	r2, [r4, #108]	; 0x6c
        HAL_UART_RxCpltCallback(huart);
 80036bc:	f7fd fc86 	bl	8000fcc <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80036c0:	3d01      	subs	r5, #1
 80036c2:	b2ad      	uxth	r5, r5
 80036c4:	e7c8      	b.n	8003658 <UART_RxISR_16BIT_FIFOEN+0x1c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80036c6:	6802      	ldr	r2, [r0, #0]
 80036c8:	6993      	ldr	r3, [r2, #24]
 80036ca:	f043 0308 	orr.w	r3, r3, #8
 80036ce:	6193      	str	r3, [r2, #24]
}
 80036d0:	e7d6      	b.n	8003680 <UART_RxISR_16BIT_FIFOEN+0x44>
 80036d2:	bf00      	nop
 80036d4:	effffffe 	.word	0xeffffffe
 80036d8:	0800353f 	.word	0x0800353f

080036dc <HAL_UART_ErrorCallback>:
 80036dc:	4770      	bx	lr

080036de <UART_DMAError>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80036de:	6a81      	ldr	r1, [r0, #40]	; 0x28
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80036e0:	680b      	ldr	r3, [r1, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 80036e2:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80036e6:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
{
 80036ea:	b510      	push	{r4, lr}
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80036ec:	689c      	ldr	r4, [r3, #8]
 80036ee:	0624      	lsls	r4, r4, #24
 80036f0:	d50f      	bpl.n	8003712 <UART_DMAError+0x34>
 80036f2:	2a21      	cmp	r2, #33	; 0x21
 80036f4:	d10d      	bne.n	8003712 <UART_DMAError+0x34>
    huart->TxXferCount = 0U;
 80036f6:	2200      	movs	r2, #0
 80036f8:	f8a1 2056 	strh.w	r2, [r1, #86]	; 0x56
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003702:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8003704:	689a      	ldr	r2, [r3, #8]
 8003706:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800370a:	609a      	str	r2, [r3, #8]
  huart->gState = HAL_UART_STATE_READY;
 800370c:	2220      	movs	r2, #32
 800370e:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	065b      	lsls	r3, r3, #25
 8003716:	d507      	bpl.n	8003728 <UART_DMAError+0x4a>
 8003718:	2822      	cmp	r0, #34	; 0x22
 800371a:	d105      	bne.n	8003728 <UART_DMAError+0x4a>
    huart->RxXferCount = 0U;
 800371c:	2300      	movs	r3, #0
 800371e:	f8a1 305e 	strh.w	r3, [r1, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8003722:	4608      	mov	r0, r1
 8003724:	f7ff fded 	bl	8003302 <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003728:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800372c:	f043 0310 	orr.w	r3, r3, #16
 8003730:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  HAL_UART_ErrorCallback(huart);
 8003734:	4608      	mov	r0, r1
 8003736:	f7ff ffd1 	bl	80036dc <HAL_UART_ErrorCallback>
}
 800373a:	bd10      	pop	{r4, pc}

0800373c <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800373c:	6802      	ldr	r2, [r0, #0]
 800373e:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003740:	6811      	ldr	r1, [r2, #0]
{
 8003742:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == 0U)
 8003744:	f640 050f 	movw	r5, #2063	; 0x80f
 8003748:	422b      	tst	r3, r5
{
 800374a:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800374c:	6890      	ldr	r0, [r2, #8]
  if (errorflags == 0U)
 800374e:	d10b      	bne.n	8003768 <HAL_UART_IRQHandler+0x2c>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003750:	069e      	lsls	r6, r3, #26
 8003752:	f140 8083 	bpl.w	800385c <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003756:	068d      	lsls	r5, r1, #26
 8003758:	d401      	bmi.n	800375e <HAL_UART_IRQHandler+0x22>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800375a:	00c6      	lsls	r6, r0, #3
 800375c:	d57e      	bpl.n	800385c <HAL_UART_IRQHandler+0x120>
      if (huart->RxISR != NULL)
 800375e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    if (huart->TxISR != NULL)
 8003760:	2b00      	cmp	r3, #0
 8003762:	d075      	beq.n	8003850 <HAL_UART_IRQHandler+0x114>
      huart->TxISR(huart);
 8003764:	4620      	mov	r0, r4
 8003766:	e06d      	b.n	8003844 <HAL_UART_IRQHandler+0x108>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003768:	4e58      	ldr	r6, [pc, #352]	; (80038cc <HAL_UART_IRQHandler+0x190>)
 800376a:	4006      	ands	r6, r0
 800376c:	d102      	bne.n	8003774 <HAL_UART_IRQHandler+0x38>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800376e:	4d58      	ldr	r5, [pc, #352]	; (80038d0 <HAL_UART_IRQHandler+0x194>)
 8003770:	4229      	tst	r1, r5
 8003772:	d073      	beq.n	800385c <HAL_UART_IRQHandler+0x120>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003774:	07dd      	lsls	r5, r3, #31
 8003776:	d509      	bpl.n	800378c <HAL_UART_IRQHandler+0x50>
 8003778:	05cd      	lsls	r5, r1, #23
 800377a:	d507      	bpl.n	800378c <HAL_UART_IRQHandler+0x50>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800377c:	2501      	movs	r5, #1
 800377e:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003780:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 8003784:	f045 0501 	orr.w	r5, r5, #1
 8003788:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800378c:	079d      	lsls	r5, r3, #30
 800378e:	d509      	bpl.n	80037a4 <HAL_UART_IRQHandler+0x68>
 8003790:	07c5      	lsls	r5, r0, #31
 8003792:	d507      	bpl.n	80037a4 <HAL_UART_IRQHandler+0x68>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003794:	2502      	movs	r5, #2
 8003796:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003798:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 800379c:	f045 0504 	orr.w	r5, r5, #4
 80037a0:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80037a4:	075d      	lsls	r5, r3, #29
 80037a6:	d509      	bpl.n	80037bc <HAL_UART_IRQHandler+0x80>
 80037a8:	07c5      	lsls	r5, r0, #31
 80037aa:	d507      	bpl.n	80037bc <HAL_UART_IRQHandler+0x80>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80037ac:	2504      	movs	r5, #4
 80037ae:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80037b0:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 80037b4:	f045 0502 	orr.w	r5, r5, #2
 80037b8:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_ORE) != 0U)
 80037bc:	071d      	lsls	r5, r3, #28
 80037be:	d50a      	bpl.n	80037d6 <HAL_UART_IRQHandler+0x9a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80037c0:	068d      	lsls	r5, r1, #26
 80037c2:	d400      	bmi.n	80037c6 <HAL_UART_IRQHandler+0x8a>
 80037c4:	b13e      	cbz	r6, 80037d6 <HAL_UART_IRQHandler+0x9a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80037c6:	2508      	movs	r5, #8
 80037c8:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80037ca:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 80037ce:	f045 0508 	orr.w	r5, r5, #8
 80037d2:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80037d6:	051e      	lsls	r6, r3, #20
 80037d8:	d50a      	bpl.n	80037f0 <HAL_UART_IRQHandler+0xb4>
 80037da:	014d      	lsls	r5, r1, #5
 80037dc:	d508      	bpl.n	80037f0 <HAL_UART_IRQHandler+0xb4>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80037de:	f44f 6500 	mov.w	r5, #2048	; 0x800
 80037e2:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80037e4:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 80037e8:	f042 0220 	orr.w	r2, r2, #32
 80037ec:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80037f0:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 80037f4:	b362      	cbz	r2, 8003850 <HAL_UART_IRQHandler+0x114>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80037f6:	069e      	lsls	r6, r3, #26
 80037f8:	d507      	bpl.n	800380a <HAL_UART_IRQHandler+0xce>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80037fa:	068d      	lsls	r5, r1, #26
 80037fc:	d401      	bmi.n	8003802 <HAL_UART_IRQHandler+0xc6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80037fe:	00c0      	lsls	r0, r0, #3
 8003800:	d503      	bpl.n	800380a <HAL_UART_IRQHandler+0xce>
        if (huart->RxISR != NULL)
 8003802:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8003804:	b10b      	cbz	r3, 800380a <HAL_UART_IRQHandler+0xce>
          huart->RxISR(huart);
 8003806:	4620      	mov	r0, r4
 8003808:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800380a:	6822      	ldr	r2, [r4, #0]
      errorcode = huart->ErrorCode;
 800380c:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003810:	6892      	ldr	r2, [r2, #8]
 8003812:	0651      	lsls	r1, r2, #25
        UART_EndRxTransfer(huart);
 8003814:	4620      	mov	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003816:	d402      	bmi.n	800381e <HAL_UART_IRQHandler+0xe2>
 8003818:	f015 0528 	ands.w	r5, r5, #40	; 0x28
 800381c:	d019      	beq.n	8003852 <HAL_UART_IRQHandler+0x116>
        UART_EndRxTransfer(huart);
 800381e:	f7ff fd70 	bl	8003302 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003822:	6823      	ldr	r3, [r4, #0]
 8003824:	689a      	ldr	r2, [r3, #8]
 8003826:	0652      	lsls	r2, r2, #25
 8003828:	d50f      	bpl.n	800384a <HAL_UART_IRQHandler+0x10e>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800382a:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 800382c:	6fa0      	ldr	r0, [r4, #120]	; 0x78
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800382e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003832:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8003834:	b148      	cbz	r0, 800384a <HAL_UART_IRQHandler+0x10e>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003836:	4b27      	ldr	r3, [pc, #156]	; (80038d4 <HAL_UART_IRQHandler+0x198>)
 8003838:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800383a:	f7ff fb05 	bl	8002e48 <HAL_DMA_Abort_IT>
 800383e:	b138      	cbz	r0, 8003850 <HAL_UART_IRQHandler+0x114>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003840:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8003842:	6b83      	ldr	r3, [r0, #56]	; 0x38
}
 8003844:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003848:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 800384a:	4620      	mov	r0, r4
 800384c:	f7ff ff46 	bl	80036dc <HAL_UART_ErrorCallback>
}
 8003850:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8003852:	f7ff ff43 	bl	80036dc <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003856:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
 800385a:	e7f9      	b.n	8003850 <HAL_UART_IRQHandler+0x114>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800385c:	02de      	lsls	r6, r3, #11
 800385e:	d509      	bpl.n	8003874 <HAL_UART_IRQHandler+0x138>
 8003860:	0245      	lsls	r5, r0, #9
 8003862:	d507      	bpl.n	8003874 <HAL_UART_IRQHandler+0x138>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003864:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8003868:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800386a:	6213      	str	r3, [r2, #32]
}
 800386c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8003870:	f000 bdf2 	b.w	8004458 <HAL_UARTEx_WakeupCallback>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003874:	061e      	lsls	r6, r3, #24
 8003876:	d505      	bpl.n	8003884 <HAL_UART_IRQHandler+0x148>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003878:	060d      	lsls	r5, r1, #24
 800387a:	d401      	bmi.n	8003880 <HAL_UART_IRQHandler+0x144>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800387c:	0200      	lsls	r0, r0, #8
 800387e:	d501      	bpl.n	8003884 <HAL_UART_IRQHandler+0x148>
    if (huart->TxISR != NULL)
 8003880:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8003882:	e76d      	b.n	8003760 <HAL_UART_IRQHandler+0x24>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003884:	065e      	lsls	r6, r3, #25
 8003886:	d50e      	bpl.n	80038a6 <HAL_UART_IRQHandler+0x16a>
 8003888:	064d      	lsls	r5, r1, #25
 800388a:	d50c      	bpl.n	80038a6 <HAL_UART_IRQHandler+0x16a>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800388c:	6813      	ldr	r3, [r2, #0]
 800388e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003892:	6013      	str	r3, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8003894:	2320      	movs	r3, #32
 8003896:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  huart->TxISR = NULL;
 800389a:	2300      	movs	r3, #0
 800389c:	6723      	str	r3, [r4, #112]	; 0x70
  HAL_UART_TxCpltCallback(huart);
 800389e:	4620      	mov	r0, r4
 80038a0:	f7fd fbaa 	bl	8000ff8 <HAL_UART_TxCpltCallback>
 80038a4:	e7d4      	b.n	8003850 <HAL_UART_IRQHandler+0x114>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80038a6:	0218      	lsls	r0, r3, #8
 80038a8:	d506      	bpl.n	80038b8 <HAL_UART_IRQHandler+0x17c>
 80038aa:	004a      	lsls	r2, r1, #1
 80038ac:	d504      	bpl.n	80038b8 <HAL_UART_IRQHandler+0x17c>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80038ae:	4620      	mov	r0, r4
}
 80038b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80038b4:	f000 bdd2 	b.w	800445c <HAL_UARTEx_TxFifoEmptyCallback>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80038b8:	01db      	lsls	r3, r3, #7
 80038ba:	d5c9      	bpl.n	8003850 <HAL_UART_IRQHandler+0x114>
 80038bc:	2900      	cmp	r1, #0
 80038be:	dac7      	bge.n	8003850 <HAL_UART_IRQHandler+0x114>
    HAL_UARTEx_RxFifoFullCallback(huart);
 80038c0:	4620      	mov	r0, r4
}
 80038c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 80038c6:	f000 bdc8 	b.w	800445a <HAL_UARTEx_RxFifoFullCallback>
 80038ca:	bf00      	nop
 80038cc:	10000001 	.word	0x10000001
 80038d0:	04000120 	.word	0x04000120
 80038d4:	080038d9 	.word	0x080038d9

080038d8 <UART_DMAAbortOnError>:
{
 80038d8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80038da:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 80038dc:	2300      	movs	r3, #0
 80038de:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80038e2:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 80038e6:	f7ff fef9 	bl	80036dc <HAL_UART_ErrorCallback>
}
 80038ea:	bd08      	pop	{r3, pc}
 80038ec:	0000      	movs	r0, r0
	...

080038f0 <UART_SetConfig>:
  if (UART_INSTANCE_LOWPOWER(huart))
 80038f0:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80038f2:	69c1      	ldr	r1, [r0, #28]
 80038f4:	6882      	ldr	r2, [r0, #8]
{
 80038f6:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 80038fa:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80038fc:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80038fe:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003900:	4302      	orrs	r2, r0
 8003902:	6960      	ldr	r0, [r4, #20]
 8003904:	4302      	orrs	r2, r0
  tmpreg |= (uint32_t)huart->FifoMode;
 8003906:	6e60      	ldr	r0, [r4, #100]	; 0x64
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003908:	430a      	orrs	r2, r1
  tmpreg |= (uint32_t)huart->FifoMode;
 800390a:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800390c:	48ac      	ldr	r0, [pc, #688]	; (8003bc0 <UART_SetConfig+0x2d0>)
 800390e:	4028      	ands	r0, r5
 8003910:	4302      	orrs	r2, r0
 8003912:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003914:	685a      	ldr	r2, [r3, #4]
 8003916:	68e0      	ldr	r0, [r4, #12]
 8003918:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800391c:	4302      	orrs	r2, r0
 800391e:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003920:	4aa8      	ldr	r2, [pc, #672]	; (8003bc4 <UART_SetConfig+0x2d4>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003922:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003924:	4293      	cmp	r3, r2
    tmpreg |= huart->Init.OneBitSampling;
 8003926:	bf1c      	itt	ne
 8003928:	6a22      	ldrne	r2, [r4, #32]
 800392a:	4310      	orrne	r0, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800392c:	689a      	ldr	r2, [r3, #8]
 800392e:	f022 426e 	bic.w	r2, r2, #3992977408	; 0xee000000
 8003932:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8003936:	4302      	orrs	r2, r0
 8003938:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800393a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800393c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800393e:	f022 020f 	bic.w	r2, r2, #15
 8003942:	4302      	orrs	r2, r0
 8003944:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003946:	4aa0      	ldr	r2, [pc, #640]	; (8003bc8 <UART_SetConfig+0x2d8>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d11a      	bne.n	8003982 <UART_SetConfig+0x92>
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800394c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003950:	4a9e      	ldr	r2, [pc, #632]	; (8003bcc <UART_SetConfig+0x2dc>)
 8003952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003956:	f003 0303 	and.w	r3, r3, #3
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800395a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800395e:	5cd3      	ldrb	r3, [r2, r3]
 8003960:	f103 33ff 	add.w	r3, r3, #4294967295
 8003964:	f040 8334 	bne.w	8003fd0 <UART_SetConfig+0x6e0>
    switch (clocksource)
 8003968:	2b07      	cmp	r3, #7
 800396a:	f200 832e 	bhi.w	8003fca <UART_SetConfig+0x6da>
 800396e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003972:	022a      	.short	0x022a
 8003974:	032c0251 	.word	0x032c0251
 8003978:	032c0298 	.word	0x032c0298
 800397c:	032c032c 	.word	0x032c032c
 8003980:	02b1      	.short	0x02b1
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003982:	4a90      	ldr	r2, [pc, #576]	; (8003bc4 <UART_SetConfig+0x2d4>)
 8003984:	4293      	cmp	r3, r2
 8003986:	f040 83ef 	bne.w	8004168 <UART_SetConfig+0x878>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800398a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800398e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003992:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003996:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800399a:	f000 80ac 	beq.w	8003af6 <UART_SetConfig+0x206>
 800399e:	d80a      	bhi.n	80039b6 <UART_SetConfig+0xc6>
 80039a0:	b3c3      	cbz	r3, 8003a14 <UART_SetConfig+0x124>
        ret = HAL_ERROR;
 80039a2:	2201      	movs	r2, #1
  huart->NbTxDataToProcess = 1;
 80039a4:	2300      	movs	r3, #0
 80039a6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80039aa:	e9c4 131a 	strd	r1, r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 80039ae:	6723      	str	r3, [r4, #112]	; 0x70
}
 80039b0:	4610      	mov	r0, r2
 80039b2:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80039b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039ba:	d065      	beq.n	8003a88 <UART_SetConfig+0x198>
 80039bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80039c0:	d1ef      	bne.n	80039a2 <UART_SetConfig+0xb2>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80039c2:	2800      	cmp	r0, #0
 80039c4:	f000 80e7 	beq.w	8003b96 <UART_SetConfig+0x2a6>
 80039c8:	2801      	cmp	r0, #1
 80039ca:	f000 80e8 	beq.w	8003b9e <UART_SetConfig+0x2ae>
 80039ce:	2802      	cmp	r0, #2
 80039d0:	f000 80e9 	beq.w	8003ba6 <UART_SetConfig+0x2b6>
 80039d4:	2803      	cmp	r0, #3
 80039d6:	f000 80ea 	beq.w	8003bae <UART_SetConfig+0x2be>
 80039da:	2804      	cmp	r0, #4
 80039dc:	f000 80eb 	beq.w	8003bb6 <UART_SetConfig+0x2c6>
 80039e0:	2805      	cmp	r0, #5
 80039e2:	f000 810b 	beq.w	8003bfc <UART_SetConfig+0x30c>
 80039e6:	2806      	cmp	r0, #6
 80039e8:	f000 810c 	beq.w	8003c04 <UART_SetConfig+0x314>
 80039ec:	2807      	cmp	r0, #7
 80039ee:	f000 810d 	beq.w	8003c0c <UART_SetConfig+0x31c>
 80039f2:	2808      	cmp	r0, #8
 80039f4:	f000 810e 	beq.w	8003c14 <UART_SetConfig+0x324>
 80039f8:	2809      	cmp	r0, #9
 80039fa:	f000 810f 	beq.w	8003c1c <UART_SetConfig+0x32c>
 80039fe:	280a      	cmp	r0, #10
 8003a00:	f000 8110 	beq.w	8003c24 <UART_SetConfig+0x334>
 8003a04:	280b      	cmp	r0, #11
 8003a06:	f04f 0108 	mov.w	r1, #8
 8003a0a:	bf14      	ite	ne
 8003a0c:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 8003a10:	2080      	moveq	r0, #128	; 0x80
 8003a12:	e058      	b.n	8003ac6 <UART_SetConfig+0x1d6>
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003a14:	f7ff fbc2 	bl	800319c <HAL_RCC_GetPCLK1Freq>
 8003a18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003a1a:	b1fb      	cbz	r3, 8003a5c <UART_SetConfig+0x16c>
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d01f      	beq.n	8003a60 <UART_SetConfig+0x170>
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d01f      	beq.n	8003a64 <UART_SetConfig+0x174>
 8003a24:	2b03      	cmp	r3, #3
 8003a26:	d01f      	beq.n	8003a68 <UART_SetConfig+0x178>
 8003a28:	2b04      	cmp	r3, #4
 8003a2a:	d01f      	beq.n	8003a6c <UART_SetConfig+0x17c>
 8003a2c:	2b05      	cmp	r3, #5
 8003a2e:	d01f      	beq.n	8003a70 <UART_SetConfig+0x180>
 8003a30:	2b06      	cmp	r3, #6
 8003a32:	d01f      	beq.n	8003a74 <UART_SetConfig+0x184>
 8003a34:	2b07      	cmp	r3, #7
 8003a36:	d01f      	beq.n	8003a78 <UART_SetConfig+0x188>
 8003a38:	2b08      	cmp	r3, #8
 8003a3a:	d01f      	beq.n	8003a7c <UART_SetConfig+0x18c>
 8003a3c:	2b09      	cmp	r3, #9
 8003a3e:	d01f      	beq.n	8003a80 <UART_SetConfig+0x190>
 8003a40:	2b0a      	cmp	r3, #10
 8003a42:	d01f      	beq.n	8003a84 <UART_SetConfig+0x194>
 8003a44:	2b0b      	cmp	r3, #11
 8003a46:	bf14      	ite	ne
 8003a48:	2301      	movne	r3, #1
 8003a4a:	f44f 7380 	moveq.w	r3, #256	; 0x100
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a4e:	2100      	movs	r1, #0
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003a50:	fbb0 f0f3 	udiv	r0, r0, r3
    if (lpuart_ker_ck_pres != 0U)
 8003a54:	2800      	cmp	r0, #0
 8003a56:	d136      	bne.n	8003ac6 <UART_SetConfig+0x1d6>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	e7a3      	b.n	80039a4 <UART_SetConfig+0xb4>
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e7f6      	b.n	8003a4e <UART_SetConfig+0x15e>
 8003a60:	2302      	movs	r3, #2
 8003a62:	e7f4      	b.n	8003a4e <UART_SetConfig+0x15e>
 8003a64:	2304      	movs	r3, #4
 8003a66:	e7f2      	b.n	8003a4e <UART_SetConfig+0x15e>
 8003a68:	2306      	movs	r3, #6
 8003a6a:	e7f0      	b.n	8003a4e <UART_SetConfig+0x15e>
 8003a6c:	2308      	movs	r3, #8
 8003a6e:	e7ee      	b.n	8003a4e <UART_SetConfig+0x15e>
 8003a70:	230a      	movs	r3, #10
 8003a72:	e7ec      	b.n	8003a4e <UART_SetConfig+0x15e>
 8003a74:	230c      	movs	r3, #12
 8003a76:	e7ea      	b.n	8003a4e <UART_SetConfig+0x15e>
 8003a78:	2310      	movs	r3, #16
 8003a7a:	e7e8      	b.n	8003a4e <UART_SetConfig+0x15e>
 8003a7c:	2320      	movs	r3, #32
 8003a7e:	e7e6      	b.n	8003a4e <UART_SetConfig+0x15e>
 8003a80:	2340      	movs	r3, #64	; 0x40
 8003a82:	e7e4      	b.n	8003a4e <UART_SetConfig+0x15e>
 8003a84:	2380      	movs	r3, #128	; 0x80
 8003a86:	e7e2      	b.n	8003a4e <UART_SetConfig+0x15e>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003a88:	2800      	cmp	r0, #0
 8003a8a:	d06b      	beq.n	8003b64 <UART_SetConfig+0x274>
 8003a8c:	2801      	cmp	r0, #1
 8003a8e:	d06c      	beq.n	8003b6a <UART_SetConfig+0x27a>
 8003a90:	2802      	cmp	r0, #2
 8003a92:	d06d      	beq.n	8003b70 <UART_SetConfig+0x280>
 8003a94:	2803      	cmp	r0, #3
 8003a96:	f04f 0102 	mov.w	r1, #2
 8003a9a:	d06c      	beq.n	8003b76 <UART_SetConfig+0x286>
 8003a9c:	2804      	cmp	r0, #4
 8003a9e:	d06c      	beq.n	8003b7a <UART_SetConfig+0x28a>
 8003aa0:	2805      	cmp	r0, #5
 8003aa2:	d06c      	beq.n	8003b7e <UART_SetConfig+0x28e>
 8003aa4:	2806      	cmp	r0, #6
 8003aa6:	d06c      	beq.n	8003b82 <UART_SetConfig+0x292>
 8003aa8:	2807      	cmp	r0, #7
 8003aaa:	d06c      	beq.n	8003b86 <UART_SetConfig+0x296>
 8003aac:	2808      	cmp	r0, #8
 8003aae:	d06c      	beq.n	8003b8a <UART_SetConfig+0x29a>
 8003ab0:	2809      	cmp	r0, #9
 8003ab2:	d06c      	beq.n	8003b8e <UART_SetConfig+0x29e>
 8003ab4:	280a      	cmp	r0, #10
 8003ab6:	d06c      	beq.n	8003b92 <UART_SetConfig+0x2a2>
 8003ab8:	4b45      	ldr	r3, [pc, #276]	; (8003bd0 <UART_SetConfig+0x2e0>)
 8003aba:	f24f 4224 	movw	r2, #62500	; 0xf424
 8003abe:	280b      	cmp	r0, #11
 8003ac0:	bf14      	ite	ne
 8003ac2:	4618      	movne	r0, r3
 8003ac4:	4610      	moveq	r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003ac6:	6862      	ldr	r2, [r4, #4]
 8003ac8:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8003acc:	4283      	cmp	r3, r0
 8003ace:	f63f af68 	bhi.w	80039a2 <UART_SetConfig+0xb2>
 8003ad2:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8003ad6:	f63f af64 	bhi.w	80039a2 <UART_SetConfig+0xb2>
        switch (clocksource)
 8003ada:	2908      	cmp	r1, #8
 8003adc:	f200 8170 	bhi.w	8003dc0 <UART_SetConfig+0x4d0>
 8003ae0:	e8df f011 	tbh	[pc, r1, lsl #1]
 8003ae4:	016e00a4 	.word	0x016e00a4
 8003ae8:	016e00e0 	.word	0x016e00e0
 8003aec:	016e011c 	.word	0x016e011c
 8003af0:	016e016e 	.word	0x016e016e
 8003af4:	0135      	.short	0x0135
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003af6:	f7ff faf3 	bl	80030e0 <HAL_RCC_GetSysClockFreq>
 8003afa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003afc:	b1e3      	cbz	r3, 8003b38 <UART_SetConfig+0x248>
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d01c      	beq.n	8003b3c <UART_SetConfig+0x24c>
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d01c      	beq.n	8003b40 <UART_SetConfig+0x250>
 8003b06:	2b03      	cmp	r3, #3
 8003b08:	d01c      	beq.n	8003b44 <UART_SetConfig+0x254>
 8003b0a:	2b04      	cmp	r3, #4
 8003b0c:	d01c      	beq.n	8003b48 <UART_SetConfig+0x258>
 8003b0e:	2b05      	cmp	r3, #5
 8003b10:	d01c      	beq.n	8003b4c <UART_SetConfig+0x25c>
 8003b12:	2b06      	cmp	r3, #6
 8003b14:	d01c      	beq.n	8003b50 <UART_SetConfig+0x260>
 8003b16:	2b07      	cmp	r3, #7
 8003b18:	d01c      	beq.n	8003b54 <UART_SetConfig+0x264>
 8003b1a:	2b08      	cmp	r3, #8
 8003b1c:	d01c      	beq.n	8003b58 <UART_SetConfig+0x268>
 8003b1e:	2b09      	cmp	r3, #9
 8003b20:	d01c      	beq.n	8003b5c <UART_SetConfig+0x26c>
 8003b22:	2b0a      	cmp	r3, #10
 8003b24:	d01c      	beq.n	8003b60 <UART_SetConfig+0x270>
 8003b26:	2b0b      	cmp	r3, #11
 8003b28:	bf14      	ite	ne
 8003b2a:	2301      	movne	r3, #1
 8003b2c:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8003b30:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 8003b34:	2104      	movs	r1, #4
 8003b36:	e78d      	b.n	8003a54 <UART_SetConfig+0x164>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e7f9      	b.n	8003b30 <UART_SetConfig+0x240>
 8003b3c:	2302      	movs	r3, #2
 8003b3e:	e7f7      	b.n	8003b30 <UART_SetConfig+0x240>
 8003b40:	2304      	movs	r3, #4
 8003b42:	e7f5      	b.n	8003b30 <UART_SetConfig+0x240>
 8003b44:	2306      	movs	r3, #6
 8003b46:	e7f3      	b.n	8003b30 <UART_SetConfig+0x240>
 8003b48:	2308      	movs	r3, #8
 8003b4a:	e7f1      	b.n	8003b30 <UART_SetConfig+0x240>
 8003b4c:	230a      	movs	r3, #10
 8003b4e:	e7ef      	b.n	8003b30 <UART_SetConfig+0x240>
 8003b50:	230c      	movs	r3, #12
 8003b52:	e7ed      	b.n	8003b30 <UART_SetConfig+0x240>
 8003b54:	2310      	movs	r3, #16
 8003b56:	e7eb      	b.n	8003b30 <UART_SetConfig+0x240>
 8003b58:	2320      	movs	r3, #32
 8003b5a:	e7e9      	b.n	8003b30 <UART_SetConfig+0x240>
 8003b5c:	2340      	movs	r3, #64	; 0x40
 8003b5e:	e7e7      	b.n	8003b30 <UART_SetConfig+0x240>
 8003b60:	2380      	movs	r3, #128	; 0x80
 8003b62:	e7e5      	b.n	8003b30 <UART_SetConfig+0x240>
 8003b64:	2102      	movs	r1, #2
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003b66:	481a      	ldr	r0, [pc, #104]	; (8003bd0 <UART_SetConfig+0x2e0>)
 8003b68:	e7ad      	b.n	8003ac6 <UART_SetConfig+0x1d6>
 8003b6a:	2102      	movs	r1, #2
 8003b6c:	4819      	ldr	r0, [pc, #100]	; (8003bd4 <UART_SetConfig+0x2e4>)
 8003b6e:	e7aa      	b.n	8003ac6 <UART_SetConfig+0x1d6>
 8003b70:	4601      	mov	r1, r0
 8003b72:	4819      	ldr	r0, [pc, #100]	; (8003bd8 <UART_SetConfig+0x2e8>)
 8003b74:	e7a7      	b.n	8003ac6 <UART_SetConfig+0x1d6>
 8003b76:	4819      	ldr	r0, [pc, #100]	; (8003bdc <UART_SetConfig+0x2ec>)
 8003b78:	e7a5      	b.n	8003ac6 <UART_SetConfig+0x1d6>
 8003b7a:	4819      	ldr	r0, [pc, #100]	; (8003be0 <UART_SetConfig+0x2f0>)
 8003b7c:	e7a3      	b.n	8003ac6 <UART_SetConfig+0x1d6>
 8003b7e:	4819      	ldr	r0, [pc, #100]	; (8003be4 <UART_SetConfig+0x2f4>)
 8003b80:	e7a1      	b.n	8003ac6 <UART_SetConfig+0x1d6>
 8003b82:	4819      	ldr	r0, [pc, #100]	; (8003be8 <UART_SetConfig+0x2f8>)
 8003b84:	e79f      	b.n	8003ac6 <UART_SetConfig+0x1d6>
 8003b86:	4819      	ldr	r0, [pc, #100]	; (8003bec <UART_SetConfig+0x2fc>)
 8003b88:	e79d      	b.n	8003ac6 <UART_SetConfig+0x1d6>
 8003b8a:	4819      	ldr	r0, [pc, #100]	; (8003bf0 <UART_SetConfig+0x300>)
 8003b8c:	e79b      	b.n	8003ac6 <UART_SetConfig+0x1d6>
 8003b8e:	4819      	ldr	r0, [pc, #100]	; (8003bf4 <UART_SetConfig+0x304>)
 8003b90:	e799      	b.n	8003ac6 <UART_SetConfig+0x1d6>
 8003b92:	4819      	ldr	r0, [pc, #100]	; (8003bf8 <UART_SetConfig+0x308>)
 8003b94:	e797      	b.n	8003ac6 <UART_SetConfig+0x1d6>
 8003b96:	2108      	movs	r1, #8
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003b98:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003b9c:	e793      	b.n	8003ac6 <UART_SetConfig+0x1d6>
 8003b9e:	2108      	movs	r1, #8
 8003ba0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003ba4:	e78f      	b.n	8003ac6 <UART_SetConfig+0x1d6>
 8003ba6:	2108      	movs	r1, #8
 8003ba8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003bac:	e78b      	b.n	8003ac6 <UART_SetConfig+0x1d6>
 8003bae:	2108      	movs	r1, #8
 8003bb0:	f241 5055 	movw	r0, #5461	; 0x1555
 8003bb4:	e787      	b.n	8003ac6 <UART_SetConfig+0x1d6>
 8003bb6:	2108      	movs	r1, #8
 8003bb8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003bbc:	e783      	b.n	8003ac6 <UART_SetConfig+0x1d6>
 8003bbe:	bf00      	nop
 8003bc0:	cfff69f3 	.word	0xcfff69f3
 8003bc4:	40008000 	.word	0x40008000
 8003bc8:	40013800 	.word	0x40013800
 8003bcc:	080071c0 	.word	0x080071c0
 8003bd0:	00f42400 	.word	0x00f42400
 8003bd4:	007a1200 	.word	0x007a1200
 8003bd8:	003d0900 	.word	0x003d0900
 8003bdc:	0028b0aa 	.word	0x0028b0aa
 8003be0:	001e8480 	.word	0x001e8480
 8003be4:	00186a00 	.word	0x00186a00
 8003be8:	00145855 	.word	0x00145855
 8003bec:	000f4240 	.word	0x000f4240
 8003bf0:	0007a120 	.word	0x0007a120
 8003bf4:	0003d090 	.word	0x0003d090
 8003bf8:	0001e848 	.word	0x0001e848
 8003bfc:	2108      	movs	r1, #8
 8003bfe:	f640 40cc 	movw	r0, #3276	; 0xccc
 8003c02:	e760      	b.n	8003ac6 <UART_SetConfig+0x1d6>
 8003c04:	2108      	movs	r1, #8
 8003c06:	f640 20aa 	movw	r0, #2730	; 0xaaa
 8003c0a:	e75c      	b.n	8003ac6 <UART_SetConfig+0x1d6>
 8003c0c:	2108      	movs	r1, #8
 8003c0e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003c12:	e758      	b.n	8003ac6 <UART_SetConfig+0x1d6>
 8003c14:	4601      	mov	r1, r0
 8003c16:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003c1a:	e754      	b.n	8003ac6 <UART_SetConfig+0x1d6>
 8003c1c:	2108      	movs	r1, #8
 8003c1e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003c22:	e750      	b.n	8003ac6 <UART_SetConfig+0x1d6>
 8003c24:	2108      	movs	r1, #8
 8003c26:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003c2a:	e74c      	b.n	8003ac6 <UART_SetConfig+0x1d6>
            pclk = HAL_RCC_GetPCLK1Freq();
 8003c2c:	f7ff fab6 	bl	800319c <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	f000 8089 	beq.w	8003d4a <UART_SetConfig+0x45a>
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d072      	beq.n	8003d22 <UART_SetConfig+0x432>
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d072      	beq.n	8003d26 <UART_SetConfig+0x436>
 8003c40:	2b03      	cmp	r3, #3
 8003c42:	d072      	beq.n	8003d2a <UART_SetConfig+0x43a>
 8003c44:	2b04      	cmp	r3, #4
 8003c46:	d072      	beq.n	8003d2e <UART_SetConfig+0x43e>
 8003c48:	2b05      	cmp	r3, #5
 8003c4a:	d072      	beq.n	8003d32 <UART_SetConfig+0x442>
 8003c4c:	2b06      	cmp	r3, #6
 8003c4e:	d072      	beq.n	8003d36 <UART_SetConfig+0x446>
 8003c50:	2b07      	cmp	r3, #7
 8003c52:	d072      	beq.n	8003d3a <UART_SetConfig+0x44a>
 8003c54:	2b08      	cmp	r3, #8
 8003c56:	d072      	beq.n	8003d3e <UART_SetConfig+0x44e>
 8003c58:	2b09      	cmp	r3, #9
 8003c5a:	d072      	beq.n	8003d42 <UART_SetConfig+0x452>
 8003c5c:	2b0a      	cmp	r3, #10
 8003c5e:	d072      	beq.n	8003d46 <UART_SetConfig+0x456>
 8003c60:	2b0b      	cmp	r3, #11
 8003c62:	d172      	bne.n	8003d4a <UART_SetConfig+0x45a>
 8003c64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c68:	2300      	movs	r3, #0
 8003c6a:	2100      	movs	r1, #0
 8003c6c:	f7fc fae0 	bl	8000230 <__aeabi_uldivmod>
 8003c70:	6865      	ldr	r5, [r4, #4]
 8003c72:	020f      	lsls	r7, r1, #8
 8003c74:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 8003c78:	0206      	lsls	r6, r0, #8
 8003c7a:	0868      	lsrs	r0, r5, #1
 8003c7c:	eb16 0b00 	adds.w	fp, r6, r0
 8003c80:	f147 0c00 	adc.w	ip, r7, #0
 8003c84:	462a      	mov	r2, r5
 8003c86:	2300      	movs	r3, #0
 8003c88:	4658      	mov	r0, fp
 8003c8a:	4661      	mov	r1, ip
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c8c:	f7fc fad0 	bl	8000230 <__aeabi_uldivmod>
            break;
 8003c90:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003c92:	4ba5      	ldr	r3, [pc, #660]	; (8003f28 <UART_SetConfig+0x638>)
 8003c94:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8003c98:	4299      	cmp	r1, r3
 8003c9a:	f63f ae82 	bhi.w	80039a2 <UART_SetConfig+0xb2>
          huart->Instance->BRR = usartdiv;
 8003c9e:	6823      	ldr	r3, [r4, #0]
 8003ca0:	60d8      	str	r0, [r3, #12]
 8003ca2:	e67f      	b.n	80039a4 <UART_SetConfig+0xb4>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ca4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d036      	beq.n	8003d18 <UART_SetConfig+0x428>
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d016      	beq.n	8003cdc <UART_SetConfig+0x3ec>
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d016      	beq.n	8003ce0 <UART_SetConfig+0x3f0>
 8003cb2:	2b03      	cmp	r3, #3
 8003cb4:	d016      	beq.n	8003ce4 <UART_SetConfig+0x3f4>
 8003cb6:	2b04      	cmp	r3, #4
 8003cb8:	d01e      	beq.n	8003cf8 <UART_SetConfig+0x408>
 8003cba:	2b05      	cmp	r3, #5
 8003cbc:	d01e      	beq.n	8003cfc <UART_SetConfig+0x40c>
 8003cbe:	2b06      	cmp	r3, #6
 8003cc0:	d01e      	beq.n	8003d00 <UART_SetConfig+0x410>
 8003cc2:	2b07      	cmp	r3, #7
 8003cc4:	d020      	beq.n	8003d08 <UART_SetConfig+0x418>
 8003cc6:	2b08      	cmp	r3, #8
 8003cc8:	d020      	beq.n	8003d0c <UART_SetConfig+0x41c>
 8003cca:	2b09      	cmp	r3, #9
 8003ccc:	d020      	beq.n	8003d10 <UART_SetConfig+0x420>
 8003cce:	2b0a      	cmp	r3, #10
 8003cd0:	d020      	beq.n	8003d14 <UART_SetConfig+0x424>
 8003cd2:	2b0b      	cmp	r3, #11
 8003cd4:	d120      	bne.n	8003d18 <UART_SetConfig+0x428>
 8003cd6:	4e95      	ldr	r6, [pc, #596]	; (8003f2c <UART_SetConfig+0x63c>)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003cd8:	2700      	movs	r7, #0
 8003cda:	e006      	b.n	8003cea <UART_SetConfig+0x3fa>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003cdc:	4e94      	ldr	r6, [pc, #592]	; (8003f30 <UART_SetConfig+0x640>)
 8003cde:	e7fb      	b.n	8003cd8 <UART_SetConfig+0x3e8>
 8003ce0:	4e94      	ldr	r6, [pc, #592]	; (8003f34 <UART_SetConfig+0x644>)
 8003ce2:	e7f9      	b.n	8003cd8 <UART_SetConfig+0x3e8>
 8003ce4:	a78c      	add	r7, pc, #560	; (adr r7, 8003f18 <UART_SetConfig+0x628>)
 8003ce6:	e9d7 6700 	ldrd	r6, r7, [r7]
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003cea:	0855      	lsrs	r5, r2, #1
 8003cec:	1970      	adds	r0, r6, r5
 8003cee:	f04f 0300 	mov.w	r3, #0
 8003cf2:	f147 0100 	adc.w	r1, r7, #0
 8003cf6:	e7c9      	b.n	8003c8c <UART_SetConfig+0x39c>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003cf8:	4e8f      	ldr	r6, [pc, #572]	; (8003f38 <UART_SetConfig+0x648>)
 8003cfa:	e7ed      	b.n	8003cd8 <UART_SetConfig+0x3e8>
 8003cfc:	4e8f      	ldr	r6, [pc, #572]	; (8003f3c <UART_SetConfig+0x64c>)
 8003cfe:	e7eb      	b.n	8003cd8 <UART_SetConfig+0x3e8>
 8003d00:	a787      	add	r7, pc, #540	; (adr r7, 8003f20 <UART_SetConfig+0x630>)
 8003d02:	e9d7 6700 	ldrd	r6, r7, [r7]
 8003d06:	e7f0      	b.n	8003cea <UART_SetConfig+0x3fa>
 8003d08:	4e8d      	ldr	r6, [pc, #564]	; (8003f40 <UART_SetConfig+0x650>)
 8003d0a:	e7e5      	b.n	8003cd8 <UART_SetConfig+0x3e8>
 8003d0c:	4e8d      	ldr	r6, [pc, #564]	; (8003f44 <UART_SetConfig+0x654>)
 8003d0e:	e7e3      	b.n	8003cd8 <UART_SetConfig+0x3e8>
 8003d10:	4e8d      	ldr	r6, [pc, #564]	; (8003f48 <UART_SetConfig+0x658>)
 8003d12:	e7e1      	b.n	8003cd8 <UART_SetConfig+0x3e8>
 8003d14:	4e8d      	ldr	r6, [pc, #564]	; (8003f4c <UART_SetConfig+0x65c>)
 8003d16:	e7df      	b.n	8003cd8 <UART_SetConfig+0x3e8>
 8003d18:	4e8d      	ldr	r6, [pc, #564]	; (8003f50 <UART_SetConfig+0x660>)
 8003d1a:	e7dd      	b.n	8003cd8 <UART_SetConfig+0x3e8>
            pclk = HAL_RCC_GetSysClockFreq();
 8003d1c:	f7ff f9e0 	bl	80030e0 <HAL_RCC_GetSysClockFreq>
 8003d20:	e786      	b.n	8003c30 <UART_SetConfig+0x340>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d22:	2202      	movs	r2, #2
 8003d24:	e7a0      	b.n	8003c68 <UART_SetConfig+0x378>
 8003d26:	2204      	movs	r2, #4
 8003d28:	e79e      	b.n	8003c68 <UART_SetConfig+0x378>
 8003d2a:	2206      	movs	r2, #6
 8003d2c:	e79c      	b.n	8003c68 <UART_SetConfig+0x378>
 8003d2e:	2208      	movs	r2, #8
 8003d30:	e79a      	b.n	8003c68 <UART_SetConfig+0x378>
 8003d32:	220a      	movs	r2, #10
 8003d34:	e798      	b.n	8003c68 <UART_SetConfig+0x378>
 8003d36:	220c      	movs	r2, #12
 8003d38:	e796      	b.n	8003c68 <UART_SetConfig+0x378>
 8003d3a:	2210      	movs	r2, #16
 8003d3c:	e794      	b.n	8003c68 <UART_SetConfig+0x378>
 8003d3e:	2220      	movs	r2, #32
 8003d40:	e792      	b.n	8003c68 <UART_SetConfig+0x378>
 8003d42:	2240      	movs	r2, #64	; 0x40
 8003d44:	e790      	b.n	8003c68 <UART_SetConfig+0x378>
 8003d46:	2280      	movs	r2, #128	; 0x80
 8003d48:	e78e      	b.n	8003c68 <UART_SetConfig+0x378>
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	e78c      	b.n	8003c68 <UART_SetConfig+0x378>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003d50:	b39b      	cbz	r3, 8003dba <UART_SetConfig+0x4ca>
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d016      	beq.n	8003d84 <UART_SetConfig+0x494>
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d017      	beq.n	8003d8a <UART_SetConfig+0x49a>
 8003d5a:	2b03      	cmp	r3, #3
 8003d5c:	d018      	beq.n	8003d90 <UART_SetConfig+0x4a0>
 8003d5e:	2b04      	cmp	r3, #4
 8003d60:	d018      	beq.n	8003d94 <UART_SetConfig+0x4a4>
 8003d62:	2b05      	cmp	r3, #5
 8003d64:	d019      	beq.n	8003d9a <UART_SetConfig+0x4aa>
 8003d66:	2b06      	cmp	r3, #6
 8003d68:	d019      	beq.n	8003d9e <UART_SetConfig+0x4ae>
 8003d6a:	2b07      	cmp	r3, #7
 8003d6c:	d019      	beq.n	8003da2 <UART_SetConfig+0x4b2>
 8003d6e:	2b08      	cmp	r3, #8
 8003d70:	d01a      	beq.n	8003da8 <UART_SetConfig+0x4b8>
 8003d72:	2b09      	cmp	r3, #9
 8003d74:	d01b      	beq.n	8003dae <UART_SetConfig+0x4be>
 8003d76:	2b0a      	cmp	r3, #10
 8003d78:	d01c      	beq.n	8003db4 <UART_SetConfig+0x4c4>
 8003d7a:	2b0b      	cmp	r3, #11
 8003d7c:	d11d      	bne.n	8003dba <UART_SetConfig+0x4ca>
 8003d7e:	f44f 4600 	mov.w	r6, #32768	; 0x8000
 8003d82:	e7a9      	b.n	8003cd8 <UART_SetConfig+0x3e8>
 8003d84:	f44f 0680 	mov.w	r6, #4194304	; 0x400000
 8003d88:	e7a6      	b.n	8003cd8 <UART_SetConfig+0x3e8>
 8003d8a:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8003d8e:	e7a3      	b.n	8003cd8 <UART_SetConfig+0x3e8>
 8003d90:	4e70      	ldr	r6, [pc, #448]	; (8003f54 <UART_SetConfig+0x664>)
 8003d92:	e7a1      	b.n	8003cd8 <UART_SetConfig+0x3e8>
 8003d94:	f44f 1680 	mov.w	r6, #1048576	; 0x100000
 8003d98:	e79e      	b.n	8003cd8 <UART_SetConfig+0x3e8>
 8003d9a:	4e6f      	ldr	r6, [pc, #444]	; (8003f58 <UART_SetConfig+0x668>)
 8003d9c:	e79c      	b.n	8003cd8 <UART_SetConfig+0x3e8>
 8003d9e:	4e6f      	ldr	r6, [pc, #444]	; (8003f5c <UART_SetConfig+0x66c>)
 8003da0:	e79a      	b.n	8003cd8 <UART_SetConfig+0x3e8>
 8003da2:	f44f 2600 	mov.w	r6, #524288	; 0x80000
 8003da6:	e797      	b.n	8003cd8 <UART_SetConfig+0x3e8>
 8003da8:	f44f 2680 	mov.w	r6, #262144	; 0x40000
 8003dac:	e794      	b.n	8003cd8 <UART_SetConfig+0x3e8>
 8003dae:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8003db2:	e791      	b.n	8003cd8 <UART_SetConfig+0x3e8>
 8003db4:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 8003db8:	e78e      	b.n	8003cd8 <UART_SetConfig+0x3e8>
 8003dba:	f44f 0600 	mov.w	r6, #8388608	; 0x800000
 8003dbe:	e78b      	b.n	8003cd8 <UART_SetConfig+0x3e8>
            ret = HAL_ERROR;
 8003dc0:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8003dc2:	2000      	movs	r0, #0
 8003dc4:	e765      	b.n	8003c92 <UART_SetConfig+0x3a2>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003dc6:	f7ff f9fb 	bl	80031c0 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003dca:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003dcc:	2900      	cmp	r1, #0
 8003dce:	d06b      	beq.n	8003ea8 <UART_SetConfig+0x5b8>
 8003dd0:	2901      	cmp	r1, #1
 8003dd2:	d06b      	beq.n	8003eac <UART_SetConfig+0x5bc>
 8003dd4:	2902      	cmp	r1, #2
 8003dd6:	d06b      	beq.n	8003eb0 <UART_SetConfig+0x5c0>
 8003dd8:	2903      	cmp	r1, #3
 8003dda:	d06b      	beq.n	8003eb4 <UART_SetConfig+0x5c4>
 8003ddc:	2904      	cmp	r1, #4
 8003dde:	d06b      	beq.n	8003eb8 <UART_SetConfig+0x5c8>
 8003de0:	2905      	cmp	r1, #5
 8003de2:	d06b      	beq.n	8003ebc <UART_SetConfig+0x5cc>
 8003de4:	2906      	cmp	r1, #6
 8003de6:	d06b      	beq.n	8003ec0 <UART_SetConfig+0x5d0>
 8003de8:	2907      	cmp	r1, #7
 8003dea:	d06b      	beq.n	8003ec4 <UART_SetConfig+0x5d4>
 8003dec:	2908      	cmp	r1, #8
 8003dee:	d06b      	beq.n	8003ec8 <UART_SetConfig+0x5d8>
 8003df0:	2909      	cmp	r1, #9
 8003df2:	d06b      	beq.n	8003ecc <UART_SetConfig+0x5dc>
 8003df4:	290a      	cmp	r1, #10
 8003df6:	d06b      	beq.n	8003ed0 <UART_SetConfig+0x5e0>
 8003df8:	290b      	cmp	r1, #11
 8003dfa:	bf14      	ite	ne
 8003dfc:	2201      	movne	r2, #1
 8003dfe:	f44f 7280 	moveq.w	r2, #256	; 0x100
 8003e02:	6861      	ldr	r1, [r4, #4]
 8003e04:	fbb0 f2f2 	udiv	r2, r0, r2
 8003e08:	084b      	lsrs	r3, r1, #1
 8003e0a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8003e0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e12:	e01f      	b.n	8003e54 <UART_SetConfig+0x564>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e14:	b378      	cbz	r0, 8003e76 <UART_SetConfig+0x586>
 8003e16:	2801      	cmp	r0, #1
 8003e18:	d02f      	beq.n	8003e7a <UART_SetConfig+0x58a>
 8003e1a:	2802      	cmp	r0, #2
 8003e1c:	d02f      	beq.n	8003e7e <UART_SetConfig+0x58e>
 8003e1e:	2803      	cmp	r0, #3
 8003e20:	d02f      	beq.n	8003e82 <UART_SetConfig+0x592>
 8003e22:	2804      	cmp	r0, #4
 8003e24:	d02f      	beq.n	8003e86 <UART_SetConfig+0x596>
 8003e26:	2805      	cmp	r0, #5
 8003e28:	d02f      	beq.n	8003e8a <UART_SetConfig+0x59a>
 8003e2a:	2806      	cmp	r0, #6
 8003e2c:	d02f      	beq.n	8003e8e <UART_SetConfig+0x59e>
 8003e2e:	2807      	cmp	r0, #7
 8003e30:	d02f      	beq.n	8003e92 <UART_SetConfig+0x5a2>
 8003e32:	2808      	cmp	r0, #8
 8003e34:	d02f      	beq.n	8003e96 <UART_SetConfig+0x5a6>
 8003e36:	2809      	cmp	r0, #9
 8003e38:	d02f      	beq.n	8003e9a <UART_SetConfig+0x5aa>
 8003e3a:	280a      	cmp	r0, #10
 8003e3c:	d02f      	beq.n	8003e9e <UART_SetConfig+0x5ae>
 8003e3e:	4b43      	ldr	r3, [pc, #268]	; (8003f4c <UART_SetConfig+0x65c>)
 8003e40:	4a47      	ldr	r2, [pc, #284]	; (8003f60 <UART_SetConfig+0x670>)
 8003e42:	280b      	cmp	r0, #11
 8003e44:	bf14      	ite	ne
 8003e46:	4618      	movne	r0, r3
 8003e48:	4610      	moveq	r0, r2
 8003e4a:	6863      	ldr	r3, [r4, #4]
 8003e4c:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8003e50:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e54:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e56:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e58:	f1a3 0010 	sub.w	r0, r3, #16
 8003e5c:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8003e60:	4288      	cmp	r0, r1
 8003e62:	f63f ad9e 	bhi.w	80039a2 <UART_SetConfig+0xb2>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e66:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 8003e6a:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e6c:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8003e70:	430b      	orrs	r3, r1
 8003e72:	60c3      	str	r3, [r0, #12]
 8003e74:	e596      	b.n	80039a4 <UART_SetConfig+0xb4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e76:	4835      	ldr	r0, [pc, #212]	; (8003f4c <UART_SetConfig+0x65c>)
 8003e78:	e7e7      	b.n	8003e4a <UART_SetConfig+0x55a>
 8003e7a:	482c      	ldr	r0, [pc, #176]	; (8003f2c <UART_SetConfig+0x63c>)
 8003e7c:	e7e5      	b.n	8003e4a <UART_SetConfig+0x55a>
 8003e7e:	4839      	ldr	r0, [pc, #228]	; (8003f64 <UART_SetConfig+0x674>)
 8003e80:	e7e3      	b.n	8003e4a <UART_SetConfig+0x55a>
 8003e82:	4839      	ldr	r0, [pc, #228]	; (8003f68 <UART_SetConfig+0x678>)
 8003e84:	e7e1      	b.n	8003e4a <UART_SetConfig+0x55a>
 8003e86:	4839      	ldr	r0, [pc, #228]	; (8003f6c <UART_SetConfig+0x67c>)
 8003e88:	e7df      	b.n	8003e4a <UART_SetConfig+0x55a>
 8003e8a:	4839      	ldr	r0, [pc, #228]	; (8003f70 <UART_SetConfig+0x680>)
 8003e8c:	e7dd      	b.n	8003e4a <UART_SetConfig+0x55a>
 8003e8e:	4839      	ldr	r0, [pc, #228]	; (8003f74 <UART_SetConfig+0x684>)
 8003e90:	e7db      	b.n	8003e4a <UART_SetConfig+0x55a>
 8003e92:	4839      	ldr	r0, [pc, #228]	; (8003f78 <UART_SetConfig+0x688>)
 8003e94:	e7d9      	b.n	8003e4a <UART_SetConfig+0x55a>
 8003e96:	4839      	ldr	r0, [pc, #228]	; (8003f7c <UART_SetConfig+0x68c>)
 8003e98:	e7d7      	b.n	8003e4a <UART_SetConfig+0x55a>
 8003e9a:	4839      	ldr	r0, [pc, #228]	; (8003f80 <UART_SetConfig+0x690>)
 8003e9c:	e7d5      	b.n	8003e4a <UART_SetConfig+0x55a>
 8003e9e:	4839      	ldr	r0, [pc, #228]	; (8003f84 <UART_SetConfig+0x694>)
 8003ea0:	e7d3      	b.n	8003e4a <UART_SetConfig+0x55a>
        pclk = HAL_RCC_GetSysClockFreq();
 8003ea2:	f7ff f91d 	bl	80030e0 <HAL_RCC_GetSysClockFreq>
 8003ea6:	e790      	b.n	8003dca <UART_SetConfig+0x4da>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	e7aa      	b.n	8003e02 <UART_SetConfig+0x512>
 8003eac:	2202      	movs	r2, #2
 8003eae:	e7a8      	b.n	8003e02 <UART_SetConfig+0x512>
 8003eb0:	2204      	movs	r2, #4
 8003eb2:	e7a6      	b.n	8003e02 <UART_SetConfig+0x512>
 8003eb4:	2206      	movs	r2, #6
 8003eb6:	e7a4      	b.n	8003e02 <UART_SetConfig+0x512>
 8003eb8:	2208      	movs	r2, #8
 8003eba:	e7a2      	b.n	8003e02 <UART_SetConfig+0x512>
 8003ebc:	220a      	movs	r2, #10
 8003ebe:	e7a0      	b.n	8003e02 <UART_SetConfig+0x512>
 8003ec0:	220c      	movs	r2, #12
 8003ec2:	e79e      	b.n	8003e02 <UART_SetConfig+0x512>
 8003ec4:	2210      	movs	r2, #16
 8003ec6:	e79c      	b.n	8003e02 <UART_SetConfig+0x512>
 8003ec8:	2220      	movs	r2, #32
 8003eca:	e79a      	b.n	8003e02 <UART_SetConfig+0x512>
 8003ecc:	2240      	movs	r2, #64	; 0x40
 8003ece:	e798      	b.n	8003e02 <UART_SetConfig+0x512>
 8003ed0:	2280      	movs	r2, #128	; 0x80
 8003ed2:	e796      	b.n	8003e02 <UART_SetConfig+0x512>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ed4:	2800      	cmp	r0, #0
 8003ed6:	d057      	beq.n	8003f88 <UART_SetConfig+0x698>
 8003ed8:	2801      	cmp	r0, #1
 8003eda:	d058      	beq.n	8003f8e <UART_SetConfig+0x69e>
 8003edc:	2802      	cmp	r0, #2
 8003ede:	d059      	beq.n	8003f94 <UART_SetConfig+0x6a4>
 8003ee0:	2803      	cmp	r0, #3
 8003ee2:	d05a      	beq.n	8003f9a <UART_SetConfig+0x6aa>
 8003ee4:	2804      	cmp	r0, #4
 8003ee6:	d05b      	beq.n	8003fa0 <UART_SetConfig+0x6b0>
 8003ee8:	2805      	cmp	r0, #5
 8003eea:	d05c      	beq.n	8003fa6 <UART_SetConfig+0x6b6>
 8003eec:	2806      	cmp	r0, #6
 8003eee:	d05d      	beq.n	8003fac <UART_SetConfig+0x6bc>
 8003ef0:	2807      	cmp	r0, #7
 8003ef2:	d05e      	beq.n	8003fb2 <UART_SetConfig+0x6c2>
 8003ef4:	2808      	cmp	r0, #8
 8003ef6:	d05f      	beq.n	8003fb8 <UART_SetConfig+0x6c8>
 8003ef8:	2809      	cmp	r0, #9
 8003efa:	d060      	beq.n	8003fbe <UART_SetConfig+0x6ce>
 8003efc:	280a      	cmp	r0, #10
 8003efe:	d061      	beq.n	8003fc4 <UART_SetConfig+0x6d4>
 8003f00:	280b      	cmp	r0, #11
 8003f02:	bf14      	ite	ne
 8003f04:	f44f 3380 	movne.w	r3, #65536	; 0x10000
 8003f08:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8003f0c:	6860      	ldr	r0, [r4, #4]
 8003f0e:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 8003f12:	fbb3 f3f0 	udiv	r3, r3, r0
 8003f16:	e79d      	b.n	8003e54 <UART_SetConfig+0x564>
 8003f18:	28b0aa00 	.word	0x28b0aa00
 8003f1c:	00000000 	.word	0x00000000
 8003f20:	14585500 	.word	0x14585500
 8003f24:	00000000 	.word	0x00000000
 8003f28:	000ffcff 	.word	0x000ffcff
 8003f2c:	00f42400 	.word	0x00f42400
 8003f30:	7a120000 	.word	0x7a120000
 8003f34:	3d090000 	.word	0x3d090000
 8003f38:	1e848000 	.word	0x1e848000
 8003f3c:	186a0000 	.word	0x186a0000
 8003f40:	0f424000 	.word	0x0f424000
 8003f44:	07a12000 	.word	0x07a12000
 8003f48:	03d09000 	.word	0x03d09000
 8003f4c:	01e84800 	.word	0x01e84800
 8003f50:	f4240000 	.word	0xf4240000
 8003f54:	00155500 	.word	0x00155500
 8003f58:	000ccc00 	.word	0x000ccc00
 8003f5c:	000aaa00 	.word	0x000aaa00
 8003f60:	0001e848 	.word	0x0001e848
 8003f64:	007a1200 	.word	0x007a1200
 8003f68:	00516154 	.word	0x00516154
 8003f6c:	003d0900 	.word	0x003d0900
 8003f70:	0030d400 	.word	0x0030d400
 8003f74:	0028b0aa 	.word	0x0028b0aa
 8003f78:	001e8480 	.word	0x001e8480
 8003f7c:	000f4240 	.word	0x000f4240
 8003f80:	0007a120 	.word	0x0007a120
 8003f84:	0003d090 	.word	0x0003d090
 8003f88:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f8c:	e7be      	b.n	8003f0c <UART_SetConfig+0x61c>
 8003f8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f92:	e7bb      	b.n	8003f0c <UART_SetConfig+0x61c>
 8003f94:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003f98:	e7b8      	b.n	8003f0c <UART_SetConfig+0x61c>
 8003f9a:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8003f9e:	e7b5      	b.n	8003f0c <UART_SetConfig+0x61c>
 8003fa0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003fa4:	e7b2      	b.n	8003f0c <UART_SetConfig+0x61c>
 8003fa6:	f641 1398 	movw	r3, #6552	; 0x1998
 8003faa:	e7af      	b.n	8003f0c <UART_SetConfig+0x61c>
 8003fac:	f241 5354 	movw	r3, #5460	; 0x1554
 8003fb0:	e7ac      	b.n	8003f0c <UART_SetConfig+0x61c>
 8003fb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003fb6:	e7a9      	b.n	8003f0c <UART_SetConfig+0x61c>
 8003fb8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003fbc:	e7a6      	b.n	8003f0c <UART_SetConfig+0x61c>
 8003fbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fc2:	e7a3      	b.n	8003f0c <UART_SetConfig+0x61c>
 8003fc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003fc8:	e7a0      	b.n	8003f0c <UART_SetConfig+0x61c>
        ret = HAL_ERROR;
 8003fca:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	e743      	b.n	8003e58 <UART_SetConfig+0x568>
    switch (clocksource)
 8003fd0:	2b07      	cmp	r3, #7
 8003fd2:	f200 80cd 	bhi.w	8004170 <UART_SetConfig+0x880>
 8003fd6:	e8df f003 	tbb	[pc, r3]
 8003fda:	2a04      	.short	0x2a04
 8003fdc:	cbcb6dcb 	.word	0xcbcb6dcb
 8003fe0:	86cb      	.short	0x86cb
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fe2:	f7ff f8ed 	bl	80031c0 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003fe6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d066      	beq.n	80040ba <UART_SetConfig+0x7ca>
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d066      	beq.n	80040be <UART_SetConfig+0x7ce>
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d066      	beq.n	80040c2 <UART_SetConfig+0x7d2>
 8003ff4:	2b03      	cmp	r3, #3
 8003ff6:	d066      	beq.n	80040c6 <UART_SetConfig+0x7d6>
 8003ff8:	2b04      	cmp	r3, #4
 8003ffa:	d066      	beq.n	80040ca <UART_SetConfig+0x7da>
 8003ffc:	2b05      	cmp	r3, #5
 8003ffe:	d066      	beq.n	80040ce <UART_SetConfig+0x7de>
 8004000:	2b06      	cmp	r3, #6
 8004002:	d066      	beq.n	80040d2 <UART_SetConfig+0x7e2>
 8004004:	2b07      	cmp	r3, #7
 8004006:	d066      	beq.n	80040d6 <UART_SetConfig+0x7e6>
 8004008:	2b08      	cmp	r3, #8
 800400a:	d066      	beq.n	80040da <UART_SetConfig+0x7ea>
 800400c:	2b09      	cmp	r3, #9
 800400e:	d066      	beq.n	80040de <UART_SetConfig+0x7ee>
 8004010:	2b0a      	cmp	r3, #10
 8004012:	d066      	beq.n	80040e2 <UART_SetConfig+0x7f2>
 8004014:	2b0b      	cmp	r3, #11
 8004016:	bf14      	ite	ne
 8004018:	2301      	movne	r3, #1
 800401a:	f44f 7380 	moveq.w	r3, #256	; 0x100
 800401e:	6862      	ldr	r2, [r4, #4]
 8004020:	fbb0 f3f3 	udiv	r3, r0, r3
 8004024:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8004028:	fbb3 f3f2 	udiv	r3, r3, r2
 800402c:	e020      	b.n	8004070 <UART_SetConfig+0x780>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800402e:	b358      	cbz	r0, 8004088 <UART_SetConfig+0x798>
 8004030:	2801      	cmp	r0, #1
 8004032:	d02b      	beq.n	800408c <UART_SetConfig+0x79c>
 8004034:	2802      	cmp	r0, #2
 8004036:	d02b      	beq.n	8004090 <UART_SetConfig+0x7a0>
 8004038:	2803      	cmp	r0, #3
 800403a:	d02b      	beq.n	8004094 <UART_SetConfig+0x7a4>
 800403c:	2804      	cmp	r0, #4
 800403e:	d02b      	beq.n	8004098 <UART_SetConfig+0x7a8>
 8004040:	2805      	cmp	r0, #5
 8004042:	d02b      	beq.n	800409c <UART_SetConfig+0x7ac>
 8004044:	2806      	cmp	r0, #6
 8004046:	d02b      	beq.n	80040a0 <UART_SetConfig+0x7b0>
 8004048:	2807      	cmp	r0, #7
 800404a:	d02b      	beq.n	80040a4 <UART_SetConfig+0x7b4>
 800404c:	2808      	cmp	r0, #8
 800404e:	d02b      	beq.n	80040a8 <UART_SetConfig+0x7b8>
 8004050:	2809      	cmp	r0, #9
 8004052:	d02b      	beq.n	80040ac <UART_SetConfig+0x7bc>
 8004054:	280a      	cmp	r0, #10
 8004056:	d02b      	beq.n	80040b0 <UART_SetConfig+0x7c0>
 8004058:	4b47      	ldr	r3, [pc, #284]	; (8004178 <UART_SetConfig+0x888>)
 800405a:	f24f 4224 	movw	r2, #62500	; 0xf424
 800405e:	280b      	cmp	r0, #11
 8004060:	bf14      	ite	ne
 8004062:	4618      	movne	r0, r3
 8004064:	4610      	moveq	r0, r2
 8004066:	6863      	ldr	r3, [r4, #4]
 8004068:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800406c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004070:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8004072:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004074:	f1a3 0010 	sub.w	r0, r3, #16
 8004078:	f64f 71ef 	movw	r1, #65519	; 0xffef
 800407c:	4288      	cmp	r0, r1
 800407e:	f63f ac90 	bhi.w	80039a2 <UART_SetConfig+0xb2>
      huart->Instance->BRR = usartdiv;
 8004082:	6821      	ldr	r1, [r4, #0]
 8004084:	60cb      	str	r3, [r1, #12]
 8004086:	e48d      	b.n	80039a4 <UART_SetConfig+0xb4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004088:	483b      	ldr	r0, [pc, #236]	; (8004178 <UART_SetConfig+0x888>)
 800408a:	e7ec      	b.n	8004066 <UART_SetConfig+0x776>
 800408c:	483b      	ldr	r0, [pc, #236]	; (800417c <UART_SetConfig+0x88c>)
 800408e:	e7ea      	b.n	8004066 <UART_SetConfig+0x776>
 8004090:	483b      	ldr	r0, [pc, #236]	; (8004180 <UART_SetConfig+0x890>)
 8004092:	e7e8      	b.n	8004066 <UART_SetConfig+0x776>
 8004094:	483b      	ldr	r0, [pc, #236]	; (8004184 <UART_SetConfig+0x894>)
 8004096:	e7e6      	b.n	8004066 <UART_SetConfig+0x776>
 8004098:	483b      	ldr	r0, [pc, #236]	; (8004188 <UART_SetConfig+0x898>)
 800409a:	e7e4      	b.n	8004066 <UART_SetConfig+0x776>
 800409c:	483b      	ldr	r0, [pc, #236]	; (800418c <UART_SetConfig+0x89c>)
 800409e:	e7e2      	b.n	8004066 <UART_SetConfig+0x776>
 80040a0:	483b      	ldr	r0, [pc, #236]	; (8004190 <UART_SetConfig+0x8a0>)
 80040a2:	e7e0      	b.n	8004066 <UART_SetConfig+0x776>
 80040a4:	483b      	ldr	r0, [pc, #236]	; (8004194 <UART_SetConfig+0x8a4>)
 80040a6:	e7de      	b.n	8004066 <UART_SetConfig+0x776>
 80040a8:	483b      	ldr	r0, [pc, #236]	; (8004198 <UART_SetConfig+0x8a8>)
 80040aa:	e7dc      	b.n	8004066 <UART_SetConfig+0x776>
 80040ac:	483b      	ldr	r0, [pc, #236]	; (800419c <UART_SetConfig+0x8ac>)
 80040ae:	e7da      	b.n	8004066 <UART_SetConfig+0x776>
 80040b0:	483b      	ldr	r0, [pc, #236]	; (80041a0 <UART_SetConfig+0x8b0>)
 80040b2:	e7d8      	b.n	8004066 <UART_SetConfig+0x776>
        pclk = HAL_RCC_GetSysClockFreq();
 80040b4:	f7ff f814 	bl	80030e0 <HAL_RCC_GetSysClockFreq>
 80040b8:	e795      	b.n	8003fe6 <UART_SetConfig+0x6f6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80040ba:	2301      	movs	r3, #1
 80040bc:	e7af      	b.n	800401e <UART_SetConfig+0x72e>
 80040be:	2302      	movs	r3, #2
 80040c0:	e7ad      	b.n	800401e <UART_SetConfig+0x72e>
 80040c2:	2304      	movs	r3, #4
 80040c4:	e7ab      	b.n	800401e <UART_SetConfig+0x72e>
 80040c6:	2306      	movs	r3, #6
 80040c8:	e7a9      	b.n	800401e <UART_SetConfig+0x72e>
 80040ca:	2308      	movs	r3, #8
 80040cc:	e7a7      	b.n	800401e <UART_SetConfig+0x72e>
 80040ce:	230a      	movs	r3, #10
 80040d0:	e7a5      	b.n	800401e <UART_SetConfig+0x72e>
 80040d2:	230c      	movs	r3, #12
 80040d4:	e7a3      	b.n	800401e <UART_SetConfig+0x72e>
 80040d6:	2310      	movs	r3, #16
 80040d8:	e7a1      	b.n	800401e <UART_SetConfig+0x72e>
 80040da:	2320      	movs	r3, #32
 80040dc:	e79f      	b.n	800401e <UART_SetConfig+0x72e>
 80040de:	2340      	movs	r3, #64	; 0x40
 80040e0:	e79d      	b.n	800401e <UART_SetConfig+0x72e>
 80040e2:	2380      	movs	r3, #128	; 0x80
 80040e4:	e79b      	b.n	800401e <UART_SetConfig+0x72e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80040e6:	b1f0      	cbz	r0, 8004126 <UART_SetConfig+0x836>
 80040e8:	2801      	cmp	r0, #1
 80040ea:	d01f      	beq.n	800412c <UART_SetConfig+0x83c>
 80040ec:	2802      	cmp	r0, #2
 80040ee:	d020      	beq.n	8004132 <UART_SetConfig+0x842>
 80040f0:	2803      	cmp	r0, #3
 80040f2:	d021      	beq.n	8004138 <UART_SetConfig+0x848>
 80040f4:	2804      	cmp	r0, #4
 80040f6:	d022      	beq.n	800413e <UART_SetConfig+0x84e>
 80040f8:	2805      	cmp	r0, #5
 80040fa:	d023      	beq.n	8004144 <UART_SetConfig+0x854>
 80040fc:	2806      	cmp	r0, #6
 80040fe:	d024      	beq.n	800414a <UART_SetConfig+0x85a>
 8004100:	2807      	cmp	r0, #7
 8004102:	d025      	beq.n	8004150 <UART_SetConfig+0x860>
 8004104:	2808      	cmp	r0, #8
 8004106:	d026      	beq.n	8004156 <UART_SetConfig+0x866>
 8004108:	2809      	cmp	r0, #9
 800410a:	d027      	beq.n	800415c <UART_SetConfig+0x86c>
 800410c:	280a      	cmp	r0, #10
 800410e:	d028      	beq.n	8004162 <UART_SetConfig+0x872>
 8004110:	280b      	cmp	r0, #11
 8004112:	bf14      	ite	ne
 8004114:	f44f 4300 	movne.w	r3, #32768	; 0x8000
 8004118:	2380      	moveq	r3, #128	; 0x80
 800411a:	6860      	ldr	r0, [r4, #4]
 800411c:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 8004120:	fbb3 f3f0 	udiv	r3, r3, r0
 8004124:	e7a4      	b.n	8004070 <UART_SetConfig+0x780>
 8004126:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800412a:	e7f6      	b.n	800411a <UART_SetConfig+0x82a>
 800412c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004130:	e7f3      	b.n	800411a <UART_SetConfig+0x82a>
 8004132:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004136:	e7f0      	b.n	800411a <UART_SetConfig+0x82a>
 8004138:	f241 5355 	movw	r3, #5461	; 0x1555
 800413c:	e7ed      	b.n	800411a <UART_SetConfig+0x82a>
 800413e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004142:	e7ea      	b.n	800411a <UART_SetConfig+0x82a>
 8004144:	f640 43cc 	movw	r3, #3276	; 0xccc
 8004148:	e7e7      	b.n	800411a <UART_SetConfig+0x82a>
 800414a:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800414e:	e7e4      	b.n	800411a <UART_SetConfig+0x82a>
 8004150:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004154:	e7e1      	b.n	800411a <UART_SetConfig+0x82a>
 8004156:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800415a:	e7de      	b.n	800411a <UART_SetConfig+0x82a>
 800415c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004160:	e7db      	b.n	800411a <UART_SetConfig+0x82a>
 8004162:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004166:	e7d8      	b.n	800411a <UART_SetConfig+0x82a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004168:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800416c:	f43f af2d 	beq.w	8003fca <UART_SetConfig+0x6da>
        ret = HAL_ERROR;
 8004170:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8004172:	2300      	movs	r3, #0
 8004174:	e77e      	b.n	8004074 <UART_SetConfig+0x784>
 8004176:	bf00      	nop
 8004178:	00f42400 	.word	0x00f42400
 800417c:	007a1200 	.word	0x007a1200
 8004180:	003d0900 	.word	0x003d0900
 8004184:	0028b0aa 	.word	0x0028b0aa
 8004188:	001e8480 	.word	0x001e8480
 800418c:	00186a00 	.word	0x00186a00
 8004190:	00145855 	.word	0x00145855
 8004194:	000f4240 	.word	0x000f4240
 8004198:	0007a120 	.word	0x0007a120
 800419c:	0003d090 	.word	0x0003d090
 80041a0:	0001e848 	.word	0x0001e848

080041a4 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80041a4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80041a6:	07da      	lsls	r2, r3, #31
{
 80041a8:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80041aa:	d506      	bpl.n	80041ba <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80041ac:	6801      	ldr	r1, [r0, #0]
 80041ae:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80041b0:	684a      	ldr	r2, [r1, #4]
 80041b2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80041b6:	4322      	orrs	r2, r4
 80041b8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80041ba:	079c      	lsls	r4, r3, #30
 80041bc:	d506      	bpl.n	80041cc <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80041be:	6801      	ldr	r1, [r0, #0]
 80041c0:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80041c2:	684a      	ldr	r2, [r1, #4]
 80041c4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80041c8:	4322      	orrs	r2, r4
 80041ca:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80041cc:	0759      	lsls	r1, r3, #29
 80041ce:	d506      	bpl.n	80041de <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80041d0:	6801      	ldr	r1, [r0, #0]
 80041d2:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80041d4:	684a      	ldr	r2, [r1, #4]
 80041d6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80041da:	4322      	orrs	r2, r4
 80041dc:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80041de:	071a      	lsls	r2, r3, #28
 80041e0:	d506      	bpl.n	80041f0 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041e2:	6801      	ldr	r1, [r0, #0]
 80041e4:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80041e6:	684a      	ldr	r2, [r1, #4]
 80041e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80041ec:	4322      	orrs	r2, r4
 80041ee:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80041f0:	06dc      	lsls	r4, r3, #27
 80041f2:	d506      	bpl.n	8004202 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80041f4:	6801      	ldr	r1, [r0, #0]
 80041f6:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80041f8:	688a      	ldr	r2, [r1, #8]
 80041fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80041fe:	4322      	orrs	r2, r4
 8004200:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004202:	0699      	lsls	r1, r3, #26
 8004204:	d506      	bpl.n	8004214 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004206:	6801      	ldr	r1, [r0, #0]
 8004208:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800420a:	688a      	ldr	r2, [r1, #8]
 800420c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004210:	4322      	orrs	r2, r4
 8004212:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004214:	065a      	lsls	r2, r3, #25
 8004216:	d50f      	bpl.n	8004238 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004218:	6801      	ldr	r1, [r0, #0]
 800421a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800421c:	684a      	ldr	r2, [r1, #4]
 800421e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8004222:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004224:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004228:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800422a:	d105      	bne.n	8004238 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800422c:	684a      	ldr	r2, [r1, #4]
 800422e:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8004230:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8004234:	4322      	orrs	r2, r4
 8004236:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004238:	061b      	lsls	r3, r3, #24
 800423a:	d506      	bpl.n	800424a <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800423c:	6802      	ldr	r2, [r0, #0]
 800423e:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8004240:	6853      	ldr	r3, [r2, #4]
 8004242:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8004246:	430b      	orrs	r3, r1
 8004248:	6053      	str	r3, [r2, #4]
}
 800424a:	bd10      	pop	{r4, pc}

0800424c <UART_WaitOnFlagUntilTimeout>:
{
 800424c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004250:	9d06      	ldr	r5, [sp, #24]
 8004252:	4604      	mov	r4, r0
 8004254:	460f      	mov	r7, r1
 8004256:	4616      	mov	r6, r2
 8004258:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800425a:	6821      	ldr	r1, [r4, #0]
 800425c:	69ca      	ldr	r2, [r1, #28]
 800425e:	ea37 0302 	bics.w	r3, r7, r2
 8004262:	bf0c      	ite	eq
 8004264:	2201      	moveq	r2, #1
 8004266:	2200      	movne	r2, #0
 8004268:	42b2      	cmp	r2, r6
 800426a:	d001      	beq.n	8004270 <UART_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 800426c:	2000      	movs	r0, #0
 800426e:	e01a      	b.n	80042a6 <UART_WaitOnFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 8004270:	1c68      	adds	r0, r5, #1
 8004272:	d0f3      	beq.n	800425c <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004274:	f7fe fc42 	bl	8002afc <HAL_GetTick>
 8004278:	eba0 0008 	sub.w	r0, r0, r8
 800427c:	42a8      	cmp	r0, r5
 800427e:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004280:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004282:	d800      	bhi.n	8004286 <UART_WaitOnFlagUntilTimeout+0x3a>
 8004284:	b98d      	cbnz	r5, 80042aa <UART_WaitOnFlagUntilTimeout+0x5e>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004286:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800428a:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800428c:	6883      	ldr	r3, [r0, #8]
 800428e:	f023 0301 	bic.w	r3, r3, #1
 8004292:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 8004294:	2320      	movs	r3, #32
 8004296:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800429a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          __HAL_UNLOCK(huart);
 800429e:	2300      	movs	r3, #0
 80042a0:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
          return HAL_TIMEOUT;
 80042a4:	2003      	movs	r0, #3
}
 80042a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80042aa:	075a      	lsls	r2, r3, #29
 80042ac:	d5d5      	bpl.n	800425a <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80042ae:	69c3      	ldr	r3, [r0, #28]
 80042b0:	051b      	lsls	r3, r3, #20
 80042b2:	d5d2      	bpl.n	800425a <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80042b8:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80042ba:	6803      	ldr	r3, [r0, #0]
 80042bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80042c0:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042c2:	6883      	ldr	r3, [r0, #8]
 80042c4:	f023 0301 	bic.w	r3, r3, #1
 80042c8:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 80042ca:	2320      	movs	r3, #32
 80042cc:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80042d0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80042d4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80042d8:	e7e1      	b.n	800429e <UART_WaitOnFlagUntilTimeout+0x52>

080042da <HAL_UART_Transmit>:
{
 80042da:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80042de:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80042e0:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 80042e4:	2b20      	cmp	r3, #32
{
 80042e6:	4604      	mov	r4, r0
 80042e8:	460e      	mov	r6, r1
 80042ea:	4691      	mov	r9, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80042ec:	d14f      	bne.n	800438e <HAL_UART_Transmit+0xb4>
    if ((pData == NULL) || (Size == 0U))
 80042ee:	2900      	cmp	r1, #0
 80042f0:	d04b      	beq.n	800438a <HAL_UART_Transmit+0xb0>
 80042f2:	2a00      	cmp	r2, #0
 80042f4:	d049      	beq.n	800438a <HAL_UART_Transmit+0xb0>
    __HAL_LOCK(huart);
 80042f6:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d047      	beq.n	800438e <HAL_UART_Transmit+0xb4>
 80042fe:	2301      	movs	r3, #1
 8004300:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004304:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004306:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004308:	f8c0 5088 	str.w	r5, [r0, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800430c:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
    tickstart = HAL_GetTick();
 8004310:	f7fe fbf4 	bl	8002afc <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004314:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 8004316:	f8a4 9054 	strh.w	r9, [r4, #84]	; 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800431a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 800431e:	4607      	mov	r7, r0
    huart->TxXferCount = Size;
 8004320:	f8a4 9056 	strh.w	r9, [r4, #86]	; 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004324:	d103      	bne.n	800432e <HAL_UART_Transmit+0x54>
 8004326:	6923      	ldr	r3, [r4, #16]
 8004328:	b90b      	cbnz	r3, 800432e <HAL_UART_Transmit+0x54>
 800432a:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 800432c:	461e      	mov	r6, r3
    __HAL_UNLOCK(huart);
 800432e:	2300      	movs	r3, #0
 8004330:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
    while (huart->TxXferCount > 0U)
 8004334:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004338:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 800433c:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800433e:	463b      	mov	r3, r7
    while (huart->TxXferCount > 0U)
 8004340:	b942      	cbnz	r2, 8004354 <HAL_UART_Transmit+0x7a>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004342:	2140      	movs	r1, #64	; 0x40
 8004344:	4620      	mov	r0, r4
 8004346:	f7ff ff81 	bl	800424c <UART_WaitOnFlagUntilTimeout>
 800434a:	b948      	cbnz	r0, 8004360 <HAL_UART_Transmit+0x86>
    huart->gState = HAL_UART_STATE_READY;
 800434c:	2320      	movs	r3, #32
 800434e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    return HAL_OK;
 8004352:	e006      	b.n	8004362 <HAL_UART_Transmit+0x88>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004354:	2200      	movs	r2, #0
 8004356:	2180      	movs	r1, #128	; 0x80
 8004358:	4620      	mov	r0, r4
 800435a:	f7ff ff77 	bl	800424c <UART_WaitOnFlagUntilTimeout>
 800435e:	b118      	cbz	r0, 8004368 <HAL_UART_Transmit+0x8e>
        return HAL_TIMEOUT;
 8004360:	2003      	movs	r0, #3
}
 8004362:	b003      	add	sp, #12
 8004364:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004368:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 800436a:	b95e      	cbnz	r6, 8004384 <HAL_UART_Transmit+0xaa>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800436c:	f835 3b02 	ldrh.w	r3, [r5], #2
 8004370:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004374:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8004376:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
 800437a:	3b01      	subs	r3, #1
 800437c:	b29b      	uxth	r3, r3
 800437e:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 8004382:	e7d7      	b.n	8004334 <HAL_UART_Transmit+0x5a>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004384:	f816 3b01 	ldrb.w	r3, [r6], #1
 8004388:	e7f4      	b.n	8004374 <HAL_UART_Transmit+0x9a>
      return  HAL_ERROR;
 800438a:	2001      	movs	r0, #1
 800438c:	e7e9      	b.n	8004362 <HAL_UART_Transmit+0x88>
    return HAL_BUSY;
 800438e:	2002      	movs	r0, #2
 8004390:	e7e7      	b.n	8004362 <HAL_UART_Transmit+0x88>

08004392 <UART_CheckIdleState>:
{
 8004392:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004394:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004396:	2600      	movs	r6, #0
 8004398:	f8c0 6088 	str.w	r6, [r0, #136]	; 0x88
  tickstart = HAL_GetTick();
 800439c:	f7fe fbae 	bl	8002afc <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80043a0:	6823      	ldr	r3, [r4, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 80043a6:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80043a8:	d417      	bmi.n	80043da <UART_CheckIdleState+0x48>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80043aa:	6823      	ldr	r3, [r4, #0]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	075b      	lsls	r3, r3, #29
 80043b0:	d50a      	bpl.n	80043c8 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043b2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80043b6:	9300      	str	r3, [sp, #0]
 80043b8:	2200      	movs	r2, #0
 80043ba:	462b      	mov	r3, r5
 80043bc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80043c0:	4620      	mov	r0, r4
 80043c2:	f7ff ff43 	bl	800424c <UART_WaitOnFlagUntilTimeout>
 80043c6:	b9a0      	cbnz	r0, 80043f2 <UART_CheckIdleState+0x60>
  huart->gState = HAL_UART_STATE_READY;
 80043c8:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80043ca:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80043cc:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UNLOCK(huart);
 80043d0:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80043d4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  return HAL_OK;
 80043d8:	e00c      	b.n	80043f4 <UART_CheckIdleState+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043da:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80043de:	9300      	str	r3, [sp, #0]
 80043e0:	4632      	mov	r2, r6
 80043e2:	4603      	mov	r3, r0
 80043e4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80043e8:	4620      	mov	r0, r4
 80043ea:	f7ff ff2f 	bl	800424c <UART_WaitOnFlagUntilTimeout>
 80043ee:	2800      	cmp	r0, #0
 80043f0:	d0db      	beq.n	80043aa <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 80043f2:	2003      	movs	r0, #3
}
 80043f4:	b002      	add	sp, #8
 80043f6:	bd70      	pop	{r4, r5, r6, pc}

080043f8 <HAL_UART_Init>:
{
 80043f8:	b510      	push	{r4, lr}
  if (huart == NULL)
 80043fa:	4604      	mov	r4, r0
 80043fc:	b350      	cbz	r0, 8004454 <HAL_UART_Init+0x5c>
  if (huart->gState == HAL_UART_STATE_RESET)
 80043fe:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8004402:	b91b      	cbnz	r3, 800440c <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 8004404:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    HAL_UART_MspInit(huart);
 8004408:	f7fc fcd0 	bl	8000dac <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800440c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800440e:	2324      	movs	r3, #36	; 0x24
 8004410:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UART_DISABLE(huart);
 8004414:	6813      	ldr	r3, [r2, #0]
 8004416:	f023 0301 	bic.w	r3, r3, #1
 800441a:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800441c:	4620      	mov	r0, r4
 800441e:	f7ff fa67 	bl	80038f0 <UART_SetConfig>
 8004422:	2801      	cmp	r0, #1
 8004424:	d016      	beq.n	8004454 <HAL_UART_Init+0x5c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004426:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004428:	b113      	cbz	r3, 8004430 <HAL_UART_Init+0x38>
    UART_AdvFeatureConfig(huart);
 800442a:	4620      	mov	r0, r4
 800442c:	f7ff feba 	bl	80041a4 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004430:	6823      	ldr	r3, [r4, #0]
 8004432:	685a      	ldr	r2, [r3, #4]
 8004434:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004438:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800443a:	689a      	ldr	r2, [r3, #8]
 800443c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004440:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8004448:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 800444a:	601a      	str	r2, [r3, #0]
}
 800444c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8004450:	f7ff bf9f 	b.w	8004392 <UART_CheckIdleState>
}
 8004454:	2001      	movs	r0, #1
 8004456:	bd10      	pop	{r4, pc}

08004458 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004458:	4770      	bx	lr

0800445a <HAL_UARTEx_RxFifoFullCallback>:
 800445a:	4770      	bx	lr

0800445c <HAL_UARTEx_TxFifoEmptyCallback>:
 800445c:	4770      	bx	lr
	...

08004460 <CRS_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t CRS_Event_Handler(void *Event)
{
 8004460:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  CRSAPP_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);

  switch(event_pckt->evt)
 8004462:	7843      	ldrb	r3, [r0, #1]
 8004464:	2bff      	cmp	r3, #255	; 0xff
 8004466:	d12c      	bne.n	80044c2 <CRS_Event_Handler+0x62>
  {
    case EVT_VENDOR:
      {
        blue_evt = (evt_blue_aci*)event_pckt->data;
        switch(blue_evt->ecode)
 8004468:	f8b0 2003 	ldrh.w	r2, [r0, #3]
 800446c:	f640 4301 	movw	r3, #3073	; 0xc01
 8004470:	429a      	cmp	r2, r3
 8004472:	d126      	bne.n	80044c2 <CRS_Event_Handler+0x62>
        {
          case EVT_BLUE_GATT_ATTRIBUTE_MODIFIED:
           {
              attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blue_evt->data;
              if(attribute_modified->Attr_Handle == (CRSContext.CRSRXCharHdle + 2))
 8004474:	4914      	ldr	r1, [pc, #80]	; (80044c8 <CRS_Event_Handler+0x68>)
 8004476:	f8b0 2007 	ldrh.w	r2, [r0, #7]
 800447a:	888b      	ldrh	r3, [r1, #4]
 800447c:	3302      	adds	r3, #2
 800447e:	429a      	cmp	r2, r3
 8004480:	d10f      	bne.n	80044a2 <CRS_Event_Handler+0x42>
                 */
                return_value = SVCCTL_EvtAckFlowEnable;
                /**
                 * Notify to application
                 */
                if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 8004482:	7b43      	ldrb	r3, [r0, #13]
 8004484:	07db      	lsls	r3, r3, #31
 8004486:	d508      	bpl.n	800449a <CRS_Event_Handler+0x3a>
                {
                  Notification.CRS_Evt_Opcode = CRS_NOTIFY_ENABLED_EVT;
 8004488:	2300      	movs	r3, #0
 800448a:	f88d 3000 	strb.w	r3, [sp]
                  CRSAPP_Notification(&Notification);
 800448e:	4668      	mov	r0, sp
 8004490:	f7fe f86a 	bl	8002568 <CRSAPP_Notification>
                return_value = SVCCTL_EvtAckFlowEnable;
 8004494:	2001      	movs	r0, #1
    default:
      break;
  }

  return(return_value);
}/* end CRS_Event_Handler */
 8004496:	b004      	add	sp, #16
 8004498:	bd10      	pop	{r4, pc}
                  Notification.CRS_Evt_Opcode = CRS_NOTIFY_DISABLED_EVT;
 800449a:	2401      	movs	r4, #1
 800449c:	f88d 4000 	strb.w	r4, [sp]
 80044a0:	e7f5      	b.n	800448e <CRS_Event_Handler+0x2e>
              else if(attribute_modified->Attr_Handle == (CRSContext.CRSTXCharHdle + 1))
 80044a2:	884b      	ldrh	r3, [r1, #2]
 80044a4:	3301      	adds	r3, #1
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d10b      	bne.n	80044c2 <CRS_Event_Handler+0x62>
                Notification.CRS_Evt_Opcode = CRS_WRITE_EVT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	f88d 3000 	strb.w	r3, [sp]
                Notification.DataTransfered.Length = attribute_modified->Attr_Data_Length;
 80044b0:	f8b0 300b 	ldrh.w	r3, [r0, #11]
 80044b4:	f88d 3008 	strb.w	r3, [sp, #8]
                Notification.DataTransfered.pPayload = attribute_modified->Attr_Data;
 80044b8:	300d      	adds	r0, #13
 80044ba:	9001      	str	r0, [sp, #4]
                CRSAPP_Notification(&Notification);  
 80044bc:	4668      	mov	r0, sp
 80044be:	f7fe f853 	bl	8002568 <CRSAPP_Notification>
  return_value = SVCCTL_EvtNotAck;
 80044c2:	2000      	movs	r0, #0
 80044c4:	e7e7      	b.n	8004496 <CRS_Event_Handler+0x36>
 80044c6:	bf00      	nop
 80044c8:	200001d8 	.word	0x200001d8

080044cc <CRS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void CRS_STM_Init(void)
{
 80044cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t tx_uuid[]      = { CRS_STM_TX_UUID128 }; 

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(CRS_Event_Handler);
 80044d0:	4825      	ldr	r0, [pc, #148]	; (8004568 <CRS_STM_Init+0x9c>)
   *                                2 for CRS RX characteristic +
   *                                1 for client char configuration descriptor
   *                                
   */
  COPY_CRS_UUID(uuid.Char_UUID_128, service_uuid);
  hciCmdResult = aci_gatt_add_service(
 80044d2:	4c26      	ldr	r4, [pc, #152]	; (800456c <CRS_STM_Init+0xa0>)
  }

  /**
   *  Add TX Characteristic
   */
  COPY_CRS_UUID(uuid.Char_UUID_128, tx_uuid);
 80044d4:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 800457c <CRS_STM_Init+0xb0>
 80044d8:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 8004580 <CRS_STM_Init+0xb4>
 80044dc:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8004584 <CRS_STM_Init+0xb8>
{
 80044e0:	b08a      	sub	sp, #40	; 0x28
  SVCCTL_RegisterSvcHandler(CRS_Event_Handler);
 80044e2:	f000 f88f 	bl	8004604 <SVCCTL_RegisterSvcHandler>
  COPY_CRS_UUID(uuid.Char_UUID_128, service_uuid);
 80044e6:	4a22      	ldr	r2, [pc, #136]	; (8004570 <CRS_STM_Init+0xa4>)
 80044e8:	4b22      	ldr	r3, [pc, #136]	; (8004574 <CRS_STM_Init+0xa8>)
 80044ea:	4923      	ldr	r1, [pc, #140]	; (8004578 <CRS_STM_Init+0xac>)
  hciCmdResult = aci_gatt_add_service(
 80044ec:	9400      	str	r4, [sp, #0]
  COPY_CRS_UUID(uuid.Char_UUID_128, service_uuid);
 80044ee:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80044f2:	f64f 6360 	movw	r3, #65120	; 0xfe60
 80044f6:	e9cd 1308 	strd	r1, r3, [sp, #32]
  hciCmdResult = aci_gatt_add_service(
 80044fa:	2201      	movs	r2, #1
 80044fc:	a906      	add	r1, sp, #24
 80044fe:	2306      	movs	r3, #6
 8004500:	2002      	movs	r0, #2
 8004502:	f000 fa8f 	bl	8004a24 <aci_gatt_add_service>
  COPY_CRS_UUID(uuid.Char_UUID_128, tx_uuid);
 8004506:	f64f 6361 	movw	r3, #65121	; 0xfe61
 800450a:	e9cd 8308 	strd	r8, r3, [sp, #32]
  hciCmdResult = aci_gatt_add_char(
 800450e:	4623      	mov	r3, r4
 8004510:	2501      	movs	r5, #1
 8004512:	f833 0b02 	ldrh.w	r0, [r3], #2
 8004516:	9305      	str	r3, [sp, #20]
 8004518:	270a      	movs	r7, #10
 800451a:	2600      	movs	r6, #0
 800451c:	2306      	movs	r3, #6
 800451e:	e9cd 3600 	strd	r3, r6, [sp]
 8004522:	aa06      	add	r2, sp, #24
 8004524:	e9cd 7503 	strd	r7, r5, [sp, #12]
 8004528:	9502      	str	r5, [sp, #8]
 800452a:	2314      	movs	r3, #20
 800452c:	2102      	movs	r1, #2
  COPY_CRS_UUID(uuid.Char_UUID_128, tx_uuid);
 800452e:	e9cd a906 	strd	sl, r9, [sp, #24]
  hciCmdResult = aci_gatt_add_char(
 8004532:	f000 fac5 	bl	8004ac0 <aci_gatt_add_char>

  /**
   *   Add RX Characteristic
   */
  COPY_CRS_UUID(uuid.Char_UUID_128, rx_uuid);
  hciCmdResult = aci_gatt_add_char(CRSContext.SvcHdle,
 8004536:	f834 0b04 	ldrh.w	r0, [r4], #4
 800453a:	9601      	str	r6, [sp, #4]
  COPY_CRS_UUID(uuid.Char_UUID_128, rx_uuid);
 800453c:	f64f 6362 	movw	r3, #65122	; 0xfe62
 8004540:	9309      	str	r3, [sp, #36]	; 0x24
  hciCmdResult = aci_gatt_add_char(CRSContext.SvcHdle,
 8004542:	2312      	movs	r3, #18
 8004544:	9300      	str	r3, [sp, #0]
 8004546:	e9cd 5404 	strd	r5, r4, [sp, #16]
 800454a:	e9cd 5702 	strd	r5, r7, [sp, #8]
 800454e:	2314      	movs	r3, #20
 8004550:	aa06      	add	r2, sp, #24
 8004552:	2102      	movs	r1, #2
  COPY_CRS_UUID(uuid.Char_UUID_128, rx_uuid);
 8004554:	e9cd a906 	strd	sl, r9, [sp, #24]
 8004558:	f8cd 8020 	str.w	r8, [sp, #32]
  hciCmdResult = aci_gatt_add_char(CRSContext.SvcHdle,
 800455c:	f000 fab0 	bl	8004ac0 <aci_gatt_add_char>
    BLE_DBG_CRS_STM_MSG ("FAILED to add RX Characteristic, Error: 0x%02X !!\n", 
                 hciCmdResult);
  }

  return;
}
 8004560:	b00a      	add	sp, #40	; 0x28
 8004562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004566:	bf00      	nop
 8004568:	08004461 	.word	0x08004461
 800456c:	200001d8 	.word	0x200001d8
 8004570:	d5b3e58f 	.word	0xd5b3e58f
 8004574:	984a7f2e 	.word	0x984a7f2e
 8004578:	cc7a482a 	.word	0xcc7a482a
 800457c:	8e224541 	.word	0x8e224541
 8004580:	ae82ed19 	.word	0xae82ed19
 8004584:	9d4c21ed 	.word	0x9d4c21ed

08004588 <BLS_Init>:
void BVOPUS_STM_Init(void);

__weak void BLS_Init( void )
{
  return;
}
 8004588:	4770      	bx	lr

0800458a <DIS_Init>:
 800458a:	4770      	bx	lr

0800458c <EDS_STM_Init>:
 800458c:	4770      	bx	lr

0800458e <HIDS_Init>:
 800458e:	4770      	bx	lr

08004590 <HRS_Init>:
 8004590:	4770      	bx	lr

08004592 <HTS_Init>:
 8004592:	4770      	bx	lr

08004594 <IAS_Init>:
 8004594:	4770      	bx	lr

08004596 <LLS_Init>:
 8004596:	4770      	bx	lr

08004598 <TPS_Init>:
 8004598:	4770      	bx	lr

0800459a <MOTENV_STM_Init>:
 800459a:	4770      	bx	lr

0800459c <P2PS_STM_Init>:
 800459c:	4770      	bx	lr

0800459e <OTAS_STM_Init>:
 800459e:	4770      	bx	lr

080045a0 <MESH_Init>:
 80045a0:	4770      	bx	lr

080045a2 <BVOPUS_STM_Init>:
 80045a2:	4770      	bx	lr

080045a4 <SVCCTL_InitCustomSvc>:
 80045a4:	4770      	bx	lr

080045a6 <SVCCTL_SvcInit>:

  return;
}

__weak void SVCCTL_SvcInit(void)
{
 80045a6:	b508      	push	{r3, lr}
  BLS_Init();
 80045a8:	f7ff ffee 	bl	8004588 <BLS_Init>

  CRS_STM_Init();
 80045ac:	f7ff ff8e 	bl	80044cc <CRS_STM_Init>

  DIS_Init();
 80045b0:	f7ff ffeb 	bl	800458a <DIS_Init>

  EDS_STM_Init();
 80045b4:	f7ff ffea 	bl	800458c <EDS_STM_Init>

  HIDS_Init();
 80045b8:	f7ff ffe9 	bl	800458e <HIDS_Init>

  HRS_Init();
 80045bc:	f7ff ffe8 	bl	8004590 <HRS_Init>

  HTS_Init();
 80045c0:	f7ff ffe7 	bl	8004592 <HTS_Init>

  IAS_Init();
 80045c4:	f7ff ffe6 	bl	8004594 <IAS_Init>

  LLS_Init();
 80045c8:	f7ff ffe5 	bl	8004596 <LLS_Init>

  TPS_Init();
 80045cc:	f7ff ffe4 	bl	8004598 <TPS_Init>

  MOTENV_STM_Init();
 80045d0:	f7ff ffe3 	bl	800459a <MOTENV_STM_Init>

  P2PS_STM_Init();
 80045d4:	f7ff ffe2 	bl	800459c <P2PS_STM_Init>

  OTAS_STM_Init();
 80045d8:	f7ff ffe1 	bl	800459e <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 80045dc:	f7ff ffe1 	bl	80045a2 <BVOPUS_STM_Init>

  MESH_Init();
 80045e0:	f7ff ffde 	bl	80045a0 <MESH_Init>

  SVCCTL_InitCustomSvc();
 80045e4:	f7ff ffde 	bl	80045a4 <SVCCTL_InitCustomSvc>
  
  return;
}
 80045e8:	bd08      	pop	{r3, pc}
	...

080045ec <SVCCTL_Init>:
{
 80045ec:	b508      	push	{r3, lr}
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 80045ee:	4b04      	ldr	r3, [pc, #16]	; (8004600 <SVCCTL_Init+0x14>)
 80045f0:	2200      	movs	r2, #0
 80045f2:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 80045f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  SVCCTL_SvcInit();
 80045f8:	f7ff ffd5 	bl	80045a6 <SVCCTL_SvcInit>
}
 80045fc:	bd08      	pop	{r3, pc}
 80045fe:	bf00      	nop
 8004600:	200001e0 	.word	0x200001e0

08004604 <SVCCTL_RegisterSvcHandler>:
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8004604:	4a03      	ldr	r2, [pc, #12]	; (8004614 <SVCCTL_RegisterSvcHandler+0x10>)
 8004606:	7f13      	ldrb	r3, [r2, #28]
 8004608:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800460c:	3301      	adds	r3, #1
 800460e:	7713      	strb	r3, [r2, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
}
 8004610:	4770      	bx	lr
 8004612:	bf00      	nop
 8004614:	200001e0 	.word	0x200001e0

08004618 <SVCCTL_RegisterCltHandler>:
 * @retval None
 */
void SVCCTL_RegisterCltHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Client_Event_Handler )
{
#if (BLE_CFG_CLT_MAX_NBR_CB > 0)
  SVCCTL_CltHandler.SVCCTL_CltHandlerTable[SVCCTL_CltHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Client_Event_Handler;
 8004618:	4a04      	ldr	r2, [pc, #16]	; (800462c <SVCCTL_RegisterCltHandler+0x14>)
 800461a:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 800461e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
  SVCCTL_CltHandler.NbreOfRegisteredHandler++;
 8004622:	3301      	adds	r3, #1
  SVCCTL_CltHandler.SVCCTL_CltHandlerTable[SVCCTL_CltHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Client_Event_Handler;
 8004624:	6208      	str	r0, [r1, #32]
  SVCCTL_CltHandler.NbreOfRegisteredHandler++;
 8004626:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
#else
  (void)(pfBLE_SVC_Client_Event_Handler);
#endif

  return;
}
 800462a:	4770      	bx	lr
 800462c:	200001e0 	.word	0x200001e0

08004630 <SVCCTL_UserEvtRx>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8004630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
  event_notification_status = SVCCTL_EvtNotAck;

  switch (event_pckt->evt)
 8004632:	7843      	ldrb	r3, [r0, #1]
 8004634:	2bff      	cmp	r3, #255	; 0xff
{
 8004636:	4604      	mov	r4, r0
  switch (event_pckt->evt)
 8004638:	d106      	bne.n	8004648 <SVCCTL_UserEvtRx+0x18>
  {
    case EVT_VENDOR:
    {
      blue_evt = (evt_blue_aci*) event_pckt->data;

      switch ((blue_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800463a:	f8b0 3003 	ldrh.w	r3, [r0, #3]
 800463e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004642:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004646:	d004      	beq.n	8004652 <SVCCTL_UserEvtRx+0x22>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8004648:	4620      	mov	r0, r4
      return_status = SVCCTL_UserEvtFlowEnable;
      break;
  }

  return (return_status);
}
 800464a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      return_status = SVCCTL_App_Notification(pckt);
 800464e:	f7fc bf85 	b.w	800155c <SVCCTL_App_Notification>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8004652:	4e10      	ldr	r6, [pc, #64]	; (8004694 <SVCCTL_UserEvtRx+0x64>)
      switch ((blue_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8004654:	2500      	movs	r5, #0
 8004656:	4637      	mov	r7, r6
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8004658:	7f32      	ldrb	r2, [r6, #28]
 800465a:	b2eb      	uxtb	r3, r5
 800465c:	429a      	cmp	r2, r3
 800465e:	d906      	bls.n	800466e <SVCCTL_UserEvtRx+0x3e>
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8004660:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8004664:	4620      	mov	r0, r4
 8004666:	4798      	blx	r3
 8004668:	3501      	adds	r5, #1
            if (event_notification_status != SVCCTL_EvtNotAck)
 800466a:	2800      	cmp	r0, #0
 800466c:	d0f4      	beq.n	8004658 <SVCCTL_UserEvtRx+0x28>
      switch ((blue_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800466e:	2500      	movs	r5, #0
          for(index = 0; index <SVCCTL_CltHandler.NbreOfRegisteredHandler; index++)
 8004670:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8004674:	b2eb      	uxtb	r3, r5
 8004676:	429a      	cmp	r2, r3
 8004678:	d9e6      	bls.n	8004648 <SVCCTL_UserEvtRx+0x18>
            event_notification_status = SVCCTL_CltHandler.SVCCTL_CltHandlerTable[index](pckt);
 800467a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800467e:	4620      	mov	r0, r4
 8004680:	6a1b      	ldr	r3, [r3, #32]
 8004682:	4798      	blx	r3
 8004684:	3501      	adds	r5, #1
            if (event_notification_status != SVCCTL_EvtNotAck)
 8004686:	2800      	cmp	r0, #0
 8004688:	d0f2      	beq.n	8004670 <SVCCTL_UserEvtRx+0x40>
      return_status = SVCCTL_UserEvtFlowEnable;
 800468a:	3802      	subs	r0, #2
 800468c:	bf18      	it	ne
 800468e:	2001      	movne	r0, #1
}
 8004690:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004692:	bf00      	nop
 8004694:	200001e0 	.word	0x200001e0

08004698 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable(void)
{
 8004698:	b510      	push	{r4, lr}
  struct hci_request rq;
  tBleStatus status = 0;
 800469a:	2400      	movs	r4, #0
{
 800469c:	b088      	sub	sp, #32
  Osal_MemSet(&rq, 0, sizeof(rq));
 800469e:	2218      	movs	r2, #24
 80046a0:	4621      	mov	r1, r4
 80046a2:	a802      	add	r0, sp, #8
  tBleStatus status = 0;
 80046a4:	f88d 4007 	strb.w	r4, [sp, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 80046a8:	f000 fc2d 	bl	8004f06 <Osal_MemSet>
  rq.ogf = 0x3f;
 80046ac:	4b08      	ldr	r3, [pc, #32]	; (80046d0 <aci_gap_set_non_discoverable+0x38>)
 80046ae:	9302      	str	r3, [sp, #8]
  rq.ocf = 0x081;
  rq.rparam = &status;
 80046b0:	f10d 0307 	add.w	r3, sp, #7
 80046b4:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
  if (hci_send_req(&rq, FALSE) < 0)
 80046b6:	4621      	mov	r1, r4
  rq.rlen = 1;
 80046b8:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 80046ba:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 80046bc:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 80046be:	f000 fd69 	bl	8005194 <hci_send_req>
 80046c2:	42a0      	cmp	r0, r4
    return BLE_STATUS_TIMEOUT;
  if (status) 
 80046c4:	bfac      	ite	ge
 80046c6:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 80046ca:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 80046cc:	b008      	add	sp, #32
 80046ce:	bd10      	pop	{r4, pc}
 80046d0:	0081003f 	.word	0x0081003f

080046d4 <aci_gap_set_discoverable>:
                                    uint8_t Local_Name[],
                                    uint8_t Service_Uuid_length,
                                    uint8_t Service_Uuid_List[],
                                    uint16_t Slave_Conn_Interval_Min,
                                    uint16_t Slave_Conn_Interval_Max)
{
 80046d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046d8:	b0cb      	sub	sp, #300	; 0x12c
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
  tBleStatus status = 0;
 80046da:	f04f 0900 	mov.w	r9, #0
{
 80046de:	f89d 415c 	ldrb.w	r4, [sp, #348]	; 0x15c
 80046e2:	9400      	str	r4, [sp, #0]
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 80046e4:	9d00      	ldr	r5, [sp, #0]
{
 80046e6:	f89d 6154 	ldrb.w	r6, [sp, #340]	; 0x154
  int index_input = 0;
  cp0->Advertising_Type = htob(Advertising_Type, 1);
 80046ea:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 80046ee:	f105 0709 	add.w	r7, r5, #9
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 80046f2:	ac0a      	add	r4, sp, #40	; 0x28
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 80046f4:	4437      	add	r7, r6
 80046f6:	19e5      	adds	r5, r4, r7
  index_input += 1;
  cp0->Advertising_Interval_Min = htob(Advertising_Interval_Min, 2);
 80046f8:	f8ad 1029 	strh.w	r1, [sp, #41]	; 0x29
  index_input += 2;
  cp0->Advertising_Interval_Max = htob(Advertising_Interval_Max, 2);
 80046fc:	f8ad 202b 	strh.w	r2, [sp, #43]	; 0x2b
  index_input += 2;
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 8004700:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
  index_input += 1;
  cp0->Local_Name_Length = htob(Local_Name_Length, 1);
  index_input += 1;
  /* var_len_data input */
  {
    Osal_MemCpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length);
 8004704:	4632      	mov	r2, r6
  cp0->Advertising_Filter_Policy = htob(Advertising_Filter_Policy, 1);
 8004706:	f89d 3150 	ldrb.w	r3, [sp, #336]	; 0x150
    Osal_MemCpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length);
 800470a:	9956      	ldr	r1, [sp, #344]	; 0x158
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800470c:	9501      	str	r5, [sp, #4]
    Osal_MemCpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length);
 800470e:	a80c      	add	r0, sp, #48	; 0x30
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8004710:	f106 0a08 	add.w	sl, r6, #8
  cp0->Advertising_Filter_Policy = htob(Advertising_Filter_Policy, 1);
 8004714:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
  cp0->Local_Name_Length = htob(Local_Name_Length, 1);
 8004718:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
  tBleStatus status = 0;
 800471c:	f88d 900f 	strb.w	r9, [sp, #15]
    Osal_MemCpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length);
 8004720:	f000 fbef 	bl	8004f02 <Osal_MemCpy>
    index_input += Local_Name_Length;
    {
      cp1->Service_Uuid_length = htob(Service_Uuid_length, 1);
 8004724:	9b00      	ldr	r3, [sp, #0]
 8004726:	f804 300a 	strb.w	r3, [r4, sl]
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800472a:	eb04 0b0a 	add.w	fp, r4, sl
    }
    index_input += 1;
    Osal_MemCpy((void *) &cp1->Service_Uuid_List, (const void *) Service_Uuid_List, Service_Uuid_length);
 800472e:	461a      	mov	r2, r3
 8004730:	9958      	ldr	r1, [sp, #352]	; 0x160
 8004732:	f10b 0001 	add.w	r0, fp, #1
 8004736:	f000 fbe4 	bl	8004f02 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800473a:	9b00      	ldr	r3, [sp, #0]
    {
      cp2->Slave_Conn_Interval_Min = htob(Slave_Conn_Interval_Min, 2);
    }
    index_input += 2;
    {
      cp2->Slave_Conn_Interval_Max = htob(Slave_Conn_Interval_Max, 2);
 800473c:	9a01      	ldr	r2, [sp, #4]
    index_input += 1;
 800473e:	3609      	adds	r6, #9
    index_input += Service_Uuid_length;
 8004740:	4433      	add	r3, r6
 8004742:	461d      	mov	r5, r3
      cp2->Slave_Conn_Interval_Min = htob(Slave_Conn_Interval_Min, 2);
 8004744:	f8bd 3164 	ldrh.w	r3, [sp, #356]	; 0x164
 8004748:	53e3      	strh	r3, [r4, r7]
      cp2->Slave_Conn_Interval_Max = htob(Slave_Conn_Interval_Max, 2);
 800474a:	f8bd 3168 	ldrh.w	r3, [sp, #360]	; 0x168
 800474e:	8053      	strh	r3, [r2, #2]
    }
    index_input += 2;
  }
  Osal_MemSet(&rq, 0, sizeof(rq));
 8004750:	4649      	mov	r1, r9
 8004752:	2218      	movs	r2, #24
 8004754:	a804      	add	r0, sp, #16
 8004756:	f000 fbd6 	bl	8004f06 <Osal_MemSet>
  rq.ogf = 0x3f;
 800475a:	4b0b      	ldr	r3, [pc, #44]	; (8004788 <aci_gap_set_discoverable+0xb4>)
 800475c:	9304      	str	r3, [sp, #16]
  tBleStatus status = 0;
 800475e:	f10d 080f 	add.w	r8, sp, #15
  rq.ocf = 0x083;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
  rq.rparam = &status;
  rq.rlen = 1;
 8004762:	2301      	movs	r3, #1
    index_input += 2;
 8004764:	3504      	adds	r5, #4
  if (hci_send_req(&rq, FALSE) < 0)
 8004766:	4649      	mov	r1, r9
 8004768:	a804      	add	r0, sp, #16
  rq.cparam = cmd_buffer;
 800476a:	9406      	str	r4, [sp, #24]
  rq.rparam = &status;
 800476c:	e9cd 5807 	strd	r5, r8, [sp, #28]
  rq.rlen = 1;
 8004770:	9309      	str	r3, [sp, #36]	; 0x24
  if (hci_send_req(&rq, FALSE) < 0)
 8004772:	f000 fd0f 	bl	8005194 <hci_send_req>
 8004776:	4548      	cmp	r0, r9
    return BLE_STATUS_TIMEOUT;
  if (status) 
 8004778:	bfac      	ite	ge
 800477a:	f898 0000 	ldrbge.w	r0, [r8]
    return BLE_STATUS_TIMEOUT;
 800477e:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 8004780:	b04b      	add	sp, #300	; 0x12c
 8004782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004786:	bf00      	nop
 8004788:	0083003f 	.word	0x0083003f

0800478c <aci_gap_set_io_capability>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_set_io_capability(uint8_t IO_Capability)
{
 800478c:	b570      	push	{r4, r5, r6, lr}
 800478e:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 8004790:	2500      	movs	r5, #0
  int index_input = 0;
  cp0->IO_Capability = htob(IO_Capability, 1);
 8004792:	f88d 0020 	strb.w	r0, [sp, #32]
  index_input += 1;
  Osal_MemSet(&rq, 0, sizeof(rq));
 8004796:	2218      	movs	r2, #24
 8004798:	4629      	mov	r1, r5
 800479a:	a802      	add	r0, sp, #8
  tBleStatus status = 0;
 800479c:	f88d 5007 	strb.w	r5, [sp, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 80047a0:	f000 fbb1 	bl	8004f06 <Osal_MemSet>
  rq.ogf = 0x3f;
 80047a4:	4b09      	ldr	r3, [pc, #36]	; (80047cc <aci_gap_set_io_capability+0x40>)
 80047a6:	9302      	str	r3, [sp, #8]
  tBleStatus status = 0;
 80047a8:	f10d 0407 	add.w	r4, sp, #7
  rq.ocf = 0x085;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
 80047ac:	2301      	movs	r3, #1
  cp0->IO_Capability = htob(IO_Capability, 1);
 80047ae:	ae08      	add	r6, sp, #32
  rq.rparam = &status;
  rq.rlen = 1;
  if (hci_send_req(&rq, FALSE) < 0)
 80047b0:	4629      	mov	r1, r5
 80047b2:	a802      	add	r0, sp, #8
  rq.cparam = cmd_buffer;
 80047b4:	9604      	str	r6, [sp, #16]
  rq.rparam = &status;
 80047b6:	e9cd 3405 	strd	r3, r4, [sp, #20]
  rq.rlen = 1;
 80047ba:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 80047bc:	f000 fcea 	bl	8005194 <hci_send_req>
 80047c0:	42a8      	cmp	r0, r5
    return BLE_STATUS_TIMEOUT;
  if (status) 
 80047c2:	bfac      	ite	ge
 80047c4:	7820      	ldrbge	r0, [r4, #0]
    return BLE_STATUS_TIMEOUT;
 80047c6:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 80047c8:	b048      	add	sp, #288	; 0x120
 80047ca:	bd70      	pop	{r4, r5, r6, pc}
 80047cc:	0085003f 	.word	0x0085003f

080047d0 <aci_gap_set_authentication_requirement>:
                                                  uint8_t Min_Encryption_Key_Size,
                                                  uint8_t Max_Encryption_Key_Size,
                                                  uint8_t Use_Fixed_Pin,
                                                  uint32_t Fixed_Pin,
                                                  uint8_t Identity_Address_Type)
{
 80047d0:	b570      	push	{r4, r5, r6, lr}
 80047d2:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 80047d4:	2600      	movs	r6, #0
  index_input += 1;
  cp0->MITM_Mode = htob(MITM_Mode, 1);
  index_input += 1;
  cp0->SC_Support = htob(SC_Support, 1);
  index_input += 1;
  cp0->KeyPress_Notification_Support = htob(KeyPress_Notification_Support, 1);
 80047d6:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
  index_input += 1;
  cp0->Min_Encryption_Key_Size = htob(Min_Encryption_Key_Size, 1);
 80047da:	f89d 3130 	ldrb.w	r3, [sp, #304]	; 0x130
 80047de:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  index_input += 1;
  cp0->Max_Encryption_Key_Size = htob(Max_Encryption_Key_Size, 1);
 80047e2:	f89d 3134 	ldrb.w	r3, [sp, #308]	; 0x134
 80047e6:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  index_input += 1;
  cp0->Use_Fixed_Pin = htob(Use_Fixed_Pin, 1);
 80047ea:	f89d 3138 	ldrb.w	r3, [sp, #312]	; 0x138
 80047ee:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
  index_input += 1;
  cp0->Fixed_Pin = htob(Fixed_Pin, 4);
 80047f2:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
  cp0->Bonding_Mode = htob(Bonding_Mode, 1);
 80047f4:	f88d 0020 	strb.w	r0, [sp, #32]
  cp0->MITM_Mode = htob(MITM_Mode, 1);
 80047f8:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
  cp0->SC_Support = htob(SC_Support, 1);
 80047fc:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
  cp0->Fixed_Pin = htob(Fixed_Pin, 4);
 8004800:	f8cd 3027 	str.w	r3, [sp, #39]	; 0x27
  index_input += 4;
  cp0->Identity_Address_Type = htob(Identity_Address_Type, 1);
  index_input += 1;
  Osal_MemSet(&rq, 0, sizeof(rq));
 8004804:	2218      	movs	r2, #24
  cp0->Identity_Address_Type = htob(Identity_Address_Type, 1);
 8004806:	f89d 3140 	ldrb.w	r3, [sp, #320]	; 0x140
 800480a:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
  Osal_MemSet(&rq, 0, sizeof(rq));
 800480e:	4631      	mov	r1, r6
 8004810:	a802      	add	r0, sp, #8
  tBleStatus status = 0;
 8004812:	f88d 6007 	strb.w	r6, [sp, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 8004816:	f000 fb76 	bl	8004f06 <Osal_MemSet>
  rq.ogf = 0x3f;
 800481a:	4b0a      	ldr	r3, [pc, #40]	; (8004844 <aci_gap_set_authentication_requirement+0x74>)
 800481c:	9302      	str	r3, [sp, #8]
  tBleStatus status = 0;
 800481e:	f10d 0507 	add.w	r5, sp, #7
  rq.ocf = 0x086;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
 8004822:	230c      	movs	r3, #12
  rq.rparam = &status;
 8004824:	e9cd 3505 	strd	r3, r5, [sp, #20]
  cp0->Bonding_Mode = htob(Bonding_Mode, 1);
 8004828:	ac08      	add	r4, sp, #32
  rq.rlen = 1;
 800482a:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 800482c:	4631      	mov	r1, r6
 800482e:	a802      	add	r0, sp, #8
  rq.cparam = cmd_buffer;
 8004830:	9404      	str	r4, [sp, #16]
  rq.rlen = 1;
 8004832:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8004834:	f000 fcae 	bl	8005194 <hci_send_req>
 8004838:	42b0      	cmp	r0, r6
    return BLE_STATUS_TIMEOUT;
  if (status) 
 800483a:	bfac      	ite	ge
 800483c:	7828      	ldrbge	r0, [r5, #0]
    return BLE_STATUS_TIMEOUT;
 800483e:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 8004840:	b048      	add	sp, #288	; 0x120
 8004842:	bd70      	pop	{r4, r5, r6, pc}
 8004844:	0086003f 	.word	0x0086003f

08004848 <aci_gap_init>:
                        uint8_t privacy_enabled,
                        uint8_t device_name_char_len,
                        uint16_t *Service_Handle,
                        uint16_t *Dev_Name_Char_Handle,
                        uint16_t *Appearance_Char_Handle)
{
 8004848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800484c:	b0c8      	sub	sp, #288	; 0x120
 800484e:	4680      	mov	r8, r0
 8004850:	460f      	mov	r7, r1
 8004852:	4616      	mov	r6, r2
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
  aci_gap_init_rp0 resp;
  Osal_MemSet(&resp, 0, sizeof(resp));
 8004854:	2100      	movs	r1, #0
 8004856:	2207      	movs	r2, #7
 8004858:	4668      	mov	r0, sp
{
 800485a:	461d      	mov	r5, r3
  Osal_MemSet(&resp, 0, sizeof(resp));
 800485c:	f000 fb53 	bl	8004f06 <Osal_MemSet>
  index_input += 1;
  cp0->privacy_enabled = htob(privacy_enabled, 1);
  index_input += 1;
  cp0->device_name_char_len = htob(device_name_char_len, 1);
  index_input += 1;
  Osal_MemSet(&rq, 0, sizeof(rq));
 8004860:	2218      	movs	r2, #24
 8004862:	2100      	movs	r1, #0
 8004864:	a802      	add	r0, sp, #8
  cp0->Role = htob(Role, 1);
 8004866:	f88d 8020 	strb.w	r8, [sp, #32]
  cp0->privacy_enabled = htob(privacy_enabled, 1);
 800486a:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
  cp0->device_name_char_len = htob(device_name_char_len, 1);
 800486e:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
  Osal_MemSet(&rq, 0, sizeof(rq));
 8004872:	f000 fb48 	bl	8004f06 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004876:	4b14      	ldr	r3, [pc, #80]	; (80048c8 <aci_gap_init+0x80>)
 8004878:	9302      	str	r3, [sp, #8]
  rq.ocf = 0x08a;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
 800487a:	2303      	movs	r3, #3
 800487c:	9305      	str	r3, [sp, #20]
  cp0->Role = htob(Role, 1);
 800487e:	ac08      	add	r4, sp, #32
  rq.rparam = &resp;
  rq.rlen = sizeof(resp);
 8004880:	2307      	movs	r3, #7
  if (hci_send_req(&rq, FALSE) < 0)
 8004882:	2100      	movs	r1, #0
 8004884:	a802      	add	r0, sp, #8
  rq.cparam = cmd_buffer;
 8004886:	9404      	str	r4, [sp, #16]
  rq.rparam = &resp;
 8004888:	f8cd d018 	str.w	sp, [sp, #24]
  rq.rlen = sizeof(resp);
 800488c:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800488e:	f000 fc81 	bl	8005194 <hci_send_req>
 8004892:	2800      	cmp	r0, #0
 8004894:	db16      	blt.n	80048c4 <aci_gap_init+0x7c>
    return BLE_STATUS_TIMEOUT;
  if (resp.Status) 
 8004896:	f89d 0000 	ldrb.w	r0, [sp]
 800489a:	b980      	cbnz	r0, 80048be <aci_gap_init+0x76>
  {
    return resp.Status;
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 800489c:	9a00      	ldr	r2, [sp, #0]
  *Dev_Name_Char_Handle = btoh(resp.Dev_Name_Char_Handle, 2);
 800489e:	f89d 3003 	ldrb.w	r3, [sp, #3]
  *Service_Handle = btoh(resp.Service_Handle, 2);
 80048a2:	f3c2 220f 	ubfx	r2, r2, #8, #16
 80048a6:	802a      	strh	r2, [r5, #0]
  *Dev_Name_Char_Handle = btoh(resp.Dev_Name_Char_Handle, 2);
 80048a8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80048ac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80048b0:	9a4e      	ldr	r2, [sp, #312]	; 0x138
 80048b2:	8013      	strh	r3, [r2, #0]
  *Appearance_Char_Handle = btoh(resp.Appearance_Char_Handle, 2);
 80048b4:	9b01      	ldr	r3, [sp, #4]
 80048b6:	9a4f      	ldr	r2, [sp, #316]	; 0x13c
 80048b8:	f3c3 230f 	ubfx	r3, r3, #8, #16
 80048bc:	8013      	strh	r3, [r2, #0]
  return BLE_STATUS_SUCCESS;
}
 80048be:	b048      	add	sp, #288	; 0x120
 80048c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return BLE_STATUS_TIMEOUT;
 80048c4:	20ff      	movs	r0, #255	; 0xff
 80048c6:	e7fa      	b.n	80048be <aci_gap_init+0x76>
 80048c8:	008a003f 	.word	0x008a003f

080048cc <aci_gap_configure_whitelist>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_configure_whitelist(void)
{
 80048cc:	b510      	push	{r4, lr}
  struct hci_request rq;
  tBleStatus status = 0;
 80048ce:	2400      	movs	r4, #0
{
 80048d0:	b088      	sub	sp, #32
  Osal_MemSet(&rq, 0, sizeof(rq));
 80048d2:	2218      	movs	r2, #24
 80048d4:	4621      	mov	r1, r4
 80048d6:	a802      	add	r0, sp, #8
  tBleStatus status = 0;
 80048d8:	f88d 4007 	strb.w	r4, [sp, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 80048dc:	f000 fb13 	bl	8004f06 <Osal_MemSet>
  rq.ogf = 0x3f;
 80048e0:	4b08      	ldr	r3, [pc, #32]	; (8004904 <aci_gap_configure_whitelist+0x38>)
 80048e2:	9302      	str	r3, [sp, #8]
  rq.ocf = 0x092;
  rq.rparam = &status;
 80048e4:	f10d 0307 	add.w	r3, sp, #7
 80048e8:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
  if (hci_send_req(&rq, FALSE) < 0)
 80048ea:	4621      	mov	r1, r4
  rq.rlen = 1;
 80048ec:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 80048ee:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 80048f0:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 80048f2:	f000 fc4f 	bl	8005194 <hci_send_req>
 80048f6:	42a0      	cmp	r0, r4
    return BLE_STATUS_TIMEOUT;
  if (status) 
 80048f8:	bfac      	ite	ge
 80048fa:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 80048fe:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 8004900:	b008      	add	sp, #32
 8004902:	bd10      	pop	{r4, pc}
 8004904:	0092003f 	.word	0x0092003f

08004908 <aci_gap_start_general_discovery_proc>:

tBleStatus aci_gap_start_general_discovery_proc(uint16_t LE_Scan_Interval,
                                                uint16_t LE_Scan_Window,
                                                uint8_t Own_Address_Type,
                                                uint8_t Filter_Duplicates)
{
 8004908:	b570      	push	{r4, r5, r6, lr}
 800490a:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_start_general_discovery_proc_cp0 *cp0 = (aci_gap_start_general_discovery_proc_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 800490c:	2600      	movs	r6, #0
  int index_input = 0;
  cp0->LE_Scan_Interval = htob(LE_Scan_Interval, 2);
 800490e:	f8ad 0020 	strh.w	r0, [sp, #32]
  index_input += 2;
  cp0->LE_Scan_Window = htob(LE_Scan_Window, 2);
 8004912:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
  index_input += 2;
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 8004916:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
  index_input += 1;
  cp0->Filter_Duplicates = htob(Filter_Duplicates, 1);
  index_input += 1;
  Osal_MemSet(&rq, 0, sizeof(rq));
 800491a:	4631      	mov	r1, r6
 800491c:	2218      	movs	r2, #24
 800491e:	a802      	add	r0, sp, #8
  cp0->Filter_Duplicates = htob(Filter_Duplicates, 1);
 8004920:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  tBleStatus status = 0;
 8004924:	f88d 6007 	strb.w	r6, [sp, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 8004928:	f000 faed 	bl	8004f06 <Osal_MemSet>
  rq.ogf = 0x3f;
  rq.ocf = 0x097;
 800492c:	4a0b      	ldr	r2, [pc, #44]	; (800495c <aci_gap_start_general_discovery_proc+0x54>)
 800492e:	230f      	movs	r3, #15
  tBleStatus status = 0;
 8004930:	f10d 0507 	add.w	r5, sp, #7
  rq.ocf = 0x097;
 8004934:	e9cd 2302 	strd	r2, r3, [sp, #8]
  rq.event = 0x0F;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
 8004938:	2306      	movs	r3, #6
  rq.rparam = &status;
 800493a:	e9cd 3505 	strd	r3, r5, [sp, #20]
  cp0->LE_Scan_Interval = htob(LE_Scan_Interval, 2);
 800493e:	ac08      	add	r4, sp, #32
  rq.rlen = 1;
 8004940:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 8004942:	4631      	mov	r1, r6
 8004944:	a802      	add	r0, sp, #8
  rq.cparam = cmd_buffer;
 8004946:	9404      	str	r4, [sp, #16]
  rq.rlen = 1;
 8004948:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800494a:	f000 fc23 	bl	8005194 <hci_send_req>
 800494e:	42b0      	cmp	r0, r6
    return BLE_STATUS_TIMEOUT;
  if (status) 
 8004950:	bfac      	ite	ge
 8004952:	7828      	ldrbge	r0, [r5, #0]
    return BLE_STATUS_TIMEOUT;
 8004954:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 8004956:	b048      	add	sp, #288	; 0x120
 8004958:	bd70      	pop	{r4, r5, r6, pc}
 800495a:	bf00      	nop
 800495c:	0097003f 	.word	0x0097003f

08004960 <aci_gap_create_connection>:
                                     uint16_t Conn_Interval_Max,
                                     uint16_t Conn_Latency,
                                     uint16_t Supervision_Timeout,
                                     uint16_t Minimum_CE_Length,
                                     uint16_t Maximum_CE_Length)
{
 8004960:	b570      	push	{r4, r5, r6, lr}
 8004962:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_create_connection_cp0 *cp0 = (aci_gap_create_connection_cp0*)(cmd_buffer);
  tBleStatus status = 0;
  int index_input = 0;
  cp0->LE_Scan_Interval = htob(LE_Scan_Interval, 2);
 8004964:	ac08      	add	r4, sp, #32
  tBleStatus status = 0;
 8004966:	2600      	movs	r6, #0
  cp0->LE_Scan_Interval = htob(LE_Scan_Interval, 2);
 8004968:	f8ad 0020 	strh.w	r0, [sp, #32]
  index_input += 2;
  cp0->LE_Scan_Window = htob(LE_Scan_Window, 2);
 800496c:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
  index_input += 2;
  cp0->Peer_Address_Type = htob(Peer_Address_Type, 1);
 8004970:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
  index_input += 1;
  Osal_MemCpy((void *) &cp0->Peer_Address, (const void *) Peer_Address, 6);
 8004974:	4619      	mov	r1, r3
 8004976:	2206      	movs	r2, #6
 8004978:	f10d 0025 	add.w	r0, sp, #37	; 0x25
  tBleStatus status = 0;
 800497c:	f88d 6007 	strb.w	r6, [sp, #7]
  Osal_MemCpy((void *) &cp0->Peer_Address, (const void *) Peer_Address, 6);
 8004980:	f000 fabf 	bl	8004f02 <Osal_MemCpy>
  index_input += 6;
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 8004984:	f89d 3130 	ldrb.w	r3, [sp, #304]	; 0x130
 8004988:	72e3      	strb	r3, [r4, #11]
  index_input += 1;
  cp0->Conn_Interval_Min = htob(Conn_Interval_Min, 2);
 800498a:	f8bd 3134 	ldrh.w	r3, [sp, #308]	; 0x134
 800498e:	81a3      	strh	r3, [r4, #12]
  index_input += 2;
  cp0->Conn_Interval_Max = htob(Conn_Interval_Max, 2);
 8004990:	f8bd 3138 	ldrh.w	r3, [sp, #312]	; 0x138
 8004994:	81e3      	strh	r3, [r4, #14]
  index_input += 2;
  cp0->Conn_Latency = htob(Conn_Latency, 2);
 8004996:	f8bd 313c 	ldrh.w	r3, [sp, #316]	; 0x13c
 800499a:	8223      	strh	r3, [r4, #16]
  index_input += 2;
  cp0->Supervision_Timeout = htob(Supervision_Timeout, 2);
 800499c:	f8bd 3140 	ldrh.w	r3, [sp, #320]	; 0x140
 80049a0:	8263      	strh	r3, [r4, #18]
  index_input += 2;
  cp0->Minimum_CE_Length = htob(Minimum_CE_Length, 2);
 80049a2:	f8bd 3144 	ldrh.w	r3, [sp, #324]	; 0x144
 80049a6:	82a3      	strh	r3, [r4, #20]
  index_input += 2;
  cp0->Maximum_CE_Length = htob(Maximum_CE_Length, 2);
  index_input += 2;
  Osal_MemSet(&rq, 0, sizeof(rq));
 80049a8:	4631      	mov	r1, r6
  cp0->Maximum_CE_Length = htob(Maximum_CE_Length, 2);
 80049aa:	f8bd 3148 	ldrh.w	r3, [sp, #328]	; 0x148
 80049ae:	82e3      	strh	r3, [r4, #22]
  Osal_MemSet(&rq, 0, sizeof(rq));
 80049b0:	2218      	movs	r2, #24
 80049b2:	a802      	add	r0, sp, #8
 80049b4:	f000 faa7 	bl	8004f06 <Osal_MemSet>
  rq.ogf = 0x3f;
  rq.ocf = 0x09c;
 80049b8:	4a0a      	ldr	r2, [pc, #40]	; (80049e4 <aci_gap_create_connection+0x84>)
  rq.event = 0x0F;
  rq.cparam = cmd_buffer;
 80049ba:	9404      	str	r4, [sp, #16]
  rq.ocf = 0x09c;
 80049bc:	230f      	movs	r3, #15
  tBleStatus status = 0;
 80049be:	f10d 0507 	add.w	r5, sp, #7
  rq.ocf = 0x09c;
 80049c2:	e9cd 2302 	strd	r2, r3, [sp, #8]
  rq.clen = index_input;
 80049c6:	2318      	movs	r3, #24
  rq.rparam = &status;
 80049c8:	e9cd 3505 	strd	r3, r5, [sp, #20]
  rq.rlen = 1;
  if (hci_send_req(&rq, FALSE) < 0)
 80049cc:	4631      	mov	r1, r6
  rq.rlen = 1;
 80049ce:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 80049d0:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 80049d2:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 80049d4:	f000 fbde 	bl	8005194 <hci_send_req>
 80049d8:	42b0      	cmp	r0, r6
    return BLE_STATUS_TIMEOUT;
  if (status) 
 80049da:	bfac      	ite	ge
 80049dc:	7828      	ldrbge	r0, [r5, #0]
    return BLE_STATUS_TIMEOUT;
 80049de:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 80049e0:	b048      	add	sp, #288	; 0x120
 80049e2:	bd70      	pop	{r4, r5, r6, pc}
 80049e4:	009c003f 	.word	0x009c003f

080049e8 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init(void)
{
 80049e8:	b510      	push	{r4, lr}
  struct hci_request rq;
  tBleStatus status = 0;
 80049ea:	2400      	movs	r4, #0
{
 80049ec:	b088      	sub	sp, #32
  Osal_MemSet(&rq, 0, sizeof(rq));
 80049ee:	2218      	movs	r2, #24
 80049f0:	4621      	mov	r1, r4
 80049f2:	a802      	add	r0, sp, #8
  tBleStatus status = 0;
 80049f4:	f88d 4007 	strb.w	r4, [sp, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 80049f8:	f000 fa85 	bl	8004f06 <Osal_MemSet>
  rq.ogf = 0x3f;
 80049fc:	4b08      	ldr	r3, [pc, #32]	; (8004a20 <aci_gatt_init+0x38>)
 80049fe:	9302      	str	r3, [sp, #8]
  rq.ocf = 0x101;
  rq.rparam = &status;
 8004a00:	f10d 0307 	add.w	r3, sp, #7
 8004a04:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
  if (hci_send_req(&rq, FALSE) < 0)
 8004a06:	4621      	mov	r1, r4
  rq.rlen = 1;
 8004a08:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 8004a0a:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 8004a0c:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8004a0e:	f000 fbc1 	bl	8005194 <hci_send_req>
 8004a12:	42a0      	cmp	r0, r4
    return BLE_STATUS_TIMEOUT;
  if (status) 
 8004a14:	bfac      	ite	ge
 8004a16:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 8004a1a:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 8004a1c:	b008      	add	sp, #32
 8004a1e:	bd10      	pop	{r4, pc}
 8004a20:	0101003f 	.word	0x0101003f

08004a24 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service(uint8_t Service_UUID_Type,
                                Service_UUID_t *Service_UUID,
                                uint8_t Service_Type,
                                uint8_t Max_Attribute_Records,
                                uint16_t *Service_Handle)
{
 8004a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8004a28:	2801      	cmp	r0, #1
{
 8004a2a:	b0c9      	sub	sp, #292	; 0x124
 8004a2c:	4604      	mov	r4, r0
 8004a2e:	468a      	mov	sl, r1
 8004a30:	4691      	mov	r9, r2
 8004a32:	4698      	mov	r8, r3
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8004a34:	d039      	beq.n	8004aaa <aci_gatt_add_service+0x86>
 8004a36:	2802      	cmp	r0, #2
 8004a38:	bf0c      	ite	eq
 8004a3a:	2711      	moveq	r7, #17
 8004a3c:	2701      	movne	r7, #1
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet(&resp, 0, sizeof(resp));
 8004a3e:	ad01      	add	r5, sp, #4
 8004a40:	2203      	movs	r2, #3
 8004a42:	2100      	movs	r1, #0
 8004a44:	4628      	mov	r0, r5
  int index_input = 0;
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 8004a46:	ae08      	add	r6, sp, #32
  Osal_MemSet(&resp, 0, sizeof(resp));
 8004a48:	f000 fa5d 	bl	8004f06 <Osal_MemSet>
  index_input += 1;
  /* var_len_data input */
  {
    uint8_t size;
    switch (Service_UUID_Type) {
 8004a4c:	2c01      	cmp	r4, #1
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 8004a4e:	7034      	strb	r4, [r6, #0]
    switch (Service_UUID_Type) {
 8004a50:	d02d      	beq.n	8004aae <aci_gatt_add_service+0x8a>
 8004a52:	2c02      	cmp	r4, #2
 8004a54:	d12d      	bne.n	8004ab2 <aci_gatt_add_service+0x8e>
      case 1: size = 2; break;
      case 2: size = 16; break;
 8004a56:	2410      	movs	r4, #16
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8004a58:	eb06 0b07 	add.w	fp, r6, r7
      default: return BLE_STATUS_ERROR;
    }
    Osal_MemCpy((void *) &cp0->Service_UUID, (const void *) Service_UUID, size);
 8004a5c:	4622      	mov	r2, r4
 8004a5e:	4651      	mov	r1, sl
 8004a60:	f10d 0021 	add.w	r0, sp, #33	; 0x21
 8004a64:	f000 fa4d 	bl	8004f02 <Osal_MemCpy>
    index_input += size;
    {
      cp1->Service_Type = htob(Service_Type, 1);
 8004a68:	f806 9007 	strb.w	r9, [r6, r7]
    {
      cp1->Max_Attribute_Records = htob(Max_Attribute_Records, 1);
    }
    index_input += 1;
  }
  Osal_MemSet(&rq, 0, sizeof(rq));
 8004a6c:	2218      	movs	r2, #24
 8004a6e:	2100      	movs	r1, #0
      cp1->Max_Attribute_Records = htob(Max_Attribute_Records, 1);
 8004a70:	f88b 8001 	strb.w	r8, [fp, #1]
  Osal_MemSet(&rq, 0, sizeof(rq));
 8004a74:	a802      	add	r0, sp, #8
 8004a76:	f000 fa46 	bl	8004f06 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004a7a:	4b10      	ldr	r3, [pc, #64]	; (8004abc <aci_gatt_add_service+0x98>)
 8004a7c:	9302      	str	r3, [sp, #8]
    index_input += 1;
 8004a7e:	3403      	adds	r4, #3
  rq.ocf = 0x102;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
  rq.rparam = &resp;
  rq.rlen = sizeof(resp);
 8004a80:	2303      	movs	r3, #3
  if (hci_send_req(&rq, FALSE) < 0)
 8004a82:	2100      	movs	r1, #0
 8004a84:	a802      	add	r0, sp, #8
  rq.cparam = cmd_buffer;
 8004a86:	9604      	str	r6, [sp, #16]
  rq.rparam = &resp;
 8004a88:	e9cd 4505 	strd	r4, r5, [sp, #20]
  rq.rlen = sizeof(resp);
 8004a8c:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8004a8e:	f000 fb81 	bl	8005194 <hci_send_req>
 8004a92:	2800      	cmp	r0, #0
 8004a94:	db0f      	blt.n	8004ab6 <aci_gatt_add_service+0x92>
    return BLE_STATUS_TIMEOUT;
  if (resp.Status) 
 8004a96:	7828      	ldrb	r0, [r5, #0]
 8004a98:	b920      	cbnz	r0, 8004aa4 <aci_gatt_add_service+0x80>
  {
    return resp.Status;
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 8004a9a:	682b      	ldr	r3, [r5, #0]
 8004a9c:	9a52      	ldr	r2, [sp, #328]	; 0x148
 8004a9e:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8004aa2:	8013      	strh	r3, [r2, #0]
  return BLE_STATUS_SUCCESS;
}
 8004aa4:	b049      	add	sp, #292	; 0x124
 8004aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8004aaa:	2703      	movs	r7, #3
 8004aac:	e7c7      	b.n	8004a3e <aci_gatt_add_service+0x1a>
      case 1: size = 2; break;
 8004aae:	2402      	movs	r4, #2
 8004ab0:	e7d2      	b.n	8004a58 <aci_gatt_add_service+0x34>
      default: return BLE_STATUS_ERROR;
 8004ab2:	2047      	movs	r0, #71	; 0x47
 8004ab4:	e7f6      	b.n	8004aa4 <aci_gatt_add_service+0x80>
    return BLE_STATUS_TIMEOUT;
 8004ab6:	20ff      	movs	r0, #255	; 0xff
 8004ab8:	e7f4      	b.n	8004aa4 <aci_gatt_add_service+0x80>
 8004aba:	bf00      	nop
 8004abc:	0102003f 	.word	0x0102003f

08004ac0 <aci_gatt_add_char>:
                             uint8_t Security_Permissions,
                             uint8_t GATT_Evt_Mask,
                             uint8_t Enc_Key_Size,
                             uint8_t Is_Variable,
                             uint16_t *Char_Handle)
{
 8004ac0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8004ac4:	2901      	cmp	r1, #1
{
 8004ac6:	b0c9      	sub	sp, #292	; 0x124
 8004ac8:	4606      	mov	r6, r0
 8004aca:	460c      	mov	r4, r1
 8004acc:	4691      	mov	r9, r2
 8004ace:	4698      	mov	r8, r3
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8004ad0:	d046      	beq.n	8004b60 <aci_gatt_add_char+0xa0>
 8004ad2:	2902      	cmp	r1, #2
 8004ad4:	bf0c      	ite	eq
 8004ad6:	2713      	moveq	r7, #19
 8004ad8:	2703      	movne	r7, #3
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet(&resp, 0, sizeof(resp));
  int index_input = 0;
  cp0->Service_Handle = htob(Service_Handle, 2);
 8004ada:	ad08      	add	r5, sp, #32
  Osal_MemSet(&resp, 0, sizeof(resp));
 8004adc:	2203      	movs	r2, #3
 8004ade:	2100      	movs	r1, #0
 8004ae0:	a801      	add	r0, sp, #4
 8004ae2:	f000 fa10 	bl	8004f06 <Osal_MemSet>
  cp0->Char_UUID_Type = htob(Char_UUID_Type, 1);
  index_input += 1;
  /* var_len_data input */
  {
    uint8_t size;
    switch (Char_UUID_Type) {
 8004ae6:	2c01      	cmp	r4, #1
  cp0->Service_Handle = htob(Service_Handle, 2);
 8004ae8:	802e      	strh	r6, [r5, #0]
  cp0->Char_UUID_Type = htob(Char_UUID_Type, 1);
 8004aea:	70ac      	strb	r4, [r5, #2]
    switch (Char_UUID_Type) {
 8004aec:	d03a      	beq.n	8004b64 <aci_gatt_add_char+0xa4>
 8004aee:	2c02      	cmp	r4, #2
 8004af0:	d13a      	bne.n	8004b68 <aci_gatt_add_char+0xa8>
      case 1: size = 2; break;
      case 2: size = 16; break;
 8004af2:	2410      	movs	r4, #16
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8004af4:	19ee      	adds	r6, r5, r7
      default: return BLE_STATUS_ERROR;
    }
    Osal_MemCpy((void *) &cp0->Char_UUID, (const void *) Char_UUID, size);
 8004af6:	4622      	mov	r2, r4
 8004af8:	4649      	mov	r1, r9
 8004afa:	f10d 0023 	add.w	r0, sp, #35	; 0x23
 8004afe:	f000 fa00 	bl	8004f02 <Osal_MemCpy>
    {
      cp1->Char_Value_Length = htob(Char_Value_Length, 2);
    }
    index_input += 2;
    {
      cp1->Char_Properties = htob(Char_Properties, 1);
 8004b02:	f89d 3140 	ldrb.w	r3, [sp, #320]	; 0x140
      cp1->Char_Value_Length = htob(Char_Value_Length, 2);
 8004b06:	f825 8007 	strh.w	r8, [r5, r7]
      cp1->Char_Properties = htob(Char_Properties, 1);
 8004b0a:	70b3      	strb	r3, [r6, #2]
    }
    index_input += 1;
    {
      cp1->Security_Permissions = htob(Security_Permissions, 1);
 8004b0c:	f89d 3144 	ldrb.w	r3, [sp, #324]	; 0x144
 8004b10:	70f3      	strb	r3, [r6, #3]
    }
    index_input += 1;
    {
      cp1->GATT_Evt_Mask = htob(GATT_Evt_Mask, 1);
 8004b12:	f89d 3148 	ldrb.w	r3, [sp, #328]	; 0x148
 8004b16:	7133      	strb	r3, [r6, #4]
    }
    index_input += 1;
    {
      cp1->Enc_Key_Size = htob(Enc_Key_Size, 1);
 8004b18:	f89d 314c 	ldrb.w	r3, [sp, #332]	; 0x14c
 8004b1c:	7173      	strb	r3, [r6, #5]
    }
    index_input += 1;
    {
      cp1->Is_Variable = htob(Is_Variable, 1);
 8004b1e:	f89d 3150 	ldrb.w	r3, [sp, #336]	; 0x150
 8004b22:	71b3      	strb	r3, [r6, #6]
    }
    index_input += 1;
  }
  Osal_MemSet(&rq, 0, sizeof(rq));
 8004b24:	2218      	movs	r2, #24
 8004b26:	2100      	movs	r1, #0
 8004b28:	a802      	add	r0, sp, #8
 8004b2a:	f000 f9ec 	bl	8004f06 <Osal_MemSet>
    index_input += 1;
 8004b2e:	340a      	adds	r4, #10
  rq.ogf = 0x3f;
 8004b30:	4b0f      	ldr	r3, [pc, #60]	; (8004b70 <aci_gatt_add_char+0xb0>)
 8004b32:	9302      	str	r3, [sp, #8]
  rq.ocf = 0x104;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
 8004b34:	9405      	str	r4, [sp, #20]
  rq.rparam = &resp;
  rq.rlen = sizeof(resp);
 8004b36:	2303      	movs	r3, #3
  rq.rparam = &resp;
 8004b38:	ac01      	add	r4, sp, #4
  if (hci_send_req(&rq, FALSE) < 0)
 8004b3a:	2100      	movs	r1, #0
 8004b3c:	a802      	add	r0, sp, #8
  rq.cparam = cmd_buffer;
 8004b3e:	9504      	str	r5, [sp, #16]
  rq.rparam = &resp;
 8004b40:	9406      	str	r4, [sp, #24]
  rq.rlen = sizeof(resp);
 8004b42:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8004b44:	f000 fb26 	bl	8005194 <hci_send_req>
 8004b48:	2800      	cmp	r0, #0
 8004b4a:	db0f      	blt.n	8004b6c <aci_gatt_add_char+0xac>
    return BLE_STATUS_TIMEOUT;
  if (resp.Status) 
 8004b4c:	7820      	ldrb	r0, [r4, #0]
 8004b4e:	b920      	cbnz	r0, 8004b5a <aci_gatt_add_char+0x9a>
  {
    return resp.Status;
  }
  *Char_Handle = btoh(resp.Char_Handle, 2);
 8004b50:	6823      	ldr	r3, [r4, #0]
 8004b52:	9a55      	ldr	r2, [sp, #340]	; 0x154
 8004b54:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8004b58:	8013      	strh	r3, [r2, #0]
  return BLE_STATUS_SUCCESS;
}
 8004b5a:	b049      	add	sp, #292	; 0x124
 8004b5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8004b60:	2705      	movs	r7, #5
 8004b62:	e7ba      	b.n	8004ada <aci_gatt_add_char+0x1a>
      case 1: size = 2; break;
 8004b64:	2402      	movs	r4, #2
 8004b66:	e7c5      	b.n	8004af4 <aci_gatt_add_char+0x34>
      default: return BLE_STATUS_ERROR;
 8004b68:	2047      	movs	r0, #71	; 0x47
 8004b6a:	e7f6      	b.n	8004b5a <aci_gatt_add_char+0x9a>
    return BLE_STATUS_TIMEOUT;
 8004b6c:	20ff      	movs	r0, #255	; 0xff
 8004b6e:	e7f4      	b.n	8004b5a <aci_gatt_add_char+0x9a>
 8004b70:	0104003f 	.word	0x0104003f

08004b74 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t Service_Handle,
                                      uint16_t Char_Handle,
                                      uint8_t Val_Offset,
                                      uint8_t Char_Value_Length,
                                      uint8_t Char_Value[])
{
 8004b74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b76:	b0c9      	sub	sp, #292	; 0x124
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 8004b78:	2700      	movs	r7, #0
  int index_input = 0;
  cp0->Service_Handle = htob(Service_Handle, 2);
 8004b7a:	f8ad 0020 	strh.w	r0, [sp, #32]
  index_input += 2;
  cp0->Char_Handle = htob(Char_Handle, 2);
 8004b7e:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
  index_input += 2;
  cp0->Val_Offset = htob(Val_Offset, 1);
 8004b82:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
  index_input += 1;
  cp0->Char_Value_Length = htob(Char_Value_Length, 1);
  index_input += 1;
  Osal_MemCpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length);
 8004b86:	994e      	ldr	r1, [sp, #312]	; 0x138
  cp0->Char_Value_Length = htob(Char_Value_Length, 1);
 8004b88:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  Osal_MemCpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length);
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	f10d 0026 	add.w	r0, sp, #38	; 0x26
{
 8004b92:	461c      	mov	r4, r3
  tBleStatus status = 0;
 8004b94:	f88d 7007 	strb.w	r7, [sp, #7]
  Osal_MemCpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length);
 8004b98:	f000 f9b3 	bl	8004f02 <Osal_MemCpy>
  index_input += Char_Value_Length;
  Osal_MemSet(&rq, 0, sizeof(rq));
 8004b9c:	2218      	movs	r2, #24
 8004b9e:	4639      	mov	r1, r7
 8004ba0:	a802      	add	r0, sp, #8
 8004ba2:	f000 f9b0 	bl	8004f06 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004ba6:	4b0a      	ldr	r3, [pc, #40]	; (8004bd0 <aci_gatt_update_char_value+0x5c>)
 8004ba8:	9302      	str	r3, [sp, #8]
  tBleStatus status = 0;
 8004baa:	f10d 0607 	add.w	r6, sp, #7
  rq.ocf = 0x106;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
  rq.rparam = &status;
  rq.rlen = 1;
 8004bae:	2301      	movs	r3, #1
  cp0->Service_Handle = htob(Service_Handle, 2);
 8004bb0:	ad08      	add	r5, sp, #32
  index_input += Char_Value_Length;
 8004bb2:	3406      	adds	r4, #6
  if (hci_send_req(&rq, FALSE) < 0)
 8004bb4:	4639      	mov	r1, r7
 8004bb6:	a802      	add	r0, sp, #8
  rq.cparam = cmd_buffer;
 8004bb8:	9504      	str	r5, [sp, #16]
  rq.rparam = &status;
 8004bba:	e9cd 4605 	strd	r4, r6, [sp, #20]
  rq.rlen = 1;
 8004bbe:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8004bc0:	f000 fae8 	bl	8005194 <hci_send_req>
 8004bc4:	42b8      	cmp	r0, r7
    return BLE_STATUS_TIMEOUT;
  if (status) 
 8004bc6:	bfac      	ite	ge
 8004bc8:	7830      	ldrbge	r0, [r6, #0]
    return BLE_STATUS_TIMEOUT;
 8004bca:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 8004bcc:	b049      	add	sp, #292	; 0x124
 8004bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bd0:	0106003f 	.word	0x0106003f

08004bd4 <aci_gatt_disc_all_primary_services>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gatt_disc_all_primary_services(uint16_t Connection_Handle)
{
 8004bd4:	b570      	push	{r4, r5, r6, lr}
 8004bd6:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_disc_all_primary_services_cp0 *cp0 = (aci_gatt_disc_all_primary_services_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 8004bd8:	2500      	movs	r5, #0
  int index_input = 0;
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 8004bda:	f8ad 0020 	strh.w	r0, [sp, #32]
  index_input += 2;
  Osal_MemSet(&rq, 0, sizeof(rq));
 8004bde:	4629      	mov	r1, r5
 8004be0:	2218      	movs	r2, #24
 8004be2:	a802      	add	r0, sp, #8
  tBleStatus status = 0;
 8004be4:	f88d 5007 	strb.w	r5, [sp, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 8004be8:	f000 f98d 	bl	8004f06 <Osal_MemSet>
  rq.ogf = 0x3f;
  rq.ocf = 0x112;
 8004bec:	4a0b      	ldr	r2, [pc, #44]	; (8004c1c <aci_gatt_disc_all_primary_services+0x48>)
 8004bee:	230f      	movs	r3, #15
  tBleStatus status = 0;
 8004bf0:	f10d 0407 	add.w	r4, sp, #7
  rq.ocf = 0x112;
 8004bf4:	e9cd 2302 	strd	r2, r3, [sp, #8]
  rq.event = 0x0F;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
 8004bf8:	2302      	movs	r3, #2
  rq.rparam = &status;
 8004bfa:	e9cd 3405 	strd	r3, r4, [sp, #20]
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 8004bfe:	ae08      	add	r6, sp, #32
  rq.rlen = 1;
 8004c00:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 8004c02:	4629      	mov	r1, r5
 8004c04:	a802      	add	r0, sp, #8
  rq.cparam = cmd_buffer;
 8004c06:	9604      	str	r6, [sp, #16]
  rq.rlen = 1;
 8004c08:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8004c0a:	f000 fac3 	bl	8005194 <hci_send_req>
 8004c0e:	42a8      	cmp	r0, r5
    return BLE_STATUS_TIMEOUT;
  if (status) 
 8004c10:	bfac      	ite	ge
 8004c12:	7820      	ldrbge	r0, [r4, #0]
    return BLE_STATUS_TIMEOUT;
 8004c14:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 8004c16:	b048      	add	sp, #288	; 0x120
 8004c18:	bd70      	pop	{r4, r5, r6, pc}
 8004c1a:	bf00      	nop
 8004c1c:	0112003f 	.word	0x0112003f

08004c20 <aci_gatt_disc_all_char_of_service>:
}

tBleStatus aci_gatt_disc_all_char_of_service(uint16_t Connection_Handle,
                                             uint16_t Start_Handle,
                                             uint16_t End_Handle)
{
 8004c20:	b570      	push	{r4, r5, r6, lr}
 8004c22:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_disc_all_char_of_service_cp0 *cp0 = (aci_gatt_disc_all_char_of_service_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 8004c24:	2600      	movs	r6, #0
  int index_input = 0;
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 8004c26:	f8ad 0020 	strh.w	r0, [sp, #32]
  index_input += 2;
  cp0->Start_Handle = htob(Start_Handle, 2);
 8004c2a:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
  index_input += 2;
  cp0->End_Handle = htob(End_Handle, 2);
 8004c2e:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
  index_input += 2;
  Osal_MemSet(&rq, 0, sizeof(rq));
 8004c32:	4631      	mov	r1, r6
 8004c34:	2218      	movs	r2, #24
 8004c36:	a802      	add	r0, sp, #8
  tBleStatus status = 0;
 8004c38:	f88d 6007 	strb.w	r6, [sp, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 8004c3c:	f000 f963 	bl	8004f06 <Osal_MemSet>
  rq.ogf = 0x3f;
  rq.ocf = 0x115;
 8004c40:	4a0b      	ldr	r2, [pc, #44]	; (8004c70 <aci_gatt_disc_all_char_of_service+0x50>)
 8004c42:	230f      	movs	r3, #15
  tBleStatus status = 0;
 8004c44:	f10d 0507 	add.w	r5, sp, #7
  rq.ocf = 0x115;
 8004c48:	e9cd 2302 	strd	r2, r3, [sp, #8]
  rq.event = 0x0F;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
 8004c4c:	2306      	movs	r3, #6
  rq.rparam = &status;
 8004c4e:	e9cd 3505 	strd	r3, r5, [sp, #20]
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 8004c52:	ac08      	add	r4, sp, #32
  rq.rlen = 1;
 8004c54:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 8004c56:	4631      	mov	r1, r6
 8004c58:	a802      	add	r0, sp, #8
  rq.cparam = cmd_buffer;
 8004c5a:	9404      	str	r4, [sp, #16]
  rq.rlen = 1;
 8004c5c:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8004c5e:	f000 fa99 	bl	8005194 <hci_send_req>
 8004c62:	42b0      	cmp	r0, r6
    return BLE_STATUS_TIMEOUT;
  if (status) 
 8004c64:	bfac      	ite	ge
 8004c66:	7828      	ldrbge	r0, [r5, #0]
    return BLE_STATUS_TIMEOUT;
 8004c68:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 8004c6a:	b048      	add	sp, #288	; 0x120
 8004c6c:	bd70      	pop	{r4, r5, r6, pc}
 8004c6e:	bf00      	nop
 8004c70:	0115003f 	.word	0x0115003f

08004c74 <aci_gatt_disc_all_char_desc>:
}

tBleStatus aci_gatt_disc_all_char_desc(uint16_t Connection_Handle,
                                       uint16_t Char_Handle,
                                       uint16_t End_Handle)
{
 8004c74:	b570      	push	{r4, r5, r6, lr}
 8004c76:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_disc_all_char_desc_cp0 *cp0 = (aci_gatt_disc_all_char_desc_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 8004c78:	2600      	movs	r6, #0
  int index_input = 0;
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 8004c7a:	f8ad 0020 	strh.w	r0, [sp, #32]
  index_input += 2;
  cp0->Char_Handle = htob(Char_Handle, 2);
 8004c7e:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
  index_input += 2;
  cp0->End_Handle = htob(End_Handle, 2);
 8004c82:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
  index_input += 2;
  Osal_MemSet(&rq, 0, sizeof(rq));
 8004c86:	4631      	mov	r1, r6
 8004c88:	2218      	movs	r2, #24
 8004c8a:	a802      	add	r0, sp, #8
  tBleStatus status = 0;
 8004c8c:	f88d 6007 	strb.w	r6, [sp, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 8004c90:	f000 f939 	bl	8004f06 <Osal_MemSet>
  rq.ogf = 0x3f;
  rq.ocf = 0x117;
 8004c94:	4a0b      	ldr	r2, [pc, #44]	; (8004cc4 <aci_gatt_disc_all_char_desc+0x50>)
 8004c96:	230f      	movs	r3, #15
  tBleStatus status = 0;
 8004c98:	f10d 0507 	add.w	r5, sp, #7
  rq.ocf = 0x117;
 8004c9c:	e9cd 2302 	strd	r2, r3, [sp, #8]
  rq.event = 0x0F;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
 8004ca0:	2306      	movs	r3, #6
  rq.rparam = &status;
 8004ca2:	e9cd 3505 	strd	r3, r5, [sp, #20]
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 8004ca6:	ac08      	add	r4, sp, #32
  rq.rlen = 1;
 8004ca8:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 8004caa:	4631      	mov	r1, r6
 8004cac:	a802      	add	r0, sp, #8
  rq.cparam = cmd_buffer;
 8004cae:	9404      	str	r4, [sp, #16]
  rq.rlen = 1;
 8004cb0:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8004cb2:	f000 fa6f 	bl	8005194 <hci_send_req>
 8004cb6:	42b0      	cmp	r0, r6
    return BLE_STATUS_TIMEOUT;
  if (status) 
 8004cb8:	bfac      	ite	ge
 8004cba:	7828      	ldrbge	r0, [r5, #0]
    return BLE_STATUS_TIMEOUT;
 8004cbc:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 8004cbe:	b048      	add	sp, #288	; 0x120
 8004cc0:	bd70      	pop	{r4, r5, r6, pc}
 8004cc2:	bf00      	nop
 8004cc4:	0117003f 	.word	0x0117003f

08004cc8 <aci_gatt_read_char_value>:

tBleStatus aci_gatt_read_char_value(uint16_t Connection_Handle,
                                    uint16_t Attr_Handle)
{
 8004cc8:	b570      	push	{r4, r5, r6, lr}
 8004cca:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_read_char_value_cp0 *cp0 = (aci_gatt_read_char_value_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 8004ccc:	2500      	movs	r5, #0
  int index_input = 0;
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 8004cce:	f8ad 0020 	strh.w	r0, [sp, #32]
  index_input += 2;
  cp0->Attr_Handle = htob(Attr_Handle, 2);
 8004cd2:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
  index_input += 2;
  Osal_MemSet(&rq, 0, sizeof(rq));
 8004cd6:	2218      	movs	r2, #24
 8004cd8:	4629      	mov	r1, r5
 8004cda:	a802      	add	r0, sp, #8
  tBleStatus status = 0;
 8004cdc:	f88d 5007 	strb.w	r5, [sp, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 8004ce0:	f000 f911 	bl	8004f06 <Osal_MemSet>
  rq.ogf = 0x3f;
  rq.ocf = 0x118;
 8004ce4:	4a0b      	ldr	r2, [pc, #44]	; (8004d14 <aci_gatt_read_char_value+0x4c>)
 8004ce6:	230f      	movs	r3, #15
  tBleStatus status = 0;
 8004ce8:	f10d 0407 	add.w	r4, sp, #7
  rq.ocf = 0x118;
 8004cec:	e9cd 2302 	strd	r2, r3, [sp, #8]
  rq.event = 0x0F;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
 8004cf0:	2304      	movs	r3, #4
  rq.rparam = &status;
 8004cf2:	e9cd 3405 	strd	r3, r4, [sp, #20]
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 8004cf6:	ae08      	add	r6, sp, #32
  rq.rlen = 1;
 8004cf8:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 8004cfa:	4629      	mov	r1, r5
 8004cfc:	a802      	add	r0, sp, #8
  rq.cparam = cmd_buffer;
 8004cfe:	9604      	str	r6, [sp, #16]
  rq.rlen = 1;
 8004d00:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8004d02:	f000 fa47 	bl	8005194 <hci_send_req>
 8004d06:	42a8      	cmp	r0, r5
    return BLE_STATUS_TIMEOUT;
  if (status) 
 8004d08:	bfac      	ite	ge
 8004d0a:	7820      	ldrbge	r0, [r4, #0]
    return BLE_STATUS_TIMEOUT;
 8004d0c:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 8004d0e:	b048      	add	sp, #288	; 0x120
 8004d10:	bd70      	pop	{r4, r5, r6, pc}
 8004d12:	bf00      	nop
 8004d14:	0118003f 	.word	0x0118003f

08004d18 <aci_gatt_write_char_desc>:

tBleStatus aci_gatt_write_char_desc(uint16_t Connection_Handle,
                                    uint16_t Attr_Handle,
                                    uint8_t Attribute_Val_Length,
                                    uint8_t Attribute_Val[])
{
 8004d18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d1a:	b0c9      	sub	sp, #292	; 0x124
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_write_char_desc_cp0 *cp0 = (aci_gatt_write_char_desc_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 8004d1c:	2700      	movs	r7, #0
  int index_input = 0;
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 8004d1e:	f8ad 0020 	strh.w	r0, [sp, #32]
  index_input += 2;
  cp0->Attr_Handle = htob(Attr_Handle, 2);
 8004d22:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
  index_input += 2;
  cp0->Attribute_Val_Length = htob(Attribute_Val_Length, 1);
  index_input += 1;
  Osal_MemCpy((void *) &cp0->Attribute_Val, (const void *) Attribute_Val, Attribute_Val_Length);
 8004d26:	f10d 0025 	add.w	r0, sp, #37	; 0x25
 8004d2a:	4619      	mov	r1, r3
{
 8004d2c:	4614      	mov	r4, r2
  cp0->Attribute_Val_Length = htob(Attribute_Val_Length, 1);
 8004d2e:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
  tBleStatus status = 0;
 8004d32:	f88d 7007 	strb.w	r7, [sp, #7]
  Osal_MemCpy((void *) &cp0->Attribute_Val, (const void *) Attribute_Val, Attribute_Val_Length);
 8004d36:	f000 f8e4 	bl	8004f02 <Osal_MemCpy>
  index_input += Attribute_Val_Length;
  Osal_MemSet(&rq, 0, sizeof(rq));
 8004d3a:	4639      	mov	r1, r7
 8004d3c:	2218      	movs	r2, #24
 8004d3e:	a802      	add	r0, sp, #8
 8004d40:	f000 f8e1 	bl	8004f06 <Osal_MemSet>
  rq.ogf = 0x3f;
  rq.ocf = 0x121;
 8004d44:	4a0b      	ldr	r2, [pc, #44]	; (8004d74 <aci_gatt_write_char_desc+0x5c>)
 8004d46:	230f      	movs	r3, #15
  tBleStatus status = 0;
 8004d48:	f10d 0607 	add.w	r6, sp, #7
  rq.ocf = 0x121;
 8004d4c:	e9cd 2302 	strd	r2, r3, [sp, #8]
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 8004d50:	ad08      	add	r5, sp, #32
  rq.event = 0x0F;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
  rq.rparam = &status;
  rq.rlen = 1;
 8004d52:	2301      	movs	r3, #1
  index_input += Attribute_Val_Length;
 8004d54:	3405      	adds	r4, #5
  if (hci_send_req(&rq, FALSE) < 0)
 8004d56:	4639      	mov	r1, r7
 8004d58:	a802      	add	r0, sp, #8
  rq.cparam = cmd_buffer;
 8004d5a:	9504      	str	r5, [sp, #16]
  rq.rparam = &status;
 8004d5c:	e9cd 4605 	strd	r4, r6, [sp, #20]
  rq.rlen = 1;
 8004d60:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8004d62:	f000 fa17 	bl	8005194 <hci_send_req>
 8004d66:	42b8      	cmp	r0, r7
    return BLE_STATUS_TIMEOUT;
  if (status) 
 8004d68:	bfac      	ite	ge
 8004d6a:	7830      	ldrbge	r0, [r6, #0]
    return BLE_STATUS_TIMEOUT;
 8004d6c:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 8004d6e:	b049      	add	sp, #292	; 0x124
 8004d70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d72:	bf00      	nop
 8004d74:	0121003f 	.word	0x0121003f

08004d78 <aci_gatt_read_char_desc>:

tBleStatus aci_gatt_read_char_desc(uint16_t Connection_Handle,
                                   uint16_t Attr_Handle)
{
 8004d78:	b570      	push	{r4, r5, r6, lr}
 8004d7a:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_read_char_desc_cp0 *cp0 = (aci_gatt_read_char_desc_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 8004d7c:	2500      	movs	r5, #0
  int index_input = 0;
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 8004d7e:	f8ad 0020 	strh.w	r0, [sp, #32]
  index_input += 2;
  cp0->Attr_Handle = htob(Attr_Handle, 2);
 8004d82:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
  index_input += 2;
  Osal_MemSet(&rq, 0, sizeof(rq));
 8004d86:	2218      	movs	r2, #24
 8004d88:	4629      	mov	r1, r5
 8004d8a:	a802      	add	r0, sp, #8
  tBleStatus status = 0;
 8004d8c:	f88d 5007 	strb.w	r5, [sp, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 8004d90:	f000 f8b9 	bl	8004f06 <Osal_MemSet>
  rq.ogf = 0x3f;
  rq.ocf = 0x122;
 8004d94:	4a0b      	ldr	r2, [pc, #44]	; (8004dc4 <aci_gatt_read_char_desc+0x4c>)
 8004d96:	230f      	movs	r3, #15
  tBleStatus status = 0;
 8004d98:	f10d 0407 	add.w	r4, sp, #7
  rq.ocf = 0x122;
 8004d9c:	e9cd 2302 	strd	r2, r3, [sp, #8]
  rq.event = 0x0F;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
 8004da0:	2304      	movs	r3, #4
  rq.rparam = &status;
 8004da2:	e9cd 3405 	strd	r3, r4, [sp, #20]
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 8004da6:	ae08      	add	r6, sp, #32
  rq.rlen = 1;
 8004da8:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 8004daa:	4629      	mov	r1, r5
 8004dac:	a802      	add	r0, sp, #8
  rq.cparam = cmd_buffer;
 8004dae:	9604      	str	r6, [sp, #16]
  rq.rlen = 1;
 8004db0:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8004db2:	f000 f9ef 	bl	8005194 <hci_send_req>
 8004db6:	42a8      	cmp	r0, r5
    return BLE_STATUS_TIMEOUT;
  if (status) 
 8004db8:	bfac      	ite	ge
 8004dba:	7820      	ldrbge	r0, [r4, #0]
    return BLE_STATUS_TIMEOUT;
 8004dbc:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 8004dbe:	b048      	add	sp, #288	; 0x120
 8004dc0:	bd70      	pop	{r4, r5, r6, pc}
 8004dc2:	bf00      	nop
 8004dc4:	0122003f 	.word	0x0122003f

08004dc8 <aci_gatt_write_without_resp>:

tBleStatus aci_gatt_write_without_resp(uint16_t Connection_Handle,
                                       uint16_t Attr_Handle,
                                       uint8_t Attribute_Val_Length,
                                       uint8_t Attribute_Val[])
{
 8004dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dca:	b0c9      	sub	sp, #292	; 0x124
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_write_without_resp_cp0 *cp0 = (aci_gatt_write_without_resp_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 8004dcc:	2700      	movs	r7, #0
  int index_input = 0;
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 8004dce:	f8ad 0020 	strh.w	r0, [sp, #32]
  index_input += 2;
  cp0->Attr_Handle = htob(Attr_Handle, 2);
 8004dd2:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
  index_input += 2;
  cp0->Attribute_Val_Length = htob(Attribute_Val_Length, 1);
  index_input += 1;
  Osal_MemCpy((void *) &cp0->Attribute_Val, (const void *) Attribute_Val, Attribute_Val_Length);
 8004dd6:	f10d 0025 	add.w	r0, sp, #37	; 0x25
 8004dda:	4619      	mov	r1, r3
{
 8004ddc:	4614      	mov	r4, r2
  cp0->Attribute_Val_Length = htob(Attribute_Val_Length, 1);
 8004dde:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
  tBleStatus status = 0;
 8004de2:	f88d 7007 	strb.w	r7, [sp, #7]
  Osal_MemCpy((void *) &cp0->Attribute_Val, (const void *) Attribute_Val, Attribute_Val_Length);
 8004de6:	f000 f88c 	bl	8004f02 <Osal_MemCpy>
  index_input += Attribute_Val_Length;
  Osal_MemSet(&rq, 0, sizeof(rq));
 8004dea:	2218      	movs	r2, #24
 8004dec:	4639      	mov	r1, r7
 8004dee:	a802      	add	r0, sp, #8
 8004df0:	f000 f889 	bl	8004f06 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004df4:	4b0a      	ldr	r3, [pc, #40]	; (8004e20 <aci_gatt_write_without_resp+0x58>)
 8004df6:	9302      	str	r3, [sp, #8]
  tBleStatus status = 0;
 8004df8:	f10d 0607 	add.w	r6, sp, #7
  rq.ocf = 0x123;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
  rq.rparam = &status;
  rq.rlen = 1;
 8004dfc:	2301      	movs	r3, #1
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 8004dfe:	ad08      	add	r5, sp, #32
  index_input += Attribute_Val_Length;
 8004e00:	3405      	adds	r4, #5
  if (hci_send_req(&rq, FALSE) < 0)
 8004e02:	4639      	mov	r1, r7
 8004e04:	a802      	add	r0, sp, #8
  rq.cparam = cmd_buffer;
 8004e06:	9504      	str	r5, [sp, #16]
  rq.rparam = &status;
 8004e08:	e9cd 4605 	strd	r4, r6, [sp, #20]
  rq.rlen = 1;
 8004e0c:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8004e0e:	f000 f9c1 	bl	8005194 <hci_send_req>
 8004e12:	42b8      	cmp	r0, r7
    return BLE_STATUS_TIMEOUT;
  if (status) 
 8004e14:	bfac      	ite	ge
 8004e16:	7830      	ldrbge	r0, [r6, #0]
    return BLE_STATUS_TIMEOUT;
 8004e18:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 8004e1a:	b049      	add	sp, #292	; 0x124
 8004e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	0123003f 	.word	0x0123003f

08004e24 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t Offset,
                                     uint8_t Length,
                                     uint8_t Value[])
{
 8004e24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e26:	b0c9      	sub	sp, #292	; 0x124
 8004e28:	460c      	mov	r4, r1
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 8004e2a:	2600      	movs	r6, #0
{
 8004e2c:	4611      	mov	r1, r2
  int index_input = 0;
  cp0->Offset = htob(Offset, 1);
 8004e2e:	f88d 0020 	strb.w	r0, [sp, #32]
  index_input += 1;
  cp0->Length = htob(Length, 1);
  index_input += 1;
  Osal_MemCpy((void *) &cp0->Value, (const void *) Value, Length);
 8004e32:	4622      	mov	r2, r4
 8004e34:	f10d 0022 	add.w	r0, sp, #34	; 0x22
  cp0->Length = htob(Length, 1);
 8004e38:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
  tBleStatus status = 0;
 8004e3c:	f88d 6007 	strb.w	r6, [sp, #7]
  Osal_MemCpy((void *) &cp0->Value, (const void *) Value, Length);
 8004e40:	f000 f85f 	bl	8004f02 <Osal_MemCpy>
  index_input += Length;
  Osal_MemSet(&rq, 0, sizeof(rq));
 8004e44:	2218      	movs	r2, #24
 8004e46:	4631      	mov	r1, r6
 8004e48:	a802      	add	r0, sp, #8
 8004e4a:	f000 f85c 	bl	8004f06 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004e4e:	4b0a      	ldr	r3, [pc, #40]	; (8004e78 <aci_hal_write_config_data+0x54>)
 8004e50:	9302      	str	r3, [sp, #8]
  tBleStatus status = 0;
 8004e52:	f10d 0507 	add.w	r5, sp, #7
  rq.ocf = 0x00c;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
  rq.rparam = &status;
  rq.rlen = 1;
 8004e56:	2301      	movs	r3, #1
  cp0->Offset = htob(Offset, 1);
 8004e58:	af08      	add	r7, sp, #32
  index_input += Length;
 8004e5a:	3402      	adds	r4, #2
  if (hci_send_req(&rq, FALSE) < 0)
 8004e5c:	4631      	mov	r1, r6
 8004e5e:	a802      	add	r0, sp, #8
  rq.cparam = cmd_buffer;
 8004e60:	9704      	str	r7, [sp, #16]
  rq.rparam = &status;
 8004e62:	e9cd 4505 	strd	r4, r5, [sp, #20]
  rq.rlen = 1;
 8004e66:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8004e68:	f000 f994 	bl	8005194 <hci_send_req>
 8004e6c:	42b0      	cmp	r0, r6
    return BLE_STATUS_TIMEOUT;
  if (status) 
 8004e6e:	bfac      	ite	ge
 8004e70:	7828      	ldrbge	r0, [r5, #0]
    return BLE_STATUS_TIMEOUT;
 8004e72:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 8004e74:	b049      	add	sp, #292	; 0x124
 8004e76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e78:	000c003f 	.word	0x000c003f

08004e7c <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level(uint8_t En_High_Power,
                                      uint8_t PA_Level)
{
 8004e7c:	b570      	push	{r4, r5, r6, lr}
 8004e7e:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 8004e80:	2500      	movs	r5, #0
  int index_input = 0;
  cp0->En_High_Power = htob(En_High_Power, 1);
 8004e82:	f88d 0020 	strb.w	r0, [sp, #32]
  index_input += 1;
  cp0->PA_Level = htob(PA_Level, 1);
 8004e86:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
  index_input += 1;
  Osal_MemSet(&rq, 0, sizeof(rq));
 8004e8a:	2218      	movs	r2, #24
 8004e8c:	4629      	mov	r1, r5
 8004e8e:	a802      	add	r0, sp, #8
  tBleStatus status = 0;
 8004e90:	f88d 5007 	strb.w	r5, [sp, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 8004e94:	f000 f837 	bl	8004f06 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004e98:	4b0a      	ldr	r3, [pc, #40]	; (8004ec4 <aci_hal_set_tx_power_level+0x48>)
 8004e9a:	9302      	str	r3, [sp, #8]
  tBleStatus status = 0;
 8004e9c:	f10d 0407 	add.w	r4, sp, #7
  rq.ocf = 0x00f;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
 8004ea0:	2302      	movs	r3, #2
  rq.rparam = &status;
 8004ea2:	e9cd 3405 	strd	r3, r4, [sp, #20]
  cp0->En_High_Power = htob(En_High_Power, 1);
 8004ea6:	ae08      	add	r6, sp, #32
  rq.rlen = 1;
 8004ea8:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 8004eaa:	4629      	mov	r1, r5
 8004eac:	a802      	add	r0, sp, #8
  rq.cparam = cmd_buffer;
 8004eae:	9604      	str	r6, [sp, #16]
  rq.rlen = 1;
 8004eb0:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8004eb2:	f000 f96f 	bl	8005194 <hci_send_req>
 8004eb6:	42a8      	cmp	r0, r5
    return BLE_STATUS_TIMEOUT;
  if (status) 
 8004eb8:	bfac      	ite	ge
 8004eba:	7820      	ldrbge	r0, [r4, #0]
    return BLE_STATUS_TIMEOUT;
 8004ebc:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 8004ebe:	b048      	add	sp, #288	; 0x120
 8004ec0:	bd70      	pop	{r4, r5, r6, pc}
 8004ec2:	bf00      	nop
 8004ec4:	000f003f 	.word	0x000f003f

08004ec8 <hci_reset>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus hci_reset(void)
{
 8004ec8:	b510      	push	{r4, lr}
  struct hci_request rq;
  tBleStatus status = 0;
 8004eca:	2400      	movs	r4, #0
{
 8004ecc:	b088      	sub	sp, #32
  Osal_MemSet(&rq, 0, sizeof(rq));
 8004ece:	2218      	movs	r2, #24
 8004ed0:	4621      	mov	r1, r4
 8004ed2:	a802      	add	r0, sp, #8
  tBleStatus status = 0;
 8004ed4:	f88d 4007 	strb.w	r4, [sp, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 8004ed8:	f000 f815 	bl	8004f06 <Osal_MemSet>
  rq.ogf = 0x03;
 8004edc:	f04f 1303 	mov.w	r3, #196611	; 0x30003
 8004ee0:	9302      	str	r3, [sp, #8]
  rq.ocf = 0x003;
  rq.rparam = &status;
 8004ee2:	f10d 0307 	add.w	r3, sp, #7
 8004ee6:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
  if (hci_send_req(&rq, FALSE) < 0)
 8004ee8:	4621      	mov	r1, r4
  rq.rlen = 1;
 8004eea:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 8004eec:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 8004eee:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8004ef0:	f000 f950 	bl	8005194 <hci_send_req>
 8004ef4:	42a0      	cmp	r0, r4
    return BLE_STATUS_TIMEOUT;
  if (status) 
 8004ef6:	bfac      	ite	ge
 8004ef8:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 8004efc:	20ff      	movlt	r0, #255	; 0xff
  {
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 8004efe:	b008      	add	sp, #32
 8004f00:	bd10      	pop	{r4, pc}

08004f02 <Osal_MemCpy>:
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
  return memcpy( dest, src, size ); 
 8004f02:	f000 bf1d 	b.w	8005d40 <memcpy>

08004f06 <Osal_MemSet>:
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
  return memset( ptr, value, size );
 8004f06:	f000 bf26 	b.w	8005d56 <memset>

08004f0a <UartTransmitStr>:
 }
#endif


uint16_t UartTransmitStr(char *StrToDisp)
{
 8004f0a:	b538      	push	{r3, r4, r5, lr}
 8004f0c:	4605      	mov	r5, r0
#ifdef CFG_CONSOLE_MENU
  uint16_t jj;

  jj = 0;
  while (StrToDisp[jj] != 0)
 8004f0e:	2400      	movs	r4, #0
 8004f10:	b2a0      	uxth	r0, r4
 8004f12:	1829      	adds	r1, r5, r0
 8004f14:	5c2b      	ldrb	r3, [r5, r0]
 8004f16:	3401      	adds	r4, #1
 8004f18:	b903      	cbnz	r3, 8004f1c <UartTransmitStr+0x12>
  }
  return jj;
#else
  return 0;
#endif
}
 8004f1a:	bd38      	pop	{r3, r4, r5, pc}
    HW_UART_Transmit(CFG_CONSOLE_MENU, (uint8_t*)&StrToDisp[jj++], 1, 0xFFFFFFFF);
 8004f1c:	f04f 33ff 	mov.w	r3, #4294967295
 8004f20:	2201      	movs	r2, #1
 8004f22:	2000      	movs	r0, #0
 8004f24:	f7fb fee2 	bl	8000cec <HW_UART_Transmit>
 8004f28:	e7f2      	b.n	8004f10 <UartTransmitStr+0x6>
	...

08004f2c <PosCur>:
 * @param iX, iY : Column & Line cursor position.
 * @return none.
 *******************************************************************************
 **/
void PosCur(uint8_t iX, uint8_t iY)
{
 8004f2c:	b530      	push	{r4, r5, lr}
  char szCtrl[30] = "\33[01;01H";
 8004f2e:	4a15      	ldr	r2, [pc, #84]	; (8004f84 <PosCur+0x58>)
{
 8004f30:	b089      	sub	sp, #36	; 0x24
 8004f32:	4605      	mov	r5, r0
 8004f34:	460c      	mov	r4, r1
  char szCtrl[30] = "\33[01;01H";
 8004f36:	6810      	ldr	r0, [r2, #0]
 8004f38:	6851      	ldr	r1, [r2, #4]
 8004f3a:	7a12      	ldrb	r2, [r2, #8]
 8004f3c:	466b      	mov	r3, sp
 8004f3e:	c303      	stmia	r3!, {r0, r1}
 8004f40:	2100      	movs	r1, #0
 8004f42:	701a      	strb	r2, [r3, #0]
 8004f44:	f10d 0009 	add.w	r0, sp, #9
 8004f48:	2215      	movs	r2, #21
 8004f4a:	f000 ff04 	bl	8005d56 <memset>

  szCtrl[3] = (int8_t) ((iY % 10) + '0');
 8004f4e:	200a      	movs	r0, #10
 8004f50:	fbb4 f3f0 	udiv	r3, r4, r0
 8004f54:	fb00 4413 	mls	r4, r0, r3, r4
  szCtrl[2] = (int8_t) ((iY / 10) + '0');
 8004f58:	3330      	adds	r3, #48	; 0x30
 8004f5a:	f88d 3002 	strb.w	r3, [sp, #2]
  szCtrl[6] = (int8_t) ((iX % 10) + '0');
 8004f5e:	fbb5 f3f0 	udiv	r3, r5, r0
 8004f62:	fb00 5013 	mls	r0, r0, r3, r5
 8004f66:	3030      	adds	r0, #48	; 0x30
 8004f68:	f88d 0006 	strb.w	r0, [sp, #6]
  szCtrl[5] = (int8_t) ((iX / 10) + '0');
 8004f6c:	3330      	adds	r3, #48	; 0x30
  szCtrl[3] = (int8_t) ((iY % 10) + '0');
 8004f6e:	3430      	adds	r4, #48	; 0x30

  UartTransmitStr(szCtrl);
 8004f70:	4668      	mov	r0, sp
  szCtrl[3] = (int8_t) ((iY % 10) + '0');
 8004f72:	f88d 4003 	strb.w	r4, [sp, #3]
  szCtrl[5] = (int8_t) ((iX / 10) + '0');
 8004f76:	f88d 3005 	strb.w	r3, [sp, #5]
  UartTransmitStr(szCtrl);
 8004f7a:	f7ff ffc6 	bl	8004f0a <UartTransmitStr>
}
 8004f7e:	b009      	add	sp, #36	; 0x24
 8004f80:	bd30      	pop	{r4, r5, pc}
 8004f82:	bf00      	nop
 8004f84:	080071c4 	.word	0x080071c4

08004f88 <ClearLines>:
{
 8004f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    UartTransmitStr("\033[K");
 8004f8a:	4f09      	ldr	r7, [pc, #36]	; (8004fb0 <ClearLines+0x28>)
{
 8004f8c:	4606      	mov	r6, r0
  for (iCpt = 0; iCpt < iNumber_Of_Line; iCpt++)
 8004f8e:	2400      	movs	r4, #0
 8004f90:	460d      	mov	r5, r1
 8004f92:	b2a3      	uxth	r3, r4
 8004f94:	429d      	cmp	r5, r3
 8004f96:	d800      	bhi.n	8004f9a <ClearLines+0x12>
}
 8004f98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    PosCur(1, iStart_Line + iCpt);
 8004f9a:	1931      	adds	r1, r6, r4
 8004f9c:	b2c9      	uxtb	r1, r1
 8004f9e:	2001      	movs	r0, #1
 8004fa0:	f7ff ffc4 	bl	8004f2c <PosCur>
    UartTransmitStr("\033[K");
 8004fa4:	4638      	mov	r0, r7
 8004fa6:	f7ff ffb0 	bl	8004f0a <UartTransmitStr>
 8004faa:	3401      	adds	r4, #1
 8004fac:	e7f1      	b.n	8004f92 <ClearLines+0xa>
 8004fae:	bf00      	nop
 8004fb0:	08008679 	.word	0x08008679

08004fb4 <ClearScreen>:
{
 8004fb4:	b508      	push	{r3, lr}
  UartTransmitStr("\033[2J");
 8004fb6:	4804      	ldr	r0, [pc, #16]	; (8004fc8 <ClearScreen+0x14>)
 8004fb8:	f7ff ffa7 	bl	8004f0a <UartTransmitStr>
  PosCur(1, 1);
 8004fbc:	2101      	movs	r1, #1
 8004fbe:	4608      	mov	r0, r1
}
 8004fc0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  PosCur(1, 1);
 8004fc4:	f7ff bfb2 	b.w	8004f2c <PosCur>
 8004fc8:	0800867d 	.word	0x0800867d

08004fcc <PrintPcCrt>:
 *             to be displayed. %d, %x, %s. %c, %u (unsigned int32_t) are supported.
 * @return  none
 *******************************************************************************
 */
void PrintPcCrt(uint8_t x, uint8_t y, char *szFormat, ...)
{
 8004fcc:	b40c      	push	{r2, r3}
 8004fce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  char fmtDetect, *pt;
  int32_t slval;
  va_list ptArg;

  /* -------   Execute the print if BusyFlag = FREE_FLAG  -------- */
  if (BusyFlag == FREE_FLAG)
 8004fd0:	4c2c      	ldr	r4, [pc, #176]	; (8005084 <PrintPcCrt+0xb8>)
{
 8004fd2:	9d08      	ldr	r5, [sp, #32]
  if (BusyFlag == FREE_FLAG)
 8004fd4:	7823      	ldrb	r3, [r4, #0]
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d115      	bne.n	8005006 <PrintPcCrt+0x3a>
  {
    BusyFlag = BUSY_FLAG;
 8004fda:	2302      	movs	r3, #2
 8004fdc:	7023      	strb	r3, [r4, #0]
    /* -------  This is for multi-thread */
    PosCur(x, y);
 8004fde:	f7ff ffa5 	bl	8004f2c <PosCur>
    fmtDetect = FALSE;
    va_start(ptArg, szFormat);
 8004fe2:	ab09      	add	r3, sp, #36	; 0x24
    fmtDetect = FALSE;
 8004fe4:	2200      	movs	r2, #0
    va_start(ptArg, szFormat);
 8004fe6:	9301      	str	r3, [sp, #4]

        case 'X':
        case 'x':
        case 'u':
          fmtDetect = FALSE;
          str[i++] = 0;
 8004fe8:	4616      	mov	r6, r2
    i = 0;
 8004fea:	4613      	mov	r3, r2
    for (pt = szFormat; *pt != 0; pt++)
 8004fec:	7829      	ldrb	r1, [r5, #0]
 8004fee:	4f26      	ldr	r7, [pc, #152]	; (8005088 <PrintPcCrt+0xbc>)
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	b969      	cbnz	r1, 8005010 <PrintPcCrt+0x44>
          UartTransmitStr(strDisplay);
          break;
        }
      }
    }
    str[i++] = 0;
 8004ff4:	443b      	add	r3, r7
    UartTransmitStr(str);
 8004ff6:	f107 0068 	add.w	r0, r7, #104	; 0x68
    str[i++] = 0;
 8004ffa:	f883 1068 	strb.w	r1, [r3, #104]	; 0x68
    UartTransmitStr(str);
 8004ffe:	f7ff ff84 	bl	8004f0a <UartTransmitStr>
    va_end(ptArg);
    BusyFlag = FREE_FLAG;       /* allow another printf to be executed */
 8005002:	2301      	movs	r3, #1
 8005004:	7023      	strb	r3, [r4, #0]
  }
}
 8005006:	b003      	add	sp, #12
 8005008:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800500c:	b002      	add	sp, #8
 800500e:	4770      	bx	lr
      str[i++] = *pt;
 8005010:	4438      	add	r0, r7
 8005012:	3301      	adds	r3, #1
 8005014:	f880 1068 	strb.w	r1, [r0, #104]	; 0x68
 8005018:	b2db      	uxtb	r3, r3
 800501a:	7829      	ldrb	r1, [r5, #0]
      if (fmtDetect == FALSE)
 800501c:	b922      	cbnz	r2, 8005028 <PrintPcCrt+0x5c>
          fmtDetect = TRUE;
 800501e:	3925      	subs	r1, #37	; 0x25
 8005020:	424a      	negs	r2, r1
 8005022:	414a      	adcs	r2, r1
    for (pt = szFormat; *pt != 0; pt++)
 8005024:	3501      	adds	r5, #1
 8005026:	e7e1      	b.n	8004fec <PrintPcCrt+0x20>
        switch (*pt)
 8005028:	2964      	cmp	r1, #100	; 0x64
 800502a:	d815      	bhi.n	8005058 <PrintPcCrt+0x8c>
 800502c:	2963      	cmp	r1, #99	; 0x63
 800502e:	d219      	bcs.n	8005064 <PrintPcCrt+0x98>
 8005030:	2958      	cmp	r1, #88	; 0x58
 8005032:	d1f7      	bne.n	8005024 <PrintPcCrt+0x58>
          str[i++] = 0;
 8005034:	443b      	add	r3, r7
          sprintf((char *) strDisplay, (char *) str, ulval);
 8005036:	4915      	ldr	r1, [pc, #84]	; (800508c <PrintPcCrt+0xc0>)
          str[i++] = 0;
 8005038:	f883 6068 	strb.w	r6, [r3, #104]	; 0x68
          ulval = va_arg(ptArg, unsigned long int);
 800503c:	9b01      	ldr	r3, [sp, #4]
 800503e:	1d1a      	adds	r2, r3, #4
 8005040:	9201      	str	r2, [sp, #4]
          sprintf((char *) strDisplay, (char *) str, ulval);
 8005042:	f101 0085 	add.w	r0, r1, #133	; 0x85
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	f000 ff1e 	bl	8005e88 <siprintf>
          UartTransmitStr(strDisplay);
 800504c:	4810      	ldr	r0, [pc, #64]	; (8005090 <PrintPcCrt+0xc4>)
          UartTransmitStr(strDisplay);
 800504e:	f7ff ff5c 	bl	8004f0a <UartTransmitStr>
          fmtDetect = FALSE;
 8005052:	2300      	movs	r3, #0
          i = 0;
 8005054:	461a      	mov	r2, r3
          break;
 8005056:	e7e5      	b.n	8005024 <PrintPcCrt+0x58>
        switch (*pt)
 8005058:	2975      	cmp	r1, #117	; 0x75
 800505a:	d0eb      	beq.n	8005034 <PrintPcCrt+0x68>
 800505c:	2978      	cmp	r1, #120	; 0x78
 800505e:	d0e9      	beq.n	8005034 <PrintPcCrt+0x68>
 8005060:	2973      	cmp	r1, #115	; 0x73
 8005062:	d1df      	bne.n	8005024 <PrintPcCrt+0x58>
          str[i++] = 0;
 8005064:	443b      	add	r3, r7
          sprintf((char *) strDisplay, (char *) str, sval);
 8005066:	f107 0168 	add.w	r1, r7, #104	; 0x68
          str[i++] = 0;
 800506a:	f883 6068 	strb.w	r6, [r3, #104]	; 0x68
          sval = va_arg(ptArg, int8_t *);
 800506e:	9b01      	ldr	r3, [sp, #4]
 8005070:	1d1a      	adds	r2, r3, #4
 8005072:	9201      	str	r2, [sp, #4]
          sprintf((char *) strDisplay, (char *) str, sval);
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	f107 00ed 	add.w	r0, r7, #237	; 0xed
 800507a:	f000 ff05 	bl	8005e88 <siprintf>
          UartTransmitStr(strDisplay);
 800507e:	f107 00ed 	add.w	r0, r7, #237	; 0xed
 8005082:	e7e4      	b.n	800504e <PrintPcCrt+0x82>
 8005084:	20000028 	.word	0x20000028
 8005088:	2000055c 	.word	0x2000055c
 800508c:	200005c4 	.word	0x200005c4
 8005090:	20000649 	.word	0x20000649

08005094 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8005094:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8005096:	f100 020c 	add.w	r2, r0, #12
 800509a:	466b      	mov	r3, sp
 800509c:	2121      	movs	r1, #33	; 0x21
 800509e:	f64f 4066 	movw	r0, #64614	; 0xfc66
 80050a2:	f000 f957 	bl	8005354 <shci_send>
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}
 80050a6:	f89d 000e 	ldrb.w	r0, [sp, #14]
 80050aa:	b005      	add	sp, #20
 80050ac:	f85d fb04 	ldr.w	pc, [sp], #4

080050b0 <TlEvtReceived>:

  return;
}

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 80050b0:	b508      	push	{r3, lr}
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80050b2:	7a43      	ldrb	r3, [r0, #9]
 80050b4:	3b0e      	subs	r3, #14
 80050b6:	2b01      	cmp	r3, #1
{
 80050b8:	4601      	mov	r1, r0
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80050ba:	d807      	bhi.n	80050cc <TlEvtReceived+0x1c>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 80050bc:	4807      	ldr	r0, [pc, #28]	; (80050dc <TlEvtReceived+0x2c>)
 80050be:	f000 fb2c 	bl	800571a <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 80050c2:	2000      	movs	r0, #0
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
  }

  return;
}
 80050c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 80050c8:	f7fc bc54 	b.w	8001974 <hci_cmd_resp_release>
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 80050cc:	4804      	ldr	r0, [pc, #16]	; (80050e0 <TlEvtReceived+0x30>)
 80050ce:	f000 fb24 	bl	800571a <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80050d2:	4803      	ldr	r0, [pc, #12]	; (80050e0 <TlEvtReceived+0x30>)
}
 80050d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80050d8:	f7fc bc48 	b.w	800196c <hci_notify_asynch_evt>
 80050dc:	20001080 	.word	0x20001080
 80050e0:	20000208 	.word	0x20000208

080050e4 <hci_init>:
{
 80050e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80050e6:	4c0f      	ldr	r4, [pc, #60]	; (8005124 <hci_init+0x40>)
 80050e8:	684b      	ldr	r3, [r1, #4]
  hciContext.UserEvtRx = UserEvtRx;
 80050ea:	62a0      	str	r0, [r4, #40]	; 0x28
{
 80050ec:	460d      	mov	r5, r1
  hci_register_io_bus (&hciContext.io);
 80050ee:	f104 000c 	add.w	r0, r4, #12
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80050f2:	60a3      	str	r3, [r4, #8]
  hci_register_io_bus (&hciContext.io);
 80050f4:	f000 f8ae 	bl	8005254 <hci_register_io_bus>
  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80050f8:	682e      	ldr	r6, [r5, #0]
  pCmdBuffer = p_cmdbuffer;
 80050fa:	4d0b      	ldr	r5, [pc, #44]	; (8005128 <hci_init+0x44>)
  LST_init_head (&HciCmdEventQueue);
 80050fc:	4620      	mov	r0, r4
 80050fe:	f000 faf3 	bl	80056e8 <LST_init_head>
  LST_init_head (&HciAsynchEventQueue);
 8005102:	4628      	mov	r0, r5
  pCmdBuffer = p_cmdbuffer;
 8005104:	60ae      	str	r6, [r5, #8]
  LST_init_head (&HciAsynchEventQueue);
 8005106:	f000 faef 	bl	80056e8 <LST_init_head>
  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800510a:	2301      	movs	r3, #1
 800510c:	732b      	strb	r3, [r5, #12]
  if (hciContext.io.Init)
 800510e:	68e3      	ldr	r3, [r4, #12]
 8005110:	b12b      	cbz	r3, 800511e <hci_init+0x3a>
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8005112:	a804      	add	r0, sp, #16
 8005114:	4a05      	ldr	r2, [pc, #20]	; (800512c <hci_init+0x48>)
    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8005116:	9602      	str	r6, [sp, #8]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8005118:	f840 2d10 	str.w	r2, [r0, #-16]!
    hciContext.io.Init(&Conf);
 800511c:	4798      	blx	r3
}
 800511e:	b004      	add	sp, #16
 8005120:	bd70      	pop	{r4, r5, r6, pc}
 8005122:	bf00      	nop
 8005124:	20001080 	.word	0x20001080
 8005128:	20000208 	.word	0x20000208
 800512c:	080050b1 	.word	0x080050b1

08005130 <hci_user_evt_proc>:
{
 8005130:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8005132:	4c16      	ldr	r4, [pc, #88]	; (800518c <hci_user_evt_proc+0x5c>)
 8005134:	4620      	mov	r0, r4
 8005136:	f000 fada 	bl	80056ee <LST_is_empty>
 800513a:	b9c0      	cbnz	r0, 800516e <hci_user_evt_proc+0x3e>
 800513c:	7b23      	ldrb	r3, [r4, #12]
 800513e:	b1b3      	cbz	r3, 800516e <hci_user_evt_proc+0x3e>
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8005140:	a901      	add	r1, sp, #4
 8005142:	4620      	mov	r0, r4
 8005144:	f000 fb00 	bl	8005748 <LST_remove_head>
    if (hciContext.UserEvtRx != NULL)
 8005148:	4b11      	ldr	r3, [pc, #68]	; (8005190 <hci_user_evt_proc+0x60>)
 800514a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800514c:	2301      	movs	r3, #1
 800514e:	b13a      	cbz	r2, 8005160 <hci_user_evt_proc+0x30>
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8005150:	a804      	add	r0, sp, #16
      UserEvtRxParam.pckt = phcievtbuffer;
 8005152:	9901      	ldr	r1, [sp, #4]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8005154:	f800 3d08 	strb.w	r3, [r0, #-8]!
      UserEvtRxParam.pckt = phcievtbuffer;
 8005158:	9103      	str	r1, [sp, #12]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800515a:	4790      	blx	r2
      UserEventFlow = UserEvtRxParam.status;
 800515c:	f89d 3008 	ldrb.w	r3, [sp, #8]
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8005160:	7323      	strb	r3, [r4, #12]
    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8005162:	7b23      	ldrb	r3, [r4, #12]
 8005164:	9901      	ldr	r1, [sp, #4]
 8005166:	b16b      	cbz	r3, 8005184 <hci_user_evt_proc+0x54>
      TL_MM_EvtDone( phcievtbuffer );
 8005168:	4608      	mov	r0, r1
 800516a:	f000 fa13 	bl	8005594 <TL_MM_EvtDone>
  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800516e:	4807      	ldr	r0, [pc, #28]	; (800518c <hci_user_evt_proc+0x5c>)
 8005170:	f000 fabd 	bl	80056ee <LST_is_empty>
 8005174:	b920      	cbnz	r0, 8005180 <hci_user_evt_proc+0x50>
 8005176:	7b23      	ldrb	r3, [r4, #12]
 8005178:	b113      	cbz	r3, 8005180 <hci_user_evt_proc+0x50>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800517a:	4804      	ldr	r0, [pc, #16]	; (800518c <hci_user_evt_proc+0x5c>)
 800517c:	f7fc fbf6 	bl	800196c <hci_notify_asynch_evt>
}
 8005180:	b004      	add	sp, #16
 8005182:	bd10      	pop	{r4, pc}
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8005184:	4801      	ldr	r0, [pc, #4]	; (800518c <hci_user_evt_proc+0x5c>)
 8005186:	f000 fabc 	bl	8005702 <LST_insert_head>
 800518a:	e7f0      	b.n	800516e <hci_user_evt_proc+0x3e>
 800518c:	20000208 	.word	0x20000208
 8005190:	20001080 	.word	0x20001080

08005194 <hci_send_req>:
{
 8005194:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    if(StatusNotCallBackFunction != 0)
 8005198:	4f2c      	ldr	r7, [pc, #176]	; (800524c <hci_send_req+0xb8>)
 800519a:	68bb      	ldr	r3, [r7, #8]
{
 800519c:	4605      	mov	r5, r0
    if(StatusNotCallBackFunction != 0)
 800519e:	b10b      	cbz	r3, 80051a4 <hci_send_req+0x10>
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 80051a0:	2000      	movs	r0, #0
 80051a2:	4798      	blx	r3
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 80051a4:	886c      	ldrh	r4, [r5, #2]
 80051a6:	882b      	ldrh	r3, [r5, #0]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80051a8:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 800524c <hci_send_req+0xb8>
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 80051ac:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80051b0:	ea44 2483 	orr.w	r4, r4, r3, lsl #10
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 80051b4:	4b26      	ldr	r3, [pc, #152]	; (8005250 <hci_send_req+0xbc>)
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 80051b6:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 80051ba:	6898      	ldr	r0, [r3, #8]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 80051bc:	b2a4      	uxth	r4, r4
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 80051be:	72c2      	strb	r2, [r0, #11]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 80051c0:	f8a0 4009 	strh.w	r4, [r0, #9]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 80051c4:	b2d2      	uxtb	r2, r2
 80051c6:	300c      	adds	r0, #12
 80051c8:	f000 fdba 	bl	8005d40 <memcpy>
  hciContext.io.Send(0,0);
 80051cc:	2100      	movs	r1, #0
 80051ce:	69fb      	ldr	r3, [r7, #28]
 80051d0:	4608      	mov	r0, r1
 80051d2:	4798      	blx	r3
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 80051d4:	f248 00e8 	movw	r0, #33000	; 0x80e8
 80051d8:	f7fc fbcf 	bl	800197a <hci_cmd_resp_wait>
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80051dc:	f04f 0800 	mov.w	r8, #0
 80051e0:	4648      	mov	r0, r9
 80051e2:	f000 fa84 	bl	80056ee <LST_is_empty>
 80051e6:	b150      	cbz	r0, 80051fe <hci_send_req+0x6a>
  while(local_cmd_status == HCI_TL_CmdBusy)
 80051e8:	f1b8 0f00 	cmp.w	r8, #0
 80051ec:	d0f2      	beq.n	80051d4 <hci_send_req+0x40>
    if(StatusNotCallBackFunction != 0)
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	b10b      	cbz	r3, 80051f6 <hci_send_req+0x62>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 80051f2:	2001      	movs	r0, #1
 80051f4:	4798      	blx	r3
}
 80051f6:	2000      	movs	r0, #0
 80051f8:	b003      	add	sp, #12
 80051fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 80051fe:	a901      	add	r1, sp, #4
 8005200:	4648      	mov	r0, r9
 8005202:	f000 faa1 	bl	8005748 <LST_remove_head>
      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8005206:	9e01      	ldr	r6, [sp, #4]
 8005208:	7a73      	ldrb	r3, [r6, #9]
 800520a:	2b0f      	cmp	r3, #15
 800520c:	d10c      	bne.n	8005228 <hci_send_req+0x94>
        if(pcommand_status_event->cmdcode == opcode)
 800520e:	f8b6 300d 	ldrh.w	r3, [r6, #13]
 8005212:	42a3      	cmp	r3, r4
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8005214:	bf02      	ittt	eq
 8005216:	692b      	ldreq	r3, [r5, #16]
 8005218:	7af2      	ldrbeq	r2, [r6, #11]
 800521a:	701a      	strbeq	r2, [r3, #0]
        if(pcommand_status_event->numcmd != 0)
 800521c:	7b33      	ldrb	r3, [r6, #12]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d0de      	beq.n	80051e0 <hci_send_req+0x4c>
          local_cmd_status = HCI_TL_CmdAvailable;
 8005222:	f04f 0801 	mov.w	r8, #1
 8005226:	e7db      	b.n	80051e0 <hci_send_req+0x4c>
        if(pcommand_complete_event->cmdcode == opcode)
 8005228:	89b3      	ldrh	r3, [r6, #12]
 800522a:	42a3      	cmp	r3, r4
 800522c:	d10c      	bne.n	8005248 <hci_send_req+0xb4>
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800522e:	7ab2      	ldrb	r2, [r6, #10]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8005230:	696b      	ldr	r3, [r5, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8005232:	6928      	ldr	r0, [r5, #16]
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8005234:	3a03      	subs	r2, #3
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8005236:	b2d2      	uxtb	r2, r2
 8005238:	429a      	cmp	r2, r3
 800523a:	bfa8      	it	ge
 800523c:	461a      	movge	r2, r3
 800523e:	616a      	str	r2, [r5, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8005240:	f106 010e 	add.w	r1, r6, #14
 8005244:	f000 fd7c 	bl	8005d40 <memcpy>
        if(pcommand_complete_event->numcmd != 0)
 8005248:	7af3      	ldrb	r3, [r6, #11]
 800524a:	e7e8      	b.n	800521e <hci_send_req+0x8a>
 800524c:	20001080 	.word	0x20001080
 8005250:	20000208 	.word	0x20000208

08005254 <hci_register_io_bus>:


void hci_register_io_bus(tHciIO* fops)
{
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8005254:	4b02      	ldr	r3, [pc, #8]	; (8005260 <hci_register_io_bus+0xc>)
 8005256:	6003      	str	r3, [r0, #0]
  fops->Send    = TL_BLE_SendCmd;
 8005258:	4b02      	ldr	r3, [pc, #8]	; (8005264 <hci_register_io_bus+0x10>)
 800525a:	6103      	str	r3, [r0, #16]

  return;
}
 800525c:	4770      	bx	lr
 800525e:	bf00      	nop
 8005260:	08005439 	.word	0x08005439
 8005264:	08005479 	.word	0x08005479

08005268 <TlUserEvtReceived>:

  return;
}

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8005268:	b510      	push	{r4, lr}
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800526a:	4c05      	ldr	r4, [pc, #20]	; (8005280 <TlUserEvtReceived+0x18>)
 800526c:	4601      	mov	r1, r0
 800526e:	4620      	mov	r0, r4
 8005270:	f000 fa53 	bl	800571a <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8005274:	4620      	mov	r0, r4

  return;
}
 8005276:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800527a:	f7fb b9cc 	b.w	8000616 <shci_notify_asynch_evt>
 800527e:	bf00      	nop
 8005280:	20000218 	.word	0x20000218

08005284 <TlCmdEvtReceived>:
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8005284:	2000      	movs	r0, #0
 8005286:	f7fb b9ca 	b.w	800061e <shci_cmd_resp_release>
	...

0800528c <Cmd_SetStatus.constprop.1>:
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800528c:	4b03      	ldr	r3, [pc, #12]	; (800529c <Cmd_SetStatus.constprop.1+0x10>)
 800528e:	2001      	movs	r0, #1
 8005290:	7218      	strb	r0, [r3, #8]
    if(StatusNotCallBackFunction != 0)
 8005292:	4b03      	ldr	r3, [pc, #12]	; (80052a0 <Cmd_SetStatus.constprop.1+0x14>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	b103      	cbz	r3, 800529a <Cmd_SetStatus.constprop.1+0xe>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8005298:	4718      	bx	r3
}
 800529a:	4770      	bx	lr
 800529c:	20000218 	.word	0x20000218
 80052a0:	200010ac 	.word	0x200010ac

080052a4 <shci_init>:
{
 80052a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80052a6:	4c0e      	ldr	r4, [pc, #56]	; (80052e0 <shci_init+0x3c>)
 80052a8:	684b      	ldr	r3, [r1, #4]
  shciContext.UserEvtRx = UserEvtRx;
 80052aa:	6220      	str	r0, [r4, #32]
{
 80052ac:	460d      	mov	r5, r1
  shci_register_io_bus (&shciContext.io);
 80052ae:	1d20      	adds	r0, r4, #4
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80052b0:	6023      	str	r3, [r4, #0]
  shci_register_io_bus (&shciContext.io);
 80052b2:	f000 f87d 	bl	80053b0 <shci_register_io_bus>
  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80052b6:	682e      	ldr	r6, [r5, #0]
  pCmdBuffer = p_cmdbuffer;
 80052b8:	4d0a      	ldr	r5, [pc, #40]	; (80052e4 <shci_init+0x40>)
  LST_init_head (&SHciAsynchEventQueue);
 80052ba:	4628      	mov	r0, r5
  pCmdBuffer = p_cmdbuffer;
 80052bc:	60ee      	str	r6, [r5, #12]
  LST_init_head (&SHciAsynchEventQueue);
 80052be:	f000 fa13 	bl	80056e8 <LST_init_head>
  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80052c2:	f7ff ffe3 	bl	800528c <Cmd_SetStatus.constprop.1>
  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80052c6:	2301      	movs	r3, #1
 80052c8:	742b      	strb	r3, [r5, #16]
  if (shciContext.io.Init)
 80052ca:	6863      	ldr	r3, [r4, #4]
 80052cc:	b133      	cbz	r3, 80052dc <shci_init+0x38>
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 80052ce:	4a06      	ldr	r2, [pc, #24]	; (80052e8 <shci_init+0x44>)
 80052d0:	9201      	str	r2, [sp, #4]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 80052d2:	4a06      	ldr	r2, [pc, #24]	; (80052ec <shci_init+0x48>)
    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80052d4:	9603      	str	r6, [sp, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 80052d6:	9202      	str	r2, [sp, #8]
    shciContext.io.Init(&Conf);
 80052d8:	a801      	add	r0, sp, #4
 80052da:	4798      	blx	r3
}
 80052dc:	b004      	add	sp, #16
 80052de:	bd70      	pop	{r4, r5, r6, pc}
 80052e0:	200010ac 	.word	0x200010ac
 80052e4:	20000218 	.word	0x20000218
 80052e8:	08005285 	.word	0x08005285
 80052ec:	08005269 	.word	0x08005269

080052f0 <shci_user_evt_proc>:
{
 80052f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80052f2:	4c16      	ldr	r4, [pc, #88]	; (800534c <shci_user_evt_proc+0x5c>)
 80052f4:	4620      	mov	r0, r4
 80052f6:	f000 f9fa 	bl	80056ee <LST_is_empty>
 80052fa:	b9c0      	cbnz	r0, 800532e <shci_user_evt_proc+0x3e>
 80052fc:	7c23      	ldrb	r3, [r4, #16]
 80052fe:	b1b3      	cbz	r3, 800532e <shci_user_evt_proc+0x3e>
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8005300:	a901      	add	r1, sp, #4
 8005302:	4620      	mov	r0, r4
 8005304:	f000 fa20 	bl	8005748 <LST_remove_head>
    if (shciContext.UserEvtRx != NULL)
 8005308:	4b11      	ldr	r3, [pc, #68]	; (8005350 <shci_user_evt_proc+0x60>)
 800530a:	6a1a      	ldr	r2, [r3, #32]
 800530c:	2301      	movs	r3, #1
 800530e:	b13a      	cbz	r2, 8005320 <shci_user_evt_proc+0x30>
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8005310:	a804      	add	r0, sp, #16
      UserEvtRxParam.pckt = phcievtbuffer;
 8005312:	9901      	ldr	r1, [sp, #4]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8005314:	f800 3d08 	strb.w	r3, [r0, #-8]!
      UserEvtRxParam.pckt = phcievtbuffer;
 8005318:	9103      	str	r1, [sp, #12]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800531a:	4790      	blx	r2
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800531c:	f89d 3008 	ldrb.w	r3, [sp, #8]
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8005320:	7423      	strb	r3, [r4, #16]
    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8005322:	7c23      	ldrb	r3, [r4, #16]
 8005324:	9901      	ldr	r1, [sp, #4]
 8005326:	b16b      	cbz	r3, 8005344 <shci_user_evt_proc+0x54>
      TL_MM_EvtDone( phcievtbuffer );
 8005328:	4608      	mov	r0, r1
 800532a:	f000 f933 	bl	8005594 <TL_MM_EvtDone>
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800532e:	4807      	ldr	r0, [pc, #28]	; (800534c <shci_user_evt_proc+0x5c>)
 8005330:	f000 f9dd 	bl	80056ee <LST_is_empty>
 8005334:	b920      	cbnz	r0, 8005340 <shci_user_evt_proc+0x50>
 8005336:	7c23      	ldrb	r3, [r4, #16]
 8005338:	b113      	cbz	r3, 8005340 <shci_user_evt_proc+0x50>
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800533a:	4804      	ldr	r0, [pc, #16]	; (800534c <shci_user_evt_proc+0x5c>)
 800533c:	f7fb f96b 	bl	8000616 <shci_notify_asynch_evt>
}
 8005340:	b004      	add	sp, #16
 8005342:	bd10      	pop	{r4, pc}
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8005344:	4801      	ldr	r0, [pc, #4]	; (800534c <shci_user_evt_proc+0x5c>)
 8005346:	f000 f9dc 	bl	8005702 <LST_insert_head>
 800534a:	e7f0      	b.n	800532e <shci_user_evt_proc+0x3e>
 800534c:	20000218 	.word	0x20000218
 8005350:	200010ac 	.word	0x200010ac

08005354 <shci_send>:
{
 8005354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if(StatusNotCallBackFunction != 0)
 8005358:	4c13      	ldr	r4, [pc, #76]	; (80053a8 <shci_send+0x54>)
{
 800535a:	4698      	mov	r8, r3
    if(StatusNotCallBackFunction != 0)
 800535c:	6823      	ldr	r3, [r4, #0]
{
 800535e:	4681      	mov	r9, r0
 8005360:	460f      	mov	r7, r1
 8005362:	4692      	mov	sl, r2
    if(StatusNotCallBackFunction != 0)
 8005364:	b10b      	cbz	r3, 800536a <shci_send+0x16>
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8005366:	2000      	movs	r0, #0
 8005368:	4798      	blx	r3
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800536a:	4d10      	ldr	r5, [pc, #64]	; (80053ac <shci_send+0x58>)
  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800536c:	68e8      	ldr	r0, [r5, #12]
  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800536e:	463a      	mov	r2, r7
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8005370:	2600      	movs	r6, #0
  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8005372:	f8a0 9009 	strh.w	r9, [r0, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8005376:	72c7      	strb	r7, [r0, #11]
  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8005378:	4651      	mov	r1, sl
 800537a:	300c      	adds	r0, #12
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800537c:	722e      	strb	r6, [r5, #8]
  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800537e:	f000 fcdf 	bl	8005d40 <memcpy>
  shciContext.io.Send(0,0);
 8005382:	6963      	ldr	r3, [r4, #20]
 8005384:	4631      	mov	r1, r6
 8005386:	4630      	mov	r0, r6
 8005388:	4798      	blx	r3
  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800538a:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800538e:	f7fb f949 	bl	8000624 <shci_cmd_resp_wait>
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8005392:	68e9      	ldr	r1, [r5, #12]
 8005394:	788a      	ldrb	r2, [r1, #2]
 8005396:	f108 0008 	add.w	r0, r8, #8
 800539a:	3203      	adds	r2, #3
 800539c:	f000 fcd0 	bl	8005d40 <memcpy>
}
 80053a0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80053a4:	f7ff bf72 	b.w	800528c <Cmd_SetStatus.constprop.1>
 80053a8:	200010ac 	.word	0x200010ac
 80053ac:	20000218 	.word	0x20000218

080053b0 <shci_register_io_bus>:


void shci_register_io_bus(tSHciIO* fops)
{
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 80053b0:	4b02      	ldr	r3, [pc, #8]	; (80053bc <shci_register_io_bus+0xc>)
 80053b2:	6003      	str	r3, [r0, #0]
  fops->Send    = TL_SYS_SendCmd;
 80053b4:	4b02      	ldr	r3, [pc, #8]	; (80053c0 <shci_register_io_bus+0x10>)
 80053b6:	6103      	str	r3, [r0, #16]

  return;
}
 80053b8:	4770      	bx	lr
 80053ba:	bf00      	nop
 80053bc:	080054c9 	.word	0x080054c9
 80053c0:	080054fd 	.word	0x080054fd

080053c4 <SendFreeBuf>:

  return;
}

static void SendFreeBuf( void )
{
 80053c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80053c6:	4c09      	ldr	r4, [pc, #36]	; (80053ec <SendFreeBuf+0x28>)
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 80053c8:	4d09      	ldr	r5, [pc, #36]	; (80053f0 <SendFreeBuf+0x2c>)
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80053ca:	4808      	ldr	r0, [pc, #32]	; (80053ec <SendFreeBuf+0x28>)
 80053cc:	f000 f98f 	bl	80056ee <LST_is_empty>
 80053d0:	b108      	cbz	r0, 80053d6 <SendFreeBuf+0x12>
  }

  return;
}
 80053d2:	b003      	add	sp, #12
 80053d4:	bd30      	pop	{r4, r5, pc}
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 80053d6:	a901      	add	r1, sp, #4
 80053d8:	4620      	mov	r0, r4
 80053da:	f000 f9b5 	bl	8005748 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 80053de:	692b      	ldr	r3, [r5, #16]
 80053e0:	9901      	ldr	r1, [sp, #4]
 80053e2:	6918      	ldr	r0, [r3, #16]
 80053e4:	f000 f999 	bl	800571a <LST_insert_tail>
 80053e8:	e7ef      	b.n	80053ca <SendFreeBuf+0x6>
 80053ea:	bf00      	nop
 80053ec:	200010d0 	.word	0x200010d0
 80053f0:	20030000 	.word	0x20030000

080053f4 <TL_Enable>:
  HW_IPCC_Enable();
 80053f4:	f7fd b91a 	b.w	800262c <HW_IPCC_Enable>

080053f8 <TL_Init>:
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 80053f8:	4b0d      	ldr	r3, [pc, #52]	; (8005430 <TL_Init+0x38>)
 80053fa:	4a0e      	ldr	r2, [pc, #56]	; (8005434 <TL_Init+0x3c>)
  TL_RefTable.p_ble_table = &TL_BleTable;
 80053fc:	f103 0120 	add.w	r1, r3, #32
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8005400:	6013      	str	r3, [r2, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8005402:	6051      	str	r1, [r2, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8005404:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005408:	6091      	str	r1, [r2, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800540a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800540e:	6211      	str	r1, [r2, #32]
  TL_RefTable.p_sys_table = &TL_SysTable;
 8005410:	f103 0144 	add.w	r1, r3, #68	; 0x44
 8005414:	60d1      	str	r1, [r2, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8005416:	f103 014c 	add.w	r1, r3, #76	; 0x4c
 800541a:	6111      	str	r1, [r2, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800541c:	f103 0168 	add.w	r1, r3, #104	; 0x68
 8005420:	6151      	str	r1, [r2, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8005422:	f103 016c 	add.w	r1, r3, #108	; 0x6c
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8005426:	3378      	adds	r3, #120	; 0x78
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8005428:	6191      	str	r1, [r2, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800542a:	61d3      	str	r3, [r2, #28]
  HW_IPCC_Init();
 800542c:	f7fd b916 	b.w	800265c <HW_IPCC_Init>
 8005430:	20030130 	.word	0x20030130
 8005434:	20030000 	.word	0x20030000

08005438 <TL_BLE_Init>:
{
 8005438:	b538      	push	{r3, r4, r5, lr}
  LST_init_head (&EvtQueue);
 800543a:	4d0c      	ldr	r5, [pc, #48]	; (800546c <TL_BLE_Init+0x34>)
{
 800543c:	4604      	mov	r4, r0
  LST_init_head (&EvtQueue);
 800543e:	4628      	mov	r0, r5
 8005440:	f000 f952 	bl	80056e8 <LST_init_head>
  p_bletable = TL_RefTable.p_ble_table;
 8005444:	4b0a      	ldr	r3, [pc, #40]	; (8005470 <TL_BLE_Init+0x38>)
  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8005446:	68a2      	ldr	r2, [r4, #8]
  p_bletable = TL_RefTable.p_ble_table;
 8005448:	685b      	ldr	r3, [r3, #4]
  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800544a:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800544c:	68e2      	ldr	r2, [r4, #12]
 800544e:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8005450:	f105 0208 	add.w	r2, r5, #8
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8005454:	e9c3 2501 	strd	r2, r5, [r3, #4]
  HW_IPCC_BLE_Init();
 8005458:	f7fd f920 	bl	800269c <HW_IPCC_BLE_Init>
  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800545c:	4b05      	ldr	r3, [pc, #20]	; (8005474 <TL_BLE_Init+0x3c>)
 800545e:	6822      	ldr	r2, [r4, #0]
 8005460:	609a      	str	r2, [r3, #8]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8005462:	6862      	ldr	r2, [r4, #4]
 8005464:	60da      	str	r2, [r3, #12]
}
 8005466:	2000      	movs	r0, #0
 8005468:	bd38      	pop	{r3, r4, r5, pc}
 800546a:	bf00      	nop
 800546c:	20030a24 	.word	0x20030a24
 8005470:	20030000 	.word	0x20030000
 8005474:	200010d0 	.word	0x200010d0

08005478 <TL_BLE_SendCmd>:
{
 8005478:	b508      	push	{r3, lr}
  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800547a:	4b04      	ldr	r3, [pc, #16]	; (800548c <TL_BLE_SendCmd+0x14>)
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	2201      	movs	r2, #1
 8005482:	721a      	strb	r2, [r3, #8]
  HW_IPCC_BLE_SendCmd();
 8005484:	f7fd f912 	bl	80026ac <HW_IPCC_BLE_SendCmd>
}
 8005488:	2000      	movs	r0, #0
 800548a:	bd08      	pop	{r3, pc}
 800548c:	20030000 	.word	0x20030000

08005490 <HW_IPCC_BLE_RxEvtNot>:
{
 8005490:	b537      	push	{r0, r1, r2, r4, r5, lr}
  while(LST_is_empty(&EvtQueue) == FALSE)
 8005492:	4c08      	ldr	r4, [pc, #32]	; (80054b4 <HW_IPCC_BLE_RxEvtNot+0x24>)
    BLE_IoBusEvtCallBackFunction(phcievt);
 8005494:	4d08      	ldr	r5, [pc, #32]	; (80054b8 <HW_IPCC_BLE_RxEvtNot+0x28>)
  while(LST_is_empty(&EvtQueue) == FALSE)
 8005496:	4807      	ldr	r0, [pc, #28]	; (80054b4 <HW_IPCC_BLE_RxEvtNot+0x24>)
 8005498:	f000 f929 	bl	80056ee <LST_is_empty>
 800549c:	b108      	cbz	r0, 80054a2 <HW_IPCC_BLE_RxEvtNot+0x12>
}
 800549e:	b003      	add	sp, #12
 80054a0:	bd30      	pop	{r4, r5, pc}
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 80054a2:	4620      	mov	r0, r4
 80054a4:	a901      	add	r1, sp, #4
 80054a6:	f000 f94f 	bl	8005748 <LST_remove_head>
    BLE_IoBusEvtCallBackFunction(phcievt);
 80054aa:	68ab      	ldr	r3, [r5, #8]
 80054ac:	9801      	ldr	r0, [sp, #4]
 80054ae:	4798      	blx	r3
 80054b0:	e7f1      	b.n	8005496 <HW_IPCC_BLE_RxEvtNot+0x6>
 80054b2:	bf00      	nop
 80054b4:	20030a24 	.word	0x20030a24
 80054b8:	200010d0 	.word	0x200010d0

080054bc <HW_IPCC_BLE_AclDataAckNot>:
  BLE_IoBusAclDataTxAck( );
 80054bc:	4b01      	ldr	r3, [pc, #4]	; (80054c4 <HW_IPCC_BLE_AclDataAckNot+0x8>)
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	4718      	bx	r3
 80054c2:	bf00      	nop
 80054c4:	200010d0 	.word	0x200010d0

080054c8 <TL_SYS_Init>:
{
 80054c8:	b538      	push	{r3, r4, r5, lr}
  LST_init_head (&SystemEvtQueue);
 80054ca:	4d09      	ldr	r5, [pc, #36]	; (80054f0 <TL_SYS_Init+0x28>)
{
 80054cc:	4604      	mov	r4, r0
  LST_init_head (&SystemEvtQueue);
 80054ce:	4628      	mov	r0, r5
 80054d0:	f000 f90a 	bl	80056e8 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 80054d4:	4b07      	ldr	r3, [pc, #28]	; (80054f4 <TL_SYS_Init+0x2c>)
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80054d6:	68a2      	ldr	r2, [r4, #8]
  p_systable = TL_RefTable.p_sys_table;
 80054d8:	68db      	ldr	r3, [r3, #12]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 80054da:	e9c3 2500 	strd	r2, r5, [r3]
  HW_IPCC_SYS_Init();
 80054de:	f7fd f8ed 	bl	80026bc <HW_IPCC_SYS_Init>
  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 80054e2:	4b05      	ldr	r3, [pc, #20]	; (80054f8 <TL_SYS_Init+0x30>)
 80054e4:	6822      	ldr	r2, [r4, #0]
 80054e6:	611a      	str	r2, [r3, #16]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 80054e8:	6862      	ldr	r2, [r4, #4]
 80054ea:	615a      	str	r2, [r3, #20]
}
 80054ec:	2000      	movs	r0, #0
 80054ee:	bd38      	pop	{r3, r4, r5, pc}
 80054f0:	20030a3c 	.word	0x20030a3c
 80054f4:	20030000 	.word	0x20030000
 80054f8:	200010d0 	.word	0x200010d0

080054fc <TL_SYS_SendCmd>:
{
 80054fc:	b508      	push	{r3, lr}
  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 80054fe:	4b04      	ldr	r3, [pc, #16]	; (8005510 <TL_SYS_SendCmd+0x14>)
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	2210      	movs	r2, #16
 8005506:	721a      	strb	r2, [r3, #8]
  HW_IPCC_SYS_SendCmd();
 8005508:	f7fd f8e0 	bl	80026cc <HW_IPCC_SYS_SendCmd>
}
 800550c:	2000      	movs	r0, #0
 800550e:	bd08      	pop	{r3, pc}
 8005510:	20030000 	.word	0x20030000

08005514 <HW_IPCC_SYS_CmdEvtNot>:
  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8005514:	4b02      	ldr	r3, [pc, #8]	; (8005520 <HW_IPCC_SYS_CmdEvtNot+0xc>)
 8005516:	68da      	ldr	r2, [r3, #12]
 8005518:	4b02      	ldr	r3, [pc, #8]	; (8005524 <HW_IPCC_SYS_CmdEvtNot+0x10>)
 800551a:	6810      	ldr	r0, [r2, #0]
 800551c:	691b      	ldr	r3, [r3, #16]
 800551e:	4718      	bx	r3
 8005520:	20030000 	.word	0x20030000
 8005524:	200010d0 	.word	0x200010d0

08005528 <HW_IPCC_SYS_EvtNot>:
{
 8005528:	b537      	push	{r0, r1, r2, r4, r5, lr}
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800552a:	4c08      	ldr	r4, [pc, #32]	; (800554c <HW_IPCC_SYS_EvtNot+0x24>)
    SYS_EVT_IoBusCallBackFunction( p_evt );
 800552c:	4d08      	ldr	r5, [pc, #32]	; (8005550 <HW_IPCC_SYS_EvtNot+0x28>)
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800552e:	4807      	ldr	r0, [pc, #28]	; (800554c <HW_IPCC_SYS_EvtNot+0x24>)
 8005530:	f000 f8dd 	bl	80056ee <LST_is_empty>
 8005534:	b108      	cbz	r0, 800553a <HW_IPCC_SYS_EvtNot+0x12>
}
 8005536:	b003      	add	sp, #12
 8005538:	bd30      	pop	{r4, r5, pc}
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800553a:	4620      	mov	r0, r4
 800553c:	a901      	add	r1, sp, #4
 800553e:	f000 f903 	bl	8005748 <LST_remove_head>
    SYS_EVT_IoBusCallBackFunction( p_evt );
 8005542:	696b      	ldr	r3, [r5, #20]
 8005544:	9801      	ldr	r0, [sp, #4]
 8005546:	4798      	blx	r3
 8005548:	e7f1      	b.n	800552e <HW_IPCC_SYS_EvtNot+0x6>
 800554a:	bf00      	nop
 800554c:	20030a3c 	.word	0x20030a3c
 8005550:	200010d0 	.word	0x200010d0

08005554 <TL_MM_Init>:
{
 8005554:	b538      	push	{r3, r4, r5, lr}
  LST_init_head (&FreeBufQueue);
 8005556:	4d0c      	ldr	r5, [pc, #48]	; (8005588 <TL_MM_Init+0x34>)
{
 8005558:	4604      	mov	r4, r0
  LST_init_head (&FreeBufQueue);
 800555a:	4628      	mov	r0, r5
 800555c:	f000 f8c4 	bl	80056e8 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8005560:	480a      	ldr	r0, [pc, #40]	; (800558c <TL_MM_Init+0x38>)
 8005562:	f000 f8c1 	bl	80056e8 <LST_init_head>
  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8005566:	4b0a      	ldr	r3, [pc, #40]	; (8005590 <TL_MM_Init+0x3c>)
  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8005568:	68a2      	ldr	r2, [r4, #8]
  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800556a:	691b      	ldr	r3, [r3, #16]
  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800556c:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800556e:	68e2      	ldr	r2, [r4, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8005570:	e9c3 2503 	strd	r2, r5, [r3, #12]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8005574:	6822      	ldr	r2, [r4, #0]
 8005576:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8005578:	6862      	ldr	r2, [r4, #4]
 800557a:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800557c:	6922      	ldr	r2, [r4, #16]
 800557e:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8005580:	6962      	ldr	r2, [r4, #20]
 8005582:	619a      	str	r2, [r3, #24]
}
 8005584:	bd38      	pop	{r3, r4, r5, pc}
 8005586:	bf00      	nop
 8005588:	200301b4 	.word	0x200301b4
 800558c:	200010d0 	.word	0x200010d0
 8005590:	20030000 	.word	0x20030000

08005594 <TL_MM_EvtDone>:
{
 8005594:	b508      	push	{r3, lr}
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8005596:	4601      	mov	r1, r0
 8005598:	4803      	ldr	r0, [pc, #12]	; (80055a8 <TL_MM_EvtDone+0x14>)
 800559a:	f000 f8be 	bl	800571a <LST_insert_tail>
  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800559e:	4803      	ldr	r0, [pc, #12]	; (80055ac <TL_MM_EvtDone+0x18>)
}
 80055a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 80055a4:	f7fd b8e0 	b.w	8002768 <HW_IPCC_MM_SendFreeBuf>
 80055a8:	200010d0 	.word	0x200010d0
 80055ac:	080053c5 	.word	0x080053c5

080055b0 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 80055b0:	b510      	push	{r4, lr}
  LST_init_head (&TracesEvtQueue);
 80055b2:	4c05      	ldr	r4, [pc, #20]	; (80055c8 <TL_TRACES_Init+0x18>)
 80055b4:	4620      	mov	r0, r4
 80055b6:	f000 f897 	bl	80056e8 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 80055ba:	4b04      	ldr	r3, [pc, #16]	; (80055cc <TL_TRACES_Init+0x1c>)
 80055bc:	695b      	ldr	r3, [r3, #20]
 80055be:	601c      	str	r4, [r3, #0]

  HW_IPCC_TRACES_Init();

  return;
}
 80055c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HW_IPCC_TRACES_Init();
 80055c4:	f7fd b8e6 	b.w	8002794 <HW_IPCC_TRACES_Init>
 80055c8:	200301bc 	.word	0x200301bc
 80055cc:	20030000 	.word	0x20030000

080055d0 <TL_TRACES_EvtReceived>:
}

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
    (void)(hcievt);
}
 80055d0:	4770      	bx	lr
	...

080055d4 <HW_IPCC_TRACES_EvtNot>:
{
 80055d4:	b513      	push	{r0, r1, r4, lr}
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80055d6:	4c07      	ldr	r4, [pc, #28]	; (80055f4 <HW_IPCC_TRACES_EvtNot+0x20>)
 80055d8:	4806      	ldr	r0, [pc, #24]	; (80055f4 <HW_IPCC_TRACES_EvtNot+0x20>)
 80055da:	f000 f888 	bl	80056ee <LST_is_empty>
 80055de:	b108      	cbz	r0, 80055e4 <HW_IPCC_TRACES_EvtNot+0x10>
}
 80055e0:	b002      	add	sp, #8
 80055e2:	bd10      	pop	{r4, pc}
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 80055e4:	4620      	mov	r0, r4
 80055e6:	a901      	add	r1, sp, #4
 80055e8:	f000 f8ae 	bl	8005748 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 80055ec:	9801      	ldr	r0, [sp, #4]
 80055ee:	f7ff ffef 	bl	80055d0 <TL_TRACES_EvtReceived>
 80055f2:	e7f1      	b.n	80055d8 <HW_IPCC_TRACES_EvtNot+0x4>
 80055f4:	200301bc 	.word	0x200301bc

080055f8 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 80055f8:	b513      	push	{r0, r1, r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055fa:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80055fe:	b672      	cpsid	i

  BACKUP_PRIMASK();

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 8005600:	480c      	ldr	r0, [pc, #48]	; (8005634 <DbgTrace_TxCpltCallback+0x3c>)
 8005602:	f10d 0106 	add.w	r1, sp, #6
 8005606:	f000 f9c4 	bl	8005992 <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 800560a:	f10d 0106 	add.w	r1, sp, #6
 800560e:	4809      	ldr	r0, [pc, #36]	; (8005634 <DbgTrace_TxCpltCallback+0x3c>)
 8005610:	f000 fa20 	bl	8005a54 <CircularQueue_Sense>


  if ( buf != NULL) 
 8005614:	b140      	cbz	r0, 8005628 <DbgTrace_TxCpltCallback+0x30>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005616:	f384 8810 	msr	PRIMASK, r4
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 800561a:	4a07      	ldr	r2, [pc, #28]	; (8005638 <DbgTrace_TxCpltCallback+0x40>)
 800561c:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8005620:	f7fb f806 	bl	8000630 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 8005624:	b002      	add	sp, #8
 8005626:	bd10      	pop	{r4, pc}
    DbgTracePeripheralReady = SET;
 8005628:	4b04      	ldr	r3, [pc, #16]	; (800563c <DbgTrace_TxCpltCallback+0x44>)
 800562a:	2201      	movs	r2, #1
 800562c:	701a      	strb	r2, [r3, #0]
 800562e:	f384 8810 	msr	PRIMASK, r4
}
 8005632:	e7f7      	b.n	8005624 <DbgTrace_TxCpltCallback+0x2c>
 8005634:	200010e8 	.word	0x200010e8
 8005638:	080055f9 	.word	0x080055f9
 800563c:	2000002a 	.word	0x2000002a

08005640 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 8005640:	b507      	push	{r0, r1, r2, lr}
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 8005642:	f7fa fff2 	bl	800062a <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 8005646:	2302      	movs	r3, #2
 8005648:	9300      	str	r3, [sp, #0]
 800564a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800564e:	2300      	movs	r3, #0
 8005650:	4903      	ldr	r1, [pc, #12]	; (8005660 <DbgTraceInit+0x20>)
 8005652:	4804      	ldr	r0, [pc, #16]	; (8005664 <DbgTraceInit+0x24>)
 8005654:	f000 f884 	bl	8005760 <CircularQueue_Init>
#endif 
#endif
  return;
}
 8005658:	b003      	add	sp, #12
 800565a:	f85d fb04 	ldr.w	pc, [sp], #4
 800565e:	bf00      	nop
 8005660:	20001108 	.word	0x20001108
 8005664:	200010e8 	.word	0x200010e8

08005668 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 8005668:	b570      	push	{r4, r5, r6, lr}
 800566a:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800566c:	f3ef 8510 	mrs	r5, PRIMASK
  uint8_t* buffer;

  BACKUP_PRIMASK();

  /* Ignore flushes */
  if ( handle == -1 )
 8005670:	1c43      	adds	r3, r0, #1
 8005672:	d01b      	beq.n	80056ac <DbgTraceWrite+0x44>
  {
    chars_written = ( size_t ) 0;
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 8005674:	3801      	subs	r0, #1
 8005676:	2801      	cmp	r0, #1
 8005678:	d81a      	bhi.n	80056b0 <DbgTraceWrite+0x48>
  {
    chars_written = ( size_t ) - 1;
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 800567a:	b192      	cbz	r2, 80056a2 <DbgTraceWrite+0x3a>
  __ASM volatile ("cpsid i" : : : "memory");
 800567c:	b672      	cpsid	i
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 800567e:	b296      	uxth	r6, r2
 8005680:	2301      	movs	r3, #1
 8005682:	4632      	mov	r2, r6
 8005684:	480c      	ldr	r0, [pc, #48]	; (80056b8 <DbgTraceWrite+0x50>)
 8005686:	f000 f87f 	bl	8005788 <CircularQueue_Add>
    if (buffer && DbgTracePeripheralReady)
 800568a:	b160      	cbz	r0, 80056a6 <DbgTraceWrite+0x3e>
 800568c:	4b0b      	ldr	r3, [pc, #44]	; (80056bc <DbgTraceWrite+0x54>)
 800568e:	781a      	ldrb	r2, [r3, #0]
 8005690:	b14a      	cbz	r2, 80056a6 <DbgTraceWrite+0x3e>
    {
      DbgTracePeripheralReady = RESET;
 8005692:	2200      	movs	r2, #0
 8005694:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005696:	f385 8810 	msr	PRIMASK, r5
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 800569a:	4a09      	ldr	r2, [pc, #36]	; (80056c0 <DbgTraceWrite+0x58>)
 800569c:	4631      	mov	r1, r6
 800569e:	f7fa ffc7 	bl	8000630 <DbgOutputTraces>
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
}
 80056a2:	4620      	mov	r0, r4
 80056a4:	bd70      	pop	{r4, r5, r6, pc}
 80056a6:	f385 8810 	msr	PRIMASK, r5
 80056aa:	e7fa      	b.n	80056a2 <DbgTraceWrite+0x3a>
    chars_written = ( size_t ) 0;
 80056ac:	2400      	movs	r4, #0
 80056ae:	e7f8      	b.n	80056a2 <DbgTraceWrite+0x3a>
    chars_written = ( size_t ) - 1;
 80056b0:	f04f 34ff 	mov.w	r4, #4294967295
 80056b4:	e7f5      	b.n	80056a2 <DbgTraceWrite+0x3a>
 80056b6:	bf00      	nop
 80056b8:	200010e8 	.word	0x200010e8
 80056bc:	2000002a 	.word	0x2000002a
 80056c0:	080055f9 	.word	0x080055f9

080056c4 <_write>:
  return ( DbgTraceWrite(handle, buf, bufSize) );
 80056c4:	f7ff bfd0 	b.w	8005668 <DbgTraceWrite>

080056c8 <OTP_Read>:

uint8_t * OTP_Read( uint8_t id )
{
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 80056c8:	4b05      	ldr	r3, [pc, #20]	; (80056e0 <OTP_Read+0x18>)

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80056ca:	4a06      	ldr	r2, [pc, #24]	; (80056e4 <OTP_Read+0x1c>)
 80056cc:	79d9      	ldrb	r1, [r3, #7]
 80056ce:	4281      	cmp	r1, r0
 80056d0:	d002      	beq.n	80056d8 <OTP_Read+0x10>
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d102      	bne.n	80056dc <OTP_Read+0x14>
    p_id -= 8 ;
  }

  if((*( p_id + 7 )) != id)
  {
    p_id = 0 ;
 80056d6:	2300      	movs	r3, #0
  }

  return p_id ;
}
 80056d8:	4618      	mov	r0, r3
 80056da:	4770      	bx	lr
    p_id -= 8 ;
 80056dc:	3b08      	subs	r3, #8
 80056de:	e7f5      	b.n	80056cc <OTP_Read+0x4>
 80056e0:	1fff73f8 	.word	0x1fff73f8
 80056e4:	1fff7000 	.word	0x1fff7000

080056e8 <LST_init_head>:
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
  listHead->next = listHead;
  listHead->prev = listHead;
 80056e8:	e9c0 0000 	strd	r0, r0, [r0]
}
 80056ec:	4770      	bx	lr

080056ee <LST_is_empty>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056ee:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80056f2:	b672      	cpsid	i
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 80056f4:	6803      	ldr	r3, [r0, #0]
  {
    return_value = TRUE;
 80056f6:	1a1b      	subs	r3, r3, r0
 80056f8:	4258      	negs	r0, r3
 80056fa:	4158      	adcs	r0, r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056fc:	f382 8810 	msr	PRIMASK, r2
    return_value = FALSE;
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
}
 8005700:	4770      	bx	lr

08005702 <LST_insert_head>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005702:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8005706:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8005708:	6802      	ldr	r2, [r0, #0]
  node->prev = listHead;
 800570a:	e9c1 2000 	strd	r2, r0, [r1]
  listHead->next = node;
 800570e:	6001      	str	r1, [r0, #0]
  (node->next)->prev = node;
 8005710:	680a      	ldr	r2, [r1, #0]
 8005712:	6051      	str	r1, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005714:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8005718:	4770      	bx	lr

0800571a <LST_insert_tail>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800571a:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800571e:	b672      	cpsid	i

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
  node->prev = listHead->prev;
 8005720:	6842      	ldr	r2, [r0, #4]
 8005722:	604a      	str	r2, [r1, #4]
  node->next = listHead;
 8005724:	6008      	str	r0, [r1, #0]
  listHead->prev = node;
 8005726:	6041      	str	r1, [r0, #4]
  (node->prev)->next = node;
 8005728:	684a      	ldr	r2, [r1, #4]
 800572a:	6011      	str	r1, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800572c:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8005730:	4770      	bx	lr

08005732 <LST_remove_node>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005732:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8005736:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8005738:	e9d0 1300 	ldrd	r1, r3, [r0]
 800573c:	6019      	str	r1, [r3, #0]
  (node->next)->prev = node->prev;
 800573e:	6801      	ldr	r1, [r0, #0]
 8005740:	604b      	str	r3, [r1, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005742:	f382 8810 	msr	PRIMASK, r2

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8005746:	4770      	bx	lr

08005748 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8005748:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800574a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800574e:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8005750:	6803      	ldr	r3, [r0, #0]
 8005752:	600b      	str	r3, [r1, #0]
  LST_remove_node (listHead->next);
 8005754:	6800      	ldr	r0, [r0, #0]
 8005756:	f7ff ffec 	bl	8005732 <LST_remove_node>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800575a:	f384 8810 	msr	PRIMASK, r4

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800575e:	bd10      	pop	{r4, pc}

08005760 <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 8005760:	b510      	push	{r4, lr}
 8005762:	f89d 4008 	ldrb.w	r4, [sp, #8]
  q->qBuff = queueBuffer;
 8005766:	6001      	str	r1, [r0, #0]
  q->first = 0;
 8005768:	2100      	movs	r1, #0
  q->last = 0; /* queueSize-1; */
 800576a:	e9c0 1103 	strd	r1, r1, [r0, #12]
  q->byteCount = 0;
  q->elementCount = 0;
 800576e:	e9c0 1105 	strd	r1, r1, [r0, #20]
  q->queueMaxSize = queueSize;
 8005772:	6042      	str	r2, [r0, #4]
  q->elementSize = elementSize;
 8005774:	8103      	strh	r3, [r0, #8]
  q->optionFlags = optionFlags;
 8005776:	7704      	strb	r4, [r0, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 8005778:	f014 0002 	ands.w	r0, r4, #2
 800577c:	d003      	beq.n	8005786 <CircularQueue_Init+0x26>
 800577e:	1a58      	subs	r0, r3, r1
 8005780:	bf18      	it	ne
 8005782:	2001      	movne	r0, #1
 8005784:	4240      	negs	r0, r0
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
  }
  return 0;
}
 8005786:	bd10      	pop	{r4, pc}

08005788 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 8005788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicat size of parta of elemenet that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 800578c:	8905      	ldrh	r5, [r0, #8]
{
 800578e:	4604      	mov	r4, r0
 8005790:	468b      	mov	fp, r1
 8005792:	e9d0 0104 	ldrd	r0, r1, [r0, #16]
 8005796:	b085      	sub	sp, #20
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 8005798:	2d00      	cmp	r5, #0
{
 800579a:	9302      	str	r3, [sp, #8]
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 800579c:	bf14      	ite	ne
 800579e:	f04f 0800 	movne.w	r8, #0
 80057a2:	f04f 0802 	moveq.w	r8, #2
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 80057a6:	2900      	cmp	r1, #0
 80057a8:	d033      	beq.n	8005812 <CircularQueue_Add+0x8a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 80057aa:	2d00      	cmp	r5, #0
 80057ac:	d134      	bne.n	8005818 <CircularQueue_Add+0x90>
 80057ae:	6866      	ldr	r6, [r4, #4]
 80057b0:	6825      	ldr	r5, [r4, #0]
 80057b2:	1c43      	adds	r3, r0, #1
 80057b4:	42b3      	cmp	r3, r6
 80057b6:	bf28      	it	cs
 80057b8:	1b9b      	subcs	r3, r3, r6
 80057ba:	5c2f      	ldrb	r7, [r5, r0]
 80057bc:	5ceb      	ldrb	r3, [r5, r3]
 80057be:	3702      	adds	r7, #2
 80057c0:	eb07 2703 	add.w	r7, r7, r3, lsl #8
 80057c4:	b2bf      	uxth	r7, r7
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 80057c6:	4615      	mov	r5, r2
  {
    elementSize = q->elementSize;
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 80057c8:	68e3      	ldr	r3, [r4, #12]
 80057ca:	4283      	cmp	r3, r0
 80057cc:	bf9e      	ittt	ls
 80057ce:	6863      	ldrls	r3, [r4, #4]
 80057d0:	1a1b      	subls	r3, r3, r0
 80057d2:	1bda      	subls	r2, r3, r7

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 80057d4:	9b02      	ldr	r3, [sp, #8]
 80057d6:	eb05 0008 	add.w	r0, r5, r8
   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 80057da:	bf88      	it	hi
 80057dc:	2200      	movhi	r2, #0
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 80057de:	fb03 f600 	mul.w	r6, r3, r0
 80057e2:	4296      	cmp	r6, r2
 80057e4:	d31c      	bcc.n	8005820 <CircularQueue_Add+0x98>
 80057e6:	fbb2 f3f0 	udiv	r3, r2, r0
 80057ea:	fb00 2313 	mls	r3, r0, r3, r2
 80057ee:	b2db      	uxtb	r3, r3
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 80057f0:	4598      	cmp	r8, r3
 80057f2:	d215      	bcs.n	8005820 <CircularQueue_Add+0x98>
 80057f4:	7f22      	ldrb	r2, [r4, #28]
 80057f6:	f012 0f01 	tst.w	r2, #1
 80057fa:	bf08      	it	eq
 80057fc:	2300      	moveq	r3, #0
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 80057fe:	0790      	lsls	r0, r2, #30
 8005800:	bf54      	ite	pl
 8005802:	b29b      	uxthpl	r3, r3
 8005804:	fa1f f388 	uxthmi.w	r3, r8
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 8005808:	b965      	cbnz	r5, 8005824 <CircularQueue_Add+0x9c>
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
  }
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
 800580a:	2000      	movs	r0, #0
  }
  return ptr;
}
 800580c:	b005      	add	sp, #20
 800580e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (q->elementSize > 0)               
 8005812:	b91d      	cbnz	r5, 800581c <CircularQueue_Add+0x94>
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 8005814:	462f      	mov	r7, r5
 8005816:	e7d6      	b.n	80057c6 <CircularQueue_Add+0x3e>
 8005818:	462f      	mov	r7, r5
 800581a:	e7d5      	b.n	80057c8 <CircularQueue_Add+0x40>
 800581c:	460f      	mov	r7, r1
 800581e:	e7d3      	b.n	80057c8 <CircularQueue_Add+0x40>
 8005820:	2300      	movs	r3, #0
 8005822:	e7f1      	b.n	8005808 <CircularQueue_Add+0x80>
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 8005824:	4431      	add	r1, r6
 8005826:	6862      	ldr	r2, [r4, #4]
 8005828:	440b      	add	r3, r1
 800582a:	4293      	cmp	r3, r2
 800582c:	d8ed      	bhi.n	800580a <CircularQueue_Add+0x82>
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 800582e:	0a2b      	lsrs	r3, r5, #8
 8005830:	9301      	str	r3, [sp, #4]
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 8005832:	eb05 0308 	add.w	r3, r5, r8
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8005836:	f04f 0a00 	mov.w	sl, #0
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 800583a:	b29b      	uxth	r3, r3
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 800583c:	46d1      	mov	r9, sl
    for (i=0; i < nbElements; i++) 
 800583e:	f8cd a000 	str.w	sl, [sp]
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 8005842:	9303      	str	r3, [sp, #12]
    for (i=0; i < nbElements; i++) 
 8005844:	9b00      	ldr	r3, [sp, #0]
 8005846:	9902      	ldr	r1, [sp, #8]
 8005848:	6920      	ldr	r0, [r4, #16]
 800584a:	6862      	ldr	r2, [r4, #4]
 800584c:	428b      	cmp	r3, r1
 800584e:	d106      	bne.n	800585e <CircularQueue_Add+0xd6>
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 8005850:	4440      	add	r0, r8
 8005852:	4290      	cmp	r0, r2
 8005854:	6823      	ldr	r3, [r4, #0]
 8005856:	bf28      	it	cs
 8005858:	1a80      	subcs	r0, r0, r2
 800585a:	4418      	add	r0, r3
  return ptr;
 800585c:	e7d6      	b.n	800580c <CircularQueue_Add+0x84>
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 800585e:	4438      	add	r0, r7
 8005860:	4290      	cmp	r0, r2
      if (q->elementSize == 0) 
 8005862:	8923      	ldrh	r3, [r4, #8]
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 8005864:	bf28      	it	cs
 8005866:	1a80      	subcs	r0, r0, r2
 8005868:	6120      	str	r0, [r4, #16]
      if (q->elementSize == 0) 
 800586a:	b98b      	cbnz	r3, 8005890 <CircularQueue_Add+0x108>
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 800586c:	6822      	ldr	r2, [r4, #0]
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 800586e:	9901      	ldr	r1, [sp, #4]
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 8005870:	5415      	strb	r5, [r2, r0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 8005872:	6862      	ldr	r2, [r4, #4]
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 8005874:	1c43      	adds	r3, r0, #1
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 8005876:	429a      	cmp	r2, r3
 8005878:	bf98      	it	ls
 800587a:	1a9b      	subls	r3, r3, r2
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 800587c:	6822      	ldr	r2, [r4, #0]
 800587e:	54d1      	strb	r1, [r2, r3]
 8005880:	1c58      	adds	r0, r3, #1
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 8005882:	6863      	ldr	r3, [r4, #4]
 8005884:	4283      	cmp	r3, r0
 8005886:	bf98      	it	ls
 8005888:	1ac0      	subls	r0, r0, r3
        q->byteCount += 2;
 800588a:	6963      	ldr	r3, [r4, #20]
 800588c:	3302      	adds	r3, #2
 800588e:	6163      	str	r3, [r4, #20]
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 8005890:	6863      	ldr	r3, [r4, #4]
 8005892:	1a1b      	subs	r3, r3, r0
 8005894:	429d      	cmp	r5, r3
 8005896:	462e      	mov	r6, r5
 8005898:	bf28      	it	cs
 800589a:	461e      	movcs	r6, r3
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 800589c:	429d      	cmp	r5, r3
 800589e:	d903      	bls.n	80058a8 <CircularQueue_Add+0x120>
 80058a0:	42b5      	cmp	r5, r6
 80058a2:	7f23      	ldrb	r3, [r4, #28]
 80058a4:	d924      	bls.n	80058f0 <CircularQueue_Add+0x168>
 80058a6:	bb0b      	cbnz	r3, 80058ec <CircularQueue_Add+0x164>
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 80058a8:	6823      	ldr	r3, [r4, #0]
 80058aa:	4632      	mov	r2, r6
 80058ac:	4418      	add	r0, r3
 80058ae:	eb0b 010a 	add.w	r1, fp, sl
 80058b2:	f000 fa45 	bl	8005d40 <memcpy>
        q->byteCount += NbBytesToCopy;
 80058b6:	6963      	ldr	r3, [r4, #20]
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 80058b8:	9f03      	ldr	r7, [sp, #12]
        q->byteCount += NbBytesToCopy;
 80058ba:	4433      	add	r3, r6
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 80058bc:	46b1      	mov	r9, r6
        q->byteCount += NbBytesToCopy;
 80058be:	6163      	str	r3, [r4, #20]
        NbBytesToCopy = elementSize - NbBytesToCopy;
 80058c0:	1bae      	subs	r6, r5, r6
        curBuffPosition = 0; 
 80058c2:	2000      	movs	r0, #0
      if (NbBytesToCopy)      
 80058c4:	b156      	cbz	r6, 80058dc <CircularQueue_Add+0x154>
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 80058c6:	6823      	ldr	r3, [r4, #0]
 80058c8:	eb09 010a 	add.w	r1, r9, sl
 80058cc:	4632      	mov	r2, r6
 80058ce:	4418      	add	r0, r3
 80058d0:	4459      	add	r1, fp
 80058d2:	f000 fa35 	bl	8005d40 <memcpy>
        q->byteCount += NbBytesToCopy;
 80058d6:	6963      	ldr	r3, [r4, #20]
 80058d8:	441e      	add	r6, r3
 80058da:	6166      	str	r6, [r4, #20]
      q->elementCount++;
 80058dc:	69a3      	ldr	r3, [r4, #24]
 80058de:	3301      	adds	r3, #1
 80058e0:	61a3      	str	r3, [r4, #24]
    for (i=0; i < nbElements; i++) 
 80058e2:	9b00      	ldr	r3, [sp, #0]
 80058e4:	3301      	adds	r3, #1
 80058e6:	9300      	str	r3, [sp, #0]
 80058e8:	44aa      	add	sl, r5
 80058ea:	e7ab      	b.n	8005844 <CircularQueue_Add+0xbc>
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 80058ec:	2e00      	cmp	r6, #0
 80058ee:	d0f5      	beq.n	80058dc <CircularQueue_Add+0x154>
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 80058f0:	07da      	lsls	r2, r3, #31
 80058f2:	d521      	bpl.n	8005938 <CircularQueue_Add+0x1b0>
          if (q->elementSize == 0)
 80058f4:	8923      	ldrh	r3, [r4, #8]
 80058f6:	b943      	cbnz	r3, 800590a <CircularQueue_Add+0x182>
             q->qBuff[curBuffPosition-2] = 0xFF;
 80058f8:	6823      	ldr	r3, [r4, #0]
 80058fa:	4403      	add	r3, r0
 80058fc:	22ff      	movs	r2, #255	; 0xff
 80058fe:	f803 2c02 	strb.w	r2, [r3, #-2]
             q->qBuff[curBuffPosition-1] = 0xFF;
 8005902:	6823      	ldr	r3, [r4, #0]
 8005904:	4418      	add	r0, r3
 8005906:	f800 2c01 	strb.w	r2, [r0, #-1]
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 800590a:	6963      	ldr	r3, [r4, #20]
          if (q->elementSize == 0)
 800590c:	8922      	ldrh	r2, [r4, #8]
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 800590e:	441e      	add	r6, r3
 8005910:	6166      	str	r6, [r4, #20]
          if (q->elementSize == 0)
 8005912:	2a00      	cmp	r2, #0
 8005914:	d138      	bne.n	8005988 <CircularQueue_Add+0x200>
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 8005916:	6823      	ldr	r3, [r4, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8005918:	9901      	ldr	r1, [sp, #4]
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800591a:	701d      	strb	r5, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800591c:	6823      	ldr	r3, [r4, #0]
 800591e:	7059      	strb	r1, [r3, #1]
            q->byteCount += 2;   
 8005920:	6963      	ldr	r3, [r4, #20]
 8005922:	3302      	adds	r3, #2
 8005924:	6163      	str	r3, [r4, #20]
 8005926:	462e      	mov	r6, r5
          NbCopiedBytes = 0;
 8005928:	4691      	mov	r9, r2
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800592a:	2002      	movs	r0, #2
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 800592c:	eb08 0706 	add.w	r7, r8, r6
        q->last = 0;        
 8005930:	2300      	movs	r3, #0
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 8005932:	b2bf      	uxth	r7, r7
        q->last = 0;        
 8005934:	6123      	str	r3, [r4, #16]
 8005936:	e7c5      	b.n	80058c4 <CircularQueue_Add+0x13c>
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 8005938:	079b      	lsls	r3, r3, #30
 800593a:	d5f7      	bpl.n	800592c <CircularQueue_Add+0x1a4>
          if (q->elementSize == 0)
 800593c:	8923      	ldrh	r3, [r4, #8]
 800593e:	2b00      	cmp	r3, #0
 8005940:	f47f af63 	bne.w	800580a <CircularQueue_Add+0x82>
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 8005944:	6823      	ldr	r3, [r4, #0]
 8005946:	4403      	add	r3, r0
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8005948:	0a32      	lsrs	r2, r6, #8
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 800594a:	f803 6c02 	strb.w	r6, [r3, #-2]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800594e:	6823      	ldr	r3, [r4, #0]
 8005950:	4403      	add	r3, r0
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 8005952:	eb0b 010a 	add.w	r1, fp, sl
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8005956:	f803 2c01 	strb.w	r2, [r3, #-1]
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800595a:	6823      	ldr	r3, [r4, #0]
 800595c:	4632      	mov	r2, r6
 800595e:	4418      	add	r0, r3
 8005960:	f000 f9ee 	bl	8005d40 <memcpy>
             q->elementCount++;
 8005964:	69a2      	ldr	r2, [r4, #24]
             q->byteCount += NbBytesToCopy; 
 8005966:	6963      	ldr	r3, [r4, #20]
             q->elementCount++;
 8005968:	3201      	adds	r2, #1
             q->byteCount += NbBytesToCopy; 
 800596a:	4433      	add	r3, r6
             q->elementCount++;
 800596c:	61a2      	str	r2, [r4, #24]
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800596e:	6822      	ldr	r2, [r4, #0]
             q->byteCount += NbBytesToCopy; 
 8005970:	6163      	str	r3, [r4, #20]
             NbBytesToCopy = elementSize - NbBytesToCopy;
 8005972:	1bab      	subs	r3, r5, r6
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 8005974:	7013      	strb	r3, [r2, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8005976:	6822      	ldr	r2, [r4, #0]
 8005978:	0a19      	lsrs	r1, r3, #8
 800597a:	7051      	strb	r1, [r2, #1]
             q->byteCount += 2;              
 800597c:	6962      	ldr	r2, [r4, #20]
 800597e:	3202      	adds	r2, #2
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 8005980:	46b1      	mov	r9, r6
             q->byteCount += 2;              
 8005982:	6162      	str	r2, [r4, #20]
             NbBytesToCopy = elementSize - NbBytesToCopy;
 8005984:	461e      	mov	r6, r3
 8005986:	e7d0      	b.n	800592a <CircularQueue_Add+0x1a2>
          NbCopiedBytes = 0;
 8005988:	f04f 0900 	mov.w	r9, #0
 800598c:	462e      	mov	r6, r5
          curBuffPosition = 0; 
 800598e:	4648      	mov	r0, r9
 8005990:	e7cc      	b.n	800592c <CircularQueue_Add+0x1a4>

08005992 <CircularQueue_Remove>:
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
  uint8_t  elemSizeStorageRoom = 0;
  uint8_t* ptr= NULL;
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 8005992:	8902      	ldrh	r2, [r0, #8]
{
 8005994:	4603      	mov	r3, r0
  *elementSize = 0;
  if (q->byteCount > 0) 
 8005996:	6940      	ldr	r0, [r0, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 8005998:	2a00      	cmp	r2, #0
  *elementSize = 0;
 800599a:	f04f 0200 	mov.w	r2, #0
{
 800599e:	b5f0      	push	{r4, r5, r6, r7, lr}
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 80059a0:	bf14      	ite	ne
 80059a2:	2600      	movne	r6, #0
 80059a4:	2602      	moveq	r6, #2
  *elementSize = 0;
 80059a6:	800a      	strh	r2, [r1, #0]
  if (q->byteCount > 0) 
 80059a8:	2800      	cmp	r0, #0
 80059aa:	d052      	beq.n	8005a52 <CircularQueue_Remove+0xc0>
  {
    /* retreive element Size */
    *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 80059ac:	891d      	ldrh	r5, [r3, #8]
 80059ae:	681f      	ldr	r7, [r3, #0]
 80059b0:	68dc      	ldr	r4, [r3, #12]
 80059b2:	685a      	ldr	r2, [r3, #4]
 80059b4:	b95d      	cbnz	r5, 80059ce <CircularQueue_Remove+0x3c>
 80059b6:	f104 0c01 	add.w	ip, r4, #1
 80059ba:	4594      	cmp	ip, r2
 80059bc:	bf28      	it	cs
 80059be:	ebac 0c02 	subcs.w	ip, ip, r2
 80059c2:	5d3d      	ldrb	r5, [r7, r4]
 80059c4:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80059c8:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 80059cc:	b2ad      	uxth	r5, r5
 80059ce:	800d      	strh	r5, [r1, #0]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 80059d0:	f893 c01c 	ldrb.w	ip, [r3, #28]
 80059d4:	f00c 0c03 	and.w	ip, ip, #3
 80059d8:	f1bc 0f01 	cmp.w	ip, #1
 80059dc:	d120      	bne.n	8005a20 <CircularQueue_Remove+0x8e>
     {
       if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 80059de:	f64f 7cff 	movw	ip, #65535	; 0xffff
 80059e2:	4565      	cmp	r5, ip
 80059e4:	d101      	bne.n	80059ea <CircularQueue_Remove+0x58>
 80059e6:	891d      	ldrh	r5, [r3, #8]
 80059e8:	b145      	cbz	r5, 80059fc <CircularQueue_Remove+0x6a>
 80059ea:	691d      	ldr	r5, [r3, #16]
 80059ec:	42a5      	cmp	r5, r4
 80059ee:	d217      	bcs.n	8005a20 <CircularQueue_Remove+0x8e>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 80059f0:	891d      	ldrh	r5, [r3, #8]
 80059f2:	b1ad      	cbz	r5, 8005a20 <CircularQueue_Remove+0x8e>
 80059f4:	eba2 0c04 	sub.w	ip, r2, r4
 80059f8:	45ac      	cmp	ip, r5
 80059fa:	d211      	bcs.n	8005a20 <CircularQueue_Remove+0x8e>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 80059fc:	4404      	add	r4, r0
 80059fe:	1aa4      	subs	r4, r4, r2
 8005a00:	615c      	str	r4, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
          /* retrieve the rigth size after the wrap [if varaible size element] */
          *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8005a02:	891c      	ldrh	r4, [r3, #8]
          q->first = 0;
 8005a04:	2000      	movs	r0, #0
 8005a06:	60d8      	str	r0, [r3, #12]
          *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8005a08:	b94c      	cbnz	r4, 8005a1e <CircularQueue_Remove+0x8c>
 8005a0a:	2a01      	cmp	r2, #1
 8005a0c:	bf94      	ite	ls
 8005a0e:	f1c2 0001 	rsbls	r0, r2, #1
 8005a12:	2001      	movhi	r0, #1
 8005a14:	783c      	ldrb	r4, [r7, #0]
 8005a16:	5c38      	ldrb	r0, [r7, r0]
 8005a18:	eb04 2400 	add.w	r4, r4, r0, lsl #8
 8005a1c:	b2a4      	uxth	r4, r4
 8005a1e:	800c      	strh	r4, [r1, #0]
       }
     }

    /* retreive element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 8005a20:	f8d3 c00c 	ldr.w	ip, [r3, #12]

    /* adjust byte count */
    q->byteCount -= (*elementSize + elemSizeStorageRoom) ;
 8005a24:	880c      	ldrh	r4, [r1, #0]
 8005a26:	695d      	ldr	r5, [r3, #20]
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 8005a28:	eb0c 0006 	add.w	r0, ip, r6
 8005a2c:	4290      	cmp	r0, r2
    q->byteCount -= (*elementSize + elemSizeStorageRoom) ;
 8005a2e:	eb04 0106 	add.w	r1, r4, r6
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 8005a32:	bf28      	it	cs
 8005a34:	1a80      	subcs	r0, r0, r2
    q->byteCount -= (*elementSize + elemSizeStorageRoom) ;
 8005a36:	1a6d      	subs	r5, r5, r1
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 8005a38:	4438      	add	r0, r7
    q->byteCount -= (*elementSize + elemSizeStorageRoom) ;
 8005a3a:	615d      	str	r5, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 8005a3c:	b135      	cbz	r5, 8005a4c <CircularQueue_Remove+0xba>
    {
      q->first = MOD((q->first+ *elementSize + elemSizeStorageRoom ), q->queueMaxSize);
 8005a3e:	eb04 010c 	add.w	r1, r4, ip
 8005a42:	4431      	add	r1, r6
 8005a44:	4291      	cmp	r1, r2
 8005a46:	bf28      	it	cs
 8005a48:	1a89      	subcs	r1, r1, r2
 8005a4a:	60d9      	str	r1, [r3, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 8005a4c:	699a      	ldr	r2, [r3, #24]
 8005a4e:	3a01      	subs	r2, #1
 8005a50:	619a      	str	r2, [r3, #24]
  }
  return ptr;
}
 8005a52:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005a54 <CircularQueue_Sense>:
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
  uint8_t  elemSizeStorageRoom = 0;
  uint8_t* x= NULL;
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 8005a54:	8903      	ldrh	r3, [r0, #8]
 8005a56:	2b00      	cmp	r3, #0
  *elementSize = 0;
 8005a58:	f04f 0300 	mov.w	r3, #0
 8005a5c:	800b      	strh	r3, [r1, #0]
  uint32_t FirstElemetPos = 0;
    
  if (q->byteCount > 0) 
 8005a5e:	6943      	ldr	r3, [r0, #20]
{
 8005a60:	b5f0      	push	{r4, r5, r6, r7, lr}
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 8005a62:	bf14      	ite	ne
 8005a64:	2500      	movne	r5, #0
 8005a66:	2502      	moveq	r5, #2
  if (q->byteCount > 0) 
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d035      	beq.n	8005ad8 <CircularQueue_Sense+0x84>
  {
    FirstElemetPos = q->first;
    *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8005a6c:	8902      	ldrh	r2, [r0, #8]
    FirstElemetPos = q->first;
 8005a6e:	68c6      	ldr	r6, [r0, #12]
 8005a70:	e9d0 3400 	ldrd	r3, r4, [r0]
    *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8005a74:	b942      	cbnz	r2, 8005a88 <CircularQueue_Sense+0x34>
 8005a76:	1c77      	adds	r7, r6, #1
 8005a78:	42a7      	cmp	r7, r4
 8005a7a:	bf28      	it	cs
 8005a7c:	1b3f      	subcs	r7, r7, r4
 8005a7e:	5d9a      	ldrb	r2, [r3, r6]
 8005a80:	5ddf      	ldrb	r7, [r3, r7]
 8005a82:	eb02 2207 	add.w	r2, r2, r7, lsl #8
 8005a86:	b292      	uxth	r2, r2
 8005a88:	800a      	strh	r2, [r1, #0]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 8005a8a:	7f07      	ldrb	r7, [r0, #28]
 8005a8c:	f007 0703 	and.w	r7, r7, #3
 8005a90:	2f01      	cmp	r7, #1
 8005a92:	d11b      	bne.n	8005acc <CircularQueue_Sense+0x78>
    { 
      if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 8005a94:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8005a98:	42ba      	cmp	r2, r7
 8005a9a:	d101      	bne.n	8005aa0 <CircularQueue_Sense+0x4c>
 8005a9c:	8902      	ldrh	r2, [r0, #8]
 8005a9e:	b13a      	cbz	r2, 8005ab0 <CircularQueue_Sense+0x5c>
 8005aa0:	6902      	ldr	r2, [r0, #16]
 8005aa2:	42b2      	cmp	r2, r6
 8005aa4:	d212      	bcs.n	8005acc <CircularQueue_Sense+0x78>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8005aa6:	8902      	ldrh	r2, [r0, #8]
 8005aa8:	b182      	cbz	r2, 8005acc <CircularQueue_Sense+0x78>
 8005aaa:	1ba7      	subs	r7, r4, r6
 8005aac:	4297      	cmp	r7, r2
 8005aae:	d20d      	bcs.n	8005acc <CircularQueue_Sense+0x78>
      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */

        /* retrieve the rigth size after the wrap [if varaible size element] */
        *elementSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 8005ab0:	8902      	ldrh	r2, [r0, #8]
 8005ab2:	b94a      	cbnz	r2, 8005ac8 <CircularQueue_Sense+0x74>
 8005ab4:	2c01      	cmp	r4, #1
 8005ab6:	bf94      	ite	ls
 8005ab8:	f1c4 0001 	rsbls	r0, r4, #1
 8005abc:	2001      	movhi	r0, #1
 8005abe:	781a      	ldrb	r2, [r3, #0]
 8005ac0:	5c18      	ldrb	r0, [r3, r0]
 8005ac2:	eb02 2200 	add.w	r2, r2, r0, lsl #8
 8005ac6:	b292      	uxth	r2, r2
 8005ac8:	800a      	strh	r2, [r1, #0]
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 8005aca:	2600      	movs	r6, #0
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 8005acc:	19a8      	adds	r0, r5, r6
 8005ace:	42a0      	cmp	r0, r4
 8005ad0:	bf28      	it	cs
 8005ad2:	1b00      	subcs	r0, r0, r4
 8005ad4:	4418      	add	r0, r3
  }
  return x;
}
 8005ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint8_t* x= NULL;
 8005ad8:	4618      	mov	r0, r3
  return x;
 8005ada:	e7fc      	b.n	8005ad6 <CircularQueue_Sense+0x82>

08005adc <UTIL_LPM_Init>:
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8005adc:	4b02      	ldr	r3, [pc, #8]	; (8005ae8 <UTIL_LPM_Init+0xc>)
 8005ade:	2200      	movs	r2, #0
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8005ae0:	e9c3 2200 	strd	r2, r2, [r3]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8005ae4:	4770      	bx	lr
 8005ae6:	bf00      	nop
 8005ae8:	20002108 	.word	0x20002108

08005aec <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8005aec:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005aee:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8005af2:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 8005af4:	b141      	cbz	r1, 8005b08 <UTIL_LPM_SetOffMode+0x1c>
 8005af6:	2901      	cmp	r1, #1
 8005af8:	d103      	bne.n	8005b02 <UTIL_LPM_SetOffMode+0x16>
  {
    case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8005afa:	4b06      	ldr	r3, [pc, #24]	; (8005b14 <UTIL_LPM_SetOffMode+0x28>)
 8005afc:	685a      	ldr	r2, [r3, #4]
 8005afe:	4302      	orrs	r2, r0
 8005b00:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b02:	f384 8810 	msr	PRIMASK, r4
    default:
      break;
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8005b06:	bd10      	pop	{r4, pc}
      OffModeDisable &= ( ~lpm_id_bm );
 8005b08:	4902      	ldr	r1, [pc, #8]	; (8005b14 <UTIL_LPM_SetOffMode+0x28>)
 8005b0a:	684b      	ldr	r3, [r1, #4]
 8005b0c:	ea23 0300 	bic.w	r3, r3, r0
 8005b10:	604b      	str	r3, [r1, #4]
      break;
 8005b12:	e7f6      	b.n	8005b02 <UTIL_LPM_SetOffMode+0x16>
 8005b14:	20002108 	.word	0x20002108

08005b18 <bit_position>:
static uint32_t bit_position(uint32_t value)
{

  uint32_t n = 0;

  if ((value & 0xFFFF0000) == 0)  { n  = 16; value <<= 16;  }
 8005b18:	0c03      	lsrs	r3, r0, #16
 8005b1a:	041b      	lsls	r3, r3, #16
 8005b1c:	b9a3      	cbnz	r3, 8005b48 <bit_position+0x30>
 8005b1e:	0400      	lsls	r0, r0, #16
 8005b20:	2310      	movs	r3, #16
  if ((value & 0xFF000000) == 0)  { n +=  8; value <<=  8;  }
 8005b22:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005b26:	bf04      	itt	eq
 8005b28:	0200      	lsleq	r0, r0, #8
 8005b2a:	3308      	addeq	r3, #8
  if ((value & 0xF0000000) == 0)  { n +=  4; value <<=  4;  }
 8005b2c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005b30:	bf08      	it	eq
 8005b32:	0100      	lsleq	r0, r0, #4

  n += (uint32_t)clz_table_4bit[value >> (32-4)];
 8005b34:	4a05      	ldr	r2, [pc, #20]	; (8005b4c <bit_position+0x34>)
 8005b36:	ea4f 7010 	mov.w	r0, r0, lsr #28
  if ((value & 0xF0000000) == 0)  { n +=  4; value <<=  4;  }
 8005b3a:	bf08      	it	eq
 8005b3c:	3304      	addeq	r3, #4
  n += (uint32_t)clz_table_4bit[value >> (32-4)];
 8005b3e:	5c10      	ldrb	r0, [r2, r0]

  return (31-n);
 8005b40:	f1c3 031f 	rsb	r3, r3, #31
}
 8005b44:	1a18      	subs	r0, r3, r0
 8005b46:	4770      	bx	lr
  uint32_t n = 0;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	e7ea      	b.n	8005b22 <bit_position+0xa>
 8005b4c:	080071e2 	.word	0x080071e2

08005b50 <UTIL_SEQ_RegTask>:
{
 8005b50:	b510      	push	{r4, lr}
 8005b52:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b54:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8005b58:	b672      	cpsid	i
  TaskCb[bit_position(task_id_bm)] = task;
 8005b5a:	f7ff ffdd 	bl	8005b18 <bit_position>
 8005b5e:	4b03      	ldr	r3, [pc, #12]	; (8005b6c <UTIL_SEQ_RegTask+0x1c>)
 8005b60:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005b64:	6104      	str	r4, [r0, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b66:	f381 8810 	msr	PRIMASK, r1
}
 8005b6a:	bd10      	pop	{r4, pc}
 8005b6c:	20002110 	.word	0x20002110

08005b70 <UTIL_SEQ_SetTask>:
{
 8005b70:	b530      	push	{r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b72:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8005b76:	b672      	cpsid	i
  TaskSet |= task_id_bm;
 8005b78:	4b06      	ldr	r3, [pc, #24]	; (8005b94 <UTIL_SEQ_SetTask+0x24>)
 8005b7a:	681c      	ldr	r4, [r3, #0]
 8005b7c:	4304      	orrs	r4, r0
 8005b7e:	601c      	str	r4, [r3, #0]
  TaskPrio[task_prio].priority |= task_id_bm;
 8005b80:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8005b84:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005b88:	4302      	orrs	r2, r0
 8005b8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b8e:	f385 8810 	msr	PRIMASK, r5
}
 8005b92:	bd30      	pop	{r4, r5, pc}
 8005b94:	20002110 	.word	0x20002110

08005b98 <UTIL_SEQ_PauseTask>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b98:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8005b9c:	b672      	cpsid	i
  TaskMask &= (~task_id_bm);
 8005b9e:	4a04      	ldr	r2, [pc, #16]	; (8005bb0 <UTIL_SEQ_PauseTask+0x18>)
 8005ba0:	6813      	ldr	r3, [r2, #0]
 8005ba2:	ea23 0300 	bic.w	r3, r3, r0
 8005ba6:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ba8:	f381 8810 	msr	PRIMASK, r1
}
 8005bac:	4770      	bx	lr
 8005bae:	bf00      	nop
 8005bb0:	2000002c 	.word	0x2000002c

08005bb4 <UTIL_SEQ_ResumeTask>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bb4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8005bb8:	b672      	cpsid	i
  TaskMask |= task_id_bm;
 8005bba:	4a03      	ldr	r2, [pc, #12]	; (8005bc8 <UTIL_SEQ_ResumeTask+0x14>)
 8005bbc:	6813      	ldr	r3, [r2, #0]
 8005bbe:	4303      	orrs	r3, r0
 8005bc0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bc2:	f381 8810 	msr	PRIMASK, r1
}
 8005bc6:	4770      	bx	lr
 8005bc8:	2000002c 	.word	0x2000002c

08005bcc <UTIL_SEQ_SetEvt>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bcc:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8005bd0:	b672      	cpsid	i
  EvtSet |= evt_id_bm;
 8005bd2:	4a03      	ldr	r2, [pc, #12]	; (8005be0 <UTIL_SEQ_SetEvt+0x14>)
 8005bd4:	6853      	ldr	r3, [r2, #4]
 8005bd6:	4303      	orrs	r3, r0
 8005bd8:	6053      	str	r3, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bda:	f381 8810 	msr	PRIMASK, r1
}
 8005bde:	4770      	bx	lr
 8005be0:	20002110 	.word	0x20002110

08005be4 <UTIL_SEQ_PreIdle>:
 8005be4:	4770      	bx	lr

08005be6 <UTIL_SEQ_PostIdle>:
 8005be6:	4770      	bx	lr

08005be8 <UTIL_SEQ_Run>:
{
 8005be8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  super_mask_backup = SuperMask;
 8005bec:	4d32      	ldr	r5, [pc, #200]	; (8005cb8 <UTIL_SEQ_Run+0xd0>)
  while( (TaskSet & TaskMask & SuperMask) && (!(EvtSet & EvtWaited)) )
 8005bee:	4f33      	ldr	r7, [pc, #204]	; (8005cbc <UTIL_SEQ_Run+0xd4>)
  super_mask_backup = SuperMask;
 8005bf0:	686e      	ldr	r6, [r5, #4]
  SuperMask &= mask_bm;
 8005bf2:	4030      	ands	r0, r6
 8005bf4:	6068      	str	r0, [r5, #4]
 8005bf6:	463c      	mov	r4, r7
  while( (TaskSet & TaskMask & SuperMask) && (!(EvtSet & EvtWaited)) )
 8005bf8:	e9d5 2000 	ldrd	r2, r0, [r5]
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	4013      	ands	r3, r2
 8005c00:	4203      	tst	r3, r0
 8005c02:	d040      	beq.n	8005c86 <UTIL_SEQ_Run+0x9e>
 8005c04:	e9d7 3101 	ldrd	r3, r1, [r7, #4]
 8005c08:	400b      	ands	r3, r1
 8005c0a:	d13c      	bne.n	8005c86 <UTIL_SEQ_Run+0x9e>
 8005c0c:	4002      	ands	r2, r0
    while(!(TaskPrio[counter].priority & TaskMask & SuperMask))
 8005c0e:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8005c12:	4010      	ands	r0, r2
 8005c14:	d103      	bne.n	8005c1e <UTIL_SEQ_Run+0x36>
 8005c16:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
      counter++;
 8005c1a:	2301      	movs	r3, #1
    while(!(TaskPrio[counter].priority & TaskMask & SuperMask))
 8005c1c:	4010      	ands	r0, r2
    if (!(TaskPrio[counter].round_robin & current_task_set))
 8005c1e:	00db      	lsls	r3, r3, #3
 8005c20:	18e2      	adds	r2, r4, r3
 8005c22:	f8d2 1094 	ldr.w	r1, [r2, #148]	; 0x94
 8005c26:	4208      	tst	r0, r1
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8005c28:	bf04      	itt	eq
 8005c2a:	f04f 31ff 	moveq.w	r1, #4294967295
 8005c2e:	f8c2 1094 	streq.w	r1, [r2, #148]	; 0x94
    CurrentTaskIdx = bit_position(current_task_set & TaskPrio[counter].round_robin);
 8005c32:	18e1      	adds	r1, r4, r3
 8005c34:	f8d1 8094 	ldr.w	r8, [r1, #148]	; 0x94
 8005c38:	ea08 0000 	and.w	r0, r8, r0
 8005c3c:	f7ff ff6c 	bl	8005b18 <bit_position>
    TaskPrio[counter].round_robin &= ~(1 << (CurrentTaskIdx));
 8005c40:	2301      	movs	r3, #1
    CurrentTaskIdx = bit_position(current_task_set & TaskPrio[counter].round_robin);
 8005c42:	60e0      	str	r0, [r4, #12]
    TaskPrio[counter].round_robin &= ~(1 << (CurrentTaskIdx));
 8005c44:	fa03 f000 	lsl.w	r0, r3, r0
 8005c48:	ea28 0000 	bic.w	r0, r8, r0
 8005c4c:	f8c1 0094 	str.w	r0, [r1, #148]	; 0x94
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c50:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8005c54:	b672      	cpsid	i
    TaskSet &= ~(1 << (CurrentTaskIdx));
 8005c56:	68e2      	ldr	r2, [r4, #12]
 8005c58:	4093      	lsls	r3, r2
 8005c5a:	6822      	ldr	r2, [r4, #0]
 8005c5c:	43db      	mvns	r3, r3
 8005c5e:	401a      	ands	r2, r3
 8005c60:	6022      	str	r2, [r4, #0]
      TaskPrio[counter - 1].priority &= ~(1 << (CurrentTaskIdx));
 8005c62:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 8005c66:	401a      	ands	r2, r3
 8005c68:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
 8005c6c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8005c70:	4013      	ands	r3, r2
 8005c72:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c76:	f381 8810 	msr	PRIMASK, r1
    TaskCb[CurrentTaskIdx]( );
 8005c7a:	68e3      	ldr	r3, [r4, #12]
 8005c7c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005c80:	691b      	ldr	r3, [r3, #16]
 8005c82:	4798      	blx	r3
 8005c84:	e7b8      	b.n	8005bf8 <UTIL_SEQ_Run+0x10>
  UTIL_SEQ_PreIdle( );
 8005c86:	f7ff ffad 	bl	8005be4 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c8a:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8005c8e:	b672      	cpsid	i
  if (!((TaskSet & TaskMask & SuperMask) || (EvtSet & EvtWaited)))
 8005c90:	682a      	ldr	r2, [r5, #0]
 8005c92:	6823      	ldr	r3, [r4, #0]
 8005c94:	4013      	ands	r3, r2
 8005c96:	686a      	ldr	r2, [r5, #4]
 8005c98:	4213      	tst	r3, r2
 8005c9a:	d105      	bne.n	8005ca8 <UTIL_SEQ_Run+0xc0>
 8005c9c:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8005ca0:	421a      	tst	r2, r3
 8005ca2:	d101      	bne.n	8005ca8 <UTIL_SEQ_Run+0xc0>
    UTIL_SEQ_Idle( );
 8005ca4:	f7fa fcb2 	bl	800060c <UTIL_SEQ_Idle>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ca8:	f387 8810 	msr	PRIMASK, r7
  UTIL_SEQ_PostIdle( );
 8005cac:	f7ff ff9b 	bl	8005be6 <UTIL_SEQ_PostIdle>
  SuperMask = super_mask_backup;
 8005cb0:	606e      	str	r6, [r5, #4]
}
 8005cb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cb6:	bf00      	nop
 8005cb8:	2000002c 	.word	0x2000002c
 8005cbc:	20002110 	.word	0x20002110

08005cc0 <UTIL_SEQ_WaitEvt>:
{
 8005cc0:	b570      	push	{r4, r5, r6, lr}
  current_task_id_bm = (1 << CurrentTaskIdx);
 8005cc2:	4c09      	ldr	r4, [pc, #36]	; (8005ce8 <UTIL_SEQ_WaitEvt+0x28>)
 8005cc4:	68e3      	ldr	r3, [r4, #12]
  event_waited_id_backup = EvtWaited;
 8005cc6:	68a6      	ldr	r6, [r4, #8]
  EvtWaited = evt_id_bm;
 8005cc8:	60a0      	str	r0, [r4, #8]
  current_task_id_bm = (1 << CurrentTaskIdx);
 8005cca:	2501      	movs	r5, #1
 8005ccc:	409d      	lsls	r5, r3
  while((EvtSet & EvtWaited) == 0)
 8005cce:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8005cd2:	420b      	tst	r3, r1
 8005cd4:	d004      	beq.n	8005ce0 <UTIL_SEQ_WaitEvt+0x20>
  EvtSet &= (~EvtWaited);
 8005cd6:	ea23 0301 	bic.w	r3, r3, r1
  EvtWaited = event_waited_id_backup;
 8005cda:	e9c4 3601 	strd	r3, r6, [r4, #4]
}
 8005cde:	bd70      	pop	{r4, r5, r6, pc}
    UTIL_SEQ_EvtIdle(current_task_id_bm, EvtWaited);
 8005ce0:	4628      	mov	r0, r5
 8005ce2:	f7fa fc94 	bl	800060e <UTIL_SEQ_EvtIdle>
 8005ce6:	e7f2      	b.n	8005cce <UTIL_SEQ_WaitEvt+0xe>
 8005ce8:	20002110 	.word	0x20002110

08005cec <__errno>:
 8005cec:	4b01      	ldr	r3, [pc, #4]	; (8005cf4 <__errno+0x8>)
 8005cee:	6818      	ldr	r0, [r3, #0]
 8005cf0:	4770      	bx	lr
 8005cf2:	bf00      	nop
 8005cf4:	20000034 	.word	0x20000034

08005cf8 <__libc_init_array>:
 8005cf8:	b570      	push	{r4, r5, r6, lr}
 8005cfa:	4e0d      	ldr	r6, [pc, #52]	; (8005d30 <__libc_init_array+0x38>)
 8005cfc:	4c0d      	ldr	r4, [pc, #52]	; (8005d34 <__libc_init_array+0x3c>)
 8005cfe:	1ba4      	subs	r4, r4, r6
 8005d00:	10a4      	asrs	r4, r4, #2
 8005d02:	2500      	movs	r5, #0
 8005d04:	42a5      	cmp	r5, r4
 8005d06:	d109      	bne.n	8005d1c <__libc_init_array+0x24>
 8005d08:	4e0b      	ldr	r6, [pc, #44]	; (8005d38 <__libc_init_array+0x40>)
 8005d0a:	4c0c      	ldr	r4, [pc, #48]	; (8005d3c <__libc_init_array+0x44>)
 8005d0c:	f001 f978 	bl	8007000 <_init>
 8005d10:	1ba4      	subs	r4, r4, r6
 8005d12:	10a4      	asrs	r4, r4, #2
 8005d14:	2500      	movs	r5, #0
 8005d16:	42a5      	cmp	r5, r4
 8005d18:	d105      	bne.n	8005d26 <__libc_init_array+0x2e>
 8005d1a:	bd70      	pop	{r4, r5, r6, pc}
 8005d1c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005d20:	4798      	blx	r3
 8005d22:	3501      	adds	r5, #1
 8005d24:	e7ee      	b.n	8005d04 <__libc_init_array+0xc>
 8005d26:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005d2a:	4798      	blx	r3
 8005d2c:	3501      	adds	r5, #1
 8005d2e:	e7f2      	b.n	8005d16 <__libc_init_array+0x1e>
 8005d30:	08008990 	.word	0x08008990
 8005d34:	08008990 	.word	0x08008990
 8005d38:	08008990 	.word	0x08008990
 8005d3c:	08008994 	.word	0x08008994

08005d40 <memcpy>:
 8005d40:	b510      	push	{r4, lr}
 8005d42:	1e43      	subs	r3, r0, #1
 8005d44:	440a      	add	r2, r1
 8005d46:	4291      	cmp	r1, r2
 8005d48:	d100      	bne.n	8005d4c <memcpy+0xc>
 8005d4a:	bd10      	pop	{r4, pc}
 8005d4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d50:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d54:	e7f7      	b.n	8005d46 <memcpy+0x6>

08005d56 <memset>:
 8005d56:	4402      	add	r2, r0
 8005d58:	4603      	mov	r3, r0
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d100      	bne.n	8005d60 <memset+0xa>
 8005d5e:	4770      	bx	lr
 8005d60:	f803 1b01 	strb.w	r1, [r3], #1
 8005d64:	e7f9      	b.n	8005d5a <memset+0x4>
	...

08005d68 <iprintf>:
 8005d68:	b40f      	push	{r0, r1, r2, r3}
 8005d6a:	4b0a      	ldr	r3, [pc, #40]	; (8005d94 <iprintf+0x2c>)
 8005d6c:	b513      	push	{r0, r1, r4, lr}
 8005d6e:	681c      	ldr	r4, [r3, #0]
 8005d70:	b124      	cbz	r4, 8005d7c <iprintf+0x14>
 8005d72:	69a3      	ldr	r3, [r4, #24]
 8005d74:	b913      	cbnz	r3, 8005d7c <iprintf+0x14>
 8005d76:	4620      	mov	r0, r4
 8005d78:	f000 fa56 	bl	8006228 <__sinit>
 8005d7c:	ab05      	add	r3, sp, #20
 8005d7e:	9a04      	ldr	r2, [sp, #16]
 8005d80:	68a1      	ldr	r1, [r4, #8]
 8005d82:	9301      	str	r3, [sp, #4]
 8005d84:	4620      	mov	r0, r4
 8005d86:	f000 fd61 	bl	800684c <_vfiprintf_r>
 8005d8a:	b002      	add	sp, #8
 8005d8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d90:	b004      	add	sp, #16
 8005d92:	4770      	bx	lr
 8005d94:	20000034 	.word	0x20000034

08005d98 <putchar>:
 8005d98:	b538      	push	{r3, r4, r5, lr}
 8005d9a:	4b08      	ldr	r3, [pc, #32]	; (8005dbc <putchar+0x24>)
 8005d9c:	681c      	ldr	r4, [r3, #0]
 8005d9e:	4605      	mov	r5, r0
 8005da0:	b124      	cbz	r4, 8005dac <putchar+0x14>
 8005da2:	69a3      	ldr	r3, [r4, #24]
 8005da4:	b913      	cbnz	r3, 8005dac <putchar+0x14>
 8005da6:	4620      	mov	r0, r4
 8005da8:	f000 fa3e 	bl	8006228 <__sinit>
 8005dac:	68a2      	ldr	r2, [r4, #8]
 8005dae:	4629      	mov	r1, r5
 8005db0:	4620      	mov	r0, r4
 8005db2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005db6:	f000 bfe7 	b.w	8006d88 <_putc_r>
 8005dba:	bf00      	nop
 8005dbc:	20000034 	.word	0x20000034

08005dc0 <_puts_r>:
 8005dc0:	b570      	push	{r4, r5, r6, lr}
 8005dc2:	460e      	mov	r6, r1
 8005dc4:	4605      	mov	r5, r0
 8005dc6:	b118      	cbz	r0, 8005dd0 <_puts_r+0x10>
 8005dc8:	6983      	ldr	r3, [r0, #24]
 8005dca:	b90b      	cbnz	r3, 8005dd0 <_puts_r+0x10>
 8005dcc:	f000 fa2c 	bl	8006228 <__sinit>
 8005dd0:	69ab      	ldr	r3, [r5, #24]
 8005dd2:	68ac      	ldr	r4, [r5, #8]
 8005dd4:	b913      	cbnz	r3, 8005ddc <_puts_r+0x1c>
 8005dd6:	4628      	mov	r0, r5
 8005dd8:	f000 fa26 	bl	8006228 <__sinit>
 8005ddc:	4b23      	ldr	r3, [pc, #140]	; (8005e6c <_puts_r+0xac>)
 8005dde:	429c      	cmp	r4, r3
 8005de0:	d117      	bne.n	8005e12 <_puts_r+0x52>
 8005de2:	686c      	ldr	r4, [r5, #4]
 8005de4:	89a3      	ldrh	r3, [r4, #12]
 8005de6:	071b      	lsls	r3, r3, #28
 8005de8:	d51d      	bpl.n	8005e26 <_puts_r+0x66>
 8005dea:	6923      	ldr	r3, [r4, #16]
 8005dec:	b1db      	cbz	r3, 8005e26 <_puts_r+0x66>
 8005dee:	3e01      	subs	r6, #1
 8005df0:	68a3      	ldr	r3, [r4, #8]
 8005df2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005df6:	3b01      	subs	r3, #1
 8005df8:	60a3      	str	r3, [r4, #8]
 8005dfa:	b9e9      	cbnz	r1, 8005e38 <_puts_r+0x78>
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	da2e      	bge.n	8005e5e <_puts_r+0x9e>
 8005e00:	4622      	mov	r2, r4
 8005e02:	210a      	movs	r1, #10
 8005e04:	4628      	mov	r0, r5
 8005e06:	f000 f85f 	bl	8005ec8 <__swbuf_r>
 8005e0a:	3001      	adds	r0, #1
 8005e0c:	d011      	beq.n	8005e32 <_puts_r+0x72>
 8005e0e:	200a      	movs	r0, #10
 8005e10:	e011      	b.n	8005e36 <_puts_r+0x76>
 8005e12:	4b17      	ldr	r3, [pc, #92]	; (8005e70 <_puts_r+0xb0>)
 8005e14:	429c      	cmp	r4, r3
 8005e16:	d101      	bne.n	8005e1c <_puts_r+0x5c>
 8005e18:	68ac      	ldr	r4, [r5, #8]
 8005e1a:	e7e3      	b.n	8005de4 <_puts_r+0x24>
 8005e1c:	4b15      	ldr	r3, [pc, #84]	; (8005e74 <_puts_r+0xb4>)
 8005e1e:	429c      	cmp	r4, r3
 8005e20:	bf08      	it	eq
 8005e22:	68ec      	ldreq	r4, [r5, #12]
 8005e24:	e7de      	b.n	8005de4 <_puts_r+0x24>
 8005e26:	4621      	mov	r1, r4
 8005e28:	4628      	mov	r0, r5
 8005e2a:	f000 f89f 	bl	8005f6c <__swsetup_r>
 8005e2e:	2800      	cmp	r0, #0
 8005e30:	d0dd      	beq.n	8005dee <_puts_r+0x2e>
 8005e32:	f04f 30ff 	mov.w	r0, #4294967295
 8005e36:	bd70      	pop	{r4, r5, r6, pc}
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	da04      	bge.n	8005e46 <_puts_r+0x86>
 8005e3c:	69a2      	ldr	r2, [r4, #24]
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	dc06      	bgt.n	8005e50 <_puts_r+0x90>
 8005e42:	290a      	cmp	r1, #10
 8005e44:	d004      	beq.n	8005e50 <_puts_r+0x90>
 8005e46:	6823      	ldr	r3, [r4, #0]
 8005e48:	1c5a      	adds	r2, r3, #1
 8005e4a:	6022      	str	r2, [r4, #0]
 8005e4c:	7019      	strb	r1, [r3, #0]
 8005e4e:	e7cf      	b.n	8005df0 <_puts_r+0x30>
 8005e50:	4622      	mov	r2, r4
 8005e52:	4628      	mov	r0, r5
 8005e54:	f000 f838 	bl	8005ec8 <__swbuf_r>
 8005e58:	3001      	adds	r0, #1
 8005e5a:	d1c9      	bne.n	8005df0 <_puts_r+0x30>
 8005e5c:	e7e9      	b.n	8005e32 <_puts_r+0x72>
 8005e5e:	6823      	ldr	r3, [r4, #0]
 8005e60:	200a      	movs	r0, #10
 8005e62:	1c5a      	adds	r2, r3, #1
 8005e64:	6022      	str	r2, [r4, #0]
 8005e66:	7018      	strb	r0, [r3, #0]
 8005e68:	e7e5      	b.n	8005e36 <_puts_r+0x76>
 8005e6a:	bf00      	nop
 8005e6c:	08008914 	.word	0x08008914
 8005e70:	08008934 	.word	0x08008934
 8005e74:	080088f4 	.word	0x080088f4

08005e78 <puts>:
 8005e78:	4b02      	ldr	r3, [pc, #8]	; (8005e84 <puts+0xc>)
 8005e7a:	4601      	mov	r1, r0
 8005e7c:	6818      	ldr	r0, [r3, #0]
 8005e7e:	f7ff bf9f 	b.w	8005dc0 <_puts_r>
 8005e82:	bf00      	nop
 8005e84:	20000034 	.word	0x20000034

08005e88 <siprintf>:
 8005e88:	b40e      	push	{r1, r2, r3}
 8005e8a:	b500      	push	{lr}
 8005e8c:	b09c      	sub	sp, #112	; 0x70
 8005e8e:	ab1d      	add	r3, sp, #116	; 0x74
 8005e90:	9002      	str	r0, [sp, #8]
 8005e92:	9006      	str	r0, [sp, #24]
 8005e94:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005e98:	4809      	ldr	r0, [pc, #36]	; (8005ec0 <siprintf+0x38>)
 8005e9a:	9107      	str	r1, [sp, #28]
 8005e9c:	9104      	str	r1, [sp, #16]
 8005e9e:	4909      	ldr	r1, [pc, #36]	; (8005ec4 <siprintf+0x3c>)
 8005ea0:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ea4:	9105      	str	r1, [sp, #20]
 8005ea6:	6800      	ldr	r0, [r0, #0]
 8005ea8:	9301      	str	r3, [sp, #4]
 8005eaa:	a902      	add	r1, sp, #8
 8005eac:	f000 fbac 	bl	8006608 <_svfiprintf_r>
 8005eb0:	9b02      	ldr	r3, [sp, #8]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	701a      	strb	r2, [r3, #0]
 8005eb6:	b01c      	add	sp, #112	; 0x70
 8005eb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ebc:	b003      	add	sp, #12
 8005ebe:	4770      	bx	lr
 8005ec0:	20000034 	.word	0x20000034
 8005ec4:	ffff0208 	.word	0xffff0208

08005ec8 <__swbuf_r>:
 8005ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eca:	460e      	mov	r6, r1
 8005ecc:	4614      	mov	r4, r2
 8005ece:	4605      	mov	r5, r0
 8005ed0:	b118      	cbz	r0, 8005eda <__swbuf_r+0x12>
 8005ed2:	6983      	ldr	r3, [r0, #24]
 8005ed4:	b90b      	cbnz	r3, 8005eda <__swbuf_r+0x12>
 8005ed6:	f000 f9a7 	bl	8006228 <__sinit>
 8005eda:	4b21      	ldr	r3, [pc, #132]	; (8005f60 <__swbuf_r+0x98>)
 8005edc:	429c      	cmp	r4, r3
 8005ede:	d12a      	bne.n	8005f36 <__swbuf_r+0x6e>
 8005ee0:	686c      	ldr	r4, [r5, #4]
 8005ee2:	69a3      	ldr	r3, [r4, #24]
 8005ee4:	60a3      	str	r3, [r4, #8]
 8005ee6:	89a3      	ldrh	r3, [r4, #12]
 8005ee8:	071a      	lsls	r2, r3, #28
 8005eea:	d52e      	bpl.n	8005f4a <__swbuf_r+0x82>
 8005eec:	6923      	ldr	r3, [r4, #16]
 8005eee:	b363      	cbz	r3, 8005f4a <__swbuf_r+0x82>
 8005ef0:	6923      	ldr	r3, [r4, #16]
 8005ef2:	6820      	ldr	r0, [r4, #0]
 8005ef4:	1ac0      	subs	r0, r0, r3
 8005ef6:	6963      	ldr	r3, [r4, #20]
 8005ef8:	b2f6      	uxtb	r6, r6
 8005efa:	4283      	cmp	r3, r0
 8005efc:	4637      	mov	r7, r6
 8005efe:	dc04      	bgt.n	8005f0a <__swbuf_r+0x42>
 8005f00:	4621      	mov	r1, r4
 8005f02:	4628      	mov	r0, r5
 8005f04:	f000 f926 	bl	8006154 <_fflush_r>
 8005f08:	bb28      	cbnz	r0, 8005f56 <__swbuf_r+0x8e>
 8005f0a:	68a3      	ldr	r3, [r4, #8]
 8005f0c:	3b01      	subs	r3, #1
 8005f0e:	60a3      	str	r3, [r4, #8]
 8005f10:	6823      	ldr	r3, [r4, #0]
 8005f12:	1c5a      	adds	r2, r3, #1
 8005f14:	6022      	str	r2, [r4, #0]
 8005f16:	701e      	strb	r6, [r3, #0]
 8005f18:	6963      	ldr	r3, [r4, #20]
 8005f1a:	3001      	adds	r0, #1
 8005f1c:	4283      	cmp	r3, r0
 8005f1e:	d004      	beq.n	8005f2a <__swbuf_r+0x62>
 8005f20:	89a3      	ldrh	r3, [r4, #12]
 8005f22:	07db      	lsls	r3, r3, #31
 8005f24:	d519      	bpl.n	8005f5a <__swbuf_r+0x92>
 8005f26:	2e0a      	cmp	r6, #10
 8005f28:	d117      	bne.n	8005f5a <__swbuf_r+0x92>
 8005f2a:	4621      	mov	r1, r4
 8005f2c:	4628      	mov	r0, r5
 8005f2e:	f000 f911 	bl	8006154 <_fflush_r>
 8005f32:	b190      	cbz	r0, 8005f5a <__swbuf_r+0x92>
 8005f34:	e00f      	b.n	8005f56 <__swbuf_r+0x8e>
 8005f36:	4b0b      	ldr	r3, [pc, #44]	; (8005f64 <__swbuf_r+0x9c>)
 8005f38:	429c      	cmp	r4, r3
 8005f3a:	d101      	bne.n	8005f40 <__swbuf_r+0x78>
 8005f3c:	68ac      	ldr	r4, [r5, #8]
 8005f3e:	e7d0      	b.n	8005ee2 <__swbuf_r+0x1a>
 8005f40:	4b09      	ldr	r3, [pc, #36]	; (8005f68 <__swbuf_r+0xa0>)
 8005f42:	429c      	cmp	r4, r3
 8005f44:	bf08      	it	eq
 8005f46:	68ec      	ldreq	r4, [r5, #12]
 8005f48:	e7cb      	b.n	8005ee2 <__swbuf_r+0x1a>
 8005f4a:	4621      	mov	r1, r4
 8005f4c:	4628      	mov	r0, r5
 8005f4e:	f000 f80d 	bl	8005f6c <__swsetup_r>
 8005f52:	2800      	cmp	r0, #0
 8005f54:	d0cc      	beq.n	8005ef0 <__swbuf_r+0x28>
 8005f56:	f04f 37ff 	mov.w	r7, #4294967295
 8005f5a:	4638      	mov	r0, r7
 8005f5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f5e:	bf00      	nop
 8005f60:	08008914 	.word	0x08008914
 8005f64:	08008934 	.word	0x08008934
 8005f68:	080088f4 	.word	0x080088f4

08005f6c <__swsetup_r>:
 8005f6c:	4b32      	ldr	r3, [pc, #200]	; (8006038 <__swsetup_r+0xcc>)
 8005f6e:	b570      	push	{r4, r5, r6, lr}
 8005f70:	681d      	ldr	r5, [r3, #0]
 8005f72:	4606      	mov	r6, r0
 8005f74:	460c      	mov	r4, r1
 8005f76:	b125      	cbz	r5, 8005f82 <__swsetup_r+0x16>
 8005f78:	69ab      	ldr	r3, [r5, #24]
 8005f7a:	b913      	cbnz	r3, 8005f82 <__swsetup_r+0x16>
 8005f7c:	4628      	mov	r0, r5
 8005f7e:	f000 f953 	bl	8006228 <__sinit>
 8005f82:	4b2e      	ldr	r3, [pc, #184]	; (800603c <__swsetup_r+0xd0>)
 8005f84:	429c      	cmp	r4, r3
 8005f86:	d10f      	bne.n	8005fa8 <__swsetup_r+0x3c>
 8005f88:	686c      	ldr	r4, [r5, #4]
 8005f8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f8e:	b29a      	uxth	r2, r3
 8005f90:	0715      	lsls	r5, r2, #28
 8005f92:	d42c      	bmi.n	8005fee <__swsetup_r+0x82>
 8005f94:	06d0      	lsls	r0, r2, #27
 8005f96:	d411      	bmi.n	8005fbc <__swsetup_r+0x50>
 8005f98:	2209      	movs	r2, #9
 8005f9a:	6032      	str	r2, [r6, #0]
 8005f9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fa0:	81a3      	strh	r3, [r4, #12]
 8005fa2:	f04f 30ff 	mov.w	r0, #4294967295
 8005fa6:	e03e      	b.n	8006026 <__swsetup_r+0xba>
 8005fa8:	4b25      	ldr	r3, [pc, #148]	; (8006040 <__swsetup_r+0xd4>)
 8005faa:	429c      	cmp	r4, r3
 8005fac:	d101      	bne.n	8005fb2 <__swsetup_r+0x46>
 8005fae:	68ac      	ldr	r4, [r5, #8]
 8005fb0:	e7eb      	b.n	8005f8a <__swsetup_r+0x1e>
 8005fb2:	4b24      	ldr	r3, [pc, #144]	; (8006044 <__swsetup_r+0xd8>)
 8005fb4:	429c      	cmp	r4, r3
 8005fb6:	bf08      	it	eq
 8005fb8:	68ec      	ldreq	r4, [r5, #12]
 8005fba:	e7e6      	b.n	8005f8a <__swsetup_r+0x1e>
 8005fbc:	0751      	lsls	r1, r2, #29
 8005fbe:	d512      	bpl.n	8005fe6 <__swsetup_r+0x7a>
 8005fc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005fc2:	b141      	cbz	r1, 8005fd6 <__swsetup_r+0x6a>
 8005fc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005fc8:	4299      	cmp	r1, r3
 8005fca:	d002      	beq.n	8005fd2 <__swsetup_r+0x66>
 8005fcc:	4630      	mov	r0, r6
 8005fce:	f000 fa19 	bl	8006404 <_free_r>
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	6363      	str	r3, [r4, #52]	; 0x34
 8005fd6:	89a3      	ldrh	r3, [r4, #12]
 8005fd8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005fdc:	81a3      	strh	r3, [r4, #12]
 8005fde:	2300      	movs	r3, #0
 8005fe0:	6063      	str	r3, [r4, #4]
 8005fe2:	6923      	ldr	r3, [r4, #16]
 8005fe4:	6023      	str	r3, [r4, #0]
 8005fe6:	89a3      	ldrh	r3, [r4, #12]
 8005fe8:	f043 0308 	orr.w	r3, r3, #8
 8005fec:	81a3      	strh	r3, [r4, #12]
 8005fee:	6923      	ldr	r3, [r4, #16]
 8005ff0:	b94b      	cbnz	r3, 8006006 <__swsetup_r+0x9a>
 8005ff2:	89a3      	ldrh	r3, [r4, #12]
 8005ff4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005ff8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ffc:	d003      	beq.n	8006006 <__swsetup_r+0x9a>
 8005ffe:	4621      	mov	r1, r4
 8006000:	4630      	mov	r0, r6
 8006002:	f000 f9bf 	bl	8006384 <__smakebuf_r>
 8006006:	89a2      	ldrh	r2, [r4, #12]
 8006008:	f012 0301 	ands.w	r3, r2, #1
 800600c:	d00c      	beq.n	8006028 <__swsetup_r+0xbc>
 800600e:	2300      	movs	r3, #0
 8006010:	60a3      	str	r3, [r4, #8]
 8006012:	6963      	ldr	r3, [r4, #20]
 8006014:	425b      	negs	r3, r3
 8006016:	61a3      	str	r3, [r4, #24]
 8006018:	6923      	ldr	r3, [r4, #16]
 800601a:	b953      	cbnz	r3, 8006032 <__swsetup_r+0xc6>
 800601c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006020:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006024:	d1ba      	bne.n	8005f9c <__swsetup_r+0x30>
 8006026:	bd70      	pop	{r4, r5, r6, pc}
 8006028:	0792      	lsls	r2, r2, #30
 800602a:	bf58      	it	pl
 800602c:	6963      	ldrpl	r3, [r4, #20]
 800602e:	60a3      	str	r3, [r4, #8]
 8006030:	e7f2      	b.n	8006018 <__swsetup_r+0xac>
 8006032:	2000      	movs	r0, #0
 8006034:	e7f7      	b.n	8006026 <__swsetup_r+0xba>
 8006036:	bf00      	nop
 8006038:	20000034 	.word	0x20000034
 800603c:	08008914 	.word	0x08008914
 8006040:	08008934 	.word	0x08008934
 8006044:	080088f4 	.word	0x080088f4

08006048 <__sflush_r>:
 8006048:	898a      	ldrh	r2, [r1, #12]
 800604a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800604e:	4605      	mov	r5, r0
 8006050:	0710      	lsls	r0, r2, #28
 8006052:	460c      	mov	r4, r1
 8006054:	d458      	bmi.n	8006108 <__sflush_r+0xc0>
 8006056:	684b      	ldr	r3, [r1, #4]
 8006058:	2b00      	cmp	r3, #0
 800605a:	dc05      	bgt.n	8006068 <__sflush_r+0x20>
 800605c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800605e:	2b00      	cmp	r3, #0
 8006060:	dc02      	bgt.n	8006068 <__sflush_r+0x20>
 8006062:	2000      	movs	r0, #0
 8006064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006068:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800606a:	2e00      	cmp	r6, #0
 800606c:	d0f9      	beq.n	8006062 <__sflush_r+0x1a>
 800606e:	2300      	movs	r3, #0
 8006070:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006074:	682f      	ldr	r7, [r5, #0]
 8006076:	6a21      	ldr	r1, [r4, #32]
 8006078:	602b      	str	r3, [r5, #0]
 800607a:	d032      	beq.n	80060e2 <__sflush_r+0x9a>
 800607c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800607e:	89a3      	ldrh	r3, [r4, #12]
 8006080:	075a      	lsls	r2, r3, #29
 8006082:	d505      	bpl.n	8006090 <__sflush_r+0x48>
 8006084:	6863      	ldr	r3, [r4, #4]
 8006086:	1ac0      	subs	r0, r0, r3
 8006088:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800608a:	b10b      	cbz	r3, 8006090 <__sflush_r+0x48>
 800608c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800608e:	1ac0      	subs	r0, r0, r3
 8006090:	2300      	movs	r3, #0
 8006092:	4602      	mov	r2, r0
 8006094:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006096:	6a21      	ldr	r1, [r4, #32]
 8006098:	4628      	mov	r0, r5
 800609a:	47b0      	blx	r6
 800609c:	1c43      	adds	r3, r0, #1
 800609e:	89a3      	ldrh	r3, [r4, #12]
 80060a0:	d106      	bne.n	80060b0 <__sflush_r+0x68>
 80060a2:	6829      	ldr	r1, [r5, #0]
 80060a4:	291d      	cmp	r1, #29
 80060a6:	d848      	bhi.n	800613a <__sflush_r+0xf2>
 80060a8:	4a29      	ldr	r2, [pc, #164]	; (8006150 <__sflush_r+0x108>)
 80060aa:	40ca      	lsrs	r2, r1
 80060ac:	07d6      	lsls	r6, r2, #31
 80060ae:	d544      	bpl.n	800613a <__sflush_r+0xf2>
 80060b0:	2200      	movs	r2, #0
 80060b2:	6062      	str	r2, [r4, #4]
 80060b4:	04d9      	lsls	r1, r3, #19
 80060b6:	6922      	ldr	r2, [r4, #16]
 80060b8:	6022      	str	r2, [r4, #0]
 80060ba:	d504      	bpl.n	80060c6 <__sflush_r+0x7e>
 80060bc:	1c42      	adds	r2, r0, #1
 80060be:	d101      	bne.n	80060c4 <__sflush_r+0x7c>
 80060c0:	682b      	ldr	r3, [r5, #0]
 80060c2:	b903      	cbnz	r3, 80060c6 <__sflush_r+0x7e>
 80060c4:	6560      	str	r0, [r4, #84]	; 0x54
 80060c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80060c8:	602f      	str	r7, [r5, #0]
 80060ca:	2900      	cmp	r1, #0
 80060cc:	d0c9      	beq.n	8006062 <__sflush_r+0x1a>
 80060ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80060d2:	4299      	cmp	r1, r3
 80060d4:	d002      	beq.n	80060dc <__sflush_r+0x94>
 80060d6:	4628      	mov	r0, r5
 80060d8:	f000 f994 	bl	8006404 <_free_r>
 80060dc:	2000      	movs	r0, #0
 80060de:	6360      	str	r0, [r4, #52]	; 0x34
 80060e0:	e7c0      	b.n	8006064 <__sflush_r+0x1c>
 80060e2:	2301      	movs	r3, #1
 80060e4:	4628      	mov	r0, r5
 80060e6:	47b0      	blx	r6
 80060e8:	1c41      	adds	r1, r0, #1
 80060ea:	d1c8      	bne.n	800607e <__sflush_r+0x36>
 80060ec:	682b      	ldr	r3, [r5, #0]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d0c5      	beq.n	800607e <__sflush_r+0x36>
 80060f2:	2b1d      	cmp	r3, #29
 80060f4:	d001      	beq.n	80060fa <__sflush_r+0xb2>
 80060f6:	2b16      	cmp	r3, #22
 80060f8:	d101      	bne.n	80060fe <__sflush_r+0xb6>
 80060fa:	602f      	str	r7, [r5, #0]
 80060fc:	e7b1      	b.n	8006062 <__sflush_r+0x1a>
 80060fe:	89a3      	ldrh	r3, [r4, #12]
 8006100:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006104:	81a3      	strh	r3, [r4, #12]
 8006106:	e7ad      	b.n	8006064 <__sflush_r+0x1c>
 8006108:	690f      	ldr	r7, [r1, #16]
 800610a:	2f00      	cmp	r7, #0
 800610c:	d0a9      	beq.n	8006062 <__sflush_r+0x1a>
 800610e:	0793      	lsls	r3, r2, #30
 8006110:	680e      	ldr	r6, [r1, #0]
 8006112:	bf08      	it	eq
 8006114:	694b      	ldreq	r3, [r1, #20]
 8006116:	600f      	str	r7, [r1, #0]
 8006118:	bf18      	it	ne
 800611a:	2300      	movne	r3, #0
 800611c:	eba6 0807 	sub.w	r8, r6, r7
 8006120:	608b      	str	r3, [r1, #8]
 8006122:	f1b8 0f00 	cmp.w	r8, #0
 8006126:	dd9c      	ble.n	8006062 <__sflush_r+0x1a>
 8006128:	4643      	mov	r3, r8
 800612a:	463a      	mov	r2, r7
 800612c:	6a21      	ldr	r1, [r4, #32]
 800612e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006130:	4628      	mov	r0, r5
 8006132:	47b0      	blx	r6
 8006134:	2800      	cmp	r0, #0
 8006136:	dc06      	bgt.n	8006146 <__sflush_r+0xfe>
 8006138:	89a3      	ldrh	r3, [r4, #12]
 800613a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800613e:	81a3      	strh	r3, [r4, #12]
 8006140:	f04f 30ff 	mov.w	r0, #4294967295
 8006144:	e78e      	b.n	8006064 <__sflush_r+0x1c>
 8006146:	4407      	add	r7, r0
 8006148:	eba8 0800 	sub.w	r8, r8, r0
 800614c:	e7e9      	b.n	8006122 <__sflush_r+0xda>
 800614e:	bf00      	nop
 8006150:	20400001 	.word	0x20400001

08006154 <_fflush_r>:
 8006154:	b538      	push	{r3, r4, r5, lr}
 8006156:	690b      	ldr	r3, [r1, #16]
 8006158:	4605      	mov	r5, r0
 800615a:	460c      	mov	r4, r1
 800615c:	b1db      	cbz	r3, 8006196 <_fflush_r+0x42>
 800615e:	b118      	cbz	r0, 8006168 <_fflush_r+0x14>
 8006160:	6983      	ldr	r3, [r0, #24]
 8006162:	b90b      	cbnz	r3, 8006168 <_fflush_r+0x14>
 8006164:	f000 f860 	bl	8006228 <__sinit>
 8006168:	4b0c      	ldr	r3, [pc, #48]	; (800619c <_fflush_r+0x48>)
 800616a:	429c      	cmp	r4, r3
 800616c:	d109      	bne.n	8006182 <_fflush_r+0x2e>
 800616e:	686c      	ldr	r4, [r5, #4]
 8006170:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006174:	b17b      	cbz	r3, 8006196 <_fflush_r+0x42>
 8006176:	4621      	mov	r1, r4
 8006178:	4628      	mov	r0, r5
 800617a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800617e:	f7ff bf63 	b.w	8006048 <__sflush_r>
 8006182:	4b07      	ldr	r3, [pc, #28]	; (80061a0 <_fflush_r+0x4c>)
 8006184:	429c      	cmp	r4, r3
 8006186:	d101      	bne.n	800618c <_fflush_r+0x38>
 8006188:	68ac      	ldr	r4, [r5, #8]
 800618a:	e7f1      	b.n	8006170 <_fflush_r+0x1c>
 800618c:	4b05      	ldr	r3, [pc, #20]	; (80061a4 <_fflush_r+0x50>)
 800618e:	429c      	cmp	r4, r3
 8006190:	bf08      	it	eq
 8006192:	68ec      	ldreq	r4, [r5, #12]
 8006194:	e7ec      	b.n	8006170 <_fflush_r+0x1c>
 8006196:	2000      	movs	r0, #0
 8006198:	bd38      	pop	{r3, r4, r5, pc}
 800619a:	bf00      	nop
 800619c:	08008914 	.word	0x08008914
 80061a0:	08008934 	.word	0x08008934
 80061a4:	080088f4 	.word	0x080088f4

080061a8 <std>:
 80061a8:	2300      	movs	r3, #0
 80061aa:	b510      	push	{r4, lr}
 80061ac:	4604      	mov	r4, r0
 80061ae:	e9c0 3300 	strd	r3, r3, [r0]
 80061b2:	6083      	str	r3, [r0, #8]
 80061b4:	8181      	strh	r1, [r0, #12]
 80061b6:	6643      	str	r3, [r0, #100]	; 0x64
 80061b8:	81c2      	strh	r2, [r0, #14]
 80061ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80061be:	6183      	str	r3, [r0, #24]
 80061c0:	4619      	mov	r1, r3
 80061c2:	2208      	movs	r2, #8
 80061c4:	305c      	adds	r0, #92	; 0x5c
 80061c6:	f7ff fdc6 	bl	8005d56 <memset>
 80061ca:	4b05      	ldr	r3, [pc, #20]	; (80061e0 <std+0x38>)
 80061cc:	6263      	str	r3, [r4, #36]	; 0x24
 80061ce:	4b05      	ldr	r3, [pc, #20]	; (80061e4 <std+0x3c>)
 80061d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80061d2:	4b05      	ldr	r3, [pc, #20]	; (80061e8 <std+0x40>)
 80061d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80061d6:	4b05      	ldr	r3, [pc, #20]	; (80061ec <std+0x44>)
 80061d8:	6224      	str	r4, [r4, #32]
 80061da:	6323      	str	r3, [r4, #48]	; 0x30
 80061dc:	bd10      	pop	{r4, pc}
 80061de:	bf00      	nop
 80061e0:	08006e15 	.word	0x08006e15
 80061e4:	08006e37 	.word	0x08006e37
 80061e8:	08006e6f 	.word	0x08006e6f
 80061ec:	08006e93 	.word	0x08006e93

080061f0 <_cleanup_r>:
 80061f0:	4901      	ldr	r1, [pc, #4]	; (80061f8 <_cleanup_r+0x8>)
 80061f2:	f000 b885 	b.w	8006300 <_fwalk_reent>
 80061f6:	bf00      	nop
 80061f8:	08006155 	.word	0x08006155

080061fc <__sfmoreglue>:
 80061fc:	b570      	push	{r4, r5, r6, lr}
 80061fe:	1e4a      	subs	r2, r1, #1
 8006200:	2568      	movs	r5, #104	; 0x68
 8006202:	4355      	muls	r5, r2
 8006204:	460e      	mov	r6, r1
 8006206:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800620a:	f000 f949 	bl	80064a0 <_malloc_r>
 800620e:	4604      	mov	r4, r0
 8006210:	b140      	cbz	r0, 8006224 <__sfmoreglue+0x28>
 8006212:	2100      	movs	r1, #0
 8006214:	e9c0 1600 	strd	r1, r6, [r0]
 8006218:	300c      	adds	r0, #12
 800621a:	60a0      	str	r0, [r4, #8]
 800621c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006220:	f7ff fd99 	bl	8005d56 <memset>
 8006224:	4620      	mov	r0, r4
 8006226:	bd70      	pop	{r4, r5, r6, pc}

08006228 <__sinit>:
 8006228:	6983      	ldr	r3, [r0, #24]
 800622a:	b510      	push	{r4, lr}
 800622c:	4604      	mov	r4, r0
 800622e:	bb33      	cbnz	r3, 800627e <__sinit+0x56>
 8006230:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8006234:	6503      	str	r3, [r0, #80]	; 0x50
 8006236:	4b12      	ldr	r3, [pc, #72]	; (8006280 <__sinit+0x58>)
 8006238:	4a12      	ldr	r2, [pc, #72]	; (8006284 <__sinit+0x5c>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	6282      	str	r2, [r0, #40]	; 0x28
 800623e:	4298      	cmp	r0, r3
 8006240:	bf04      	itt	eq
 8006242:	2301      	moveq	r3, #1
 8006244:	6183      	streq	r3, [r0, #24]
 8006246:	f000 f81f 	bl	8006288 <__sfp>
 800624a:	6060      	str	r0, [r4, #4]
 800624c:	4620      	mov	r0, r4
 800624e:	f000 f81b 	bl	8006288 <__sfp>
 8006252:	60a0      	str	r0, [r4, #8]
 8006254:	4620      	mov	r0, r4
 8006256:	f000 f817 	bl	8006288 <__sfp>
 800625a:	2200      	movs	r2, #0
 800625c:	60e0      	str	r0, [r4, #12]
 800625e:	2104      	movs	r1, #4
 8006260:	6860      	ldr	r0, [r4, #4]
 8006262:	f7ff ffa1 	bl	80061a8 <std>
 8006266:	2201      	movs	r2, #1
 8006268:	2109      	movs	r1, #9
 800626a:	68a0      	ldr	r0, [r4, #8]
 800626c:	f7ff ff9c 	bl	80061a8 <std>
 8006270:	2202      	movs	r2, #2
 8006272:	2112      	movs	r1, #18
 8006274:	68e0      	ldr	r0, [r4, #12]
 8006276:	f7ff ff97 	bl	80061a8 <std>
 800627a:	2301      	movs	r3, #1
 800627c:	61a3      	str	r3, [r4, #24]
 800627e:	bd10      	pop	{r4, pc}
 8006280:	080088f0 	.word	0x080088f0
 8006284:	080061f1 	.word	0x080061f1

08006288 <__sfp>:
 8006288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800628a:	4b1b      	ldr	r3, [pc, #108]	; (80062f8 <__sfp+0x70>)
 800628c:	681e      	ldr	r6, [r3, #0]
 800628e:	69b3      	ldr	r3, [r6, #24]
 8006290:	4607      	mov	r7, r0
 8006292:	b913      	cbnz	r3, 800629a <__sfp+0x12>
 8006294:	4630      	mov	r0, r6
 8006296:	f7ff ffc7 	bl	8006228 <__sinit>
 800629a:	3648      	adds	r6, #72	; 0x48
 800629c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80062a0:	3b01      	subs	r3, #1
 80062a2:	d503      	bpl.n	80062ac <__sfp+0x24>
 80062a4:	6833      	ldr	r3, [r6, #0]
 80062a6:	b133      	cbz	r3, 80062b6 <__sfp+0x2e>
 80062a8:	6836      	ldr	r6, [r6, #0]
 80062aa:	e7f7      	b.n	800629c <__sfp+0x14>
 80062ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80062b0:	b16d      	cbz	r5, 80062ce <__sfp+0x46>
 80062b2:	3468      	adds	r4, #104	; 0x68
 80062b4:	e7f4      	b.n	80062a0 <__sfp+0x18>
 80062b6:	2104      	movs	r1, #4
 80062b8:	4638      	mov	r0, r7
 80062ba:	f7ff ff9f 	bl	80061fc <__sfmoreglue>
 80062be:	6030      	str	r0, [r6, #0]
 80062c0:	2800      	cmp	r0, #0
 80062c2:	d1f1      	bne.n	80062a8 <__sfp+0x20>
 80062c4:	230c      	movs	r3, #12
 80062c6:	603b      	str	r3, [r7, #0]
 80062c8:	4604      	mov	r4, r0
 80062ca:	4620      	mov	r0, r4
 80062cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062ce:	4b0b      	ldr	r3, [pc, #44]	; (80062fc <__sfp+0x74>)
 80062d0:	6665      	str	r5, [r4, #100]	; 0x64
 80062d2:	e9c4 5500 	strd	r5, r5, [r4]
 80062d6:	60a5      	str	r5, [r4, #8]
 80062d8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80062dc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80062e0:	2208      	movs	r2, #8
 80062e2:	4629      	mov	r1, r5
 80062e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80062e8:	f7ff fd35 	bl	8005d56 <memset>
 80062ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80062f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80062f4:	e7e9      	b.n	80062ca <__sfp+0x42>
 80062f6:	bf00      	nop
 80062f8:	080088f0 	.word	0x080088f0
 80062fc:	ffff0001 	.word	0xffff0001

08006300 <_fwalk_reent>:
 8006300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006304:	4680      	mov	r8, r0
 8006306:	4689      	mov	r9, r1
 8006308:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800630c:	2600      	movs	r6, #0
 800630e:	b914      	cbnz	r4, 8006316 <_fwalk_reent+0x16>
 8006310:	4630      	mov	r0, r6
 8006312:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006316:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800631a:	3f01      	subs	r7, #1
 800631c:	d501      	bpl.n	8006322 <_fwalk_reent+0x22>
 800631e:	6824      	ldr	r4, [r4, #0]
 8006320:	e7f5      	b.n	800630e <_fwalk_reent+0xe>
 8006322:	89ab      	ldrh	r3, [r5, #12]
 8006324:	2b01      	cmp	r3, #1
 8006326:	d907      	bls.n	8006338 <_fwalk_reent+0x38>
 8006328:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800632c:	3301      	adds	r3, #1
 800632e:	d003      	beq.n	8006338 <_fwalk_reent+0x38>
 8006330:	4629      	mov	r1, r5
 8006332:	4640      	mov	r0, r8
 8006334:	47c8      	blx	r9
 8006336:	4306      	orrs	r6, r0
 8006338:	3568      	adds	r5, #104	; 0x68
 800633a:	e7ee      	b.n	800631a <_fwalk_reent+0x1a>

0800633c <__swhatbuf_r>:
 800633c:	b570      	push	{r4, r5, r6, lr}
 800633e:	460e      	mov	r6, r1
 8006340:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006344:	2900      	cmp	r1, #0
 8006346:	b096      	sub	sp, #88	; 0x58
 8006348:	4614      	mov	r4, r2
 800634a:	461d      	mov	r5, r3
 800634c:	da07      	bge.n	800635e <__swhatbuf_r+0x22>
 800634e:	2300      	movs	r3, #0
 8006350:	602b      	str	r3, [r5, #0]
 8006352:	89b3      	ldrh	r3, [r6, #12]
 8006354:	061a      	lsls	r2, r3, #24
 8006356:	d410      	bmi.n	800637a <__swhatbuf_r+0x3e>
 8006358:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800635c:	e00e      	b.n	800637c <__swhatbuf_r+0x40>
 800635e:	466a      	mov	r2, sp
 8006360:	f000 fdbe 	bl	8006ee0 <_fstat_r>
 8006364:	2800      	cmp	r0, #0
 8006366:	dbf2      	blt.n	800634e <__swhatbuf_r+0x12>
 8006368:	9a01      	ldr	r2, [sp, #4]
 800636a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800636e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006372:	425a      	negs	r2, r3
 8006374:	415a      	adcs	r2, r3
 8006376:	602a      	str	r2, [r5, #0]
 8006378:	e7ee      	b.n	8006358 <__swhatbuf_r+0x1c>
 800637a:	2340      	movs	r3, #64	; 0x40
 800637c:	2000      	movs	r0, #0
 800637e:	6023      	str	r3, [r4, #0]
 8006380:	b016      	add	sp, #88	; 0x58
 8006382:	bd70      	pop	{r4, r5, r6, pc}

08006384 <__smakebuf_r>:
 8006384:	898b      	ldrh	r3, [r1, #12]
 8006386:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006388:	079d      	lsls	r5, r3, #30
 800638a:	4606      	mov	r6, r0
 800638c:	460c      	mov	r4, r1
 800638e:	d507      	bpl.n	80063a0 <__smakebuf_r+0x1c>
 8006390:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006394:	6023      	str	r3, [r4, #0]
 8006396:	6123      	str	r3, [r4, #16]
 8006398:	2301      	movs	r3, #1
 800639a:	6163      	str	r3, [r4, #20]
 800639c:	b002      	add	sp, #8
 800639e:	bd70      	pop	{r4, r5, r6, pc}
 80063a0:	ab01      	add	r3, sp, #4
 80063a2:	466a      	mov	r2, sp
 80063a4:	f7ff ffca 	bl	800633c <__swhatbuf_r>
 80063a8:	9900      	ldr	r1, [sp, #0]
 80063aa:	4605      	mov	r5, r0
 80063ac:	4630      	mov	r0, r6
 80063ae:	f000 f877 	bl	80064a0 <_malloc_r>
 80063b2:	b948      	cbnz	r0, 80063c8 <__smakebuf_r+0x44>
 80063b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063b8:	059a      	lsls	r2, r3, #22
 80063ba:	d4ef      	bmi.n	800639c <__smakebuf_r+0x18>
 80063bc:	f023 0303 	bic.w	r3, r3, #3
 80063c0:	f043 0302 	orr.w	r3, r3, #2
 80063c4:	81a3      	strh	r3, [r4, #12]
 80063c6:	e7e3      	b.n	8006390 <__smakebuf_r+0xc>
 80063c8:	4b0d      	ldr	r3, [pc, #52]	; (8006400 <__smakebuf_r+0x7c>)
 80063ca:	62b3      	str	r3, [r6, #40]	; 0x28
 80063cc:	89a3      	ldrh	r3, [r4, #12]
 80063ce:	6020      	str	r0, [r4, #0]
 80063d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063d4:	81a3      	strh	r3, [r4, #12]
 80063d6:	9b00      	ldr	r3, [sp, #0]
 80063d8:	6163      	str	r3, [r4, #20]
 80063da:	9b01      	ldr	r3, [sp, #4]
 80063dc:	6120      	str	r0, [r4, #16]
 80063de:	b15b      	cbz	r3, 80063f8 <__smakebuf_r+0x74>
 80063e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063e4:	4630      	mov	r0, r6
 80063e6:	f000 fd8d 	bl	8006f04 <_isatty_r>
 80063ea:	b128      	cbz	r0, 80063f8 <__smakebuf_r+0x74>
 80063ec:	89a3      	ldrh	r3, [r4, #12]
 80063ee:	f023 0303 	bic.w	r3, r3, #3
 80063f2:	f043 0301 	orr.w	r3, r3, #1
 80063f6:	81a3      	strh	r3, [r4, #12]
 80063f8:	89a3      	ldrh	r3, [r4, #12]
 80063fa:	431d      	orrs	r5, r3
 80063fc:	81a5      	strh	r5, [r4, #12]
 80063fe:	e7cd      	b.n	800639c <__smakebuf_r+0x18>
 8006400:	080061f1 	.word	0x080061f1

08006404 <_free_r>:
 8006404:	b538      	push	{r3, r4, r5, lr}
 8006406:	4605      	mov	r5, r0
 8006408:	2900      	cmp	r1, #0
 800640a:	d045      	beq.n	8006498 <_free_r+0x94>
 800640c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006410:	1f0c      	subs	r4, r1, #4
 8006412:	2b00      	cmp	r3, #0
 8006414:	bfb8      	it	lt
 8006416:	18e4      	addlt	r4, r4, r3
 8006418:	f000 fdaf 	bl	8006f7a <__malloc_lock>
 800641c:	4a1f      	ldr	r2, [pc, #124]	; (800649c <_free_r+0x98>)
 800641e:	6813      	ldr	r3, [r2, #0]
 8006420:	4610      	mov	r0, r2
 8006422:	b933      	cbnz	r3, 8006432 <_free_r+0x2e>
 8006424:	6063      	str	r3, [r4, #4]
 8006426:	6014      	str	r4, [r2, #0]
 8006428:	4628      	mov	r0, r5
 800642a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800642e:	f000 bda5 	b.w	8006f7c <__malloc_unlock>
 8006432:	42a3      	cmp	r3, r4
 8006434:	d90c      	bls.n	8006450 <_free_r+0x4c>
 8006436:	6821      	ldr	r1, [r4, #0]
 8006438:	1862      	adds	r2, r4, r1
 800643a:	4293      	cmp	r3, r2
 800643c:	bf04      	itt	eq
 800643e:	681a      	ldreq	r2, [r3, #0]
 8006440:	685b      	ldreq	r3, [r3, #4]
 8006442:	6063      	str	r3, [r4, #4]
 8006444:	bf04      	itt	eq
 8006446:	1852      	addeq	r2, r2, r1
 8006448:	6022      	streq	r2, [r4, #0]
 800644a:	6004      	str	r4, [r0, #0]
 800644c:	e7ec      	b.n	8006428 <_free_r+0x24>
 800644e:	4613      	mov	r3, r2
 8006450:	685a      	ldr	r2, [r3, #4]
 8006452:	b10a      	cbz	r2, 8006458 <_free_r+0x54>
 8006454:	42a2      	cmp	r2, r4
 8006456:	d9fa      	bls.n	800644e <_free_r+0x4a>
 8006458:	6819      	ldr	r1, [r3, #0]
 800645a:	1858      	adds	r0, r3, r1
 800645c:	42a0      	cmp	r0, r4
 800645e:	d10b      	bne.n	8006478 <_free_r+0x74>
 8006460:	6820      	ldr	r0, [r4, #0]
 8006462:	4401      	add	r1, r0
 8006464:	1858      	adds	r0, r3, r1
 8006466:	4282      	cmp	r2, r0
 8006468:	6019      	str	r1, [r3, #0]
 800646a:	d1dd      	bne.n	8006428 <_free_r+0x24>
 800646c:	6810      	ldr	r0, [r2, #0]
 800646e:	6852      	ldr	r2, [r2, #4]
 8006470:	605a      	str	r2, [r3, #4]
 8006472:	4401      	add	r1, r0
 8006474:	6019      	str	r1, [r3, #0]
 8006476:	e7d7      	b.n	8006428 <_free_r+0x24>
 8006478:	d902      	bls.n	8006480 <_free_r+0x7c>
 800647a:	230c      	movs	r3, #12
 800647c:	602b      	str	r3, [r5, #0]
 800647e:	e7d3      	b.n	8006428 <_free_r+0x24>
 8006480:	6820      	ldr	r0, [r4, #0]
 8006482:	1821      	adds	r1, r4, r0
 8006484:	428a      	cmp	r2, r1
 8006486:	bf04      	itt	eq
 8006488:	6811      	ldreq	r1, [r2, #0]
 800648a:	6852      	ldreq	r2, [r2, #4]
 800648c:	6062      	str	r2, [r4, #4]
 800648e:	bf04      	itt	eq
 8006490:	1809      	addeq	r1, r1, r0
 8006492:	6021      	streq	r1, [r4, #0]
 8006494:	605c      	str	r4, [r3, #4]
 8006496:	e7c7      	b.n	8006428 <_free_r+0x24>
 8006498:	bd38      	pop	{r3, r4, r5, pc}
 800649a:	bf00      	nop
 800649c:	200021b0 	.word	0x200021b0

080064a0 <_malloc_r>:
 80064a0:	b570      	push	{r4, r5, r6, lr}
 80064a2:	1ccd      	adds	r5, r1, #3
 80064a4:	f025 0503 	bic.w	r5, r5, #3
 80064a8:	3508      	adds	r5, #8
 80064aa:	2d0c      	cmp	r5, #12
 80064ac:	bf38      	it	cc
 80064ae:	250c      	movcc	r5, #12
 80064b0:	2d00      	cmp	r5, #0
 80064b2:	4606      	mov	r6, r0
 80064b4:	db01      	blt.n	80064ba <_malloc_r+0x1a>
 80064b6:	42a9      	cmp	r1, r5
 80064b8:	d903      	bls.n	80064c2 <_malloc_r+0x22>
 80064ba:	230c      	movs	r3, #12
 80064bc:	6033      	str	r3, [r6, #0]
 80064be:	2000      	movs	r0, #0
 80064c0:	bd70      	pop	{r4, r5, r6, pc}
 80064c2:	f000 fd5a 	bl	8006f7a <__malloc_lock>
 80064c6:	4a21      	ldr	r2, [pc, #132]	; (800654c <_malloc_r+0xac>)
 80064c8:	6814      	ldr	r4, [r2, #0]
 80064ca:	4621      	mov	r1, r4
 80064cc:	b991      	cbnz	r1, 80064f4 <_malloc_r+0x54>
 80064ce:	4c20      	ldr	r4, [pc, #128]	; (8006550 <_malloc_r+0xb0>)
 80064d0:	6823      	ldr	r3, [r4, #0]
 80064d2:	b91b      	cbnz	r3, 80064dc <_malloc_r+0x3c>
 80064d4:	4630      	mov	r0, r6
 80064d6:	f000 fc8d 	bl	8006df4 <_sbrk_r>
 80064da:	6020      	str	r0, [r4, #0]
 80064dc:	4629      	mov	r1, r5
 80064de:	4630      	mov	r0, r6
 80064e0:	f000 fc88 	bl	8006df4 <_sbrk_r>
 80064e4:	1c43      	adds	r3, r0, #1
 80064e6:	d124      	bne.n	8006532 <_malloc_r+0x92>
 80064e8:	230c      	movs	r3, #12
 80064ea:	6033      	str	r3, [r6, #0]
 80064ec:	4630      	mov	r0, r6
 80064ee:	f000 fd45 	bl	8006f7c <__malloc_unlock>
 80064f2:	e7e4      	b.n	80064be <_malloc_r+0x1e>
 80064f4:	680b      	ldr	r3, [r1, #0]
 80064f6:	1b5b      	subs	r3, r3, r5
 80064f8:	d418      	bmi.n	800652c <_malloc_r+0x8c>
 80064fa:	2b0b      	cmp	r3, #11
 80064fc:	d90f      	bls.n	800651e <_malloc_r+0x7e>
 80064fe:	600b      	str	r3, [r1, #0]
 8006500:	50cd      	str	r5, [r1, r3]
 8006502:	18cc      	adds	r4, r1, r3
 8006504:	4630      	mov	r0, r6
 8006506:	f000 fd39 	bl	8006f7c <__malloc_unlock>
 800650a:	f104 000b 	add.w	r0, r4, #11
 800650e:	1d23      	adds	r3, r4, #4
 8006510:	f020 0007 	bic.w	r0, r0, #7
 8006514:	1ac3      	subs	r3, r0, r3
 8006516:	d0d3      	beq.n	80064c0 <_malloc_r+0x20>
 8006518:	425a      	negs	r2, r3
 800651a:	50e2      	str	r2, [r4, r3]
 800651c:	e7d0      	b.n	80064c0 <_malloc_r+0x20>
 800651e:	428c      	cmp	r4, r1
 8006520:	684b      	ldr	r3, [r1, #4]
 8006522:	bf16      	itet	ne
 8006524:	6063      	strne	r3, [r4, #4]
 8006526:	6013      	streq	r3, [r2, #0]
 8006528:	460c      	movne	r4, r1
 800652a:	e7eb      	b.n	8006504 <_malloc_r+0x64>
 800652c:	460c      	mov	r4, r1
 800652e:	6849      	ldr	r1, [r1, #4]
 8006530:	e7cc      	b.n	80064cc <_malloc_r+0x2c>
 8006532:	1cc4      	adds	r4, r0, #3
 8006534:	f024 0403 	bic.w	r4, r4, #3
 8006538:	42a0      	cmp	r0, r4
 800653a:	d005      	beq.n	8006548 <_malloc_r+0xa8>
 800653c:	1a21      	subs	r1, r4, r0
 800653e:	4630      	mov	r0, r6
 8006540:	f000 fc58 	bl	8006df4 <_sbrk_r>
 8006544:	3001      	adds	r0, #1
 8006546:	d0cf      	beq.n	80064e8 <_malloc_r+0x48>
 8006548:	6025      	str	r5, [r4, #0]
 800654a:	e7db      	b.n	8006504 <_malloc_r+0x64>
 800654c:	200021b0 	.word	0x200021b0
 8006550:	200021b4 	.word	0x200021b4

08006554 <__ssputs_r>:
 8006554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006558:	688e      	ldr	r6, [r1, #8]
 800655a:	429e      	cmp	r6, r3
 800655c:	4682      	mov	sl, r0
 800655e:	460c      	mov	r4, r1
 8006560:	4690      	mov	r8, r2
 8006562:	4699      	mov	r9, r3
 8006564:	d837      	bhi.n	80065d6 <__ssputs_r+0x82>
 8006566:	898a      	ldrh	r2, [r1, #12]
 8006568:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800656c:	d031      	beq.n	80065d2 <__ssputs_r+0x7e>
 800656e:	6825      	ldr	r5, [r4, #0]
 8006570:	6909      	ldr	r1, [r1, #16]
 8006572:	1a6f      	subs	r7, r5, r1
 8006574:	6965      	ldr	r5, [r4, #20]
 8006576:	2302      	movs	r3, #2
 8006578:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800657c:	fb95 f5f3 	sdiv	r5, r5, r3
 8006580:	f109 0301 	add.w	r3, r9, #1
 8006584:	443b      	add	r3, r7
 8006586:	429d      	cmp	r5, r3
 8006588:	bf38      	it	cc
 800658a:	461d      	movcc	r5, r3
 800658c:	0553      	lsls	r3, r2, #21
 800658e:	d530      	bpl.n	80065f2 <__ssputs_r+0x9e>
 8006590:	4629      	mov	r1, r5
 8006592:	f7ff ff85 	bl	80064a0 <_malloc_r>
 8006596:	4606      	mov	r6, r0
 8006598:	b950      	cbnz	r0, 80065b0 <__ssputs_r+0x5c>
 800659a:	230c      	movs	r3, #12
 800659c:	f8ca 3000 	str.w	r3, [sl]
 80065a0:	89a3      	ldrh	r3, [r4, #12]
 80065a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065a6:	81a3      	strh	r3, [r4, #12]
 80065a8:	f04f 30ff 	mov.w	r0, #4294967295
 80065ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065b0:	463a      	mov	r2, r7
 80065b2:	6921      	ldr	r1, [r4, #16]
 80065b4:	f7ff fbc4 	bl	8005d40 <memcpy>
 80065b8:	89a3      	ldrh	r3, [r4, #12]
 80065ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80065be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065c2:	81a3      	strh	r3, [r4, #12]
 80065c4:	6126      	str	r6, [r4, #16]
 80065c6:	6165      	str	r5, [r4, #20]
 80065c8:	443e      	add	r6, r7
 80065ca:	1bed      	subs	r5, r5, r7
 80065cc:	6026      	str	r6, [r4, #0]
 80065ce:	60a5      	str	r5, [r4, #8]
 80065d0:	464e      	mov	r6, r9
 80065d2:	454e      	cmp	r6, r9
 80065d4:	d900      	bls.n	80065d8 <__ssputs_r+0x84>
 80065d6:	464e      	mov	r6, r9
 80065d8:	4632      	mov	r2, r6
 80065da:	4641      	mov	r1, r8
 80065dc:	6820      	ldr	r0, [r4, #0]
 80065de:	f000 fcb3 	bl	8006f48 <memmove>
 80065e2:	68a3      	ldr	r3, [r4, #8]
 80065e4:	1b9b      	subs	r3, r3, r6
 80065e6:	60a3      	str	r3, [r4, #8]
 80065e8:	6823      	ldr	r3, [r4, #0]
 80065ea:	441e      	add	r6, r3
 80065ec:	6026      	str	r6, [r4, #0]
 80065ee:	2000      	movs	r0, #0
 80065f0:	e7dc      	b.n	80065ac <__ssputs_r+0x58>
 80065f2:	462a      	mov	r2, r5
 80065f4:	f000 fcc3 	bl	8006f7e <_realloc_r>
 80065f8:	4606      	mov	r6, r0
 80065fa:	2800      	cmp	r0, #0
 80065fc:	d1e2      	bne.n	80065c4 <__ssputs_r+0x70>
 80065fe:	6921      	ldr	r1, [r4, #16]
 8006600:	4650      	mov	r0, sl
 8006602:	f7ff feff 	bl	8006404 <_free_r>
 8006606:	e7c8      	b.n	800659a <__ssputs_r+0x46>

08006608 <_svfiprintf_r>:
 8006608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800660c:	461d      	mov	r5, r3
 800660e:	898b      	ldrh	r3, [r1, #12]
 8006610:	061f      	lsls	r7, r3, #24
 8006612:	b09d      	sub	sp, #116	; 0x74
 8006614:	4680      	mov	r8, r0
 8006616:	460c      	mov	r4, r1
 8006618:	4616      	mov	r6, r2
 800661a:	d50f      	bpl.n	800663c <_svfiprintf_r+0x34>
 800661c:	690b      	ldr	r3, [r1, #16]
 800661e:	b96b      	cbnz	r3, 800663c <_svfiprintf_r+0x34>
 8006620:	2140      	movs	r1, #64	; 0x40
 8006622:	f7ff ff3d 	bl	80064a0 <_malloc_r>
 8006626:	6020      	str	r0, [r4, #0]
 8006628:	6120      	str	r0, [r4, #16]
 800662a:	b928      	cbnz	r0, 8006638 <_svfiprintf_r+0x30>
 800662c:	230c      	movs	r3, #12
 800662e:	f8c8 3000 	str.w	r3, [r8]
 8006632:	f04f 30ff 	mov.w	r0, #4294967295
 8006636:	e0c8      	b.n	80067ca <_svfiprintf_r+0x1c2>
 8006638:	2340      	movs	r3, #64	; 0x40
 800663a:	6163      	str	r3, [r4, #20]
 800663c:	2300      	movs	r3, #0
 800663e:	9309      	str	r3, [sp, #36]	; 0x24
 8006640:	2320      	movs	r3, #32
 8006642:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006646:	2330      	movs	r3, #48	; 0x30
 8006648:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800664c:	9503      	str	r5, [sp, #12]
 800664e:	f04f 0b01 	mov.w	fp, #1
 8006652:	4637      	mov	r7, r6
 8006654:	463d      	mov	r5, r7
 8006656:	f815 3b01 	ldrb.w	r3, [r5], #1
 800665a:	b10b      	cbz	r3, 8006660 <_svfiprintf_r+0x58>
 800665c:	2b25      	cmp	r3, #37	; 0x25
 800665e:	d13e      	bne.n	80066de <_svfiprintf_r+0xd6>
 8006660:	ebb7 0a06 	subs.w	sl, r7, r6
 8006664:	d00b      	beq.n	800667e <_svfiprintf_r+0x76>
 8006666:	4653      	mov	r3, sl
 8006668:	4632      	mov	r2, r6
 800666a:	4621      	mov	r1, r4
 800666c:	4640      	mov	r0, r8
 800666e:	f7ff ff71 	bl	8006554 <__ssputs_r>
 8006672:	3001      	adds	r0, #1
 8006674:	f000 80a4 	beq.w	80067c0 <_svfiprintf_r+0x1b8>
 8006678:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800667a:	4453      	add	r3, sl
 800667c:	9309      	str	r3, [sp, #36]	; 0x24
 800667e:	783b      	ldrb	r3, [r7, #0]
 8006680:	2b00      	cmp	r3, #0
 8006682:	f000 809d 	beq.w	80067c0 <_svfiprintf_r+0x1b8>
 8006686:	2300      	movs	r3, #0
 8006688:	f04f 32ff 	mov.w	r2, #4294967295
 800668c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006690:	9304      	str	r3, [sp, #16]
 8006692:	9307      	str	r3, [sp, #28]
 8006694:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006698:	931a      	str	r3, [sp, #104]	; 0x68
 800669a:	462f      	mov	r7, r5
 800669c:	2205      	movs	r2, #5
 800669e:	f817 1b01 	ldrb.w	r1, [r7], #1
 80066a2:	4850      	ldr	r0, [pc, #320]	; (80067e4 <_svfiprintf_r+0x1dc>)
 80066a4:	f7f9 fd74 	bl	8000190 <memchr>
 80066a8:	9b04      	ldr	r3, [sp, #16]
 80066aa:	b9d0      	cbnz	r0, 80066e2 <_svfiprintf_r+0xda>
 80066ac:	06d9      	lsls	r1, r3, #27
 80066ae:	bf44      	itt	mi
 80066b0:	2220      	movmi	r2, #32
 80066b2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80066b6:	071a      	lsls	r2, r3, #28
 80066b8:	bf44      	itt	mi
 80066ba:	222b      	movmi	r2, #43	; 0x2b
 80066bc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80066c0:	782a      	ldrb	r2, [r5, #0]
 80066c2:	2a2a      	cmp	r2, #42	; 0x2a
 80066c4:	d015      	beq.n	80066f2 <_svfiprintf_r+0xea>
 80066c6:	9a07      	ldr	r2, [sp, #28]
 80066c8:	462f      	mov	r7, r5
 80066ca:	2000      	movs	r0, #0
 80066cc:	250a      	movs	r5, #10
 80066ce:	4639      	mov	r1, r7
 80066d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066d4:	3b30      	subs	r3, #48	; 0x30
 80066d6:	2b09      	cmp	r3, #9
 80066d8:	d94d      	bls.n	8006776 <_svfiprintf_r+0x16e>
 80066da:	b1b8      	cbz	r0, 800670c <_svfiprintf_r+0x104>
 80066dc:	e00f      	b.n	80066fe <_svfiprintf_r+0xf6>
 80066de:	462f      	mov	r7, r5
 80066e0:	e7b8      	b.n	8006654 <_svfiprintf_r+0x4c>
 80066e2:	4a40      	ldr	r2, [pc, #256]	; (80067e4 <_svfiprintf_r+0x1dc>)
 80066e4:	1a80      	subs	r0, r0, r2
 80066e6:	fa0b f000 	lsl.w	r0, fp, r0
 80066ea:	4318      	orrs	r0, r3
 80066ec:	9004      	str	r0, [sp, #16]
 80066ee:	463d      	mov	r5, r7
 80066f0:	e7d3      	b.n	800669a <_svfiprintf_r+0x92>
 80066f2:	9a03      	ldr	r2, [sp, #12]
 80066f4:	1d11      	adds	r1, r2, #4
 80066f6:	6812      	ldr	r2, [r2, #0]
 80066f8:	9103      	str	r1, [sp, #12]
 80066fa:	2a00      	cmp	r2, #0
 80066fc:	db01      	blt.n	8006702 <_svfiprintf_r+0xfa>
 80066fe:	9207      	str	r2, [sp, #28]
 8006700:	e004      	b.n	800670c <_svfiprintf_r+0x104>
 8006702:	4252      	negs	r2, r2
 8006704:	f043 0302 	orr.w	r3, r3, #2
 8006708:	9207      	str	r2, [sp, #28]
 800670a:	9304      	str	r3, [sp, #16]
 800670c:	783b      	ldrb	r3, [r7, #0]
 800670e:	2b2e      	cmp	r3, #46	; 0x2e
 8006710:	d10c      	bne.n	800672c <_svfiprintf_r+0x124>
 8006712:	787b      	ldrb	r3, [r7, #1]
 8006714:	2b2a      	cmp	r3, #42	; 0x2a
 8006716:	d133      	bne.n	8006780 <_svfiprintf_r+0x178>
 8006718:	9b03      	ldr	r3, [sp, #12]
 800671a:	1d1a      	adds	r2, r3, #4
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	9203      	str	r2, [sp, #12]
 8006720:	2b00      	cmp	r3, #0
 8006722:	bfb8      	it	lt
 8006724:	f04f 33ff 	movlt.w	r3, #4294967295
 8006728:	3702      	adds	r7, #2
 800672a:	9305      	str	r3, [sp, #20]
 800672c:	4d2e      	ldr	r5, [pc, #184]	; (80067e8 <_svfiprintf_r+0x1e0>)
 800672e:	7839      	ldrb	r1, [r7, #0]
 8006730:	2203      	movs	r2, #3
 8006732:	4628      	mov	r0, r5
 8006734:	f7f9 fd2c 	bl	8000190 <memchr>
 8006738:	b138      	cbz	r0, 800674a <_svfiprintf_r+0x142>
 800673a:	2340      	movs	r3, #64	; 0x40
 800673c:	1b40      	subs	r0, r0, r5
 800673e:	fa03 f000 	lsl.w	r0, r3, r0
 8006742:	9b04      	ldr	r3, [sp, #16]
 8006744:	4303      	orrs	r3, r0
 8006746:	3701      	adds	r7, #1
 8006748:	9304      	str	r3, [sp, #16]
 800674a:	7839      	ldrb	r1, [r7, #0]
 800674c:	4827      	ldr	r0, [pc, #156]	; (80067ec <_svfiprintf_r+0x1e4>)
 800674e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006752:	2206      	movs	r2, #6
 8006754:	1c7e      	adds	r6, r7, #1
 8006756:	f7f9 fd1b 	bl	8000190 <memchr>
 800675a:	2800      	cmp	r0, #0
 800675c:	d038      	beq.n	80067d0 <_svfiprintf_r+0x1c8>
 800675e:	4b24      	ldr	r3, [pc, #144]	; (80067f0 <_svfiprintf_r+0x1e8>)
 8006760:	bb13      	cbnz	r3, 80067a8 <_svfiprintf_r+0x1a0>
 8006762:	9b03      	ldr	r3, [sp, #12]
 8006764:	3307      	adds	r3, #7
 8006766:	f023 0307 	bic.w	r3, r3, #7
 800676a:	3308      	adds	r3, #8
 800676c:	9303      	str	r3, [sp, #12]
 800676e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006770:	444b      	add	r3, r9
 8006772:	9309      	str	r3, [sp, #36]	; 0x24
 8006774:	e76d      	b.n	8006652 <_svfiprintf_r+0x4a>
 8006776:	fb05 3202 	mla	r2, r5, r2, r3
 800677a:	2001      	movs	r0, #1
 800677c:	460f      	mov	r7, r1
 800677e:	e7a6      	b.n	80066ce <_svfiprintf_r+0xc6>
 8006780:	2300      	movs	r3, #0
 8006782:	3701      	adds	r7, #1
 8006784:	9305      	str	r3, [sp, #20]
 8006786:	4619      	mov	r1, r3
 8006788:	250a      	movs	r5, #10
 800678a:	4638      	mov	r0, r7
 800678c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006790:	3a30      	subs	r2, #48	; 0x30
 8006792:	2a09      	cmp	r2, #9
 8006794:	d903      	bls.n	800679e <_svfiprintf_r+0x196>
 8006796:	2b00      	cmp	r3, #0
 8006798:	d0c8      	beq.n	800672c <_svfiprintf_r+0x124>
 800679a:	9105      	str	r1, [sp, #20]
 800679c:	e7c6      	b.n	800672c <_svfiprintf_r+0x124>
 800679e:	fb05 2101 	mla	r1, r5, r1, r2
 80067a2:	2301      	movs	r3, #1
 80067a4:	4607      	mov	r7, r0
 80067a6:	e7f0      	b.n	800678a <_svfiprintf_r+0x182>
 80067a8:	ab03      	add	r3, sp, #12
 80067aa:	9300      	str	r3, [sp, #0]
 80067ac:	4622      	mov	r2, r4
 80067ae:	4b11      	ldr	r3, [pc, #68]	; (80067f4 <_svfiprintf_r+0x1ec>)
 80067b0:	a904      	add	r1, sp, #16
 80067b2:	4640      	mov	r0, r8
 80067b4:	f3af 8000 	nop.w
 80067b8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80067bc:	4681      	mov	r9, r0
 80067be:	d1d6      	bne.n	800676e <_svfiprintf_r+0x166>
 80067c0:	89a3      	ldrh	r3, [r4, #12]
 80067c2:	065b      	lsls	r3, r3, #25
 80067c4:	f53f af35 	bmi.w	8006632 <_svfiprintf_r+0x2a>
 80067c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80067ca:	b01d      	add	sp, #116	; 0x74
 80067cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067d0:	ab03      	add	r3, sp, #12
 80067d2:	9300      	str	r3, [sp, #0]
 80067d4:	4622      	mov	r2, r4
 80067d6:	4b07      	ldr	r3, [pc, #28]	; (80067f4 <_svfiprintf_r+0x1ec>)
 80067d8:	a904      	add	r1, sp, #16
 80067da:	4640      	mov	r0, r8
 80067dc:	f000 f9c2 	bl	8006b64 <_printf_i>
 80067e0:	e7ea      	b.n	80067b8 <_svfiprintf_r+0x1b0>
 80067e2:	bf00      	nop
 80067e4:	08008954 	.word	0x08008954
 80067e8:	0800895a 	.word	0x0800895a
 80067ec:	0800895e 	.word	0x0800895e
 80067f0:	00000000 	.word	0x00000000
 80067f4:	08006555 	.word	0x08006555

080067f8 <__sfputc_r>:
 80067f8:	6893      	ldr	r3, [r2, #8]
 80067fa:	3b01      	subs	r3, #1
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	b410      	push	{r4}
 8006800:	6093      	str	r3, [r2, #8]
 8006802:	da08      	bge.n	8006816 <__sfputc_r+0x1e>
 8006804:	6994      	ldr	r4, [r2, #24]
 8006806:	42a3      	cmp	r3, r4
 8006808:	db01      	blt.n	800680e <__sfputc_r+0x16>
 800680a:	290a      	cmp	r1, #10
 800680c:	d103      	bne.n	8006816 <__sfputc_r+0x1e>
 800680e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006812:	f7ff bb59 	b.w	8005ec8 <__swbuf_r>
 8006816:	6813      	ldr	r3, [r2, #0]
 8006818:	1c58      	adds	r0, r3, #1
 800681a:	6010      	str	r0, [r2, #0]
 800681c:	7019      	strb	r1, [r3, #0]
 800681e:	4608      	mov	r0, r1
 8006820:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006824:	4770      	bx	lr

08006826 <__sfputs_r>:
 8006826:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006828:	4606      	mov	r6, r0
 800682a:	460f      	mov	r7, r1
 800682c:	4614      	mov	r4, r2
 800682e:	18d5      	adds	r5, r2, r3
 8006830:	42ac      	cmp	r4, r5
 8006832:	d101      	bne.n	8006838 <__sfputs_r+0x12>
 8006834:	2000      	movs	r0, #0
 8006836:	e007      	b.n	8006848 <__sfputs_r+0x22>
 8006838:	463a      	mov	r2, r7
 800683a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800683e:	4630      	mov	r0, r6
 8006840:	f7ff ffda 	bl	80067f8 <__sfputc_r>
 8006844:	1c43      	adds	r3, r0, #1
 8006846:	d1f3      	bne.n	8006830 <__sfputs_r+0xa>
 8006848:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800684c <_vfiprintf_r>:
 800684c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006850:	460c      	mov	r4, r1
 8006852:	b09d      	sub	sp, #116	; 0x74
 8006854:	4617      	mov	r7, r2
 8006856:	461d      	mov	r5, r3
 8006858:	4606      	mov	r6, r0
 800685a:	b118      	cbz	r0, 8006864 <_vfiprintf_r+0x18>
 800685c:	6983      	ldr	r3, [r0, #24]
 800685e:	b90b      	cbnz	r3, 8006864 <_vfiprintf_r+0x18>
 8006860:	f7ff fce2 	bl	8006228 <__sinit>
 8006864:	4b7c      	ldr	r3, [pc, #496]	; (8006a58 <_vfiprintf_r+0x20c>)
 8006866:	429c      	cmp	r4, r3
 8006868:	d158      	bne.n	800691c <_vfiprintf_r+0xd0>
 800686a:	6874      	ldr	r4, [r6, #4]
 800686c:	89a3      	ldrh	r3, [r4, #12]
 800686e:	0718      	lsls	r0, r3, #28
 8006870:	d55e      	bpl.n	8006930 <_vfiprintf_r+0xe4>
 8006872:	6923      	ldr	r3, [r4, #16]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d05b      	beq.n	8006930 <_vfiprintf_r+0xe4>
 8006878:	2300      	movs	r3, #0
 800687a:	9309      	str	r3, [sp, #36]	; 0x24
 800687c:	2320      	movs	r3, #32
 800687e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006882:	2330      	movs	r3, #48	; 0x30
 8006884:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006888:	9503      	str	r5, [sp, #12]
 800688a:	f04f 0b01 	mov.w	fp, #1
 800688e:	46b8      	mov	r8, r7
 8006890:	4645      	mov	r5, r8
 8006892:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006896:	b10b      	cbz	r3, 800689c <_vfiprintf_r+0x50>
 8006898:	2b25      	cmp	r3, #37	; 0x25
 800689a:	d154      	bne.n	8006946 <_vfiprintf_r+0xfa>
 800689c:	ebb8 0a07 	subs.w	sl, r8, r7
 80068a0:	d00b      	beq.n	80068ba <_vfiprintf_r+0x6e>
 80068a2:	4653      	mov	r3, sl
 80068a4:	463a      	mov	r2, r7
 80068a6:	4621      	mov	r1, r4
 80068a8:	4630      	mov	r0, r6
 80068aa:	f7ff ffbc 	bl	8006826 <__sfputs_r>
 80068ae:	3001      	adds	r0, #1
 80068b0:	f000 80c2 	beq.w	8006a38 <_vfiprintf_r+0x1ec>
 80068b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068b6:	4453      	add	r3, sl
 80068b8:	9309      	str	r3, [sp, #36]	; 0x24
 80068ba:	f898 3000 	ldrb.w	r3, [r8]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	f000 80ba 	beq.w	8006a38 <_vfiprintf_r+0x1ec>
 80068c4:	2300      	movs	r3, #0
 80068c6:	f04f 32ff 	mov.w	r2, #4294967295
 80068ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80068ce:	9304      	str	r3, [sp, #16]
 80068d0:	9307      	str	r3, [sp, #28]
 80068d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80068d6:	931a      	str	r3, [sp, #104]	; 0x68
 80068d8:	46a8      	mov	r8, r5
 80068da:	2205      	movs	r2, #5
 80068dc:	f818 1b01 	ldrb.w	r1, [r8], #1
 80068e0:	485e      	ldr	r0, [pc, #376]	; (8006a5c <_vfiprintf_r+0x210>)
 80068e2:	f7f9 fc55 	bl	8000190 <memchr>
 80068e6:	9b04      	ldr	r3, [sp, #16]
 80068e8:	bb78      	cbnz	r0, 800694a <_vfiprintf_r+0xfe>
 80068ea:	06d9      	lsls	r1, r3, #27
 80068ec:	bf44      	itt	mi
 80068ee:	2220      	movmi	r2, #32
 80068f0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80068f4:	071a      	lsls	r2, r3, #28
 80068f6:	bf44      	itt	mi
 80068f8:	222b      	movmi	r2, #43	; 0x2b
 80068fa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80068fe:	782a      	ldrb	r2, [r5, #0]
 8006900:	2a2a      	cmp	r2, #42	; 0x2a
 8006902:	d02a      	beq.n	800695a <_vfiprintf_r+0x10e>
 8006904:	9a07      	ldr	r2, [sp, #28]
 8006906:	46a8      	mov	r8, r5
 8006908:	2000      	movs	r0, #0
 800690a:	250a      	movs	r5, #10
 800690c:	4641      	mov	r1, r8
 800690e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006912:	3b30      	subs	r3, #48	; 0x30
 8006914:	2b09      	cmp	r3, #9
 8006916:	d969      	bls.n	80069ec <_vfiprintf_r+0x1a0>
 8006918:	b360      	cbz	r0, 8006974 <_vfiprintf_r+0x128>
 800691a:	e024      	b.n	8006966 <_vfiprintf_r+0x11a>
 800691c:	4b50      	ldr	r3, [pc, #320]	; (8006a60 <_vfiprintf_r+0x214>)
 800691e:	429c      	cmp	r4, r3
 8006920:	d101      	bne.n	8006926 <_vfiprintf_r+0xda>
 8006922:	68b4      	ldr	r4, [r6, #8]
 8006924:	e7a2      	b.n	800686c <_vfiprintf_r+0x20>
 8006926:	4b4f      	ldr	r3, [pc, #316]	; (8006a64 <_vfiprintf_r+0x218>)
 8006928:	429c      	cmp	r4, r3
 800692a:	bf08      	it	eq
 800692c:	68f4      	ldreq	r4, [r6, #12]
 800692e:	e79d      	b.n	800686c <_vfiprintf_r+0x20>
 8006930:	4621      	mov	r1, r4
 8006932:	4630      	mov	r0, r6
 8006934:	f7ff fb1a 	bl	8005f6c <__swsetup_r>
 8006938:	2800      	cmp	r0, #0
 800693a:	d09d      	beq.n	8006878 <_vfiprintf_r+0x2c>
 800693c:	f04f 30ff 	mov.w	r0, #4294967295
 8006940:	b01d      	add	sp, #116	; 0x74
 8006942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006946:	46a8      	mov	r8, r5
 8006948:	e7a2      	b.n	8006890 <_vfiprintf_r+0x44>
 800694a:	4a44      	ldr	r2, [pc, #272]	; (8006a5c <_vfiprintf_r+0x210>)
 800694c:	1a80      	subs	r0, r0, r2
 800694e:	fa0b f000 	lsl.w	r0, fp, r0
 8006952:	4318      	orrs	r0, r3
 8006954:	9004      	str	r0, [sp, #16]
 8006956:	4645      	mov	r5, r8
 8006958:	e7be      	b.n	80068d8 <_vfiprintf_r+0x8c>
 800695a:	9a03      	ldr	r2, [sp, #12]
 800695c:	1d11      	adds	r1, r2, #4
 800695e:	6812      	ldr	r2, [r2, #0]
 8006960:	9103      	str	r1, [sp, #12]
 8006962:	2a00      	cmp	r2, #0
 8006964:	db01      	blt.n	800696a <_vfiprintf_r+0x11e>
 8006966:	9207      	str	r2, [sp, #28]
 8006968:	e004      	b.n	8006974 <_vfiprintf_r+0x128>
 800696a:	4252      	negs	r2, r2
 800696c:	f043 0302 	orr.w	r3, r3, #2
 8006970:	9207      	str	r2, [sp, #28]
 8006972:	9304      	str	r3, [sp, #16]
 8006974:	f898 3000 	ldrb.w	r3, [r8]
 8006978:	2b2e      	cmp	r3, #46	; 0x2e
 800697a:	d10e      	bne.n	800699a <_vfiprintf_r+0x14e>
 800697c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006980:	2b2a      	cmp	r3, #42	; 0x2a
 8006982:	d138      	bne.n	80069f6 <_vfiprintf_r+0x1aa>
 8006984:	9b03      	ldr	r3, [sp, #12]
 8006986:	1d1a      	adds	r2, r3, #4
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	9203      	str	r2, [sp, #12]
 800698c:	2b00      	cmp	r3, #0
 800698e:	bfb8      	it	lt
 8006990:	f04f 33ff 	movlt.w	r3, #4294967295
 8006994:	f108 0802 	add.w	r8, r8, #2
 8006998:	9305      	str	r3, [sp, #20]
 800699a:	4d33      	ldr	r5, [pc, #204]	; (8006a68 <_vfiprintf_r+0x21c>)
 800699c:	f898 1000 	ldrb.w	r1, [r8]
 80069a0:	2203      	movs	r2, #3
 80069a2:	4628      	mov	r0, r5
 80069a4:	f7f9 fbf4 	bl	8000190 <memchr>
 80069a8:	b140      	cbz	r0, 80069bc <_vfiprintf_r+0x170>
 80069aa:	2340      	movs	r3, #64	; 0x40
 80069ac:	1b40      	subs	r0, r0, r5
 80069ae:	fa03 f000 	lsl.w	r0, r3, r0
 80069b2:	9b04      	ldr	r3, [sp, #16]
 80069b4:	4303      	orrs	r3, r0
 80069b6:	f108 0801 	add.w	r8, r8, #1
 80069ba:	9304      	str	r3, [sp, #16]
 80069bc:	f898 1000 	ldrb.w	r1, [r8]
 80069c0:	482a      	ldr	r0, [pc, #168]	; (8006a6c <_vfiprintf_r+0x220>)
 80069c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80069c6:	2206      	movs	r2, #6
 80069c8:	f108 0701 	add.w	r7, r8, #1
 80069cc:	f7f9 fbe0 	bl	8000190 <memchr>
 80069d0:	2800      	cmp	r0, #0
 80069d2:	d037      	beq.n	8006a44 <_vfiprintf_r+0x1f8>
 80069d4:	4b26      	ldr	r3, [pc, #152]	; (8006a70 <_vfiprintf_r+0x224>)
 80069d6:	bb1b      	cbnz	r3, 8006a20 <_vfiprintf_r+0x1d4>
 80069d8:	9b03      	ldr	r3, [sp, #12]
 80069da:	3307      	adds	r3, #7
 80069dc:	f023 0307 	bic.w	r3, r3, #7
 80069e0:	3308      	adds	r3, #8
 80069e2:	9303      	str	r3, [sp, #12]
 80069e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069e6:	444b      	add	r3, r9
 80069e8:	9309      	str	r3, [sp, #36]	; 0x24
 80069ea:	e750      	b.n	800688e <_vfiprintf_r+0x42>
 80069ec:	fb05 3202 	mla	r2, r5, r2, r3
 80069f0:	2001      	movs	r0, #1
 80069f2:	4688      	mov	r8, r1
 80069f4:	e78a      	b.n	800690c <_vfiprintf_r+0xc0>
 80069f6:	2300      	movs	r3, #0
 80069f8:	f108 0801 	add.w	r8, r8, #1
 80069fc:	9305      	str	r3, [sp, #20]
 80069fe:	4619      	mov	r1, r3
 8006a00:	250a      	movs	r5, #10
 8006a02:	4640      	mov	r0, r8
 8006a04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a08:	3a30      	subs	r2, #48	; 0x30
 8006a0a:	2a09      	cmp	r2, #9
 8006a0c:	d903      	bls.n	8006a16 <_vfiprintf_r+0x1ca>
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d0c3      	beq.n	800699a <_vfiprintf_r+0x14e>
 8006a12:	9105      	str	r1, [sp, #20]
 8006a14:	e7c1      	b.n	800699a <_vfiprintf_r+0x14e>
 8006a16:	fb05 2101 	mla	r1, r5, r1, r2
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	4680      	mov	r8, r0
 8006a1e:	e7f0      	b.n	8006a02 <_vfiprintf_r+0x1b6>
 8006a20:	ab03      	add	r3, sp, #12
 8006a22:	9300      	str	r3, [sp, #0]
 8006a24:	4622      	mov	r2, r4
 8006a26:	4b13      	ldr	r3, [pc, #76]	; (8006a74 <_vfiprintf_r+0x228>)
 8006a28:	a904      	add	r1, sp, #16
 8006a2a:	4630      	mov	r0, r6
 8006a2c:	f3af 8000 	nop.w
 8006a30:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006a34:	4681      	mov	r9, r0
 8006a36:	d1d5      	bne.n	80069e4 <_vfiprintf_r+0x198>
 8006a38:	89a3      	ldrh	r3, [r4, #12]
 8006a3a:	065b      	lsls	r3, r3, #25
 8006a3c:	f53f af7e 	bmi.w	800693c <_vfiprintf_r+0xf0>
 8006a40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a42:	e77d      	b.n	8006940 <_vfiprintf_r+0xf4>
 8006a44:	ab03      	add	r3, sp, #12
 8006a46:	9300      	str	r3, [sp, #0]
 8006a48:	4622      	mov	r2, r4
 8006a4a:	4b0a      	ldr	r3, [pc, #40]	; (8006a74 <_vfiprintf_r+0x228>)
 8006a4c:	a904      	add	r1, sp, #16
 8006a4e:	4630      	mov	r0, r6
 8006a50:	f000 f888 	bl	8006b64 <_printf_i>
 8006a54:	e7ec      	b.n	8006a30 <_vfiprintf_r+0x1e4>
 8006a56:	bf00      	nop
 8006a58:	08008914 	.word	0x08008914
 8006a5c:	08008954 	.word	0x08008954
 8006a60:	08008934 	.word	0x08008934
 8006a64:	080088f4 	.word	0x080088f4
 8006a68:	0800895a 	.word	0x0800895a
 8006a6c:	0800895e 	.word	0x0800895e
 8006a70:	00000000 	.word	0x00000000
 8006a74:	08006827 	.word	0x08006827

08006a78 <_printf_common>:
 8006a78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a7c:	4691      	mov	r9, r2
 8006a7e:	461f      	mov	r7, r3
 8006a80:	688a      	ldr	r2, [r1, #8]
 8006a82:	690b      	ldr	r3, [r1, #16]
 8006a84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	bfb8      	it	lt
 8006a8c:	4613      	movlt	r3, r2
 8006a8e:	f8c9 3000 	str.w	r3, [r9]
 8006a92:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006a96:	4606      	mov	r6, r0
 8006a98:	460c      	mov	r4, r1
 8006a9a:	b112      	cbz	r2, 8006aa2 <_printf_common+0x2a>
 8006a9c:	3301      	adds	r3, #1
 8006a9e:	f8c9 3000 	str.w	r3, [r9]
 8006aa2:	6823      	ldr	r3, [r4, #0]
 8006aa4:	0699      	lsls	r1, r3, #26
 8006aa6:	bf42      	ittt	mi
 8006aa8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006aac:	3302      	addmi	r3, #2
 8006aae:	f8c9 3000 	strmi.w	r3, [r9]
 8006ab2:	6825      	ldr	r5, [r4, #0]
 8006ab4:	f015 0506 	ands.w	r5, r5, #6
 8006ab8:	d107      	bne.n	8006aca <_printf_common+0x52>
 8006aba:	f104 0a19 	add.w	sl, r4, #25
 8006abe:	68e3      	ldr	r3, [r4, #12]
 8006ac0:	f8d9 2000 	ldr.w	r2, [r9]
 8006ac4:	1a9b      	subs	r3, r3, r2
 8006ac6:	42ab      	cmp	r3, r5
 8006ac8:	dc28      	bgt.n	8006b1c <_printf_common+0xa4>
 8006aca:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006ace:	6822      	ldr	r2, [r4, #0]
 8006ad0:	3300      	adds	r3, #0
 8006ad2:	bf18      	it	ne
 8006ad4:	2301      	movne	r3, #1
 8006ad6:	0692      	lsls	r2, r2, #26
 8006ad8:	d42d      	bmi.n	8006b36 <_printf_common+0xbe>
 8006ada:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ade:	4639      	mov	r1, r7
 8006ae0:	4630      	mov	r0, r6
 8006ae2:	47c0      	blx	r8
 8006ae4:	3001      	adds	r0, #1
 8006ae6:	d020      	beq.n	8006b2a <_printf_common+0xb2>
 8006ae8:	6823      	ldr	r3, [r4, #0]
 8006aea:	68e5      	ldr	r5, [r4, #12]
 8006aec:	f8d9 2000 	ldr.w	r2, [r9]
 8006af0:	f003 0306 	and.w	r3, r3, #6
 8006af4:	2b04      	cmp	r3, #4
 8006af6:	bf08      	it	eq
 8006af8:	1aad      	subeq	r5, r5, r2
 8006afa:	68a3      	ldr	r3, [r4, #8]
 8006afc:	6922      	ldr	r2, [r4, #16]
 8006afe:	bf0c      	ite	eq
 8006b00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b04:	2500      	movne	r5, #0
 8006b06:	4293      	cmp	r3, r2
 8006b08:	bfc4      	itt	gt
 8006b0a:	1a9b      	subgt	r3, r3, r2
 8006b0c:	18ed      	addgt	r5, r5, r3
 8006b0e:	f04f 0900 	mov.w	r9, #0
 8006b12:	341a      	adds	r4, #26
 8006b14:	454d      	cmp	r5, r9
 8006b16:	d11a      	bne.n	8006b4e <_printf_common+0xd6>
 8006b18:	2000      	movs	r0, #0
 8006b1a:	e008      	b.n	8006b2e <_printf_common+0xb6>
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	4652      	mov	r2, sl
 8006b20:	4639      	mov	r1, r7
 8006b22:	4630      	mov	r0, r6
 8006b24:	47c0      	blx	r8
 8006b26:	3001      	adds	r0, #1
 8006b28:	d103      	bne.n	8006b32 <_printf_common+0xba>
 8006b2a:	f04f 30ff 	mov.w	r0, #4294967295
 8006b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b32:	3501      	adds	r5, #1
 8006b34:	e7c3      	b.n	8006abe <_printf_common+0x46>
 8006b36:	18e1      	adds	r1, r4, r3
 8006b38:	1c5a      	adds	r2, r3, #1
 8006b3a:	2030      	movs	r0, #48	; 0x30
 8006b3c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b40:	4422      	add	r2, r4
 8006b42:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b46:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b4a:	3302      	adds	r3, #2
 8006b4c:	e7c5      	b.n	8006ada <_printf_common+0x62>
 8006b4e:	2301      	movs	r3, #1
 8006b50:	4622      	mov	r2, r4
 8006b52:	4639      	mov	r1, r7
 8006b54:	4630      	mov	r0, r6
 8006b56:	47c0      	blx	r8
 8006b58:	3001      	adds	r0, #1
 8006b5a:	d0e6      	beq.n	8006b2a <_printf_common+0xb2>
 8006b5c:	f109 0901 	add.w	r9, r9, #1
 8006b60:	e7d8      	b.n	8006b14 <_printf_common+0x9c>
	...

08006b64 <_printf_i>:
 8006b64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006b68:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006b6c:	460c      	mov	r4, r1
 8006b6e:	7e09      	ldrb	r1, [r1, #24]
 8006b70:	b085      	sub	sp, #20
 8006b72:	296e      	cmp	r1, #110	; 0x6e
 8006b74:	4617      	mov	r7, r2
 8006b76:	4606      	mov	r6, r0
 8006b78:	4698      	mov	r8, r3
 8006b7a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006b7c:	f000 80b3 	beq.w	8006ce6 <_printf_i+0x182>
 8006b80:	d822      	bhi.n	8006bc8 <_printf_i+0x64>
 8006b82:	2963      	cmp	r1, #99	; 0x63
 8006b84:	d036      	beq.n	8006bf4 <_printf_i+0x90>
 8006b86:	d80a      	bhi.n	8006b9e <_printf_i+0x3a>
 8006b88:	2900      	cmp	r1, #0
 8006b8a:	f000 80b9 	beq.w	8006d00 <_printf_i+0x19c>
 8006b8e:	2958      	cmp	r1, #88	; 0x58
 8006b90:	f000 8083 	beq.w	8006c9a <_printf_i+0x136>
 8006b94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b98:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006b9c:	e032      	b.n	8006c04 <_printf_i+0xa0>
 8006b9e:	2964      	cmp	r1, #100	; 0x64
 8006ba0:	d001      	beq.n	8006ba6 <_printf_i+0x42>
 8006ba2:	2969      	cmp	r1, #105	; 0x69
 8006ba4:	d1f6      	bne.n	8006b94 <_printf_i+0x30>
 8006ba6:	6820      	ldr	r0, [r4, #0]
 8006ba8:	6813      	ldr	r3, [r2, #0]
 8006baa:	0605      	lsls	r5, r0, #24
 8006bac:	f103 0104 	add.w	r1, r3, #4
 8006bb0:	d52a      	bpl.n	8006c08 <_printf_i+0xa4>
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	6011      	str	r1, [r2, #0]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	da03      	bge.n	8006bc2 <_printf_i+0x5e>
 8006bba:	222d      	movs	r2, #45	; 0x2d
 8006bbc:	425b      	negs	r3, r3
 8006bbe:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006bc2:	486f      	ldr	r0, [pc, #444]	; (8006d80 <_printf_i+0x21c>)
 8006bc4:	220a      	movs	r2, #10
 8006bc6:	e039      	b.n	8006c3c <_printf_i+0xd8>
 8006bc8:	2973      	cmp	r1, #115	; 0x73
 8006bca:	f000 809d 	beq.w	8006d08 <_printf_i+0x1a4>
 8006bce:	d808      	bhi.n	8006be2 <_printf_i+0x7e>
 8006bd0:	296f      	cmp	r1, #111	; 0x6f
 8006bd2:	d020      	beq.n	8006c16 <_printf_i+0xb2>
 8006bd4:	2970      	cmp	r1, #112	; 0x70
 8006bd6:	d1dd      	bne.n	8006b94 <_printf_i+0x30>
 8006bd8:	6823      	ldr	r3, [r4, #0]
 8006bda:	f043 0320 	orr.w	r3, r3, #32
 8006bde:	6023      	str	r3, [r4, #0]
 8006be0:	e003      	b.n	8006bea <_printf_i+0x86>
 8006be2:	2975      	cmp	r1, #117	; 0x75
 8006be4:	d017      	beq.n	8006c16 <_printf_i+0xb2>
 8006be6:	2978      	cmp	r1, #120	; 0x78
 8006be8:	d1d4      	bne.n	8006b94 <_printf_i+0x30>
 8006bea:	2378      	movs	r3, #120	; 0x78
 8006bec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006bf0:	4864      	ldr	r0, [pc, #400]	; (8006d84 <_printf_i+0x220>)
 8006bf2:	e055      	b.n	8006ca0 <_printf_i+0x13c>
 8006bf4:	6813      	ldr	r3, [r2, #0]
 8006bf6:	1d19      	adds	r1, r3, #4
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	6011      	str	r1, [r2, #0]
 8006bfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c04:	2301      	movs	r3, #1
 8006c06:	e08c      	b.n	8006d22 <_printf_i+0x1be>
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	6011      	str	r1, [r2, #0]
 8006c0c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006c10:	bf18      	it	ne
 8006c12:	b21b      	sxthne	r3, r3
 8006c14:	e7cf      	b.n	8006bb6 <_printf_i+0x52>
 8006c16:	6813      	ldr	r3, [r2, #0]
 8006c18:	6825      	ldr	r5, [r4, #0]
 8006c1a:	1d18      	adds	r0, r3, #4
 8006c1c:	6010      	str	r0, [r2, #0]
 8006c1e:	0628      	lsls	r0, r5, #24
 8006c20:	d501      	bpl.n	8006c26 <_printf_i+0xc2>
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	e002      	b.n	8006c2c <_printf_i+0xc8>
 8006c26:	0668      	lsls	r0, r5, #25
 8006c28:	d5fb      	bpl.n	8006c22 <_printf_i+0xbe>
 8006c2a:	881b      	ldrh	r3, [r3, #0]
 8006c2c:	4854      	ldr	r0, [pc, #336]	; (8006d80 <_printf_i+0x21c>)
 8006c2e:	296f      	cmp	r1, #111	; 0x6f
 8006c30:	bf14      	ite	ne
 8006c32:	220a      	movne	r2, #10
 8006c34:	2208      	moveq	r2, #8
 8006c36:	2100      	movs	r1, #0
 8006c38:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c3c:	6865      	ldr	r5, [r4, #4]
 8006c3e:	60a5      	str	r5, [r4, #8]
 8006c40:	2d00      	cmp	r5, #0
 8006c42:	f2c0 8095 	blt.w	8006d70 <_printf_i+0x20c>
 8006c46:	6821      	ldr	r1, [r4, #0]
 8006c48:	f021 0104 	bic.w	r1, r1, #4
 8006c4c:	6021      	str	r1, [r4, #0]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d13d      	bne.n	8006cce <_printf_i+0x16a>
 8006c52:	2d00      	cmp	r5, #0
 8006c54:	f040 808e 	bne.w	8006d74 <_printf_i+0x210>
 8006c58:	4665      	mov	r5, ip
 8006c5a:	2a08      	cmp	r2, #8
 8006c5c:	d10b      	bne.n	8006c76 <_printf_i+0x112>
 8006c5e:	6823      	ldr	r3, [r4, #0]
 8006c60:	07db      	lsls	r3, r3, #31
 8006c62:	d508      	bpl.n	8006c76 <_printf_i+0x112>
 8006c64:	6923      	ldr	r3, [r4, #16]
 8006c66:	6862      	ldr	r2, [r4, #4]
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	bfde      	ittt	le
 8006c6c:	2330      	movle	r3, #48	; 0x30
 8006c6e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006c72:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006c76:	ebac 0305 	sub.w	r3, ip, r5
 8006c7a:	6123      	str	r3, [r4, #16]
 8006c7c:	f8cd 8000 	str.w	r8, [sp]
 8006c80:	463b      	mov	r3, r7
 8006c82:	aa03      	add	r2, sp, #12
 8006c84:	4621      	mov	r1, r4
 8006c86:	4630      	mov	r0, r6
 8006c88:	f7ff fef6 	bl	8006a78 <_printf_common>
 8006c8c:	3001      	adds	r0, #1
 8006c8e:	d14d      	bne.n	8006d2c <_printf_i+0x1c8>
 8006c90:	f04f 30ff 	mov.w	r0, #4294967295
 8006c94:	b005      	add	sp, #20
 8006c96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006c9a:	4839      	ldr	r0, [pc, #228]	; (8006d80 <_printf_i+0x21c>)
 8006c9c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006ca0:	6813      	ldr	r3, [r2, #0]
 8006ca2:	6821      	ldr	r1, [r4, #0]
 8006ca4:	1d1d      	adds	r5, r3, #4
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	6015      	str	r5, [r2, #0]
 8006caa:	060a      	lsls	r2, r1, #24
 8006cac:	d50b      	bpl.n	8006cc6 <_printf_i+0x162>
 8006cae:	07ca      	lsls	r2, r1, #31
 8006cb0:	bf44      	itt	mi
 8006cb2:	f041 0120 	orrmi.w	r1, r1, #32
 8006cb6:	6021      	strmi	r1, [r4, #0]
 8006cb8:	b91b      	cbnz	r3, 8006cc2 <_printf_i+0x15e>
 8006cba:	6822      	ldr	r2, [r4, #0]
 8006cbc:	f022 0220 	bic.w	r2, r2, #32
 8006cc0:	6022      	str	r2, [r4, #0]
 8006cc2:	2210      	movs	r2, #16
 8006cc4:	e7b7      	b.n	8006c36 <_printf_i+0xd2>
 8006cc6:	064d      	lsls	r5, r1, #25
 8006cc8:	bf48      	it	mi
 8006cca:	b29b      	uxthmi	r3, r3
 8006ccc:	e7ef      	b.n	8006cae <_printf_i+0x14a>
 8006cce:	4665      	mov	r5, ip
 8006cd0:	fbb3 f1f2 	udiv	r1, r3, r2
 8006cd4:	fb02 3311 	mls	r3, r2, r1, r3
 8006cd8:	5cc3      	ldrb	r3, [r0, r3]
 8006cda:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006cde:	460b      	mov	r3, r1
 8006ce0:	2900      	cmp	r1, #0
 8006ce2:	d1f5      	bne.n	8006cd0 <_printf_i+0x16c>
 8006ce4:	e7b9      	b.n	8006c5a <_printf_i+0xf6>
 8006ce6:	6813      	ldr	r3, [r2, #0]
 8006ce8:	6825      	ldr	r5, [r4, #0]
 8006cea:	6961      	ldr	r1, [r4, #20]
 8006cec:	1d18      	adds	r0, r3, #4
 8006cee:	6010      	str	r0, [r2, #0]
 8006cf0:	0628      	lsls	r0, r5, #24
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	d501      	bpl.n	8006cfa <_printf_i+0x196>
 8006cf6:	6019      	str	r1, [r3, #0]
 8006cf8:	e002      	b.n	8006d00 <_printf_i+0x19c>
 8006cfa:	066a      	lsls	r2, r5, #25
 8006cfc:	d5fb      	bpl.n	8006cf6 <_printf_i+0x192>
 8006cfe:	8019      	strh	r1, [r3, #0]
 8006d00:	2300      	movs	r3, #0
 8006d02:	6123      	str	r3, [r4, #16]
 8006d04:	4665      	mov	r5, ip
 8006d06:	e7b9      	b.n	8006c7c <_printf_i+0x118>
 8006d08:	6813      	ldr	r3, [r2, #0]
 8006d0a:	1d19      	adds	r1, r3, #4
 8006d0c:	6011      	str	r1, [r2, #0]
 8006d0e:	681d      	ldr	r5, [r3, #0]
 8006d10:	6862      	ldr	r2, [r4, #4]
 8006d12:	2100      	movs	r1, #0
 8006d14:	4628      	mov	r0, r5
 8006d16:	f7f9 fa3b 	bl	8000190 <memchr>
 8006d1a:	b108      	cbz	r0, 8006d20 <_printf_i+0x1bc>
 8006d1c:	1b40      	subs	r0, r0, r5
 8006d1e:	6060      	str	r0, [r4, #4]
 8006d20:	6863      	ldr	r3, [r4, #4]
 8006d22:	6123      	str	r3, [r4, #16]
 8006d24:	2300      	movs	r3, #0
 8006d26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d2a:	e7a7      	b.n	8006c7c <_printf_i+0x118>
 8006d2c:	6923      	ldr	r3, [r4, #16]
 8006d2e:	462a      	mov	r2, r5
 8006d30:	4639      	mov	r1, r7
 8006d32:	4630      	mov	r0, r6
 8006d34:	47c0      	blx	r8
 8006d36:	3001      	adds	r0, #1
 8006d38:	d0aa      	beq.n	8006c90 <_printf_i+0x12c>
 8006d3a:	6823      	ldr	r3, [r4, #0]
 8006d3c:	079b      	lsls	r3, r3, #30
 8006d3e:	d413      	bmi.n	8006d68 <_printf_i+0x204>
 8006d40:	68e0      	ldr	r0, [r4, #12]
 8006d42:	9b03      	ldr	r3, [sp, #12]
 8006d44:	4298      	cmp	r0, r3
 8006d46:	bfb8      	it	lt
 8006d48:	4618      	movlt	r0, r3
 8006d4a:	e7a3      	b.n	8006c94 <_printf_i+0x130>
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	464a      	mov	r2, r9
 8006d50:	4639      	mov	r1, r7
 8006d52:	4630      	mov	r0, r6
 8006d54:	47c0      	blx	r8
 8006d56:	3001      	adds	r0, #1
 8006d58:	d09a      	beq.n	8006c90 <_printf_i+0x12c>
 8006d5a:	3501      	adds	r5, #1
 8006d5c:	68e3      	ldr	r3, [r4, #12]
 8006d5e:	9a03      	ldr	r2, [sp, #12]
 8006d60:	1a9b      	subs	r3, r3, r2
 8006d62:	42ab      	cmp	r3, r5
 8006d64:	dcf2      	bgt.n	8006d4c <_printf_i+0x1e8>
 8006d66:	e7eb      	b.n	8006d40 <_printf_i+0x1dc>
 8006d68:	2500      	movs	r5, #0
 8006d6a:	f104 0919 	add.w	r9, r4, #25
 8006d6e:	e7f5      	b.n	8006d5c <_printf_i+0x1f8>
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d1ac      	bne.n	8006cce <_printf_i+0x16a>
 8006d74:	7803      	ldrb	r3, [r0, #0]
 8006d76:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d7a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d7e:	e76c      	b.n	8006c5a <_printf_i+0xf6>
 8006d80:	08008965 	.word	0x08008965
 8006d84:	08008976 	.word	0x08008976

08006d88 <_putc_r>:
 8006d88:	b570      	push	{r4, r5, r6, lr}
 8006d8a:	460d      	mov	r5, r1
 8006d8c:	4614      	mov	r4, r2
 8006d8e:	4606      	mov	r6, r0
 8006d90:	b118      	cbz	r0, 8006d9a <_putc_r+0x12>
 8006d92:	6983      	ldr	r3, [r0, #24]
 8006d94:	b90b      	cbnz	r3, 8006d9a <_putc_r+0x12>
 8006d96:	f7ff fa47 	bl	8006228 <__sinit>
 8006d9a:	4b13      	ldr	r3, [pc, #76]	; (8006de8 <_putc_r+0x60>)
 8006d9c:	429c      	cmp	r4, r3
 8006d9e:	d112      	bne.n	8006dc6 <_putc_r+0x3e>
 8006da0:	6874      	ldr	r4, [r6, #4]
 8006da2:	68a3      	ldr	r3, [r4, #8]
 8006da4:	3b01      	subs	r3, #1
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	60a3      	str	r3, [r4, #8]
 8006daa:	da16      	bge.n	8006dda <_putc_r+0x52>
 8006dac:	69a2      	ldr	r2, [r4, #24]
 8006dae:	4293      	cmp	r3, r2
 8006db0:	db02      	blt.n	8006db8 <_putc_r+0x30>
 8006db2:	b2eb      	uxtb	r3, r5
 8006db4:	2b0a      	cmp	r3, #10
 8006db6:	d110      	bne.n	8006dda <_putc_r+0x52>
 8006db8:	4622      	mov	r2, r4
 8006dba:	4629      	mov	r1, r5
 8006dbc:	4630      	mov	r0, r6
 8006dbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006dc2:	f7ff b881 	b.w	8005ec8 <__swbuf_r>
 8006dc6:	4b09      	ldr	r3, [pc, #36]	; (8006dec <_putc_r+0x64>)
 8006dc8:	429c      	cmp	r4, r3
 8006dca:	d101      	bne.n	8006dd0 <_putc_r+0x48>
 8006dcc:	68b4      	ldr	r4, [r6, #8]
 8006dce:	e7e8      	b.n	8006da2 <_putc_r+0x1a>
 8006dd0:	4b07      	ldr	r3, [pc, #28]	; (8006df0 <_putc_r+0x68>)
 8006dd2:	429c      	cmp	r4, r3
 8006dd4:	bf08      	it	eq
 8006dd6:	68f4      	ldreq	r4, [r6, #12]
 8006dd8:	e7e3      	b.n	8006da2 <_putc_r+0x1a>
 8006dda:	6823      	ldr	r3, [r4, #0]
 8006ddc:	1c5a      	adds	r2, r3, #1
 8006dde:	6022      	str	r2, [r4, #0]
 8006de0:	701d      	strb	r5, [r3, #0]
 8006de2:	b2e8      	uxtb	r0, r5
 8006de4:	bd70      	pop	{r4, r5, r6, pc}
 8006de6:	bf00      	nop
 8006de8:	08008914 	.word	0x08008914
 8006dec:	08008934 	.word	0x08008934
 8006df0:	080088f4 	.word	0x080088f4

08006df4 <_sbrk_r>:
 8006df4:	b538      	push	{r3, r4, r5, lr}
 8006df6:	4c06      	ldr	r4, [pc, #24]	; (8006e10 <_sbrk_r+0x1c>)
 8006df8:	2300      	movs	r3, #0
 8006dfa:	4605      	mov	r5, r0
 8006dfc:	4608      	mov	r0, r1
 8006dfe:	6023      	str	r3, [r4, #0]
 8006e00:	f7fb fd30 	bl	8002864 <_sbrk>
 8006e04:	1c43      	adds	r3, r0, #1
 8006e06:	d102      	bne.n	8006e0e <_sbrk_r+0x1a>
 8006e08:	6823      	ldr	r3, [r4, #0]
 8006e0a:	b103      	cbz	r3, 8006e0e <_sbrk_r+0x1a>
 8006e0c:	602b      	str	r3, [r5, #0]
 8006e0e:	bd38      	pop	{r3, r4, r5, pc}
 8006e10:	200021d4 	.word	0x200021d4

08006e14 <__sread>:
 8006e14:	b510      	push	{r4, lr}
 8006e16:	460c      	mov	r4, r1
 8006e18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e1c:	f000 f8d6 	bl	8006fcc <_read_r>
 8006e20:	2800      	cmp	r0, #0
 8006e22:	bfab      	itete	ge
 8006e24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006e26:	89a3      	ldrhlt	r3, [r4, #12]
 8006e28:	181b      	addge	r3, r3, r0
 8006e2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006e2e:	bfac      	ite	ge
 8006e30:	6563      	strge	r3, [r4, #84]	; 0x54
 8006e32:	81a3      	strhlt	r3, [r4, #12]
 8006e34:	bd10      	pop	{r4, pc}

08006e36 <__swrite>:
 8006e36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e3a:	461f      	mov	r7, r3
 8006e3c:	898b      	ldrh	r3, [r1, #12]
 8006e3e:	05db      	lsls	r3, r3, #23
 8006e40:	4605      	mov	r5, r0
 8006e42:	460c      	mov	r4, r1
 8006e44:	4616      	mov	r6, r2
 8006e46:	d505      	bpl.n	8006e54 <__swrite+0x1e>
 8006e48:	2302      	movs	r3, #2
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e50:	f000 f868 	bl	8006f24 <_lseek_r>
 8006e54:	89a3      	ldrh	r3, [r4, #12]
 8006e56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e5e:	81a3      	strh	r3, [r4, #12]
 8006e60:	4632      	mov	r2, r6
 8006e62:	463b      	mov	r3, r7
 8006e64:	4628      	mov	r0, r5
 8006e66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e6a:	f000 b817 	b.w	8006e9c <_write_r>

08006e6e <__sseek>:
 8006e6e:	b510      	push	{r4, lr}
 8006e70:	460c      	mov	r4, r1
 8006e72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e76:	f000 f855 	bl	8006f24 <_lseek_r>
 8006e7a:	1c43      	adds	r3, r0, #1
 8006e7c:	89a3      	ldrh	r3, [r4, #12]
 8006e7e:	bf15      	itete	ne
 8006e80:	6560      	strne	r0, [r4, #84]	; 0x54
 8006e82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006e86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006e8a:	81a3      	strheq	r3, [r4, #12]
 8006e8c:	bf18      	it	ne
 8006e8e:	81a3      	strhne	r3, [r4, #12]
 8006e90:	bd10      	pop	{r4, pc}

08006e92 <__sclose>:
 8006e92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e96:	f000 b813 	b.w	8006ec0 <_close_r>
	...

08006e9c <_write_r>:
 8006e9c:	b538      	push	{r3, r4, r5, lr}
 8006e9e:	4c07      	ldr	r4, [pc, #28]	; (8006ebc <_write_r+0x20>)
 8006ea0:	4605      	mov	r5, r0
 8006ea2:	4608      	mov	r0, r1
 8006ea4:	4611      	mov	r1, r2
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	6022      	str	r2, [r4, #0]
 8006eaa:	461a      	mov	r2, r3
 8006eac:	f7fe fc0a 	bl	80056c4 <_write>
 8006eb0:	1c43      	adds	r3, r0, #1
 8006eb2:	d102      	bne.n	8006eba <_write_r+0x1e>
 8006eb4:	6823      	ldr	r3, [r4, #0]
 8006eb6:	b103      	cbz	r3, 8006eba <_write_r+0x1e>
 8006eb8:	602b      	str	r3, [r5, #0]
 8006eba:	bd38      	pop	{r3, r4, r5, pc}
 8006ebc:	200021d4 	.word	0x200021d4

08006ec0 <_close_r>:
 8006ec0:	b538      	push	{r3, r4, r5, lr}
 8006ec2:	4c06      	ldr	r4, [pc, #24]	; (8006edc <_close_r+0x1c>)
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	4605      	mov	r5, r0
 8006ec8:	4608      	mov	r0, r1
 8006eca:	6023      	str	r3, [r4, #0]
 8006ecc:	f7fb fce4 	bl	8002898 <_close>
 8006ed0:	1c43      	adds	r3, r0, #1
 8006ed2:	d102      	bne.n	8006eda <_close_r+0x1a>
 8006ed4:	6823      	ldr	r3, [r4, #0]
 8006ed6:	b103      	cbz	r3, 8006eda <_close_r+0x1a>
 8006ed8:	602b      	str	r3, [r5, #0]
 8006eda:	bd38      	pop	{r3, r4, r5, pc}
 8006edc:	200021d4 	.word	0x200021d4

08006ee0 <_fstat_r>:
 8006ee0:	b538      	push	{r3, r4, r5, lr}
 8006ee2:	4c07      	ldr	r4, [pc, #28]	; (8006f00 <_fstat_r+0x20>)
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	4605      	mov	r5, r0
 8006ee8:	4608      	mov	r0, r1
 8006eea:	4611      	mov	r1, r2
 8006eec:	6023      	str	r3, [r4, #0]
 8006eee:	f7fb fcd6 	bl	800289e <_fstat>
 8006ef2:	1c43      	adds	r3, r0, #1
 8006ef4:	d102      	bne.n	8006efc <_fstat_r+0x1c>
 8006ef6:	6823      	ldr	r3, [r4, #0]
 8006ef8:	b103      	cbz	r3, 8006efc <_fstat_r+0x1c>
 8006efa:	602b      	str	r3, [r5, #0]
 8006efc:	bd38      	pop	{r3, r4, r5, pc}
 8006efe:	bf00      	nop
 8006f00:	200021d4 	.word	0x200021d4

08006f04 <_isatty_r>:
 8006f04:	b538      	push	{r3, r4, r5, lr}
 8006f06:	4c06      	ldr	r4, [pc, #24]	; (8006f20 <_isatty_r+0x1c>)
 8006f08:	2300      	movs	r3, #0
 8006f0a:	4605      	mov	r5, r0
 8006f0c:	4608      	mov	r0, r1
 8006f0e:	6023      	str	r3, [r4, #0]
 8006f10:	f7fb fcca 	bl	80028a8 <_isatty>
 8006f14:	1c43      	adds	r3, r0, #1
 8006f16:	d102      	bne.n	8006f1e <_isatty_r+0x1a>
 8006f18:	6823      	ldr	r3, [r4, #0]
 8006f1a:	b103      	cbz	r3, 8006f1e <_isatty_r+0x1a>
 8006f1c:	602b      	str	r3, [r5, #0]
 8006f1e:	bd38      	pop	{r3, r4, r5, pc}
 8006f20:	200021d4 	.word	0x200021d4

08006f24 <_lseek_r>:
 8006f24:	b538      	push	{r3, r4, r5, lr}
 8006f26:	4c07      	ldr	r4, [pc, #28]	; (8006f44 <_lseek_r+0x20>)
 8006f28:	4605      	mov	r5, r0
 8006f2a:	4608      	mov	r0, r1
 8006f2c:	4611      	mov	r1, r2
 8006f2e:	2200      	movs	r2, #0
 8006f30:	6022      	str	r2, [r4, #0]
 8006f32:	461a      	mov	r2, r3
 8006f34:	f7fb fcba 	bl	80028ac <_lseek>
 8006f38:	1c43      	adds	r3, r0, #1
 8006f3a:	d102      	bne.n	8006f42 <_lseek_r+0x1e>
 8006f3c:	6823      	ldr	r3, [r4, #0]
 8006f3e:	b103      	cbz	r3, 8006f42 <_lseek_r+0x1e>
 8006f40:	602b      	str	r3, [r5, #0]
 8006f42:	bd38      	pop	{r3, r4, r5, pc}
 8006f44:	200021d4 	.word	0x200021d4

08006f48 <memmove>:
 8006f48:	4288      	cmp	r0, r1
 8006f4a:	b510      	push	{r4, lr}
 8006f4c:	eb01 0302 	add.w	r3, r1, r2
 8006f50:	d807      	bhi.n	8006f62 <memmove+0x1a>
 8006f52:	1e42      	subs	r2, r0, #1
 8006f54:	4299      	cmp	r1, r3
 8006f56:	d00a      	beq.n	8006f6e <memmove+0x26>
 8006f58:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f5c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006f60:	e7f8      	b.n	8006f54 <memmove+0xc>
 8006f62:	4283      	cmp	r3, r0
 8006f64:	d9f5      	bls.n	8006f52 <memmove+0xa>
 8006f66:	1881      	adds	r1, r0, r2
 8006f68:	1ad2      	subs	r2, r2, r3
 8006f6a:	42d3      	cmn	r3, r2
 8006f6c:	d100      	bne.n	8006f70 <memmove+0x28>
 8006f6e:	bd10      	pop	{r4, pc}
 8006f70:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006f74:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006f78:	e7f7      	b.n	8006f6a <memmove+0x22>

08006f7a <__malloc_lock>:
 8006f7a:	4770      	bx	lr

08006f7c <__malloc_unlock>:
 8006f7c:	4770      	bx	lr

08006f7e <_realloc_r>:
 8006f7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f80:	4607      	mov	r7, r0
 8006f82:	4614      	mov	r4, r2
 8006f84:	460e      	mov	r6, r1
 8006f86:	b921      	cbnz	r1, 8006f92 <_realloc_r+0x14>
 8006f88:	4611      	mov	r1, r2
 8006f8a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006f8e:	f7ff ba87 	b.w	80064a0 <_malloc_r>
 8006f92:	b922      	cbnz	r2, 8006f9e <_realloc_r+0x20>
 8006f94:	f7ff fa36 	bl	8006404 <_free_r>
 8006f98:	4625      	mov	r5, r4
 8006f9a:	4628      	mov	r0, r5
 8006f9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f9e:	f000 f827 	bl	8006ff0 <_malloc_usable_size_r>
 8006fa2:	42a0      	cmp	r0, r4
 8006fa4:	d20f      	bcs.n	8006fc6 <_realloc_r+0x48>
 8006fa6:	4621      	mov	r1, r4
 8006fa8:	4638      	mov	r0, r7
 8006faa:	f7ff fa79 	bl	80064a0 <_malloc_r>
 8006fae:	4605      	mov	r5, r0
 8006fb0:	2800      	cmp	r0, #0
 8006fb2:	d0f2      	beq.n	8006f9a <_realloc_r+0x1c>
 8006fb4:	4631      	mov	r1, r6
 8006fb6:	4622      	mov	r2, r4
 8006fb8:	f7fe fec2 	bl	8005d40 <memcpy>
 8006fbc:	4631      	mov	r1, r6
 8006fbe:	4638      	mov	r0, r7
 8006fc0:	f7ff fa20 	bl	8006404 <_free_r>
 8006fc4:	e7e9      	b.n	8006f9a <_realloc_r+0x1c>
 8006fc6:	4635      	mov	r5, r6
 8006fc8:	e7e7      	b.n	8006f9a <_realloc_r+0x1c>
	...

08006fcc <_read_r>:
 8006fcc:	b538      	push	{r3, r4, r5, lr}
 8006fce:	4c07      	ldr	r4, [pc, #28]	; (8006fec <_read_r+0x20>)
 8006fd0:	4605      	mov	r5, r0
 8006fd2:	4608      	mov	r0, r1
 8006fd4:	4611      	mov	r1, r2
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	6022      	str	r2, [r4, #0]
 8006fda:	461a      	mov	r2, r3
 8006fdc:	f7fb fc33 	bl	8002846 <_read>
 8006fe0:	1c43      	adds	r3, r0, #1
 8006fe2:	d102      	bne.n	8006fea <_read_r+0x1e>
 8006fe4:	6823      	ldr	r3, [r4, #0]
 8006fe6:	b103      	cbz	r3, 8006fea <_read_r+0x1e>
 8006fe8:	602b      	str	r3, [r5, #0]
 8006fea:	bd38      	pop	{r3, r4, r5, pc}
 8006fec:	200021d4 	.word	0x200021d4

08006ff0 <_malloc_usable_size_r>:
 8006ff0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ff4:	1f18      	subs	r0, r3, #4
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	bfbc      	itt	lt
 8006ffa:	580b      	ldrlt	r3, [r1, r0]
 8006ffc:	18c0      	addlt	r0, r0, r3
 8006ffe:	4770      	bx	lr

08007000 <_init>:
 8007000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007002:	bf00      	nop
 8007004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007006:	bc08      	pop	{r3}
 8007008:	469e      	mov	lr, r3
 800700a:	4770      	bx	lr

0800700c <_fini>:
 800700c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800700e:	bf00      	nop
 8007010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007012:	bc08      	pop	{r3}
 8007014:	469e      	mov	lr, r3
 8007016:	4770      	bx	lr
